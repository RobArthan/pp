#!/bin/sh
# configuration program for the open source edition of ProofPower
#
# configure: this file is part of the ProofPower system
# 
# Copyright (c) 2002 Lemma 1 Ltd.
#
# See the file LICENSE for your rights to use and change this file.
#
# Contact: Rob Arthan < rda@lemma-one.com >
#
# $Id:$
#
# Environment variables may be used to force various decisions:
#
# PPCOMPILER       - if set must be one of POLYML or SMLNJ
#                    (default: if Poly/ML is available use it, else SML/NJ)
# PPMOTIFLINKING   - if set must be one of static or dynamic
#                    (default: dynamic)
# PPTARGETDIR      - if set must identify a directory the user can write to
#                    (default: /usr/share/pp, /usr/local/pp,
#                    /opt/pp, $HOME/pp as appropriate)
#
# (If any of these is an empty string, it is treated as if it were unset).
#
# Works by creating a shell script, install, which captures the decisions
# Makes some sanity checks on the current directory.
#
# Here we go ...
#
give_up(){
	echo configure: $*
	exit 1
}
#
# Find an ML Compiler
#
if	[ "${PPCOMPILER:-}" != "" ]
then	case "$PPCOMPILER" in
		POLYML) T="Poly/ML";;
		SMLNJ)  T="Standard ML of New Jersey";;
		*)	give_up "PPCOMPILER must be one of POLYML or SMLNJ";;
	esac
	echo "Using $T as specified"
elif	which poly
then	echo "Using Poly/ML"
	PPCOMPILER=POLYML
elif	which sml
then	echo "Using Standard ML of New Jersey"
	PPCOMPILER=SMLNJ
else	give_up "cannot find a Standard ML compiler"
fi
#
# Find out how to link Motif
#
if	[ "${PPMOTIFLINKING:-}" != "" ]
then	case "$PPMOTIFLINKING" in
		dynamic) true;;
		static)  true;;
		*)	give_up "PPCOMPILER must be one of POLYML or SMLNJ";;
	esac
else	PPMOTIFLINKING=dynamic
fi
echo "Using $PPMOTIFLINKING linking for Motif as specified"
#
# Find a target directory
#
if	[ "${PPTARGETDIR:-}" == "" ]
then	for parent in /usr/share /usr/local /opt $HOME
	do
		if	[ -d $parent ]
		then	if	[ -d $parent/pp ]
			then	PPTARGETDIR=$parent/pp
				break
			elif	[ mkdir $parent/pp ]
			then	PPTARGETDIR=$parent/pp
				rmdir $PPTARGETDIR
				break
			fi
		fi
	done
	if	[ ! -d "$PPTARGETDIR" ]
	then	give_up "cannot create any of the default installation directories"
	fi
elif	[ ! -d "$PPTARGETDIR" ]
then	( mkdir $PPTARGETDIR; rmdir $PPTARGETDIR ) || \
	give_up "cannot create the directory $PPTARGETDIR"
fi
echo "Using $PPTARGETDIR as the installation target directory"
#
# Look for packages to be installed:
#
CWD=`pwd`
if	[ ! -d src ]
then	give_up "the directory $CWD/src does not exist"
fi
SOMETODO=n
for f in pptex dev xpp hol zed daz
do	if	[ -e src/$f.mkf ]
	then	eval $f=y
		SOMETODO=y
	else	eval $f=n
	fi
done
if	[ $SOMETODO = n ]
then	give_up "cannot find any packages to build in $CWD/src"
fi
#
# Build the script
#
out(){
	echo $* >>install
}
export_it(){
	VAR=$1
	VAL=`eval echo '$'$1`
	echo export $VAR=$VAL >>install
}
>install
chmod +x install
out "#!/bin/sh"
out "# script automatically generated by configure script"
out "# edit this script at your own risk"
export_it PPCOMPILER
export_it PPMOTIFLINKING
export_it PPTARGETDIR
out "cd $CWD/src"
out 'OLD_PATH=$PATH'
out "PATH=.:"'$PATH'
for f in pptex dev xpp hol zed daz
do	if	[ `eval echo '$'$f` = y ]
	then	out "make -f $f.mkf inst"
	fi
done
out "cd $PPTARGETDIR"
out "PATH=$PPTARGETDIR/bin:"'$OLD_PATH'
if	[ $hol = y ]
then	out "install_holdemo >holdemo.log 2>&1"
fi
if	[ $zed = y ]
then	out "install_zeddemo >zeddemo.log 2>&1"
fi
if	[ $daz = y -a $PPCOMPILER=POLYML ]
then	out 'pp_make_database -f -p daz junk$$; rm junk$$.polydb'
fi
