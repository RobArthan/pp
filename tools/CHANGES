================================================================================
$Header: /home/rda/xpp/RCS/CHANGES,v 1.20 2002/12/12 14:19:32 rda Exp rda $

ProofPower Changes History
================================================================================

2.6.3:

PPTex: None

PPXpp:

1) If the end of the text in the journal window is visible and you resize the
window using the sash button in the separator bar above it, the end of the text
will now remain visible so that resizing in this way does not affect the way
the text is scrolled up when new output arrives from the application being run.

2) There is now a read-only option which is set automatically if you open a
file for which you do not have write access. You can also set this option
yourself if you want to be warned about accidental changes to the file
you are working on.

3) Xpp will now warn you if you try to save a file that has been modified by
some other process since it was last opened or saved by xpp.

4) The Reset button in the Options Tool has been replaced by two buttons
labelled Original and Current. Pressing Original sets the values in the
form to the values in force when the xpp session was started (which is
what the Reset button did in earlier versions). Pressing Current sets
the values to the ones currently in force. The settings in the Options
Tool now only take effect when you press the Apply button (in earlier
versions some of the settings took effect as soon as you changed them).

5) Xpp can now be compiled to support the editres protocol.  (Editres is a tool
that lets you examine the widget hierarchy of an X Toolkit application, which
can be useful to help you set X resources). Editres support is not compiled in
by default, since under Linux, a bug in the XFree86 implementation of the Xmu
library needs to be patched for this to be safe. Without the patch, editres
will cause xpp to crash if editres support is compiled in. Editres support is
safe under Solaris.

6) The Status Label in the File Name Bar is now more informative. It now
indicates independently whether the file is new or modified and also indicates
whether the file is read only.

7) The Revert item in the File Menu is now desensitized if the file you
are working on is new (i.e., does not exist in the file system yet).

8) Various optimisations for speed and space have been made. In particular, the
methods used to redraw the journal window visible when it is resized or when
new text arrives have been optimised to reduce unnecessary calculations and
screen refreshes.  This greatly improves performance when the application in
the journal window generates a lot of output and avoids screen flicker and
delays under some window manager operations (in particular, when resizing using
KDE or Gnome/Sawfish with the default settings for resize behaviour).

9) The Palette tool now directs characters to the text window that currently
has the keyboard focus. So, for example, you can use it to enter symbols
into the command line tool.

10) If you use the horizontal layout for an xpp -command session (e.g., by
setting Xpp*mainpanes.orientation to HORIZONTAL in the app-defaults file), you
will find that the panes have been reorganised slightly to give you a few extra
text lines in the journal window.

PPHol:

1) The USER_DATA data type has had a "ref" removed. This change should be
invisible except to those using the very low-level programming interfaces
to the logical kernel (and they will find it makes some operations, such
as check-pointing the state of a theory, easier to code).

PPZed:

PPDaz:

================================================================================

2.6.2:

PPTex: None

PPXpp:

A problem with the undo/redo feature which was causing unpredictable
behaviour has been fixed.

A bug which caused xpp to go into a loop printing an Xt warning message
under some circumstances has been fixed.

The palette tool now throws the keyboard focus back to the script window
after you click on a symbol button. This means that you can interleave
typing and selecting symbols from the palette without needing to
reselect the insertion position in the script window.

PPHol: None

PPZed: None

PPDaz:

A new function delete_script allows you to remove a script from
a compliance argument, e.g., to modify and reload it, without having
to reload scripts that are not dependent on it.

A new flag cn_spark_syntax_warnings is provided which you can
use to enable a check on whether your Ada code conforms to
the context-free grammar given in "High Integrity Ada: the SPARK
Approach".

You can now use block statements freely in code that is not
being processed formally. The rule that a block statement
must appear on its own on the right-hand side of a refinement
or replacement step still applies if you want the block
statement or the declarations in it to be processed formally.

A bug in the handling of subtypes of record types with
discriminant constraints has been fixed.

================================================================================

2.6.1:

This is the first open source release. There are cosmetic changes
to the source of all the packages. A number of bugs and infelicities
in PPXpp have been fixed. The other packages have no functional changes.

================================================================================
2.5.11:

PPTex: None

PPXpp:

1) Xpp now includes the name of the file you are working on in in the window
title bar as well as in the icon title. This is intended to be nicer with twm,
fvwm, KDE, and many other window managers which use the title bar title rather
than the icon title to identify an application.

2) If the application in the xpp journal window dies, the last bit of output
from the application used to get discarded. This omission has been fixed.

3) There is now no limit other than operating system memory limits
on the amount of text that can be executed by the Command/Execute
Selection (Ctrl-X) menu option. (In earlier versions there was a fixed
limit of 40,000 characters).

4) The current line number is displayed in the file name bar next to
the ProofPower logo. This feature may degrade response times when working
with very large files or on slow processors with limited physical
memory. The degradation is imperceptible on, say, files up to 10Mb
on a 450MHz processor with 256Mb of RAM. If you do experience problems,
you can turn off line number tracking by right-clicking on the line
number label.

PPHol:

1) new_flag, new_int_control and new_string_control now gives a warning rather
than a failure in the case where the flag or control already exists. If the
flag ignore_warnings is true, or if you answer `y' interactively when asked
whether to continue, the old flag or control is renamed (by decorating the old
name with 1 or more prime characters) and the new flag or control is added with
the specified name.

PPZed: As for PPHol

PPDaz: As for PPZed plus:

1) Default parameters to functions and procedures are now supported
provided the default expression contains no program variables.

2) Block statements are now supported. Block statements must
occur on their own on the right-hand side of a refinement or
replacement step.

3) The frames of logical constant statements were not being
checked in some circumstances. This bug has been fixed.

4) Record aggregates in qualified expression where the qualifying
type mark is a simple name introduced by a use clause were
not being handled properly (usually resulting in Z type-checking
errors). This bug has been fixed.

5) Incorrect VCs were being generated in some circumstances
where a procedure call was proceeded by other code. This bug
has been fixed.

6) Assertions are supported. An assertion is a kind of specification
statement with no post-condition and no frame introduced by
a capital gamma rather than a capital delta. An assertion is
allowed wherever a statement is allowed.

7) The Poly/ML binaries have been compiled under Poly/ML version
4.3. The new Poly/ML flag PolyML.Compiler.printTypesWithStructureName
is set false by default in the ProofPower ML databases.

8) Renaming of operator symbols where the original name has
no package name prefix is now supported.

================================================================================

2.5.10:

PPTex: None

PPXpp: None

PPHol: None

PPZed:

1) Several new theorems and a new induction tactic have been added
relating to Z sequences (in the theory z_sequences1).

PPDaz:

1) Ada constant declarations are now translated into Z axiomatic
descriptions rather than abbreviation definitions. This makes
the Ada type information in a constant declaration available
for reasoning about the constant.

2) In some circumstances, the checks on accesses to global variables
from procedures in package bodies were previously being circumvented.
This bug has been fixed.

3) Several deficiencies in the treatment of renaming declarations have
been fixed.

4) The treatment of use clauses has been changed to give more generality and a
better fit to the Ada scoping rules. Use clauses no longer give rise to Z
abbreviation definitions.

================================================================================

2.5.9:

PPTex: None

PPXpp: None

PPHol:

1) The efficient dictionary data type (E_DICT) now supports access
functions e_key_lookup, e_key_extend etc. that are more efficient
if the same string is to be used as an index into several dictionaries.

2) A new type of order-preserving dictionaries (OE_DICT) has been
provided. This combines the functionality of the E_DICT and
S_DICT data types.

3) The ML representation of theories has been enhanced
to make a number of operations more efficient. Associated with
this change are three new theory access functions get_defn_dict,
get_thm_dict and get_axiom_dict.

4) A "stopwatch" timer facility has been implemented to make it easier
to time sequences of ML commands that are not packaged up as a function
(see read_stopwatch in the Reference Manual).

5) The sort function (Sort.sort) and the string ordering function
(Sort.string_order) now use more efficient algorithms.

PPZed:

1) There have been code changes to allow for the changed representation
of theories but no functional changes.

PPDaz:

1) A bug has been fixed in the checks on certain constructs that must appear
first in their sequence of statements (see USR504, Compliance Tool Language
Description, section 3.3).

2) The treatment of use clauses has been liberalised.

3) Several bugs in the treatment of renaming clauses have been fixed.

================================================================================

2.5.8:

PPTex: None

PPXpp:

1) It is now possible to undo and redo multiple changes to the file being
edited.

2) An error in the font `holsans10' has been corrected (the Z injection arrow
had the wrong shape) and the appearance of some of the characters has been
improved.

PPHol, PPZed:

1) The Reader/Writer (the preprocessor that converts ProofPower-ML into
Standard ML) has been changed to avoid passing long string literals to the
Standard ML compiler. This results in a significant improvement in performance
when processing very long object language quotations.

PPDaz:

1) The performance of the lexical analyser has been improved. In conjunction
with the PPHol and PPZed  performance improvements this means that it is now
feasible to input large fragments of Ada code without breaking them up into a
large number of separate web clauses.

2) The syntax-check-only mode has been extended to support storage and output
of the Ada program and to support all the Compliance Notation features for
literate programming. Pre- and post-conditions and other fragments of Z in a
script are parsed in this mode but not type-checked.

3) The restriction that aggregates must be given as qualified expressions no
longer applies to aggregates used as the initial values of variables and
constants.

================================================================================

2.5.7:

PPTex: None

PPXpp:

1) The yes/no/cancel dialogue that is popped up when a selection to be executed
does not end in a new-line now works properly.

2) A new font `holsans10' is available. This is a 10-pt sans-serif font that is
suitable for medium resolution screens (e.g., 1024x768 pixels on a 14' or 15'
laptop screen).

PPHol:

1) A bug in the printing of `Q's in file names has been fixed.

PPZed:

None.

PPDaz:

1) Use package clauses and all the forms of renaming declarations other than
exceptions are now supported formally provided they do not introduce duplicate
names into the name space.

2) Ada '95 use type clauses are now supported.

3) Discriminant parts and discriminant constraints are now supported formally.

4) The full Ada syntax for exit, exit-when and return statements is now
supported formally, including return statements in procedures.  The
restrictions that required return statements in particular places in functions
have been dropped.

5) A subprogram declaration for a subprogram whose body will be provided later
in the same declarative part is now supported formally. This includes
full formal support for recursive and mutually recursive procedures and
functions.

6) A package name may now appear more than once in the with clauses at the head
of a compilation unit.

================================================================================

2.5.6:

PPTex: None

PPXpp: None

PPHol:

1) pp_make_database now accepts the parent database name with or
without the compiler/architecture-dependent suffix.

PPZed: None

PPDaz:

1) Capital `Q's are now pretty-printed properly by the Ada output
functions.

2) Capital `Q's in Ada strings are now translated properly.

================================================================================

2.5.5:

PPTex: None

PPXpp:

1) When started with the name of a non-existent file, xpp now gives you an
option to start editing an empty buffer with the file name set to the name of
the non-existent file.

2) A bug in the command-line processing has been fixed: you may now omit the
-file and -command option keywords. "xpp <file> <cmd> <args>" is equivalent to
"xpp -file <file> -comand <cmd> <args>".

3) xpp now sets the environment variable PPLINELENGTH to the width of the
journal window when the command is started or restarted.  This effect can be
overridden by setting the environment variable explicitly before invoking xpp.

PPHol:

1) The function ExtendedIO.execute has been withdrawn and replaced by
ExtendedIO.system.  The interface offered by ExtendedIO.execute did not allow
the spawned process to be reaped properly on termination.  Equivalent
functionality to ExtendedIO.execute is available in the Standard ML Basis
library, if required.

2) The initial value of the line_length integer control is taken from the
environment variable PPLINELENGTH if that is set and contains a decimal integer
greater than 19. This control determines the length of lines produced by
various listing facilities such as print_theory.

3) A number of bugs have been fixed relating to ProofPower-HOL aliases.
undeclare_alias may now be used effectively to hide a constant name.

4) The scripts pp and pp_make_database have had a number of bug fixes and
enhancements. Thanks to Phil Clayton of QinetiQ for many of these.  See the
reference manual pages for these scripts for more details.

5) A number of bugs in the system initialisation functions have been fixed. In
particular, the state of the system controls module (which manages flags,
integer controls and string controls) is properly preserved now.

6) The obsolete script pp_read has been withdrawn and is no longer supplied.

PPZed:

1) The implementation of the Z library no longer undeclares the aliases for the
HOL integer arithmetic operations.

2) Consecutive underscores are now allowed inside Z identifiers.

PPDaz:

1) The symbol for expansion of a statement label (i.e., for an informal
refinement step) has been changed to a refinement sign preceded by an
exclamation mark. This prevents the conceptual overloading of the symbol used
for expanding declaration k-slots, and means that all informal development
steps contain an exclamation mark.

2) SPARK program output function bug fixes: if a formal parameter mode is
omitted in the original Ada code, then it is now printed without an explicit
mode when the program is printed. All forms of loop statement are now pretty
printed correctly as are percent signs in string literals.

3) VC generator fixes: type conversions using the pre-defined real types are
now translated into Z correctly. A bug which prevented the same name being used
for formal parameters of different types in different subprograms under some
circumstances has been fixed.

4) A number of bugs which caused problems to do with the database hierarchy
under Poly/ML have been fixed.

5) A package name may now be given several times in a context clause.

6) The global variable INFORMAL_FUNCTION in the theory cn has been renamed to
Informal_Function to avoid the possibility of a clash with an Ada name.

7) The soundness checks made when the program is printed now allow a function
to end in a case statement without an others part. When the checks fail, the
program is now printed (or output) in its entirety.

8) The array sliding conversion introduced in version 2.5.4 is now also
being applied when array and record aggregates are used to construct
arrays of arrays.

================================================================================
