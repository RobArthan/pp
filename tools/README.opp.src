================================================================================
$Header: /home/rda/opp/RCS/README.opp.src,v 1.17 2003/03/31 11:03:36 rda Exp rda $

This is the README file for the Open ProofPower product suite, version $PPVER
The open source suite comprises the following five packages:

 PPTex - The ProofPower documentation preparation system
 PPDev - The ProofPower developer toolkit
 PPHol - The ProofPower tools supporting specification and proof in HOL
 PPZed - The ProofPower tools supporting specification and proof in Z
 PPXpp - The X/Motif user interface for ProofPower


See the file LICENSE for your rights to use and modify this software.

A sixth package is also available under licence from Lemma 1 Ltd.

 PPDaz - The Compliance Tool which supports specification
         and proof of Ada code using Z.

PPDaz is not part of the open source suite.

ProofPower is Copyright (c) Lemma 1 Limited 2002.

See the CHANGES file for changes in this version.

================================================================================

0. SYSTEM REQUIREMENTS

ProofPower has been developed under x86-Linux, Sparc-Solaris 2.X and
PowerPC-Mac OS X.  You may well be able to compile and run it under other
operating systems in the UN*X family.  Sections 0.1 to 0.6 below describe what
you need to install and run ProofPower.  Section 0.7 is a getting started guide
for setting up a new Mac OS X system ready for the installation.

0.1 Standard ML Compiler

The PPDev, PPHol and PPZed packages are primarily implemented in Standard ML.
They have been built and tested using Poly/ML versions 4.1.2 and 4.1.3 and also
using Standard ML of New Jersey version 110.0.7. 

Poly/ML is the recommended compiler and may be obtained from:

	http://www.polyml.org

Standard ML of New Jersey also works well and may be obtained from:

	http://cm.bell-labs.com/cm/cs/what/smlnj/index.html

Standard ML of New Jersey is not currently available for Mac OS X.

0.2 C Compiler

The PPTex and PPXpp packages are implemented in ANSI C. The GNU C compiler
(gcc) is recommended. GNU C is bundled with all Linux distributions. GNU C is
also included in the Darwin Developer Tools supplied with Mac OS X (see
section 0.7 below).

PPXpp will not compile on Solaris with the C compiler provided as part of
Sun's BSD compatibility package.  If you do not have an ANSI C compiler
installed under Solaris, the GNU C compiler may be obtained via:

	http://gcc.gnu.org/

0.3 X Windows and Motif

PPXpp uses X Windows and the Motif library. You will need Motif version 2.1 or
later. The X Windows software is bundled with Solaris 2.X and with all common
Linux distributions. The Motif runtime and development software you need is
bundled with Solaris 2.X. A beta release of an implementation of X Windows for
Mac OS X is available from Apple and when you have installed this, you can
download compile the necesary Motif software from source (see section 0.7).

Under Linux, PPXpp has been built and tested under the commercial version of
Motif supplied by Metro Link and also under the OpenGroup's free version of
Motif, OpenMotif.  Several vendors who support the OpenMotif initiative provide
binary distributions for OpenMotif which can be downloaded via:

	http://www.opengroup.org/openmotif

We used the Metro Link OpenMotif RPMs which may be obtained from the Downloads
link on the OpenMotif web site or from the Metro Link web site:

	http://www.metrolink.com/products/motif/download.html

You will need to install the runtime and development RPMs to build PPXpp.

PPXpp has also been built using LessTif which is obtainable via:

	http://www.lesstif.org

The OpenMotif or LessTif software you need may also be supplied with your Linux
distribution.

0.4 LaTeX

The ProofPower document preparation system requires the TeX/LaTeX typesetting
software. This comes bundled with most Linux distributions.  The teTeX
implementation of TeX & LaTeX for Linux or Solaris is available from

	http://www.tug.org/tetex/

Tex-Live teTeX for Mac OS X is an easy to install implementation available from:

	http://www.rna.nl/tex.html

If you want the ProofPower documentation in PDF or PostScript format, you will
need either dvipdfm or dvips program to do the conversion from the DVI format
(see discussion of PPDOCFORMAT below).  If you do not have these they can be
obtained via:

	http://www.ctan.org

0.5 Other UN*X Utilities.

Installation of PPHol, PPXpp and  PPZed uses the ex text editor. The
installation script expects ex to be in a directory on your search path. Under
Linux, ex is supplied with the vi-like text editors such as VIM, Elvis or NVI.

Installation of PPXpp uses the nroff text processor. This comes bundled with
Solaris and Mac OS X. It is bundled on some Linux distributions but not all (it
is usually supplied with the distribution, but not all installation options
will install it). It is usually supplied in the groff or groff-for-man packages
or you can find it by searching for groff at:

	http://www.gnu.org

Mac OS X does not include some of the text processing utilities that are used
to build ProofPower. The GNU textutils package provides what is needed
(see section 0.7 below).

0.6 Disc space, Memory and Processor speed

When unpacked, the distribution occupies about 17Mb. Compilation of the full
open source distribution increases this to about 150Mb (for Poly/ML) or 250Mb
(for Standard ML of New Jersey). About 100Mb (Poly/ML) or 125Mb (Standard ML of
New Jersey) of this comprises the original source files and various temporary
files and this can be reclaimed if desired.

The time taken by the compilation and installation depends on your hardware and
the compiler you use. E.g., using Poly/ML it takes about 10 minutes on a
notebook with a 798MHz Pentium III CPU and  256Mb of memory; on the same system
using Standard ML of New Jersey it takes about 25 minutes. ProofPower can be
compiled and installed on quite small systems, e.g., compilation and
installation takes about 3 hours under Poly/ML on a 120 MHz Pentium with 48Mb
of memory. Poly/ML is particularly recommended if your system has limited memory
or a slow CPU.

For Apple PowerPC systems, at least 256Mb of RAM is recommended by Apple for
their X Windows implementation and we endorse this recommendation. ProofPower
can be installed with as little as 128Mb of RAM but the performance will be much
improved if you have more RAM.

0.7 Getting started with Mac OS X 

If you have already set up a typical UN*X and X Windows development environment
on your Mac OS X system, the information in sections 0.1 to 0.5 above should be
sufficient for you to install any extra software that you need to install
ProofPower.  If you have not set up such an environment before, this section
gives a step-by-step guide intended to help someone who is familiar with
installing open source software on other UN*X systems, but is new to Mac OS X.

The process involves downloading about 200Mb of software, so you will need a
fast Internet connection. The following paragraphs give some general information
and then the paragraphs labelled (A) to (G) below give step-by-step details
for the software packages you need to install.

Several items are supplied in disc images. A disc image (filename extension
.dmg) is a file that contains the logical contents of a removable disc like a
CD-ROM.  Double clicking on a disc image file puts an icon on your desk top
that you can open just like the icon of an ordinary disc. When you have
finished with the disc image, control+click on the icon will pop up a menu that
you can use to "eject" it.

Many operations in Mac OS X can be carried out either using the Finder GUI
or using the UN*X command line. To start a terminal emulator to enter UN*X
commands, use the Finder to navigate to the folder /Applications/Utilities
and double click on the Terminal icon. Once you have installed X Windows,
you can then, if you prefer, use xterm as a terminal emulator.

Some files may be supplied in binhex format (filename extension .bin).
Double clicking on a binhex file will start up the Stuffit Expander program
to decode it. Stuffit Expander can also be used to unpack other archive
formats, such as tar files and gzipped files. Alternatively, you can work
with these other formats with the usual UN*X commands, tar, gzip etc.

A) Install the Darwin Developer Tools: "Darwin" is the name of the UN*X
implementation in Mac OS X. The Developer Tools (gcc & much more) are supplied
with Mac OS X, but are not installed by default. To install them open  the
folder /Applications/Installers/Developer Tools, double click on Developer.mpkg
and follow the instructions in the Installer program.

B) Install X Windows: visit http://www.apple.com/macosx/x11 and click on the
download icon and then follow the instructions to download the X11 software and
the X11 SDK. This will give you the disc image files X11UserForMacOSX.dmg and
X11SDK.dmg that you need.  These each contain a .pkg file and double clicking
on the  .pkg file will install the software.

You start X windows by double-clicking on the X11 icon in the /Applications
folder. By default this starts up the Quartz Window Manager and an xterm
session. Put /usr/X11R6/bin on your search path to give you access to the
X Windows binaries so that you can run other X programs from the
xterm command line. 

C) Install Motif: visit http://www.openmotif.org  and follow the instructions
to download the Open Motif 2.2 Source Code (file openMotif-2.2.2.tar.gz).
Unpack the tar archive and follow the instructions in the file
INSTALL.configure.

You are likely to need to make the following two changes after the configure
step: (a) in the file libtool created by the configure script, the flag that
allows shared libraries with undefined symbols to be built should be
"-flat_namespace -undefined suppress" not just "-undefined suppress";
(b) the make file in demos/programs/animate refers to a missing file
animate.c, this is not actually needed and an empty file will do,
so do "touch demos/programs/animate/animate.c".

D) Install Poly/ML: visit http://www.polyml.org and follow the instructions for
downloading and installing Poly/ML 4.1.3 for Mac OS X.  There is no default
convention for the filestore locations of the Poly/ML databases and the driver
program poly on Mac OS X, so put them anywhere convenient. The driver program
will need to be somewhere on your search path when you install ProofPower and
you will need to specify PPPOLYDATABASE=your/chosen/folder/ML_dbase when you do
the ProofPower configure step (see main installation instructions below).

E) Install TeX/LaTeX: visit http://www.rna.nl/tex.html and follow the
instructions for downloading and installing teTeX for Mac OS X. The easiest
thing to do is to download TeX-fat.dmg which includes the latest stable
implementation and the iInstaller program. When you start iInstaller, go to its
Install & Remove tab and click on install. If you get a message saying the
remote package is unavailable, that just means it cannot connect to the
Internet and just clicking Ignore should work. The TeX/LaTeX binaries
end up in /usr/local/teTeX/bin/powerpc-apple-darwin6.4 and that
will need to be on your search path.

F) Install GNU texutils: visit http://www.gnu.org and search for textutils. Go
to the textutils home page and follow the instructions for downloading and
installing textutils. textutils contains text processing utilities like nl
which are needed to build the ProofPower documentation. textutils contains
some programs like cat which are already installed as part of Darwin, but
by default texutils installs into /usr/local/bin, so you won't overwrite the
existing programs if you take the default. Put /usr/local/bin on your search
path.

G) Install transfig: visit http://www.xfig.org and follow the link to the ftp
directory containing transfig-3.2.4.tar.gz. Download and unpack this and follow
the instructions in the README file for building and installing transfig.
transfig is used to convert xfig diagrams into PostScript in building the
ProofPower documentation. You may also like to install the companion
program xfig, but you do not need it just for the ProofPower installation.
By default transfig installs into /usr/X11R6/bin.

1. INSTALLATION

For the open source distribution, the information below supersedes the
installation instructions in the individual README.<product> files that you
will find in the src directory. Those files do contain some useful information
about configuring your user account for the various packages and about using
the software.

As you are reading this file, you have probably already unpacked the gzipped
tar archive. If not, begin by unpacking it, e.g., as follows:

	gunzip -c /tmp/OpenProofPower-$PPVER.tgz | tar xvf -

This may be done in the directory, e.g., /usr/share/pp or /usr/local/pp
or $HOME/pp, in which you intend to install the binaries or in any other
directory of your choice.

After unpacking the distribution, run the configure script. By default, this
will install the software in the first of /usr/share/pp, /usr/local/pp, /opt/pp
and $HOME/pp that looks likely to work. You may alter this choice using the
environment variable PPINSTALLDIR. So, for example, if you have write access to
an existing directory /usr/share/pp, and that is where you want to install the
software just use:

	./configure

If instead, you want to install in /usr/share/pp_latest then use.
	
	PPINSTALLDIR=/usr/share/pp_latest ./configure

There are some other environment variables you may wish to use, e.g., to
install the developer kit, which is not installed by default.  See the comments
at the top of the script configure for more information.  The more commonly
useful of these variables, PPPOLYDBASE, PPDOCFORMAT and PPCOMPILER are also
described below.

If you are using Poly/ML you may need to use the environment variable
PPPOLYDBASE to supply the name of the file containing the Poly/ML compiler
database. This defaults to /usr/lib/poly/ML_dbase, which is appropriate for
Poly/ML installed under Linux using the RPM.  If, for example, you have built
Poly/ML yourself and installed it in $HOME/bin, then you might use:

	PPPOLYDBASE=$HOME/bin/ML_dbase ./configure

The installation process takes a copy of the Poly/ML compiler database where
necessary, so ProofPower users do not need access to the original compiler
database.

The environment variable PPDOCFORMAT may be used to have the documentation
converted from DVI format into PostScript (PPDOCFORMAT=PS) or Portable
Document Format (PPDOCFORMAT=PDF). The configure script generates
an HTML file, index.html, in the doc subdirectory of the installation
directory. This HTML file contains links to the documents in the
format you have selected.

WARNING: the configure script uses the script distclean described below to
clean up the src directory. It will attempt to delete any files or directories
you have created in this directory.

The script configure creates a script install that you may then use to compile
and install the software in your chosen installation directory:

	./install

If you want to install the software in a public directory such as /usr/share/pp
or /opt/pp and do not wish to run install with super-user privileges, the
following approach is recommended: (1) as super-user create the installation
directory and then change its ownership to an unprivileged username. E.g.

	mkdir /usr/share/pp
	chown yourname /usr/share/pp

then (2) under the unprivileged username, run configure and install and then
change the permissions of the installation directory to remove all write access
and so prevent accidental changes to the files in it. (Ordinary users do not
need write access to the files in the installation directory)

	./configure
	./install
	chmod -R -w /usr/share/pp

If you need to copy the installation directory and you are using Poly/ML, you
will need to use the poly command to change the absolute path name parent of
the example databases set up by the installation process (example_hol.polydb
and example_zed.polydb). Alternatively, you can delete these databases and then
rebuild them using the shell scripts install_holdemo and install_zeddemo in the
installation directory.

The install script can be given an option which can be useful if you
are patching an existing installation, e.g., to upgrade just one of the
packages or to convert the documents into a new format. The call

	./install -d

will just install the chosen packages together with the DVI formatted documents
for that package. The call

	./install +d

will just do the document format conversions specified when you ran
configure and generate a new HTML index file.

If you are upgrading one of the packages then run configure using PPTARGETS to
select the package in question and then run install with the -d option. This
will give you the revised versions of any documents for that package in the DVI
format and will preserve your existing HTML index file.  If you now want the
documents in a different format, run configure with PPDOCFORMAT set to PS or
PDF as appropriate and with PPTARGETS set to select all the packages you have
installed and then run install with the +d option. This will convert all the
documents and regenerate the HTML index file.

The compilation and installation processes produce a large number of temporary
file in the src directory. You may remove these using the script distclean:

	./distclean

Alternatively you may now delete the src directory and the directory containing
it (providing you are not using that to hold the binaries).

If the installation fails for some reason, when you have fixed the problem, it
is generally advisable to call ./distclean to tidy up the src directory before
restarting the installation.

WARNING: distclean will try to delete everything in the src directory that is
not part of the original distribution.

You may wish to have ProofPower available under both Poly/ML and Standard ML of
New Jersey, to do this use the PPCOMPILER environment variable to install first
using one compiler and then using the other.  The resulting set-up will default
to using the second compiler you used, but the user will be able to choose
which compiler to use via the PPCOMPILER environnment variable (which can take
the value POLYML or SMLNJ).

2. CONFIGURATION TO USE PROOFPOWER

The individual README.<product> files in the src directory give more detailed
information about the individual packages. Please note that the installation
instructions in these files is superseded by this file, README.opp. The file in
the src directory that you are most likely to find useful is README.xpp, which
gives more information about how to set up xpp to run on your X Windows system
in case the suggestions below do not work for you.

The following gives some example initialisation scripts for simple usage. The
main issues are to set up your shell initialisation script (.bashrc, .profile,
.cshrc) to include the binaries on your search path and to tell TeX and LaTeX
where to find the style files, fonts etc. and to set up your X environment so
that it finds the applications default (resource) files for the xpp program and
the bitmaps that xpp uses. To get at the bitmaps, it will probably do to have a
symbolic link to the bitmaps directory of the installation directory in your
home directory.

Note that the example files below are for Linux, however with suitable
modifications they should work under Solaris provided you take into account the
differences in the installation of X Windows and SML-NJ on your Solaris system
as compared with a typical Linux system (see SOLARIS notes below).

LINUX:

Under Linux, if you install the software into /usr/share/pp, the following
sample shell initialisation file (.profile or .bash_profile) and sample
.xinitrc file should provide a working starting point for the configuration.

==== Sample shell initialisation file for ProofPower under Linux ====

#
# Change the following to the directory where ProofPower was installed
# if necessary
#
PPINSTALLDIR=/usr/share/pp
export PPINSTALLDIR
#
# Point TeX, LaTeX and BibTeX at the tex stuff
#
TEXINPUTS=.:$PPINSTALLDIR/tex:
BIBINPUTS=.:$PPINSTALLDIR/tex:
BSTINPUTS=.:$PPINSTALLDIR/tex:

export TEXFONTS TEXINPUTS BIBINPUTS BSTINPUTS

#
# The following should cause you to pick up the supplied Xpp
# app-defaults file when you run xpp. If you want to customise
# the file, take a copy in $HOME/app-defaults/Xpp, customise the copy
# and change $PPINSTALLDIR below to $HOME.
#
XUSERFILESEARCHPATH=$PPINSTALLDIR/app-defaults/%N:/usr/lib/X11/app-defaults/%N

export XUSERFILESEARCHPATH

SYSPATH=/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin

# assuming poly is in /usr/bin:

PATH=$PPINSTALLDIR/bin:$SYSPATH

# or for SML/NJ:
# PATH=$PPINSTALLDIR/bin:/usr/share/smlnj/bin:$SYSPATH

export PATH

==== End of sample shell initialisation file for ProofPower ====

==== Sample .xinitrc file under Linux ====

xset +fp $PPINSTALLDIR/fonts fp rehash
. /usr/X11R6/lib/X11/xinit/xinitrc

==== End of sample .xinitrc file ====

If you are using xdm, i.e., if X is started up when your system boots and you
log-in via a graphical interface, the first of the above lines in the .xinitrc
file will typically need to be in your shell initialisation file and the second
is not needed.

SOLARIS:

Under Solaris, if you are using Sun's bundled distribution of X Windows, then
you can adapt the Linux examples given above (and in the other README files) by
replacing:

        "/usr/X11R6" by "/usr/openwin"
        "/usr/lib/X11" by "/usr/openwin/lib/X11"
and     "/usr/share/smlnj" by "/usr/local/smlnj".

The .xinitrc file should not be needed but you should put the xset command line
from it in your shell initialisation file.

If you have a custom installation of X Windows, then consult your local systems
administrator for the appropriate directory names etc.

Rob Arthan. Lemma 1 Ltd.

================================================================================
