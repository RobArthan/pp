=IGN
********************************************************************************
imp516.doc: this file is part of the PPDaz system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
% imp516.doc   %Z% $Date: 2008/12/14 16:17:44 $ $Revision: 1.40 $ $RCSfile: imp516.doc,v $
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Implementation: Compliance Tool User Interface}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/IMP516}  %% Mandatory field
\def\SCCSversion{$Revision: 1.40 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2008/12/14 16:17:44 $%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & DAZ Team}
\raggedright{\TPPabstract{This document contains the implementation for the user interface of the compliance tool.}}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issues 1.1-1.5] Initial drafts.
\item[Issue 1.6] Added $CN\_STATE$ and various functions which operate on it.
\item[Issue 1.7] Added support for generating hypertext links.
\item[Issue 1.9] Added $new\_script1$.
\item[Issue 1.10]
   Added conditional compilation labels $FULLVERSION$ and $CUTDOWNVERSION$.
   Added $CUTDOWNVERSION$ dummy versions for \\
   $browse\_vcs$, $output\_z\_document$, $print\_z\_document$
   $open\_theory$ part now only for $FULLVERSION$.
   Added {\it array\_agg\_def}.
\item[Issue 1.11] {\it browse\_vcs} not implemented under SMLNJ.
\item[Issue 1.12]	Added {\it array\_agg\_def}.
\item[Issue 1.13] CTLE II R1/9: SPARK 83 attributes.
\item[Issue 1.14] CTLE II R1/11: nested packages.
\item[Issue 1.15] R0021: domain condition generation.
\item[Issue 1.16] Better support for Qs in output file names.
\item[Issue 1.17] New SPARK program output functions.
\item[Issue 1.18] Now sets up the real basic types from the theory ``cn'' as well as the
integer ones (fixes bug when the real basic types are used in type conversions).
\item[Issue 1.19] Made it a bit more robust.
\item[Issue 1.20] Spring 2002 enhancements: syntax changes for interim release.
\item[Issue 1.21] Stopped {\it print\_spark\_program1} etc. suppressing exceptions.
\item[Issue 1.22] Copyright and banner updates for open source release.
\item[Issue 1.23] DAZ-specific updates to banner for open source release
\item[Issue 1.24] DAZ-specific updates to banner for open source release
\item[Issue 1.25] Script deletion
\item[Issues 1.26, 1.27] Exception logging.
\item[Issue 1.28] VC browser now called using {\it use\_string}.
\item[Issues 1.29] Fixed bug with order of the list in exception logging.
\item[Issue 1.30] The SPARK program is now referred to as the Ada program.
\item[Issue 1.31] Reform of the environments means that there is no longer any initialisation to do here (what was done before is now done in IMP514 instead).
\item[Issue 1.32] Move fix to `Q'  Z document output file name into IMP511.
\item[Issue 1.33] Added {\em create\_package\_spec\_theory}.
\item[Issue 1.34] First clean compile for enhancement 117.
\item[Issue 1.35] Automated state management.
\item[Issue 1.36] Added {\em get\_script\_theories}.
\item[Issue 1.37] Added {\em open\_scope}.
\item[Issue 1.38] Reparametrized {\em new\_script} etc.
\item[Issue 1.39] Can now delete deferred subprograms.
\item[Issue 1.40] Added support for evaluation reports.
\item[Issue 1.41] Removed obsolete CUTDOWNVERSION option.
\end{description}
\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the implementation for the functions which the user requires in order to operate the compliance tool.
The detailed design for this material is in \cite{ISS/HAT/DAZ/DTD516}.
\subsection{Introduction}
See \cite{ISS/HAT/DAZ/DTD516}.
\subsection{Purpose and Background}
See \cite{ISS/HAT/DAZ/DTD516}.
\subsection{Algorithms}
The code provides the interface to functions which are defined in other structures of the implementation.
Any necessary system initialisation is also performed (currently none).

\subsection{Dependencies}
See \cite{ISS/HAT/DAZ/DTD516}.
\subsection{Known Deficencies}
None known.
\subsection{Possible Enhancements}
None.
=TEX
\section{SYSTEM INITIALISATION}
Historically, some processing of the theory ``cn'' was required here, but this is now done in IMP514.
So currently, there is nothing to do here.
=TEX
\section{PREAMBLE}
=SML
structure €ComplianceTool› : ComplianceTool = struct
=TEX
\section{WORKING WITH THE EXCEPTION LOG}
=SML
fun €either_exception_log›  (strm : outstream) (script : string) : bool = (
	let	val old_state = CNZGenerator.get_cn_state();
	in let	val name =
			if	script = "-"
			then	get_current_theory_name()
			else	script;
		val _ = CNZGenerator.set_cn_state (CNZGenerator.get_saved_cn_state name);
		val exn_log = CNZGenerator.get_exception_logs ();
		val exn_list = case s_lookup name exn_log of
				Nil => []
			|	Value exns => exns;
		fun do1 (i, msg) = (
			output(strm,  string_of_int i ^ ") " ^ msg ^ "\n")
		);
		val result = (case exn_list of
			[] => (
				output(strm, get_error_message 516101 [name]);
				output(strm, "\n");
				false
		) |	_ => (
				output(strm, get_error_message 516102 [name]);
				output(strm, "\n");
				map do1 (combine (interval 1 (length exn_list)) (rev exn_list));
				true
		));
	in	CNZGenerator.set_cn_state old_state;
		result
	end	handle ex => (
		CNZGenerator.set_cn_state old_state;
		raise ex
	) end
);
=TEX
=SML
val €print_exception_log› = either_exception_log std_out;
=TEX
=SML
fun €output_exception_log› {script : string, out_file : string} : bool = (
	let	val outs = open_out (translate_for_output out_file);
		val res = either_exception_log outs script;
	in	close_out outs;
		res
	end
);
=TEX
=SML
val €delete_exception_log› : string -> unit = CNZGenerator.delete_exception_log;
=TEX
\section{CREATING NEW LITERATE SCRIPTS}
=SML
fun €new_script› {name : string, unit_type : string} : unit = (
	CNZGenerator.new_script {name=name, unit_type=unit_type};
	WebClauses.reset_hypertext_info()
);

fun €new_script1› {name : string, unit_type : string,
		library_theories : string list} : unit = (
	CNZGenerator.new_script1 {name=name, unit_type=unit_type,
		library_theories = library_theories};
	WebClauses.reset_hypertext_info()
);
fun €new_continuation_script› {name : string, unit_type : string} : unit = (
	CNZGenerator.new_continuation_script {name=name, unit_type=unit_type};
	WebClauses.reset_hypertext_info()
);

fun €new_continuation_script1› {name : string, unit_type : string,
		library_theories : string list} : unit = (
	CNZGenerator.new_continuation_script1 {name=name, unit_type=unit_type,
		library_theories = library_theories};
	WebClauses.reset_hypertext_info()
);

fun €delete_script› {name : string, unit_type : string} : unit = (
	CNZGenerator.delete_script {name=name, unit_type=unit_type};
	WebClauses.reset_hypertext_info()
);
val €delete_deferred_subprogram› : string -> unit = CNZGenerator.delete_deferred_subprogram;
=TEX
\section{OPENING THE SCOPE OF A PACKAGE OR SUBPROGRAM}
=SML
val €open_scope› : string -> unit = CNZGenerator.open_scope;
=TEX
\section{GENERATING A SPARK PROGRAM}
=TEX
=SML
fun €print_ada_program› (script : string) : unit = (
	let	val old_state = CNZGenerator.get_cn_state();
	in	(CNZGenerator.set_cn_state (CNZGenerator.get_saved_cn_state script);
		CNAdaOutput.print_ada_program1();
		CNZGenerator.set_cn_state old_state)
		handle ex => (
			CNZGenerator.set_cn_state old_state;
			CNZGenerator.log_exception ex;
			raise ex
		)
	end
);
=TEX
=SML
fun €output_ada_program› {script : string, out_file : string} : unit = (
	let	val old_state = CNZGenerator.get_cn_state();
	in	(CNZGenerator.set_cn_state (CNZGenerator.get_saved_cn_state script);
		CNAdaOutput.output_ada_program1{out_file = out_file};
		CNZGenerator.set_cn_state old_state)
		handle ex => (
			CNZGenerator.set_cn_state old_state;
			CNZGenerator.log_exception ex;
			raise ex
		)
	end
);
=TEX

\section{GENERATING A Z DOCUMENT}
=SML
val €print_z_document›  : string -> unit =
		CNZOutput.print_z_document;
=SML
val €output_z_document›  : {script : string, out_file : string} -> unit = (fn{script, out_file} =>
	CNZOutput.output_z_document{
		script = script,
		out_file= out_file}
=SML
);
=TEX
=SML
val €get_script_theories› : string -> string list = CNZGenerator.get_script_theories;
=TEX
\section{PREPARING AN EVALUATION REPORT}
=DOC
type €EVAL_REPORT› = CNEvaluationReports.EVAL_REPORT;
val €get_eval_report› :
		{title : string, theories : string list} -> EVAL_REPORT
	= CNEvaluationReports.get_eval_report;
val €print_eval_report› : EVAL_REPORT -> unit
	= CNEvaluationReports.print_eval_report;
val €output_eval_report› : {report : EVAL_REPORT, out_file : string} -> unit
	= CNEvaluationReports.output_eval_report;
val €output_eval_report1› : {report : EVAL_REPORT, out_file : string} -> unit
	= CNEvaluationReports.output_eval_report1;
=TEX
\section{NAVIGATION}
=SML
fun €browse_vcs› (():unit) : unit = (
	use_string "CNVCBrowser.browse_vcs();"
	handle ReaderWriterSupport.Stop =>
	fail "browse_vcs" 516201 []
);
=TEX
\section{HYPERTEXT EDIT SCRIPT}
=SML
val €output_hypertext_edit_script› : {out_file : string} -> unit =
	WebClauses.output_hypertext_edit_script;
=TEX
\section{CONTROLLING THE PARAGRAPH RECOGNISER}
(Nothing to do here; this section of the detailed design is just there to
document a control).
\section{CONTROLLING THE GENERATION OF DOMAIN CONDITIONS}
=SML
val €cn_no_domain_conds› : int = CNBasicDeclsAndExprs.cn_no_domain_conds;
val €cn_standard_domain_conds› : int = CNBasicDeclsAndExprs.cn_standard_domain_conds;
val €cn_all_domain_conds› : int = CNBasicDeclsAndExprs.cn_all_domain_conds;
=TEX
\section{INITIALISATION AND SHUTDOWN -- SUPPORT FUNCTION}
=SML
fun €pending_reset_cn_state› (():unit) : unit -> unit = (
	let	val st = CNZGenerator.get_cn_state();
	in	fn () => CNZGenerator.set_cn_state st
	end
);
=TEX
\subsection{SUPPORT FOR MULTIDIMENSIONAL ARRAYS}
=SML
val €array_agg_def› : int -> unit = CNBasicDeclsAndExprs.array_agg_def;
val _ = (
	open_theory "cn";
	map array_agg_def (interval 2 20)
);
=TEX
\section{EPILOGUE}

=SML
end (* of structure ComplianceTool *);
open ComplianceTool;
=TEX
\section{INITIALISATION AND SHUTDOWN -- SETUP}
This code needs to be outside the structure:
=SML
val €pp'daz_init› : unit -> unit = fn () => ();
val _ = Initialisation.new_init_fun (fn () =>
	use_string "pp'daz_init();"
);
val _ = Initialisation.new_save_fun (fn () =>
	use_string "val pp'daz_init = ComplianceTool.pending_reset_cn_state();"
);

=TEX
\small
\twocolumn[\section{INDEX}]
\printindex
\end{document}
