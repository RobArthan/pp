% imp516.doc   %Z% $Date: 2002/03/01 14:21:16 $ $Revision: 1.18 $ $RCSfile: imp516.doc,v $
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Implementation: Compliance Tool User Interface}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/IMP516}  %% Mandatory field
\def\SCCSversion{$Revision: 1.18 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2002/03/01 14:21:16 $%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & DAZ Team}
\raggedright{\TPPabstract{This document contains the implementation for the user interface of the compliance tool.}}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issues 1.1-1.5] Initial drafts.
\item[Issue 1.6] Added $CN\_STATE$ and various functions which operate on it.
\item[Issue 1.7] Added support for generating hypertext links.
\item[Issue 1.9] Added $new\_script1$.
\item[Issue 1.10] 
   Added conditional compilation labels $FULLVERSION$ and $CUTDOWNVERSION$.
   Added $CUTDOWNVERSION$ dummy versions for \\
   $browse\_vcs$, $output\_z\_document$, $print\_z\_document$ 
   $open\_theory$ part now only for $FULLVERSION$. 
   Added {\it array\_agg\_def}.
\item[Issue 1.11] {\it browse\_vcs} not implemented under SMLNJ.
\item[Issue 1.12]	Added {\it array\_agg\_def}.
\item[Issue 1.13] CTLE II R1/9: SPARK 83 attributes.
\item[Issue 1.14] CTLE II R1/11: nested packages.
\item[Issue 1.15] R0021: domain condition generation.
\item[Issue 1.16] Better support for Qs in output file names.
\item[Issue 1.17] New SPARK program output functions.
\item[Issue 1.18] Now sets up the real basic types from the theory ``cn'' as well as the 
integer ones (fixes bug when the real basic types are used in type conversions).
\item[Issue 1.19] Made it a bit more robust.
\end{description}
\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the implementation for the functions which the user requires in order to operate the compliance tool.
The detailed design for this material is in \cite{ISS/HAT/DAZ/DTD516}.
\subsection{Introduction}
See \cite{ISS/HAT/DAZ/DTD516}.
\subsection{Purpose and Background}
See \cite{ISS/HAT/DAZ/DTD516}.
\subsection{Algorithms}
The code provides the interface to functions which are defined in other structures of the implementation.
Some necessary system initialisation is also performed.

\subsection{Dependencies}
See \cite{ISS/HAT/DAZ/DTD516}.
\subsection{Known Deficencies}
None known.
\subsection{Possible Enhancements}
None.
=TEX
\section{SYSTEM INITIALISATION}
Currently, the only initialisation step required is to use an interface from \cite{ISS/HAT/DAZ/DTD507} to ensure that the names in the theory $cn$ which represent SPARK types are marked as such.
=FULLVERSION
val _ =	
	(open_theory "cn";
	let	fun not_a_basic_type t = not
			(type_of t =: type_of ñú® orelse type_of t =: type_of ñ¯®);
		fun name_of t =  let val (n,_,_) = dest_z_gvar t in n end;
		val tms_to_do = get_consts"cn" drop not_a_basic_type;
		fun do_1_tm t = CNZGenerator.add_spark_type_info(name_of t, []);
	in	map do_1_tm tms_to_do; ()
	end handle Fail _ => ());
=TEX
\section{PREAMBLE}
=SML
structure ÛComplianceToolÝ : ComplianceTool = struct
=TEX
\section{CREATING NEW LITERATE SCRIPTS}
=SML
type ÛCN_STATEÝ = CNZGenerator.CN_STATE;
=TEX
=SML
fun Ûnew_scriptÝ {name : string, state : CN_STATE} : unit = (
	CNZGenerator.new_script {name=name, state=state};
	WebClauses.reset_hypertext_info()
);

fun Ûnew_script1Ý {name : string, state : CN_STATE, 
		library_theories : string list} : unit = (
	CNZGenerator.new_script1 {name=name, state=state, 
		library_theories = library_theories};
	WebClauses.reset_hypertext_info()
);
fun Ûnew_continuation_scriptÝ {name : string, state : CN_STATE} : unit = (
	CNZGenerator.new_continuation_script {name=name, state=state};
	WebClauses.reset_hypertext_info()
);

fun Ûnew_continuation_script1Ý {name : string, state : CN_STATE, 
		library_theories : string list} : unit = (
	CNZGenerator.new_continuation_script1 {name=name, state=state, 
		library_theories = library_theories};
	WebClauses.reset_hypertext_info()
);


val Ûinitial_cn_stateÝ : CN_STATE = CNZGenerator.initial_cn_state;

val Ûget_cn_stateÝ : unit -> CN_STATE =
		CNZGenerator.get_cn_state;

val Ûset_cn_stateÝ : CN_STATE -> unit =
		CNZGenerator.set_cn_state;
=TEX
\section{GENERATING A SPARK PROGRAM}
=SML
val Ûprint_spark_programÝ : unit -> unit =
		CNSparkOutput.print_spark_program;
val Ûoutput_spark_programÝ : {out_file : string} -> unit = (fn {out_file} =>
		CNSparkOutput.output_spark_program{out_file = translate_for_output out_file}
);
=TEX
=SML
fun Ûprint_spark_program1Ý (script : string) : unit = (
	let	val old_state = get_cn_state();
	in	(CNZGenerator.set_cn_state (CNZGenerator.get_saved_cn_state script);
		print_spark_program();
		CNZGenerator.set_cn_state old_state)
		handle ex => (
			CNZGenerator.set_cn_state old_state
		)
	end
);
=TEX
=SML
fun Ûoutput_spark_program1Ý {script : string, out_file : string} : unit = (
	let	val old_state = get_cn_state();
	in	(CNZGenerator.set_cn_state (CNZGenerator.get_saved_cn_state script);
		output_spark_program{out_file = out_file};
		CNZGenerator.set_cn_state old_state)
		handle ex => (
			CNZGenerator.set_cn_state old_state
		)
	end
);
=TEX

\section{GENERATING A Z DOCUMENT}
=SML
val Ûprint_z_documentÝ  : string -> unit =
=FULLVERSION
		CNZOutput.print_z_document;
=CUTDOWNVERSION
                fn s => ();
=SML
val Ûoutput_z_documentÝ  : {script : string, out_file : string} -> unit = (fn{script, out_file} =>
=FULLVERSION
	CNZOutput.output_z_document{
		script = script,
		out_file= translate_for_output out_file}
=CUTDOWNVERSION
               ()
=SML
);
=SML
=TEX
\section{NAVIGATION}
=POLYML
  val Ûbrowse_vcsÝ : unit -> unit = CNVCBrowser.browse_vcs; 
=CUTDOWNVERSION
  val Ûbrowse_vcsÝ : unit -> unit = fn () => ();
=NJML
  val Ûbrowse_vcsÝ : unit -> unit = fn () => ();
=TEX
\section{NAVIGATION}
=SML
val Ûoutput_hypertext_edit_scriptÝ : {out_file : string} -> unit =
	WebClauses.output_hypertext_edit_script;
=TEX
\section{CONTROLLING THE PARAGRAPH RECOGNISER}
(Nothing to do here; this section of the detailed design is just there to
document a control).
\section{CONTROLLING THE GENERATION OF DOMAIN CONDITIONS}
=SML
val Ûcn_no_domain_condsÝ : int = CNBasicDeclsAndExprs.cn_no_domain_conds;
val Ûcn_standard_domain_condsÝ : int = CNBasicDeclsAndExprs.cn_standard_domain_conds;
val Ûcn_all_domain_condsÝ : int = CNBasicDeclsAndExprs.cn_all_domain_conds;
=TEX
\subsection{SUPPORT FOR MULTIDIMENSIONAL ARRAYS}
=SML
val Ûarray_agg_defÝ : int -> unit = CNBasicDeclsAndExprs.array_agg_def;
val _ = (
	open_theory "cn";
	map array_agg_def (interval 2 20)
);
=TEX
\section{EPILOGUE}

=SML
end (* of structure ComplianceTool *);
open ComplianceTool;
=TEX
\small
\twocolumn[\section{INDEX}]
\printindex
\end{document}
