######################################################################
#
#	$Revision: 1.104 $ $RCSfile: daz.mkf,v $ $Date: 2013/09/30 12:44:57 $
#
#	makefile for the DAZ Project
#
######################################################################

# suffixes known
.SUFFIXES: .bmp .pp .dvi .ldd .log .lot .sh .sml .src .tex .tch .ML

# Control for RCS checking out: expand keywords to values only
# (needed for document dates)
COFLAGS=-kv

# default make target.  displays a list of more useful targets

default:
	@echo "The following are some of the more useful make commands:"
	@echo " "
	@echo "make -f hol.mkf inst            - builds and installs the hol files"
	@echo "make -f hol.mkf srcrel          - makes the daz source release"
	@echo "make -f hol.mkf srctgz          - makes tgz of the daz source release"
	@echo "make -f daz.mkf src             - makes the daz source files"
	@echo "make -f daz.mkf bin             - makes binaries plus what is needed to use them"
	@echo "make -f daz.mkf doc             - makes daz user documents"
	@echo "make -f daz.mkf test            - runs the tests"
	@echo "make -f daz.mkf build           - just build the binaries in the current directory"
	@echo "make -f daz.mkf packinglist     - list the daz source file names"
	@echo "make -f daz.mkf evaldocs        - evaluation docs (including the 3 volumes)"
	@echo "make -f daz.mkf typecheck       - typechecks the Z in the designs"
	@echo "make -f daz.mkf spctypecheck    - typechecks the Z in the 3 volumes"
	@echo " "
	@echo "The makefile depends on the PPTex, PPDev, PPHol and PPZed packages"


######################################################################
#
#	Makefile Definitions
#
######################################################################

PRODNAME=PPDaz
SHORTNAME=daz
VERSION=$(shell echo $${PPVER:-`cat version  2>/dev/null || echo XXX.YYY.ZZZ`})
RELDIR=$(shell echo "$${PPTARGETDIR:-../../bld}")
PRODUCT=$(PRODNAME)-$(PPVER)
CWD=$(shell pwd)
HAVERCS=$(shell (test -d RCS && echo y ) || echo n)
DAZMKF=daz.mkf

CACHE_SIZE=$(shell echo $${PPCACHESIZE:-50})

# Compiler specifics:
ifeq ($(PPCOMPILER), POLYML)
# Architecture type (used as a file-name suffix for images)
HEAP_SUFFIX=		polydb
# Command to run ML
RUNML="pp-ml"
MLDBPFX=""
# Command to garbage-collect the database
DBGC="pp-ml"
DBGCARG="-c"
else
# no X/Motif
PPXMOTIF=n
ifeq ($(PPCOMPILER), SMLNJ)
# Architecture type (used as a file-name suffix for images by NJML)
HEAP_SUFFIX=		$(shell eval `.arch-n-opsys`; echo $$HEAP_SUFFIX)
# Command to run ML
RUNML="sml"
MLDBPFX="@SMLload="
# Command to garbage-collect the database
DBGC="echo"
DBGCARG="database garbage collection not needed with SML/NJ"
endif
endif
# Distinctive tag for binary distribution file
BINTAG=$(shell eval `arch-os`; echo $$ARCH-$$OS-$$PPCOMPILER | dd conv=lcase 2>/dev/null)

USER=`/usr/ucb/whoami`

# Directory and file macros
# PPDIR=		/hat/projects/pp0.6
DAZDIR=		/hat/projects/daz
FMUDIR=		/hat/projects/fmu

ZEDDB=		zed.$(HEAP_SUFFIX)
DAZDB=		daz.$(HEAP_SUFFIX)

ifeq ($(PPXMOTIF), y)
XDAZDB=		xdaz.$(HEAP_SUFFIX)
else
XDAZDB=
endif

DAZSPECDB=	dazspc
DAZDBLDD=	daz.ldd
DESREADMEFILE=	README.dazdesdocs

ifeq ($(PPTESTMASTERDB), y)
TESTDB=		$(DAZDB)
else
TESTDB=		dazchild.$(HEAP_SUFFIX)
endif

# directories in the release
RELEASEDIR=	securable_release
BINDIR=		$(RELEASEDIR)/$(ARCH)bin
DOCDIR=		$(RELEASEDIR)/docs
DESIGNDOCDIR=	./dazdocs
APPDEFSDIR=	$(RELEASEDIR)/app-defaults
BITMAPSDIR=	$(RELEASEDIR)/bitmaps

# packing list for the developer source release (target src).
PACKINGLIST=
PACKINGLIST+= XppZTemplates
PACKINGLIST+= XppExtZTemplates
PACKINGLIST+= XppExtZTemplates
PACKINGLIST+= XppDazExtraTemplates
PACKINGLIST+= XppExtDazExtraTemplates
PACKINGLIST+= cnarbada.bmp
PACKINGLIST+= cncompunit.bmp
PACKINGLIST+= cnkslot.bmp
PACKINGLIST+= cnrefine.bmp
PACKINGLIST+= cnreplace.bmp
PACKINGLIST+= cnspecstat.bmp
PACKINGLIST+= daz.bib
PACKINGLIST+= daz.mkf
PACKINGLIST+= dtd013.pp
PACKINGLIST+= dtd035.pp
PACKINGLIST+= dtd501.pp
PACKINGLIST+= dtd502.pp
PACKINGLIST+= dtd503.pp
PACKINGLIST+= dtd504.pp
PACKINGLIST+= dtd505.pp
PACKINGLIST+= dtd506.pp
PACKINGLIST+= dtd507.pp
PACKINGLIST+= dtd508.pp
PACKINGLIST+= dtd509.pp
PACKINGLIST+= dtd510.pp
PACKINGLIST+= dtd511.pp
PACKINGLIST+= dtd512.pp
PACKINGLIST+= dtd513.pp
PACKINGLIST+= dtd514.pp
PACKINGLIST+= dtd515.pp
PACKINGLIST+= dtd516.pp
PACKINGLIST+= dtd517.pp
PACKINGLIST+= dtd518.pp
PACKINGLIST+= dtd530.pp
PACKINGLIST+= hol.svf
PACKINGLIST+= imp013.pp
PACKINGLIST+= imp018.pp
PACKINGLIST+= imp035.pp
PACKINGLIST+= imp501.pp
PACKINGLIST+= imp502.pp
PACKINGLIST+= imp503.pp
PACKINGLIST+= imp504.pp
PACKINGLIST+= imp505.pp
PACKINGLIST+= imp506.pp
PACKINGLIST+= imp507.pp
PACKINGLIST+= imp508.pp
PACKINGLIST+= imp509.pp
PACKINGLIST+= imp510.pp
PACKINGLIST+= imp511.pp
PACKINGLIST+= imp512.pp
PACKINGLIST+= imp513.pp
PACKINGLIST+= imp514.pp
PACKINGLIST+= imp515.pp
PACKINGLIST+= imp516.pp
PACKINGLIST+= imp517.pp
PACKINGLIST+= imp518.pp
PACKINGLIST+= imp530.pp
PACKINGLIST+= int501.pp
PACKINGLIST+= int502.pp
PACKINGLIST+= int503.pp
PACKINGLIST+= int504.pp
PACKINGLIST+= int505.pp
PACKINGLIST+= int506.pp
PACKINGLIST+= int507.pp
PACKINGLIST+= int508.pp
PACKINGLIST+= int509.pp
PACKINGLIST+= int510.pp
PACKINGLIST+= int511.pp
PACKINGLIST+= int512.pp
PACKINGLIST+= int513.pp
PACKINGLIST+= int514.pp
PACKINGLIST+= int515.pp
PACKINGLIST+= int516.pp
PACKINGLIST+= int518.pp
PACKINGLIST+= int519.pp
PACKINGLIST+= int520.pp
PACKINGLIST+= int521.pp
PACKINGLIST+= int522.pp
PACKINGLIST+= int523.pp
PACKINGLIST+= int524.pp
PACKINGLIST+= int525.pp
PACKINGLIST+= mdt501.pp
PACKINGLIST+= mdt503.pp
PACKINGLIST+= mdt504.pp
PACKINGLIST+= mdt505.pp
PACKINGLIST+= mdt507.pp
PACKINGLIST+= mdt508.pp
PACKINGLIST+= mdt509.pp
PACKINGLIST+= mdt512.pp
PACKINGLIST+= mdt517.pp
PACKINGLIST+= mdt518.pp
PACKINGLIST+= mdt530.pp
PACKINGLIST+= usr024.pp
PACKINGLIST+= usr024_data.txt
PACKINGLIST+= usr501.pp
PACKINGLIST+= usr501A.ps
PACKINGLIST+= usr501B.ps
PACKINGLIST+= usr501D.ps
PACKINGLIST+= usr502.pp
PACKINGLIST+= usr503.pp
PACKINGLIST+= usr504.pp
PACKINGLIST+= usr504.th.ex
PACKINGLIST+= wrk501.pp
PACKINGLIST+= wrk503.pp
PACKINGLIST+= wrk507.pp
PACKINGLIST+= wrk513.pp
PACKINGLIST+= hld501.pp # needed to build evaldocs
PACKINGLIST+= hld502.pp # needed to build evaldocs
PACKINGLIST+= hld503.pp # needed to build evaldocs
PACKINGLIST+= wrk509.pp # needed to build evaldocs
PACKINGLIST+= wrk511.pp # needed to build evaldocs
PACKINGLIST+= wrk512.pp # needed to build evaldocs
PACKINGLIST+= sholisvcs.pp # needed to build evaldocs
PACKINGLIST+= README.dazdesdocs # needed to build evaldocs
PACKINGLIST+= spc501.src # daz specification vol. I
PACKINGLIST+= spc502.src # daz specification vol. II
PACKINGLIST+= spc503.src # daz specification vol. III
PACKINGLIST+= wrk523.pp # tools to build the three volumes of specification docs
PACKINGLIST+= wrk524.pp # tools to type-check the three volumes
PACKINGLIST+= mtreport.sh # script to summarise test results


# packing list for user source release
DISTPACKINGLIST=$(PACKINGLIST)

# High Level Design
DAZHLDS=	hld501.pp hld502.pp hld503.pp

# Minutes
DAZMINS=	min001.pp min002.pp min003.pp min004.pp

# Plans
DAZPLNS=	pln002.pp pln003.pp pln004.pp pln005.pp

# User Doc'n
DAZUSRS=   usr501.pp	
DAZUSRS += usr502.pp
DAZUSRS += usr503.pp
DAZUSRS += usr504.pp
DAZUSRDIAGS += usr501A.ps
DAZUSRDIAGS += usr501B.ps
# DAZUSRDIAGS += usr501C.ps
DAZUSRDIAGS += usr501D.ps


# Working
DAZWRKS=	wrk501.pp
DAZWRKS +=	wrk503.pp
DAZWRKS +=	wrk507.pp
DAZWRKS +=	wrk513.pp

# Released working documents to put through daz tests
# (wrk513 used elsewhere; wrk504, wrk505, wrk506. wrk508 are superseded )
DAZWRKTESTDOCS =	wrk501.pp
DAZWRKTESTDOCS +=	wrk503.pp
DAZWRKTESTDOCS +=	wrk507.pp

# QinetiQ source specifications
DAZSOURCE=    spc501.src spc502.src spc503.src

# Detailed Designs, Implementations
DAZSMLDOCS=	dtd501.pp imp501.pp		# Lexical Analyser
DAZSMLDOCS +=	dtd502.pp imp502.pp		# Abstract Syntax
DAZSMLDOCS +=	dtd503.pp imp503.pp		# Parser
DAZSMLDOCS +=	dtd504.pp imp504.pp		# Web Clause Processor
DAZSMLDOCS +=	dtd505.pp imp505.pp		# VC Generator
DAZSMLDOCS +=	dtd507.pp imp507.pp		# Z Generator
DAZSMLDOCS +=	dtd508.pp imp508.pp		# Decl & Exp Generator
DAZSMLDOCS +=	dtd509.pp imp509.pp		# Toolkit Extensions
DAZSMLDOCS +=	dtd510.pp imp510.pp		# SPARK Output
DAZSMLDOCS +=	dtd511.pp imp511.pp		# Z Output
DAZSMLDOCS +=	dtd512.pp imp512.pp		# Reader/Writer
DAZSMLDOCS +=	dtd513.pp imp513.pp		# Volume I Types
DAZSMLDOCS +=	dtd514.pp imp514.pp		# Volume II Types
DAZSMLDOCS +=	dtd516.pp imp516.pp		# User Interface
DAZSMLDOCS +=	dtd517.pp imp517.pp		# Script Proof Support
DAZSMLDOCS +=	dtd518.pp imp518.pp		# Compliance Notation Tactics Etc.
DAZSMLDOCS +=	dtd530.pp imp530.pp		# Evaluation Report Generator

XDAZSMLDOCS =	dtd506.pp imp506.pp		# VC Browser

# Module Tests
DAZMDTS=	mdt501.pp\
		mdt503.pp\
		mdt504.pp\
		mdt505.pp\
		mdt507.pp\
		mdt508.pp\
		mdt509.pp\
		mdt512.pp\
		mdt517.pp\
		mdt518.pp\
		mdt530.pp

# Support files for module tests
DAZMDTSUPP=	dtd515.pp\
		imp515.pp

# Integration Tests
DAZINTS=	int501.pp\
		int502.pp\
		int503.pp\
		int504.pp\
		int505.pp\
		int506.pp\
		int507.pp\
		int508.pp\
		int509.pp\
		int510.pp\
		int511.pp\
		int51I.pp\
		int512.pp\
		int513.pp\
		int514.pp\
		int515.pp\
		int516.pp\
		int518.pp\
		int519.pp\
		int520.pp\
		int521.pp\
		int522.pp\
		int523.pp \
		int524.pp \
		int525.pp

# For preference we run tests on a child of a copy of the master database
# mdt507 and mdt509 have to be run on the master database

ifeq ($(PPTESTMASTERDB), y)
else
$(TESTDB):	$(DAZDB)
		cat $(DAZDB) >dazparent.$(HEAP_SUFFIX)
		pp_make_database -f -p dazparent dazchild

mdt507.ttd: mdt507.sml $(DAZDB)
	@rm -f mdt507.ttd mdt507.err 2>/dev/null
	@echo "Compiling (test)" $<
	- pp -d ./$(DAZDB) -f mdt507.sml -n -- $(MLFLAGS) >mdt507.err
	@mv mdt507.err mdt507.ttd

mdt509.ttd: mdt509.sml $(DAZDB)
	@rm -f mdt509.ttd mdt509.err 2>/dev/null
	@echo "Compiling (test)" $<
	- pp -d ./$(DAZDB) -f mdt509.sml -n -- $(MLFLAGS) >mdt509.err
	@mv mdt509.err mdt509.ttd
endif

# int511.pp q.v. requires special treatment.

int51I.pp:	int511.pp
		LANG=en_GB.UTF-8 sed -e '/511/s/511/51I/g' <int511.pp >int51I.pp

# as does int524.pp

int524.ttd: int524.sml usr501.sml usr503.sml wrk513.sml $(DAZDB)
	@rm -f int524.ttd int524.err 2>/dev/null
	@echo "Compiling (test)" $<
	- pp -d ./$(DAZDB) \
		-f usr501.sml \
		-f usr503.sml \
		-f wrk513.sml \
		-f int524.sml -n -- $(MLFLAGS) >int524.err
	@mv int524.err int524.ttd

# Documents containing Z specifications of the compliance tool.
# This gives the order in which they are type checked.
DAZZEDDOCS=	dtd502.pp\
		dtd514.pp\
		dtd508.pp\
		dtd513.pp\
		dtd505.pp\
		dtd507.pp

# Detailed Design and implementation of the IED test harness
IEDTESTDOCS=	dtd013.pp imp013.pp dtd035.pp imp035.pp

# All the DAZ documents
DAZDOCS=	$(DAZPLNS) $(DAZHLDS) $(DAZINTS) $(DAZMDTS) $(DAZMINS) \
		$(DAZPLNS) $(DAZSMLDOCS) $(DAZUSRS) $(DAZWRKS) $(DAZMDTSUPP) \
		$(XDAZSMLDOCS)

# Variations on the DAZ documents
DAZAUXFILES=	$(DAZDOCS:.pp=.aux)
DAZBBLFILES=	$(DAZDOCS:.pp=.bbl)
DAZBLGFILES=	$(DAZDOCS:.pp=.blg)
DAZDVIFILES=	$(DAZDOCS:.pp=.dvi)
DAZIDXFILES=	$(DAZDOCS:.pp=.idx)
DAZINCFILES=	$(DAZDOCS:.pp=.inc)
DAZLDDFILES=	$(DAZSMLDOCS:.pp=.ldd)
XDAZLDDFILES=	$(XDAZSMLDOCS:.pp=.ldd)
DAZLOGFILES=	$(DAZDOCS:.pp=.log)
DAZLOTFILES=	$(DAZDOCS:.pp=.lot)
DAZSIDFILES=	$(DAZDOCS:.pp=.sid)
DAZSMLFILES=	$(DAZSMLDOCS:.pp=.sml)
XDAZSMLFILES=	$(XDAZSMLDOCS:.pp=.sml)
DAZTCHFILES=	dtd509.tch
DAZTEXFILES=	$(DAZDOCS:.pp=.tex)
DAZTTDFILES=	$(DAZMDTS:.pp=.ttd) \
		$(DAZINTS:.pp=.ttd) \
		$(DAZWRKTESTDOCS:.pp=.ttd) \
		usr504.ttd
DAZTOCFILES=	$(DAZDOCS:.pp=.toc)
DAZZEDFILES=	$(DAZZEDDOCS:.pp=.zed)

DAZMDTSMLS=	$(DAZMDTS:.pp=.sml)
DAZMDTSUPPMLS=	$(DAZMDTSUPP:.pp=.sml)
DAZINTSMLS=	$(DAZINTS:.pp=.sml)
DAZWRKSMLS=	$(DAZWRKS:.pp=.sml)
IEDTESTSMLS=	$(IEDTESTDOCS:.pp=.sml)

# ex file for processing usr504 material
USR504THEX= usr504.th.ex

# character set

PPCHARSET=utf8
export PPCHARSET=utf8
SIEVEVIEW=hol$(PPCHARSET).svf

holutf8.svf: hol.svf
	     pp_file_conv <hol.svf >holutf8.svf

# contents of the DAZ release documentation directory
RELEASEDOCS1  = wrk501.pp
RELEASEDOCS1 += wrk503.pp
RELEASEDOCS1 += wrk507.pp
RELEASEDOCS1 += wrk513.pp

RELEASEDVIS += $(RELEASEDOCS1:.pp=.dvi) $(DAZUSRS:.pp=.dvi)
# Note usr503.pp is a user document, but we DO want its .pp form
# Thus we ensure the below addition doesn't go in RELEASEDVIS twice

RELEASEDOCS += usr503.pp $(RELEASEDOCS1)

RELEASEPSS = usr501.ps

RELEASEPSSAUX += usr501A.ps
RELEASEPSSAUX += usr501B.ps
# RELEASEPSSAUX += usr501C.ps
RELEASEPSSAUX += usr501D.ps

RELEASESMLS += wrk501.sml
RELEASESMLS += wrk503.sml
RELEASESMLS += wrk507.sml
RELEASESMLS += wrk513.sml

RELEASEDOCCONTENTS=	$(RELEASEDOCS) $(RELEASEDVIS) \
			$(RELEASEPSS) $(RELEASEPSSAUX) $(RELEASESMLS)

# The following files will be placed into the secured release of ProofPower

BITMAPFILES += cncompunit.bmp
BITMAPFILES += cnreplace.bmp
BITMAPFILES += cnrefine.bmp
BITMAPFILES += cnspecstat.bmp
BITMAPFILES += cnkslot.bmp
BITMAPFILES += cnarbada.bmp


# contents of the DAZ design documentation directory
DESIGNDOCS += dtd501.pp
DESIGNDOCS += dtd502.pp
DESIGNDOCS += dtd503.pp
DESIGNDOCS += dtd504.pp
DESIGNDOCS += dtd505.pp
DESIGNDOCS += dtd506.pp
DESIGNDOCS += dtd507.pp
DESIGNDOCS += dtd508.pp
DESIGNDOCS += dtd509.pp
DESIGNDOCS += dtd510.pp
DESIGNDOCS += dtd511.pp
DESIGNDOCS += dtd512.pp
DESIGNDOCS += dtd513.pp
DESIGNDOCS += dtd514.pp
DESIGNDOCS += dtd516.pp
DESIGNDOCS += dtd517.pp
DESIGNDOCS += dtd518.pp
DESIGNDOCS += dtd530.pp
DESIGNDOCS += imp505.pp
DESIGNDOCS += imp507.pp
DESIGNDOCS += imp508.pp
DESIGNDOCS += hld501.pp
DESIGNDOCS += hld502.pp
DESIGNDOCS += hld503.pp
DESIGNDOCS += spc501.pp
DESIGNDOCS += spc502.pp
DESIGNDOCS += spc503.pp
DESIGNDOCS += wrk509.pp
DESIGNDOCS += wrk511.pp
DESIGNDOCS += wrk512.pp
DESIGNDOCS += sholisvcs.pp

DESIGNDVIS=	$(DESIGNDOCS:.pp=.dvi)

DESIGNCONTENTS=	$(DESIGNDOCS) $(DESIGNDVIS) $(DESREADMEFILE) \
	derarep5.cls hangind5.sty $(DAZBIB)

# Bibliography files
DAZBIB=		daz.bib
USRSTY=		USR.sty

# Testing tools

TESTTOOLS=      doctch \
                doctds


# Flags for ML compiler.  Currently none
MLFLAGS=

# DAZ database initialisation commands

DAZBANNERCMD= "\
	pp'set_banner (Value (\"ProofPower \"^system_version^\" [Compliance Tool Database]\"));\
	save_and_quit (); "

XDAZCMD= "\
	open SML97BasisLibrary.Prelude; \
	PolyML.Compiler.ml90 := true; \
	PolyML.make \"mlsource/extra/XWindows\"; \
	PolyML.Compiler.ml90 := false; \
	PolyML.make \"mlsource/extra/Motif\"; \
	open PPString ListUtilities; \
	save_and_quit();"

BUILDCACHECMD= "\
	open_theory \"z_language\"; \
	cached_labelled_product_rule $(CACHE_SIZE); \
	repeat pop_pc; \
	open_theory \"cn\"; \
	push_pc \"cn1\"; \
	save_and_quit ();"

######################################################################
#
# Dependencies - determining the order of compilation
#
######################################################################

$(DAZLDDFILES): $(DAZDBLDD)

dtd502.ldd:	imp512.ldd
dtd501.ldd:	imp502.ldd
dtd503.ldd:	imp502.ldd
dtd504.ldd:	imp503.ldd
dtd505.ldd:	imp513.ldd
dtd507.ldd:	imp505.ldd
dtd508.ldd:	imp501.ldd
dtd510.ldd:	imp507.ldd
dtd511.ldd:
dtd512.ldd:
dtd513.ldd:	imp514.ldd
dtd514.ldd:	imp508.ldd
dtd516.ldd:	imp511.ldd
dtd517.ldd:	imp518.ldd
dtd518.ldd:	imp509.ldd
dtd530.ldd:	imp507.ldd

imp501.ldd:	dtd501.ldd
imp502.ldd:	dtd502.ldd
imp503.sml:	imp018.sml
imp503.ldd:	dtd503.ldd imp501.ldd dtd503.grm.sml imp508.ldd
imp504.ldd:	dtd504.ldd imp507.ldd
imp505.ldd:	dtd505.ldd
imp507.ldd:	dtd507.ldd imp513.ldd imp505.ldd imp503.ldd imp511.ldd
imp508.ldd:	dtd508.ldd imp509.ldd
imp509.ldd:	dtd509.ldd
imp510.ldd:	dtd510.ldd
imp511.ldd:	dtd511.ldd
imp512.ldd:	dtd512.ldd
imp513.ldd:	dtd513.ldd
imp514.ldd:	dtd514.ldd dtd509.ldd
imp516.ldd:	dtd516.ldd imp504.ldd imp510.ldd
imp516.ldd:	dtd516.ldd imp504.ldd imp508.ldd imp530.ldd
imp517.ldd:	dtd517.ldd imp509.ldd
imp518.ldd:	dtd518.ldd imp509.ldd
imp530.ldd:	dtd530.ldd imp507.ldd

imp502.sml:	dtd502.pp
imp513.sml:	dtd513.pp
imp514.sml:	dtd514.pp

mdt505.ttd:	dtd515.sml imp515.sml
mdt507.ttd:	dtd516.sml imp516.sml
mdt508.ttd:	dtd515.sml imp515.sml
mdt509.ttd:	dtd035.sml imp035.sml dtd509.tch

int51I.ttd:	int511.ttd

extract_z_para build_z_index.sed qqspec.svf derarep5.cls hangind5.sty: wrk523.sml


######################################################################
#
#	Making Documents
#
######################################################################


$(DAZDVIFILES):	$(DAZBIB)

$(DAZUSRS:.pp=.dvi):	$(DAZBIB) $(USRSTY)

$(USRSTY): usr024.pp $(SIEVEVIEW) usr024_data.tex
	sieve -u -f $(SIEVEVIEW) sml <usr024.pp > usr024.sml
	LANG=C sed -e 's/[ 	]%.*$$//' \
	-e 's/^[ 	][ 	]*//' \
	-e 's/[ 	][ 	]*$$//' usr024.sml > USR.sty


usr024_data.tex: usr024_data.txt
	@sed	-e /PRODUCT/s#PRODUCT#$(PRODUCT)#g \
		-e "/DATETIME/s#DATETIME#`date +'%H:%M:%S %d/%m/%Y'`"#g \
		-e "/YEAR/s#YEAR#`date +'%Y'`"#g \
		<usr024_data.txt >usr024_data.tex

$(RELEASEDVIS):	$(DAZBIB)

smldocs:	$(DAZSMLDOCS) $(XDAZSMLDOCS)

allsmls:	$(DAZSMLFILES) $(DAZMDTSMLS) $(DAZINTSMLS) $(DAZMDTSUPPMLS) $(DAZWRKSMLS)

alldvis:	$(DAZDVIFILES)

allzeds:	$(DAZZEDFILES)

usr501.ps:	usr501.dvi
		dvips -o usr501.ps usr501

cn.thl.pp:	tidy_cn.sml
	pp_list -d ./$(DAZDB) -i tidy_cn.sml cn > cn.thl.pp

tidy_cn.sml:
	echo 'open_theory"cn"; set_flag("ignore_warnings", true); delete_const%SZT%array_agg6%>%;' > tidy_cn.sml

USR501INCS=	dtd516.pp dtd517.pp dtd518.pp dtd509.pp cn.thl.tex
usr501.dvi:	usr501.tex $(USR501INCS) $(DAZUSRDIAGS) $(USRSTY) $(SIEVEVIEW)
	sed -n '/^=DOC/,/^=ENDDOC/p' <dtd516.pp | sieve -u -f $(SIEVEVIEW) tex > usr501E.tex
	sed -n '/^=DOC/,/^=ENDDOC/p' <dtd509.pp | sieve -u -f $(SIEVEVIEW) tex > usr501F.tex
	sed -n '/label{CNT}/,$$ p' <dtd518.pp | \
		sed -n '/^=DOC/,/^=ENDDOC/p' | sieve -u -f $(SIEVEVIEW) tex > usr501G.tex
	sed -n '/^=DOC/,/^=ENDDOC/p' <dtd517.pp | sieve -u -f $(SIEVEVIEW) tex > usr501H.tex
	pptex -f $(SIEVEVIEW) usr501
	texdvi -b usr501 > usr501.dvi.ldd1 </dev/null
	texdvi usr501 > usr501.dvi.ldd2 </dev/null
	texdvi usr501

USR503THDOCS= \
	usr503x1.thl.doc \
	usr503x2.thl.doc \
	usr503x3.thl.doc \
	usr503x4.thl.doc \
	usr503x5.thl.doc \
	usr503x6.thl.doc \
	usr503x7.thl.doc \
	usr503x8.thl.doc \
	usr503x9.thl.doc \
	usr503x10.thl.doc \
	usr503x11.thl.doc \
	usr503x12.thl.doc \
	usr503x13.thl.doc
	
USR503THTEXS= $(USR503THDOCS:.doc=.tex)
	
USR503THPPS= $(USR503THDOCS:.doc=.pp)

$(USR503THTEXS): %.tex: %.pp
	pptex -f $(SIEVEVIEW) $*

$(USR503THPPS): usr503.pp wrk513.sml $(SIEVEVIEW)
	touch $(USR503THDOCS)
	'rm' -f $(USR503THDOCS)
	ppsml -f $(SIEVEVIEW) usr503
	@echo "Compiling (usr503)"
	pp -d ./$(DAZDB) -n \
		-f usr503.sml \
		-f wrk513.sml > usr503.thl.err
	@mv usr503.thl.err usr503.thl.ldd
	
usr503.dvi: usr503.pp $(USR503THTEXS)
	pptex -f $(SIEVEVIEW) usr503
	texdvi -b usr503 > usr503.dvi.ldd1 </dev/null
	texdvi usr503 > usr503.dvi.ldd2 </dev/null
	texdvi usr503

usr504.sml: usr504.pp
	ppsml -f $(SIEVEVIEW) usr504

usr504.ttd: usr504.sml
	pp -n -f usr504 -d ./$(DAZDB) >usr504.err
	@mv usr504.err usr504.ttd

usr504a.tex: usr504.ttd usr504.th.ex dtd509.pp
	sed -n -e '/{SPARK TOOLKIT}/,/{OTHER Z DEFINITIONS}/p' <dtd509.pp | \
        sed -n -e '/Ⓢ/,/■/p'  -e '/┌/,/└/p' -e '/╒/,/└/p' >usr504a.pp
	pptex -e usr504.th.ex -f $(SIEVEVIEW) usr504x[0-9][0-9].th.pp
	pptex -f $(SIEVEVIEW) usr504a.pp

usr504.dvi: usr504a.tex
	pptex -f $(SIEVEVIEW) usr504
	texdvi -b usr504 > usr504.dvi.ldd1 </dev/null
	texdvi usr504 > usr504.dvi.ldd2 </dev/null
	texdvi usr504

######################################################################
#
#	Type-checking the Z Specifications
#
######################################################################

typecheck typecheck.log:  $(DAZZEDFILES)
	pp_make_database -f -p zed $(DAZSPECDB)
	echo '**** DAZ Specification Type-Check Log ****' >typecheck.log
	- for file in $(DAZZEDFILES) ; \
	do \
		echo "Checking " $$file ; \
		echo "Checking " $$file >>typecheck.log ; \
		pp -d $(DAZSPECDB) -f $$file -- $(MLFLAGS) >>typecheck.log ;\
	done
	@if grep 'abandoning file' typecheck.log ; then false; else true; fi

spctypecheck spctypecheck.log: wrk524.sml
	mv wrk524.run.log spctypecheck.log
	@if grep 'abandoning file' spctypecheck.log ; then false; else true; fi


wrk524.sml: spc501.sml spc502.sml spc503.sml

######################################################################
#
#	Creating an indexable database of Z paragraphs
#	from the Z specifications
#
######################################################################

dtdidx.zed:  $(DAZZEDDOCS) build_z_index.sed
	cat $(DAZZEDDOCS) | sed -n -f build_z_index.sed >dtdidx.zed
	
######################################################################
#
#	Creating an indexable database of Z paragraphs
#	from the SPARK toolkit
#
######################################################################

tktidx.zed:  dtd509.pp
	cat dtd509.pp | sed -n -f build_z_index.sed >tktidx.zed

######################################################################
#
#	Special project documents
#
######################################################################

XppDazTemplates:	XppZTemplates XppDazExtraTemplates
	cat  XppZTemplates XppDazExtraTemplates > XppDazTemplates

XppExtDazTemplates:	XppExtZTemplates XppExtDazExtraTemplates
	cat  XppExtZTemplates XppExtDazExtraTemplates > XppExtDazTemplates

######################################################################
#
#	Making a List of Document References
#
######################################################################

refs.pp : $(DAZBIB)
	reflist daz,hatdocs,fmu < daz.bib > refs.pp

######################################################################
#
#	Making Example Literate Scripts
#
######################################################################

allwrks:	$(DAZWRKSMLS)

######################################################################
#
#	Building the Compliance Tool
#
######################################################################
#
#	Building the DAZ database
#

dazbuilt.ldd: $(DAZLDDFILES)
	@ rm -f dazbuilt.ldd
	echo $(BUILDCACHECMD) | \
		PPDATABASENAME=daz $(RUNML) $(MLDBPFX)$(DAZDB) > dazcache.ldd
	$(MAKE) -f daz.mkf dazbannercmd
	@-grep '+++ Compiled' $(DAZLDDFILES)
	date > dazbuilt.ldd

daz dazbuild: dazbuilt.ldd

test:	$(DAZTTDFILES) $(DAZDBLDD) mtreport
	@-grep 'module' $(DAZTTDFILES)
	@-grep 'abandoning file|+++ Compiled.*Failed' $(DAZTTDFILES) || true
	@-grep 'TODO' $(DAZTTDFILES)
	@mtreport $(DAZTTDFILES)

testclean:
	rm -f $(DAZTTDFILES) $(DAZDBLDD) mtreport

dazbannercmd:
	echo $(DAZBANNERCMD) | pp -d ./daz
	$(DBGC) $(DBGCARG) $(DAZDB)

$(DAZDBLDD): $(SIEVEVIEW)
	cat "`findfile $(ZEDDB) "$(PPDATABASEPATH)"`" >$(DAZDB)
	echo "PPBuild.pp'save_name := \"daz\"; save_and_quit();" | pp -d ./$(DAZDB)
	@touch $(DAZDBLDD)

# sieving dtd503 produces two things: dtd503.sml
# and dtd503.grm.sml:

dtd503.sml dtd503.grm.sml:	dtd503.pp $(SIEVEVIEW)
	ppsml -f $(SIEVEVIEW) dtd503

imp503.sml:	dtd503.grm.sml

dtd509.sml:	dtd509.pp
	ppsml -f $(SIEVEVIEW) dtd509

imp512.ldd:	imp512.sml
	@rm -f $@ imp512.err 2>/dev/null
	@echo "Compiling (code) imp512.sml"
	@echo "use \"imp512.sml\"; save_and_quit();" \
		 | pp -d ./daz > imp512.err
	@if egrep -q -i "fail|error" imp512.err; then \
		echo "Compilation failed"; false; else true; fi
	@echo "+++ Compiled imp512.sml: OK (Compilation Run Complete) +++" \
		>>imp512.err
	@mv imp512.err imp512.ldd

ifeq ($(PPXMOTIF), y)
$(XDAZDB):	$(DAZLDDFILES) $(XDAZSMLFILES)
	cat daz.$(HEAP_SUFFIX) > $(XDAZDB)
	echo $(XDAZCMD) | pp -d ./xdaz >xdaz.ldd 2>&1
	pp -d ./xdaz -f dtd506.sml -- $(MLFLAGS) >dtd506.err
	@mv dtd506.err dtd506.ldd
	pp -d ./xdaz -f imp506.sml -- $(MLFLAGS) >imp506.err
	@mv imp506.err imp506.ldd
	@$(DBGC) $(DBGCARG) $(XDAZDB) >imp506.discgarb.ldd
endif

######################################################################
#
#	Testing the Compliance Tool
#
######################################################################
#

$(DAZTTDFILES):	$(IEDTESTSMLS)


dtd502.sml:	dtd502.pp
	PPSMLVIEW=smlonly ppsml -f $(SIEVEVIEW) dtd502
dtd505.sml:	dtd505.pp
	PPSMLVIEW=smlonly ppsml -f $(SIEVEVIEW) dtd505
dtd507.sml:	dtd507.pp
	PPSMLVIEW=smlonly ppsml -f $(SIEVEVIEW) dtd507
dtd508.sml:	dtd508.pp
	PPSMLVIEW=smlonly ppsml -f $(SIEVEVIEW) dtd508
dtd513.sml:	dtd513.pp
	PPSMLVIEW=smlonly ppsml -f $(SIEVEVIEW) dtd513
dtd514.sml:	dtd514.pp
	PPSMLVIEW=smlonly ppsml -f $(SIEVEVIEW) dtd514


evaldocs:	$(DESIGNCONTENTS) $(DAZBIB)
	rm -rf $(DESIGNDOCDIR);\
	mkdir $(DESIGNDOCDIR)
	$(MAKE) -f $(DAZMKF) $(DESIGNDVIS);\
	tar cf - $(DESIGNCONTENTS) | \
			(cd $(DESIGNDOCDIR); tar xvf - ; \
				chmod -w $(DESIGNCONTENTS));

sholisvcs.dvi: sholisvcs.pp
	pptex sholisvcs
	texdvi sholisvcs

######################################################################
#
#	Constructing the release directory
#
######################################################################

reldir:
	if [ "$${PPTARGETDIR:-}" = "" ]; \
	then \
		rm -rf "$(RELDIR)"; \
	fi
	[ -d   "$(RELDIR)" ] || mkdir "$(RELDIR)"
	
bindir:	reldir
	[ -d   "$(RELDIR)"/bin ] || mkdir "$(RELDIR)"/bin
	[ -d   "$(RELDIR)"/app-defaults ] || mkdir "$(RELDIR)"/app-defaults
	[ -d   "$(RELDIR)"/bitmaps ] || mkdir "$(RELDIR)"/bitmaps
	[ -d   "$(RELDIR)"/tex ] || mkdir "$(RELDIR)"/tex
	
dbdir:	reldir
	[ -d   "$(RELDIR)"/db ] || mkdir "$(RELDIR)"/db

docdir:	reldir
	[ -d   "$(RELDIR)"/doc ] || mkdir "$(RELDIR)"/doc

srcdir:	reldir
	[ -d   "$(RELDIR)"/src ] || mkdir "$(RELDIR)"/src

binrel:	bindir dazbuilt.ldd $(XDAZDB) \
	XppDazTemplates XppExtDazTemplates $(BITMAPFILES)
	cp XppDazTemplates XppExtDazTemplates "$(RELDIR)"/app-defaults
	( cd "$(RELDIR)"/app-defaults; \
	  rm -f XppTemplates XppExtTemplates; \
	  ln -s XppDazTemplates XppTemplates; \
	  ln -s XppExtDazTemplates XppExtTemplates )
	cp $(BITMAPFILES) "$(RELDIR)"/bitmaps
	cp $(DAZBIB) "$(RELDIR)"/tex
	chmod -R a-w "$(RELDIR)"
	chmod -R g-w "$(RELDIR)"
	chmod -R u+w "$(RELDIR)"

dbrel: dbdir dazbuilt.ldd
	cp daz.$(HEAP_SUFFIX) "$(RELDIR)"/db
ifeq ($(PPXMOTIF), y)
	cp $(XDAZDB) "$(RELDIR)"/db
endif
	chmod -R a-w "$(RELDIR)"
	chmod -R g-w "$(RELDIR)"
	chmod -R u+w "$(RELDIR)"

build:	dazbuilt.ldd \
	$(SIEVEVIEW) Xpp.ad $(BITMAPFILES)

docrel:	docdir $(RELEASEDOCCONTENTS)
	cp $(RELEASEDOCCONTENTS) "$(RELDIR)"/doc
	chmod -R a-w "$(RELDIR)"
	chmod -R g-w "$(RELDIR)"
	chmod -R u+w "$(RELDIR)"

bininst:	binrel dbrel

inst:	bininst docrel

# useful target to print out the names of all the files in the source release
packinglist:
	@echo $(PACKINGLIST)

######################################################################
#
#	Tidying Up
#
######################################################################

clean:
	rm -f $(DAZAUXFILES) $(DAZBBLFILES) $(DAZBLGFILES)
	rm -f $(DAZDVIFILES) $(DAZIDXFILES) $(DAZINCFILES)
	rm -f $(DAZLDDFILES) $(DAZLOGFILES) $(DAZLOTFILES)
	rm -f $(DAZSIDFILES) $(DAZSMLFILES) $(DAZTTDFILES)
	rm -f $(DAZTEXFILES) $(DAZTOCFILES) $(DAZZEDFILES)
	rm -f $(IEDTESTSMLS)
	rm -f $(DAZINTSMLS) $(DAZMDTSMLS) $(DAZMDTSUPPMLS)
	rm -f $(DAZWRKSMLS)
	rm -f $(SCHEDULEMKF) dtd503.grm.*
	rm -f $(DAZDB) $(TESTDB)
	rm -f XppDazTemplates XppExtDazTemplates
	rm -f *.thl.pp *.thl.tex *.adb *.ads *.tmp
	rm -f *.ldd *.th.pp *.th.tex *.ldd1 *.ldd2 *.ada *.hrf *.zdoc
	rm -f *.sml *.tex *.scr *.polydb *.tch *.zed USR.sty
	rm -f *.lof *.ttd mtreport *.rep.* usr504a.pp *.cmp
	rm -f *.bat *.run.log *.wrn *.diff int51I.pp int512.zip
	rm -f int*.sh int*.ex int*.txt wrk*.ex usr501.ps
	rm -rf dazdocs
	rm -f build_z_index.sed derarep5.cls extract_z_para
	rm -f hangind5.sty qqspec.svf spc501.pp spc502.pp spc503.pp

######################################################################
#
#	Generic Rules
#
######################################################################

# %.ps: %.dvi
# 	dvips -o $@ $<

%.dvi: %.tex $(DAZBIB) $(HATBIB) $(HATBIB)
	texdvi -b $* > $*.dvi.ldd1 </dev/null
	texdvi $* > $*.dvi.ldd2 </dev/null
	texdvi $*

%.ldd: %.sml
	@rm -f $@ $*.err 2>/dev/null
	@echo "Compiling (code)" $<
	@if test `ls -s $(DAZDB) | awk '{print $$1}'` -ge 50000;\
	then $(DBGC) $(DBGCARG) $(DAZDB) >$*.discgarb.ldd;\
	fi
	@pp -d ./daz -f $< -- $(MLFLAGS) >$*.err
	@mv $*.err $@

%.ttd: %.sml $(TESTDB)
	@rm -f $@ $.err 2>/dev/null
	@echo "Compiling (test)" $<
	- pp -d ./$(TESTDB) -f $< -n -- $(MLFLAGS) >$*.err
	@mv $*.err $@

%.sml: %.pp  $(SIEVEVIEW)
	ppsml -f $(SIEVEVIEW)  $<

%.tch: %.pp  dtd035.sml imp035.sml
	pptch -f $(SIEVEVIEW) $*

%.tex: %.pp $(SIEVEVIEW)
	pptex -f $(SIEVEVIEW) $<

%.zed: %.pp $(SIEVEVIEW)
	echo "sieve *.zed"
	sieve -u -f $(SIEVEVIEW) zed < $< >$*.zed

%.doc: %.src  qqspec.svf extract_z_para dtdidx.zed tktidx.zed
	echo "sieve *.doc"
	sieve -f qqspec.svf spcdoc < $< >$*.doc

$(DOCFILES:.doc=) : $$@.tex
	texdvi $@
