=TEX
% usr502.doc  %Z% $Date: 2000/07/08 12:53:09 $ $Revision: 1.20 $ $RCSfile: usr502.doc,v $
% COPYRIGHT (c) International Computers Limited, 1993-97
\def\SCCSissue{$Revision: 1.20 $%
}
\def\ignore#1{}
\documentstyle[11pt,hol1,fleqn,USR]{book}
% temporary measure while waiting for LaTeXe to come along
\def\LaTeXe{\LaTeX$2_{\varepsilon}$}
% Set the following macros as necessary as release
% numbers change.
\def\daztool{Compliance Tool}
% just useful macros
\def\ltm{$^{\rm TM}$}
=IGN
\TPPproject{DAZ PROJECT}
\TPPtitle{Compliance Tool --- Installation and Operation}
\TPPref{DS/FMU/IED/USR502}
\def\SCCSissue{$Revision: 1.20 $%
}
\TPPissue{\SCCSissue}
\TPPdate{\FormatDate{$Date: 2000/07/08 12:53:09 $%
}}
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{Compliance Tool --- Installation and Operation}
\TPPkeywords{}
% \TPPauthors{R.D.~Arthan&WIN01\\A.J.~Hammon&WIN01}
\TPPauthor{D.J.~King&WIN01}
\TPPauthorisation{R.D.~Arthan&HAT Team
}
\TPPabstract{This document describes the contents of release \release{} of the Compliance Tool, and how to install this.}
\TPPdistribution{\begin{tabular}{l}
Library\\
\end{tabular}
}
=TEX
\ftlmargin 0.5in
\ftrmargin 0.5in

\def\SCCSversion{$Revision: 1.20 $%
}
\def\SCCSdate{\FormatDate{$Date: 2000/07/08 12:53:09 $%
}}

\USRmanual{Compliance Tool Installation and Operation}
\USRref{USR502}

\raggedbottom
\ftlinepenalty=9999
\makeindex

\begin{document}

\makeUSRfrontpage

\underscoreoff

% Lines starting `%..' are temporarily commented out.  They may need to be
% reinstated.

%\def\etc{{\it etc.}}
%\def\eg{{\it e.g.}}
%\def\Eg{{\it E.g.}}
%\def\ie{{\it i.e.}}
%\def\Ie{{\it I.e.}}

\chapter*{CONTENTS}

\tableofcontents
\listoftables

\pagebreak

\setcounter{chapter}{-1}

\chapter{ABOUT THIS PUBLICATION} \label{intro}
\section{Purpose}

This document describes the contents of the {\daztool} release {\release}, and provides instructions for its installation and subsequent use.

\section{Readership}

The document is intended to be read by systems administrators before installing the {\daztool}. 

\section{Related Publications}

A bibliography is given at the end of this document.

\begin{itemize}

\item
A description of the installation of {\Product} may be found in:

{\em \ {\INSTALLATION}}.

\item
A guide to using the {\daztool} may be found in:

{Compliance Tool --- User Guide}\cite{ISS/HAT/DAZ/USR501}.

\item
A guide to using the Proof Facilities of the {\daztool} may be found in:

{Compliance Tool --- Proving VCs}\cite{ISS/HAT/DAZ/USR503}.

\item
A language description for the Compliance notation supported by the {\daztool} may be found in:

{Compliance Notation --- Language Description}\cite{ISS/HAT/DAZ/USR504}.

\item
A description of \Product{} may be found in:

{\em \ {\SOFTSERV}},

which also contains a full list of other \Product{} documentation.

\end{itemize}

\section{Prerequisites}

It is necessary for {\Product} to have been installed prior to installing the {\daztool}.

\section{Acknowledgements}
=IGN
The below are taken from Motif 1.2 Users Guide, July 1993
=TEX
Sun Microsystems is a registered trademark of Sun Microsystems Inc.  Sun-3, OpenWindows, Sun-4, SPARCstation, SunOS and Solaris are trademarks of Sun Microsystems Inc.

Motif is a registered trademark of the Open Software Foundation, Inc.

UNIX is a registered trademark of UNIX System Laboratories, Inc.

Poly/ML is an implementation of Standard ML with a few non-standard extensions.  Poly/ML, and its documentation, is copyright Abstract Hardware Limited.  

\TeX{} is copyright of the American Mathematical Society and by Donald E. Knuth.
The \LaTeXe\ distribution tape is copyright the \LaTeX\ 3 project and its individual
authors.

X Window System is a trademark and product of the Massachusetts Institute of Technology.

GCC (Gnu C Compiler) is copyright the Free Software Foundation, Inc.
\Product{} is a trademark of International Computers Ltd.
=IGN
\subsection{Changes History}
\begin{description}
\item[Issue 1.1 (\FormatDate{94/08/26})] First approved issue.
\item[Issue 1.8] Second approved issue.
\item[Issue 1.15] Updated for release 0.7.
\item[Issue 1.16] Updated for release 0.7.1.
\item[Issue 1.17, 1.18] Updated for release 0.8.
\item[Issue 1.19] Updated for release \release.

\end{description}
\section{Changes Forecast}
None.
=TEX

=TEX

\chapter{INTRODUCTION}

This document is a supplement to \INSTALLATION. The {\daztool} software is provided with your release of {\Product}. The installation of the {\daztool} requires that you have already completed the installation of {\Product}.

To perform the installation and testing of {\daztool}, turn to chapter \ref{INSTALL}.

\section{Contents of This Document}

Chapter \ref{RELCONTENT} describes the contents of the release tape.

Chapter \ref{INSTALL} describes the installation of the {\daztool} software.

Section \ref{INSTALLTEST} describes the installation confidence test.

%Chapter \ref{LIMITATIONS} describes the limitations of the {\daztool} software in the current release.


\chapter{RELEASE CONTENTS}
\label{RELCONTENT}

The {\daztool} software is overlaid on the {\Product} installation directory. This section describes the files in the {\Product} installation directory that are specific to the {\daztool}.

The tape which was used to load {\Product} already contains the {\daztool} software and documentation. There is no need to load in any further software from tape -- it is already present in your installation.

The following sections describe the files in the directory structure which are specific to the {\daztool}.

\section{Installation Directory}


The installation directory is the same as the installation directory used when installing {\Product}. This is set by the PPINSTALLDIR shell variable. There are no specific {\daztool} files in this directory --- the {\daztool} software and documentation resides in subdirectories of \$PPINSTALLDIR.


\section{Binaries Directory}\label{BINDIR}

The directory \$PPINSTALLDIR/bin contains the {\daztool} database. When {\Product} is invoked with this database, the Compliance Tool facilities are available. 
The binary files specific to the {\daztool} are described in table~\ref{BINDIRTAB}.

\begin{table}[p]
\begin{center}

\def\LAB#1{\begin{tabular}[t]{@{}l@{}}#1\end{tabular}}

\begin{tabular}{|l|p{4in}|}\hline
Name & Description \\\hline\hline
\LAB{{\tt bin/daz.{\it arch-opsys}.db}}
	&
This file is the master \Product{} database for the Compliance Tool.
{\it arch} depends on the hardware target for the database:
{\tt x86} or {\tt sparc}
{\it opsys} depends on the operating system target: {\tt linux}  or {\tt solaris}.
 \\\hline
\LAB{{\tt bin/sieveview}}
	&
This is a sieveview file which is customised for {\daztool}. It differs from the {\Product} or {\ProductZ} sieve steering file in that it has additional entries for dealing with Compliance Notation.
 \\\hline
\end{tabular}

\end{center}
\caption{Contents of the Binaries Directory\label{BINDIRTAB}}
\end{table}

\section{Documentation Directory}\label{DAZDOCSDIR}
The directory {\tt ./docs} includes the design documentation of the {\daztool}. An example Compliance Notation script is also provided and constitutes the basis for confidence testing of your configuration.
The documentation files specific to the {\daztool} are described in table~\ref{DAZDOCSDIRTAB}.

\begin{table}[p]
\begin{center}

\def\LAB#1{\begin{tabular}[t]{@{}l@{}}#1\end{tabular}}

\begin{tabular}{|l|p{4in}|}\hline
Name & Description \\\hline\hline
\LAB{{\tt ./docs/wrk501.doc}\\
	{\tt ./docs/wrk501.dvi}\\
	{\tt ./docs/wrk501.sml}\\
	{\tt ./docs/wrk503.doc}\\
	{\tt ./docs/wrk503.dvi}\\
	{\tt ./docs/wrk503.sml}\\
	{\tt ./docs/wrk507.doc}\\
	{\tt ./docs/wrk507.dvi}\\
	{\tt ./docs/wrk507.sml}\\
	{\tt ./docs/wrk513.doc}\\
	{\tt ./docs/wrk513.dvi}\\
	{\tt ./docs/wrk513.sml}}
	&
These documents provide examples of Compliance Notation. $wrk501$ is the ``1000 Primes'' example; $wrk503$ includes an example of a document containing several Compliance Notation scripts;
$wrk507$ is an example including complete proofs of a simple calculator program;
$wrk513$ gives proofs for the same example following on from the treatment in \CNPROVINGVCS.
\\\hline
\LAB{{\tt ./docs/usr501.dvi}\\
	{\tt ./docs/usr501.ps}\\
	{\tt ./docs/usr501A.ps}\\
	{\tt ./docs/usr501B.ps}\\
	{\tt ./docs/usr501C.ps}\\
	{\tt ./docs/usr501D.ps}\\
	{\tt ./docs/usr502.dvi}\\
	{\tt ./docs/usr503.doc}\\
	{\tt ./docs/usr503.dvi}\\
	{\tt ./docs/usr503.sml}\\
	{\tt ./docs/usr504.dvi}}
	&
These documents comprise the user documentation for the {\daztool}. $usr501$ is a guide for Using the Compliance Tool; $usr502$ is this installation guide; 
$usr503$ is the guide to the proof tools; and $usr504$ is the Compliance Notation language description.\\\hline
\end{tabular}

\end{center}
\caption{Contents of the Documentation Directory\label{DAZDOCSDIRTAB}}
\end{table}

\section{Application Defaults Directory}\label{APPDDIR}
The directory $./app-defaults$ is  used by Motif for defaults information,
and a sample defaults file for the Compliance Tool is provided.
The application default files specific to the {\daztool} are described in table~\ref{APPDDIRTAB}.

\begin{table}[p]
\begin{center}

\def\LAB#1{\begin{tabular}[t]{@{}l@{}}#1\end{tabular}}
\def\cite#1{\relax}	% Kill references from \TYPESETTING etc.

\begin{tabular}{|l|p{4in}|}\hline
\LAB{{\tt ./app-defaults/Xpp}}
	&
The defaults for {\tt xpp} for use with the {\daztool}.\\\hline
\end{tabular}

\end{center}
\caption{Contents of the Application Defaults Directory\label{APPDDIRTAB}}
\end{table}

\begin{table}[p]
\begin{center}

\def\LAB#1{\begin{tabular}[t]{@{}l@{}}#1\end{tabular}}
\def\cite#1{\relax}	% Kill references from \TYPESETTING etc.

\begin{tabular}{|l|p{4in}|}\hline

\LAB{{\tt ./bitmaps/cnarbada.bmp}\\
	{\tt ./bitmaps/cncompunit.bmp}\\
	{\tt ./bitmaps/cnkslot.bmp}\\
	{\tt ./bitmaps/cnrefine.bmp}\\
	{\tt ./bitmaps/cnreplace.bmp}\\
	{\tt ./bitmaps/cnspecstat.bmp}}
	&
These are the bitmaps representing Compliance Notation constructs in {\tt xpp}'s Templates Tool. \\\hline

\end{tabular}

\end{center}
\caption{Contents of the Bitmaps Directory\label{BITMAPSDIRTAB}}
\end{table}

\section{Bitmaps Directory}\label{BITMAPSDIR}

The directory {\tt ./bitmaps} contains bitmaps which are used by the xpp tool to display the template selection box and any other bitmaps which \Product{} requires.
The bitmap files specific to the {\daztool} are described in table~\ref{BITMAPSDIRTAB}.


\chapter{INSTALLATION}\label{INSTALL}

In the following steps, it is assumed that you are running X and the Motif window manager and that your default shell is the $Bourne$ shell (or one of its derivatives).

\begin{enumerate}
\item
The only installation step required is to create a working {\daztool} database. Login as the user which you used to install {\Product} and check that the shell variable PPINSTALLDIR is set to the location of your {\Product} installation. Then in a command tool, type the following commands.

\begin{verbatim}
cd $PPINSTALLDIR/sun4bin
pp_make_database -p daz daz
\end{verbatim}


\end{enumerate}

\section{Running the Confidence Tests}\label{INSTALLTEST}

The following procedure constitutes the installation confidence test for the {\daztool}.


\begin{enumerate}

\item
Initially, in the installation directory, create a test directory and copy in an example literate script by typing the following:

\begin{verbatim}
mkdir daztest
cd daztest
cp ../docs/wrk501.sml .
\end{verbatim}

\item
To get started, create a {\daztool} database and start up $xpp$ running a session of the {\daztool} on that database by typing the following into a command tool or $xterm$.

\begin{verbatim}
pp_make_database -p daz dazinst
xpp -command pp -d dazinst &
\end{verbatim}


\item
You should now have a {\daztool} session running in the journal area of {\tt xpp}, displaying a banner giving start-of-session information, licensing information and the release number, followed by the {\daztool} prompt: ``{\tt :)}''. (The session may take a minute or so to get started.)

Start up a command line tool in {\tt xpp}, from its {\tt Tools Menu}.

In the command line tool text area type:

\begin{verbatim}
use_file "wrk501";
\end{verbatim}
and hit the execute button.
This will make the tool process the literate script in the file $wrk501.sml$ which is the ``1000 Primes Example''.

The loading of the file should run to completion without error, which takes no longer than 5 minutes on a SPARCstation 1+.

Note that during processing of the script, the SPARK program will have been output to a file called $wrk501.ada$, and the Z document to a file called $wrk501.zdoc$.

\item
Using the $xpp$ File Menu, you may load the file $wrk501.ada$ and have a look at the generated SPARK program.

Similarly, you may load the file $wrk501.zdoc$ and have a look at the generated Z document.

\item
Now load the Z document you have just generated back into the {\daztool}. From the $xpp$ Execute Menu, restart the tool, and when the pop-up window asks for confirmation, hit the $OK$ button.

Next, bring up the command line tool, and type into it the following line:
\begin{verbatim}
use_file"wrk501.zdoc";
\end{verbatim}
and hit the execute button.

This will process the Z document in the file $wrk501.zdoc$ which we have just generated.

The loading of the file should run to completion without error.

\end{enumerate}

This completes the confidence tests and you may wish to delete the directory $daztest$ and its contents.

=TEX
\chapter{CHANGES IN RELEASE \release}\label{CHANGES}

\section{Changes between Release \release{} and 0.9.1}
The following major enhancements have been included:

\begin{enumerate}
\item There is now formal support for multidimensional arrays, including multidimensional
array aggregates (compliant with the SPARK restrictions on the use of aggregates) and
for attributes of these arrays.
\item The logical constant facility has been generalised to allow several logical
constants to be introduced in one refinement step.
The verification conditions generated include a consistency proof obligation (which
was omitted in the previous version of the tool, but was logically required for
soundness in some cases).
\item Assignments to record components now use record update functions that are introduced
for each record type as it is declared. This results in much simpler verification conditions,
particularly for record types with many components.
\item A schema name may now be used in the frame of a specification statement as an abbreviation
for the list of signature variables of the schema.
\item Specification statements involving initial variables were
previously restricted to appearing at the head of a sequence of statements (as were
certain other statement forms: logical constant statements; procedure calls where the
specification statement of the procedure involves initial variables; and, for-loops
where the bounds are not static expressions). This restriction has now been relaxed:
these statement forms may now appear inside if-statements and case-statements at the
head of a sequence of statements.
\item Specification statements are now type-checked as soon as they are encountered
in all contexts and specification statements with initial variables in their
pre-conditions are no longer allowed.
\end{enumerate}

In addition, several minor corrections and enhancements have been made both to
the software and its documentation.

\section{Changes between Release 0.9.1 and 0.8}
{\Product} and the Compliance Tool are now implemented using Standard ML of New Jersey
rather than Poly/ML. The main impact on the Compliance Tool is that the VC Browser
is no longer available.


\section{Changes between Release 0.8 and 0.7.1}

Version 0.8 is the result of a round of enhancements proposed as a result of the evaluation of the Compliance Notation and Tool by Praxis Critical Systems.
These enhancements provide much more flexibility in the use of the tool particularly in specifying and using packages.
The changes are as follows (see {\CNUSERGUIDE} and {\CNNOTATION} for more details):

\begin{enumerate}
\item
A variant
=INLINEFT
new_script1
=TEX
\ of the
=INLINEFT
new_script
=TEX
\ function is provided.
This gives a convenient way of using existing Z specifications in a compliance argument.
\item
Ada package specifications are now type-checked when they are first processed rather than when they are first referred to in a with clause.
\item
Semantic dependencies between compilation units may now be expressed without affecting the Ada code using the new {\em references clause} syntax.
\item
Functions that read the values of global variables are now fully supported.
The syntax for function specification statements has been changed to use
$\Xi$ to introduce the list of global dependencies.
The old syntax for function specification statements using $\Delta$ is no longer supported.
\item
The treatment of auxiliary variables has been improved;
previously, auxiliary variables in one package were not available for use in the bodies of other packages.
This restriction has been removed.
\item
To enable the tool to interwork with Ada compilers that impose restrictions on the length of source lines, a user-controllable line-breaking algorithm has been implemented in the SPARK output function.
\item
The following Ada language features are now supported: variable declarations with initial values, renaming of subprograms in package specifications, and unconstrained subtype declarations.
\item
The representation of Ada program structure in the {\Product} theory hierarchy has been made more uniform.
This has introduced a restriction that only one compilation unit appear in each literate script. Multiple scripts may be presented in one {\Product} document to circumvent this restriction. 
\item
Knuth slots may now be used in the formal development of package specifications.
A restriction on expansion of nested Knuth slots has been relaxed.
\item
Z for the types and constants in a package specification is now generated as the package specification is first processed.
This allows the resulting Z to be used in schemas and other Z paragraphs immediately.
\item
Formal material in, or derived from, the Compliance Notation is now checked for
free variables, and there is also better scope checking in various places.
\item
Effective size constraints on web clauses, and printed documents (whether Z or Ada) have been considerably relaxed.
\item
Various minor bugs and other issues have been addressed.
\end{enumerate}

\section{Changes between Release 0.7.1 and 0.7}

Version 0.7.1 is an interim update to version 0.7 that makes the Compliance Notation syntax more liberal
and corrects some bugs.
The syntax now permits k-slots to be used wherever an annotation may appear.

\section{Changes between Release 0.7 and 0.6}

Version 0.7 is the result of enhancements to the {\daztool} to extend and document the proof
facilities available in 0.6, guided by a sample Compliance Notation specification and the associated proofs.
This involved the provision of some automated proof tools for specific
kinds of proof, and increased theorem support for certain language constructs.

\section{Changes between Release 0.6 and 0.5}

Version 0.6 is the result of enhancements to the {\daztool} to bring it into line with an amended specification produced by DRA in 1995.
The main force of these enhancements is to enable the tool to interwork with other tools for processing SPARK and to increase the range of constructs covered by the tool.

\section{Changes between Release 0.5.1 and 0.5}

Version 0.5.1 was an interim release containing a number of bug fixes.

\section{Release 0.5}

Version 0.5 of {\Product} was the first release to include the {\daztool}.

=IGN
\chapter{KNOWN DEFICIENCIES}\label{DEFICIENCIES}
=TEX

\chapter*{REFERENCES}
\addcontentsline{toc}{chapter}{REFERENCES}

\bibliographystyle{fmu}
\bibliography{fmu,daz} 

%\twocolumn[\chapter*{INDEX}]
%\addcontentsline{toc}{chapter}{INDEX}
%\small
%\printindex
\end{document}
