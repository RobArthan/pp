% @(#) 95/01/05 1.2 int507.doc

=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Variable Capture Test Material}  %% Mandatory field
\def\TPPheadtitle{Variable Capture Test Material}
\TPPref{ISS/HAT/DAZ/INT507}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}  %% Mandatory field (with sensible default)
\TPPstatus{Informal}
%\TPPstatus{Informal}
\TPPtype{Technical}
%\TPPkeywords{HOL}
\TPPauthor{A.C.~Hayward & HAT Team}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & WIN01}
\TPPabstract{%
This document gives a number of compliance notation scripts testing error cases.
}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library}}

%\TPPclass{CLASSIFICATION}
\newfont{\icllogo}{icllogo50}
\def\TPPheadlhs{$\vcenter{\halign{##\cr\icllogo ICL\cr}}$}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\pagebreak
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'

\begin{description}

\item[Issue 1.1-1.$Revision$%
] Initial Drafts.

\end{description}

\subsection{Changes Forecast}

None.

\pagebreak

\section{GENERAL}

\subsection{Scope}

This document contains test data for the Compliance Tool as specified in \cite{ISS/HAT/DAZ/HLD501}.

\subsection{Introduction}

This document contains a number of compliance notation scripts to test error cases concerned with variable capture.
It is based on the examples in \cite{DRA/CIS/CSE3/SWI/WP/11/1}.

\section{LITERAL SCRIPTS}

\subsection{Setting up of the enivronment}

Set up flags so the compliance tool works correctly .

=SML
set_flags [("z_type_check_only", false),("z_use_axioms", true)];
=TEX

Load the test harness.

=SML
use_file "dtd013";
use_file "imp013";
=TEX

=TEX

\subsection{First literal script}

=SML
new_script {name="int507A", state=initial_cn_state};
=TEX

=SML
fun var_capt_1 () =
¹CN
procedure P is
   A : INTEGER;
   procedure Q
   „ A [A = 3]
   is
      A : INTEGER;
   begin
      A := 3;
   end Q;
begin
   „ A [A = 5]
end P;
°
=GFT Compliance Notation Example
Ã  A := 10;
   Q;
   A := A + 2;
°
=SML
store_mt_results mt_run_fail [
	("var-capt.1", var_capt_1, (), gen_fail_msg "check_new_spark_ids" 505074 ["A"])
];
val int507A_state = get_cn_state();
=TEX

\section{LITERATE SCRIPT 2}

=SML
new_script{name="int507B", state=int507A_state};
=TEX

=SML
fun var_capt_2 () = 
¹CN
procedure P is
   A : INTEGER;
   function F return INTEGER
   „ [F = 3]
   is
   begin
      return 3;
   end F;
   procedure Q
   „ A [A = F]
   is
      F : INTEGER;
   begin
      F := 20;
      A := F;
   end Q;
begin
   „ A [A = 7]
end P;
°
=GFT Compliance Notation Example
Ã  Q;
   A := A + 4;
°
=SML
store_mt_results mt_run_fail [
	("var-capt.2", var_capt_2, (), gen_fail_msg "check_new_z_id" 505074 ["F"])
];
val int507B_state = get_cn_state();
=TEX

\section{LITERATE SCRIPT 3}

=SML
new_script{name="int507C", state=int507B_state};
=TEX

¹CN
procedure P is
   A, B : INTEGER;
begin
   A := 7;
   B := 1;
   „ A, B [A = A‰0 + 2 ± B = B‰0 + 10]				(1)
end P;
°

¹CN
(1) Ã con X : ú · „ A, B [X = A, A = X + 2 ± B = B‰0 + 10]	(2)
°

=SML
fun var_capt_3 () = 
¹CN
(2) Ã con X : ú · „ A, B [X = B, A = X + 2 ± B = X + 10]	(3)
°
=GFT Compliance Notation Example
(3) Ã
      A := B + 2;
      B := B + 10;
°

=SML
store_mt_results mt_run_fail [
	("var-capt.3", var_capt_3, (), gen_fail_msg "check_new_z_id" 505074 ["X"])
];
val int507C_state = get_cn_state();
=TEX

\section{LITERATE SCRIPT 4}

=SML
new_script{name="int507D", state=int507C_state};
=TEX

¹CN
procedure P is
   A, X : INTEGER;
begin
   A := 17;
   X := 11;
   „ A [A = A‰0 + X]					(1)
end P;
°

=SML
fun var_capt_4 () =
¹CN
(1) Ã con X : ú · „ A [X = A, A = X + X]		(2)
°

=GFT Compliance Notation Example
(2) Ã A := A + A;
°

=SML
store_mt_results mt_run_fail [
	("var-capt.4", var_capt_4, (), gen_fail_msg "check_new_z_id" 505074 ["X"])
];
val int507D_state = get_cn_state();
=TEX

\section{LITERATE SCRIPT 5}

=SML
new_script{name="int507E", state=int507D_state};
=TEX

¹CN
package STACK is
   auxiliary S : seq ú;
   auxiliary MAX : î;
   procedure PUSH (X : in INTEGER)
   „ S, MAX [MAX = MAX‰0 + 1 ± S = S‰0 « {MAX í X}];
end STACK;
°

=SML
fun var_capt_5 () =
¹CN
package body STACK is
   using
   subtype STACK_RANGE is INTEGER range 1..10;
   type STACK_TYPE is array (STACK_RANGE) of INTEGER;
   S : STACK_TYPE;
   implement S by S = S;
   using
   subtype TOP_RANGE is INTEGER range 0..10;
   TOP : TOP_RANGE;
   implement MAX by MAX = TOP;
   procedure PUSH (X : in INTEGER)
   „ TOP [TOP = TOP‰0 + 1]
   is
   begin
      TOP := TOP + 1;
   end PUSH;
begin
   TOP := 0;
end STACK;
°

=SML
store_mt_results mt_run_fail [
	("var-capt.5", var_capt_5, (), gen_fail_msg "check_new_z_id" 505074 ["S"])
];
=TEX

\section{EPILOGUE}
=SML
diag_line (summarize_mt_results());
=TEX

\twocolumn[\section{INDEX OF DEFINED TERMS}]
\printindex
\end{document}

