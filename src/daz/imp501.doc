% imp501.doc   %Z% $Date$ $Revision$ $RCSfile$
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Implementation: Compliance Notation Lexical Analyser}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/IMP501}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{D.J.~King & DAZ Team Leader}
\TPPabstract{
This document contains the implementation for the CN 
parser.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issues 1.1-1.22] Initial Versions.
\item[Issue 1.23 (7th October 1994)] Added support for auxiliary expressions.

\end{description}
\subsection{Changes Forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the implementation for the lexical analyser and the
lexis for CN.
The detailed design for this material is in \cite{ISS/HAT/DAZ/DTD501}.

\subsection{Introduction}

\subsection{Purpose and Background}

\subsection{Algorithms}

\subsection{Dependencies}

\subsection{Known Deficencies}

\subsection{Possible Enhancements}

\section{CASE INDEPENDENCE}
=SML
structure €CaseIndependence› : CaseIndependence = struct
=TEX
=SML
val ordA = ord "A";
val orda = ord "a";
val ordQ = 81 (* explicit because R/Writer converts Qs. *);
=TEX
=SML
fun €to_lower› (s : string) : string = (
let	fun aux1 (all as (c1::c2::c3::rest)) = (
		if ord c1 = ordQ andalso ord c2 = ordQ andalso ord c3 = ordQ
		then
			("q", rest)
		else
			("", all)
	) | aux1 other = ("", other);
	fun aux (c::rest) = (
		if ord c = ordQ then 
			let	val (c', rest') = aux1 rest;
			in
				c'::aux rest'
			end
		else
		if c >= "A" andalso c <= "Z"
		then
			(chr(ord c - ordA + orda))::aux rest
		else
			c::aux rest
	) | aux _ = [];
in
	(implode o aux o explode) s
end);
=TEX
=SML
fun €to_upper› (s : string) : string = (
	let fun aux ch = (
		if ch = "q" then "Q"
		else
		if ch >= "a" andalso ch <= "z"
		then chr(ord ch - orda + ordA)
		else ch
		);
	in implode (map aux (explode s))
	end
);
=TEX
=SML
val €name_cache› : string E_DICT ref = ref initial_e_dict;
=TEX
=SML
fun €get_internal_name› (n : string) : string = (
	let	val ln = to_upper n;
		val side = case e_lookup ln (!name_cache) of
				Nil => name_cache := e_enter ln n (!name_cache)
				| Value ns =>
					if n = ns then ()
					else comment "CN-Parser" 501100
					[fn()=>n,fn()=>ns];
	in
		ln
	end
);
=TEX
=IGN
get_internal_name "thing";
get_internal_name "Thing";
get_internal_name "ThIng";

=SML
fun €get_external_name› (n : string) : string = (
	let	val ln = to_upper n;
	in
		case e_lookup ln (!name_cache) of
		Nil => n
		| Value ns => ns
	end
);
=TEX
=IGN
get_external_name"thing";
get_external_name"thINg";
get_external_name"FReD";
=TEX
=SML
end; (* of structure CaseIndependence *)
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\section{LEXICAL ANALYSER}
=SML
structure €CNLex› : CNLex = struct
	open CNTypes CaseIndependence Lex ZLex;
=TEX
The main lexical analysis algorithm is exception-driven
using the following local exception:
=SML
exception €Unrecognised›;
=TEX
A state, $LEX\_STATE$, is used by most of the lexical analysis
functions. The state is in two parts: first, the characters not yet tokenised,
actually a list of strings of single characters produced by exploding
the input text; second, the token immediately preceeding the first
part.  The token may not be recognised (yet) so the token part of the
state carries a success indicator.  On entry to an analysis function
the state will be ``$(chars, (Unknown, \hbox{``''}))$''.
=SML
datatype €SUCCESS› = €Known› of string | €Unknown›;

type €LEX_STATE›  = (string list) * SUCCESS;
=TEX
\subsection{Utilities}
$collect$ adds the first character of the untokenised input text into the current token.
=SML
fun €collect› ( cstk : LEX_STATE ) : LEX_STATE = (
	case cstk of
		(c :: cs, Known s) => (cs, Known(s ^ c))
	|	(c :: cs, Unknown) => (cs, Known c)
	|	_ => error "CN-Parser" 15004 []
);
=TEX
We need various character classifying functions:
=SML
=TEX
=SML
val €ord0›	= ord "0";
val €ord9›	= ord "9";
val €orda›	= ord "a";
val €ordA›	= ord "A";
val €ordz›	= ord "z";
val €ordZ›	= ord "Z";
=TEX
=SMLPLAIN
fun €is_percent› (c : string) = c = "%%";
fun €is_prime› (c : string) = c = "'";
fun €is_us› (c : string) = c = "_";
fun €is_e› (c : string) = c = "E" orelse c = "e";
fun €is_plusminus› (c : string) = c = "+" orelse c = "-";
fun €is_dot› (c : string) = c = ".";
fun €is_hash› (c : string) = c = "#";
fun €is_space› c = c <= " ";
=TEX
=SML
fun €is_digit›  (d : string) = (
	let	val ordd = ord d
	in	(ordd >= ord0) andalso (ordd <= ord9)
	end
);
=TEX
=SML
fun €is_alpha›  (c : string) = (
	let	val ordc = ord c
	in		((ordc >= orda) andalso (ordc <= ordz))
		orelse	((ordc >= ordA) andalso (ordc <= ordZ))
	end
);
=TEX
=SML
fun €is_alnum›  (c : string) = (
	is_alpha c orelse is_digit c
);
=TEX
=SML
fun €is_numericliteral› (s : string) = (
	case explode s of
	i::rest =>	is_digit i
	|_ =>		false
);
=TEX
=SML
fun €is_primedid› (s : string) = (
	case explode s of
	"'"::_::_ =>	true
	|_ =>		false
);
=TEX
=SML
fun €is_characterliteral› (s : string) = (
	case explode s of
	"'"::_::"'"::rest =>	true
	|_ =>			false
);
=TEX
=TEX
Note that the following list includes ``.'' but omits the string quotation
character. ``.'' is included so that $is\_delimiter$ may be
used to detect a character which may begin a delimiter symbol.

The algorithms used to access the list $delimiter$
assume that if one delimiter is a leading substring
of another then the longer of the two will appear earlier
in the list; a reverse lexicographical sort achieves
this.
=SML
val €delimiter› : string list list =
	(Sort.sort (switch(Sort.lexicographic Sort.string_order)) o map explode)
	["&", "'", "(", ")", "*", "+", ",", "-", ".", "/", ":", ";", "<", "=", 
	">", "|", "=>", "..", "**", ":=", "/=", ">=", "<=", "<<", ">>", "<>",
	"Ñ", "[", "]", "{","}", "∑", "˚", "˝", "ß","¢", "√", "È"];
=TEX
=SML
fun next_is_delimiter (cs : string list) = (
	any delimiter (fn chs => cs to (length chs - 1) = chs)
);
=TEX
=SML
fun €skip_space› (st as (cs as (c :: more), tk) : LEX_STATE) : LEX_STATE = (
	if is_space c
	then skip_space (more, tk)
	else st
) | skip_space (st as ([], _)) = st;
=TEX
$next$ is used to apply a classifier function such as $is\_digit$
to the first character in the input part of a state. It returns false
if the input part is empty.
=SML
fun €next› (test : string -> bool) ((c :: _, _) : LEX_STATE) = test c
|   next _ ([], _) = false;
=TEX
When a lexeme 
has been recognised, the following material is used to classify the result.
=SML
val €class_table› = list_e_merge initial_e_dict [
	("ABS",		LCAbs),
	("&",		LCAmpersand),
	("AND",		LCAnd),
	("ARRAY",	LCArray),
	("AT",		LCAt),
	("|",		LCBar),
	("BODY",	LCBBody),
	(":=",		LCBecomes),
	("BEGIN",	LCBegin),
	("CASE",	LCCase),
	(":",		LCColon),
	(",",		LCComma),
	("CONSTANT",	LCConstant),
	("CON",		LCCon),
	(")",		LCCrd),
	("DELTA",	LCDelta),
	("DIGITS",	LCDigits),
	("/",		LCDiv),
	("..",		LCDotDot),
	(".",		LCDot),
	("ELSE",	LCElse),
	("ELSIF",	LCElsIf),
	("END",		LCEnd),
	("=",		LCEquals),
	("EXIT",	LCExit),
	("∑",		LCFatDot),
	("FOR",		LCFor),
	("FUNCTION",	LCFunction),
	("=>",		LCGoesTo),
	(">=",		LCGreaterEquals),
	(">",		LCGreaterThan),
	("IF",		LCIf),
	("IN",		LCIn),
	("IS",		LCIs),
	("<=",		LCLessEquals),
	("<>",		LCLessGreat),
	("<",		LCLessThan),
	("LIMITED",	LCLimited),
	("LOOP",	LCLoop),
	("-",		LCMinus),
	("MOD",		LCMod),
	("/=",		LCNotEquals),
	("NOT",		LCNot),
	("NULL",	LCNull),
	("OF",		LCOf),
	("(",		LCOrd),
	("OR",		LCOr),
	("OTHERS",	LCOthers),
	("OUT",		LCOut),
	("PACKAGE",	LCPackage),
	("+",		LCPlus),
	("'",		LCPrime),
	("PRIVATE",	LCPrivate),
	("PROCEDURE",	LCProcedure),
	("RECORD",	LCRecord),
	("√",		LCRefinedBy),
	("REM",		LCRem),
	("RENAMES",	LCRenames),
	("È",		LCReplacedBy),
	("RETURN",	LCReturn),
	("REVERSE",	LCReverse),
	("RANGE",	LCRRange),
	(";",		LCSemi),
	("SEPARATE",	LCSeparate),
	("**",		LCStarStar),
	("*",		LCStar),
	("SUBTYPE",	LCSubType),
	("THEN",	LCThen),
	("TYPE",	LCType),
	("TILL",	LCTill),
	("USE",		LCUse),
	("WHEN",	LCWhen),
	("WHILE",	LCWhile),
	("WITH",	LCWith),
	("XOR",		LCXor),
	("Ñ",		LCGrkDelta),
	("[",		LCLSqBrack),
	("]",		LCRSqBrack),
	("{",		LCLBrace),
	("}",		LCRBrace),
	("˚",		LCLStrachey),
	("˝",		LCRStrachey),
	("ß",		LCLChevron),
	("¢",		LCRChevron),
	("AUXILIARY",	LCAuxiliary),
	("USING",	LCUsing),
	("IMPLEMENT",	LCImplement),
	("BY",		LCBy)
			];

=TEX
=SML
fun €classify› (use_get_internal : bool) (what : string) : CN_LEX_ITEM = (
let	val convert = if use_get_internal	then get_internal_name
						else to_upper;
	val WHAT = convert what;
in
	(case e_lookup WHAT class_table of
		Value cl => cl
		|	Nil	=> (
				if	is_numericliteral what
				then	LCNumericLiteral
				else if is_characterliteral what
				then	LCCharacterLiteral
				else if is_primedid what
				then	LCPrimedIdentifier
				else	LCIdentifier
			),
		CNText WHAT)
end
);
=TEX
\subsection{Recognition of Delimiters}
=SML
fun €get_next_delimiter› (cs : string list) : string = (
	implode (find delimiter (fn chs => cs to (length chs - 1) = chs))
	handle ex => fail "CN-Parser" 501002 [fn()=>"invalid call of get_next_delimiter"]
);
=TEX
$rec\_delimiter$ returns an appropriately updated state if the input
begins with a delimiter symbol, if not it raises $Unrecognised$.
=SML
fun  €rec_delimiter› ( (cs, _) : LEX_STATE ) : LEX_STATE = (
	if next_is_delimiter cs
	then	let	val tk = get_next_delimiter cs;
        	in	(cs from size tk, Known tk)
		end
	else	raise Unrecognised
);
=TEX
\subsection{Recognition of Identifiers}

\subsection{Recognition of Alphanumeric Sequences}
=SML
fun €rec_identifier_aux› (st : LEX_STATE) : LEX_STATE = (
	let	fun aux st = (
			if next is_alnum st orelse next is_us st
			then aux (collect st)
			else st
		);
	in	if next is_alnum st orelse next is_us st
		then aux (collect st)
		else raise Unrecognised
	end
);
=TEX
=SML
fun €rec_identifier› (st : LEX_STATE) : LEX_STATE = (
	if next is_alpha st
	then	let	val (st', flag) = (rec_identifier_aux st, true)
				handle Unrecognised => (st, false);
		in	if flag
			then st'
			else raise Unrecognised
		end
	else raise Unrecognised
);
=TEX
\subsection{Recognition of Numbers}
=TEX
=SML
fun €rec_gen_integer› (f : string -> bool) (st : LEX_STATE) : LEX_STATE = (
	let	fun aux1 st = (
			if	next f (collect st)
			then	aux (collect st)
			else	raise Unrecognised
		)
		and aux st = (
			if	next f st
			then	aux (collect st)
			else if	next is_us st
			then	aux1 st
			else	st
		);
	in	if next f st
		then aux (collect st)
		else raise Unrecognised
	end
);
=TEX
=SML
val €rec_integer› = rec_gen_integer is_digit;
val €rec_based_integer› = rec_gen_integer is_alnum;
=TEX
=SML
fun €rec_exponent› (st : LEX_STATE) : LEX_STATE = (
	if	next is_e st
	then	let val st' = collect st;
		in
			if	next is_plusminus st'
			then	rec_integer (collect st')
			else	rec_integer st'
		end
	else	st
);
=TEX
=SML
fun €rec_based› (st : LEX_STATE) : LEX_STATE = (
let	val st' = rec_based_integer st;
	fun aux st =
		if	next is_hash st
		then	rec_exponent (collect st)
		else	raise Unrecognised;
in
	if	next is_dot st'
	then	((aux o rec_based_integer) (collect st')
			handle _ => st')
	else 	aux st'
end);
=TEX
=SML
fun €rec_numeric› (st : LEX_STATE) : LEX_STATE = (
let	val st' = rec_integer st;
	fun aux st =
		if	next is_hash st
		then	rec_exponent (collect st)
		else	raise Unrecognised;
in
	if	next is_dot st'
	then	((rec_exponent o rec_integer) (collect st')
			handle _ => st')
	else if	next is_e st'
	then	rec_exponent st'
	else if	next is_hash st'
	then	rec_based (collect st')
	else	st'
end);
=TEX
\subsection{Recognition of Keywords}
=SML
fun €rec_keyword› (st : LEX_STATE) : LEX_STATE = (
        let     fun aux (([], _) : LEX_STATE) = (
                        raise Unrecognised
                ) | aux st = (
                        if next is_percent st
                        then (collect st)
                        else aux (collect st)
                );
        in      if next is_percent st
                then aux (collect st)
                else raise Unrecognised
        end
);
=TEX
\subsection{Recognition of Character Literals}
=SML
fun €rec_characterliteral› (st : LEX_STATE) : LEX_STATE = (
	if next is_prime st
	then	let	val st' = collect (collect st);
		in
			if next is_prime st'
			then
				collect st'
			else
				raise Unrecognised
		end
	else
		raise Unrecognised
);
=TEX

\subsection{Recognition of Primed Identifiers}
=SML
fun €rec_primedid› (st : LEX_STATE) : LEX_STATE = (
	if next is_prime st
	then
		rec_identifier (collect st)
	else
		raise Unrecognised
);
=TEX

\subsection{Recognition of Lexemes}
Function $rec\_next\_token$ picks off the next token from the input
using the other recognisers.
=SML
fun €rec_next_token› (st : LEX_STATE) : LEX_STATE = (
	let	val st' = skip_space st;
	in	
		(((((((rec_identifier st))
		handle Unrecognised =>
			(rec_characterliteral st))
		handle Unrecognised =>
			(rec_primedid st))
		handle Unrecognised =>
			(rec_delimiter st))
		handle Unrecognised =>
			(rec_numeric st))
		handle Unrecognised =>
			(rec_keyword st))
		handle Unrecognised =>
			(fst st, Unknown)
	end
);
=TEX
\subsection{Lexical Analyser}
The following constitute some essential requirements of this lexical analyser.
\begin{enumerate}
\item
The function to read over the Z necessitates the matching of brackets in the Z in order that we don't terminate the lookahead too early. This bracket matching is best done in the function $lookahead$.

\end{enumerate}
=SML
val z_lex1 = (rev o tl o rev o ZLex.z_lex);
=TEX
=SML
val €z_delimiters› = [
	(LCGrkDelta, [LCLSqBrack, LCLBrace]),
	(LCLBrace, [LCRBrace]),
	(LCLSqBrack, [LCRSqBrack]),
	(LCLStrachey, [LCRStrachey]),
	(LCCon, [LCFatDot]),
	(LCLChevron, [LCRChevron]),
	(LCAuxiliary, [LCSemi]),
	(LCImplement, [LCBy]),
	(LCBy, [LCSemi])];

val €z_open_brackets› = ["(", "ß", "[", "{"];
val €z_close_brackets› = [")", "¢", "]", "}"];
=TEX

=SML
type €INPUT_HANDLE› = {
	left_input : Lex.INPUT list,
	left_text : string list,
	right_text : string list,
	right_input : Lex.INPUT list,
	bracket_depth : int
	};
=TEX
=SML
fun €find_in_text› (terml : CN_LEX_CLASS list)
	({left_input, left_text, right_text, right_input, bracket_depth}
		: INPUT_HANDLE)
		: (bool * INPUT_HANDLE) = (
	let	fun aux (brk, sold, snew as (c::srest)) = (
		let	val (c', srest') =
				(case rec_identifier (snew, Unknown) of
					(srest'', Known c'') =>
						(c'', srest'')
				|	(_, _) => (c, srest)
				)
				handle Unrecognised =>
						(c, srest);
			val terminate_now = (fst o (classify false)) c' mem terml
							andalso brk = 0;
			val (id, rest) =
				if terminate_now
				then	(c', srest')
				else	(c, srest);
		in
				if terminate_now
				then
					(true, brk, sold, (explode id)@rest)
				else if id mem z_open_brackets
				then
					aux (brk + 1, sold@[id], rest)
				else if id mem z_close_brackets
				then
					aux (brk - 1, sold@[id], rest)
				else
					aux (brk, sold@[id], rest)
		end
		) | aux (brk, sold, []) = (false, brk, sold, []);
		val (flg, brk, sold, snew) =
				aux (bracket_depth, left_text, right_text);
	in
		(flg, {left_input=left_input,
			left_text=sold,
			right_text=snew,
			right_input=right_input,
			bracket_depth=brk})
	end
);
=IGN
fun mk_ih s =
	{left_input=[],left_text=[],right_text=explode s, right_input=[],
		bracket_depth=0} : INPUT_HANDLE;

val terml = [LCIdentifier, LCRSqBrack];
val c'="hihgjghj";
val {left_input, left_text, right_text, right_input, bracket_depth}=
	(mk_ih "bc[de∑f]gIDENTIFIER,hi]kjm");

find_in_text [LCFatDot, LCRSqBrack] (mk_ih "x");
find_in_text [LCFatDot, LCRSqBrack] (mk_ih "xdfdf]");
find_in_text [LCFatDot, LCRSqBrack] (mk_ih "abc∑");
find_in_text [LCFatDot, LCRSqBrack] (mk_ih "abc∑def");
find_in_text [LCFatDot, LCRSqBrack] (mk_ih "abc[def]ghi]");
find_in_text [LCFatDot, LCRSqBrack] (mk_ih "bc[de∑f]ghi]kjm");
find_in_text [LCBy] (mk_ih "==,BY],hihgjghj]IdentifierRkjm");
find_in_text [LCImplement]
	(mk_ih "==,[IMPLEMENT],hihgjghj Implement Rkjm");
=TEX
=SML

fun €find_in_input› (terml : CN_LEX_CLASS list)
	(ih as {left_input, left_text, right_text, right_input, bracket_depth}
		: INPUT_HANDLE)
		: (bool * INPUT_HANDLE) = (

	case find_in_text terml ih of
	(true, ih') => (true, ih')
	| (false, ih') =>
		let	val lt = #left_text ih';
			val li = case lt of
					[] => #left_input ih'
					|_ => (#left_input ih') 
						@[(Lex.Text o implode) lt];
		in
			case #right_input ih' of
			Lex.Text txt::more => (
				find_in_input terml
					{	left_input=li,
						left_text=[],
						right_text=explode txt,
						right_input=more,
						bracket_depth= #bracket_depth ih'
					}
			) | other::more => (
				find_in_input terml
					{	left_input= li @ [other],
						left_text=[],
						right_text=[],
						right_input=more,
						bracket_depth= #bracket_depth ih'
					}
			) | [] => (
				(false,{	left_input= li,
						left_text=[],
						right_text=[],
						right_input=[],
						bracket_depth= #bracket_depth ih'
					})
			)
		end
);
=IGN
find_in_text [LCFatDot, LCRSqBrack];
fun mk_inp_ih s =
	{left_input=[],left_text=[],right_text=[], right_input=s,
		bracket_depth=0} : INPUT_HANDLE;

find_in_input [LCFatDot, LCRSqBrack] (mk_inp_ih [Lex.Text "abc"]);
find_in_input [LCFatDot, LCRSqBrack] (mk_inp_ih [Lex.Text "abc]"]);
find_in_input [LCFatDot, LCRSqBrack] (mk_inp_ih [Lex.Text "abc∑"]);
find_in_input [LCFatDot, LCRSqBrack] (mk_inp_ih [Lex.Text "abc∑def"]);
find_in_input [LCFatDot, LCRSqBrack] (mk_inp_ih [Lex.Text "abc[∑d{ef]gh}i]"]);
find_in_input [LCFatDot, LCRSqBrack] (mk_inp_ih [Lex.Text "ab(c∑"]);
find_in_input [LCFatDot, LCRSqBrack] (mk_inp_ih [Lex.Text "abc",Lex.Text "def∑"]);
find_in_input [LCFatDot, LCRSqBrack] (mk_inp_ih [Lex.Text "ab(c∑",Lex.Text "de∑f)]g"]);
find_in_input [LCFatDot, LCRSqBrack] (mk_inp_ih [Lex.Text "ab(c∑",
						Lex.String"xyz",Lex.Text "de∑f)]g"]);
find_in_input [LCFatDot, LCRSqBrack] (mk_inp_ih [Lex.Text "abc∑"]);
find_in_input [LCFatDot, LCRSqBrack] (mk_inp_ih [Lex.Text "abc∑"]);

=TEX

=SML
fun €read_until› (classification : CN_LEX_CLASS, cn_fun)
			(terml : CN_LEX_CLASS list) (iplist : INPUT list)			 
		: CN_LEX_ITEM list = (
let	val (found, ih') = find_in_input terml
			{	left_input=[],
				left_text=[],
				right_text=[],
				right_input=iplist,
				bracket_depth = 0};
	val lt = #left_text ih';
	val li = case lt of
			[] => #left_input ih'
			| lt' => (#left_input ih')@[(Lex.Text o implode) lt];
	val rt = #right_text ih';
	val ri = #right_input ih';
	val left_cxt = case li of
				[] => []
				| li' => [(classification,
						cn_fun li)];
	val right_inp = case rt of
				[] => ri
				| rt' => (Lex.Text o implode) rt::ri;
in
	if found
	then
		left_cxt@spark_lex right_inp

	else
		left_cxt
end)
=IGN
read_until [LCFatDot, LCRSqBrack] [Lex.Text "abc]"];
read_until [LCFatDot, LCRSqBrack] [Lex.Text "ab(c∑",Lex.String"x",
				Lex.Text "de∑f)]g"];
read_until [LCFatDot, LCRSqBrack] [Lex.Text "abc"];
read_until ["]"] [Lex.Text "pre, post]"];
read_until [LCFatDot, LCRSqBrack] [Lex.Text "abc]"];
read_until [LCFatDot, LCRSqBrack] [Lex.Text "abc]"];
read_until [LCFatDot, LCRSqBrack] [Lex.Text "abc]"];
read_until [LCFatDot, LCRSqBrack] [Lex.Text "abc]"];
=TEX
=SML
and €spark_xtext› (slist : string list) (rest : INPUT list) : CN_LEX_ITEM list  = (
let	val st = skip_space (slist, Unknown);
in
	case skip_space st of
	([], _) => spark_lex rest
	| other => (
		case skip_space(rec_next_token other) of
		st' as (srest, Known s) => (
			let	val res as (class, _) = classify true s;
			in case (class, lassoc5 z_delimiters class) of
				(LCLChevron, Value terml) => (
					res
					::(read_until (LCKSlot, CNKSlot) terml
						(Lex.Text (implode srest)::rest)
							)
				)|(_, Value terml) => (
					res
					::(read_until (LCZ, CNZ o ZLex.z_lex)terml
						(Lex.Text (implode srest)::rest)
							)
				)|(LCCharacterLiteral, Nil) => (
					(class, (CNString o implode o tl
							o rev o tl o explode) s)
					::spark_xtext srest rest

				)|(_, Nil) => 	
					res::spark_xtext srest rest
			end
		)| (_, Unknown) =>
			fail "CN-Parser" 501001 [fn() => implode slist]
	)
end)
=TEX
=SML
and €spark_lex› ((ip::more) : INPUT list) : CN_LEX_ITEM list = (
	case ip of
		Lex.Text s => (
			spark_xtext (explode s) more
	) |	Lex.String s => (
			(LCStringLiteral, CNString s)::spark_lex more
	) |	Lex.Char s => (
			fail "CN-Parser" 501001  [fn () => "`"^s^"`"]
	) |	Lex.Type ty => (
			fail "CN-Parser" 501001  [fn () => string_of_type ty]
	) |	Lex.Term tm => (
			fail "CN-Parser" 501001  [fn () => "antiquotation"]
	) |	Lex.Separator s => (
			fail "CN-Parser" 501001  [fn () => s]
	) |	Lex.Error n => (fail "CN-Parser (Lexer)" 501003 [fn () => string_of_int n])
) | spark_lex _ = [];
=TEX
=SML
fun €cn_lex› (classify_label : CN_LEX_ITEM list -> CN_LEX_ITEM list) (inp : INPUT list) 
		: CN_LEX_ITEM list = (
	(classify_label o spark_lex) inp
);
=TEX
\section{EPILOGUE}
=SML
end (* of structure CNLex *);
=TEX
\small
\twocolumn[\section{INDEX}]
\printindex
\end{document}
