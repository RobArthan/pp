=IGN
********************************************************************************
imp511.doc: this file is part of the PPDaz system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
% imp511.doc   %Z% $Revision: 1.32 $ $RCSfile: imp511.doc,v $ $Date: 2006/06/13 16:01:43 $
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Implementation: Z Output Function}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/IMP511}  %% Mandatory field
\def\SCCSversion{$Revision: 1.32 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2006/06/13 16:01:43 $%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{CN}
\TPPauthor{A.C.~Hayward & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{D.J.~King & DAZ Team Leader}
\TPPabstract{
This document contains the implementation for the Z output function.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{daz,fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issue 1.1, \FormatDate{94/07/11}]
Initial Draft.
\item[Issues 1.2, 1.3, 1.4 \FormatDate{94/07/11}]
Bug fixing
\item[Issue 1.5 \FormatDate{94/07/14}]
Minor typographical corrections.
\item[Issues 1.5-1.16] Under development.
\item[Issues 1.17,1.18] Fixed DRA bug (batch 1) 2
\item[Issue 1.19] Fixed DRA bug (batch 2) 7.
\item[Issue 1.20] Attempt at bug 5 (V0.6).
\item[Issue 1.21] Optimised space utilisation.
\item[Issue 1.22] Addressed issue 3 of DRA bugs and issues list,
July 14th 1997, being a problem with formatting Z definitions.
\item[Issue 1.23] Addressed $z\_prefix$ effect.
\item[Issue 1.24] Pushed output down to paragraph level.
\item[Issue 1.25] Allowed for datatypes for new Z fixity syntax.
\item[Issue 1.27] Copyright and banner updates for open source release.
\item[Issue 1.28] DAZ-specific updates to banner for open source release
\item[Issue 1.29] DAZ-specific updates to banner for open source release
\item[Issue 1.30] Now applies {\em translate\_for\_output} to output file names.
\item[Issue 1.31] Allowed for kernel interface reform.
\item[Issue 1.32] Enhancement 157: Z output function now outputs all theories associated with a script theory.
Also general tidy-up.
\item[Issue 1.33] Issue 162: stub theory mechanism now generalised to a context theory mechanism applying to all nested subprograms.
\end{description}
\subsection{Changes Forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}
The detailed design for this material is in \cite{ISS/HAT/DAZ/DTD511}.  The module tests are in \cite{ISS/HAT/DAZ/WRK501}.
\subsection{Introduction}
\subsection{Purpose and Background}
\subsection{Algorithms}
\subsection{Dependencies}
\subsection{Known Deficencies}
\subsection{Possible Enhancements}
=TEX
\section{Start of Structure z_output}
\subsection{Preamble}
=SML
structure €CNZOutput› : CNZOutput = struct
=SML
	open PrettyPrinter ZUserInterfaceSupport CNZGenerator;
=TEX

\subsection{Dictionary}

Functions to break apart user data types.

=SML
fun €dest_ud_string› (UD_String (n, uds)) = (n, uds)
|   dest_ud_string _ = fail "" 0 [] (* Caller MUST catch this! *);
fun €dest_ud_int› (UD_Int (n, uds)) = (n, uds)
|   dest_ud_int _ = fail "" 0 [] (* Caller MUST catch this! *);
=TEX

Datatype used while storing information in the Dictionary.
=SML
datatype €Z_DOC_PARAGRAPH› =
		€PTAxiom of THM
|		€PTDefn› of THM
|		€PTVC› of string * TERM
|		€PTFixity› of CLASS * TEMPLATE
|		€PTContext› of string * int
|		€PTSubprog› of string * int
|		€PTParent› of string;
=TEX

Number governing the position of the fixity paragraphs in the output document.  Set to zero ensures they all appear at the beginning.

=SML
val €z_output_fixity_num› = 0;
=TEX

Function to add a new element to our sorted list.

=SML
local
    fun add_sorted acc [] ab = rev(ab::acc)
    |   add_sorted acc (rest as ((xy as (x, _))::xs)) (ab as (a, _) : int*'a) =
        (   if	a < x
            then	rev acc @ (ab :: rest) 
            else	add_sorted (xy :: acc) xs ab
	);
in
    fun €add_sorted_to_list› (xs : (int*'a) list)
        (x : int*'a) = (add_sorted [] xs x)
end;
=TEX

Function to remove everything in the sorted list before a given number.

=SML
fun €delete_sorted› (ixs : (int * 'a) list) (n : int) : (int * 'a) list = (
	ixs drop (fn (i, _) => i <= n)
);
=TEX

Functions to add a single element of each type to our dictionary.

=SML
fun €add_sort_defn› (dict) ((nms, thm) : (string list * THM)) =
    let val num = #level(pp'Kernel.pp'dest_thm thm);
    in
        add_sorted_to_list dict (num, (PTDefn thm))
    end;
fun €add_sort_axiom› (dict) ((nms, thm) : (string list * THM))  =
    let val num = #level(pp'Kernel.pp'dest_thm thm);
    in
        add_sorted_to_list dict (num, (PTAxiom thm))
    end;
fun €add_sort_vc› (dict) ((nms, (num, tm)) : (string list * (int * TERM))) =
    let val nm = hd nms
    in
        add_sorted_to_list dict (num, (PTVC (nm,tm)))
    end;
fun €add_sort_fix› (dict) ((clss, tmpl) : (CLASS * TEMPLATE)) =
    add_sorted_to_list dict (z_output_fixity_num, (PTFixity (clss, tmpl)));
fun €add_sort_create_context› (dict) ((num, (thy,level)) : int * (string * int)) =
    add_sorted_to_list dict (num, (PTContext (thy,level)));
fun €add_sort_create_subprog› (dict) ((num, (thy,level)) : int * (string * int)) =
    add_sorted_to_list dict (num, (PTSubprog (thy,level)));
fun €add_sort_new_parent› (dict) ((num, thy) : int * string) =
    add_sorted_to_list dict (num, (PTParent thy));
=TEX

=SML
fun €get_type_level› (thynm : string) (tyname : string) : int OPT = (
let	val {ty_env = ty_env,...} = get_theory thynm;
	val {level=level,...} = force_value(oe_lookup tyname ty_env);
in
	Value level
end
handle (Fail_) => Nil);
=TEX
Functions to add lists of elements to our dictionary.
=SML
fun €aux_fold› (f : 'a list -> 'b -> 'a list)
	(old : 'a list) (toadd : 'b list) : 'a list = (
	let	fun aux d [] = d
		| aux d (a :: x) = aux (f d a) x;
	in
		aux old toadd
	end
);
=TEX

=SML
val €add_sort_defns› = aux_fold add_sort_defn;

val €add_sort_axioms› = aux_fold add_sort_axiom;

val €add_sort_vcs›  = aux_fold add_sort_vc;

val €add_sort_fixs› = aux_fold add_sort_fix;

val €add_sort_create_contexts› = aux_fold (fn dict => fn subprog =>
    let val thy = (fst o dest_ud_string) subprog;
        val num = (fst o dest_ud_int o hd o snd o dest_ud_string) subprog;
        val thy_level = (fst o dest_ud_int o hd o snd o dest_ud_string) subprog;
    in
        add_sort_create_context dict (num, (thy,thy_level))
    end handle Fail _ => error "fmt_z_document" 511011 [get_current_theory_name]);

val €add_sort_create_subprogs› = aux_fold (fn dict => fn subprog =>
    let val thy = (fst o dest_ud_string) subprog;
        val num = (fst o dest_ud_int o hd o snd o dest_ud_string) subprog;
        val thy_level = (fst o dest_ud_int o hd o snd o dest_ud_string) subprog;
    in
        add_sort_create_subprog dict (num, (thy,thy_level))
    end handle Fail _ => error "fmt_z_document" 511011 [get_current_theory_name]);

val €add_sort_new_parents› = aux_fold (fn dict => fn parent => 
    let val thy = (fst o dest_ud_string) parent;
        val num = (fst o dest_ud_int o hd o snd o dest_ud_string) parent;
    in
        add_sort_new_parent dict (num, thy)
    end handle Fail _ => error "fmt_z_document" 511011 [get_current_theory_name]);
=TEX 

These functions get some of the information we require from the theory user data.

=SML
fun €get_create_contexts› (thy : string) : USER_DATUM list =
    (rev o snd o dest_ud_string o get_user_datum thy) cn_context_ud_key
        handle Fail _ => [];
fun €get_create_subprogs› (thy : string) : USER_DATUM list =
    (rev o snd o dest_ud_string o get_user_datum thy) cn_subprog_ud_key
        handle Fail _ => [];
fun €get_new_parents› (thy : string) : USER_DATUM list =
    (rev o snd o dest_ud_string o get_user_datum thy) cn_new_parent_ud_key
        handle Fail _ => [];
=TEX

These functions take a theory name as an argument, and add the relevant parts from that theory to our dictionary.

=SML
fun €add_defns› (dict) (thyn : string) =
    let val defns = rev(get_defns thyn)
    in
        add_sort_defns dict defns
    end;
fun €add_axioms› (dict) (thyn : string) =
    let val axms = rev(get_axioms thyn)
    in
        add_sort_axioms dict axms
    end;
fun €add_vcs› (dict) (thyn : string) =
    let val vcl = rev(get_conjectures thyn)
    in
        add_sort_vcs dict vcl
    end;
fun €add_fixs› (dict) (thyn : string) =
    let val fixs = rev(get_zfixity_infos thyn)
    in
        add_sort_fixs dict fixs
    end;
fun €add_create_contexts› (dict) (thyn : string) =
    add_sort_create_contexts dict (get_create_contexts thyn);
fun €add_create_subprogs› (dict) (thyn : string) =
    add_sort_create_subprogs dict (get_create_subprogs thyn);
fun €add_new_parents› (dict) (thyn : string) =
    add_sort_new_parents dict (get_new_parents thyn);

=TEX


\subsection{Formatting}

z\_thm\_rule is used to strip the Z Paragraph header from a theorem.
=SML
val €z_thm_rule› : THM -> THM = conv_rule (TRY_C z_para_pred_conv);
=TEX

Information needed by the formatting functions.
=SML
val €z_output_tab_width› = 4;
fun €z_output_mk_tab› (i : int) =
    (if i = 0 then "" else " "^(z_output_mk_tab (i-1)));
val €z_output_tab› = (z_output_mk_tab z_output_tab_width);
val €z_output_ll› = get_line_length();
=TEX

Generally useful functions
=SML
fun €fmt_string_list› ([] : string list) = ""
|   fmt_string_list (x::xs : string list) =
    x^"\n"^(fmt_string_list xs);
fun €concat_string_list› (xs : string list) = implode xs;
fun €fmt_semi_colon› ([] : string list) = []
|   fmt_semi_colon ([x] : string list) = [x^";"]
|   fmt_semi_colon (x::xs : string list) = (x :: fmt_semi_colon xs);
fun €fmt_body› ([] : string list) = []
|   fmt_body (x::xs : string list) = ["‹ "^x]@(fmt_body xs);
fun €fmt_prefix_tab› ([] : string list) = []
|   fmt_prefix_tab (x::xs : string list) =
        (z_output_tab^x :: fmt_prefix_tab xs);

fun €dest_z_many_±› (t : TERM) = (
let	val (l, r) = dest_z_± t;
in
	dest_z_many_± l @ dest_z_many_± r
end handle (Fail _) => [t]);
=TEX

Formatting functions for Declarations.
=SML
fun €fmt_var› (ZGVar (n,_,_) : Z_TERM, x) = n
|   fmt_var (ZLVar (n,_,_) : Z_TERM, x) = n
|   fmt_var (_ : Z_TERM, x) =
        fail "fmt_var" 511001 [fn () => string_of_term x];
fun €fmt_var_list› ([] : TERM list) = ""
|   fmt_var_list ([x] : TERM list) = (fmt_var ((dest_z_term x),x))
|   fmt_var_list (x::xs : TERM list) =
        (fmt_var ((dest_z_term x),x))^", "^(fmt_var_list xs);

fun €fmt_dec› (dec : TERM) = (
	[let	val (v, t) = dest_z_dec dec;
	in (fmt_var_list v)^" : "^(concat_string_list (format_term false t))
	end	handle Fail _ => (
		let	val (s, d) = dest_z_schema_dec dec
				handle Fail _ => (snd(dest_app dec), "");
		in	concat_string_list (format_term false s) ^ d
		end		
	)]
);

fun €fmt_dec_list› ([] : TERM list) = []
|   fmt_dec_list ([x] : TERM list) = (fmt_dec x)
|   fmt_dec_list (x::xs : TERM list) =
    (fmt_semi_colon (fmt_dec x))@(fmt_dec_list xs);
=TEX

Formatting functions for Predicates.
=SML
fun €fmt_pred_list› ([] : TERM list) = []
|   fmt_pred_list ([x]: TERM list) = (format_term false x)
|   fmt_pred_list (x::xs : TERM list) =
    (fmt_semi_colon (format_term false x))@(fmt_pred_list xs);
=TEX

Formatting functions for Z Schema Boxes
=SML
fun €fmt_schbox_name› (t : TERM) =
    let val s = (concat_string_list (format_term false t))
    in
=SMLLITERAL
        ["ˇ "^s^" ¸¸¸¸¸¸¸¸"]
=SML
    end;
fun €fmt_schbox› (defn : THM) =
    let val (_,schema) = dest_thm (z_thm_rule defn);
        val (name,body) = dest_eq (snd (strip_µ schema));
        val (decl, pred) = dest_z_h_schema body;
    in
        (fmt_schbox_name name)@
        (fmt_body (fmt_dec_list (dest_z_decl decl)))@
=SMLLITERAL
        ["˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸"]@
=SML
        (fmt_body (fmt_pred_list (dest_z_many_± pred)))@
=SMLLITERAL
        ["à¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸"]
=SML
    end;
=TEX

Formatting functions for Z Abbreviation Definations
=SML
local
    fun fmt_abbdef_aux1 (varstr,expstr) =
        let val block = varstr@[" ¶ "]@expstr
    in
        ["πZ"]@(fmt_body [concat_string_list block])@["∞"]
    end;
    fun fmt_abbdef_aux2 (varstr,expstr) =
    
    ["πZ"]@
    (fmt_body [concat_string_list (varstr@[" ¶"])])@
    (fmt_body expstr)@["∞"];
in
    fun €fmt_abbdef› (defn : THM) =
        let val (var,exp) = dest_eq (snd (strip_µ(concl (z_thm_rule defn))));
            val varstr = (format_term false var);
            val expstr = (format_term false exp);
            val block = (concat_string_list (varstr@expstr))
            val n = (z_output_ll-(2*z_output_tab_width))
        in
            if ((length o explode) block) < n
                then
                    fmt_abbdef_aux1 (varstr,expstr)
                else
                    fmt_abbdef_aux2 (varstr,expstr)
        end;
end;
=SML
    fun fmt_gset (gset : TERM) = (
        ["πZ", "[" ^ fmt_var(dest_z_term gset, gset) ^ "]" , "∞"]
	);
=TEX

Formatting functions for Axioms
=SML
fun get_declared_consts (decl : TERM) : TERM list = (
	let	fun do_decs acc [] = acc
		|   do_decs acc (dec :: decs) = (
			(do_decs (fst (dest_z_dec dec) @ acc) decs)
			handle Fail _ =>
			let 	val bdg = (hd o snd o strip_app) dec;
			in	do_decs (map snd (dest_z_binding bdg) @ acc) decs
			end
		);
	in	do_decs [] (dest_z_decl decl)
	end
);
=SML
local
	val z_true = ÒtrueÆ;
in
fun €fmt_axiom_body› (axm : TERM) =
    let
        val (marker,gbody1) = dest_app axm;
	 val gbody = (let val (lb, rb) = dest_± gbody1;
			in
				if rb =$ z_true
				then lb
				else gbody1
			end handle (Fail _) => gbody1);
	 val (gpars, body) = strip_µ gbody;
        val (decl,pred) = dest_± body handle (Fail _) => (body, z_true);
    in	case gpars of
		[] => (
=SMLLITERAL
        ["πZAX"]@
=SML
        (fmt_body (fmt_dec_list (dest_z_decl decl)))@
=SMLLITERAL
        ["˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸"]@
=SML
        (fmt_body (fmt_pred_list (dest_z_many_± pred)))@
=SMLLITERAL
        ["∞"]
=SML
	) | _ :: _ => (
		let	val subs1 = map (fn t => (mk_u(type_of t), t)) gpars;
			val consts = get_declared_consts decl;
			val subs2 = map (fn c => (subst subs1 c, c)) consts;
			val decl' = subst subs2 decl;
			val pred' = subst subs2 pred;
		in
=SMLLITERAL
        ["ù[" ^ fmt_var_list gpars ^ "]úúúúúúúú"]@
=SML
        (fmt_body (fmt_dec_list (dest_z_decl decl')))@
=SMLLITERAL
        ["˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸"]@
=SML
        (fmt_body (fmt_pred_list (dest_z_many_± pred')))@
=SMLLITERAL
        ["à¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸"]
=SML
        end)
    end handle Fail _ =>
=SMLLITERAL
        ["πZ"]@
=SML
        fmt_body (format_term false axm) @
=SMLLITERAL
        ["∞"];
=SML
end;
=TEX

=SML
fun €fmt_axioms› (axiom : THM) = (
    let val axm = concl axiom;
    in
	fmt_axiom_body axm
    end);
=TEX
Formatting functions for Definitions
=SML
fun €fmt_defns› (defn : THM) = (
	let	val c = concl defn;
		val p = (let val (root, parts) = strip_app c;
			in
				if ((fst(dest_const root) = "ConstSpec")
					 handle Fail _ => false)
				then ((snd o dest_eq o concl o ¬_conv o
					mk_app)
					(hd parts, hd(tl parts)))
				else c
			end);
		val (q,_) = (dest_app p);
	in let    val (r,_) = (dest_const q);
	in	if r = "Z'AbbDef"
		then	fmt_abbdef (defn)
		else if	 r = "Z'SchBox"
		then	fmt_schbox (defn)
		else if r = "Z'AxDes"
		then fmt_axiom_body p
		else thm_fail "fmt_defns" 511002 [defn]
	end	handle Fail _ => 
		let	val (gset, u) = dest_eq p;
		in	if	is_u u
			then	fmt_gset gset
			else	thm_fail "fmt_defns" 511002 [defn]
		end
	end	handle Fail _ => thm_fail "fmt_defns" 511002 [defn]
);
=TEX

Formatting functions for VCs.
=SML
fun €fmt_vcs› (nm : string, term : TERM) =
    let val termstr = (format_term1 false (z_output_ll - z_output_tab_width) term)
    in
        ["πZ","‹ "^nm^" ?Ù"]@
        (fmt_body (fmt_prefix_tab termstr))@["∞"]
    end;
=TEX

Formatting functions for Fixity Paragraphs
=SML
fun €fmt_fixs› (c : CLASS, tmpl : TEMPLATE) =
=SMLLITERAL
    ["πZ"]@
=SML
    (fmt_body [(format_class c)^"    "^(format_template tmpl)])@
=SMLLITERAL
    ["∞"];
=TEX

Formatting functions for the creation of a new parent for the current theory.
=SML
fun €fmt_new_parent› (thy : string) =
	["new_parent \""^thy^"\";"];
=TEX

Reference variables holding text about the number of VCs in a theory.

=SML
val vc_text : string list ref = ref [];
=TEX
The following function forms the output dictionary for a theory from a given level on.
=SML
fun €form_z_output_dict› (thyn : string) (level : int)
	: (int * Z_DOC_PARAGRAPH) list = (
   	 let	val z_output_dict = [] : (int*(Z_DOC_PARAGRAPH)) list;
		val z_output_dict = add_axioms z_output_dict thyn;
		val z_output_dict = add_defns z_output_dict thyn;
		val z_output_dict = add_vcs z_output_dict thyn;
		val z_output_dict = add_fixs z_output_dict thyn
		val z_output_dict = add_create_contexts z_output_dict thyn;
		val z_output_dict = add_create_subprogs z_output_dict thyn;
		val z_output_dict = add_new_parents z_output_dict thyn;
		val z_output_dict = delete_sorted z_output_dict level;
	in	z_output_dict
    	end
);
=TEX


Formatting functions for the creation of a context theory.
=SML
fun €fmt_create_context› (done : string list)
	(thy : string, level : int) : string list =
    let val old_thy = get_current_theory_name();
        val father = (hd o rev o get_parents) thy;
    in
        ["open_theory \""^father^"\";"]@
        ["duplicate_theory (\""^old_thy^"\", \""^thy^"\");"]@
	 ["open_theory \""^thy^"\";"] @
	 ["delete_all_conjectures();"]@
        (fmt_z_document thy level done)@
        ["open_theory \""^old_thy^"\";"]
        handle Fail _ =>
        fail "fmt_create_context" 511004 [fn()=>thy]
   end
(*
=TEX


Formatting functions for the creation of a subprogram theory.
=SML
*)
and €fmt_create_subprog› (done : string list)
	(thy : string, level : int) : string list =
    let val old_thy = get_current_theory_name();
        val father = (hd o rev o get_parents) thy;
    in
        ["open_theory \""^father^"\";"]@
        ["new_theory \""^thy^"\";"]@
        (fmt_z_document thy ~1 done)@
        ["open_theory \""^old_thy^"\";"]
        handle Fail _ =>
        fail "fmt_create_subprog" 511005 [fn()=>thy]
   end
(*
=TEX

Formatting functions for Z Paragraphs.
=SML
*)
and €fmt_paragraph› (_ : string list)
	(PTAxiom thm : Z_DOC_PARAGRAPH) : string list = (fmt_axioms thm)
|   fmt_paragraph _ (PTDefn thm) = (fmt_defns thm)
|   fmt_paragraph _ (PTVC nmtm) = (fmt_vcs nmtm)
|   fmt_paragraph _ (PTFixity ct) = (fmt_fixs ct)
|   fmt_paragraph done (PTContext su) = (fmt_create_context done su)
|   fmt_paragraph done (PTSubprog su) = (fmt_create_subprog done su)
|   fmt_paragraph _ (PTParent thy) = (fmt_new_parent thy)
(*
=TEX
=SML
*)
and €fmt_paragraphs› (done : string list) ((n,l)::ls : (int*(Z_DOC_PARAGRAPH)) list)
	: string list = (
let	val paral = fmt_paragraph done l
			handle (Fail f) =>
			["(* " ^ get_message_text f ^ " *)"];
in
	paral @ [""] @ (fmt_paragraphs done ls)
end
) |   fmt_paragraphs _ [] = []
(*
=TEX

Formatting function for the whole Z Document.  Takes as arguments the name of a theory, an integer and a flag.
The integer is a cutoff, only objects with indices greater than this will be printed.
This means to print the entire theory this needs to be < 0.
The cutoff is used so that subprogram and stub theories can be created with $duplicate\_theory$.

=SML
*)
and €fmt_z_document› (thyn : string) (level : int)
	(done : string list) : string list = (
	if	thyn mem done
	then	error "fmt_z_document" 511010 [fn () => thyn]
	else	();
	let val old_thy = get_current_theory_name();
		val z_output_dict = form_z_output_dict thyn level;
		val dummy1 = open_theory thyn;
		val st = fmt_paragraphs (thyn::done) z_output_dict;
		val dummy2 = open_theory old_thy;
		val noofvcs = (string_of_int o length o get_conjectures) thyn;
		val vcs = ["(* Number of VCs in theory \""^thyn^"\" : "^noofvcs^" *)",""];
	in
		vc_text := !vc_text @ vcs;
		st
   	end     handle (f as Fail _) => reraise f "fmt_z_document"
);
=TEX
=SML
fun €fmt_paragraphs1›  (done : string list)
	(out : string -> unit) 
	(ls : (int*(Z_DOC_PARAGRAPH)) list) : unit = (
let fun aux ((n, l) : int*(Z_DOC_PARAGRAPH)) = (
	let	val paral = fmt_paragraph done l
				handle (Fail f) =>
				["(* " ^ get_message_text f ^ " *)"];
	in
		map out paral;
		out ""
	end);
in
	app aux ls
end);
=TEX
Now a function to format a document given an output function:
=SML
fun €fmt_z_document1› (out : string -> unit) (thyn : string) 
	(level : int) : unit = 
    let val old_thy = get_current_theory_name();
        val z_output_dict = form_z_output_dict thyn level;
        val dummy1 = open_theory thyn;
        val st = fmt_paragraphs1 [thyn] out z_output_dict;
        val dummy2 = open_theory old_thy;
        val noofvcs = (string_of_int o length o get_conjectures) thyn;
        val vcs = ["(* Number of VCs in theory \""^thyn^"\" : "^noofvcs^" *)",""];
    in
       vc_text := !vc_text @ vcs;
	()
    end     handle (f as Fail _) =>
            reraise f "fmt_z_document1";
=TEX
\subsection{Epilogue}

Functions to print the Z Document to the the screen or to a file.

=SML
fun fmt_doc (out : string -> unit) (thy : string) : unit = (
	let	val thyn = if thy = "-" then get_current_theory_name() else thy;
		val father = (hd o rev o get_parents) thyn;
		val side1 = vc_text := [];
		val part1 = (
				"open_theory \""^father^"\";"
			::	""
			::	"new_theory \""^thyn^"\";"
			::	[""]
		);
	in	map out part1;
		fmt_z_document1 out thyn ~1;
		map out (!vc_text);
		vc_text := []
	end
);

fun €print_z_document› (thy : string) : unit =
     (fmt_doc diag_line thy);

fun €output_z_document› ({out_file : string, script : string}) =
    let val stream = open_out (translate_for_output out_file);
        fun out s = (
		output(stream, ReaderWriter.translate_for_output s);
		output(stream, "\n")
	);
    in  fmt_doc out script;
        close_out stream
    end;
=TEX

\subsection{End of structure CNZOutput}
=SML
end (* of structure CNZOutput *);
=TEX

\small
\twocolumn[\section{INDEX}]
\printindex
\end{document}
