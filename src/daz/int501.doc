% %Z% $Date$ $Revision$ $RCSfile$
=TEX
% TQtemplate.tex
% use_file "daz_init";
% use_file "wrk003";
% z_print_theory"-";
% open CNZGenerator;
% print_spark_program();
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{VC Generation Examples}  %% Mandatory field
\def\TPPheadtitle{VC Generation Examples}
\TPPref{ISS/HAT/DAZ/WRK003}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}  %% Mandatory field (with sensible default)
\TPPstatus{Informal}
%\TPPstatus{Informal}
\TPPtype{Technical}
%\TPPkeywords{HOL}
\TPPauthor{R.D.~Arthan & HAT Team}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{D.J.~King & WIN01}
\TPPabstract{%
This document gives a Compliance Notation script with examples of each kind of VC generation.
}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library}}

%\TPPclass{CLASSIFICATION}
\newfont{\icllogo}{icllogo50}
\def\TPPheadlhs{$\vcenter{\halign{##\cr\icllogo ICL\cr}}$}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1-1.7] Initial Drafts.
\end{description}
\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains an example sript for the Compliance Tool as specified in \cite{ISS/HAT/DAZ/HLD501} and \cite{ISS/HAT/DAZ/USR501}.
\subsection{Introduction}
For integration testing and other purposes it is convenient to have a brief script showing each kind of VC generation,
i.e., exercising each use of the function $vcs$ in volume I of \cite{{DRA/CIS/CSE3/TR/94/27/1.0}

\section{PREAMBLE}

The following Standard ML script initialises the theory database and sets up the appropriate modes for processing the literate script which follows.
=SML
open_theory"daz_toolkit_extensions";
CNZGenerator.new_literate_script"wrk003";
=TEX

\section{THE LITERATE SCRIPT}
The following list of reasons why VCs are generated is believed to be comprehensive and may be checked by looking for uses of the function $vcs$ in \cite{{DRA/CIS/CSE3/TR/94/27/1.0}.
\begin{enumerate}
\item
To check that a formal subprogram in a package body refines its specification statement in the package specification
(there are three cases: procedure with and without data refinement, and function: $form\_proc\_pack\_body$, $form\_fun\_pack\_body$: ).
\item
To check that a formal subprogram appearing as a subunit refines its specification statement in the stub
(two cases: procedure and function form: \_proc\_subunit, $form\_fun\_subunit$).
\item
To check that the sequence of statements constituting the body of a subprogram is a refinement of its formal specification
(two cases: procedure and function form: $vcs\_body\_proc$, $vcs\_body\_fun$).
\item
To check that a package initialisation establishes the invariants introduced in the using clauses of the package body.
($vcs\_aux\_initial$).
\item
To check that the sequence of statements in a refinement does refine the corresponding specification statement
($vcs\_speclabel$).
\end{enumerate}
\subsection{Subprograms in Packages}
\subsubsection{Functions in Packages}
\subsubsection{Procedure without Data Refinement}
\subsubsection{Procedure with Data Refinement}
The following is a cut-down version of an example supplied by DRA:

¹ZAX
Ü	sum : bag ú ­ ú
÷üüüüüüüüüüü
Ü	sum (û ý) = 0 ±
Ü	(µ b : bag ú; n : ú · sum (b ‚ ûný) = sum b + n)
°

¹ZAX
Ü	size : bag ú ­ ú
÷üüüüüüüüüüü
Ü	size (û ý) = 0 ±
Ü	(µ b : bag ú; n : ú · size (b ‚ ûný) = size b + 1)
°

¹CN
package CALCULATOR is

	auxiliary B : bag ú;

	procedure MEAN (M : out INTEGER)
	„ M [B ½ ûý, M = sum(B) intdiv size (B)];

end CALCULATOR;
°

ÿBag_Invüüüüüüüüüüüü
Ü	B : bag ú;
Ü	S, N : INTEGER
÷üüüüüü
Ü	S = sum B;
Ü	N = size B
ˆüüüüüüüüüüüüüüüü

¹CN
package body CALCULATOR is

	using S, N : INTEGER; implement B by Bag_Inv;

	procedure MEAN (M : out INTEGER)
	„ M, S, N [N ½ 0, M = S intdiv N ± S = S‰0 ± N = N‰0]
	is
	begin
		M := S / N;
	end MEAN;

begin
	S := 0;

end CALCULATOR;
°


\subsection{Subunits}
\subsubsection{Function as Subunit}
\subsubsection{Procedure as Subunit}
\subsection{Subprogram Bodies}
\subsubsection{Function Bodies}
\subsubsection{Procedure Bodies}
\subsection{Package Initialisation}
\subsection{Refinement}

\pagebreak
%\HOLindexOff
%\input{wrk003.th.tex}
%\HOLindexOn
%\twocolumn[\section{INDEX OF DEFINED TERMS}]
%\printindex
\end{document}
=IGN
