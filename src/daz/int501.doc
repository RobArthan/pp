% %Z% $Date$ $Revision$ $RCSfile$
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{VC Generation Examples}  %% Mandatory field
\def\TPPheadtitle{VC Generation Examples}
\TPPref{ISS/HAT/DAZ/INT501}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}  %% Mandatory field (with sensible default)
\TPPstatus{Informal}
%\TPPstatus{Informal}
\TPPtype{Technical}
%\TPPkeywords{HOL}
\TPPauthor{R.D.~Arthan & HAT Team}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{D.J.~King & WIN01}
\TPPabstract{%
This document gives a Compliance Notation script with examples of each kind of VC generation.
}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library}}

%\TPPclass{CLASSIFICATION}
\newfont{\icllogo}{icllogo50}
\def\TPPheadlhs{$\vcenter{\halign{##\cr\icllogo ICL\cr}}$}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\pagebreak
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1-$Revision$%
] Initial Drafts.
\end{description}

\subsection{Changes Forecast}
None.

\pagebreak
\section{GENERAL}

\subsection{Scope}

This document contains test data for the Compliance Tool as specified in \cite{ISS/HAT/DAZ/HLD501} and \cite{ISS/HAT/DAZ/USR501}.

\subsection{Introduction}

For integration testing and other purposes it is convenient to have a brief script showing each kind of VC generation, i.e., exercising each use of the function $vcs$ in volume I of \cite{DRA/CIS/CSE3/TR/94/27/1.2}

\section{THE LITERATE SCRIPTS}

The following list of reasons why VCs are generated is believed to be comprehensive and may be checked by looking for uses of the function $vcs$ in \cite{DRA/CIS/CSE3/TR/94/27/1.2}.

\begin{enumerate}
\item
To check that a formal subprogram in a package body refines its specification statement in the package specification (there are three cases: procedure with and without data refinement, and function: $form\_proc\_pack\_body$, $form\_fun\_pack\_body$: ).
\item
To check that a formal subprogram appearing as a subunit refines its specification statement in the stub (two cases: procedure and function form: \_proc\_subunit, $form\_fun\_subunit$).
\item
To check that the sequence of statements constituting the body of a subprogram is a refinement of its formal specification (two cases: procedure and function form: $vcs\_body\_proc$, $vcs\_body\_fun$).
\item
To check that a package initialisation establishes the invariants introduced in the using clauses of the package body. ($vcs\_aux\_initial$).
\item
To check that the sequence of statements in a refinement does refine the corresponding specification statement ($vcs\_speclabel$).
\end{enumerate}

\subsection{Setting up of the enivronment}

Set up flags so the compilance tool works correctly .

=SML
set_flags [("z_type_check_only", false),("z_use_axioms", true)];
=TEX

Load the test harness.

=SML
use_file "dtd013";
use_file "imp013";
=TEX

\subsection{Useful functions}

Functions for recording some statistics of theories.

=SML
type theory_stats = {np : int, ng : int, na : int, nd : int, nc : int};
local
    fun noof_parents thy = (length o get_parents) thy;
    fun noof_global thy = (length o get_consts) thy;
    fun noof_axioms thy = (length o get_axioms) thy;
    fun noof_defns thy = (length o get_defns) thy;
    fun noof_conjectures thy = (length o get_conjectures) thy;
in
    fun get_theory_stats (thy : string) : theory_stats =
    let
        val np = noof_parents thy;
        val ng = noof_global thy;
        val na = noof_axioms thy;
        val nd = noof_defns thy;
        val nc = noof_conjectures thy;
    in
        {np = np, ng = ng, na = na, nd = nd, nc = nc}
    end;
end;
=TEX

\pagebreak
\subsection{Subprograms in Packages}
\subsubsection{Functions in Packages}

=SML
open_theory"cn";
new_script"int501A";
=TEX

πCN
package FNC_IN_PCK is

	function LOWER_BOUND (M : INTEGER) return INTEGER
	Ñ [LOWER_BOUND(M) < M];

end FNC_IN_PCK;
∞
πCN
package body FNC_IN_PCK is

	function LOWER_BOUND (M : INTEGER) return INTEGER
	Ñ [LOWER_BOUND(M) = M - 1]
	is
	begin
		return M - 1;
	end LOWER_BOUND;

end FNC_IN_PCK;
∞

=SML
output_z_document {script="int501A", out_file="int501A.sml"};
output_spark_program {out_file="int501A.ada"};
=TEX

\pagebreak
\subsubsection{Procedure without Data Refinement}

=SML
open_theory"cn";
new_script"int501B";
=TEX

πCN
package PRC_IN_PCK_NO_RFN is

	procedure UPPER_BOUND (M : INTEGER; X : out INTEGER)
	Ñ X [X > M];

end PRC_IN_PCK_NO_RFN;
∞
πCN
package body PRC_IN_PCK_NO_RFN is

	procedure UPPER_BOUND (M : INTEGER; X : out INTEGER)
	Ñ X [X = M + 1]
	is
	begin
		X := M + 1;
	end UPPER_BOUND;

end PRC_IN_PCK_NO_RFN;
∞

=SML
output_z_document {script="int501B", out_file="int501B.sml"};
output_spark_program {out_file="int501B.ada"};
=TEX

\pagebreak
\subsubsection{Procedure with Data Refinement}
\label{ProcedurewithDataRefinement}
The following is a cut-down version of an example supplied by DRA:

=SML
open_theory"cn";
new_script"int501C";
=TEX

πZAX
‹	sum : bag ˙ ≠ ˙
˜¸¸¸¸¸¸¸¸¸¸¸
‹	sum (˚ ˝) = 0 ±
‹	(µ b : bag ˙; n : ˙ ∑ sum (b Ç ˚n˝) = sum b + n)
∞
πZAX
‹	size : bag ˙ ≠ ˙
˜¸¸¸¸¸¸¸¸¸¸¸
‹	size (˚ ˝) = 0 ±
‹	(µ b : bag ˙; n : ˙ ∑ size (b Ç ˚n˝) = size b + 1)
∞
πCN
package PRC_IN_PCK_RFN is

	auxiliary B : bag ˙;

	procedure MEAN (M : out INTEGER)
	Ñ M [B Ω ˚˝, M = sum(B) intdiv size (B)];

end PRC_IN_PCK_RFN;
∞
ˇBag_Inv¸¸¸¸¸¸¸¸¸¸¸¸
‹	B : bag ˙;
‹	S, N : INTEGER
˜¸¸¸¸¸¸
‹	S = sum B;
‹	N = size B
à¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
πCN
package body PRC_IN_PCK_RFN is

	using S, N : INTEGER; implement B by Bag_Inv;

	procedure MEAN (M : out INTEGER)
	Ñ M, S, N [N Ω 0, M = S intdiv N ± S = Sâ0 ± N = Nâ0]
	is
	begin
		M := S / N;
	end MEAN;

begin
	S := 0;

end PRC_IN_PCK_RFN;
∞

=SML
output_z_document {script="int501C", out_file="int501C.sml"};
output_spark_program {out_file="int501C.ada"};
=TEX

\pagebreak
\subsection{Subunits}
\subsubsection{Function as Subunit}
Note that a function stub and the corresponding subunit cannot appear in the same literate script.

=SML
open_theory"cn";
new_script"int501D1";
=TEX

πCN
procedure FNC_SBNT (A : INTEGER; B : out INTEGER)
is
	I : INTEGER;
	function  TIMES_2_I (X : INTEGER) return INTEGER
	Ñ [TIMES_2_I(X) = I * X + I * X]
	is
	separate;
begin
	I := A;
	B := TIMES_2_I(A);
end FNC_SBNT;
∞

=SML
output_z_document {script="int501D1", out_file="int501D1.sml"};
output_spark_program {out_file="int501D1.ada"};
open_theory"cn";
new_script"int501D2";
=TEX

πCN
separate (FNC_SBNT)
function TIMES_2_I (X : INTEGER) return INTEGER
	Ñ [TIMES_2_I(X) = 2*I*X]
is
begin
	return 2*I*X;
end TIMES_2_I;
∞

=SML
output_z_document {script="int501D2", out_file="int501D2.sml"};
output_spark_program {out_file="int501D2.ada"};
=TEX

\pagebreak
\subsubsection{Procedure as Subunit}

=SML
open_theory"cn";
new_script"int501E";
=TEX

πCN
procedure PRC_SBNT (A : INTEGER; B : out INTEGER)
is
	I : INTEGER;
	procedure MULT_BY_2_I (X : INTEGER; Y : out INTEGER)
	Ñ Y[Y = I * X + I * X]
	is
	separate;
begin
	I := A;
	MULT_BY_2_I(A, B);
end PRC_SBNT;
∞
πCN
separate (PRC_SBNT)
procedure MULT_BY_2_I (X : INTEGER; Y : out INTEGER)
	Ñ Y[Y = 2*I*X]
is
begin
	Y := 2*I*X;
end MULT_BY_2_I;
∞

=SML
output_z_document {script="int501E", out_file="int501E.sml"};
output_spark_program {out_file="int501E.ada"};
=TEX

\pagebreak
\subsection{Subprogram Bodies}
This type of VC generation has already been exercised in by other examples;
however, we give additional examples here.
\subsubsection{Function Bodies}

=SML
open_theory"cn";
new_script"int501F";
=TEX

πCN
function MAX (X : INTEGER; Y : INTEGER) return INTEGER
Ñ [MAX(X, Y) ç {X, Y} ± X º MAX(X, Y) ± Y º MAX(X, Y)]
is
begin
	if	X < Y
	then	return Y;
	end if;
	return X;
end MAX;
∞

=SML
output_z_document {script="int501F", out_file="int501F.sml"};
output_spark_program {out_file="int501F.ada"};
=TEX

\pagebreak
\subsubsection{Procedure Bodies}

=SML
open_theory"cn";
new_script"int501G";
=TEX

πCN
procedure SWAP (X : in out INTEGER; Y : in out INTEGER)
Ñ X, Y [X = Yâ0 ± Y = Xâ0]
is
	T : INTEGER;
begin
	T := X;
	X := Y;
	Y := T;
end SWAP;
∞

=SML
output_z_document {script="int501G", out_file="int501G.sml"};
output_spark_program {out_file="int501G.ada"};
=TEX

\pagebreak
\subsection{Package Initialisation}
Section \ref{ProcedurewithDataRefinement} contains an example of this.
\subsection{Refinement}

=SML
open_theory"cn";
new_script"int501H";
=TEX

πCN
procedure EG1 (X : in out INTEGER; Y : in out INTEGER)
is
	T : INTEGER;
begin
	Ñ T [ X  > 1 ± Y > 1 ¥ X + Y < T < X * Y]		(10)
end EG1;
∞
πCN
(10) √
	T := X + Y + 1;
∞
πCN
procedure EG2 (X : in out INTEGER)
is
	T : INTEGER;
begin
	Ñ T [ X  < 1 ¥ T > X]
end EG2;
∞
πCN
√
	T := 1;
∞

=SML
output_z_document {script="int501H", out_file="int501H.sml"};
output_spark_program {out_file="int501H.ada"};
=TEX

\section{Z document checking}

Save copies of the theory statistics.

=SML
val int501A_stats = get_theory_stats "int501A";
val int501B_stats = get_theory_stats "int501B";
val int501C_stats = get_theory_stats "int501C";
val int501D1_stats = get_theory_stats "int501D1";
val int501D2_stats = get_theory_stats "int501D2";
val int501E_stats = get_theory_stats "int501E";
val int501F_stats = get_theory_stats "int501F";
val int501G_stats = get_theory_stats "int501G";
val int501H_stats = get_theory_stats "int501H";
=TEX

Delete all the theories we've created.

=SML
open_theory "cn";
delete_theory "int501A";
delete_theory "int501B";
delete_theory "int501C";
delete_theory "int501D1";
delete_theory "int501D2";
delete_theory "int501E";
delete_theory "int501F";
delete_theory "int501G";
delete_theory "int501H";
delete_theory "FNC_SBNToTIMES_2_Istub";
delete_theory "PRC_SBNToMULT_BY_2_Istub";
=TEX


Reload the Z documents.

=SML
fun €use_file_aux› (file : string) = (
    open_theory "cn";
    use_file file
    handle _ => ()
    );
use_file_aux "int501A";
use_file_aux "int501B";
use_file_aux "int501C";
use_file_aux "int501D1";
use_file_aux "int501D2";
use_file_aux "int501E";
use_file_aux "int501F";
use_file_aux "int501G";
use_file_aux "int501H";
=TEX

Check the theory statistics are correct.

=SML
store_mt_results_show mt_run [
    ("int501A", get_theory_stats, "int501A", int501A_stats),
    ("int501B", get_theory_stats, "int501B", int501B_stats),
    ("int501C", get_theory_stats, "int501C", int501C_stats),
    ("int501D1", get_theory_stats, "int501D1", int501D1_stats),
    ("int501D2", get_theory_stats, "int501D2", int501D2_stats),
    ("int501E", get_theory_stats, "int501E", int501E_stats),
    ("int501F", get_theory_stats, "int501F", int501F_stats),
    ("int501G", get_theory_stats, "int501G", int501G_stats),
    ("int501H", get_theory_stats, "int501H", int501H_stats)];
=TEX

\section{EPILOGUE}
=SML
diag_line (summarize_mt_results());
=TEX

\pagebreak
%\HOLindexOff
\let\oldsection=\section
\let\oldsubsection=\subsection
\def\section{\pagebreak\oldsubsection}
\def\subsection{\subsubsection}
%\HOLindexOn
%\twocolumn[\section{INDEX OF DEFINED TERMS}]
%\printindex
\end{document}
=IGN
