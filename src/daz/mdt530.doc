=TEX
%   %Z% $Date: 2008/12/11 17:57:34 $ $Revision: 1.2 $ $RCSfile: mdt530.doc,v $
=TEX
\documentclass[a4paper,11pt]{article}
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{epsf}
%\usepackage{fancyhdr}
\makeindex

\def\Xpp{{\tt xpp}}
\def\Note#1{{\bf\footnotesize[Note: #1]}}
\def\Author{R.D.~Arthan}
\def\EMail{{\tt rda@lemma-one.com}}
\def\Phone{+44 118 958 4409}
\def\Title{Module Tests: Evaluation Report Generator}
\def\Reference{LEMMA1/DAZ/MDT530}
\def\FrontPageTitle{{\huge Module Tests \\---\\ Evaluation Report Generator}}
\def\Version{$Revision: 1.2 $%
}
\def\Date{\FormatDate{$Date: 2008/12/11 17:57:34 $%
}}

\begin{document}
\headsep=0mm
\FrontPage
\headsep=10mm
\setcounter{section}{-1}
\section{DOCUMENT CONTROL}

\subsection{Contents}
 
\tableofcontents

%\pagebreak
%\subsection{List of Tables}\label{ListofTables}
%\listoftables
\subsection{List of Figures}\label{ListofFigures}
\listoffigures
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}
\begin{description}

\item[Issue 1.1] Initial author's draft. 

\end{description}

\subsection{Changes Forecast}

None under the current contract.

\newpage

%\subsection{Trademarks}

\section{GENERAL}

\subsection{Scope}
See~\cite{LEMMA1/DAZ/DTD530}.


\subsection{Introduction}

\subsubsection{Purpose and Background}
See~\cite{LEMMA1/DAZ/DTD530}.

\subsubsection{Dependencies}

These tests depend on the test harness as implemented in DS/FMU/IED/IMP013, and its corresponding detailed design document, DS/FMU/IED/DTD013.

\subsubsection{Possible Enhancements}
None identified.
 
\subsubsection{Deficiencies}
None identified.
\section{INITIALISATION}
First we need to load the test harness and initialise it.

=SML
use_file "dtd013";
use_file "imp013";
init_mt_results();
=TEX
=TEX
=SML
new_script{name = "CONSTS", unit_type = "spec"};
¹CN
package consts is
   a : constant float := 1.0;
   b : constant float := 2.0;
end consts;
°
=TEX
=SML
open_theory"cn";
new_theory"zmean";
set_flag("z_use_axioms", false);
set_merge_pcs["'z_reals", "z_library1"];
¹ZAX
Ü ÛmeanÝ : ¯ ¸ ¯ ­ ¯
÷üüüüüü
Ü µx, y:¯· mean(x, y) = (x +‰R y) /‰R 2.0
°
=SML
push_consistency_goal ñmean®;
a(¶_tac¬ñÌxy:ƒ ¸ ƒ· (xy.1 +‰R xy.2) /‰R 2.0®®);
a(rewrite_tac[z_get_specñ¯®] THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(once_rewrite_tac[get_spec¬Z'Decl®]
	THEN once_rewrite_tac[get_spec¬Z'Dec®]);
a(conv_tac(RIGHT_C (rewrite_conv[get_spec¬Z'Decl®, get_spec¬Z'Dec®])) THEN rewrite_tac[]);
a(conv_tac(RIGHT_C (rewrite_conv[get_spec¬Z'Decl®, get_spec¬Z'Dec®])) THEN rewrite_tac[]);
a(PC_T1 "z_library_ext" prove_tac[]);
a(all_var_elim_asm_tac1 THEN strip_tac);
val _ = save_consistency_thm ñmean® (pop_thm());
=SML
set_flag("z_use_axioms", true);
¹ZAX
Ü Ûsum_squaresÝ : ¯ ¸ ¯ ­ ¯
÷üüüüüü
Ü µx, y:¯· sum_squares(x, y) = x ^‰Z 2 +‰R y ^‰Z 2
°
=TEX
=SML
new_script1{name = "MEAN", unit_type = "spec", library_theories=["zmean"]};
¹CN
package mean is
   function f(x, y : in float) return float
   ˜[MEANoF(X, Y) = mean(X, Y)];
   procedure p(x, y : in float; z : out float)
   „Z[Z = mean(X, Y)];
end mean;
°
=TEX
=SML
new_script{name = "MEAN", unit_type = "body"};
¹CN
package body mean is
   function f(x, y : in float) return float
   ˜[F(X, Y) = mean(X, Y)]
   is
   begin
      return (x + y) / 2.0;
   end;
   procedure p(x, y : in float; z : out float)
   „Z[Z = mean(X, Y)]
   is separate;
end mean;
°
=SML
open_theory "cn";
set_merge_pcs["cn1", "'z_reals"];
open_scope"mean";
set_goal([], get_conjecture"-""vcMEAN_1");
a(cn_vc_simp_tac[] THEN REPEAT strip_tac);
val _ = save_pop_thm "vcMEAN_1";
set_goal([], get_conjecture"-""vcMEAN_2");
a(cn_vc_simp_tac[] THEN REPEAT strip_tac);
val _ = save_pop_thm "vcMEAN_2";
set_goal([], get_conjecture"-""vcMEAN_3");
a(cn_vc_simp_tac[] THEN REPEAT strip_tac);
val _ = save_pop_thm "vcMEAN_3";
set_goal([], get_conjecture"-""vcMEAN_4");
a(cn_vc_simp_tac[] THEN REPEAT strip_tac);
val _ = save_pop_thm "vcMEAN_4";
=IGN
get_unproved_conjectures"-";
=TEX
=SML
open_scope"mean.f";
set_goal([], get_conjecture"-""vcMEANoF_1");
a(cn_vc_simp_tac[z_get_specñmean®] THEN REPEAT strip_tac);
val _ = save_pop_thm "vcMEANoF_1";
=TEX
=SML
new_script{name = "mean.p", unit_type = "proc"};
¹CN
separate(mean)
procedure p(x, y : in float; z : out float)
   „Z[Z = mean(X, Y)]
is
   function g(x, y : in float) return float
      ˜ [G(X, Y) = mean(X, Y)]
   is
   begin
      return (x + y + 1) /2; -- Wrong!
   end;
begin
   z := g(x, y);
end;
°
=SML
open_scope"mean.p";
set_goal([], get_conjecture"-""vcMEANoP_1");
a(cn_vc_simp_tac[] THEN REPEAT strip_tac);
val _ = save_pop_thm "vcMEANoP_1";
set_goal([], get_conjecture"-""vcMEANoP_2");
a(cn_vc_simp_tac[] THEN REPEAT strip_tac);
val _ = save_pop_thm "vcMEANoP_2";
set_goal([], get_conjecture"-""vcMEANoP_3");
a(REPEAT strip_tac);
a(ALL_FC_T rewrite_tac[z_get_specñG®]);
val _ = save_pop_thm "vcMEANoP_3";
=TEX
=SML
new_script{name = "EXCEPTIONS", unit_type = "spec"};
val _ = (
¹CN
package exceptions is
   function f(x, y : in float) return float;
   function f(x : in float) return float;
end;
°
=SML
()) handle Fail _ => diag_string "exception raised as expected";
=TEX
=SML
val thys1 = get_descendants"cn" less "cn";
val r1 = get_eval_report {title = "report1", theories = thys1};
val _ = output_eval_report {report = r1, out_file = "mdt530a.rep.doc"};
val _ = output_eval_report1 {report = r1, out_file = "mdt530a.rep.txt"};
=TEX
\section{SUMMARY OF RESULTS}
=SML
diag_line "TODO: check evaluation reports from mdt530";
diag_line(summarize_mt_results());
=TEX

\end{document}












