% imp515.doc   %Z% $Date$ $Revision$ $RCSfile$
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Implementation: Compliance Tool Test Utilities}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/IMP515}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & HAT Team}
\TPPabstract{This document contains the implementation of test utilities for module testing the compliance tool.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
    ableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issue 1.1-1.20] Initial Drafts.
\item[Issue 1.1-1.21] Amended for enhanced syntax.
\item[Issue 1.24] Changes to match those caused by IUCT project WP 6.
\item [Issue 1.25] IUCT WP 7 changes.
\end{description}
\subsection{Changes Forecast}
$fmt\_repl\_env$ has an untidy option, put in to make pattern matching 
exhaustive. 
This needs to be either a formal error message, or a suitable return value
for the case in question.
\pagebreak
\section{GENERAL}
\subsection{Scope}
The detailed design for this material is in \cite{ISS/HAT/DAZ/DTD515}.
\subsection{Introduction}
\subsection{Purpose and Background}

See \cite{ISS/HAT/DAZ/DTD515}.
%\subsection{Algorithms}
%\subsection{Dependencies}
%\subsection{Known Deficencies}
\subsection{Possible Enhancements}
None known.
=TEX

\section{THE STRUCTURE $CNTestUtilities$}
=SML
structure €CNTestUtilities› : CNTestUtilities = struct
	open CaseIndependence CNBasicDeclsAndExprs CNParser CNTypes;
	open CNTypes1 CNTypes2 ZParagraphs ZUserInterfaceSupport;
	open CNSparkOutput CNZGenerator;
=TEX

\section{CREATING ABSTRACT SYNTAX FROM STRINGS}
=SML
local
fun classify_label (itemlist : CN_LEX_ITEM list) : CN_LEX_ITEM list =
  (case itemlist
    of (LCOrd, _)::(LCNumericLiteral, CNText ntxt)::(LCCrd, _)::rest =>
      (
        (
          (case nat_of_string ntxt
            of 1 => LCCompLabel
             | 2 => LCPPartLabel
             | 3 => LCVPartLabel
             | 4 => LCDecLabel
             | 5 => LCStmtLabel
             | 6 => LCSpecLabel
             | _ => LCCompLabel
          ),
          CNText ("("^ntxt^")")
        )::rest
      )
     |_ => itemlist
  );
in
fun €cn_of_string› (s : string) : CNTypes.WEB_CLAUSE = (
  let
    val inp = [Lex.Text s];
  in
    (CNParser.cn_parser o fst o (CNLex.cn_lex classify_label)) inp
  end)
end;
=TEX

=SML
fun €cn_decl_of_string› (s : string) : DECLARATION = (
let	val prefix = "package mdt505 is ";
	val epilogue = " end mdt505;"
	val result = cn_of_string (prefix^s^epilogue);
in
	case result of
	WCCompilation[KCUUnit{
		comp_unit=CUPackageDeclaration{
			visible_decs = [decl], ...}, ...}] => decl
	|_ => fail "cn_decl_of_string" 508001 []
end);
=TEX

=SML
fun €cn_basic_decl_of_string› (s : string) : BASIC_DECL = (
let	val prefix = "(4) È ";
	val result = cn_of_string (prefix^s);
in
	case result of
	WCReplacedByDecl{decls=[DBasicDecl d],...} => d
	|_ => fail "cn_decl_of_string" 508001 []
end);
=TEX

=SML
fun €cn_exp_of_string› (s : string) : EXP = (
let	val prefix = "(6) √ a:= ";
	val epilogue = ";";
	val result = cn_of_string (prefix^s^epilogue);
in
	case result of
	WCRefinedBy{statement=SStmt(STAssign{e,...}),...} => e
	|_ => fail "cn_exp_of_string" 508001 []
end);
=TEX

=SML
fun €cn_statement_of_string› (s : string) : STATEMENT = (
let	val prefix = "(6) √";
	val result = cn_of_string (prefix^s);
in
	case result of
	WCRefinedBy{statement=st,...} => st
	|_ => fail "cn_statement_of_string" 508001 []
end);
=TEX

=SML
fun €cn_specinfo_of_string› (s : string) : (Z_ID list * Z_TM * Z_TM) = (
let	val prefix = "(6) √";
	val epilogue = "(100)";
	val result = cn_of_string (prefix^s^epilogue);
in
	case result of
	WCRefinedBy{statement=SStmt(STSpecNoIvars{spec={w, pre, post, ...},
				...}), ...} =>
		(w, pre, post)
	|_ => fail "cn_prepost_of_string" 508001 []
end);
=TEX

\section{A TEST ENVIRONMENT}
=SML
val €var_info› : (ID * (TYPE * ENV_INFO)) list ref = ref [];
=TEX

=SML
fun €init_env› (() : unit) : unit = (var_info := []);
=TEX

=SML
val €env› = (fn id =>
	case lassoc5 (!var_info) id of
	Value te => Value te
	|Nil =>	 (
		case get_const_info ("z'"^id) of
		Value (ty,_) => Value (ty, EIEnvOther)
		|Nil => Nil
	)
);
=TEX

=SML
fun €extend_env› (id : ID) (ty : TYPE) (envty : ENV_INFO) : unit = (
	(var_info := (id,(ty, envty))::(!var_info))
);
=TEX

=SML
fun €change_env› (id : ID) (envty : ENV_INFO) : unit = (
	case env id of
	Value(ty, _) => (var_info := (id, (ty, envty))::(!var_info))
	|Nil => fail "change_env" 505001 [fn()=>"name not in scope"]
);
=TEX

=SML
fun €update_env_with_vars› ({vars, tmark} : VAR_DECL) : unit = (
let	val vars' = map to_upper vars;
	val tmark' = to_upper tmark;
	val ty = case env tmark' of
				Value (ty, _) => dest_z_power_type ty
				|_ => fail "" 505001 [fn()=>tmark^" not declared"];
in
	((map (fn s => extend_env s ty (EIEnvVar tmark')) vars');())
end
);
=TEX

=SML
fun €update_db_with_function› ({designator, return, formal_part, ...}
	 : FUNCTION_SPECIFICATION) : unit = (
let	val des = to_upper designator;
	fun get_ty (id : ID) : TYPE = (
		 (dest_z_power_type o type_of) (trans_exp env (EId id))
	);
	val ret_ty = get_ty return;
	fun mk_pars ({name, idlist, ...}:PARAMETER_SPECIFICATION) = (
		map (fn id => (id,get_ty name)) idlist
	);
	val (pars, par_tys) = (split o flat) (map mk_pars formal_part);
	val par_ty = case par_tys of
			[par_ty] => par_ty
			|_ => mk_z_tuple_type par_tys;
	val ty = mk_z_power_type(mk_z_tuple_type [par_ty, ret_ty]);
	val tci = TypeCheckInfo ([(des, ty)], []);
	val side = update_theory_db_with_parainfo tci;
in
	extend_env des ty (EIEnvFunction pars)
end
);
=TEX

\section{INTRODUCING NEW CONSTANTS/VARIABLES}
=SML
fun €cn_declare› (s : string) : unit = (
	case cn_decl_of_string s of
	DBasicDecl (BDVarDecl vd) => (
		update_env_with_vars vd
	)| DBasicDecl (BDVarDeclInit (vd,e)) => (
		update_env_with_vars vd
	)| DBasicDecl bd => (
		let	val paras = trans_basic_decl env bd;
			
			val side = map update_theory_db_with_parainfo paras;
		in
			()
		end
	)| DFunctionDeclaration fd => (
		update_db_with_function fd

	)| _ => ()
);
=TEX

\section{PRINTING VOLUME I ENVIRONMENTS}
=SML
fun diag_string_list ([] : string list) = ()
|   diag_string_list ([x] : string list) = diag_line x
|   diag_string_list (x::xs : string list) = (diag_line x;diag_string_list xs);
=TEX

=SML
fun €f_of_fmt› (f : PP_FMT_INFO -> 'a -> unit)
		: ('a -> string list) = (
	fn arg => (
		(strings_from_fmt f arg)
	)			
);
=TEX

=SML
fun €list_fmt› (sl : string list) (fmt : string): string = (
	format_list (fn x => x) sl fmt);
=TEX

=SML
fun €aux_var_decl_list› (vdl : VAR_DECL list) : string list = 
	(map (fn x => " "^x) (f_of_fmt fmt_var_decl_list vdl));
=TEX

=SML
fun €aux_var_decl_list1› (vdl : VAR_DECL list) : string list = 
	(map (fn x => "    "^x) (f_of_fmt fmt_var_decl_list vdl));
=TEX

=SML
fun €aux_const_decl_list› ([] : BASIC_DECL list) : string list = []
|   aux_const_decl_list (cdl : BASIC_DECL list) : string list =
	(map (fn x => " "^x) ((flat o (map (f_of_fmt fmt_basic_decl))) cdl));
=TEX

=SML
fun €aux_param_spec› (ps : PARAM_SPEC) : string list = 
	[(
	case (#mode ps) of
		MSparkIn => "IN "
		|MSparkOut => "OUT "
		|MSparkInOut => "IN OUT "
	) ^
	((implode o aux_var_decl_list) [(#var_decl ps)])
	];
=TEX

=SML
fun €aux_formal_proc› (fp : FORMAL_PROC) : string list =
	["    " ^ (#name fp) ^
	" (" ^
	list_fmt (flat (map aux_param_spec (#formal_ids fp))) " " ^
	") " ^
	implode (strings_from_fmt fmt_spec (#spec fp))
	];
=TEX

=SML
fun €aux_informal_fun› (inf : INFORMAL_FUN) : string =
	"    " ^ (#name inf) ^
	" (" ^
	list_fmt (flat (map aux_param_spec (#formal_pars inf))) " " ^
	") : " ^
	(#return_type inf) ^
	";";
=TEX

=SML
fun €aux_formal_fun› (form : FORMAL_FUN) : string list =
	[(aux_informal_fun (#informal_fun form)) ^
		implode (strings_from_fmt fmt_spec (#spec form))];
=TEX

=SML
fun €aux_aux_vars› (aux_vars : Z_DECL list) : string list =
	map (implode o strings_from_fmt fmt_z_pred) aux_vars;
=TEX

=IGN
fun €cond_fmt_string› (s : string) (s1 : string list) : string list = (
	case s1 of
	[] =>	[]
	|_ =>	[s]@s1);
=TEX
=SML
fun €cond_fmt_string› (s : string) (s1 : string list) : string list = (
	case s1 of
	[] =>	[]
	|(s2::rest) =>	[s^s2]@rest);
=TEX

=SML
local
fun aux (id, pack : PACKAGE) : string list = 
	["************************************"] @ ["PACKAGE: "^id]@
	(cond_fmt_string "  vars:" 
		(aux_var_decl_list (#vc_vars pack)))@
	(cond_fmt_string "  consts_types:"
		(aux_const_decl_list (#consts_types pack)))@
	(cond_fmt_string "  formal_procs: "
		(flat (map aux_formal_proc (#formal_procs pack))))@
	(cond_fmt_string "  informal_funs: "
		(map aux_informal_fun (#informal_funs pack)))@
	(cond_fmt_string "  formal_funs: "
		(flat (map aux_formal_fun (#formal_funs pack))))@
	(cond_fmt_string "  aux_vars: "
		(aux_aux_vars (#aux_vars pack))) @
	(cond_fmt_string "  pack_spec_with_modules: " (#pack_spec_with_modules pack));
in
fun €fmt_pack_env› ([] : PACK_ENV) : string list = []
|   fmt_pack_env ([pack] : PACK_ENV) : string list = aux pack
|   fmt_pack_env (pack::xs : PACK_ENV) : string list =
	(aux pack)@(fmt_pack_env xs);
end;
=TEX

=SML
fun €aux_flag› (s : string) (fl : FLAG) : string list =
	(if fl then [s ^ ": true"] else []);
=TEX

=SML
fun €aux_in_scope› (p : string) (insc : IN_SCOPE) : string list =
	(cond_fmt_string (p ^ "vc_vars: ")
		(aux_var_decl_list (#vc_vars insc)))@
	(cond_fmt_string (p ^ "vc_pars: ")
		(flat (map aux_param_spec (#vc_pars insc))))@
	(cond_fmt_string (p ^ "vc_log_cons: ")
		(map string_of_term (#vc_log_cons insc)))@
	(cond_fmt_string (p ^ "formal_procs: ")
		(flat (map aux_formal_proc (#formal_procs insc))))@
	(cond_fmt_string (p ^ "dec_labels") (#dec_labels insc));
=TEX

=SML
local
fun aux (id, subunit : SUBUNIT) = (
	["************************************"] @ ["SUBUNIT: "^id]@
	(cond_fmt_string "  zmod: " [#zmod subunit])@
	(aux_flag "  specif_flag" (#specif_flag subunit))@
	(cond_fmt_string "  specif: " (strings_from_fmt fmt_spec (#specif subunit)))@
	(aux_in_scope "  in_scope." (#in_scope subunit))
	);
in
fun €fmt_subunit_env› ([] : SUBUNIT_ENV) : string list = []
|   fmt_subunit_env ([sub] : SUBUNIT_ENV) : string list = aux sub
|   fmt_subunit_env (sub::xs : SUBUNIT_ENV) : string list = 
	(aux sub)@(fmt_subunit_env xs);
end;
=TEX

=SML
fun €aux_flags› (pre : string) (fl : FLAGS) : string list = (
let	val flags = [
		("pack_spec_flag",	(#pack_spec_flag fl)),
		("pack_body_flag",	(#pack_body_flag fl)),
		("stub_flag",		(#stub_flag fl)),
		("subunit_flag",	(#subunit_flag fl)),
		("formal_body_flag", (#formal_body_flag fl)),
		("fun_flag",		(#fun_flag fl)),
		("declabel_flag",	(#declabel_flag fl)),
		("speclabel_flag",	(#speclabel_flag fl)),
		("till_flag",		(#till_flag fl))];
	val flist = list_fmt (map fst (flags drop (fn (_,v) => not v))) ", ";
in
	case flist of
	"" =>	[]
	|_ =>	[pre ^ ": {" ^ flist ^"}"]
end
);
=TEX

=SML
local
fun aux (id, declab : DECLAB) = (
	["************************************"] @ ["DECLAB: "^id]@
	(cond_fmt_string "  block_name: " [#block_name declab])@
	(aux_flags "  flags: " (#flags declab))@
	(aux_in_scope "  in_scope." (#in_scope declab))
	);
in
fun €fmt_dec_env› ([] : DEC_ENV) : string list = []
|   fmt_dec_env ([dec] : DEC_ENV) : string list = aux dec
|   fmt_dec_env (dec::xs : DEC_ENV) : string list =
	(aux dec)@(fmt_dec_env xs);
end;
=TEX

=SML
fun €aux_wp_env› (p : string) (wp : WP_ENV) : string list = (
	(cond_fmt_string (p ^ "fun_header: ")
		[(aux_informal_fun (#fun_header wp))])@
	[p ^ "return: " ^ (string_of_term (#return wp))]@
	[p ^ "till: " ^ (string_of_term (#till wp))]@
	(cond_fmt_string (p ^ "formal_procs: ")
		(flat (map aux_formal_proc (#formal_procs wp))))

);
=TEX

=SML
local
fun aux (id, speclab : SPECLAB) = (
	["************************************"] @ ["SPECLAB: " ^ id]@
	(strings_from_fmt fmt_spec (#spec speclab))@
	(aux_flag "  formal_body_flag" (#formal_body_flag speclab))@
	(aux_flag "  fun_flag" (#fun_flag speclab))@
	(aux_flag "  till_flag" (#till_flag speclab))@
	(aux_wp_env "  wp_env." (#wp_env speclab))@
	(aux_in_scope "  in_scope." (#in_scope speclab))
	);
in
fun €fmt_spec_env› ([] : SPEC_ENV) : string list = []
|   fmt_spec_env ([spec] : SPEC_ENV) : string list = aux spec
|   fmt_spec_env (spec::xs : SPEC_ENV) : string list = 
	(aux spec)@(fmt_spec_env xs);
end;
=TEX

=SML
local
fun aux (id, repl : REPLACEMENT) = (
	["************************************"] @ ["REPLACEMENT: " ^ id]@
	(case repl
	of UnReplaced _ => [" Unreplaced"]
	|  ReplaceComp comp =>
		[list_fmt ((f_of_fmt fmt_replaced_by_comp) comp) ""]
	|  ReplacePPart pp =>
		[list_fmt ((f_of_fmt fmt_replaced_by_private_part) pp) ""]
	|  ReplaceVPart vp =>
		[list_fmt ((f_of_fmt fmt_replaced_by_visible_part) vp) ""]
	|  ReplaceDecl decl =>
		[list_fmt ((f_of_fmt fmt_replaced_by_decl) decl) ""]
	|  RefineStat st =>
		[list_fmt ((f_of_fmt fmt_refined_by) st) ""]
	|  ReplaceStat st =>
		[list_fmt ((f_of_fmt fmt_replaced_by) st) ""]
	|  ReplaceArbitrary {label, replacement} =>
		[label ^ "!È" ^ replacement]
       |  ReplaceAnnotation ann => (* added by KB to make exhaustive *)
		fail "fmt_repl_env" 2003 [(fn () => ""), (fn () => ""), (fn () => "ReplaceAnnotation case invoked")]
	));
in
fun €fmt_repl_env› ([] : REPL_ENV) : string list= []
|   fmt_repl_env ([repl] : REPL_ENV) : string list = aux repl
|   fmt_repl_env (repl::xs : REPL_ENV) : string list =
	(aux repl)@(fmt_repl_env xs);
end;
=TEX

=SML
fun €aux_dec_lab› (declab : DECLAB) : string list =  (
	[("  declab.block_name: " ^ (#block_name declab))]@
	(aux_flags "  declab." (#flags declab))@
	(aux_in_scope "  declab." (#in_scope declab)));
=TEX

=SML
fun €aux_using_decs› (id : Z_ID, (vdl : VAR_DECL list, zp : Z_PRED))
			: string list =  (
	[""]@
	[("   id: " ^ id)]@
	[("   var_decl: ")]@ (aux_var_decl_list1 vdl)@
	[("   pred: "^(implode (strings_from_fmt fmt_z_pred zp)))]);
=TEX

=SML
local
fun aux (block : BLOCK) : string list = (
	["************************************"] @ ["BLOCK:"]@
	(aux_dec_lab (#declab block))@
	(cond_fmt_string "  current_formal_proc: "
		(aux_formal_proc (#current_formal_proc block)))@
	(cond_fmt_string "  current_formal_fun: "
		(aux_formal_fun (#current_formal_fun block)))@
	(cond_fmt_string "  dec_lab: " [#dec_lab block])@
	(cond_fmt_string "  spec_lab: " [#spec_lab block])@
	(cond_fmt_string "  till: " [string_of_term (#till block)]))@
	(cond_fmt_string "  using_decs: "
		(flat (map aux_using_decs (#using_decs block))));
in
fun €fmt_blocks› ([] : ENV) : string list = []
|   fmt_blocks ([env] : ENV) : string list = aux env
|   fmt_blocks (env::xs : ENV) : string list = 
	(aux env)@(fmt_blocks xs);
end;
=TEX
=SML
fun €print_envs_aux› (zg_state : Z_GENERATOR_STATE) : string list = (
	((fmt_pack_env o #pack_env) zg_state)@
	((fmt_subunit_env o #subunit_env) zg_state)@
	((fmt_dec_env o #dec_env) zg_state)@
	((fmt_spec_env o #spec_env) zg_state)@
	((fmt_blocks o #blocks) zg_state)@
	((fmt_repl_env o #repl_env) zg_state)
);
=TEX
=SML
val €print_z_generator_state› : Z_GENERATOR_STATE -> unit =
	(diag_string_list o print_envs_aux);
=TEX
=SML
fun €print_envs› (() : unit) : unit = (
	(print_z_generator_state o get_z_generator_state) ()
);
=TEX
=SML
fun €trace_envs› (() : unit) : unit = (
	(diag_string_list o print_envs_aux) (!diag_z_generator_state)
);

=TEX

\section{EPILOGUE}
=SML
end (* of structure CNTestUtilities *);
open CNTestUtilities;
=TEX

\small
    wocolumn[\section{INDEX}]
\printindex
\end{document}

=IGN
#consts_types 
(snd (hd (tl (#pack_env (CNZGenerator.get_z_generator_state())))));
hd (tl it;
);
 πCN
package test_basic_declaration is
subtype WEEKRANGE is integer range 1..52;
subtype TIME is real delta 0.01 range 0 .. 23.59;
type DAYS is (MON, TUE, WED, THU, FRI, SAT, SUN);
type DATE is record week : WEEKRANGE; day : DAYS; end record;
pay_day : constant WEEKDAY := FRI;
noon : constant TIME := 12.00;
end test_basic_declaration;
 ∞
 πCN
package banana is
a,b : integer;
c,d : real;
end banana;
 ∞
