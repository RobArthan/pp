% imp515.doc   %Z% $Date$ $Revision$ $RCSfile$
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Implementation: Compliance Notation Test Utilities}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/IMP515}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{D.J.~King & DAZ Team Leader}
\TPPabstract{}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issue \SCCSversion, \FormatDate{$Date$%
} ] Initial Draft.

\end{description}
\subsection{Changes Forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}
The detailed design for this material is in \cite{ISS/HAT/DAZ/DTD515}.
\subsection{Introduction}
\subsection{Purpose and Background}
\subsection{Algorithms}
\subsection{Dependencies}
\subsection{Known Deficencies}
\subsection{Possible Enhancements}
=TEX

\section{TEST UTILITIES}
=SML
structure ÛCNTestUtilitiesÝ = struct
local
	open CaseIndependence CNBasicDeclsAndExprs CNTypes;
	open CNTypes2 ZParagraphs;
in
=TEX
=SML
local
fun classify_label (itemlist : CN_LEX_ITEM list) : CN_LEX_ITEM list =
  (case itemlist
    of (LCOrd, _)::(LCNumericLiteral, CNText ntxt)::(LCCrd, _)::rest =>
      (
        (
          (case nat_of_string ntxt
            of 1 => LCCompLabel
             | 2 => LCPPartLabel
             | 3 => LCVPartLabel
             | 4 => LCDecLabel
             | 5 => LCStmtLabel
             | 6 => LCSpecLabel
             | _ => LCCompLabel
          ),
          CNText ("("^ntxt^")")
        )::rest
      )
     |_ => itemlist
  );
in
fun Ûcn_of_stringÝ (s : string) : CNTypes.WEB_CLAUSE = (
  let
    val inp = [Lex.Text s];
  in
    (CNParser.cn_parser o (CNLex.cn_lex classify_label)) inp
  end)
end;
=TEX
=SML
fun Ûcn_decl_of_stringÝ (s : string) : DECLARATION = (
let	val prefix = "package mdt505 is ";
	val epilogue = " end mdt505;"
	val result = cn_of_string (prefix^s^epilogue);
in
	case result of
	WCCompilation[KCUUnit{
		comp_unit=CUPackageDeclaration{
			visible_decs = [decl], ...}, ...}] => decl
	|_ => fail "cn_decl_of_string" 508001 []
end);
=TEX

=SML
fun Ûcn_basic_decl_of_stringÝ (s : string) : BASIC_DECL = (
let	val prefix = "(4) é ";
	val result = cn_of_string (prefix^s);
in
	case result of
	WCReplacedByDecl{decls=[DBasicDecl d],...} => d
	|_ => fail "cn_decl_of_string" 508001 []
end);
=TEX
=SML
fun Ûcn_exp_of_stringÝ (s : string) : EXP = (
let	val prefix = "Ã a:= ";
	val epilogue = ";";
	val result = cn_of_string (prefix^s^epilogue);
in
	case result of
	WCRefinedBy{statement=SStmt(STAssign{e,...}),...} => e
	|_ => fail "cn_exp_of_string" 508001 []
end);
=TEX
=SML
fun Ûcn_statement_of_stringÝ (s : string) : STATEMENT = (
let	val prefix = "Ã";
	val result = cn_of_string (prefix^s);
in
	case result of
	WCRefinedBy{statement=st,...} => st
	|_ => fail "cn_statement_of_string" 508001 []
end);
=TEX
=SML
fun Ûcn_prepost_of_stringÝ (s : string) : (Z_EXP * Z_EXP) = (
let	val prefix = "Ã";
	val result = cn_of_string (prefix^s);
in
	case result of
	WCRefinedBy{statement=SStmt(STSpecNoIvars{pre, post, ...}), ...} =>
		(pre, post)
	|_ => fail "cn_prepost_of_string" 508001 []
end);
=TEX
=SML
val Ûvar_infoÝ : (ID * (TYPE * ENV_INFO)) list ref = ref [];

fun Ûinit_envÝ (() : unit) : unit = (
	var_info := []
);

val ÛenvÝ = (fn id =>
	case lassoc5 (!var_info) id of
	Value te => Value te
	|Nil =>	 (
		case get_const_info ("z'"^id) of
		Value (ty,_) => Value (ty, EIEnvOther)
		|Nil => Nil
	)
);
=TEX

=SML
fun Ûextend_envÝ (id : ID) (ty : TYPE) (envty : ENV_INFO) = (
	(var_info := (id,(ty, envty))::(!var_info))
);

fun Ûchange_envÝ (id : ID) (envty : ENV_INFO) = (
	case env id of
	Value(ty, _) => (var_info := (id, (ty, envty))::(!var_info))
	|Nil => fail "change_env" 505001 [fn()=>"name not in scope"]
);
=TEX
=SML
fun Ûupdate_env_with_varsÝ ({vars, tmark} : VAR_DECL) : unit = (
let	val vars' = map to_upper vars;
	val tmark' = to_upper tmark;
	val ty = case env tmark' of
				Value (ty, _) => dest_z_power_type ty
				|_ => fail "" 505001 [fn()=>tmark^" not declared"];
in
	((map (fn s => extend_env s ty (EIEnvVar tmark')) vars');())
end
);
=TEX

=SML
fun Ûupdate_db_with_functionÝ ({designator, return, formal_part, ...}
	 : FUNCTION_SPECIFICATION) : unit = (
let	val des = to_upper designator;
	fun get_ty (id : ID) : TYPE = (
		 (dest_z_power_type o type_of) (trans_exp env (EId id))
	);
	val ret_ty = get_ty return;
	fun mk_pars ({name, idlist, ...}:PARAMETER_SPECIFICATION) = (
		map (fn id => (id,get_ty name)) idlist
	);
	val (pars, par_tys) = (split o flat) (map mk_pars formal_part);
	val par_ty = case par_tys of
			[par_ty] => par_ty
			|_ => mk_z_tuple_type par_tys;
	val ty = mk_z_power_type(mk_z_tuple_type [par_ty, ret_ty]);
	val tci = TypeCheckInfo ([(des, ty)], []);
	val side = update_theory_db_with_parainfo tci;
in
	extend_env des ty (EIEnvFunction pars)
end
);
=TEX
=SML
fun Ûcn_declareÝ (s : string) : unit = (
	case cn_decl_of_string s of
	DBasicDecl (BDVarDecl vd) => (
		update_env_with_vars vd
	)| DBasicDecl bd => (
		let	val paras = trans_basic_decl env bd;
			
			val side = map update_theory_db_with_parainfo paras;
		in
			()
		end
	)| DFunctionDeclaration fd => (
		update_db_with_function fd

	)| _ => ()
);
=TEX
=SML
end (* local ... in *);
end (* of structure CNTestUtilities *);
open CNTestUtilities;
=TEX

=TEX
\small
\twocolumn[\section{INDEX}]
\printindex
\end{document}



°
