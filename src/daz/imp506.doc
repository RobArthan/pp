% imp506.doc   %Z% $Date$ $Revision$ $RCSfile$
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Implementation of the Specification Database}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/IMP506}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{D.J.~King & DAZ Team Leader}
\TPPabstract{
This document contains the implementation for the SPARK paragraph processor.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issue \SCCSversion, \FormatDate{$Date$%
} ] Initial Draft.

\end{description}
\subsection{Changes Forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the implementation for the parser for
HOL/Z.
The detailed design for this material is in \cite{ISS/HAT/DAZ/DTD506}.
\subsection{Introduction}
\subsection{Purpose and Background}
\subsection{Algorithms}
\subsection{Dependencies}
\subsection{Known Deficencies}
\subsection{Possible Enhancements}
=TEX
=TEX
=TEX
\section{PREAMBLE}
=SML
structure €CNSpecificationDatabase› : CNSpecificationDatabase = struct
=TEX
\section{INTERFACE}
=SML
type VC = int;
type SPEC_LAB = int;
fun vcs (spl : SPEC_LAB, st : STATEMENT) = [];

type €REFINEMENT_STEP› = {
	spec : SPEC_LAB,
	refinedby : STATEMENT OPT,
	vconds : VC list
	};

val €refinement_steps› : REFINEMENT_STEP E_DICT ref = ref (initial_e_dict);
=TEX
=SML
fun €rstep_add_specification› (index : string) (sp : SPEC_LAB) : unit = (
	refinement_steps := e_enter index {spec=sp, refinedby=Nil, vconds=[]}
		(!refinement_steps)
);
=SML
=TEX
fun €rstep_refine_specification› (index : string) (rb : STATEMENT) : VC list = (
let	val rstep = case e_lookup index (!refinement_steps) of
			Value r => r
			|_ => fail "rstep_refine_specification" 99999 [];
	val spec = #spec rstep;
	val vconds = vcs (spec, rb);
	val side = refinement_steps := e_enter index
		{spec= spec, refinedby=Value rb, vconds=vconds}
		(!refinement_steps);
in
	vconds
end
);
=SML
=TEX
\section{EPILOGUE}
=SML
end (* of structure CNSpecificationDatabase *);
=TEX
\small
\twocolumn[\section{INDEX}]
\printindex
\end{document}

=IGN
val stmt1 = stmt
   (semicolon
      (assign {E = Òa - bÆ, x = "a"},
         semicolon
            (assign {E = Òa + bÆ, x = "b"}, assign {E = Òb - aÆ, x = "a"})));

val speclab1 = {spec =
   {w = ["b", "a"],
      w0 = ["bâ0", "aâ0"],
      pre = ÒtrueÆ,
      post = Òa = bâ0 ± b = aâ0Æ},
   wp_env =
   {until = ÒtrueÆ,
      return = ÒtrueÆ,
      fun_header =
      {name = "informal_fun", formal_pars = [], return_type = "result_type"},
      formal_procs = []},
   fun_flag = false,
   in_scope = {vc_pars = [], vc_vars = [], dec_labels = []},
   until_flag = false,
   formal_body_flag = false};

val €stmt2› : Statement = stmt(
	if_then_else {
		G = Òa º bÆ,
		P = assign {x="c", E = Òb ∫ ˙Æ},
		Q = assign {x="c", E = Òa ∫ ˙Æ}});

val €speclab2› : Speclab = simple_speclab(ÒtrueÆ, Òc ç {aâ0, bâ0} ± aâ0 º c ± bâ0 º cÆ);

rstep_add_specification "(1)" speclab1;
rstep_refine_specification "(1)" stmt1;


rstep_add_specification "(2)" speclab2;
rstep_refine_specification "(2)" stmt2;


