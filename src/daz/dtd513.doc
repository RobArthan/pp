%  dtd513.doc %Z% $Date$ $Revision$ $RCSfile$
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design: Compliance Notation (Volume I) Types}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/DTD513}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{Specification}
\TPPkeywords{Compliance Notation}
\TPPauthor{D.J.~King&WIN01}
\TPPauthorisation{R.D.~Arthan & HAT Team}
\TPPabstract{
This document contains the detailed design for the
Compliance Notation Specification Database.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
%\bibliographystyle{fmu}
%\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issue \SCCSversion~\FormatDate{$Date$%
}) ] Initial Draft.

\end{description}
\subsection{Changes Forecast}
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for the Web Clause Processor.

\subsection{Introduction}

\subsubsection{Purpose and Background}


\subsubsection{Dependencies}
%\subsubsection{Possible Enhancements}
\subsubsection{Deficiencies}
None known.

\section{DESIGN ISSUES}
\section{PREAMBLE}
=DOC
signature ÛCNTypes1İ = sig
=DESCRIBE
=ENDDOC

=SML
local
open	CNTypes CNBasicDeclsAndExprs CNTypes2;
in
=TEX

\subsection{Preamble for Z Type-Checking}

The following initialises the theory database when performing a syntax and type check on the Z paragraphs in this document. (This preamble is not processed when building the compliance tool.)

=SMLZ
open_theory"dtd502";
push_pc "z_library";
force_delete_theory"dtd513" handle Fail _ => ();
val _ = set_flag ("z_type_check_only", true);
new_theory "dtd513";
=TEX


\subsection{Package Specification Environment}

ÿFormal_Funüüüüüüüüüüüüüüüüü
Ü	Informal_Fun;
Ü	Spec
÷üüüüüüüüüüüüü
Ü	w = {}
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛFORMAL_FUNİ
=TYPESTRUCT
      = {
	informal_fun : INFORMAL_FUN,
	spec : SPEC
	};
=TEX

ÿPackageüüüüüüüüüüüüüüüüü
Ü	vc_vars : ğ Var_Decl;
Ü	consts_types : seq BASIC_DECL;
Ü	formal_procs : ğ Formal_Proc;
Ü	informal_funs : seq Informal_Fun;
Ü	formal_funs : seq Formal_Fun
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛPACKAGEİ
=TYPESTRUCT
      = {
	vc_vars : VAR_DECL list,
	consts_types : BASIC_DECL list,
	formal_procs : FORMAL_PROC list,
	informal_funs : INFORMAL_FUN list,
	formal_funs : FORMAL_FUN list
	};
=TEX

¹ZAX
Ü	Package_vc_vars : (Package ¸ ğ Var_Decl) ­ Package;
Ü	Package_consts_types :
Ü		(Package ¸ seq BASIC_DECL) ­ Package;
Ü	Package_formal_procs : (Package ¸ ğ Formal_Proc) ­ Package;
Ü	Package_informal_funs :
Ü		(Package ¸ seq Informal_Fun) ­ Package;
Ü	Package_formal_funs : (Package ¸ seq Formal_Fun) ­ Package
°

ÿPACK_ENVüüüüüüüüüüüüüüüüü
Ü	pack_env : ID ß Package
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛPACK_ENVİ
=TYPESTRUCT
      = {
	pack_env : ID -> PACKAGE
	};
=TEX

¹Z
Ü	PACK_ENV0 ¦ [PACK_ENV | pack_env = {}]
°

\subsection{Subunit Environment}

ÿSubunitüüüüüüüüüüüüüüüüü
Ü	zmod : Z_MODULE;
Ü	specif_flag : FLAG;
Ü	specif : Spec;
Ü	In_Scope
ˆüüüüüüüüüüüüüüüüüüüü

The z module is represented simply as an identifier.
=SML
type ÛSUBUNITİ
=TYPESTRUCT
      = {
	zmod : ID,
	specif_flag : FLAG,
	specif : SPEC,
	in_scope : IN_SCOPE
	};
=TEX

¹ZAX
Ü	Subunit_vc_vars : (Subunit ¸ ğ Var_Decl) ­ Subunit;
Ü	Subunit_formal_procs : (Subunit ¸ ğ Formal_Proc) ­ Subunit;
Ü	Subunit_dec_labels : (Subunit ¸ ğ LABEL) ­ Subunit
°


ÿSUBUNIT_ENVüüüüüüüüüüüüüüüüü
Ü	subunit_env : (ID ¸ ID) ß Subunit
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛSUBUNIT_ENVİ
=TYPESTRUCT
      = {
	subunit_env : (ID * ID) -> SUBUNIT
	};
=TEX

¹Z
Ü	SUBUNIT_ENV0 ¦ [SUBUNIT_ENV | subunit_env = {}]
°

\subsection{Dec Label Environment}

ÿFlagsüüüüüüüüüüüüüüüüü
Ü	pack_spec_flag, pack_body_flag, stub_flag, subunit_flag,
Ü	formal_body_flag, fun_flag, declabel_flag, speclabel_flag, till_flag :
Ü		FLAG
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛFLAGSİ
=TYPESTRUCT
      = {
	pack_spec_flag : FLAG,
	pack_body_flag : FLAG,
	stub_flag : FLAG,
	subunit_flag : FLAG,
	formal_body_flag : FLAG,
	fun_flag : FLAG,
	declabel_flag : FLAG,
	speclabel_flag : FLAG,
	till_flag : FLAG
	};
=TEX


ÿDeclabüüüüüüüüüüüüüüüüü
Ü	block_name : ID;
Ü	Flags;
Ü	In_Scope
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛDECLABİ
=TYPESTRUCT
      = {
	block_name : ID,
	flags : FLAGS,
	in_scope : IN_SCOPE
	};
=TEX

¹ZAX
Ü	Declab_declab_flag : (Declab ¸ FLAG) ­ Declab;
Ü	Declab_vc_vars : (Declab ¸ ğ Var_Decl) ­ Declab;
Ü	Declab_formal_procs : (Declab ¸ ğ Formal_Proc) ­ Declab;
Ü	Declab_dec_labels : (Declab ¸ ğ LABEL) ­ Declab
°

ÿDEC_ENVüüüüüüüüüüüüüüüüü
Ü	dec_env : LABEL ß Declab
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛDEC_ENVİ
=TYPESTRUCT
      = {
	dec_env : LABEL -> DECLAB
	};
=TEX

¹Z
Ü	DEC_ENV0 ¦ [DEC_ENV | dec_env = {}]
°

\subsection{Spec Label Environment}

¹ZAX
Ü	Speclab_w : (Speclab ¸ ğ Z_ID) ­ Speclab;
Ü	Speclab_vc_vars : (Speclab ¸ ğ Var_Decl) ­ Speclab;
Ü	Speclab_formal_procs : (Speclab ¸ ğ Formal_Proc) ­ Speclab;
Ü	Speclab_dec_labels : (Speclab ¸ ğ LABEL) ­ Speclab
°

ÿSPEC_ENVüüüüüüüüüüüüüüüüü
Ü	spec_env : LABEL ß Speclab
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛSPEC_ENVİ
=TYPESTRUCT
      = {
	spec_env : LABEL -> SPECLAB
	};
=TEX

¹Z
Ü	SPEC_ENV0 ¦ [SPEC_ENV | spec_env = {}]
°

\subsection{Running Environment}

ÿBlocküüüüüüüüüüüüüüüüü
Ü	Declab;
Ü	current_formal_proc : Formal_Proc;
Ü	current_formal_fun : Formal_Fun;
Ü	dec_lab, spec_lab : LABEL;
Ü	till : Z_PRED
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛBLOCKİ
=TYPESTRUCT
      = {
	declab : DECLAB,
	current_formal_proc : FORMAL_PROC,
	current_formal_fun : FORMAL_FUN,
	dec_lab : LABEL,
	spec_lab : LABEL,
	till : Z_PRED
	};
=TEX

¹ZAX
Ü	Block_stub_flag, Block_till_flag : (Block ¸ FLAG) ­ Block;
Ü	Block_vc_vars : (Block ¸ ğ Var_Decl) ­ Block;
Ü	Block_vc_pars : (Block ¸ ğ Param_Spec) ­ Block;
Ü	Block_vc_log_cons : (Block ¸ ğ Z_Decl) ­ Block;
Ü	Block_formal_procs : (Block ¸ ğ Formal_Proc) ­ Block;
Ü	Block_current_formal_proc : (Block ¸ Formal_Proc) ­ Block;
Ü	Block_current_formal_fun : (Block ¸ Formal_Fun) ­ Block;
Ü	Block_till : (Block ¸ Z_PRED) ­ Block
°

ÿENVüüüüüüüüüüüüüüüüü
Ü	blocks : seq Block
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛENVİ
=TYPESTRUCT
      = {
	blocks : BLOCK list
	};
=TEX

¹ZAX
Ü	flatten_env : ENV ­ In_Scope
°

ÿEmpty_Blocküüüüüüüüüüüüüüüüü
Ü	Block
÷üüüüüüüüüüüüü
Ü	vc_vars = {};
Ü	vc_pars = {};
Ü	vc_log_cons = {};
Ü	formal_procs = {};
Ü	dec_labels = {}
ˆüüüüüüüüüüüüüüüüüüüü

=SML
=TEX

ÿENV0üüüüüüüüüüüüüüüüü
Ü	ENV;
Ü	Empty_Block
÷üüüüüüüüüüüüü
Ü	blocks =  § Ê Block ¢;
Ü	pack_spec_flag =
Ü	pack_body_flag =
Ü	stub_flag =
Ü	subunit_flag =
Ü	formal_body_flag =
Ü	fun_flag = declabel_flag = speclabel_flag = till_flag = False
ˆüüüüüüüüüüüüüüüüüüüü

\section{EPILOGUE}
=SML
end; (* local...in *)
end; (* signature CNTypes1 *)
=TEX
\section{TEST POLICY}
The functions in this document are to be tested according to the
criteria identified in \cite{ISS/HAT/DAZ/PLN003}.

\small
\twocolumn[\section{INDEX}]
\printindex

\end{document}



