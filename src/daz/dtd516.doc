% dtd516.doc   %Z% $Date$ $Revision$ $RCSfile$
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\def\daztool{Compliance Tool}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design: Compliance Tool User Interface}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/DTD516}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & DAZ Team}
\raggedright{\TPPabstract{This document contains the signature for the commands required to operate the compliance tool.}}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	C.~O'Halloran, DRA \\
	Library}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
\newfont{\icllogo}{icllogo50}
\def\TPPheadlhs{$\vcenter{\halign{##\cr\icllogo ICL\cr}}$}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issues 1.1-1.5] First drafts.
\item[Issues 1.6-1.7] Reworked according to desk check report 018.
\item[Issue 1.8] Corrected usage message in one of the documentation boxes.
\item[Issue 1.9] Added $output\_hypertext\_edit\_script$ to the signature.

\end{description}
\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document provides the user with an interface to all the functions required to operate the compliance tool and is written in response to \cite{ISS/HAT/DAZ/HLD503}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains a signature which comprises the functions necessary for a user to operate the compliance tool. It supports the following functionality:
\begin{description}
\item
Specify a new literate script
\item
Generate a SPARK program, either into the {\Product} journal window or into a file.
\item
Generate a Z document, either into the journal window or a file.
\item
Invoke a navigation system to map between VCs and the web clauses from which they originate. 
\end{description}
\subsubsection{Known Deficencies}
None known.
\subsection{Possible Enhancements}
None.

\section{THE SIGNATURE}
=DOC
signature €ComplianceTool›  = sig
=DESCRIBE
This is the signature for the commands which a user requires to operate the compliance tool.
=ENDDOC

\section{CREATING NEW LITERATE SCRIPTS}
=DOC
type €CN_STATE›
val €initial_cn_state› : CN_STATE
val €get_cn_state› : unit -> CN_STATE
val €set_cn_state› : CN_STATE -> unit
val €new_script› : {name : string, state : CN_STATE} -> unit
=DESCRIBE
$new\_script$ takes as an argument the name of a literate script. It initialises the compliance tool environment with the state supplied as its argument $state$ and creates a new theory of the same name, into which the Z document generated by the subsequent literate script is placed.

$initial\_cn\_state$ is the state of the Compliance Tool where all the environments are set to empty. It is convenient to use the $initial\_cn\_state$ as an argument to $new\_script$ when no previous script has been processed.

$get\_cn\_state$ and $set\_cn\_state$ gets and sets the state of the Compliance Tool.
=ENDDOC
\section{GENERATING A SPARK PROGRAM}
=DOC
val €print_spark_program› : unit -> unit
val €output_spark_program› : {out_file : string} -> unit
=DESCRIBE
The function $print\_spark\_program$ generates and prints the SPARK program from the contents of the {\daztool} environment. The SPARK program is created by filling in the k-slots and specification statements in a literate script with their expansions and printing the output onto the screen in SPARK syntax such that it could be subsequently compiled using an Ada compiler.

$output\_spark\_program$ does the same as $print\_spark\_program$ but allows the user to specify a file to which the program will then be written. 

=ENDDOC
\section{GENERATING A Z DOCUMENT}
=DOC
val €print_z_document› : string -> unit
val €output_z_document› : {script : string, out_file : string} -> unit
=DESCRIBE
$print\_z\_document$ prints the Z document from the named script to the standard output. The listing is in a format suitable for its re-entry into a {\Product} session.

$output\_z\_program$ is similar to $print\_z\_document$, but the the Z document is written to the named output file $out\_file$.

=USES
For example, if a literate script called ``primes'' has been entered into the {\daztool}  then the following command will output the corresponding Z document to a file called $primes.zdoc$.

\begin{verbatim}
output_z_document{script="primes", out_file="primes.zdoc"}
\end{verbatim}

=ENDDOC

\section{NAVIGATION}

=DOC
val €browse_vcs› : unit -> unit
=DESCRIBE
This invokes an interactive browsing tool for mapping VCs onto web clause and vice versa.
=ENDDOC

\section{GENERATING AN EDIT SCRIPT FOR HYPERTEXT}

=DOC
val €output_hypertext_edit_script› : {out_file : string} -> unit
=DESCRIBE
This function produces an edit script from a processed literate script. The edit script is placed in a file with name $out\_file$.

The edit script will introduce hypertext links between specification statements or K-Slots, and their corresponding expansion paragraphs. 
=ENDDOC

\section{SUBSTITUTION IN VCS}
=DOC
(* Flag €cn_use_let_in_vcs› - boolean control, default false *)
=DESCRIBE
This flag controls the way substitution of expressions for variables is treated during VC generation.

If the flag is false (the default), then the substitution is carried out using the HOL $subst$ function and then conversions are used to transform the result into Z: this results in a Z term in which the variables have actually been replaced by their substitutes, and declarations and other constructs have been adjusted as necessary to avoid variable capture.

If the flag is set true (using $set\_flag$), then an HOL $let$ construct is used to give the semantics of substitution without actually replacing any variables with their substitutes.
The result is {\em not} Z, but may help to abbreviate the VC and make its structure clearer.
=ENDDOC


\section{EPILOGUE}

=SML
end (* signature ComplianceTool *);
=TEX

\section{TEST POLICY}
The functions in this document are used to invoke interactive tools and are not appropriate for off-line testing. Therefore there are no corresponding module tests.

These are to be tested during system/integration tests as discussed in \cite{ISS/HAT/DAZ/HLD502}.
=TEX
\small
\twocolumn[\section{INDEX}]
\printindex
\end{document}
