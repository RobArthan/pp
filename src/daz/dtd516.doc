% dtd516.doc   %Z% $Date$ $Revision$ $RCSfile$
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design: Compliance Tool User Interface}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/DTD516}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & DAZ Team}
\raggedright{\TPPabstract{This document contains the signature for the commands required to operate the compliance tool.}}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[1.1] This is the first draft.
\end{description}
\subsection{Changes Forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document provides the user with an interface to all the functions required to operate the compliance tool and is written in response to \cite{ISS/HAT/DAZ/HLD503}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains a signature which comprises the functions necessary for a user to operate the compliance tool. It supports the following functionality:
\begin{description}
\item
Specify a new literate script
\item
Generate a SPARK program, either into the {\Product} journal window or into a file.
\item
Generate a Z document, either into the journal window or a file.
\item
Invoke a navigation system to map between VCs and the web clauses from which they originate. 
\end{description}
\subsubsection{Known Deficencies}
None known.
\subsection{Possible Enhancements}
None.

\section{THE SIGNATURE}
=DOC
signature ÛComplianceToolÝ  = sig
=DESCRIBE
This is the signature for the commands which a user requires to operate the compliance tool.
=ENDDOC

\section{CREATING NEW LITERATE SCRIPTS}
=DOC
val Ûnew_scriptÝ : string -> unit
=DESCRIBE
$new\_script$ takes as an argument the name of a literate script. It initialises the compliance tool environments and creates a new theory of the same name, into which the Z document generated by the subsequent literate script is placed. 
=ENDDOC
\section{GENERATING A SPARK PROGRAM}
=DOC
val Ûprint_spark_programÝ : unit -> unit
val Ûoutput_spark_programÝ : {out_file : string} -> unit
=DESCRIBE
The function $print\_spark\_program$ generates and prints the SPARK program from the contents of the Compliance Tool environment. The SPARK program is created by filling in the k-slots and specification statements in a literate script with their expansions and printing the output onto the screen in SPARK syntax such that it could be subsequently compiled using an Ada compiler.

$output\_spark\_program$ does the same as $print\_spark\_program$ but allows the user to specify a file to which the program will then be written.
=ENDDOC
\section{GENERATING A Z DOCUMENT}
=DOC
val Ûprint_z_documentÝ : string -> unit
val Ûoutput_z_documentÝ : {script : string, out_file : string} -> unit
=DESCRIBE
$print\_z\_document$ prints the Z document from the named script to the standard output. The listing is in a format suitable for its re-entry into a {\Product} session.

$output\_z\_program$ is similar to $print\_z\_document$, but the the Z document is written to the named output file $out\_file$.

=USES
For example, if a literate script called ``primes'' has been entered into the Compliance Tool then the following command will output the corresponding Z document to a file called $foo.ada$.

\begin{verbatim}
output_z_document{script="primes", out_file="foo.ada"}
\end{verbatim}

=ENDDOC

\section{NAVIGATION}

=DOC
val Ûbrowse_vcsÝ : unit -> unit
=DESCRIBE
This invokes an interactive browsing tool for mapping VCs onto web clause and vice versa.
=ENDDOC

\section{EPILOGUE}

=SML
end (* signature ComplianceTool *);
=TEX

\section{TEST POLICY}
The functions in this document are used to invoke interactive tools and are not appropriate for off-line testing.
They are to be tested during system/integration tests as discussed in \cite{ISS/HAT/DAZ/HLD502}.
=TEX
\small
\twocolumn[\section{INDEX}]
\printindex
\end{document}
