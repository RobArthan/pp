%  dtd512.doc %Z% $Date$ $Revision$ $RCSfile$
%
% use the following to make the .dvi file:
% 
% make -f daz.mkf dtd512.dvi
%
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design: Compliance Notation Reader/Writer}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/DTD512}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{Specification}
%\TPPkeywords{HOL}
\TPPauthor{D.J.~King&WIN01}
\TPPauthorisation{R.D.~Arthan & DAZ Team}
\TPPabstract{
This document contains the detailed design for the Compliance Notation Reader/Writer.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	A.~Smith, DRA \\
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1-1.4] Initial Drafts.

\item[Issue 1.5 (27th May 1994)]
First draft for comment.

\item[Issue 1.7 (21th Sept 1994)]
Rework done according to desk check report 005, and checked by KB.

\item[Issue 1.8] Updated the distribution list.

\end{description}
\subsection{Changes Forecast}
None.
\section{GENERAL}
\subsection{Scope}

This document responds to the requirement for a reader/writer for compliance notation identified in \cite{ISS/HAT/DAZ/HLD503} which covers compliance notation processing. The implementation of this detailed design can be found in \cite{ISS/HAT/DAZ/IMP512}.

\subsection{Introduction}

\subsubsection{Purpose and Background}

This document contains the detailed design for the reader/writer for recognising compliance notation. It covers recognition of web clauses which are not Z paragraphs.

The compliance notation reader is made available to the compliance tool by specifying it in the recogniser function. The recogniser function is called directly by the {\Product} reader/writer and this invokes the compliance notation reader $cn\_reader$. The design for the recogniser function is to be found in \cite{ISS/HAT/DAZ/DTD504} and its implementation in \cite{ISS/HAT/DAZ/IMP504}.

A specific Compliance Notation writer is not required since the existing {\Product} facilities for displaying strings is suitable without any modifications.

%\subsubsection{Dependencies}
%\subsubsection{Possible Enhancements}
\subsubsection{Deficiencies}
None known.

\section{DESIGN ISSUES}

\subsection{Strings in SPARK}

SPARK has a requirement to support strings delimited by double quotation characters. The more general requirement in Ada for use of other delimiters (e.g., \%), is explicitly forbidden in SPARK. Escape sequences using backslash are not a feature of SPARK (although they are provided both in {\ProductHOL} and {\ProductZ}). Likewise percent keywords are a feature of {\Product} and cannot appear in SPARK strings.

The only escape sequence in SPARK strings is the use of two consecutive double quotation characters {``\ '\ '\ ''} to denote a single occurrence of a double quotation character {``\ "\ ''}.

The compliance notation reader supports SPARK strings. When a string is recognised, the reader generates the string using the data constructor $Lex.String : string\  -> Lex.INPUT$.

\subsection{SPARK Comments}

SPARK comments are denoted by two consecutive hyphens. Everything to the end of the line is then ignored. The reader is responsible for stripping the input of SPARK comments.

\subsection{SPARK Text}

Compliance notation comprises not only the SPARK lexemes but also Z lexemes since Z fragments appear in compliance notation (e.g. in specification statement pre- and post-conditions and in auxiliary variables). Therefore the reader must accept a more general class of input than that defined for SPARK. The lexical analyser and the parser have the responsibility of checking the classes of input; this is possible because at that point in processing the input, more contextual information is known.
 
Specifically, the textual input can comprise extended characters and percent keywords. Note that this aspect of the implementation is very similar to that already available for {\ProductZ}.

\section{THE SIGNATURE $CNReaderWriter$}
=DOC
signature ÛCNReaderWriterÝ = sig
=DESCRIBE
This structure holds the reader code specification for recognising compliance notation. A specification writer for compliance notation is not required.
=FAILUREC
All the errors that the basic reader/writer may raise may also be raised
by the compliance notation reader/writer.
=ENDDOC
\section{THE READER FUNCTION}
=DOC
val Ûcn_readerÝ : string -> ReaderWriterSupport.READER_FUNCTION;
=DESCRIBE
This is the Compliance Notation reader function; its argument is the name of the recogniser for compliance notation.
This function is provided to allow specialised versions of the CN language
to be read, it is not intended to be called directly called by any user
code.
=FAILUREC
All the errors that the {\Product} reader may raise may also be raised
by the CN reader.
=ENDDOC
%--------------------------------------------------------------------

\section{EPILOGUE}
=SML
end; (* signature CNReaderWriter *)
=TEX
\section{TEST POLICY}
The functions in this document are to be tested according to the
criteria identified in \cite{ISS/HAT/DAZ/PLN003} and the testing strategy outlined in \cite{ISS/HAT/DAZ/HLD503}.

\small
\twocolumn[\section{INDEX}]
\printindex

\end{document}



