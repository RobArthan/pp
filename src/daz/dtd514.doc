%  dtd514.doc %Z% $Date$ $Revision$ $RCSfile$
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design: Compliance Notation (Volume II) Types}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/DTD514}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{Specification}
\TPPkeywords{Compliance Notation}
\TPPauthor{D.J.~King&WIN01}
\TPPauthorisation{R.D.~Arthan & HAT Team}
\TPPabstract{
This document contains the detailed design for the
Compliance Notation Specification Database.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,hatdocs,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1-1.5] Initial Drafts.
\item[Issue 1.6 (13th October 1994) ] Added support for auxiliary variables.

\end{description}
\subsection{Changes Forecast}
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for the Web Clause Processor.

\subsection{Introduction}

\subsubsection{Purpose and Background}


\subsubsection{Dependencies}
%\subsubsection{Possible Enhancements}
\subsubsection{Deficiencies}
None known.

\section{DESIGN ISSUES}
\section{PREAMBLE}
=DOC
signature ÛCNTypes2İ = sig
=DESCRIBE
=ENDDOC

=SML
local
open	CNTypes CNBasicDeclsAndExprs;
in
=TEX

\subsection{Preamble for Z Type-Checking}

The following initialises the theory database when performing a syntax and type check on the Z paragraphs in this document. (This preamble is not processed when building the compliance tool.)

=SMLZ
open_theory"dtd502";
push_pc "z_library";
force_delete_theory"dtd514" handle Fail _ => ();
val _ = set_flag ("z_type_check_only", false);
new_theory "dtd514";
=TEX


\subsection{VCs}

This is taken from \cite[section 4]{DRA/CIS/CSE3/SWI/WP/1/3}.

¹Z
Ü	MODE ::= inn | in_out | out
°
The design for mode is specified in \cite{ISS/HAT/DAZ/DTD502}.

ÿParam_Specüüüüüüüüüüüüüüüüü
Ü	Var_Decl;
Ü	mode : MODE
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛPARAM_SPECİ
=TYPESTRUCT
      = {
	var_decl : VAR_DECL,
	mode : MODE
	};
=TEX

ÿFormal_Procüüüüüüüüüüüüüüüüü
Ü	name : ID;
Ü	formal_ids : seq Param_Spec;
Ü	Spec
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛFORMAL_PROCİ
=TYPESTRUCT
      = {
	name : ID,
	formal_ids : PARAM_SPEC list,
	spec : SPEC
	};
=TEX

ÿInformal_Funüüüüüüüüüüüüüüüüü
Ü	name : ID;
Ü	formal_pars : seq Param_Spec;
Ü	return_type : TMARK
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛINFORMAL_FUNİ
=TYPESTRUCT
      = {
	name : ID,
	formal_pars : PARAM_SPEC list,
	return_type : TMARK
};
=TEX

ÿWp_Envüüüüüüüüüüüüüüüüü
Ü	fun_header : Informal_Fun;
Ü	return, till : Z_PRED;
Ü	formal_procs : ğ Formal_Proc
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛWP_ENVİ
=TYPESTRUCT
      = {
	fun_header : INFORMAL_FUN,
	return : Z_PRED,
	till : Z_PRED,
	formal_procs : FORMAL_PROC list,
	env : CN_ENV
	};
=TEX

ÿResultüüüüüüüüüüüüüüüüü
Ü	WP, SIDE : ğ Sequent
ˆüüüüüüüüüüüüüüüüüüüü

¹ZAX
Ü	wp : (Statement ¸ ğ Sequent ¸ Wp_Env) ß Result
°

=SML
type ÛSEQUENTİ 
=TYPESTRUCT
	= SEQ;
=SML
type ÛRESULTİ
=TYPESTRUCT
      = {
	wp : SEQUENT list,
	side : SEQUENT list
	};
=TEX

ÿParsüüüüüüüüüüüüüüüüü
Ü	st : Statement;
Ü	A : ğ Sequent;
Ü	Wp_Env;
Ü	Result
ˆüüüüüüüüüüüüüüüüüüüü
The schema $Pars$ is used to define the arguments and result of the weakest precondition function for the free type $Stmt$.
The function is in effect formed as the union of a family of partial functions which are actually given as sets of bindings of type $Pars$.
To implement this in Standard ML, we use functions parameterised by the function $wp$ which we are defining.
It is also more convenient in Standard ML to pass the constituent of an arm of the free type rather than the free type value itself.
The following Standard ML types assist in all this.
=SML
type ÛWP_TYPEİ 
=TYPESTRUCT
	= (STATEMENT * SEQUENT list * WP_ENV) -> RESULT;
=SML
type ÛWP_PARSİ
=TYPESTRUCT
      = {
	wp : WP_TYPE,
	a: SEQUENT list,
	wp_env : WP_ENV
	};
=TEX

=SML
type ÛVCİ
=TYPESTRUCT
      = Z_DECL list * SEQUENT;
=TEX


This is taken from \cite[section 5]{DRA/CIS/CSE3/SWI/WP/1/3}.

¹Z
Ü	FLAG ::= True | False
°

=SML
type ÛFLAGİ
=TYPESTRUCT
	= bool;
=TEX

¹Z
Ü	[LABEL]
°

The type of LABEL is declared in the structure CNTypes in \cite{ISS/HAT/DAZ/DTD502}.

ÿIn_Scopeüüüüüüüüüüüüüüüüü
Ü	vc_vars : ğ Var_Decl;
Ü	vc_pars : ğ Param_Spec;
Ü	vc_log_cons, vc_aux_vars : ğ Z_Decl[Z_EXP];
Ü	formal_procs : ğ Formal_Proc;
Ü	dec_labels : ğ LABEL
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛIN_SCOPEİ
=TYPESTRUCT
      = {
	vc_vars : VAR_DECL list,
	vc_pars : PARAM_SPEC list,
	vc_log_cons : Z_DECL list,
	vc_aux_vars : Z_DECL list,
	formal_procs : FORMAL_PROC list,
	dec_labels : LABEL list
	};
=TEX
ÿSpeclabüüüüüüüüüüüüüüüüü
Ü	Spec;
Ü	formal_body_flag, fun_flag, till_flag : FLAG;
Ü	Wp_Env;
Ü	In_Scope
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛSPECLABİ
=TYPESTRUCT
      = {
	spec : SPEC,
	formal_body_flag : FLAG,
	fun_flag : FLAG,
	till_flag : FLAG,
	wp_env : WP_ENV,
	in_scope : IN_SCOPE
	};
=TEX



\section{EPILOGUE}
=SML
end; (* local...in *)
end; (* signature CNTypes2 *)
=TEX
\section{TEST POLICY}
The functions in this document are to be tested according to the
criteria identified in \cite{ISS/HAT/DAZ/PLN003}.

\small
\twocolumn[\section{INDEX}]
\printindex

\end{document}



