=IGN
********************************************************************************
dtd514.doc: this file is part of the PPDaz system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
%  dtd514.doc %Z% $Date: 2007/05/13 14:55:58 $ $Revision: 1.46 $ $RCSfile: dtd514.doc,v $
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Compliance Notation (Volume II) Types}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/DTD514}  %% Mandatory field
\def\SCCSversion{$Revision: 1.46 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2007/05/13 14:55:58 $%
}}
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{Specification}
%\TPPkeywords{Compliance Notation}
\TPPauthor{D.J.~King&WIN01}
\TPPauthorisation{R.D.~Arthan & HAT Team}
\TPPabstract{
This document contains the detailed design for the data types used in Volume 2 of the compliance notation specification (``VC Generation'').}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	A.~Smith, DRA \\
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
\def\TPPheadlhs{Lemma 1 Ltd.}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issues 1.1-1.5] Initial Drafts.
\item[Issue 1.6 (13th October 1994) ] Added support for auxiliary variables.
\item[Issues 1.6-1.9] Bug fixing.
\item[Issue 1.10] Carried out document rework according to desk check report 013.
\item[Issue 1.11] Reworded the test policy section.
\item[Issue 1.12] Updated the distribution list.
\item[Issues 1.13-1.14] Updated DRA specification references.
\item[Issue 1.15,1.16] Updated references.
\item[Issue 1.17-1.21]  Changes for lightweight tool and NJML port.
\item[Issue 1.22] CTLE II R2/1: global variable unsoundness.
\item[Issue 1.23] Removed local declarations for Poly/ML port.
\item[Issue 1.24] Index brackets added.
\item[Issue 1.25] R0053:  return and exit statements.
\item[Issue 1.26]  Support for R0047: renaming.
\item[Issue 1.27] {\it renamings} is now called {\it var\_renamings} in the specs.
\item[Issue 1.28] R0054: reworked treatment of use clauses.
\item[Issue 1.29] R0051: default parameters.
\item[Issue 1.30] Removed use of ICL logo font.
\item[Issue 1.25] R0053: exits from named loops.
\item[Issue 1.26] Spring 2002 enhancements: return and exit statements.
\item[Issue 1.27]]  Support for R0047: renaming.
\item[Issue 1.28] {\it renamings} is now called {\it var\_renamings} in the specs.
\item[Issue 1.29] Declare type  \textit{ ROUTE} for VC derivation information.
\item[Issue 1.30] Merged in changes for R0062.
\item[Issue 1.32] Copyright and banner updates for open source release.
\item[Issue 1.33] DAZ-specific updates to banner for open source release
\item[Issue 1.34] DAZ-specific updates to banner for open source release
\item[Issue 1.35] Schemas-as-declarations now catered for in output Z syntax.
\item[Issues 1.36-1.38] Reform of the Environments.
\item[Issue 1.39] Support for multiple use clauses for the same package.
\item[Issue 1.40] Data types to support new treatment of initial variables in side conditions.
\item[Issue 1.41] Fixed problem with object renamings in package specifications.
\item[Issue 1.42] Added variant of {\em env\_of\_env\_dict}.
\item[Issue 1.45] Support for general expanded names.
\item[Issue 1.46] Elements of a block name are now optional so that anonymous blocks and loops can be represented.
\item[Issue 1.47] Removed obsolete CUTDOWNVERSION option.
\end{description}
\subsection{Changes Forecast}
None.
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for the Standard ML types representing the data structures used in \cite[Volume 2]{DRA/CIS/CSE3/TR/94/27/3.0}; it is called for in \cite{ISS/HAT/DAZ/HLD503}.

\subsection{Introduction}

As discussed in \cite{ISS/HAT/DAZ/HLD503}, it is convenient in the Standard ML implementation for the definitions of types used in the Compliance Notation Processing to be placed in a separate structure (i.e., module) from the functions which act on those types.
This document gives the structure (i.e., module) containing the types used in implementing \cite[Volume 2]{DRA/CIS/CSE3/TR/94/27/3.0}.
As usual it also includes a transcription into {\ProductZ} of the relevant parts of the DRA specification.

\subsubsection{Purpose and Background}

See \cite{ISS/HAT/DAZ/HLD503}.


\subsubsection{Dependencies}
See \cite{ISS/HAT/DAZ/HLD503}.

\subsection{Compliance}
For a justification of the style of presenting Z types used in this document, see \cite[section 1.3]{ISS/HAT/DAZ/DTD502}.

It is intended that the compliance of the Z to the implementation can be done with a visual check in this document.

\section{PREAMBLE}
\subsection{Preamble for Z Type-Checking}

The following initialises the theory database when performing a syntax and type check on the Z paragraphs in this document. (This preamble is not processed when building the compliance tool.)

=SMLZ
open_theory"dtd502";
push_pc "z_library";
force_delete_theory"dtd514" handle Fail _ => ();
val _ = set_flag ("z_type_check_only", true);
new_theory "dtd514";
=TEX
\subsection{The Signature}
=TEX

=DOC
signature ÛCNTypes2Ý = sig
=DESCRIBE
=ENDDOC
It would be much nicer if the following signature inclusions could
be replaced by local declarations of the corresponding structures
but that is not supported in strict SML '97. (N.b. both structures
would be in the local declaration if they were available since
the second signature would not include the first).
=SML
include	CNBasicDeclsAndExprs;
=TEX



\section{WEAKEST PRECONDITIONS}

This is taken from \cite[volume 2, sect. 4.1]{DRA/CIS/CSE3/TR/94/27/3.0}.

¹Z
Ü	ÛMODEÝ ::= inn | in_out | out
°
The design for mode, parameter specification and formal procedures is specified in \cite{ISS/HAT/DAZ/DTD502}.

ÿÛParam_SpecÝüüüüüüüüüüüüüüüüü
Ü	Var_Decl;
Ü	mode : MODE
ˆüüüüüüüüüüüüüüüüüüüü
=TEX

ÿÛFormal_ProcÝüüüüüüüüüüüüüüüüü
Ü	name : ID;
Ü	formal_ids : seq Param_Spec;
Ü	globals : seq Z_ID;
Ü	Spec
ˆüüüüüüüüüüüüüüüüüüüü

=TEX

ÿÛInformal_FunÝüüüüüüüüüüüüüüüüü
Ü	name : ID;
Ü	formal_pars : seq Param_Spec;
Ü	return_type : TMARK
ˆüüüüüüüüüüüüüüüüüüü


=SML
type ÛINFORMAL_FUNÝ
=TYPESTRUCT
      = {
	name : ID,
	formal_pars : PARAM_SPEC list,
	par_names_defs : (ID * Z_EXP OPT) list,
	return_type : TMARK
};
=TEX

ÿÛWp_EnvÝüüüüüüüüüüüüüüüüü
Ü	fun_header : Informal_Fun;
Ü	return, till : Z_PRED;
Ü	named_tills : ID ­ Z_PRED;
Ü	formal_procs : ð Formal_Proc
ˆüüüüüüüüüüüüüüüüüüüü

=SML
(*
=SML
type CN_ENV
=TYPESTRUCT
  = unit;
=SML
*)
=SML
type ÛWP_ENVÝ
=TYPESTRUCT
      = {
	fun_header : INFORMAL_FUN,
	return : Z_PRED,
	till : Z_PRED,
	named_tills : (ID * Z_PRED) list,
	env : CN_ENV
	};
=TEX

ÿÛResultÝüüüüüüüüüüüüüüüüü
Ü	WP : ð Sequent;
Ü	SIDE : ð (Sequent ¸ ðZ_ID);
Ü	MODIFIES : ðZ_ID
ˆüüüüüüüüüüüüüüüüüüüü

¹ZAX
Ü	ÛwpÝ : (Statement ¸ ð Sequent ¸ Wp_Env) ß Result
°

=SML
type ÛSEQUENTÝ 
=TYPESTRUCT
	= SEQ;
=SML
type ÛRESULTÝ
=TYPESTRUCT
      = {
	wp : SEQUENT list,
	side : (SEQUENT * Z_ID list) list,
	modifies : Z_ID list
	};
=TEX

ÿÛParsÝüüüüüüüüüüüüüüüüü
Ü	st : Statement;
Ü	A : ð Sequent;
Ü	Wp_Env;
Ü	Result
ˆüüüüüüüüüüüüüüüüüüüü
The schema $Pars$ is used to define the arguments and result of the weakest precondition function for the free type $Stmt$.
The function is in effect formed as the union of a family of partial functions which are actually given as sets of bindings of type $Pars$.
To implement this in Standard ML, we use functions parameterised by the function $wp$ which we are defining.
It is also more convenient in Standard ML to pass the constituent of an arm of the free type rather than the free type value itself.
The following Standard ML types assist in all this.
=SML
type ÛWP_TYPEÝ 
=TYPESTRUCT
	= (STATEMENT * SEQUENT list * WP_ENV) -> RESULT;
=SML
type ÛWP_PARSÝ
=TYPESTRUCT
      = {
	wp : WP_TYPE,
	a: SEQUENT list,
	wp_env : WP_ENV
	};
=TEX
\section{VERIFICATION CONDITIONS}

=SML
type ÛVCÝ
=TYPESTRUCT
      = Z_DECL list * SEQUENT;
=TEX


This is taken from \cite[volume 2, sect. 5.1]{DRA/CIS/CSE3/TR/94/27/3.0}
¹Z
Ü	ÛFLAGÝ ::= True | False
°

=SML
type ÛFLAGÝ
=TYPESTRUCT
	= bool;
=TEX

¹Z
Ü	[ÛLABELÝ]
°

The type of LABEL is declared in the structure CNTypes in \cite{ISS/HAT/DAZ/DTD502}.

ÿÛIn_ScopeÝüüüüüüüüüüüüüüüüü
Ü	vc_vars : ð Var_Decl;
Ü	vc_pars : ð Param_Spec;
Ü	vc_log_cons, vc_aux_vars : ð Z_Decl[Z_EXP];
Ü	obj_renamings : Z_ID ß Z_ID;
Ü	use_clause_subs : Z_ID ß Z_ID;
Ü	formal_procs : ð Formal_Proc;
Ü	dec_labels : ð LABEL
ˆüüüüüüüüüüüüüüüüüüüü
=TEX
=DOC
type ÛLOCAL_VARSÝ 
=TYPESTRUCT
	=  {
		vc_vars : Z_ID list,
		vc_pars : Z_ID list,
		vc_aux_vars : Z_ID list,
		vc_log_cons : Z_ID list};
=SML
type ÛENV_DICTÝ;
val Ûinitial_env_dictÝ : ENV_DICT;
val Ûadd_to_env_dictÝ : ENV_DICT -> ENV_INFO S_DICT -> ENV_DICT;
val Ûdelete_from_env_dictÝ : ENV_DICT -> Z_ID list-> ENV_DICT;
val Ûset_cn_scopeÝ : ENV_DICT -> Z_ID list -> ENV_DICT;
val Ûget_cn_scopeÝ : ENV_DICT -> Z_ID list OPT;
val Ûenv_of_env_dictÝ : ENV_DICT ->  CN_ENV;
val Ûenv_of_env_dict1Ý : ENV_DICT ->  CN_ENV;
val Ûflatten_env_dictÝ : ENV_DICT ->  ENV_INFO S_DICT;
val Ûti_context_of_env_dictÝ : ENV_DICT -> TYPE E_DICT;
val Ûnew_scope_env_dictÝ : ENV_DICT -> ENV_DICT;
val Ûget_local_varsÝ : ENV_DICT -> LOCAL_VARS;
val Ûget_used_packagesÝ : ENV_DICT -> ID list;
val Ûadd_used_packageÝ : ENV_DICT -> ID -> ENV_DICT;
=DESCRIBE
This type and associated functions form an abstract data type encapsulating the functionality requried of the part of an  {\em IN\_SCOPE} that maps entity names to their environment information.
The new scope function clears out the information on {vc\_vars}, {vc\_pars} etc. as required when one enters a new scope.

The functions also manage a corresponding type inference context adding entries for program variables, parameters, auxiliary variables and logical constants as necessary.
Entries for entities of these sorts must include the HOL type.
Note that the functions do not actually set the type inference context, they just maintain it for caller to set as required.

{\em env\_of\_env\_dict1} differs from {\em env\_of\_env\_dict} in not trying to use {\em get\_const\_type} if the name has not been recorded in the environment, but returning {\em Nil} in that case.

=FAILURE
514001	Internal error: invalid entry for ?0: a type must be supplied with this kind of entry 
514002	The name ?0 is not in scope here
=ENDDOC
=SML
type ÛIN_SCOPEÝ
=TYPESTRUCT
      = {
	dict : ENV_DICT,
	dec_labels : LABEL list
	};
=TEX
ÿÛSpeclabÝüüüüüüüüüüüüüüüüü
Ü	Spec;
Ü	formal_body_flag, fun_flag, till_flag : FLAG;
Ü	Wp_Env;
Ü	In_Scope
ˆüüüüüüüüüüüüüüüüüüüü

=SML
type ÛSPECLABÝ
=TYPESTRUCT
      = {
	spec : SPEC,
	formal_body_flag : FLAG,
	fun_flag : FLAG,
	till_flag : FLAG,
	wp_env : WP_ENV,
	in_scope : IN_SCOPE,
	block_name : ID OPT list
	};
=TEX


=SML
type ROUTE
=TYPESTRUCT
	= TERM;
=TEX

\section{EPILOGUE}
=SML
end; (* signature CNTypes2 *)
=TEX
\section{TEST POLICY}
There are no module tests for the design in this document since it specifies no functions.

\small
\twocolumn[\section{INDEX}]
\printindex

\end{document}



