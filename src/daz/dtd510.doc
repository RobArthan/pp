%  dtd510.doc %Z% $Date$ $Revision$ $RCSfile$
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design: SPARK Output Function}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/DTD510}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{Specification}
\TPPkeywords{SPARK}
\TPPauthor{A.C.~Hayward&WIN01}
\TPPauthorisation{R.B.~Jones & HAT Manager}
\TPPabstract{
This document contains the detailed design for the DAZ SPARK Output Function.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{daz,fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1, \FormatDate{94/03/28}] Initial Draft.
\item[Issue 1.2, \FormatDate{94/03/28}] Added signature information.
\item[Issue 1.3, \FormatDate{94/03/29}] Minor bug fixes.
\item[Issue 1.4, \FormatDate{94/03/30}] Added fmt\_variant\_alt\_list.
\item[Issue 1.5, \FormatDate{94/03/30}] Changed types of ranges.
\item[Issue 1.6, \FormatDate{94/04/07}] Change so now returns a (int * string) list.

\end{description}
\subsection{Changes Forecast}
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for the DAZ SPARK Output Function.
The implementation is in \cite{ISS/HAT/DAZ/IMP510}.


\subsection{Introduction}

\subsubsection{Purpose and Background}

\subsubsection{Dependencies}
%\subsubsection{Possible Enhancements}
\subsubsection{Deficiencies}
None known.

\section{DESIGN ISSUES}

\section{PREAMBLE}
=DOC
open CNTypes;
signature ÛSPARKOutputÝ = sig
=DESCRIBE
This is the signature for the structure containing the output function for SPARK.
=ENDDOC

\section{SPARK Output Function}
=DOC
val ÛPPTabSizeÝ : int ref   
val Ûset_PPTab_sizeÝ : int -> unit   
val Ûget_PPTab_sizeÝ : unit -> int   
val Ûfmt_spacesÝ : int -> string   
val Ûfmt_tabsÝ : int -> string
=DESCRIBE
These functions deal with the low-level output of characters.
=ENDDOC

=DOC
val Ûfmt_idÝ : ID -> string
val Ûfmt_tmarkÝ : TMARK -> string   
val Ûfmt_termÝ : TERM -> string   
val Ûfmt_labelÝ : LABEL -> string   
val Ûfmt_unary_opÝ : UNARY_OP -> string   
val Ûfmt_binary_opÝ : BIN_OP -> string   
val Ûfmt_modeÝ : MODE -> string   
val Ûfmt_loop_directionÝ : LOOP_DIRECTION -> string   
val Ûfmt_operator_symbolÝ : OPERATOR_SYMBOL -> OPERATOR_SYMBOL
=DESCRIBE
These are the leaf functions, they don't call any others.
=ENDDOC

=DOC  
val Ûfmt_id_listÝ : ID list -> string   
val Ûfmt_tmark_listÝ : TMARK list -> string
=DESCRIBE
Lists of leaf functions.
=ENDDOC

=DOC 
val Ûfmt_z_predÝ : Z_PRED -> string   
val Ûfmt_z_expÝ : Z_EXP -> string   
val Ûfmt_z_idÝ : Z_ID -> string   
val Ûfmt_attribÝ : ATTRIB -> string   
val Ûfmt_int_litÝ : INT_LIT -> string 
=DESCRIBE
Equivalences to leaf functions.
=ENDDOC

=DOC
val Ûfmt_rangelohiÝ : EXP RANGELOHI -> string
val Ûfmt_rangeÝ : EXP RANGE -> string
val Ûfmt_discrete_range_constrainedÝ : EXP DISCRETE_RANGE_CONSTRAINED ->
string
val Ûfmt_discrete_rangeÝ : DISCRETE_RANGE -> string
val Ûfmt_agg_choiceÝ : AGG_CHOICE -> string
val Ûfmt_agg_choice_listÝ : AGG_CHOICE list -> string
val Ûfmt_named_assocÝ : (AGG_CHOICE, EXP) NAMED_ASSOC -> string
val Ûfmt_named_assoc_listÝ : (AGG_CHOICE, EXP) NAMED_ASSOC list -> string
val Ûfmt_othersÝ : EXP OTHERS -> string
val Ûfmt_agg_posÝ : EXP AGG_POS -> string
val Ûfmt_agg_pos_othersÝ : EXP AGG_POS_OTHERS -> string
val Ûfmt_agg_othersÝ : EXP AGG_OTHERS -> string
val Ûfmt_agg_namedÝ : (AGG_CHOICE, EXP) AGG_NAMED -> string
val Ûfmt_agg_named_othersÝ : (AGG_CHOICE, EXP) AGG_NAMED_OTHERS ->
string
val Ûfmt_rec_agg_namedÝ : (AGG_CHOICE, EXP) REC_AGG_NAMED -> string
val Ûfmt_unary_expÝ : EXP UNARY_EXP -> string
val Ûfmt_bin_expÝ : EXP BIN_EXP -> string
val Ûfmt_attrib_desigÝ : ATTRIB_DESIG -> string
val Ûfmt_attributeÝ : (EXP, ATTRIB_DESIG) ATTRIBUTE -> string
val Ûfmt_indexed_compÝ : EXP INDEXED_COMP -> string
val Ûfmt_selected_compÝ : EXP SELECTED_COMP -> string
val Ûfmt_qualified_expressionÝ : EXP QUALIFIED_EXPRESSION -> string
val Ûfmt_expÝ : EXP -> string
val Ûfmt_exp_listÝ : EXP list -> string
=DESCRIBE
Functions dealing with expressions.
=ENDDOC

=DOC
val Ûfmt_specÝ : SPEC -> string   
val Ûfmt_static_expÝ : STATIC_EXP -> string 
val Ûfmt_static_rangelohiÝ : STATIC_EXP RANGELOHI -> string  
val Ûfmt_static_rangeÝ : STATIC_EXP RANGE -> string   
val Ûfmt_condÝ : COND -> string   
val Ûfmt_actualsÝ : (AGG_CHOICE, EXP) ACTUALS -> string   
val Ûfmt_proc_callÝ : (AGG_CHOICE, EXP) PROC_CALL * int -> string   
val Ûfmt_k_slotÝ : K_SLOT * int -> string 
=DESCRIBE
A couple of minor functions before we do statements.
=ENDDOC

=DOC
val Ûfmt_assignÝ : ASSIGN * int -> (int * string) list
val Ûfmt_spec_no_ivarsÝ : SPEC_NO_IVARS * int -> (int * string) list   
val Ûfmt_exit_whenÝ : EXIT_WHEN * int -> (int * string) list   
val Ûfmt_returnÝ : RETURN * int -> (int * string) list
val Ûfmt_proc_call_no_ivarsÝ : (AGG_CHOICE, EXP) PROC_CALL_NO_IVARS * int
-> (int * string) list
val Ûfmt_elsifÝ : STMT * int -> (int * string) list
val Ûfmt_if_then_elseÝ : STMT IF_THEN_ELSE * int -> (int * string) list
val Ûfmt_case_choiceÝ : CASE_CHOICE -> (int * string) list
val Ûfmt_case_choice_listÝ : CASE_CHOICE list -> (int * string) list
val Ûfmt_case_altÝ : STMT CASE_ALTERNATIVE * int -> (int * string) list
val Ûfmt_case_alt_listÝ : STMT CASE_ALTERNATIVE list * int -> (int * string) list
val Ûfmt_caseÝ : STMT CASE * int -> (int * string) list
val Ûfmt_unnamed_loopÝ : STMT LOOP * int -> (int * string) list
val Ûfmt_named_loopÝ : STMT NAMED_LOOP * int -> (int * string) list
val Ûfmt_loop_bodyÝ : STMT LOOP * int -> (int * string) list
val Ûfmt_whileÝ : STMT WHILE * int -> (int * string) list
val Ûfmt_for_staticÝ : STMT FOR_STATIC * int -> (int * string) list
val Ûfmt_for_tmarkÝ : STMT FOR_TMARK * int -> (int * string) list
val Ûfmt_stmtÝ : STMT * int -> (int * string) list
=DESCRIBE
Functions dealing with statements.
=ENDDOC

=DOC
val Ûfmt_log_conÝ : (LOG_CON * STMT) * int -> (int * string) list 
=DESCRIBE
Logical constructs.
=ENDDOC

=DOC  
val Ûfmt_statementÝ : STATEMENT * int -> (int * string) list   
=DESCRIBE
Top level statements.
=ENDDOC

=DOC
val Ûfmt_var_declÝ : VAR_DECL * int -> (int * string) list   
val Ûfmt_var_decl_listÝ : VAR_DECL list * int -> (int * string) list   
=DESCRIBE
Variable declarations.
=ENDDOC

=DOC
val Ûfmt_const_declÝ : EXP CONST_DECL * int -> (int * string) list   
val Ûfmt_deferred_const_declÝ : DEFERRED_CONST_DECL * int -> (int * string) list 
=DESCRIBE
Constant and Deferred constant declarations.
=ENDDOC

=DOC
val Ûfmt_variant_alt_listÝ : ID list -> string
val Ûfmt_variantÝ : COMPONENT VARIANT * int -> (int * string) list
val Ûfmt_variant_listÝ : COMPONENT VARIANT list * int -> (int * string) list
val Ûfmt_variant_partÝ : COMPONENT VARIANT_PART * int -> (int * string) list
val Ûfmt_declaration_variantÝ : COMPONENT DECLARATION_VARIANT * int 
-> (int * string) list
val Ûfmt_componentÝ : COMPONENT * int -> (int * string) list
val Ûfmt_component_listÝ : COMPONENT list * int -> (int * string) list
=DESCRIBE
A couple of minor functions before we do type definitions.
=ENDDOC

=DOC
val Ûfmt_discr_partÝ : DISCR_PART -> string
=DESCRIBE
Discriminant part.
=ENDDOC

=DOC
val Ûfmt_floating_point_constraintÝ : EXP FLOATING_POINT_CONSTRAINT -> string
val Ûfmt_floating_type_defÝ : EXP FLOATING_TYPE_DEF -> (int * string) list   
=DESCRIBE
Floating point types.
=ENDDOC

=DOC
val Ûfmt_fixed_point_constraintÝ : EXP FIXED_POINT_CONSTRAINT -> string   
val Ûfmt_fixed_type_defÝ : EXP FIXED_TYPE_DEF -> (int * string) list  
=DESCRIBE
Fixed point types.
=ENDDOC

=DOC 
val Ûfmt_enum_type_defÝ : ENUM_TYPE_DEF -> (int * string) list   
=DESCRIBE
Enumerated types.
=ENDDOC

=DOC
val Ûfmt_array_defÝ : ARRAY_DEF -> (int * string) list
=DESCRIBE
Array types.
=ENDDOC

=DOC
val Ûfmt_record_type_defÝ : COMPONENT RECORD_TYPE_DEF * int -> (int * string) list
=DESCRIBE
Record types.
=ENDDOC

=DOC
val Ûfmt_type_defÝ : TYPE_DEF * int -> (int * string) list   
val Ûfmt_type_declÝ : TYPE_DEF TYPE_DECL * int -> (int * string) list   
=DESCRIBE
Type declarations.
=ENDDOC

=DOC
val Ûfmt_constraintÝ : CONSTRAINT -> string   
val Ûfmt_sub_indÝ : CONSTRAINT SUB_IND -> string   
val Ûfmt_subtype_declÝ : CONSTRAINT SUBTYPE_DECL * int -> (int * string) list 
=DESCRIBE
Subtype declarations.
=ENDDOC

=DOC  
val Ûfmt_private_type_declÝ : PRIVATE_TYPE_DECL * int -> (int * string) list
=DESCRIBE
Private type declarations.
=ENDDOC

=DOC 
val Ûfmt_basic_declÝ : BASIC_DECL * int -> (int * string) list   
=DESCRIBE
Basic declarations.
=ENDDOC

=DOC
val Ûfmt_parameter_specificationÝ : PARAMETER_SPECIFICATION -> string   
val Ûfmt_parameter_specification_list1Ý : PARAMETER_SPECIFICATION list
-> string
val Ûfmt_parameter_specification_listÝ : PARAMETER_SPECIFICATION list
-> string
=DESCRIBE
Procedure and Function parameter specifications.
=ENDDOC

=DOC
val Ûfmt_procedure_specificationÝ : PROCEDURE_SPECIFICATION * int -> (int * string) list
val Ûfmt_function_specificationÝ : FUNCTION_SPECIFICATION * int -> (int * string) list
=DESCRIBE
Procedures and Function specifications.
=ENDDOC

=DOC
val Ûfmt_subprogram_specificationÝ : SUBPROGRAM_SPECIFICATION * int
-> (int * string) list
=DESCRIBE
Subprograms
=ENDDOC

=DOC
val Ûfmt_function_renamingÝ : FUNCTION_RENAMING * int -> (int * string) list
val Ûfmt_subprogram_renamingÝ : SUBPROGRAM_RENAMING * int -> (int * string) list   
val Ûfmt_renaming_declarationÝ : RENAMING_DECLARATION * int -> (int * string) list  
=DESCRIBE
Renaming declarations.
=ENDDOC

=DOC 
val Ûfmt_component_clauseÝ : COMPONENT_CLAUSE * int -> (int * string) list   
val Ûfmt_component_clause_listÝ : COMPONENT_CLAUSE list * int -> (int * string) list   
val Ûfmt_length_clauseÝ : LENGTH_CLAUSE * int -> (int * string) list   
val Ûfmt_enumeration_representation_clauseÝ
: ENUMERATION_REPRESENTATION_CLAUSE * int -> (int * string) list
val Ûfmt_record_representation_clauseÝ
: RECORD_REPRESENTATION_CLAUSE * int -> (int * string) list
val Ûfmt_address_clauseÝ : ADDRESS_CLAUSE * int -> (int * string) list   
val Ûfmt_representation_clauseÝ : REPRESENTATION_CLAUSE * int -> (int * string) list 
=DESCRIBE
Representation clauses.
=ENDDOC

=DOC  
val Ûfmt_procedure_declarationÝ : PROCEDURE_DECLARATION * int -> (int * string) list   
val Ûfmt_function_declarationÝ : FUNCTION_DECLARATION * int -> (int * string) list   
val Ûfmt_procedure_stubÝ : PROCEDURE_DECLARATION * int -> (int * string) list   
val Ûfmt_function_stubÝ : FUNCTION_DECLARATION * int -> (int * string) list   
val Ûfmt_package_stubÝ : ID * int -> (int * string) list   
val Ûfmt_package_declarationÝ : DECLARATION PACKAGE_DECLARATION * int
-> (int * string) list
val Ûfmt_declarationÝ : DECLARATION * int -> (int * string) list
val Ûfmt_declaration_listÝ : DECLARATION list * int -> (int * string) list
val Ûfmt_procedure_bodyÝ : DECLARATION PROCEDURE_BODY * int -> (int * string) list
val Ûfmt_function_bodyÝ : DECLARATION FUNCTION_BODY * int -> (int * string) list
val Ûfmt_package_bodyÝ : DECLARATION PACKAGE_BODY * int -> (int * string) list
val Ûfmt_proper_bodyÝ : PROPER_BODY * int -> (int * string) list
=DESCRIBE
Declarations.
=ENDDOC

=DOC
val Ûfmt_compilation_subunitÝ : SUBUNIT * int -> (int * string) list
=DESCRIBE
Compliation subunits.
=ENDDOC

=DOC  
val Ûfmt_context_clauseÝ : ID list * int -> (int * string) list   
val Ûfmt_compilation_unitÝ : COMPILATION_UNIT * int -> (int * string) list   
val Ûfmt_context_compilation_unitÝ : CONTEXT_COMPILATION_UNIT * int -> (int * string) list
val Ûfmt_kslot_compilation_unitÝ : KSLOT_COMPILATION_UNIT * int -> (int * string) list
val Ûfmt_kslot_compilation_unit_listÝ : KSLOT_COMPILATION_UNIT list * int
-> (int * string) list
=DESCRIBE
Compilation units.
=ENDDOC

=DOC
val Ûfmt_replaced_by_compÝ : REPLACED_BY_COMP * int -> (int * string) list   
val Ûfmt_replaced_by_private_partÝ: REPLACED_BY_PRIVATE_PART * int -> (int * string) list
val Ûfmt_replaced_by_visible_partÝ : REPLACED_BY_VISIBLE_PART * int -> (int * string) list
val Ûfmt_replaced_by_declÝ : REPLACED_BY_DECL * int -> (int * string) list   
val Ûfmt_refined_byÝ : REFINED_BY * int -> (int * string) list   
val Ûfmt_replaced_byÝ : REFINED_BY * int -> (int * string) list   
val Ûfmt_web_clauseÝ : WEB_CLAUSE * int -> (int * string) list 
=DESCRIBE
Web clauses
=ENDDOC

\section{EPILOGUE}
=DOC
end; (* signature SPARKOutput *)
=DESCRIBE
=ENDDOC
=TEX
\section{TEST POLICY}
The functions in this document are to be tested according to the
criteria identified in \cite{ISS/HAT/DAZ/PLN003}.  The test module
is \cite{ISS/HAT/DAZ/MDT503}.

\small
\twocolumn[\section{INDEX}]
\printindex

\end{document}



