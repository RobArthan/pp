%  dtd510.doc %Z% $Date$ $Revision$ $RCSfile$
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design: SPARK Output Function}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/DTD510}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{Specification}
\TPPkeywords{SPARK}
\TPPauthor{A.C.~Hayward&WIN01}
\TPPauthorisation{R.B.~Jones & HAT Manager}
\TPPabstract{
This document contains the detailed design for the DAZ SPARK Output Function.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{daz,fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1, \FormatDate{94/03/28}] Initial Draft.
\item[Issue 1.2, \FormatDate{94/03/28}] Added signature information.

\end{description}
\subsection{Changes Forecast}
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for the DAZ SPARK Output Function.

\subsection{Introduction}

\subsubsection{Purpose and Background}

\subsubsection{Dependencies}
%\subsubsection{Possible Enhancements}
\subsubsection{Deficiencies}
None known.

\section{DESIGN ISSUES}

\section{PREAMBLE}
=DOC
open CNTypes;
signature €SPARKOutput› = sig
=DESCRIBE
This is the signature for the structure containing the output function for SPARK.
=ENDDOC

\section{SPARK Output Function}
=DOC
val €PPTabSize› : int ref   
val €set_PPTab_size› : int -> unit   
val €get_PPTab_size› : unit -> int   
val €fmt_spaces› : int -> string   
val €fmt_tabs› : int -> string   val fmt_id : ID -> string
=DESCRIBE
These functions deal with the low-level output of characters.
=ENDDOC

=DOC
val €fmt_tmark› : TMARK -> string   
val €fmt_term› : TERM -> string   
val €fmt_label› : LABEL -> string   
val €fmt_unary_op› : UNARY_OP -> string   
val €fmt_binary_op› : BIN_OP -> string   
val €fmt_mode› : MODE -> string   
val €fmt_loop_direction› : LOOP_DIRECTION -> string   
val €fmt_operator_symbol› : OPERATOR_SYMBOL -> OPERATOR_SYMBOL
=DESCRIBE
These are the leaf functions, they don't call any others.
=ENDDOC

=DOC  
val €fmt_id_list› : ID list -> string   
val €fmt_tmark_list› : TMARK list -> string
=DESCRIBE
Lists of leaf functions.
=ENDDOC

=DOC 
val €fmt_z_pred› : Z_PRED -> string   
val €fmt_z_exp› : Z_EXP -> string   
val €fmt_z_id› : Z_ID -> string   
val €fmt_attrib› : ATTRIB -> string   
val €fmt_int_lit› : INT_LIT -> string 
=DESCRIBE
Equivalences to leaf functions.
=ENDDOC

=DOC
val €fmt_range› : EXP RANGE -> string
val €fmt_discrete_range_constrained› : EXP DISCRETE_RANGE_CONSTRAINED ->
string
val €fmt_discrete_range› : DISCRETE_RANGE -> string
val €fmt_agg_choice› : AGG_CHOICE -> string
val €fmt_agg_choice_list› : AGG_CHOICE list -> string
val €fmt_named_assoc› : (AGG_CHOICE, EXP) NAMED_ASSOC -> string
val €fmt_named_assoc_list› : (AGG_CHOICE, EXP) NAMED_ASSOC list -> string
val €fmt_others› : EXP OTHERS -> string
val €fmt_agg_pos› : EXP AGG_POS -> string
val €fmt_agg_pos_others› : EXP AGG_POS_OTHERS -> string
val €fmt_agg_others› : EXP AGG_OTHERS -> string
val €fmt_agg_named› : (AGG_CHOICE, EXP) AGG_NAMED -> string
val €fmt_agg_named_others› : (AGG_CHOICE, EXP) AGG_NAMED_OTHERS ->
string
val €fmt_rec_agg_named› : (AGG_CHOICE, EXP) REC_AGG_NAMED -> string
val €fmt_unary_exp› : EXP UNARY_EXP -> string
val €fmt_bin_exp› : EXP BIN_EXP -> string
val €fmt_attrib_desig› : ATTRIB_DESIG -> string
val €fmt_attribute› : (EXP, ATTRIB_DESIG) ATTRIBUTE -> string
val €fmt_indexed_comp› : EXP INDEXED_COMP -> string
val €fmt_selected_comp› : EXP SELECTED_COMP -> string
val €fmt_qualified_expression› : EXP QUALIFIED_EXPRESSION -> string
val €fmt_exp› : EXP -> string
val €fmt_exp_list› : EXP list -> string
=DESCRIBE
Functions dealing with expressions.
=ENDDOC

=DOC
val €fmt_spec› : SPEC -> string   
val €fmt_static_exp› : STATIC_EXP -> string   
val €fmt_static_range› : STATIC_EXP RANGE -> string   
val €fmt_cond› : COND -> string   
val €fmt_actuals› : (AGG_CHOICE, EXP) ACTUALS -> string   
val €fmt_proc_call› : (AGG_CHOICE, EXP) PROC_CALL * int -> string   
val €fmt_k_slot› : K_SLOT * int -> string 
=DESCRIBE
A couple of minor functions before we do statements.
=ENDDOC

=DOC
val €fmt_assign› : ASSIGN * int -> string   val fmt_spec_no_ivars : SPEC_NO_IVARS * int -> string   
val €fmt_exit_when› : EXIT_WHEN * int -> string   
val €fmt_return› : RETURN * int -> string
val €fmt_proc_call_no_ivars› : (AGG_CHOICE, EXP) PROC_CALL_NO_IVARS * int -> string
val €fmt_elsif› : STMT * int -> string
val €fmt_if_then_else› : STMT IF_THEN_ELSE * int -> string
val €fmt_case_choice› : CASE_CHOICE -> string
val €fmt_case_choice_list› : CASE_CHOICE list -> string
val €fmt_case_alt› : STMT CASE_ALTERNATIVE * int -> string
val €fmt_case_alt_list› : STMT CASE_ALTERNATIVE list * int -> string
val €fmt_case› : STMT CASE * int -> string
val €fmt_unnamed_loop› : STMT LOOP * int -> string
val €fmt_named_loop› : STMT NAMED_LOOP * int -> string
val €fmt_loop_body› : STMT LOOP * int -> string
val €fmt_while› : STMT WHILE * int -> string
val €fmt_for_static› : STMT FOR_STATIC * int -> string
val €fmt_for_tmark› : STMT FOR_TMARK * int -> string
val €fmt_stmt› : STMT * int -> string
=DESCRIBE
Functions dealing with statements.
=ENDDOC

=DOC
val €fmt_log_con› : (LOG_CON * STMT) * int -> string 
=DESCRIBE
Logical constructs.
=ENDDOC

=DOC  
val €fmt_statement› : STATEMENT * int -> string   
=DESCRIBE
Top level statements.
=ENDDOC

=DOC
val €fmt_var_decl› : VAR_DECL * int -> string   
val €fmt_var_decl_list› : VAR_DECL list * int -> string   
=DESCRIBE
Variable declarations.
=ENDDOC

=DOC
val €fmt_const_decl› : EXP CONST_DECL * int -> string   
val €fmt_deferred_const_decl› : DEFERRED_CONST_DECL * int -> string 
=DESCRIBE
Constant and Deferred constant declarations.
=ENDDOC

=DOC  
val €fmt_variant› : COMPONENT VARIANT * int -> string
val €fmt_variant_list› : COMPONENT VARIANT list * int -> string
val €fmt_variant_part› : COMPONENT VARIANT_PART * int -> string
val €fmt_declaration_variant› : COMPONENT DECLARATION_VARIANT * int -> string
val €fmt_component› : COMPONENT * int -> string
val €fmt_component_list› : COMPONENT list * int -> string
=DESCRIBE
A couple of minor functions before we do type definitions.
=ENDDOC

=DOC
val €fmt_discr_part› : DISCR_PART -> string
=DESCRIBE
Discriminant part.
=ENDDOC

=DOC
val €fmt_floating_point_constraint› : EXP FLOATING_POINT_CONSTRAINT -> string
val €fmt_floating_type_def› : EXP FLOATING_TYPE_DEF -> string   
=DESCRIBE
Floating point types.
=ENDDOC

=DOC
val €fmt_fixed_point_constraint› : EXP FIXED_POINT_CONSTRAINT -> string   
val €fmt_fixed_type_def› : EXP FIXED_TYPE_DEF -> string  
=DESCRIBE
Fixed point types.
=ENDDOC

=DOC 
val €fmt_enum_type_def› : ENUM_TYPE_DEF -> string   
=DESCRIBE
Enumerated types.
=ENDDOC

=DOC
val €fmt_array_def› : ARRAY_DEF -> string
=DESCRIBE
Array types.
=ENDDOC

=DOC
val €fmt_record_type_def› : COMPONENT RECORD_TYPE_DEF * int -> string
=DESCRIBE
Record types.
=ENDDOC

=DOC
val €fmt_type_def› : TYPE_DEF * int -> string   
val €fmt_type_decl› : TYPE_DEF TYPE_DECL * int -> string   
=DESCRIBE
Type declarations.
=ENDDOC

=DOC
val €fmt_constraint› : CONSTRAINT -> string   
val €fmt_sub_ind› : CONSTRAINT SUB_IND -> string   
val €fmt_subtype_decl› : CONSTRAINT SUBTYPE_DECL * int -> string 
=DESCRIBE
Subtype declarations.
=ENDDOC

=DOC  
val €fmt_private_type_decl› : PRIVATE_TYPE_DECL * int -> string
=DESCRIBE
Private type declarations.
=ENDDOC

=DOC 
val €fmt_basic_decl› : BASIC_DECL * int -> string   
=DESCRIBE
Basic declarations.
=ENDDOC

=DOC
val €fmt_parameter_specification› : PARAMETER_SPECIFICATION -> string   
val €fmt_parameter_specification_list1› : PARAMETER_SPECIFICATION list -> string
val €fmt_parameter_specification_list› : PARAMETER_SPECIFICATION list -> string
=DESCRIBE
Procedure and Function parameter specifications.
=ENDDOC

=DOC
val €fmt_procedure_specification› : PROCEDURE_SPECIFICATION * int -> string
val €fmt_function_specification› : FUNCTION_SPECIFICATION * int -> string
=DESCRIBE
Procedures and Function specifications.
=ENDDOC

=DOC
val €fmt_subprogram_specification› : SUBPROGRAM_SPECIFICATION * int -> string
=DESCRIBE
Subprograms
=ENDDOC

=DOC
val €fmt_function_renaming› : FUNCTION_RENAMING * int -> string
val €fmt_subprogram_renaming› : SUBPROGRAM_RENAMING * int -> string   
val €fmt_renaming_declaration› : RENAMING_DECLARATION * int -> string  
=DESCRIBE
Renaming declarations.
=ENDDOC

=DOC 
val €fmt_component_clause› : COMPONENT_CLAUSE * int -> string   
val €fmt_component_clause_list› : COMPONENT_CLAUSE list * int -> string   
val €fmt_length_clause› : LENGTH_CLAUSE * int -> string   
val €fmt_enumeration_representation_clause› : ENUMERATION_REPRESENTATION_CLAUSE * int -> string
val €fmt_record_representation_clause› : RECORD_REPRESENTATION_CLAUSE * int -> string
val €fmt_address_clause› : ADDRESS_CLAUSE * int -> string   
val €fmt_representation_clause› : REPRESENTATION_CLAUSE * int -> string 
=DESCRIBE
Representation clauses.
=ENDDOC

=DOC  
val €fmt_procedure_declaration› : PROCEDURE_DECLARATION * int -> string   
val €fmt_function_declaration› : FUNCTION_DECLARATION * int -> string   
val €fmt_procedure_stub› : PROCEDURE_DECLARATION * int -> string   
val €fmt_function_stub› : FUNCTION_DECLARATION * int -> string   
val €fmt_package_stub› : ID * int -> string   
val €fmt_package_declaration› : DECLARATION PACKAGE_DECLARATION * int -> string
val €fmt_declaration› : DECLARATION * int -> string
val €fmt_declaration_list› : DECLARATION list * int -> string
val €fmt_procedure_body› : DECLARATION PROCEDURE_BODY * int -> string
val €fmt_function_body› : DECLARATION FUNCTION_BODY * int -> string
val €fmt_package_body› : DECLARATION PACKAGE_BODY * int -> string
val €fmt_proper_body› : PROPER_BODY * int -> string
=DESCRIBE
Declarations.
=ENDDOC

=DOC
val €fmt_compilation_subunit› : SUBUNIT * int -> string
=DESCRIBE
Compliation subunits.
=ENDDOC

=DOC  
val €fmt_context_clause› : ID list * int -> string   
val €fmt_compilation_unit› : COMPILATION_UNIT * int -> string   
val €fmt_context_compilation_unit› : CONTEXT_COMPILATION_UNIT * int -> string
val €fmt_kslot_compilation_unit› : KSLOT_COMPILATION_UNIT * int -> string
val €fmt_kslot_compilation_unit_list› : KSLOT_COMPILATION_UNIT list * int
-> string
=DESCRIBE
Compilation units.
=ENDDOC

=DOC
val €fmt_replaced_by_comp› : REPLACED_BY_COMP * int -> string   
val €fmt_replaced_by_private_part›: REPLACED_BY_PRIVATE_PART * int -> string
val €fmt_replaced_by_visible_part› : REPLACED_BY_VISIBLE_PART * int -> string
val €fmt_replaced_by_decl› : REPLACED_BY_DECL * int -> string   
val €fmt_refined_by› : REFINED_BY * int -> string   
val €fmt_replaced_by› : REFINED_BY * int -> string   
val €fmt_web_clause› : WEB_CLAUSE * int -> string 
=DESCRIBE
Web clauses
=ENDDOC

=DOC  
val web : WEB_CLAUSE -> unit  
=DESCRIBE
Function to pretty print a Web Clause.
=ENDDOC

\section{EPILOGUE}
=DOC
end; (* signature SPARKOutput *)
=DESCRIBE
=ENDDOC
=TEX
\section{TEST POLICY}
The functions in this document are to be tested according to the
criteria identified in \cite{ISS/HAT/DAZ/PLN003}.  The test module
is \cite{ISS/HAT/DAZ/MDT503}.

\small
\twocolumn[\section{INDEX}]
\printindex

\end{document}



