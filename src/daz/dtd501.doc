=IGN
********************************************************************************
dtd501.doc: this file is part of the PPDaz system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
%  dtd501.doc %Z% $Date: 2002/10/17 15:46:52 $ $Revision: 1.26 $ $RCSfile: dtd501.doc,v $
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design: Compliance Notation Lexical Analyser}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/DTD501}  %% Mandatory field
\def\SCCSversion{$Revision: 1.26 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2002/10/17 15:46:52 $%
}}
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{Specification}
%\TPPkeywords{HOL}
\TPPauthor{D.J.~King&WIN01}
\TPPauthorisation{R.D.~Arthan & HAT Team}
\TPPabstract{
This document contains the detailed design for the
Compliance Notation Lexical Analyser.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	A.~Smith, DRA \\
	Library}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
\def\TPPheadlhs{Lemma 1 Ltd.}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1-1.17] Initial Drafts.
\item[Issue 1.18] Reworked according to desk check report 015.
\item[Issue 1.19-1.20] Added support for Hypertext link generation.
\item[Issue 1.21] Tidy up prior to review. RDA
\item[Issue 1.22] Updated references.
\item[Issue 1.24] Removed use of ICL logo font.
\item[Issue 1.25] Copyright and banner updates for open source release.
\item[Issue 1.26] DAZ-specific updates to banner for open source release
\item[Issue 1.27] DAZ-specific updates to banner for open source release
\end{description}
\subsection{Changes Forecast}
None.

\pagebreak
\section{GENERAL}
\subsection{Scope}

This document contains the detailed design for the compliance notation lexical analyser. It supports the lexis defined in the SPARK Manual \cite{pvl90} required to support the Compliance Tool as specified by DRA in \cite{DRA/CIS/CSE3/TR/94/27/3.0}.

\subsection{Introduction}

\subsubsection{Purpose and Background}

Two signatures are introduced in this document. The first is $CaseIndependence$ and provides a couple of useful utilities for the conversion of lowercase strings to uppercase and vice-versa. The second is called $CNLex$ and contains one function $cn\_lex$ which converts the input (from the Compliance Notation Reader/Writer) and lexically analyses it according to the SPARK lexis to produce a list of lexical items.

\subsubsection{Dependencies}

The function $cn\_lex$ in $CNLex$ depends on data types introduced in the structure $CNTypes$ which is defined in \cite{ISS/HAT/DAZ/DTD502}.

\subsection{Compliance}

The functions in this document provide a means of lexically analysing the user's input. The target data type can be found in \cite{ISS/HAT/DAZ/DTD502}.

All Spark names are stored in the Compliance Tool internally in upper case in a dictionary. This enables issues relating to case sensitivity to be factored out, and by ensuring that the implementation calls $get\_internal\_names$ to convert Spark names to their upper-case equivalent at the appropriate points, no other part of the implementation need be concerned with case sensitivity. 

\section{THE SIGNATURES}
\subsection{The Signature $CaseIndependence$}
=DOC
signature ÛCaseIndependenceÝ = sig
=DESCRIBE
This is the signature of a structure containing utilities to assist
in implementing support for languages where equality of identifiers
is independent of the case of letters.
=ENDDOC
=DOC
val Ûto_lowerÝ : string -> string
val Ûto_upperÝ : string -> string
=DESCRIBE
$to\_lower\,s$ is $s$ with all upper-case letters replaced by their
lower-case equivalents.

$to\_upper\,s$ is $s$ with all lower-case letters replaced by their
upper-case equivalents.
=ENDDOC
=IGNORE
=DOC
val Ûget_internal_nameÝ : string -> string
val Ûget_external_nameÝ : string -> string
val Ûreset_namesÝ : unit -> unit
=DESCRIBE
$get\_internal\_name$ stores its argument in a dictionary whose key is the capitalised form of the argument. If there is already an entry in the table whose capitalisation differs from that of the argument provided, a warning message is generated stating the inconsistent use of case. Otherwise no message is produced and the table is not updated. $get\_internal\_name$ always returns the capitalised form of the argument.

$get\_external\_name$ looks up in the dictionary the entry corresponding whose key is the capitalised form of the argument. If an entry is found, it is returned; otherwise $get\_external\_name$ is the identity function and just returns its argument.

$reset\_names$ clears the dictionary of all the entries.
=USES
These functions are used by the lexical analyser to convert SPARK names to a uniform internal form and facilitating the detection inconsistent case usage.

=FAILURE
501100	Inconsistent use of case: "?0", "?1"
=ENDDOC
=SML
end; (* of signature CaseIndependence *)
=TEX

\subsection{The Signature $CNLex$}
=DOC
signature ÛCNLexÝ = sig
=DESCRIBE
This is the signature for the structure containing the lexical analyser for Compliance Notation.
=ENDDOC

=TEX
\subsection{The Lexical Analyser Function}
It is necessary for the Compliance Tool to be able to annotate the a Compliance Script with hypertext link macros (as defined in the $hyperbasics.sty$ style).
The function $cn\_lex$ returns a list of relative line numbers corresponding to the location of any k-slots or specification statements. 
=DOC
val Ûcn_lexÝ : (CNTypes.CN_LEX_ITEM list -> CNTypes.CN_LEX_ITEM list)
			-> Lex.INPUT list
			-> (CNTypes.CN_LEX_ITEM list * int list)
=DESCRIBE
$cn\_lex$ is the function which lexically analyses a list of items and produces a list of lexemes corresponding to the SPARK Lexis.

The first argument of $cn\_lex$ is a function which transforms recognises a list of items which begin with an open-parenthesis character followed by a number and converts this into a lexical token corresponding to a particular type of web-clause. This enables labelled web-clauses to be classified prior to parsing and this serves to reduce the size of the grammar for web-clauses significantly.

The second argument to $cn\_lex$ is a list of input items which is the output of the reader/writer when a web-clause is recognised.

The function $cn\_lex$ returns a pair whose second item is a list of relative line numbers corresponding to the location of any k-slots or specification statements. 

=USES
$cn\_lex$ is not called by the user directly; it is intended to be called by the web-clause processor.
=FAILURE
501001	Lexical analysis error: ?0 is not allowed here in Compliance Notation
501002	Parser internal error: ?0
501003	error code ?0 reported by reader/writer
=ENDDOC
=TEX



=SML
end; (* of signature CNLex *)
=TEX

\section{TEST POLICY}
The functions in this document are to be tested according to the
criteria identified in \cite{ISS/HAT/DAZ/PLN003}.

\small
\twocolumn[\section{INDEX}]
\printindex

\end{document}



