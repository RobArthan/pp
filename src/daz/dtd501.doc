%  dtd501.doc %Z% $Date$ $Revision$ $RCSfile$
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design: Compliance Notation Lexical Analyser}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/DTD501}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{Specification}
%\TPPkeywords{HOL}
\TPPauthor{D.J.~King&WIN01}
\TPPauthorisation{R.D.~Arthan & HAT Team}
\TPPabstract{
This document contains the detailed design for the
Compliance Notation Lexical Analyser.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	C.O'Halloran, DRA
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issue \SCCSversion~\FormatDate{$Date$%
} ] Initial Draft.

\end{description}
\subsection{Changes Forecast}
The document will be subjected to a desk-check and it will change as a result of comments raised.

\pagebreak
\section{GENERAL}
\subsection{Scope}

This document contains the detailed design for the compliance notation lexical analyser. It supports the lexis defined in the SPARK Manual \cite{pvl90} required to support the Compliance Tool as specified by DRA in \cite{DRA/CIS/CSE3/TR/94/27/1.0}.

\subsection{Introduction}

\subsubsection{Purpose and Background}

Two signatures are introduced in this document. The first is $CaseIndependence$ and provides a couple of useful utilities for the conversion of lowercase strings to uppercase and vice-versa. The second is called $CNLex$ and contains one function $cn\_lex$ which converts the input (from the Compliance Notation Reader/Writer) and lexically analyses it according to the SPARK lexis to produce a list of lexical items.

\subsubsection{Dependencies}

The function $cn\_lex$ in $CNLex$ depends on data types introduced in the structure $CNTypes$ which is defined in \cite{ISS/HAT/DAZ/DTD502}.

%\subsubsection{Possible Enhancements}
\subsubsection{Deficiencies}
None known.

\section{THE SIGNATURES}
\subsection{The Signature $CaseIndependence$}
=DOC
signature ÛCaseIndependenceÝ = sig
=DESCRIBE
This is the signature of a structure containing utilities to assist
in implementing support for languages where equality of identifiers
is independent of the case of letters.
=ENDDOC
=DOC
val Ûto_lowerÝ : string -> string
val Ûto_upperÝ : string -> string
=DESCRIBE
$to\_lower\,s$ is $s$ with all upper-case letters replaced by their
lower-case equivalents.

$to\_upper\,s$ is $s$ with all lower-case letters replaced by their
upper-case equivalents.
=ENDDOC
=IGNORE
    =DOC
val Ûci_get_const_namesÝ : string -> string list
    =DESCRIBE
Given a string $s$, $ci\_get\_const\_names$ returns the list of
the names of all constants $c$ such that, (i) $c$ is in scope in the
current theory, (ii) the name of $c$ is the same as $s$ when one ignores
the case of any letters in the name.
    =FAILURE
501100	Internal error in ci_get_const_names
    =ENDDOC
=SML
end; (* of signature CaseIndependence *)
=TEX

\subsection{The Signature $CNLex$}
=DOC
signature ÛCNLexÝ = sig
=DESCRIBE
This is the signature for the structure containing the lexical analyser for Compliance Notation.
=ENDDOC

=TEX
\subsection{The Lexical Analyser Function}
=DOC
val Ûcn_lexÝ : (CNTypes.CN_LEX_ITEM list -> CNTypes.CN_LEX_ITEM list)
			-> Lex.INPUT list -> CNTypes.CN_LEX_ITEM list
=DESCRIBE
$cn\_lex$ is the function which lexically analyses a list of items and produces a list of lexemes corresponding to the SPARK Lexis.

The first argument of $cn\_lex$ is a function which transforms recognises a list of items which begin with an open-parenthesis character followed by a number and converts this into a lexical token corresponding to a particular type of web-clause. This enables labelled web-clauses to be classified prior to parsing and this serves to reduce the size of the grammar for web-clauses significantly.

The second argument to $cn\_lex$ is a list of input items which is the output of the reader/writer when a web-clause is recognised.
=USES
$cn\_lex$ is not called by the user directly; it is intended to be called by the web-clause processor.
=FAILURE
501001	Lexical analysis error: ?0 is not allowed here in Compliance Notation
501002	Parser internal error: ?0
501003	error code ?0 reported by reader/writer
=ENDDOC
=TEX

=SML
end; (* of signature CNLex *)
=TEX

\section{TEST POLICY}
The functions in this document are to be tested according to the
criteria identified in \cite{ISS/HAT/DAZ/PLN003}.

\small
\twocolumn[\section{INDEX}]
\printindex

\end{document}



