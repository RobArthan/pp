=IGN
********************************************************************************
int506.doc: this file is part of the PPDaz system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
% %Z% $Date: 2006/03/28 16:48:35 $ $Revision: 1.15 $ $RCSfile: int506.doc,v $

=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Auxiliary Variables Test Material}  %% Mandatory field
\def\TPPheadtitle{Auxiliary Variables Test Material}
\TPPref{ISS/HAT/DAZ/INT506}  %% Mandatory field
\def\SCCSversion{$Revision: 1.15 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2006/03/28 16:48:35 $%
}}  %% Mandatory field (with sensible default)
\TPPstatus{Informal}
%\TPPstatus{Informal}
\TPPtype{Technical}
%\TPPkeywords{HOL}
\TPPauthor{A.C.~Hayward & HAT Team}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & WIN01}
\TPPabstract{%
This document gives a number of compliance notation scripts.  The Z documents generated by these scripts are checked against the original scripts.
}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library}}

%\TPPclass{CLASSIFICATION}
\def\TPPheadlhs{Lemma 1 Ltd.}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\pagebreak
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'

\begin{description}

\item[Issues 1.1 - 1.2 (\FormatDate{94/12/14})] Initial Drafts.

\item[Issue 1.3] Deleted reference to STACKspec.
\item[Issue 1.5] One compilation unit per script change.
\item[Issue 1.42] CTLE II R2/1: global variable unsoundness.
\item[Issue 1.7] Removed use of ICL logo font.
\item[Issue 1.8] Copyright and banner updates for open source release.
\item[Issue 1.9] DAZ-specific updates to banner for open source release
\item[Issue 1.10] DAZ-specific updates to banner for open source release
\item[Issue 1.11] The SPARK program is now referred to as the Ada program.
\item[Issue 1.12] Allowed for enhancement 117.
\item[Issue 1.14] Allowed for automated state management.
\item[Issue 1.16] Allowed for enhancement 165.
\end{description}

\subsection{Changes Forecast}

None.

\pagebreak

\section{GENERAL}

\subsection{Scope}

This document contains test data for the Compliance Tool as specified in \cite{ISS/HAT/DAZ/HLD501}.

\subsection{Introduction}

This document contains four compliance notation scripts.  These are loaded into the compliance tool and Z documents generated.  The Z documents are then reloading into the tool and compared with the original scripts.

\section{LITERAL SCRIPTS}

\subsection{Setting up of the enivronment}

Set up flags so the compilance tool works correctly .

=SML
set_flags [("z_type_check_only", false),("z_use_axioms", true)];
=TEX

Load the test harness.

=SML
use_file "dtd013";
use_file "imp013";
=TEX

\subsection{Useful functions}
=SML
fun clean_up () = (
        let     val thys = (get_descendants "cn" less "cn")
                                        diff get_cache_theories();
                fun del_thy thy = (force_delete_theory thy handle Fail _ => ());
        in      map del_thy thys
        end;    ()
);
=TEX

Functions for recording some statistics of theories.

=SML
type theory_stats = {np : int, ng : int, na : int, nd : int, nc : int};
local
    fun noof_parents thy = (length o get_parents) thy;
    fun noof_global thy = (length o get_consts) thy;
    fun noof_axioms thy = (length o get_axioms) thy;
    fun noof_defns thy = (length o get_defns) thy;
    fun noof_conjectures thy = (length o get_conjectures) thy;
in
    fun get_theory_stats (thy : string) : theory_stats =
    let
        val np = noof_parents thy;
        val ng = noof_global thy;
        val na = noof_axioms thy;
        val nd = noof_defns thy;
        val nc = noof_conjectures thy;
    in
        {np = np, ng = ng, na = na, nd = nd, nc = nc}
    end;
end;
=TEX

\subsection{First literal script}

=SML
clean_up();
new_script {name="STACK", unit_type="spec"};
=TEX

¹CN
package STACK is

   $auxiliary S : seq ú;

   procedure PUSH (X : in INTEGER)
   „ S [S = S‰0 ë §X¢];

   procedure POP (X : out INTEGER)
   „ X, S [X = last S‰0 ± S = front S‰0];

end STACK;
°
=SML
output_z_document{script="STACK'spec", out_file="int506A.sml"};
output_ada_program{script="-", out_file="int506A.ada"};
new_script {name="SWAP", unit_type="proc"};

¹CN
with STACK;
procedure SWAP is
   A, B : INTEGER;
begin
   „ A, B, S [A = B‰0 ± B = A‰0]
end SWAP;
°

¹CN
Ã
$con AA : ú ·
„ A, B, S [AA = A, A = B‰0 ± B = AA]			(1)
°

¹CN
(1) Ã
$con BB : ú ·
„ A, B, S [BB = B ± AA = A, A = BB ± B = AA]		(2)
°

¹CN
(2) Ã
„ S
[BB = B ± AA = A,
last S = AA ± BB = B]						(3)

„ S
[last S = AA ± BB = B,
S(#S - 1) = AA ± last S = BB]			(4)

„ A, S
[S(#S - 1) = AA ± last S = BB,
A = BB ± last S = AA]						(5)

„ B, S
[A = BB ± last S = AA,
A = BB ± B = AA]							(6)
°

¹CN
(3) Ã STACK.PUSH(A);
°

¹CN
(4) Ã STACK.PUSH(B);
°

¹CN
(5) Ã STACK.POP(A);
°

¹CN
(6) Ã STACK.POP(B);
°

ÿ S_inv üüüüüüüüüüüüüüü
Ü S : seq ú;
Ü ST : 1..10 ­ INTEGER;
Ü TOP : 0..10
÷üüüüüüüüüüüüüüü
Ü (1 .. TOP) ò ST = S
ˆüüüüüüüüüüüüüü

=SML
output_z_document{script="SWAP'proc", out_file="int506Aa.sml"};
output_ada_program{script="-", out_file="int506Aa.ada"};
new_script1 {name="STACK", unit_type="body", library_theories = ["SWAP'proc"]};
¹CN
package body STACK is

   $using
   subtype STACK_RANGE is INTEGER range 1..10;
   type STACK_TYPE is array (STACK_RANGE) of INTEGER;
   ST : STACK_TYPE;
   subtype TOP_RANGE is INTEGER range 0..10;
   TOP : TOP_RANGE;
   $implement
   S $by S_inv;

   procedure PUSH (X : in INTEGER)
   „ ST, TOP [TOP = TOP‰0 + 1 ± ST = ST‰0 « {TOP í X}]
   is
   begin
      TOP := TOP + 1;
      ST(TOP) := X;
   end PUSH;

   procedure POP (X : out INTEGER)
   „ X, ST, TOP [TOP = TOP‰0 - 1 ± X = ST(TOP‰0) ± ST = ST‰0]
   is
   begin
      X := ST(TOP);
      TOP := TOP - 1;
   end POP;

begin
   TOP := 0;
end STACK;
°

=SML
output_z_document{script="STACK'body", out_file="int506Ab.sml"};
output_ada_program{script="-", out_file="int506Ab.ada"};
=TEX

\section{LITERATE SCRIPT 2}

=SML
new_script{name="CALCULATOR", unit_type="spec"};
=TEX

¹ZAX
Ü sum : bag ú ­ ú
÷üüüüüüüüüüüüüü
Ü sum (û ý) = 0;
Ü µ b : bag ú; n : ú · sum (b ‚ ûný) = sum b + n
°

¹ZAX
Ü size : bag ú ­ ú
÷üüüüüüüüüüüüüü
Ü size (û ý) = 0;
Ü µ b : bag ú; n : ú · size (b ‚ ûný) = size b + 1
°

¹CN
package CALCULATOR is

   $auxiliary B : bag ú;

   procedure CLEAR
   „ B [B = û ý];

   procedure ENTER (X : in INTEGER)
   „ B [B = B‰0 ‚ ûXý];

   procedure MEAN (M : out INTEGER)
   „ M ˜ B [B ½ û ý, M = sum(B) intdiv size (B)];

end CALCULATOR;
°

=SML
output_z_document{script="CALCULATOR'spec", out_file="int506B.sml"};
output_ada_program{script="-", out_file="int506B.ada"};
new_script1 {name="CALCULATOR", unit_type="body", library_theories = ["CALCULATOR'spec"]};

ÿBag_Invüüüüüüüü
Ü B : bag ú;
Ü S, N : INTEGER
÷üüüüüüüüü
Ü S = sum B;
Ü N = size B
ˆüüüüüüüüüüüüü


¹CN
package body CALCULATOR is

   $using S, N : INTEGER; $implement B $by Bag_Inv;

   procedure CLEAR
   „ S, N [N = 0 ´ S = 0, S = 0 ± N = 0]
   is
   begin
      if N = 0 then null;
      else S := 0; N := 0;
      end if;
   end CLEAR;

   procedure ENTER (X : in INTEGER)
   „ S, N [S = S‰0 + X ± N = N‰0 + 1]
   is
   begin
      S := S + X;
      N := N + 1;
   end ENTER;

   procedure MEAN (M : out INTEGER)
   „ M, S, N [N ½ 0, M = S intdiv N ± S = S‰0 ± N = N‰0]
   is
   begin
      M := S / N;
   end MEAN;


begin
   S := 0;

end CALCULATOR;
°

=SML
output_z_document{script="CALCULATOR'body", out_file="int506Ba.sml"};
output_ada_program{script="-", out_file="int506Ba.ada"};
=TEX

\section{Checks}

Save copies of the theory statistics.

=SML
val int506A_stats = get_theory_stats "STACK'spec";
val int506B_stats = get_theory_stats "CALCULATOR'spec";
val int506Aa_stats = get_theory_stats "SWAP'proc";
val int506Ab_stats = get_theory_stats "STACK'body";
val int506Ba_stats = get_theory_stats "CALCULATOR'body";
=TEX


Delete all the theories we've created.

=SML
open_theory "cn";
clean_up();
=TEX

Reload the Z documents.

=SML
fun Ûuse_file_auxÝ (file : string) = (
    open_theory "cn";
    use_file file
    handle _ => ()
    );
use_file_aux "int506A";
use_file_aux "int506Aa";
use_file_aux "int506Ab";
use_file_aux "int506B";
use_file_aux "int506Ba";

=TEX

Check the theory statistics are correct.

=SML
store_mt_results_show mt_run [
    ("int506A", get_theory_stats, "STACK'spec", int506A_stats),
    ("int506B", get_theory_stats, "CALCULATOR'spec", int506B_stats),
    ("int506Aa", get_theory_stats, "SWAP'proc", int506Aa_stats),
    ("int506Ab", get_theory_stats, "STACK'body", int506Ab_stats),
    ("int506Ba", get_theory_stats, "CALCULATOR'body", int506Ba_stats)
];
=TEX

\section{EPILOGUE}
=SML
diag_line (summarize_mt_results());
=TEX

\twocolumn[\section{INDEX OF DEFINED TERMS}]
\printindex
\end{document}
=IGN
