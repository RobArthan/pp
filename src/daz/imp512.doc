=IGN
********************************************************************************
imp512.doc: this file is part of the PPDaz system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
% imp512.doc   %Z% $Date: 2008/10/26 12:50:19 $ $Revision: 1.24 $ $RCSfile: imp512.doc,v $
% use_file "dtd512";PolyML.use "imp512";
=TEX
%%%%% YOU MAY WANT TO CHANGE POINT SIZE IN THE FOLLOWING:
\documentclass[a4paper,11pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{latexsym}
\usepackage{epsf}
\makeindex

%%%%% YOU WILL WANT TO CHANGE THE FOLLOWING TO SUIT YOU AND YOUR DOCUMENT:

\def\Title{Implementation: Compliance Notation Reader/Writer}

\def\AbstractText{This document contains the implementation for the Compliance Notation Reader/Writer.}

\def\Reference{ISS/HAT/DAZ/IMP512}

\def\Author{D.J. King}


\def\EMail{C/O {\tt rda@lemma-one.com}}

\def\Phone{C/O +44 7497 030682}

\def\Abstract{\begin{center}{\bf Abstract}\par\parbox{0.7\hsize}
{\small \AbstractText}
\end{center}}

%%%%% YOU MAY WANT TO CHANGE THE FOLLOWING TO GET A NICE FRONT PAGE:
\def\FrontPageTitle{ {\huge \Title } }
\def\FrontPageHeader{\raisebox{16ex}{\begin{tabular}[t]{c}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year\\\strut\\
\end{tabular}}}

%%%%% THE FOLLOWING DEFAULTS WILL GENERALLY BE RIGHT:

\def\Version{\VCVersion}
\def\Date{\FormatDate{\VCDate}}

%% LaTeX2e port: =TEX
%% LaTeX2e port: \documentstyle[hol1,11pt,TQ]{article}
%% LaTeX2e port: \ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\def\Compiler{C{\tiny OMPILER}}
%% LaTeX2e port: \makeindex
%% LaTeX2e port: \TPPproject{DAZ PROJECT}  %% Mandatory field
%% LaTeX2e port: %\TPPvolume{}
%% LaTeX2e port: %\TPPpart{}
%% LaTeX2e port: \TPPtitle{Implementation: Compliance Notation Reader/Writer}  %% Mandatory field
%% LaTeX2e port: \TPPref{ISS/HAT/DAZ/IMP512}  %% Mandatory field
%% LaTeX2e port: \def\SCCSversion{$Revision: 1.24 $%
%% LaTeX2e port: }
%% LaTeX2e port: \TPPissue{\SCCSversion}  %% Mandatory field
%% LaTeX2e port: \TPPdate{\FormatDate{$Date: 2008/10/26 12:50:19 $%
%% LaTeX2e port: }}
%% LaTeX2e port: \TPPstatus{Draft}			%% Mandatory field
%% LaTeX2e port: \TPPtype{Specification}
%% LaTeX2e port: %\TPPkeywords{HOL}
%% LaTeX2e port: \TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%% LaTeX2e port: %\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
%% LaTeX2e port: \TPPauthorisation{R.D.~Arthan & DAZ Team}
%% LaTeX2e port: \TPPabstract{
%% LaTeX2e port: This document contains the implementation for the Compliance Notation Reader/Writer.}
%% LaTeX2e port: %\TPPabstractB{}
%% LaTeX2e port: %\TPPabstractC{}
%% LaTeX2e port: %\TPPabstractD{}
%% LaTeX2e port: %\TPPabstractE{}
%% LaTeX2e port: %\TPPabstractF{}
%% LaTeX2e port: \TPPdistribution{\parbox[t]{4.0in}{%
%% LaTeX2e port: 	Library}}
%% LaTeX2e port: 
%% LaTeX2e port: %\TPPclass{CLASSIFICATION}
%% LaTeX2e port: %\def\TPPheadlhs{}
%% LaTeX2e port: %\def\TPPheadcentre{}
%% LaTeX2e port: %def\TPPheadrhs{}
%% LaTeX2e port: %\def\TPPfootlhs{}
%% LaTeX2e port: %\def\TPPfootcentre{}
%% LaTeX2e port: %\def\TPPfootrhs{}
%% LaTeX2e port: 
%% LaTeX2e port: \begin{document}
%% LaTeX2e port: \TPPsetsizes
%% LaTeX2e port: \makeTPPfrontpage
%% LaTeX2e port: 
%% LaTeX2e port: \vfill
%% LaTeX2e port: \begin{centering}
%% LaTeX2e port: 
%% LaTeX2e port: \bf Copyright \copyright\ : Lemma 1 Ltd. \number\year
%% LaTeX2e port: 
%% LaTeX2e port: \end{centering}

\begin{document}

\headsep=0mm
\FrontPage
\headsep=10mm

\setcounter{section}{-1}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issue 1.1 (1994/02/21) - 1.4 (1994/02/22)] Initial Drafts.

\item[Issue 1.5 (1994/05/27)] First draft for comment.

\item[Issues 1.6 (1994/07/13), 1.7 (1994/07/13)] Minor typographical corrections.

\item[Issue 1.8 (1994/07/19)] Bug fixing.

\item[Issues 1.9 (1995/01/03)-1.11 (1995/10/12) ] Recognition of annotations added (CTE 1).
\item [Issue 1.13 (1996/02/29)]
Used the new $SymEndOfInput$ where apropriate.
\item[Issue 1.14 (2001/12/12)] Updates for Poly/ML port.
\item[Issue 1.15 (2001/12/19)] R0020: percent signs in comments (fixed by suppressing these errors).
\item[Issue 1.16 (2002/03/27)] Treatment of `Q' in strings fixed.
\item[Issue 1.17 (2002/05/23)] $Lex.Text$ items now split up into line-sized chunks.
\item[Issue 1.18 (2002/10/17)] Copyright and banner updates for open source release.
\item[Issue 1.19 (2002/10/17)] DAZ-specific updates to banner for open source release
\item[Issue 1.20 (2002/10/17)] DAZ-specific updates to banner for open source release
\item[Issue 1.21 (2002/12/11)] Fixing problems with percent signs.
\item[Issue 1.22 (2006/08/02)] Fixed treatment of extended characters in strings.
\item[Issue 1.23 (2007/08/21)] Now recognises Z quoted identifiers.
\item[Issue 1.24 (2008/10/26)] SPARK annotations are now recognised here.
\item[Issue 1.25 (2009/03/06)] Allowed for change to $READER\_ENV$ type.
\item[2014/07/23]
Augmented old RCS version numbers in the changes history with dates.
Dates will be used in place of version numbers in future.

\item[2015/04/17]
Ported daz source documents onto the Lemma 1 document template
%%%% END OF CHANGES HISTORY %%%%
\end{description}
\subsection{Changes Forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the implementation of the compliance notation reader/writer. It is written in response to the detailed design to be found in \cite{ISS/HAT/DAZ/DTD512}.

\subsection{Introduction}
\subsection{Purpose and Background}

See \cite{ISS/HAT/DAZ/DTD512}.
%\subsection{Algorithms}
%\subsection{Dependencies}
%\subsection{Known Deficencies}
\subsection{Possible Enhancements}
None.
=TEX

\section{THE STRUCTURE $CNReaderWriter$}

=SMLPLAIN SML
structure €CNReaderWriter› : CNReaderWriter = struct

open ReaderWriterSupport HOLPrettyPrinter;
=TEX

\section{WARNING MESSAGES}

Faults detected in the embedded text are reported via $local\_error$ as
they occur, they are also noted in the generated output using these
two functions.

=SMLPLAIN SML
fun €lex_error_code› (id : int, prev:string list) : string list = (
	", Lex.Text\"" :: (*="=*)
	"Lex.Error " ^ (string_of_int id) ::
	"\", " :: (*="=*)
	prev
);
=TEX
=SMLPLAIN SML
fun	€lex_error_codes› (nil : int list, prev:string list) : string list =
		prev
|	lex_error_codes (errnos, prev) =
		fold lex_error_code errnos prev;
=TEX

This is a function to print out the previous context upon an error.
=SMLPLAIN SML
fun €prev_context› (num:int) (prev:string list) : string = (
let
	val part1 = rev(prev to num);
	val part2 =	if length prev > num
			then	" ... " :: part1
			else	part1
in
	implode part2
end
);
=TEX

\section{STRINGS IN SPARK}

The following function is a re-implementation of $read\_symbol$ in \cite{DS/FMU/IED/IMP005}, adjusted to ignore keywords and treat percent signs as regular symbols. This is in accordance with the requirement to support SPARK strings, where no keyword recognition is required.
=SMLPLAIN SML
fun €cn_read_symbol› (R:READER_ENV) : SYMBOL = (
let
	fun formatters next =
	let
		fun aux prev next =
			if is_white next
			then	aux (next::prev) (skip_and_look_at_next R ())
			else	prev;
	in
		SymWhite(aux nil next)
	end;

	val next = #look_at_next R ()
in
		if is_white next
		then	formatters next
		else if	next = ""
		then	SymEndOfInput
		else	let
				val ch = #advance R ();
				val ord_ch = ord ch
			in
				if ord_ch > 127
				then	case PrettyNames.find_char ch
					of Value info => SymKnown(ch, false, info)
					|  Nil	=> SymUnknownChar ch
				else
					SymCharacter ch
			end
end);
=TEX
=SMLPLAIN SML
fun €cn_string_body› (R:READER_ENV) (prev:string list, preverrs:int list)
			: (string list * int list) = (
	case cn_read_symbol R
	of SymCharacter ch => (
		case ch
		of "\"" =>	(*="=*)
				if #look_at_next R () = "\""
				then	(
					#advance R ();
					cn_string_body R ("\\\"" (*="=*) :: prev, preverrs))
				else	(
					("\"" (*="=*) :: prev, preverrs))
		|  "\^D" =>	fail "cn_string_body" 5002 nil
		|  "Q" =>	cn_string_body R ("Q"::prev, preverrs)
		|  "%" =>	cn_string_body R ("%"::prev, preverrs)
		|  "\\" =>	cn_string_body R ("\\\\"::prev, preverrs)
		|  _ =>		cn_string_body R (ch::prev, preverrs)
		)
	| SymEndOfInput => fail "cn_string_body" 5002 nil
	| SymDoublePercent => cn_string_body R ("%" :: prev, preverrs)
	| SymWhite wh => (	if contains wh "\n"
				then
					(	local_error "cn_string_body" 5014 [fn () =>
							prev_context 20 prev];
						(("5014\"" (*="=*)
						) :: prev, 5014 :: preverrs)
					)
				else
					cn_string_body R (wh@prev, preverrs))
	| sy as SymKnown _ =>
				cn_string_body R (to_ML_string (expand_symbol sy) :: prev, preverrs)
	| SymUnknownKw(sym, is_closed) => (
				(* local_error "cn_string_body" 5003 [fn () => sym, fn () =>
					prev_context 20 prev];
				cn_string_body R  ("* ERROR  5003 " :: prev, 5003 :: preverrs)) *)
			cn_string_body R (
				(if is_closed
				then "%" :: sym :: "%" :: prev
				else  sym :: "%" ::prev), preverrs)
	) | SymUnknownChar ch =>
				cn_string_body R
					(("\\" ^ string_of_int3(ord ch))::prev, preverrs)
);
=TEX

The result from $cn_string_body$ is a sequence of mainly one-character
strings, it seems appropriate to convert it to one long string at this
stage rather than retaining the space overhead until the whole input
text is formed.

=SMLPLAIN SML
fun €get_cn_string› (R:READER_ENV) (prev:string list) : string list * int list = (
let
	val (str, errs) = cn_string_body R (["\"" (*="=*)], nil)
in
	([implode(rev str)] @ prev, errs)
end);
=TEX

\section{SPARK ANNOTATIONS AND ADA COMMENTS}
SPARK annotations are handled here within {\em get\_cn\_any} below, with the aid
of the following:
=TEX
=SML
val €cn_spark_annotation_char› : string ref = ref "#";
fun €annotation_char_check› (c : string) : bool = (
	if	size c <> 1
	then	fail "annotation_char_check" 512005 []
	else if	c <= " " orelse c >= "\127"
	then	fail "annotation_char_check" 512006 []
	else	true
);
=TEX
=SML
val _ = new_string_control{
	name = "cn_spark_annotation_char",
	check = annotation_char_check,
	control = cn_spark_annotation_char,
	default = (fn () => "#")} handle Fail _ => ();
=TEX
=SML
fun €is_annotation_char› (c : string) : bool = (
	c = !cn_spark_annotation_char
);
=TEX
=SML
fun €get_annotation_text› (R : READER_ENV) : string = (
	let	fun aux acc = (
			case #advance R () of
				"" => acc
			|	"\n" => acc
			|	c => aux (c::acc)
		);
	in	escape_sml_string (implode (rev(aux [])))
	end
);
=TEX
Other Ada comments are handled in the lexical analyser. Unlike other {\Product} object
languages, we do not want misspelt keywords to give rise to an error here,
because something like \verb"-- % %" is a perfectly valid Ada comment.
This is achieved simply by suppressing the printing of the error message.

=TEX
\section{COMPLIANCE NOTATION TEXT INPUT}\label{CNTI}

The following function eats compliance notation input, calling the special handlers for strings as required, taking into account the fact that a string immediately following a dollar-sign forms a Z quoted identifier not an Ada string.
It reads and assembles the quoted text (i.e., the body of the quotation) and the closing text.
{\ftlinepenalty=9999
=IGN
val dollar_state = false;
val R : READER_ENV = {advance = fn () => "",
	look_at_next = fn () => ""
	push_back = fn "" => ()};
val prevA = [""];
=SMLPLAIN SML
fun €get_cn_any›
	(dollar_state : bool)
	(R:READER_ENV)
	(prevA:string list) : string list= (
let
	open PrettyNames;

	fun	do_keyword _ (_,Value ch,Simple) p =
			get_cn_any false R ((to_ML_string ch) :: p)
	|	do_keyword _ (names,Nil,Simple) p =
			get_cn_any false R ("%" ^ (hd names) ^ "%" :: p)
	|	do_keyword k (info as (_,_, (Starting(proc, str)))) p =
			get_cn_any false R (proc R k str false p)
	|	do_keyword _ (_,_,Middle str) p =
			get_cn_any false R (str :: p)
	|	do_keyword (k, _) (_,ch_opt,Ending str) p =
			((*=[(("=*)	"\"))" :: to_ML_string k :: "\"], \"" ::
			to_ML_string str :: p)
	|	do_keyword _ (_,_,Ignore) p =
			get_cn_any false R p
	|	do_keyword (k, is_keyword) (names,_,Invalid) p = (
			(* local_error "get_cn_any" 5007
				[fn () => if is_keyword then "%" ^ k ^ "%" else k]; *)
			get_cn_any false R (lex_error_code(5007, p)));

	fun do_string () = (
		let	val getter =
			if	dollar_state
			then	get_ML_string
			else	get_cn_string;
			val (read_string, ol_name) =
				(getter, "Lex.String")
			val (str, errnos) = read_string R (ol_name :: "\", " :: prevA); (*="=*)
			val text_so_far = ", Lex.Text\"" (*="=*) :: str;
		in
			get_cn_any false R (lex_error_codes(errnos, text_so_far))
		end
	);

	fun do_symbol sym prev = (
		case sym
		of	SymCharacter ch => (
				case ch
				of "\""	=>	do_string () (*="=*)
				|  "\^D" =>	prev
				|  "Q"	=>	get_cn_any false R ("QQQQ" :: prev)
				|  "\\"	=>	get_cn_any false R ("\\\\" :: prev)
				|  "$"	=>	get_cn_any true R ("$" :: prev)
				|  "-"	=>	try_annotation 1 prev
				|  _ => 	get_cn_any false R (ch :: prev)
			)
		|	SymEndOfInput => prev
		|	SymWhite chs =>  (
				if	contains chs "\n"
				then	get_cn_any false R
					("\", Lex.Text\""  :: (escape_sml_string (implode (rev chs))) :: prev)
				else	get_cn_any false R
					(escape_sml_string (implode (rev chs)) :: prev)
		) |	SymKnown(sym, is_keyword, info) => do_keyword (sym, is_keyword) info prev
		|	SymDoublePercent => get_cn_any false R ("%%" :: prev)
		|	SymUnknownKw(sym, is_closed) => (
	(*
				local_error "get_cn_any" 5003 [fn () => sym, fn () =>
								implode(rev(" ... " :: (prev to 20)))];
				get_cn_any false R (lex_error_code(5003, prev)) *)
				get_cn_any false R (
					if is_closed then "%" :: sym :: "%" :: prev else sym :: "%" ::  prev)
			)
		|	SymUnknownChar ch => (
				local_error "get_cn_any" 5005
							[fn () => ch,
							fn () => string_of_int(ord ch),
							fn () => implode(" ... " :: (rev(prev to 20)))];
					get_cn_any false R (lex_error_code(5005, prev))
			)
	)
	and try_annotation 1 prev = (
		case read_symbol R of
			SymCharacter "-" => try_annotation 2 prev
		|	sym => do_symbol sym ("-"::prev)
	) | try_annotation 2 prev = (
		let	val c = #look_at_next R ();
		in	if	is_annotation_char c
			then	(#advance R ();
				try_annotation 3
				("\", Lex.Separator\"--" ^ escape_sml_string c :: prev))
			else	do_symbol
				(read_symbol R)
				("--"::prev)
		end
	) | try_annotation _ prev = (
		let	val t = get_annotation_text R;
			val sym = read_symbol R;
		in	do_symbol sym ("\", Lex.Text\"" :: t :: prev)
		end
	);
in	do_symbol (read_symbol R) prevA
end);
=TEX
}

\section{COMPLIANCE NOTATION READER FUNCTION}

Function $cn\_reader$ is responsible for building the opening part of the Standard~ML text; the function $get\_cn\_any$ (see above) reads and assembles the quoted text (i.e., the body of the quotation) and the closing text.

=SMLPLAIN SML
fun €cn_reader› (recogniser:string) (R:READER_ENV)
		(start:string, is_keyword:bool)
		(lang:string) (opening:string) (prevA:string list) : string list = (
let
	val prevB =
		opening ::
		"\", [Lex.Text\"" ::
		to_ML_string lang ::
		"\", \"" ::
		to_ML_string start ::
		"(\"" (*=")=*) ::
		recogniser ::
		"(" ::
		prevA;

	val read_text = get_cn_any false R prevB;
in
		";" :: read_text
end
);
=TEX

\section{EPILOGUE}
=SMLPLAIN
end (* of structure CNReaderWriter *);
=TEX
\small
\twocolumn[\section{INDEX}]
\printindex
\end{document}

