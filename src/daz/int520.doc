=TEX
%%%%% YOU MAY WANT TO CHANGE POINT SIZE IN THE FOLLOWING:
\documentclass[a4paper,12pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{epsf}

%%%%% YOU WILL USUALLY WANT TO CHANGE THE FOLLOWING TO SUIT YOU AND YOUR DOCUMENT:

\def\Title{ Autumn 2001 Enhancement Tests }

\def\Abstract{\begin{center}
{\bf Abstract}\par\parbox{0.7\hsize}
{\small This document provides integration tests to support the enhancements developed 
under the enhancements programme carried out in late 2001.}
\end{center}}

\def\Reference{LEMMA1/DAZ/INT519}

\def\Author{R.D. Arthan}

\def\EMail{{\tt rda@lemma-one.com}}

\def\Phone{+44 118 958 4409}

\def\Fax{+44 118 956 1920}

%%%%% YOU MAY WANT TO CHANGE THE FOLLOWING TO GET A NICE FRONT PAGE:
\def\FrontPageTitle{ {\huge \Title } }
\def\FrontPageHeader{\raisebox{16ex}{\begin{tabular}[t]{c}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year\\\strut\\
\end{tabular}}}
\begin{centering}



\end{centering}

%%%%% THE FOLLOWING DEFAULTS WILL GENERALLY BE RIGHT:

\def\Version{$Revision: 1.2 $%
}
\def\Date{\FormatDate{$Date: 2000/11/23 10:48:37 $%
}}

%%%%% NOW BEGIN THE DOCUMENT AND MAKE THE FRONT PAGE

\begin{document}
\underscoreoff
\headsep=0mm
\FrontPage
\headsep=10mm

%%%%% STANDARD RED-TAPE SECTIONS (MAY WANT TO INTERLEAVE SOME \newpage COMMANDS IN THESE)

%%%%% CONTENTS:

\subsection{Contents}

\tableofcontents

%%%%% REFERENCES:

\subsection{References}

\bibliographystyle{fmu}

%%%%% CHANGE THE FOLLOWING AS NECESSARY (E.G., TO PICK UP daz.bib):
{\raggedright
\bibliography{fmu,daz}
}
%%%%% CHANGES HISTORY:
\subsection{Changes History}
\begin{description}
\item[Issues 1.1] First draft.
\end{description}

%%%%%  CHANGES FORECAST:

\subsection{Changes Forecast}

None.

%%%%% DISTRIBUTION LIST

\subsection{Distribution}
\begin{center}
\begin{tabular}{ll}
Rob Arthan & Lemma 1\\
Gill Prout & Home \\
Roger Jones & Home
\end{tabular}
\end{center}


\section{INTRODUCTION}\label{INTRODUCTION}
This document is intended to provide integration tests to cover
the enhancements undertaken under the programme
of enhancements carried out in late 2001. See \cite{LEMMA1/DAZ/HLD508}
for the detailed specification of the enhancements.

The interim releases of the Compliance Tool have been
fully regression-tested and the new features have been module-
and integration-tested to a certain extent by the existing tests.
This document provides specific integration tests to
complete the coverage. 
\section{PREAMBLE}
Load the test harness.

=SML
use_file "dtd013";
use_file "imp013";
=TEX
Function to clean up before doing a test.

=SML
fun clean_up () = (
        let     val thys = (get_descendants "cn" less "cn")
                                        diff get_cache_theories();
                fun del_thy thy = (force_delete_theory thy handle Fail _ => ());
        in      map del_thy thys
        end;    ()
);
=TEX
=TEX

\section{THE TESTS}
\subsection{R0003: Record and array components as exported parameters}\label{ROne}

Some test coverage in INT513 (which fully tests the anti-aliasing checks).
The following tests the new functionality.

=SML
clean_up();
new_script{name = "r1", state = initial_cn_state};
=TEX

¹CN
procedure p is
  type index is range 1 .. 4;
  type arr1 is array(index) of integer;
  type rec1 is record arr : arr1; num : integer; end record;
  type arr2 is array(index) of rec1;
  a : integer;
  a1 : arr1;
  r1 : rec1;
  a2 : arr2; 
  procedure q (x : out integer)
  „ X ˜ A [ X = A ] is begin x := a; end q;
begin 
   „ A, A1, R1, A2 [ (A2 1).NUM = 4 ] (10)
end p;
°
¹CN
 (10) Ã a := 1; q(a1(a));
         a := a1(a)+a1(a); q(r1.num);
         a := r1.num + r1.num; q(a2(1).num);
°
=SML
set_pc"cn1";
set_goal([], get_conjecture"-""vcP_1");
a(cn_vc_simp_tac[]);
store_mt_results
(mt_runf (op =$))
 [("r1.1", snd o dest_thm o pop_thm , (), get_conjecture"-""vcP_1")];
=TEX

=SML
set_goal([], get_conjecture"-""vc10_1");
a(cn_vc_simp_tac[]);
store_mt_results
(mt_runf (op =$))
 [("r1.2", snd o dest_thm o pop_thm , (), get_conjecture"-""vc10_1")];
=TEX

=SML
set_goal([], get_conjecture"-""vc10_2");
a(cn_vc_simp_tac[]);
store_mt_results
(mt_runf (op =$))
 [("r1.3", snd o dest_thm o pop_thm , (), get_conjecture"-""vc10_2")];
=TEX

=SML
set_goal([], get_conjecture"-""vc10_3");
a(cn_vc_simp_tac[]);
store_mt_results
(mt_runf (op =$))
 [("r1.4", snd o dest_thm o pop_thm , (), get_conjecture"-""vc10_3")];
=TEX

=SML
set_goal([], get_conjecture"-""vc10_4");
a(cn_vc_simp_tac[]);
a(REPEAT strip_tac THEN asm_rewrite_tac[z_«_í_app_thm]);
a(rewrite_tac[z_gen_pred_elim(dest_z_tupleñ(U, U)®) (z_get_specñREC1uNUM®)]);
store_mt_results
(mt_runf (op =$))
 [("r1.5", snd o dest_thm o pop_thm , (), get_conjecture"-""vc10_4")];
=TEX
\subsection{R0038: Bug in processing auxiliary variables in global dependency lists}
Tested explicitly here:
=SML
clean_up();
new_script {name="aux_var_spec", state=initial_cn_state};

¹CN
package aux_var is
auxiliary x : ú ;
function f return integer
˜ x [F x = x];
end aux_var;
°
=SML
(*
Something like the following should work, but does not at present because of
problems with the spec:

new_script {name="aux_var_body", state=get_cn_state()};

¹CN
package body aux_var is
  using i : integer;
  implement x by x = I ;
  function f return integer
  ˜ I [F I = I]
  is
  begin
    return i;
  end f;
begin
  i := 1;
end aux_var;
°
=SML
*)
=TEX

\section{EPILOGUE}
=SML
diag_line(summarize_mt_results());
=TEX




\end{document}
