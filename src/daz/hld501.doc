=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Note#1{{\small\bf[ #1 ]}}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{High Level Design: Overview}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/HLD501}  %% Mandatory field
\def\SCCSversion{$Revision$
}
\TPPissue{\SCCSversion}  %% Mandatory field
%\TPPdate{}  %% Mandatory field (with sensible default)
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
\TPPauthorisation{R.D.~Arthan & HAT Manager}
\TPPabstract{
This document contains the high level design for the Compliance
Tool to be supplied to DRA as part of the DAZ project.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\newfont{\icllogo}{icllogo50}
\def\TPPheadlhs{$\vcenter{\halign{##\cr\icllogo ICL\cr}}$}
%\def\TPPheadcentre{}
%\def\TPPheadcentreproject{}
%\def\TPPheadrhs{}
\let\TPPfootlhs=\TPPfootrhs
\def\TPPfootcentre{$\vcenter{\halign{\hfil\strut##\hfil\cr
COPYRIGHT  \copyright\ ICL 1994\cr
COMMERCIAL IN CONFIDENCE\cr}}$}


\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\pagebreak
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}
\begin{description}
\item[Issue 1.1 (\FormatDate{94/01/31})] First draft.
\end{description}
\subsection{Changes Forecast}
To be updated in response to comments received.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document gives an overview high level design for the Compliance Notation Tool.
The document is the top level of a suite of documents which form the response to the product definition \cite{ISS/HAT/DAZ/DEF501}.
It is intended to conform to all relevant local standards for designs identified in cite{ISS/HAT/DAZ/PLN003}.

\Note{List of references to DRA specs moved to `Background and Requirements'.
Scope sections should just reflect document hierarchy.}

\subsection{Introduction}
A Compliance Tool for processing Compliance Notation is required by DRA as part of the contract MAL 1a/0493 \cite{MAL1A/0493}.
The Compliance Notation is a convenient way of expressing a program written in SPARK together with the specification of what the program should do. A program and its specification expressed in Compliance Notation helps an observer to ascertain whether the program meets its specification.
The Compliance Notation is designed with automation of verification conditions in mind, and a technique for generating the verification conditions for a Compliance Notation literate script is provided in \cite{DRA/CIS/CSE3/SWI/WP/1}.  
The required Tool processes Compliance Notation to produce two outputs; a SPARK program which can subsequently compiled with an Ada Compiler, and a Z Document which includes verification conditions.
The concrete syntax of the SPARK program is specified in ??? and the format of the Z Document is specified in \cite{DRA/CIS/CSE3/SWI/WP/2} and illustrated by an example in \cite{DRA/CIS/CSE3/SWI/WP/5}.

\subsubsection{Background and Requirements}
The requirements for the Compliance Tool are stated in \cite{ISS/HAT/DAZ/DEF501} which are an organised digest of the contractual requirements  annotated with requirement numbers for traceability.

As stated in \cite{ISS/HAT/DAZ/DEF501} a key algorithm to be implemented by the tool is specified in the DRA's \cite{DRA/CIS/CSE3/SWI/WP/1}, \cite{DRA/CIS/CSE3/SWI/WP/2}, \cite{DRA/CIS/CSE3/SWI/WP/4}, \cite{DRA/CIS/CSE3/SWI/WP/5}, \cite{DRA/CIS/CSE3/SWI/WP/6} and \cite{DRA/CIS/CSE3/SWI/WP/9}.


\subsubsection{Dependencies}
The system whose design is described here is self-contained.

\Note{This section is intended for internal interdependencies in the design.}

\section{SYSTEM DECOMPOSITION}
The organisation of the Compliance Tool as perceived by the user is shown in \cite[table 1]{ISS/HAT/DAZ/PLN003} and is reproduced in this document for the reader's convenience as Table \ref{SystemStructure}.

\begin{table}
\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|}\hline
% Row 1:
%\multicolumn{7}{|c|}{\bf Custom HCI} \\\hline
% Row 1:
\multicolumn{2}{|c|}{\bf Basic HCI} &
\multicolumn{5}{c|}{\bf Custom HCI} \\\hline
% Row 2:
\multicolumn{7}{|c|}{{\Product} HCI} \\\hline
% Row 3: Col 1:
\begin{tabular}{@{}c@{}}
{\bf SPARK}\\
{\bf Program}\\
\end{tabular}
&
% Col 2:
\begin{tabular}{@{}c@{}}
{\bf Z Document}\\
{\bf Extractor}
\end{tabular}
&
% Col 3
\begin{tabular}{@{}c@{}}
{\bf Custom Proof}\\
{\bf Facilities}
\end{tabular}
&
% Col 4:
\hspace{0.2in}
&
% Col 5:
\begin{tabular}{@{}c@{}}
Script\\
Editor
\end{tabular}
&
% Col 6
\hspace{0.2in}
&
% Col 7
\begin{tabular}{@{}c@{}}
{\LaTeX}\\
Interface
\end{tabular}
\\\cline{2-3}
% Col 1:
{\bf Extractor}
&
% Cols 2-3:
\multicolumn{2}{c|}{{\bf Z Toolkit Extensions}}
& & & &\\\cline{1-3}\cline{5-5}\cline{7-7}
% Row 4 Cols 1-3:
\multicolumn{3}{|c|}{\Product}
&
% Col 4:
\hspace{0.2in}
&
% Col 5:
X/Motif
&
% Col 6:
\hspace{0.2in}
&
% Col 7:
{\LaTeX}/{\TeX}\\\hline
\multicolumn{7}{|c|}{UNIX}\\\hline
\end{tabular}

\end{center}
\caption{System Structure}\label{SystemStructure}
\end{table}

The items to be developed as part of the Compliance Tool are shown in {\bf bold font} in the table.
For present purposes, it is convenient to group these items under three headings:
{\em User Interface}, covering the Basic and Custom HCI; {\em Compliance Notation Processing}, including Z and SPARK extraction and the toolkit extension; and {\em Custom Proof Facilities}.
These are discussed further in sections \ref{UserInterface}, \ref{ComplianceNotationProcessing} and \ref{CustomProofFacilities} below.
This grouping allows commonality between the functions to be exploited in the design.



\subsection{User Interface}\label{UserInterface}
\subsubsection{Basic HCI}
The Basic HCI subsystem is to be a simple customisation of the {\Product} X/Motif interface to cater for the new languages to be processed.
	
\subsubsection{Custom HCI}
TBS

\subsection{Compliance Notation Processing}\label{ComplianceNotationProcessing}

The SPARK program extractor takes Compliance Notation and produces a SPARK program which can be subsequently checked with the SPARK Examiner and compiled with an Ada Compiler.
The Z document extractor takes Compliance Notation and produces a Z document.
The Z toolkit extensions  comprise a small Z specification on which the Z document extraction depends (since it supplies typing information for objects which may be referenced in the extracted Z document, and {\Product} will be used to enforce type-correctness of all Z as it is generated.).
These three items are treated together as a single subsystem in this High Level Design.
This subsystem is itself further divided into subsystems and is described in further detail in \cite{ISS/HAT/DAZ/HLD503}.

Sections \ref{ComplianceNotationInput}-\ref{ZToolkitExtensions} below give an overview of the subsystems identified  in \cite{ISS/HAT/DAZ/HLD503} and discuss the rationale behind the design.

\subsubsection{Compliance Notation Input}\label{ComplianceNotationInput}

Both the Z and SPARK extractors have a considerable amount of common functionality in the lexical analysis, parsing and conversion of Compliance Notation.
Since it is required to supply a capability for Compliance Notation scripts to be presented and processed one clause at a time, it is sensible to have the processing which is common to both Z and SPARK extraction performed once per clause and then have the specific processing be performed by functions operating on a common intermediate representation of the Compliance Notation script. 

The common functionality will be referred to as the {\em Compliance Notation Input} subsystem.

Entering (correct) Compliance Notation into the Tool causes the intermediate representation of the Compliance Notation script to be stored internally in the Compliance Tool.
The generation of the Z Document and the SPARK program can be obtained readily from the intermediate represention.
Entry of syntactically incorrect Compliance Notation causes appropriate diagnostics to be reported to the user.

Compliance Notation comprises a sequence of web clauses interspersed with English Text and this constitutes a literate script.
The web clauses are processed by the Compliance Tool and the English text is ignored.
The web clause is the basic unit of recognition for the Compliance Tool.
The clauses which constitute Z syntax (i.e., Z paragraphs) can be processed by {\Product} already.
Additional support is required to process the other kinds of web clause (e.g., SPARK programs, refined-by statements).
The processing of web clauses to produce an abstract representation comprises the following functions:

\begin{description}

\item[\bf Clause Recognition]
The facilities provided by {\Product} give a uniform framework for the special markup required to identify the Web clauses in the literate script.

When a web clause is presented to the Compliance Tool, the markup causes a {\Product} subsystem called the Reader/Writer to be invoked.
The Reader/Writer is, in effect, a preprocessor for Standard ML intended to permit the use of Standard ML as a metalanguage for an extensible range of object languages.
The Reader/Writer is set up to arrange for the contents of a web clause to be passed on to the subsequent phases of Compliance Notation processing.

The set-up for the Z paragraph alternative for a web clause can be the same as the usual set-up for {\ProductZ} processing and so these can use the existing markup defined for {\ProductZ}.
Other sorts of clause are handled by a markup sequence defined for the purpose.


\Note{I changed ``delimited with .. symbols'' to ``markup'' because that's a word which is bandied around a lot in Z standards circles and DRA should be comfortable with it.}


\item[\bf Lexical Analysis]
Web clauses are lexically analysed using the Compliance Notation lexical analyser. This provides a lexical representation based on Compliance Notation lexical classes for input into the Compliance Notation parser.


\item[\bf Parsing]
The lexical representation of a web clause is parsed and produces an abstract representation of the Compliance Notation in addition to building up an environment for subsequently producing the Z document if this should be requested.
\end{description}


\subsubsection{Z Generation}
A data structure representing the Z document is generated as part of the intermediate representation of the Compliance Notation script. Each of the parsed web clauses is stored in the {\Product} theory database and the Z document environment is modified as each web clause is entered. Generation of Z for subsequent output is done during the process of parsing. The details of this process are specified in \cite{DRA/CIS/CSE3/SWI/WP/4}.

Note that extraction of the Z document into a file is not necessary for proof work or other analysis (e.g. browsing). The {\Product} theory database contains the same representation of the Z document as would be produced by loading it as a {\ProductZ} script in the usual way.

\subsubsection{SPARK Generation}
The SPARK program is generated from the abstract representation by recursively passing over an abstract representation of the literate script, filling in the k-slots.

\subsubsection{Z and SPARK Output}
Once the SPARK program has been produced in the abstract form, it may be ``pretty-printed'' either on screen or to a file.
Likewise, the Z document can be produced by invoking a function to write the Z paragraphs and the verification conditions on screen or to a file in the order and format suggested in \cite{DRA/CIS/CSE3/SWI/WP/4}.

\subsubsection{Z Toolkit Extensions}\label{ZToolkitExtensions}
The Z Toolkit Extensions of \cite{DRA/CIS/CSE3/SWI/WP/6} comprise Z definitions which need only to be stored in a {\Product-Z} theory in the usual way.


\subsection{Custom Proof Facilities}\label{CustomProofFacilities}
TBS
\section{DATA STORAGE AND FORMATS}
\subsection{Input Files}
Compliance Notation literate scripts are represented as {\Product} literate scripts.
The markup for Z paragraphs, web clauses etc., uses the mechanisms described in \cite{DS/FMU/IED/USR001}.
Literate scripts are stored as text files and may be edited with an ordinary text editor.
Normally, a 256-bit character set is used for special symbols in the scripts;
however, a {\Product} utility may be used to convert to and from a representation using ASCII keywords for the non-ASCII symbols.


\subsection{Output Files}
The Z document is a {\Product} literate script.

The SPARK program is a text file and contains no special markup.

\subsection{Intermediate Representation of Compliance Notation}

As a Compliance Notation literate script is processed, an intermediate representation of it is built up within {\Product}.

\section{TEST SPECIFICATION}
Testing is to be carried out according to the criteria identified
in \cite{ISS/HAT/DAZ/PLN003}.

\end{document}


