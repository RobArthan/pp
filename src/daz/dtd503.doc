%  dtd503.doc %Z% $Date$ $Revision$ $RCSfile$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% This document has these percent lines dotted throughout to help the author
% with getting the formal text to fit within the page.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\def\Source{\cite{DRA/CIS/CSE3/SWI/WP/9/2}}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design: Compliance Notation Parser}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/DTD503}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{D.J.~King&WIN01}
\TPPauthorisation{R.B.~Jones & HAT Manager}
\TPPabstract{
This document contains the detailed design for the
DAZ parser.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issue 1.4] Initial Draft.
\item[Issue \SCCSversion~\FormatDate{$Date$%
}) ] Changed Names to be for Compliance Notation.

\end{description}
\subsection{Changes Forecast}
The phase 2 checks and transformations are yet to be documented.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for the Compliance Notation parser.

It includes the Compliance Notation grammar in the format required by the {\tt SLRP} parser generator.

\subsection{Introduction}
The DRA document \Source gives the grammar for the  Compliance Notation.
This document re-expresses that grammar in the format required by the {\tt SLRP} parser generator.
For easy comparison, cross-references with the SPARK manual (SM \cite{PVL90}) (and  hence with the Ada Language Reference Manual) have been added where appropriate.

 

\subsubsection{Purpose and Background}


\subsubsection{Dependencies}
%\subsubsection{Possible Enhancements}
\subsubsection{Deficiencies}
None known.

\section{DESIGN ISSUES}

\section{PREAMBLE}
=DOC
signature €CNParser› = sig
=DESCRIBE
This is the signature for the structure containing the parser for SPARK.
=ENDDOC


\section{CHANGES FROM DRA/CIS/CSE3/SWI/WP/9/2}
\subsection{Type Mark}
Type marks are terminals in \Source. They are lexically indistinguishable from names. The grammar has been adjusted throughout to use names where type marks are to be found in \Source. The productions affected are listed in tabel \ref{RemovalofTypeMark}.

\begin{table}
\center
\begin{tabular}{||l|p{3.0in}||}\hline
Id &  Affected Productions\\\hline\hline
TM/1 & constant declaration \\\hline
TM/2 & variable declaration \\\hline
TM/3 & subtype indication \\\hline
TM/4 & unconstrained array definition \\\hline
TM/5 & constrained array definition \\\hline
TM/6 & index subtype definition \\\hline
TM/7 & component declaration \\\hline
TM/8 & discriminant part \\\hline
TM/9 & qualified expression \\\hline
TM/10 & loop parameter specification \\\hline
TM/11 & function specification \\\hline
TM/12 & parameter specification \\\hline
TM/13 & deferred constant declaration \\\hline
TM/14 & renaming declaration \\\hline
\end{tabular}
\caption{Removal of Type Mark}
\label{RemovalofTypeMark}
\end{table}

\subsection{Simple Names}

Simple names are lexically equivalent to identifiers, and where there are occurrences of simple name in \Source, identifier has been used here. The productions affected are listed in table \ref{RemovalofSimpleName}.

\begin{table}
\center
\begin{tabular}{||l|p{3.0in}|l||}\hline
Id &  Affected Productions\\\hline\hline
SN/1 & simple name \\\hline
SN/2 & selector \\\hline
SN/3 & name opt1 \\\hline
SN/4 & name opt2 \\\hline
SN/5 & package body \\\hline
SN/6 & renaming declaration \\\hline
SN/7 & enumeration representation clause \\\hline
SN/8 & address clause \\\hline
\end{tabular}
\caption{Removal of Simple Name}
\label{RemovalofSimpleName}
\end{table}


\subsection{Elision}\label{Elision}

In the LRM there are several productions of the form:

=GFT SPARK Manual 3.2:
identifier_list ::= identifier {, identifier}
=TEX

For this kind of grammatical rule, \Source has systematically introduced a new production which specifically handles the option, as shown in the following example.
=GFT BNF Example

identifier_list =	`Identifier`, id_list;

id_list	=
		|	`Comma`, identifier_list;
=TEX
It is equally possible to elide the new production and accept the same grammar by writing:
=GFT BNF Example

identifier_list =	`Identifier`
		|	`Identifier`, `Comma`, identifier_list;
=TEX

In the implemented grammar, the latter form has been used where possible since a) it is more efficient and b) it is LR(1).

The following productions elided in this way are listed in table \ref{ElidedProductions}.

\begin{table}
\center
\begin{tabular}{||l|p{3.0in}|l||}\hline
Id & Elided Production	& Affected Productions\\\hline\hline
EP/1 & id list & identifier list \\\hline
EP/2 & dp1 & web clause, declarative part \\\hline
EP/3 & exp list & expression list\\\hline
EP/4 & rel2 & relation\\\hline
EP/5 & reltail & expression\\\hline
EP/6 & ass list & named association\\\hline
EP/7 & ag list & aggregate choice list\\\hline
EP/8 & multoptail & term\\\hline
EP/9 & statement list & sequence of statements\\\hline
EP/10 & subtype list & index subtype definition list\\\hline
\end{tabular}
\caption{Elided Productions}
\label{ElidedProductions}
\end{table}

\subsection{Ranges}\label{Ranges}

\begin{table}
\center
\begin{tabular}{||l|p{3.0in}|l||}\hline
Id &  Affected Production & Action\\\hline\hline
RA/1 & range & Deleted \\\hline
RA/2 & sr expression & New \\\hline
RA/3 & relation & Changed \\\hline
RA/4 & loop parameter specification & Changed \\\hline
RA/5 & range constraint & Changed \\\hline
RA/6 & discrete range & Changed \\\hline
RA/7 & component clause & Changed \\\hline
\end{tabular}
\caption{Ranges}
\label{Ranges}
\end{table}

\subsection{Aggregates}\label{Aggregates}

\begin{table}
\center
\begin{tabular}{||l|p{3.0in}|l||}\hline
Id &  Affected Production & Action\\\hline\hline
AG/1 & aggregate & Changed \\\hline
AG/2 & component association & Changed \\\hline
AG/3 & named association & Changed \\\hline
AG/4 & aggregate choice list & Changed \\\hline
\end{tabular}
\caption{Widening of Aggregates}
\label{WideningofAggregates}
\end{table}

\subsection{Names}\label{Names}

\begin{table}
\center
\begin{tabular}{||l|p{3.0in}|l||}\hline
Id &  Affected Production & Action\\\hline\hline
NA/1 & name & Changed \\\hline
NA/2 & indexed component & New \\\hline
NA/3 & selected component & Changed \\\hline
NA/4 & select & Deleted \\\hline
\end{tabular}
\caption{Names}
\label{Names}
\end{table}

\subsection{Function Calls}\label{FunctionCalls}
\subsection{Parameter Association}\label{ParameterAssociation}
\subsection{SubType Indication}\label{SubTypeIndication}
elided:
formal parameter,
named parameter association

\subsection{Labels}\label{Labels}

\begin{table}
\center
\begin{tabular}{||l|p{3.0in}|l||}\hline
Id &  Affected Production & Action\\\hline\hline
LA/1 & label & Changed \\\hline
\end{tabular}
\caption{Labels}
\label{Labels}
\end{table}

\subsection{KSlots}\label{KSlots}
\begin{table}
\center
\begin{tabular}{||l|p{3.0in}|l||}\hline
Id &  Affected Production & Action\\\hline\hline
KS/1 & k slot & New \\\hline
\end{tabular}
\caption{K Slots}
\label{K Slots}
\end{table}


\subsection{Primed Identifiers}\label{PrimedIdentifiers}

\begin{table}
\center
\begin{tabular}{||l|p{3.0in}|l||}\hline
Id &  Affected Production & Action\\\hline\hline
AT/1 & attribute & Changed \\\hline
\end{tabular}
\caption{Primed Identifiers}
\label{PrimedIdentifiers}
\end{table}

\subsection{Z and Web Clauses}

Z paragraphs are supported by {\Product} and a production branch in
the $web\_clause$ is not required.

\begin{table}
\center
\begin{tabular}{||l|p{3.0in}|l||}\hline
Id &  Affected Production & Action\\\hline\hline
WC/1 & web clause/z & Deleted \\\hline
\end{tabular}
\caption{Labels}
\label{Labels}
\end{table}

\newpage
\section{GRAMMAR}
\subsection{Web Clause}
The entry point to the grammar (sentence symbol) is placed first, because that is where {\tt SLRP} expects to find it.


The production for replacing by declarations in \Source was expressed in terms of dec and dp1. Here we use declarative part which is identical.

=DUMP dtd503.grm.txt

€web_clause› =	compilation
					(red_web_clause1 x1 stk)
		|	`CompLabel`, `ReplacedBy`, compilation
					(red_web_clause2 x1 x2 x3 stk)
		|	`PPartLabel`, `ReplacedBy`, private_part
					(red_web_clause3 x1 x2 x3 stk)
		|	`VPartLabel`, `ReplacedBy`, visible_part
					(red_web_clause4 x1 x2 x3 stk)
		|	`DecLabel`, `ReplacedBy`, declarative_part
					(red_web_clause5 x1 x2 x3 stk)
		|	`StmtLabel`, `ReplacedBy`, sequence_of_statements
					(red_web_clause6 x1 x2 x3 stk)
		|	`SpecLabel`, `RefinedBy`, sequence_of_statements
					(red_web_clause7 x1 x2 x3 stk)
		|	`RefinedBy`, sequence_of_statements
					(red_web_clause8 x1 x2 stk)
		|	`SpecLabel`, `ReplacedBy`, sequence_of_statements
					(red_web_clause9 x1 x2 x3 stk)
		|	`ReplacedBy`, sequence_of_statements
					(red_web_clause10 x1 x2 stk);
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Declarations}

SPARK manual 3.1:
=DUMPMORE dtd503.grm.txt

€basic_declaration› =		object_declaration
					(red_basic_declaration1 x1 stk)
			|	type_declaration
					(red_basic_declaration2 x1 stk)
			|	subtype_declaration
					(red_basic_declaration3 x1 stk)
			|	deferred_constant_declaration
					(red_basic_declaration4 x1 stk);
=TEX

SPARK manual 3.2:
=DUMPMORE dtd503.grm.txt

€object_declaration› =	constant_declaration
					(red_object_declaration1 x1 stk)
			|	variable_declaration
					(red_object_declaration2 x1 stk);
=TEX
The production id list of \Source\  has been elided (see section \ref{Elision}).

SPARK manual 3.2:
=DUMPMORE dtd503.grm.txt

€constant_declaration› =	identifier_list, `Colon`, `Constant`, name,
					`Becomes`, expression, `Semi`
					(red_constant_declaration x1 x2 x3 x4 x5 x6 x7 stk);
	
€variable_declaration› =	identifier_list, `Colon`, name, `Semi`
					(red_variable_declaration x1 x2 x3 x4 stk);

€identifier_list› =	`Identifier`
					(red_identifier_list1 x1 stk)
		|	`Identifier`, `Comma`, identifier_list
					(red_identifier_list2 x1 x2 x3 stk);
=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
TBS Need to add discriminant part HADAZ11!
SPARK manual 3.3.1:
=DUMPMORE dtd503.grm.txt

€type_declaration› =	full_type_declaration
					(red_type_declaration1 x1 stk)
		|	private_type_declaration
					(red_type_declaration2 x1 stk);

€full_type_declaration› =	`Type`, `Identifier`, discriminant_part, `Is`, type_definition, `Semi`
					(red_type_declaration1 x1 x2 x3 x4 x5 x6 stk)
			|	`Type`, `Identifier`, `Is`, type_definition, `Semi`
					(red_type_declaration2 x1 x2 x3 x4 x5 stk);

€type_definition› =	enumeration_type_definition
					(red_type_definition1 x1 stk)
		|	integer_type_definition
					(red_type_definition2 x1 stk)
		|	real_type_definition
					(red_type_definition3 x1 stk)
		|	array_type_definition
					(red_type_definition4 x1 stk)
		|	record_type_definition
					(red_type_definition5 x1 stk);
=TEX
A subtype indication which comprises a name (i.e., type mark in \Source) followed by an indexed constraint will appear in this grammar as an indexed component (See \ref{Constraint}. 

SPARK manual 3.3.2:
=DUMPMORE dtd503.grm.txt

€subtype_declaration› =	`SubType`, `Identifier`, `Is`, subtype_indication, `Semi`
					(red_subtype_declaration x1 x2 x3 x4 x5 stk);

€subtype_indication› =	name, constraint
					(red_subtype_indication x1 x2 stk);
=TEX
A subtype indication which comprises a name (i.e., type mark in \Source) followed by an indexed constraint will appear in this grammar as an indexed component (See section \ref{SubtypeIndication}). 

SPARK manual 3.3.2:
=DUMPMORE dtd503.grm.txt

€constraint›	=	range_constraint
					(red_constraint1 x1 stk)
		|	floating_point_constraint
					(red_constraint2 x1 stk)
		|	fixed_point_constraint
					(red_constraint3 x1 stk);
=TEX

Description TBS!!
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SPARK manual 3.5:
=DUMPMORE dtd503.grm.txt

€range_constraint› =	`RRange`, sr_expression
					(red_range_constraint x1 x2 stk);
=TEX

SPARK manual 3.5.1:
=DUMPMORE dtd503.grm.txt

€enumeration_type_definition› =	`Ord`, identifier_list, `Crd`
					(red_enumeration_type_definition x1 x2 x3 stk);

=TEX

SPARK manual 3.5.4:
=DUMPMORE dtd503.grm.txt

€integer_type_definition› =	range_constraint
					(red_integer_type_definition x1 stk);

=TEX

SPARK manual 3.5.6:
=DUMPMORE dtd503.grm.txt

€real_type_definition› =	floating_point_constraint
					(red_real_type_definition1 x1 stk)
			|	fixed_point_constraint
					(red_real_type_definition2 x1 stk);
=TEX
SPARK manual 3.5.7:
=DUMPMORE dtd503.grm.txt

€floating_point_constraint› =	floating_accuracy_definition
					(red_floating_point_constraint1 x1 stk)
				|	floating_accuracy_definition, range_constraint
					(red_floating_point_constraint2 x1 x2 stk);

€floating_accuracy_definition› =	`Digits`, simple_expression
					(red_floating_accuracy_definition x1 x2 stk);
=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SPARK manual 3.5.9:
=DUMPMORE dtd503.grm.txt

€fixed_point_constraint› =	fixed_accuracy_definition
					(red_fixed_point_constraint1 x1 stk)
			|	fixed_accuracy_definition, range_constraint
					(red_fixed_point_constraint2 x1 stk);

€fixed_accuracy_definition› =	`Delta`, simple_expression
					(red_fixed_accuracy_definition x1 x2 stk);
=TEX
Description TBS w.r.t. discrete range

SPARK manual 3.6:
=DUMPMORE dtd503.grm.txt

€array_type_definition› =	unconstrained_array_definition
					(red_array_type_definition1 x1 stk)
			|	constrained_array_definition
					(red_array_type_definition2 x1 stk);
€unconstrained_array_definition› =
			`Array`, `Ord`, index_subtype_definition_list, `Crd`, `Of`, name
					(red_array_type_definition3 x1 x2 x3 x4 x5 x6 stk);

€constrained_array_definition› =
			`Array`, index_constraint, `Of`, name
					(red_constrained_array_definition x1 x2 x3 x4 stk);
€index_subtype_definition_list› =
			index_subtype_definition
					(red_index_subtype_definition_list1 x1 stk)
		|	index_subtype_definition, `Comma`, index_subtype_definition_list
					(red_index_subtype_definition_list2 x1 x2 x3 stk);

€index_subtype_definition› =	name, `RRange`, `LessGreat`
					(red_index_subtype_definition x1 x2 x3 stk);

€index_constraint› =	`Ord`, name_list, `Crd`
					(red_index_constraint x1 x2 x3 stk);

€name_list› =		name
					(red_name_list1 x1 stk)
		|	name, `Comma`, name_list
					(red_name_list2 x1 x2 x3 stk);

€discrete_range› =	simple_expression, range_constraint
					(red_discrete_range1 x1 x2 stk)
		|	sr_expression
					(red_discrete_range2 x1 stk);
=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
TBS Don't forget to add variant part... HADAZ11!

SPARK manual 3.7:
=DUMPMORE dtd503.grm.txt

€record_type_definition› =	`Record`, component_list, `End`, `Record`
					(red_record_type_definition x1 x2 x3 x4 stk);
=TEX
=DUMPMORE dtd503.grm.txt

€component_list› =	component_declaration_list
					(red_component_list1 x1 stk)
		|	variant_part
					(red_component_list2 x1 stk)
		|	component_declaration_list, variant_part
					(red_component_list3 x1 x2 stk)
		|	`Null`
					(red_component_list4 x1 stk);

€component_declaration_list› =	component_declaration
					(red_component_declaration_list1 x1 stk)
				|	component_declaration, component_declaration_list
					(red_component_declaration_list2 x1 x2 stk);

€component_declaration› =	identifier_list, `Colon`, name, `Semi`
					(red_component_declaration x1 x2 x3 x4 stk);

€discriminant_part› =	`Identifier`, `Colon`, name
					(red_discriminant_part x1 x2 x3 stk);

€variant_part› =	`Case`, `Identifier`, `Is`, variant_list, `End`, `Case`, `Semi`
					(red_variant_part x1 x2 x3 x4 x5 x6 x7 stk);

€variant_list› =	variant
					(red_variant_list1 x1 stk)
		|	variant, variant_list
					(red_variant_list2 x1 x2 stk);

€variant› =	`When`, variant_choice_list, `GoesTo`, component_list
					(red_variant x1 x2 x3 x4 stk);

€variant_choice_list› =	`Identifier`
					(red_variant_choice_list1 x1 stk)
			|	`Identifier`, `Bar`, variant_choice_list
					(red_variant_choice_list2 x1 x2 x3 stk);
=TEX
Insisting on at least one declaration seems odd.

SPARK manual 3.9:
=DUMPMORE dtd503.grm.txt

€declarative_part› =	dec
					(red_declarative_part1 x1 stk)
		|	dec, declarative_part
					(red_declarative_part2 x1 x2 stk);

€dec› =		k_slot
					(red_dec1 x1 stk)
	|	renaming_declaration
					(red_dec2 x1 stk)
	|	basic_declarative_item
					(red_dec3 x1 stk)
	|	package_declaration
					(red_dec4 x1 stk)
	|	body
					(red_dec5 x1 stk);

€basic_declarative_item› =	basic_declaration
					(red_basic_declarative_item1 x1 stk)
			|	representation_clause
					(red_basic_declarative_item2 x1 stk);

€body› =	proper_body
					(red_body1 x1 stk)
	|	body_stub
					(red_body2 x1 stk);

€proper_body› =	subprogram_body
					(red_proper_body1 x1 stk)
		|	package_body
					(red_proper_body2 x1 stk);
=TEX
The production rules in SPARK Manual 4.1 have been used since the grammar in \Source is probably too wide:

TBS - justify the attribute.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SPARK manual 4.1:
=DUMPMORE dtd503.grm.txt
€name› =		`Identifier`
					(red_name1 x1 stk)
		|	indexed_component
					(red_name2 x1 stk)
		|	selected_component
					(red_name3 x1 stk)
		|	attribute
					(red_name4 x1 stk);
=TEX
SPARK manual 4.1.1:
=DUMPMORE dtd503.grm.txt
€indexed_component› =	name, actual_parameter_part
					(red_indexed_component x1 x2 stk);
=TEX
SPARK manual 4.1.3:
=DUMPMORE dtd503.grm.txt
€selected_component› =	name, `Dot`, selector
					(red_selected_component x1 x2 x3 stk);

€selector› =		`Identifier`
					(red_selector x1 stk);
=TEX
SPARK manual 4.1/4.1.1:
=DUMPMORE dtd503.grm.txt
€expression_list› =	expression
					(red_expression_list1 x1 stk)
		|	expression, `Comma`, expression_list
					(red_expression_list2 x1 x2 x3 stk);

=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SPARK manual 4.1.4:
=DUMPMORE dtd503.grm.txt
€attribute› =		name, `PrimedIdentifier`
					(red_attribute1 x1 x2 stk)
		|	`CharacterLiteral`, `PrimedIdentifier`
					(red_attribute2 x1 x2 stk);
=TEX
SPARK manual 4.3:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SPARK manual 4.3:
=DUMPMORE dtd503.grm.txt

€aggregate› =		`Ord`, component_association, `Crd`
					(red_aggregate x1 x2 x3 stk);

€component_association› =	named_association
					(red_component_association1 x1 stk)
			|	positional_association
					(red_component_association2 x1 stk);

€named_association› =	aggregate_choice_list, `GoesTo`, expression
					(red_named_association1 x1 x2 x3 stk)
			|	aggregate_choice_list, `GoesTo`, expression, `Comma`,
				named_association
					(red_named_association2 x1 x2 x3 x4 x5 stk);

€aggregate_choice_list› =	`Others`
					(red_aggregate_choice_list1 x1 stk)
			|	aggregate_choice
					(red_aggregate_choice_list2 x1 stk)
			|	aggregate_choice, `Bar`, aggregate_choice_list
					(red_aggregate_choice_list3 x1 x2 x3 stk);

=TEX
I don't see where the Ada LRM's rule that ``named notation is required for an aggegrate with a single component'' comes in here.
=DUMPMORE dtd503.grm.txt

€aggregate_choice› =	discrete_range
					(red_aggregate_choice x1 stk);

€positional_association› =	expression_list
					(red_positional_association x1 stk);
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{Expressions}

reltail has been elided.

SPARK manual 4.4:
=DUMPMORE dtd503.grm.txt

€expression› =		relation
					(red_expression1 x1 stk)
		|	relation, and_relation
					(red_expression2 x1 x2 stk)
		|	relation, and_then_relation
					(red_expression3 x1 x2 stk)
		|	relation, or_relation
					(red_expression4 x1 x2 stk)
		|	relation, or_else_relation
					(red_expression5 x1 x2 stk)
		|	relation, xor_relation
					(red_expression6 x1 x2 stk);

€and_relation› =	`And`, relation
					(red_and_relation1 x1 x2 stk)
		|	`And`, relation, and_relation
					(red_and_relation2 x1 x2 x3 stk);

€and_then_relation› =	`And`, `Then`, relation
					(red_and_then_relation1 x1 x2 x3 stk)
		|	`And`, `Then`, relation, and_then_relation
					(red_and_then_relation2 x1 x2 x3 x4 stk);

€or_relation› =	`Or`, relation
					(red_or_relation1 x1 x2 stk)
		|	`Or`, relation, or_relation
					(red_or_relation2 x1 x2 x3 stk);

€or_else_relation› =	`Or`, `Else`, relation
					(red_or_else_relation1 x1 x2 x3 stk)
		|	`Or`, `Else`, relation, or_else_relation
					(red_or_else_relation2 x1 x2 x3 x4 stk);

€xor_relation› =	`Xor`, relation
					(red_xor_relation1 x1 x2stk)
		|	`Xor`, relation, xor_relation
					(red_xor_relation2 x1 x2 x3 stk);
=TEX
rel2 has been elided.
The introduction of an intermediate production for sr expression is to support ranges as expressions and is described in section \ref{Ranges}.


SPARK manual 4.4:
=DUMPMORE dtd503.grm.txt

€relation› =		sr_expression
					(red_relation1 x1 stk)
		|	sr_expression, relational_operator, sr_expression
					(red_relation2 x1 x2 x3 stk)
		|	sr_expression, `In`, sr_expression
					(red_relation3 x1 x2 x3 stk)
		|	sr_expression, `Not`, `In`, sr_expression
					(red_relation4 x1 x2 x3 x4 stk);

€sr_expression› =	simple_expression
					(red_sr_expression1 x1 x2 x3 x4 x5 x6 stk)
		|	simple_expression, `DotDot`, simple_expression
					(red_sr_expression2 x1 x2 x3 stk);

€simple_expression› =	term, binoptail
					(red_simple_expression1 x1 x2 stk)
			|	unary_adding_operator, term, binoptail
					(red_simple_expression2 x1 x2 x3 stk);

€binoptail› =
					(red_binoptail1 stk)
	|	binary_adding_operator, term, binoptail
					(red_binoptail2 x1 x2 x3 stk);

€term› =	factor
					(red_term1 x1 stk)
	|	factor, multiplying_operator, factor
					(red_term2 x1 x2 x3 stk);

€factor› =	primary
					(red_factor1 x1 stk)
	|	primary, `StarStar`, primary
					(red_factor2 x1 x2 x3 stk)
	|	`Abs`, primary
					(red_factor3 x1 x2 stk)
	|	`Not`, primary
					(red_factor4 x1 x2 stk);
=TEX

The production for primary/function call is not necessary because a function call appear as an indexed component. Similarly for type conversions.

Attributes now appear in the production for name. TBS more explanation...


TBS what has happened to qualified expressions.

=DUMPMORE dtd503.grm.txt
€primary› =		`NumericLiteral`
					(red_primary1 x1 stk)
		|	`CharacterLiteral`
					(red_primary2 x1 stk)
		|	`StringLiteral`
					(red_primary3 x1 stk)
		|	name
					(red_primary4 x1 stk)
		|	`Ord`, expression, `Crd`
					(red_primary5 x1 x2 x3 stk)
		|	abstract_expression
					(red_primary6 x1 stk);
=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SPARK manual 4.5:
=DUMPMORE dtd503.grm.txt
€relational_operator› =		`Equals`
					(red_relational_operator1 x1 stk)
			|	`NotEquals`
					(red_relational_operator2 x1 stk)
			|	`LessThan`
					(red_relational_operator3 x1 stk)
			|	`LessEquals`
					(red_relational_operator4 x1 stk)
			|	`GreaterThan`
					(red_relational_operator5 x1 stk)
			|	`GreaterEquals`
					(red_relational_operator6 x1 stk);

€binary_adding_operator› =	`Plus`
					(red_binary_adding_operator1 x1 stk)
			|	`Minus`
					(red_binary_adding_operator2 x1 stk)
			|	`Ampersand`
					(red_binary_adding_operator3 x1 stk);

€unary_adding_operator› =	`Plus`
					(red_unary_adding_operator1 x1 stk)
			|	`Minus`
					(red_unary_adding_operator2 x1 stk);

€multiplying_operator› =	`Star`
					(red_multiplying_operator1 x1 stk)
			|	`Div`
					(red_multiplying_operator2 x1 stk)
			|	`Mod`
					(red_multiplying_operator3 x1 stk)
			|	`Rem`
					(red_multiplying_operator4 x1 stk);
=TEX

\subsection{Type Conversion}

Type conversions [SPARK manual 4.6] appear as indexed components.
\subsection{Qualified Expression}

SPARK manual 4.7:
=DUMPMORE dtd503.grm.txt
€qualified_expression› =	name, `Prime`, aggregate
					(red_qualified_expression x1 x2 x3 stk);
=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{Statements}
A production for specification statements has been added as a further refinement to \Source in which a specification statement is a terminal.
A label appended to a specification statement is parsed as a number in brackets. A subsequent check is required to ensure that the number comprises only digits.

A Z declaration in the statement/Con production appears as Z tokens. The parser then has to construct a Z declaration by placing the tokens in a context where a declaration could appear (i.e., a schema) and parse as a Z term using the Z parser. The term is then broken apart to yield the parsed Z declaration.

SPARK manual 5:
=DUMPMORE dtd503.grm.txt

€sequence_of_statements› =		statement
					(red_sequence_of_statements1 x1 stk)
				|	statement, sequence_of_statements
					(red_sequence_of_statements2 x1 x2 stk);

€statement› =		k_slot
					(red_statement1 x1 stk)
		|	specification_statement
					(red_statement2 x1 stk)
		|	`Con`, `Z`, `FatDot`, specification_statement
					(red_statement3 x1 x2 x3 x4 stk)
		|	simple_statement
					(red_statement4 x1 stk)
		|	compound_statement
					(red_statement5 x1 stk);

€specification_statement› =	`GrkDelta`, `Z`, `LSqBrack`, `Z`, `RSqBrack`
					(red_specification_statement1 x1 x2 x3 x4 x5 stk)
			|	`GrkDelta`, `Z`, `LBrace`, `Z`, `RBrace`
					(red_specification_statement2 x1 x2 x3 x4 x5 stk)
			|	`GrkDelta`, `Z`, `LSqBrack`, `Z`, `RSqBrack`, label
					(red_specification_statement3 x1 x2 x3 x4 x5 x6 stk)
			|	`GrkDelta`, `Z`, `LBrace`, `Z`, `RBrace`, label
					(red_specification_statement4 x1 x2 x3 x4 x5 x6 stk);

€label› =	`Ord`, `NumericLiteral`, `Crd`
					(red_label x1 x2 x3 stk);

€k_slot› =	`KSlot`
					(red_k_slot1 x1 stk)
	|	`KSlot`, label
					(red_k_slot2 x1 x2 stk);
=TEX
SPARK manual 5.1:
=DUMPMORE dtd503.grm.txt

€simple_statement› =		null_statement
					(red_simple_statement1 x1 stk)
			|	assignment_statement
					(red_simple_statement2 x1 stk)
			|	procedure_call_statement
					(red_simple_statement3 x1 stk)
			|	exit_statement
					(red_simple_statement4 x1 stk)
			|	return_statement
					(red_simple_statement5 x1 stk);

€compound_statement› =		if_statement
					(red_compound_statement1 x1 stk)
				|	case_statement
					(red_compound_statement2 x1 stk)
				|	loop_statement
					(red_compound_statement3 x1 stk);

€null_statement› =	`Null`, `Semi`
					(red_null_statement x1 x2 stk);

=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SPARK manual 5.2:
=DUMPMORE dtd503.grm.txt
€assignment_statement› =	name, `Becomes`, expression, `Semi`
					(red_assignment_statement x1 x2 x3 x4 stk);
=TEX
SPARK manual 5.3:
=DUMPMORE dtd503.grm.txt

€if_statement› = 	`If`, condition,
			`Then`, sequence_of_statements,
				elsif_part,
				else_part,
			`End`, `If`, `Semi`
					(red_if_statement
						x1 x2 x3 x4 x5 x6 x7 x8 x9 stk);

€elsif_part› =
					(red_elsif_part1 stk)
		|	`ElsIf`, condition,
			`Then`, sequence_of_statements,
			elsif_part
					(red_elsif_part2 x1 x2 x3 x4 x5 stk);

€else_part› =
					(red_else_part1 stk)
		|	`Else`, sequence_of_statements
					(red_else_part2 x1 x2 stk);

€condition› =		expression
					(red_condition x1 stk);
=TEX
SPARK manual 5.4:
=DUMPMORE dtd503.grm.txt

€case_statement› =	`Case`, expression,
			`Is`,
				case_statement_alternative_list,
				others_part,
			`End`, `Case`, `Semi`
					(red_case_statement x1 x2 x3 x4 x5 x6 x7 x8 stk);

€case_statement_alternative_list› =
			case_statement_alternative
					(red_case_statement_alternative_list1 x1 stk)
		|	case_statement_alternative, case_statement_alternative_list
					(red_case_statement_alternative_list2 x1 x2 stk);

€case_statement_alternative› =
			`When`, case_choice_list, `GoesTo`, sequence_of_statements
					(red_case_statement_alternative x1 x2 x3 x4 stk);

€case_choice_list› =	case_choice
					(red_case_choice_list1 x1 stk)
		|	case_choice, `Bar`, case_choice_list
					(red_case_choice_list2 x1 x2 x3 stk);

€case_choice› =	discrete_range
					(red_case_choice x1 stk);

€others_part› =
					(red_others_part1 stk)
		|	`WhenOthers`, `GoesTo`, sequence_of_statements
					(red_others_part2 x1 x2 x3 stk);
=TEX
SPARK has no use for, and does not allow, the optional names.

SPARK manual 5.5:
=DUMPMORE dtd503.grm.txt

€loop_statement› =	name_opt1, iteration_scheme_opt,
			till_opt,
			`Loop`, sequence_of_statements,
			`End`, `Loop`, name_opt2, `Semi`
					(red_loop_statement
						x1 x2 x3 x4 x5 x6 x7 x8 x9 stk);

€name_opt1› =
					(red_name_opt11 stk)
		|	`Identifier`, `Colon`
					(red_name_opt12 x1 x2 stk);

€name_opt2› =
					(red_name_opt21 stk)
		|	`Identifier`
					(red_name_opt22 x1stk);

€iteration_scheme_opt› =
					(red_iteration_scheme_opt1 stk)
		|	iteration_scheme
					(red_iteration_scheme_opt2 x1 stk);

€iteration_scheme› =	`While`, condition
					(red_iteration_scheme1 x1 x2 stk)
		|	`For`, loop_parameter_specification
					(red_iteration_scheme2 x1 x2 stk);
=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Range has been replaced with a more general sr expression in loop parameter specification. A later check will be required to ensure that the sr expression is a range. See section \ref{Ranges} for further information.

Abstract Expressions comprise a ``˚'' followed by some Z followed by ``˝''.

SPARK manual 5.5:
=DUMPMORE dtd503.grm.txt
€loop_parameter_specification› =
			`Identifier`, `In`, name
					(red_loop_parameter_specification1 x1 x2 x3 stk)
		|	`Identifier`, `In`, `Reverse`, name
					(red_loop_parameter_specification2 x1 x2 x3 x4 stk)
		|	`Identifier`, `In`, name, `RRange`, sr_expression
					(red_loop_parameter_specification3 x1 x2 x3 x4 x5 stk)
		|	`Identifier`, `In`, `Reverse`, name, `RRange`, sr_expression
					(red_loop_parameter_specification4 x1 x2 x3 x4 x5 x6 stk);

€till_opt› =
					(red_till_opt1 stk)
		|	`Till`, abstract_expression
					(red_till_opt2 x1 x2 stk);

€abstract_expression› =	`LStrachey`, `Z`, `RStrachey`
					(red_abstract_expression x1 x2 x3 stk);
=TEX
SPARK manual 5.7:
=DUMPMORE dtd503.grm.txt

€exit_statement› =	`Exit`, `Semi`
					(red_exit_statement1 x1 x2 stk)
		|	`Exit`, `When`, condition, `Semi`
					(red_exit_statement2 x1 x2 x3 x4 stk);
=TEX
SPARK manual 5.8:
=DUMPMORE dtd503.grm.txt

€return_statement› =	`Return`, expression, `Semi`
					(red_return_statement x1 x2 x3 stk);
=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SPARK manual 6.1:
=DUMPMORE dtd503.grm.txt

€subprogram_declaration› =
			procedure_specification, `Semi`
					(red_subprogram_declaration1 x1 x2 stk)
		|	function_specification, `Semi`
					(red_subprogram_declaration2 x1 x2 stk);

€subprogram_specification› =
			procedure_specification
					(red_subprogram_specification1 x1 stk)
		|	function_specification
					(red_subprogram_specification2 x1 stk);
=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SPARK manual 6.1:
=DUMPMORE dtd503.grm.txt

€procedure_specification› =
			`Procedure`, `Identifier`
					(red_procedure_specification1 x1 x2 stk)
		|	`Procedure`, `Identifier`, specification_statement
					(red_procedure_specification2 x1 x2 x3 stk)
		|	`Procedure`, `Identifier`, formal_part
					(red_procedure_specification3 x1 x2 x3 stk)
		|	`Procedure`, `Identifier`, formal_part, specification_statement
					(red_procedure_specification4 x1 x2 x3 x4 stk);

€function_specification› =
			`Function`, designator, `Return`, name
					(red_function_specification1 x1 x2 x3 x4 stk)
		|	`Function`, designator, `Return`, name,
			specification_statement
					(red_function_specification2 x1 x2 x3 x4 x5 stk)
		|	`Function`, designator, formal_part, `Return`, name
					(red_function_specification3 x1 x2 x3 x4 x5 stk)
		|	`Function`, designator, formal_part, `Return`, name,
			specification_statement
					(red_function_specification4 x1 x2 x3 x4 x5 x6 stk);
=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SPARK manual 6.1:
=DUMPMORE dtd503.grm.txt

€designator› =		`Identifier`
					(red_designator x1 stk);

€operator_symbol› =	`StringLiteral`
					(red_operator_symbol x1 stk);

€formal_part› =	`Ord`, parlist, `Crd`
					(red_formal_part x1 x2 x3 stk);

€parlist› =		parameter_specification
					(red_parlist1 x1 stk)
		|	parameter_specification, `Semi`, parlist
					(red_parlist2 x1 x2 x3 stk);

€parameter_specification› =	identifier_list, `Colon`, mode, name
					(red_parameter_specification x1 x2 x3 x4 stk);

€mode› =
					(red_mode1 x1 stk)
	|	`In`
					(red_mode2 x1 stk)
	|	`Out`
					(red_mode3 x1 stk)
	|	`In`, `Out`
					(red_mode4 x1 x2 stk);
=TEX
SPARK's annotations have been dropped
SPARK's code insertions have been dropped
SPARK's hidden parts have been dropped

SPARK manual 6.3:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
=DUMPMORE dtd503.grm.txt

€subprogram_body› =	procedure_specification, `Is`, subprogram_implementation
					(red_subprogram_body1 x1 x2 x3 stk)
			|	function_specification, `Is`, subprogram_implementation
					(red_subprogram_body2 x1 x2 x3 stk);

€subprogram_implementation› =	declarative_part,
				`Begin`,
					sequence_of_statements,
				`End`, designator, `Semi`
					(red_subprogram_implementation x1 x2 x3 x4 x5 x6 stk);
=TEX
SPARK manual 6.4:
=DUMPMORE dtd503.grm.txt
€procedure_call_statement› =	name, `Semi`
					(red_procedure_call_statement x1 x2 stk);
=TEX
=DUMPMORE dtd503.grm.txt
€actual_parameter_part› =	`Ord`, parameter_association, `Crd`
					(red_actual_parameter_part x1 x2 x3 stk);
=TEX
=DUMPMORE dtd503.grm.txt
€parameter_association› =	named_association
					(red_parameter_association1 x1 stk)
			|	positional_parameter_association
					(red_parameter_association2 x1 stk);

=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
named parameter association and formal parameter have been elided. For an explanation see section \ref{ParameterAssociation}.
=DUMPMORE dtd503.grm.txt

€positional_parameter_association› =	actual_parameter
					(red_positional_parameter_association1 x1 stk)
				|	actual_parameter, `Comma`,
						positional_parameter_association
					(red_positional_parameter_association2 x1 x2 x3 stk);
=TEX
=DUMPMORE dtd503.grm.txt
€actual_parameter› =	expression
					(red_actual_parameter x1 stk);
=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SPARK manual 7.1:
=DUMPMORE dtd503.grm.txt
€package_declaration› =	package_specification, `Semi`
					(red_package_declaration x1 x2 stk);

€package_specification› =
			`Package`, `Identifier`,
			`Is`,
				visible_part,
			`End`, `Identifier`
					(red_package_specification1 x1 x2 x3 x4 x5 x6 stk)
		|	`Package`, `Identifier`,
			`Is`,
				visible_part,
			`Private`,
				private_part,
			`End`, `Identifier`
					(red_package_specification2 x1 x2 x3 x4 x5 x6 x7 x8 stk);

€visible_part› =	visdec
					(red_visible_part1 x1 stk)
		|	visdec, visible_part
					(red_visible_part2 x1 x2 stk);

=TEX

SPARK manual 7.1:
=DUMPMORE dtd503.grm.txt
€visdec› =		k_slot
					(red_visdec1 x1 stk)
		|	basic_declarative_item
					(red_visdec2 x1 stk)
		|	subprogram_declaration
					(red_visdec3 x1 stk);

€private_part› =	pdec
					(red_private_part1 x1 stk)
		|	pdec, private_part
					(red_private_part2 x1 x2 stk);

€pdec› =	k_slot
					(red_pdec1 x1 stk)
	|	basic_declarative_item
					(red_pdec2 x1 stk);

=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
=DUMPMORE dtd503.grm.txt
€package_body› =	`Package`, `BBody`, `Identifier`,
			`Is`,
				package_implementation,
			`End`, `Identifier`, `Semi`
					(red_package_body x1 x2 x3 x4 x5 x6 x7 x8 stk);

€package_implementation› =	declarative_part
					(red_package_implementation1 x1 stk)
				|	declarative_part, `Begin`, package_initialization
					(red_package_implementation2 x1 x2 x3 x4 stk);

€package_initialization› =	sequence_of_statements
					(red_package_initialization x1 stk);
=TEX
SPARK manual 7.4:
=DUMPMORE dtd503.grm.txt

€private_type_declaration› =	`Type`, `Identifier`, `Is`, `Private`, `Semi`
					(red_private_type_declaration1 x1 x2 x3 x4 x5 stk)
				|	`Type`, `Identifier`, `Is`, `Limited`, `Private`, `Semi`
					(red_private_type_declaration2 x1 x2 x3 x4 x5 x6 stk);

€deferred_constant_declaration› =	identifier_list, `Colon`, `Constant`, name, `Semi`
					(red_deferred_constant_declaration x1 x2 x3 x4 x5 stk);
=TEX
SPARK manual 8.5:
=DUMPMORE dtd503.grm.txt

€renaming_declaration› =	`Function`, operator_symbol, formal_part,
					`Return`, name,
					`Renames`,
					`Identifier`, `Dot`, operator_symbol, `Semi`
					(red_renaming_declaration1
						x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 stk)
			|	subprogram_specification,
					`Renames`,
					`Identifier`, `Dot`, `Identifier`, `Semi`
					(red_renaming_declaration2 x1 x2 x3 x4 x5 x6 stk);

=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SPARK manual 10.1:
=DUMPMORE dtd503.grm.txt

€compilation› =	k_slot
					(red_compilation1 stk)
		|	compilation_unit
					(red_compilation2 x1 stk)
		|	compilation_unit, compilation
					(red_compilation3 x1 x2 stk);
=TEX
SPARK manual 10.1:
=DUMPMORE dtd503.grm.txt

€compilation_unit› =	context_clause, library_unit
					(red_compilation_unit1 x1 x2 stk)
		|	context_clause, secondary_unit
					(red_compilation_unit2 x1 x2 stk);

€library_unit› =	package_declaration
					(red_library_unit1 x1 stk)
		|	main_program
					(red_library_unit2 x1 stk);

€secondary_unit› =	library_unit_body
					(red_secondary_unit1 x1 stk)
		|	subunit
					(red_secondary_unit2 x1 stk);

€library_unit_body› =	package_body
					(red_library_unit_body x1 stk);

€main_program› =	subprogram_body
					(red_main_program x1 stk);
=TEX
SPARK manual 10.1.1:
=DUMPMORE dtd503.grm.txt

€context_clause› =
					(red_context_clause1 stk)
		|	with_clause
					(red_context_clause2 x1 stk);
=TEX
In \Source, the with clause production refers to a simple name list. Since simple names are identifiers, here an identifier list is used instead. The production for simple name list is dispensed with.

SPARK manual 10.1.1:
=DUMPMORE dtd503.grm.txt
€with_clause› =	`With`, identifier_list, `Semi`
					(red_with_clause x1 x2 x3 stk);
=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SPARK manual 10.2:
=DUMPMORE dtd503.grm.txt
€body_stub› =		procedure_specification, `Is`, `Separate`, `Semi`
					(red_body_stub1 x1 x2 x3 x4 stk)
		|	function_specification, `Is`, `Separate`, `Semi`
					(red_body_stub2 x1 x2 x3 x4 stk)
		|	`Package`, `BBody`, `Identifier`, `Is`, `Separate`, `Semi`
					(red_body_stub3 x1 x2 x3 x4 x5 x6 stk);

€subunit› =	`Separate`, `Ord`, name, `Crd`, proper_body
					(red_subunit x1 x2 x3 x4 x5 stk);
=TEX
SPARK manual 13.1:
=DUMPMORE dtd503.grm.txt

€representation_clause› =	type_representation_clause, address_clause
					(red_representation_clause x1 x2 stk);

€type_representation_clause› =	length_clause
					(red_type_representation_clause1 x1 stk)
				|	enumeration_representation_clause
					(red_type_representation_clause2 x1 stk)
				|	record_representation_clause
					(red_type_representation_clause3 x1 stk);
=TEX
SPARK manual 13.2:
=DUMPMORE dtd503.grm.txt
€length_clause› =	`For`, attribute, `Use`, simple_expression, `Semi`
					(red_length_clause x1 x2 x3 x4 x5 stk);
=TEX
SPARK manual 13.3:
=DUMPMORE dtd503.grm.txt
€enumeration_representation_clause› =	`For`, `Identifier`, `Use`, aggregate, `Semi`
					(red_enumeration_representation_clause x1 x2 x3 x4 x5 stk);
=TEX
SPARK manual 13.4:
=DUMPMORE dtd503.grm.txt

€record_representation_clause› =
			`For`, `Identifier`,
			`Use`,
			`Record`,
				alignment_opt, component_pack,
			`End`, `Record`, `Semi`
					(red_record_representation_clause
						x1 x2 x3 x4 x5 x6 x7 x8 x9 stk);
=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SPARK manual 13.4:
=DUMPMORE dtd503.grm.txt
€alignment_opt› =
					(red_alignment_opt1 stk)
		|	`At`, `Mod`, simple_expression, `Semi`
					(red_alignment_opt2 x1 x2 x3 x4 stk);
=TEX
=DUMPMORE dtd503.grm.txt
€component_pack› =	component_clause
					(red_component_pack1 x1 stk)
		|	component_clause, component_pack
					(red_component_pack2 x1 x2 stk);
=TEX
SPARK manual 13.4:
=DUMPMORE dtd503.grm.txt
€component_clause› =	name, `At`, simple_expression, `RRange`, sr_expression, `Semi`
					(red_component_clause x1 x2 x3 x4 x5 x6 stk);
=TEX
SPARK manual 13.5:
=DUMPMORE dtd503.grm.txt
€address_clause› =	`For`, `Identifier`, `Use`, `At`, simple_expression, `Semi`
					(red_address_clause x1 x2 x3 x4 x5 x6 stk);
=TEX

\section{GENERATING THE TABLES}
=SH
(
poly `arch`slrp.db >dtd503.grm.run <<!
Slrp.slrp{
	in_file="dtd503.grm.txt",
	out_file="dtd503.grm.sml",
	logfile="dtd503.grm.log",
	eos="Eos",
	loglevel=2};
PolyML.quit();
!
)
=TEX
=TEX
\section{PARSER}
=TEX
\subsection{Context Free Parsing}
=DOC
val €cn_parser› : CNTypes.CN_LEX_ITEM list -> unit
=DESCRIBE
This is the context-free parser for Compliance Notation. It maps the lists of
tokens output by the CN lexical analyser onto datatypes representing
the CN abstract syntax.
=FAILURE
503000	Syntax error
503001	Syntax error in: ?0 <?> ?1
503003	?0 is not expected after ?1
503004	?0 is not a valid sequence or set type name
503011	Lexical analysis error: ?0 is not allowed here in Compliance Notation
503201	Parser internal error: ?0
=ENDDOC
=TEX
=SML
end; (* of signature CNParser *)
=TEX
\section{TEST POLICY}
The functions in this document are to be tested according to the
criteria identified in \cite{ISS/HAT/DAZ/PLN003}.

\section{ISSUES ARISING}

\begin{enumerate}
\item{Why is the range/simple expression production in \Source not a range/attribute production?}
\item{In dec, the package declaration production does not have an optional renaming declaration as in the SPARK Manual 3.9.}
\item{Declarative part in the SPARK Manual (3.9) can be empty. That in \Source cannot.}
\item{In basic declarative clause, proof declarations in SM 3.9 are omitted in \Source.}
\end{enumerate}

\newpage
\section{COMPLIANCE ARGUMENT}

\begin{table}
\center
\begin{tabular}{||l|l|l|l||}\hline
BNF	& N(ew)/C(hanged) & Description	& Ref.	\\
Production	& /D(eleted)	& 		&	\\ \hline\hline
index constraint & D & &\\\hline
type mark list & D &  &\\\hline
prefix & D &  &\\\hline
attribute designator & D &  &\\\hline
name exp list & D &  &\\\hline
name exp & D &  &\\\hline
type conversion & D &  &\\\hline
function call & D &  &\\\hline
named parameter association & D &  &\\\hline
formal parameter & D &  &\\\hline
\end{tabular}
\caption{Schedule of Reviews}
\label{ScheduleOfReviewsX}
\end{table}

\begin{table}
\center
\begin{tabular}{||l|l|l|l||}\hline
BNF	& N(ew)/C(hanged) & Description	& Ref.	\\
Production	& /D(eleted)	& 		&	\\ \hline\hline
index constraint & C & name list &\\\hline
name list & N &  &\\\hline
attribute & C &  &\\\hline
primary & C &  &\\\hline
specification statement & N &  &\\\hline
label & N &  &\\\hline
abstract expression & N &  &\\\hline
till opt & C &  &\\\hline
procedure call statement & C &  &\\\hline
parameter association & C &  &\\\hline
\end{tabular}
\caption{Schedule of Reviews}
\label{ScheduleOfReviews}
\end{table}


\small
\twocolumn[\section{INDEX}]
\printindex

\end{document}



