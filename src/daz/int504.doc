% %Z% $Date$ $Revision$ $RCSfile$

=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Z Documents Test Material}  %% Mandatory field
\def\TPPheadtitle{Z Documents Test Material}
\TPPref{ISS/HAT/DAZ/INT504}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}  %% Mandatory field (with sensible default)
\TPPstatus{Informal}
%\TPPstatus{Informal}
\TPPtype{Technical}
%\TPPkeywords{HOL}
\TPPauthor{A.C.~Hayward & HAT Team}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & WIN01}
\TPPabstract{%
This document gives four compliance notation scripts.  The Z documents generated by these scripts are checked against the original scripts.
}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library}}

%\TPPclass{CLASSIFICATION}
\newfont{\icllogo}{icllogo50}
\def\TPPheadlhs{$\vcenter{\halign{##\cr\icllogo ICL\cr}}$}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\pagebreak
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'

\begin{description}

\item[Issue 1.1 (\FormatDate{94/12/14})] Initial Draft.

\end{description}

\subsection{Changes Forecast}

None.

\pagebreak

\section{GENERAL}

\subsection{Scope}

This document contains test data for the Compliance Tool as specified in \cite{ISS/HAT/DAZ/HLD501}.

\subsection{Introduction}

This document contains four compliance notation scripts.  These are loaded into the compliance tool and Z documents generated.  The Z documents are then reloading into the tool and compared with the original scripts.

\section{Setting up of the enivronment}

Set up flags so the compilance tool works correctly .

=SML
set_flags [("z_type_check_only", false),("z_use_axioms", true)];
=TEX

Load the test harness.

=SML
use_file "dtd013";
use_file "imp013";
=TEX

\section{Useful functions}

Functions for recording some statistics of theories.

=SML
type theory_stats = {np : int, ng : int, na : int, nd : int, nc : int};
local
    fun noof_parents thy = (length o get_parents) thy;
    fun noof_global thy = (length o get_consts) thy;
    fun noof_axioms thy = (length o get_axioms) thy;
    fun noof_defns thy = (length o get_defns) thy;
    fun noof_conjectures thy = (length o get_conjectures) thy;
in
    fun get_theory_stats (thy : string) : theory_stats =
    let
        val np = noof_parents thy;
        val ng = noof_global thy;
        val na = noof_axioms thy;
        val nd = noof_defns thy;
        val nc = noof_conjectures thy;
    in
        {np = np, ng = ng, na = na, nd = nd, nc = nc}
    end;
end;
=TEX

\section{First literal script}

=SML
open_theory "cn";

new_script "lit1";

¹CN
§ package PACK_P spec ¢	(1)
°

¹CN
§ main procedure ¢		(2)
°

¹CN
(1) é

package PACK_P is
   I : INTEGER;
   type COLOUR is (RED, BLUE, GREEN);
   procedure SQRT (X : INTEGER; Y : out INTEGER)

    „ Y [X ¾ 0, Y ** 2 ¼ X < (Y + 1) ** 2];

   procedure CUBE_ROOT (N : in out INTEGER)

    „ N [N ¾ 0, N ** 3 ¼ N‰0 < (N + 1) ** 3];

   function NEXT_COLOUR (C : COLOUR) return COLOUR

    „
    [true,
    C ½ COLOURvLAST ±
    NEXT_COLOUR(C) = COLOURvSUCC(C)
    ²
    C = COLOURvLAST ±
    NEXT_COLOUR(C) = COLOURvFIRST];

   function PLUS_ONE (X : INTEGER) return INTEGER;

end PACK_P;
°

¹CN
(2) é

with PACK_P;
procedure MAIN is
   C : PACK_P.COLOUR;
   type PERSON is
   record
      AGE : INTEGER;
      EYES : PACK_P.COLOUR;
   end record;
   JACK : PERSON;
begin
      PACK_P.CUBE_ROOT(PACK_P.I);

       „ C, JACK [true, C = PACK_PoRED]

      C := PACK_P.BLUE;
end MAIN;
°

¹CN
Ã

JACK := PERSON'(25, PACK_P.GREEN);
C := PACK_P.NEXT_COLOUR(JACK.EYES);
°
=TEX

\section{Second literal script}

=SML
open_theory "cn";

new_script"lit2";

¹CN
§ package PACK_P body ¢	(1)
°

¹CN
(1) é

package body PACK_P is
   HAIR : COLOUR;
   J, K : INTEGER;
   type ARR_COLOUR is array(COLOUR) of COLOUR;
   NEXT_COL : constant ARR_COLOUR :=
                 ARR_COLOUR'(BLUE, GREEN, RED);
   function PLUS_TWO (L : INTEGER) return INTEGER

   „ [true, PLUS_TWO(L) = L + 2]

   is
   begin
      return L + 2;
   end PLUS_TWO;
   procedure SQRT (X : INTEGER; Y : out INTEGER)

    „ Y [X ¾ 0, Y ** 2 ¼ X < (Y + 1) ** 2]

   is separate;
   procedure CUBE_ROOT (N : in out INTEGER)

    „ N, J [N ¾ 0, N ** 3 ¼ N‰0 < (N + 1) ** 3]

   is
      L : INTEGER;
   begin

      „ N, J, L [N ¾ 0, N ** 3 ¼ N‰0 < (N + 1) ** 3]	(2)

      L := PLUS_TWO(L);
   end CUBE_ROOT;

   § function NEXT_COLOUR body ¢				(3)

   function PLUS_ONE (X : INTEGER) return INTEGER

    „ [true, PLUS_ONE(X) = X + 1]

   is
      L : INTEGER;

        § procedure PLUS_FOUR body ¢				(4)

   begin

        „ L [true, PLUS_ONE(X) = X + 1]			(5)

   end PLUS_ONE;
end PACK_P;
°

¹CN
(3) é

function NEXT_COLOUR (C : COLOUR) return COLOUR

„
[true,
C ½ COLOURvLAST ±
NEXT_COLOUR(C) = COLOURvSUCC(C)
²
C = COLOURvLAST ±
NEXT_COLOUR(C) = COLOURvFIRST]

is separate;
°

¹CN
(4) é

procedure PLUS_FOUR (A : INTEGER; B : out INTEGER)

„ B [true, B = A + 4]

is
begin
   B := A + 4;
end PLUS_FOUR;
°

¹CN
(5) Ã
PLUS_FOUR(X, L);
L := L - 3;
return L;
°
=TEX

\section{Third literal script}

=SML
open_theory "cn";

new_script"lit3";

¹CN
§ procedure PACK_P.SQRT body ¢	(1)
°

¹CN
(1) é

separate (PACK_P)
procedure SQRT (X : INTEGER; Y : out INTEGER)

„ Y [X ¾ 0, Y ** 2 ¼ X < (Y + 1) ** 2]

is
   LO : INTEGER;

   § local vars ¢		(2)

begin
   LO := 0;

    „ LO [X ¾ 0 ± LO = 0, LO ** 2 ¼ X < (LO + 1) ** 2]

   Y := LO;
end SQRT;
°

¹CN
(2) é

HI : INTEGER;
°

¹CN
Ã
„ LO, HI [X ¾ 0 ± LO = 0, LO ** 2 ¼ X < (LO + 1) ** 2]
°

¹CN
Ã

HI := X + 1;

till ûLO ** 2 ¼ X < (LO + 1) ** 2ý

loop

    „ LO, HI [LO ** 2 ¼ X < HI ** 2, LO ** 2 ¼ X < HI ** 2]

end loop;
°

¹CN
Ã

exit when LO + 1 = HI;

„ LO, HI [LO ** 2 ¼ X < HI ** 2, LO ** 2 ¼ X < HI ** 2]
°
=TEX

\section{Fourth literal script}

=SML
open_theory "cn";

new_script"lit4";

¹CN
separate (PACK_P)
function NEXT_COLOUR (C : COLOUR) return COLOUR
„
[true,
C ½ COLOURvLAST ±
NEXT_COLOUR(C) = COLOURvSUCC(C)
²
C = COLOURvLAST ±
NEXT_COLOUR(C) = COLOURvFIRST]

is
   C1 : COLOUR;
begin

  „ C1
  [true,
  C ½ COLOURvLAST ±
  NEXT_COLOUR(C) = COLOURvSUCC(C)
  ²
  C = COLOURvLAST ±
  NEXT_COLOUR(C) = COLOURvFIRST]

end NEXT_COLOUR;
°

¹CN
Ã

C1 := C;
C1 := NEXT_COL(C1);
return C1;
°
=TEX

\section{Z document generation and tests}

Save copies of the theory statistics.

=SML
val lit1_stats = get_theory_stats "lit1";
val lit2_stats = get_theory_stats "lit2";
val lit3_stats = get_theory_stats "lit3";
val lit4_stats = get_theory_stats "lit4";
=TEX

Output the Z documents to disk.

=SML
output_z_document {script="lit1", out_file="int4.lit1.sml"};
output_z_document {script="lit2", out_file="int4.lit2.sml"};
output_z_document {script="lit3", out_file="int4.lit3.sml"};
output_z_document {script="lit4", out_file="int4.lit4.sml"};
=TEX

Delete all the theories we've created.

=SML
open_theory "cn";
delete_theory "lit1";
delete_theory "lit2";
delete_theory "lit3";
delete_theory "lit4";
delete_theory "PACK_Pspec";
delete_theory "PACK_PoSQRTstub";
delete_theory "PACK_PoNEXT_COLOURstub";
=TEX


Reload the Z documents.

=SML
open_theory "cn";
use_file "int4.lit1";
open_theory "cn";
use_file "int4.lit2";
open_theory "cn";
use_file "int4.lit3";
open_theory "cn";
use_file "int4.lit4";
=TEX

Check the theory statistics are correct.

=SML
store_mt_results_show mt_run [
    ("lit1", get_theory_stats, "lit1", lit1_stats),
    ("lit2", get_theory_stats, "lit2", lit2_stats),
    ("lit3", get_theory_stats, "lit3", lit3_stats),
    ("lit4", get_theory_stats, "lit4", lit4_stats)];
=TEX

\section{EPILOGUE}
=SML
diag_line (summarize_mt_results());
=TEX


\twocolumn[\section{INDEX OF DEFINED TERMS}]
\printindex
\end{document}
=IGN
