=IGN
********************************************************************************
int504.doc: this file is part of the PPDaz system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
% @(#) 95/01/05 1.5 int504.doc
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Z Documents Test Material}  %% Mandatory field
\def\TPPheadtitle{Z Documents Test Material}
\TPPref{ISS/HAT/DAZ/INT504}  %% Mandatory field
\def\SCCSversion{$Revision: 1.19 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2006/09/16 14:05:32 $%
}}  %% Mandatory field (with sensible default)
\TPPstatus{Informal}
%\TPPstatus{Informal}
\TPPtype{Technical}
%\TPPkeywords{HOL}
\TPPauthor{A.C.~Hayward & HAT Team}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & WIN01}
\TPPabstract{%
This document gives four compliance notation scripts.  The Z documents generated by these scripts are checked against the original scripts.
}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library}}

%\TPPclass{CLASSIFICATION}
\def\TPPheadlhs{Lemma 1 Ltd.}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\pagebreak
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'

\begin{description}

\item[Issue 1.1 (1994/12/14) (\FormatDate{94/12/14})] Initial Draft.
\item[Issue 1.7 (1997/05/22)] Tidying up.
\item[Issue 1.8 (1997/07/04)-1.9 (1997/07/21)] Reacting to IUCT changes.
\item[Issue 1.10 (2002/08/23)] Removed use of ICL logo font.
\item[Issue 1.11 (2002/10/17)] Copyright and banner updates for open source release.
\item[Issue 1.12 (2002/10/17)] DAZ-specific updates to banner for open source release
\item[Issue 1.13 (2002/10/17)] DAZ-specific updates to banner for open source release
\item[Issue 1.14 (2004/02/07)] The SPARK program is now referred to as the Ada program.
\item[Issue 1.15 (2005/05/28)] Compliance Notation reserved words are now prefixed by a dollar sign.
\item[Issue 1.16 (2006/03/23)] Allowed for enhancements 117 and 118.
\item[Issue 1.17 (2006/03/28)] Allowed for automated state management.
\item[Issue 1.18 (2006/07/21)] Accommodated enhancement 162 --- context theories.
\item[Issue 1.19 (2006/09/16)] Allowed for new {\em open\_scope} command.
\item[Issue 1.20 (2006/09/19)] Allowed for enhancement 165.
\item[2014/07/23]
Augmented old RCS version numbers in the changes history with dates.
Dates will be used in place of version numbers in future.

%%%% END OF CHANGES HISTORY %%%%
\end{description}

\subsection{Changes Forecast}

None.

\pagebreak

\section{GENERAL}

\subsection{Scope}

This document contains test data for the Compliance Tool as specified in \cite{ISS/HAT/DAZ/HLD504}.

\subsection{Introduction}

This document contains four compliance notation scripts.  These are loaded into the compliance tool and Z documents generated.  The Z documents are then reloading into the tool and compared with the original scripts.

\section{LITERATE SCRIPTS}

\subsection{Setting up of the enivronment}

Set up flags so the compilance tool works correctly .

=SML
set_flags [("z_type_check_only", false),("z_use_axioms", true)];
=TEX

Load the test harness.

=SML
use_file "dtd013";
use_file "imp013";
=TEX

\section{Useful functions}
=SML
fun clean_up () = (
        let     val thys = (get_descendants "cn" less "cn")
                                        diff get_cache_theories();
                fun del_thy thy = (force_delete_theory thy handle Fail _ => ());
        in      map del_thy thys
        end;    ()
);
=TEX

Functions for recording some statistics of theories.

=SML
type theory_stats = {np : int, ng : int, na : int, nd : int, nc : int};
local
    fun noof_parents thy = (length o get_parents) thy;
    fun noof_global thy = (length o get_consts) thy;
    fun noof_axioms thy = (length o get_axioms) thy;
    fun noof_defns thy = (length o get_defns) thy;
    fun noof_conjectures thy = (length o get_conjectures) thy;
in
    fun get_theory_stats (thy : string) : theory_stats =
    let
        val np = noof_parents thy;
        val ng = noof_global thy;
        val na = noof_axioms thy;
        val nd = noof_defns thy;
        val nc = noof_conjectures thy;
    in
        {np = np, ng = ng, na = na, nd = nd, nc = nc}
    end;
end;
=TEX

\subsection{First Literate Script}

=SML
clean_up();
open_theory "cn";
new_script {name="PACK_P", unit_type="spec"};
=TEX

¹CN
§ package PACK_P spec ¢	(1)
°

¹CN
(1) é
package PACK_P is
   I : INTEGER;
   type COLOUR is (RED, BLUE, GREEN);
   procedure SQRT (X : INTEGER; Y : out INTEGER)

    „ Y [X ¾ 0, Y ** 2 ¼ X < (Y + 1) ** 2];

   procedure CUBE_ROOT (N : in out INTEGER)

    „ N [N ¾ 0, N ** 3 ¼ N‰0 < (N + 1) ** 3];

   function NEXT_COLOUR (C : COLOUR) return COLOUR

    ˜
    [true,
    C ½ PACK_PoCOLOURvLAST ±
    PACK_PoNEXT_COLOUR(C) = PACK_PoCOLOURvSUCC(C)
    ²
    C = PACK_PoCOLOURvLAST ±
    PACK_PoNEXT_COLOUR(C) = PACK_PoCOLOURvFIRST];

   function PLUS_ONE (X : INTEGER) return INTEGER;

end PACK_P;
°

=SML
output_z_document {script="PACK_P'spec", out_file="int504A1.sml"};
output_ada_program {script="-", out_file="int504A1.ada"};
new_script{name = "MAIN", unit_type="proc"};

¹CN
§ main procedure ¢		(2)
°

¹CN
(2) é
with PACK_P;
procedure MAIN is
   C : PACK_P.COLOUR;
   type PERSON is
   record
      AGE : INTEGER;
      EYES : PACK_P.COLOUR;
   end record;
   JACK : PERSON;
begin
      PACK_P.CUBE_ROOT(PACK_P.I);

       „ C, JACK [true, C = PACK_PoRED]

      C := PACK_P.BLUE;
end MAIN;
°

¹CN
Ã
JACK := PERSON'(25, PACK_P.GREEN);
C := PACK_P.NEXT_COLOUR(JACK.EYES);
°

=SML
output_z_document {script="MAIN'proc", out_file="int504A2.sml"};
output_ada_program {script="MAIN'proc", out_file="int504A2.ada"};
=TEX

\subsection{Second literate script}

=SML
open_theory "cn";
new_script {name="PACK_P", unit_type="body"};
=TEX

¹CN
§ package PACK_P body ¢	(1)
°

¹CN
(1) é
package body PACK_P is
   HAIR : COLOUR;
   J, K : INTEGER;
   type ARR_COLOUR is array(COLOUR) of COLOUR;
   NEXT_COL : constant ARR_COLOUR :=
                 ARR_COLOUR'(BLUE, GREEN, RED);
   function PLUS_TWO (L : INTEGER) return INTEGER

   ˜ [true, PLUS_TWO(L) = L + 2]

   is
   begin
      return L + 2;
   end PLUS_TWO;
   procedure SQRT (X : INTEGER; Y : out INTEGER)

    „ Y [X ¾ 0, Y ** 2 ¼ X < (Y + 1) ** 2]

   is separate;
   procedure CUBE_ROOT (N : in out INTEGER)

    „ N, J [N ¾ 0, N ** 3 ¼ N‰0 < (N + 1) ** 3]

   is
      L : INTEGER;
   begin

      „ N, J, L [N ¾ 0, N ** 3 ¼ N‰0 < (N + 1) ** 3]	(2)

      L := PLUS_TWO(L);
   end CUBE_ROOT;

   § function NEXT_COLOUR body ¢				(3)

   function PLUS_ONE (X : INTEGER) return INTEGER

    ˜ [true, PLUS_ONE(X) = X + 1]

   is
      L : INTEGER;

        § procedure PLUS_FOUR body ¢				(4)

   begin

        „ L [true, PLUS_ONE(X) = X + 1]			(5)

   end PLUS_ONE;
end PACK_P;
°

¹CN
(3) é

function NEXT_COLOUR (C : COLOUR) return COLOUR

˜
[true,
C ½ PACK_PoCOLOURvLAST ±
NEXT_COLOUR(C) = PACK_PoCOLOURvSUCC(C)
²
C = PACK_PoCOLOURvLAST ±
NEXT_COLOUR(C) = PACK_PoCOLOURvFIRST]

is separate;
°

=SML
open_scope "PACK_P.PLUS_ONE";
¹CN
(4) é

procedure PLUS_FOUR (A : INTEGER; B : out INTEGER)

„ B [true, B = A + 4]

is
begin
   B := A + 4;
end PLUS_FOUR;
°

¹CN
(5) Ã
PLUS_FOUR(X, L);
L := L - 3;
return L;
°

=SML
output_z_document {script="PACK_P'body", out_file="int504B.sml"};
output_ada_program {script="PACK_P'body", out_file="int504B.ada"};
=TEX

\subsection{Third literate script}

=SML
open_theory "cn";
new_script{name="PACK_P.SQRT", unit_type="proc"};
=TEX

¹CN
§ procedure PACK_P.SQRT body ¢	(1)
°

¹CN
(1) é

separate (PACK_P)
procedure SQRT (X : INTEGER; Y : out INTEGER)

„ Y [X ¾ 0, Y ** 2 ¼ X < (Y + 1) ** 2]

is
   LO : INTEGER;

   § local vars ¢		(2)

begin
   LO := 0;

    „ LO [X ¾ 0 ± LO = 0, LO ** 2 ¼ X < (LO + 1) ** 2]

   Y := LO;
end SQRT;
°

¹CN
(2) é

HI : INTEGER;
°

¹CN
Ã
„ LO, HI [X ¾ 0 ± LO = 0, LO ** 2 ¼ X < (LO + 1) ** 2]
°

¹CN
Ã

HI := X + 1;

$till ûLO ** 2 ¼ X < (LO + 1) ** 2ý

loop

    „ LO, HI [LO ** 2 ¼ X < HI ** 2, LO ** 2 ¼ X < HI ** 2]

end loop;
°

¹CN
Ã

exit when LO + 1 = HI;

„ LO, HI [LO ** 2 ¼ X < HI ** 2, LO ** 2 ¼ X < HI ** 2]
°

=SML
output_z_document {script="PACK_PoSQRT'proc", out_file="int504C.sml"};
output_ada_program {script="PACK_PoSQRT'proc", out_file="int504C.ada"};
=TEX

\subsection{Fourth literate script}

=SML
open_theory "cn";
new_script{name="PACK_P.NEXT_COLOUR", unit_type="func"};

¹CN
separate (PACK_P)
function NEXT_COLOUR (C : COLOUR) return COLOUR
˜
[true,
C ½ PACK_PoCOLOURvLAST ±
NEXT_COLOUR(C) = PACK_PoCOLOURvSUCC(C)
²
C = PACK_PoCOLOURvLAST ±
NEXT_COLOUR(C) = PACK_PoCOLOURvFIRST]

is
   C1 : COLOUR;
begin

  „ C1
  [true,
  C ½ PACK_PoCOLOURvLAST ±
  NEXT_COLOUR(C) = PACK_PoCOLOURvSUCC(C)
  ²
  C = PACK_PoCOLOURvLAST ±
  NEXT_COLOUR(C) = PACK_PoCOLOURvFIRST]

end NEXT_COLOUR;
°

¹CN
Ã

C1 := C;
C1 := NEXT_COL(C1);
return C1;
°

=SML
output_z_document {script="PACK_PoNEXT_COLOUR'func", out_file="int504D.sml"};
output_ada_program {script="PACK_PoNEXT_COLOUR'func", out_file="int504D.ada"};
=TEX

\section{CHECKS}

Save copies of the theory statistics.

=SML
val PACK_Pspec_stats = get_theory_stats "PACK_P'spec";
val MAINproc_stats = get_theory_stats "MAIN'proc";
val PACK_Pbody_stats = get_theory_stats "PACK_P'body";
val PACK_PoSQRTproc_stats = get_theory_stats "PACK_PoSQRT'proc";
val PACK_PoNEXT_COLOURfunc_stats = get_theory_stats "PACK_PoNEXT_COLOUR'func";
val PACK_Pspec_stats = get_theory_stats "PACK_P'spec";
val PACK_PoSQRTstub_stats = get_theory_stats "PACK_PoSQRT'context";
val PACK_PoNEXT_COLOURstub_stats = get_theory_stats "PACK_PoNEXT_COLOUR'context";
=TEX

Delete all the theories we've created.

=SML
open_theory "cn";
clean_up();
=TEX

Reload the Z documents.

=SML
use_file "int504A1";
use_file "int504A2";
use_file "int504B";
use_file "int504C";
use_file "int504D";
=TEX

Check the theory statistics are correct.

=SML
store_mt_results_show mt_run [
    ("MAINproc", get_theory_stats, "MAIN'proc", MAINproc_stats),
    ("PACK_Pbody", get_theory_stats, "PACK_P'body", PACK_Pbody_stats),
    ("PACK_PoSQRTproc", get_theory_stats, "PACK_PoSQRT'proc", PACK_PoSQRTproc_stats),
    ("PACK_PoNEXT_COLOURfunc", get_theory_stats, "PACK_PoNEXT_COLOUR'func", PACK_PoNEXT_COLOURfunc_stats),
    ("PACK_Pspec", get_theory_stats, "PACK_P'spec", PACK_Pspec_stats),
    ("PACK_PoSQRTstub", get_theory_stats, "PACK_PoSQRT'context", PACK_PoSQRTstub_stats),
    ("PACK_PoNEXT_COLOURstub", get_theory_stats, "PACK_PoNEXT_COLOUR'context", PACK_PoNEXT_COLOURstub_stats)];
=TEX

\section{EPILOGUE}
=SML
diag_line (summarize_mt_results());
=TEX


\twocolumn[\section{INDEX OF DEFINED TERMS}]
\printindex
\end{document}
=IGN
