=IGN
********************************************************************************
int524.doc: this file is part of the PPDaz system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
%%%%% YOU MAY WANT TO CHANGE POINT SIZE IN THE FOLLOWING:
\documentclass[a4paper,12pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{epsf}

%%%%% YOU WILL USUALLY WANT TO CHANGE THE FOLLOWING TO SUIT YOU AND YOUR DOCUMENT:

\def\Title{ Compliance Tool --- 2.7.2 to 2.7.3 Enhancement Tests}

\def\Abstract{\begin{center}
{\bf Abstract}\par\parbox{0.7\hsize}
{\small This document provides integration tests to support the enhancements developed 
under the programme of enhancements to version 2.7.2 of the Compliance Tool carried out during  early 2004.}
\end{center}}

\def\Reference{LEMMA1/DAZ/INT524}

\def\Author{R.D. Arthan}

\def\EMail{{\tt rda@lemma-one.com}}

\def\Phone{+44 118 958 4409}

\def\Fax{+44 118 956 1920}

%%%%% YOU MAY WANT TO CHANGE THE FOLLOWING TO GET A NICE FRONT PAGE:
\def\FrontPageTitle{ {\huge \Title } }
\def\FrontPageHeader{\raisebox{16ex}{\begin{tabular}[t]{c}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year\\\strut\\
\end{tabular}}}
\begin{centering}



\end{centering}

%%%%% THE FOLLOWING DEFAULTS WILL GENERALLY BE RIGHT:

\def\Version{$Revision: 1.12 $%
}
\def\Date{\FormatDate{$Date: 2006/03/28 16:48:35 $%
}}

%%%%% NOW BEGIN THE DOCUMENT AND MAKE THE FRONT PAGE

\begin{document}
\underscoreoff
\headsep=0mm
\FrontPage
\headsep=10mm

%%%%% STANDARD RED-TAPE SECTIONS (MAY WANT TO INTERLEAVE SOME \newpage COMMANDS IN THESE)

%%%%% CONTENTS:

\subsection{Contents}

\tableofcontents

%%%%% REFERENCES:

\subsection{References}

\bibliographystyle{fmu}

%%%%% CHANGE THE FOLLOWING AS NECESSARY (E.G., TO PICK UP daz.bib):
h{\raggedright
\bibliography{fmu,daz}
}
%%%%% CHANGES HISTORY:
\subsection{Changes History}
\begin{description}
\item[Issues 1.1]  Test for ƒ
\item[Issue 1.2] Test for undeclared labels.
\item[Issue 1.3] Empty private parts.
\item[Issue 1.4] More test for 2.7.3 features.
\item[Issue 1.5] Tests for fix for bug with use clauses and record selections.
\item[Issue 1.6] Updates for reformed environments.
\item[Issue 1.7] Added test for treatment of spec env  in use clauses.
\item[Issue 1.8] Added test for multiple use clauses for the same package.
\item[Issue 1.10] Allowed for automated state management.
\item[Issues 1.11, 1.12] Fully allowed for enhancement 118.
\item[Issue 1.13] Allowed for insistence on canonical names in Z under enhancement 117
\end{description}

%%%%%  CHANGES FORECAST:

\subsection{Changes Forecast}

None.

%%%%% DISTRIBUTION LIST

\subsection{Distribution}
\begin{center}
\begin{tabular}{ll}
Rob Arthan & Lemma 1
\end{tabular}
\end{center}


\section{INTRODUCTION}\label{INTRODUCTION}
This document is intended to provide integration tests to cover
the enhancements undertaken under the programme
of enhancements carried out in early 2004. See \cite{LEMMA1/HOL/REQ002}
for the detailed specification of the enhancements.

The interim releases of the Compliance Tool have been
fully regression-tested and the new features have been module-
and integration-tested to a certain extent by the existing tests.
This document provides specific integration tests to
complete the coverage. 

It was noted during this round of enhancements that the example
material in  \cite{ISS/HAT/DAZ/USR503} and  \cite{ISS/HAT/DAZ/WRK513}
was only being tested implicitly during the documentation build. The make file
entry for these tests includes those documents to ensure it is run when tests are run as well.
The make file has subsequently been extended to process the example in \cite{ISS/HAT/DAZ/USR501}.

\section{PREAMBLE}
Load the test harness.

=SML
use_file "dtd013";
use_file "imp013";
=TEX
Function to clean up before doing a test.

=SML
val reset_cn = pending_reset_cn_state();
fun clean_up () = (
        let     val thys = (get_descendants "cn" less "cn"
                                        diff get_cache_theories())
                fun del_thy thy = (force_delete_theory thy handle Fail _ => ());
	val err_scrs =map fst (CNZGenerator.get_exception_logs());
        in      map del_thy thys;
	map delete_exception_log err_scrs;
	reset_cn();
	open_theory"cn";
	set_pc "cn1"
        end;    ()
);
=TEX
For batch use turn off subgoal package output:
=SML
set_flag("subgoal_package_quiet", not(ExtendedIO.is_term_in std_in));
=TEX
\section{THE TESTS}
\subsection{R0013: U as a variable name.} \label{R0013}

=SML
clean_up();
new_script{name = "P'proc"};

¹CN
 procedure p(u : integer; x : out integer)
 is
 begin
  „ X [U > X ± X < 0]
 end p;
°

¹CN
  Ã if u <= 0 then x := u -  1; else x := -1; end if;
°
=TEX
=SML
set_pc"cn1";
=TEX
=SML
set_goal([], get_conjecture"-""vc_1_1");
a(cn_vc_simp_tac[]);
a(PC_T1 "z_lin_arith" prove_tac[]);
store_mt_results
mt_run
 [("R0013.1.1", fun_true o pop_thm , (), true)];
=TEX
=SML
set_goal([], get_conjecture"-""vc_1_2");
a(cn_vc_simp_tac[]);
a(PC_T1 "z_lin_arith" prove_tac[]);
store_mt_results
mt_run
 [("R0013.1.2", fun_true o pop_thm , (), true)];
=TEX
\subsection{R0060: Invalid label error messages.} \label{R0060}
The correct handling of nested packages is checked in INT519.

=SML
clean_up();
new_script{name = "P'proc"};
¹CN
procedure P

  „ [ true ]

is
begin

  „ [ true ]    (1)

end P;
°

¹CN
 (1) Ã

  null;
°
=SML
fun r0060_1() =
¹CN
 (1) Ã

  null;
°
=SML
store_mt_results
mt_run_fail
 [("R0060.1.1", r0060_1 , (),  gen_fail_msg "CN-Parser" 504012 ["1"])];
=TEX
\subsection{R0TBD1: Empty Private Parts.} \label{R0TBD1}

=SML
clean_up();
new_script{name = "PACK'spec"};
¹CN
 package pack is
   C : constant INTEGER;
 private
   § private part k-slot ¢			( 3 )
 end pack;
°
¹CN
 (3) é
°
print_ada_program"-";
=TEX
\subsection{R0TBD2: Empty Private Parts.} \label{R0TBD2}

=SML
clean_up();
new_script{name = "P1'spec"};
¹CN
 package P1 is
   C : constant INTEGER := 42;
   V, W : INTEGER;
   procedure P
   „ P1oW [ P1oW = 1 ];
 end;
°
=SML
new_script{name = "PROC'proc"};
¹CN
with P1;
 procedure PROC is
   use P1;
   C2 : INTEGER renames C;
   V2 : INTEGER renames V;
   procedure P2 renames P;

 begin
   „ P1oV, P1oW [P1oV = 1] (1)
 end;
°
¹CN
 (1) Ã P2; V2 := P1.W;
°
=TEX
=SML
set_pc"cn1";
=TEX
=SML
set_goal([], get_conjecture"-""vc1_2");
a(cn_vc_simp_tac[]);
store_mt_results
mt_run
 [("R0TBD2.1.1", fun_true o pop_thm , (), true)];

=TEX
\subsection{R0TBD3: Empty Private Parts.} \label{R0TBD3}

=SML
clean_up();
new_script{name = "P1'spec"};
¹CN
 package P1 is
   C : constant INTEGER := 42;
   V : INTEGER;
 end;
°
=SML
new_script{name = "PROC'proc"};
=SML
fun go_r0TBD3() =
¹CN
with P1;
 procedure PROC is
   use P1, P1;
   C2 : INTEGER renames C;
 begin
   null;
 end;
°
=SML
store_mt_results
mt_run
 [("R0TBD3.1.1", go_r0TBD3, (), ())];

=TEX
\subsection{R0TBD4: Empty Private Parts.} \label{R0TBD4}

=SML
clean_up();
new_script {name = "A'spec"};
¹CN
package A is
   type T is
      record
         I : Integer;
      end record;
   V : T;
   W : constant T := (I => 1);
   N : Integer;
end A;
°
=SML
new_script {name = "P'proc"};
¹CN
with A;
procedure P
   „ AoN, AoV [ AoN = 1 ]
is
   use A;
begin
   V.I := W.I;
   N := V.I;    -- fails too
end P;
°


=TEX
=SML
set_pc"cn1";
=TEX
=SML
set_goal([], get_conjecture"-""vcP_1");
a(rewrite_tac[z_get_specñAoW®, z_gen_pred_elim[ñƒ®] (z_get_specñAoTuI®)]);
store_mt_results
mt_run
 [("R0TBD3.1.2", fun_true o pop_thm , (), true)];
=TEX
\subsection{R0TBD5: more on use clauses.} \label{R0TBD5}
The test below checks that use clauses are propagated into the environments and that multiple use clauses for the same package work.
=SML
clean_up();
new_script {name = "A'spec"};
¹CN
package A is
   type T is
      record
         I : Integer;
      end record;
   V : T;
end A;
°
=SML
new_script {name = "P'proc"};
¹CN
with A;
procedure P
   „ AoV [ AoV.I = 42 ]
is
    § dec k-slot ¢			( DEC1 )
begin
  „ AoV [ AoV.I = 42]		(  CODE1 )
end P;
°
¹CN
 (DEC1) é use A; x : T; use A; 
     § dec k-slot ¢			( DEC2 )
°
¹CN
 (DEC2) é use A; use A; 
°

¹CN
 (CODE1) Ã „ AoV, X[X.I = 42 ± AoV = X]	(CODE2)
°


¹CN
 (CODE2) Ã x.i := 42; A.v := x;
°
=TEX
=SML
set_pc"cn1";
=TEX
=SML
set_goal([], get_conjecture"-""vcCODE2_1");
a(cn_vc_simp_tac[]);
a(rewrite_tac[ z_gen_pred_elim [ñ ƒ º ðú ®] (z_get_specñAoTuI®) ]);
store_mt_results
mt_run
 [("R0TBD4.1.1", fun_true o pop_thm , (), true)];
=TEX
\section{EPILOGUE}
=SML
diag_line(summarize_mt_results());
=TEX
\end{document}
