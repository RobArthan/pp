=IGN
********************************************************************************
wrk503.doc: this file is part of the Ada Compliance Tool system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
% %Z% $Date: 2002/10/17 15:10:58 $ $Revision: 1.9 $ $RCSfile: wrk503.doc,v $
=TEX
% TQtemplate.tex
% use_file "daz_init";
% use_file "wrk503";
% z_print_theory"-";
% open CNZGenerator;
% print_spark_program();
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Example of Literate Script Development}  %% Mandatory field
\def\TPPheadtitle{Example of Literate Script Development}
\TPPref{ISS/HAT/DAZ/WRK503}  %% Mandatory field
\def\SCCSversion{$Revision: 1.9 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2002/10/17 15:10:58 $%
}}  %% Mandatory field (with sensible default)
\TPPstatus{Informal}
%\TPPstatus{Informal}
\TPPtype{Technical}
%\TPPkeywords{HOL}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & HAT Team}
\TPPabstract{%
This document gives an experimental implementation ``Refinement of Z to SPARK: Example of Literate Script Development'', DRA/CIS/CSE3/SWI/WP/7/2.
}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library}}

%\TPPclass{CLASSIFICATION}
\def\TPPheadlhs{Lemma 1 Ltd.}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1- 1.4] First Issues.
\item[Issue 1.5] IUCT WP 2 changes.
\item[Issue 1.6] IUCT WP 4 syntax change.
\item[Issue 1.9] Copyright and banner updates for open source release.
\item[Issue 1.10] DAZ-specific updates to banner for open source release
\end{description}
\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains a transcription of the literate script for the ``Literate Script'' example in \cite{DRA/CIS/CSE3/SWI/WP/7/2} suitable for input into the Compliance Tool as specified in \cite{ISS/HAT/DAZ/HLD501} and \cite{ISS/HAT/DAZ/USR501}.
\subsection{Introduction}
\subsection{Background}

This document contains an adaptation of the script in \cite{DRA/CIS/CSE3/SWI/WP/5/2} suitable for input into the compliance tool.

\section{LITERATE SCRIPT 1}

=SML

new_script {name="lit1", state=initial_cn_state};

=TEX

¹CN
§ package PACK_P spec ¢	(1)
°


¹CN
(1) é

package PACK_P is
   I : INTEGER;
   type COLOUR is (RED, BLUE, GREEN);
   procedure SQRT (X : INTEGER; Y : out INTEGER)

    „ Y [X ¾ 0, Y ** 2 ¼ X < (Y + 1) ** 2];

   procedure CUBE_ROOT (N : in out INTEGER)

    „ N [N ¾ 0, N ** 3 ¼ N‰0 < (N + 1) ** 3];

   function NEXT_COLOUR (C : COLOUR) return COLOUR

    ˜
    [true,
    C ½ COLOURvLAST ±
    NEXT_COLOUR(C) = COLOURvSUCC(C)
    ²
    C = COLOURvLAST ±
    NEXT_COLOUR(C) = COLOURvFIRST];

   function PLUS_ONE (X : INTEGER) return INTEGER;

end PACK_P;
°
=SML

output_z_document{script="lit1", out_file="lit1.zdoc"};
output_spark_program{out_file="lit1.ada"};
val state1 = get_cn_state();
new_script {name="lit1a", state=state1};

=TEX

¹CN
§ main procedure ¢		(2)
°
¹CN
(2) é

with PACK_P;
procedure MAIN is
   C : PACK_P.COLOUR;
   type PERSON is
   record
      AGE : INTEGER;
      EYES : PACK_P.COLOUR;
   end record;
   JACK : PERSON;
begin
      PACK_P.CUBE_ROOT(PACK_P.I);

       „ C, JACK [true, C = PACK_PoRED]

      C := PACK_P.BLUE;
end MAIN;
°

¹CN
Ã

JACK := PERSON'(25, PACK_P.GREEN);
C := PACK_P.NEXT_COLOUR(JACK.EYES);
°

=SML

output_z_document{script="lit1a", out_file="lit1a.zdoc"};
output_spark_program{out_file="lit1a.ada"};

val lit1_state = get_cn_state();
=TEX

\section{LITERATE SCRIPT 2}

=SML

new_script {name="lit2", state=lit1_state};

=TEX

¹CN
§ package PACK_P body ¢	(1)
°

¹CN
(1) é

package body PACK_P is
   HAIR : COLOUR;
   J, K : INTEGER;
   type ARR_COLOUR is array(COLOUR) of COLOUR;
   NEXT_COL : constant ARR_COLOUR :=
                 ARR_COLOUR'(BLUE, GREEN, RED);
   function PLUS_TWO (L : INTEGER) return INTEGER

   ˜ [true, PLUS_TWO(L) = L + 2]

   is
   begin
      return L + 2;
   end PLUS_TWO;
   procedure SQRT (X : INTEGER; Y : out INTEGER)

    „ Y [X ¾ 0, Y ** 2 ¼ X < (Y + 1) ** 2]

   is separate;
   procedure CUBE_ROOT (N : in out INTEGER)

    „ N, J [N ¾ 0, N ** 3 ¼ N‰0 < (N + 1) ** 3]

   is
      L : INTEGER;
   begin

      „ N, J, L [N ¾ 0, N ** 3 ¼ N‰0 < (N + 1) ** 3]	(2)

      L := PLUS_TWO(L);
   end CUBE_ROOT;

   § function NEXT_COLOUR body ¢				(3)

   function PLUS_ONE (X : INTEGER) return INTEGER

    ˜ [true, PLUS_ONE(X) = X + 1]

   is
      L : INTEGER;

        § procedure PLUS_FOUR body ¢				(4)

   begin

        „ L [true, PLUS_ONE(X) = X + 1]			(5)

   end PLUS_ONE;
end PACK_P;
°

¹CN
(3) é

function NEXT_COLOUR (C : COLOUR) return COLOUR

˜
[true,
C ½ COLOURvLAST ±
NEXT_COLOUR(C) = COLOURvSUCC(C)
²
C = COLOURvLAST ±
NEXT_COLOUR(C) = COLOURvFIRST]

is separate;
°

¹CN
(4) é

procedure PLUS_FOUR (A : INTEGER; B : out INTEGER)

„ B [true, B = A + 4]

is
begin
   B := A + 4;
end PLUS_FOUR;
°

¹CN
(5) !Ã
PLUS_FOUR(X, L);
L := L - 3;
return L;
°

=SML

output_z_document{script="lit2", out_file="lit2.zdoc"};
output_spark_program{out_file="lit2.ada"};

val lit2_state = get_cn_state();
=TEX

\section{LITERATE SCRIPT 3}

=SML

new_script {name="lit3", state=lit2_state};

=TEX


¹CN
§ procedure PACK_P.SQRT body ¢	(1)
°


¹CN
(1) é

separate (PACK_P)
procedure SQRT (X : INTEGER; Y : out INTEGER)

„ Y [X ¾ 0, Y ** 2 ¼ X < (Y + 1) ** 2]

is
   LO : INTEGER;

   § local vars ¢		(2)

begin
   LO := 0;

    „ LO [X ¾ 0 ± LO = 0, LO ** 2 ¼ X < (LO + 1) ** 2]

   Y := LO;
end SQRT;
°

¹CN
(2) é

HI : INTEGER;
°

¹CN
Ã
„ LO, HI [X ¾ 0 ± LO = 0, LO ** 2 ¼ X < (LO + 1) ** 2]
°

¹CN
Ã

HI := X + 1;

till ûLO ** 2 ¼ X < (LO + 1) ** 2ý

loop

    „ LO, HI [LO ** 2 ¼ X < HI ** 2, LO ** 2 ¼ X < HI ** 2]

end loop;
°

¹CN
Ã

exit when LO + 1 = HI;

„ LO, HI [LO ** 2 ¼ X < HI ** 2, LO ** 2 ¼ X < HI ** 2]
°


=SML

output_z_document{script="lit3", out_file="lit3.zdoc"};
output_spark_program{out_file="lit3.ada"};

val lit3_state = get_cn_state();

=TEX

\section{LITERATE SCRIPT 4}

=SML

new_script {name="lit4", state=lit3_state};

=TEX

¹CN
separate (PACK_P)
function NEXT_COLOUR (C : COLOUR) return COLOUR
˜
[true,
C ½ COLOURvLAST ±
NEXT_COLOUR(C) = COLOURvSUCC(C)
²
C = COLOURvLAST ±
NEXT_COLOUR(C) = COLOURvFIRST]

is
   C1 : COLOUR;
begin

  „ C1
  [true,
  C ½ COLOURvLAST ±
  NEXT_COLOUR(C) = COLOURvSUCC(C)
  ²
  C = COLOURvLAST ±
  NEXT_COLOUR(C) = COLOURvFIRST]

end NEXT_COLOUR;
°

¹CN
Ã

C1 := C;
C1 := NEXT_COL(C1);
return C1;
°

=TEX
=SML

output_z_document{script="lit4", out_file="lit4.zdoc"};
output_spark_program{out_file="lit4.ada"};

val lit4_state = get_cn_state();

"Done.";

=TEX

\pagebreak
%\HOLindexOff
%\input{wrk503.th.tex}
%\HOLindexOn
%\twocolumn[\section{INDEX OF DEFINED TERMS}]
%\printindex
\end{document}



