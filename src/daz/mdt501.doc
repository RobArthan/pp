% mdt501.doc    %Z% $Date: 1999/04/23 10:51:17 $ $Revision: 1.9 $ $RCSfile: mdt501.doc,v $
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}    %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Module Tests: Compliance Notation Lexical Analyser}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/MDT501}    %% Mandatory field
\def\SCCSversion{$Revision: 1.9 $
}
\TPPissue{\SCCSversion}    %% Mandatory field
\TPPdate{\FormatDate{$Date: 1999/04/23 10:51:17 $
}}  %% Mandatory field (with sensible default)
\TPPstatus{Draft}            %% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{A.C.~Hayward & WIN01}  %% Mandatory field
%\TPPauthors{D.J.~King & WIN01\\A.C.~Hayward & WIN01}
\TPPauthorisation{R.B.~Jones & HAT Manager}
\TPPabstract{This document comprises test cases for testing the DAZ Compliance Notation Lexical Analyser as described in the document ISS/HAT/DAZ/DTD501.}

%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library \\ A.C. Hayward\\ D.J. King}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{daz,fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issue 1.1 \FormatDate{94/07/19}] Initial draft.
\item[Issue 1.8] IUCT WP 3 changes.
\item[Issue 1.9] Update for SML'97.
\item[Issue 1.10] ZTOpen has been removed from the data types.
\end{description}
\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}

This document comprises test cases and test code/data for testing the DAZ Compliance Notation Lexical Analyser as specified in \cite{ISS/HAT/DAZ/DTD501}.

\subsection{Introduction}

\subsubsection{Background and Purpose}

This document is intended to supply module tests for the DAZ Compliance Notation Lexical Analyser as defined in \cite{ISS/HAT/DAZ/DTD501} and implemented in \cite{ISS/HAT/DAZ/IMP501}. The tests are intended to meet the requirements for tests identified in the quality plan \cite{ISS/HAT/DAZ/PLN003}.

\subsubsection{Dependencies}

These tests depend on the test harness as implemented in DS/FMU/IED/IMP013, and its corresponding detailed design document, DS/FMU/IED/DTD013.

\subsubsection{Possible Enhancements}

None known.

\subsubsection{Deficiencies}

There are no known deficiencies.

\section{INITIALISATION}
First we need to load the test harness and initialise it.

=SML
use_file "dtd013";
use_file "imp013";
init_mt_results();
=TEX

\section{PREAMBLE}
Set up the theory database as necessary.

=SML
open_theory "z_library";
force_delete_theory "mdt501" handle (_) => ();
new_theory "mdt501";
=TEX

\section{THE TESTS}

\subsection{CaseIndependence}

This is a signature of a structure containing a number of utilities for use in implementng support for languages where identifiers are case independent.

=SML
open CaseIndependence;
=TEX

The functions $to\_upper$ and $to\_lower$ convert their string arguments to strings with all the characters converted to their upper or lower case equi    valences respectively.

=SML
store_mt_results mt_run [
    ("to_upper.1", to_upper, "", ""),
    ("to_upper.2", to_upper, "a", "A"),
    ("to_upper.3", to_upper, "A", "A"),
    ("to_upper.4", to_upper, "abcdefghIJKLMNOP", "ABCDEFGHIJKLMNOP"),
    ("to_upper.5", to_upper, "0123456789!@#$^&()", "0123456789!@#$^&()")];
store_mt_results mt_run [
    ("to_lower.1", to_lower, "", ""),
    ("to_lower.2", to_lower, "A", "a"),
    ("to_lower.3", to_lower, "a", "a"),
    ("to_lower.4", to_lower, "abcdefghIJKLMNOP", "abcdefghijklmnop"),
    ("to_lower.5", to_lower, "0123456789!@#$^&()", "0123456789!@#$^&()")];
=TEX

\subsection{CNLex}

This is the signature for the structure containing the lexical analyser for SPARK.

=SML
open Lex ZLex CNLex CNTypes;
=TEX

The following function looks at the label in a web clause (if there is one). The label determines the kind of web clause entered. This classification function is called from within the lexical analyser, and it is necessary for it to be called prior to the parser since the parser recognises a language in which the distinction between the kinds of web clause is made in the parser's input.

=SML
fun Ûclassify_labelÝ (itemlist : CN_LEX_ITEM list) : CN_LEX_ITEM list = (
    case itemlist
    of (LCOrd, _)::(LCNumericLiteral, CNText ntxt)::(LCCrd, _)::rest =>
    (
        (
            (
                case nat_of_string ntxt
                of 1 => LCCompLabel
                |  2 => LCPPartLabel
                |  3 => LCVPartLabel
                |  4 => LCDecLabel
                |  5 => LCStmtLabel
                |  6 => LCSpecLabel
                |  _ => LCCompLabel
            ),
            CNText ("("^ntxt^")")
        )::rest
    )
    |  _ => itemlist
);
=TEX

Set up the Compliance Notation Reader Writer.  This reads the input and then passes it through the Lexical Analyser.

The line counting features of the lexical analyser are
tested in \cite{ISS/HAT/DAZ/INT510} and are not tested here.

=SML
fun Ûcn_recogniserÝ
    (start:string, lang:string,    value:Lex.INPUT list, finish:string) = (
    if ReaderWriterSupport.PrettyNames.is_same_symbol(start, "¹")
        andalso ReaderWriterSupport.PrettyNames.is_same_symbol(finish, "°")
        andalso (lang = "CN")
    then
        fst(CNLex.cn_lex classify_label value)
    else
        fail "cn_recogniser" 504010
            [fn () => start, fn () => lang, fn () => finish]
);
=TEX

We need functions to test for equality of Compliance Notation Lexical tokens.

=SML
open ZLex;
fun z_tok_eq (tok1 : Z_TOKEN, tok2 : Z_TOKEN)  : bool = (
	case (tok1, tok2) of 
	  (ZTAqTm x1, ZTAqTm x2) => x1 =$ x2
	| (ZTChar x1, ZTChar x2) => x1 = x2
	| (ZTDecor x1, ZTDecor x2) => x1 = x2
	| (ZTId x1, ZTId x2) => x1 = x2
	| (ZTNumber x1, ZTNumber x2) => x1 = x2
	| (ZTString x1, ZTString x2) => x1 = x2
	| (ZTAmpersand, ZTAmpersand) => true
	| (ZTAx, ZTAx) => true
	| (ZTBSlash, ZTBSlash) => true
	| (ZTBar, ZTBar) => true
	| (ZTColon, ZTColon) => true
	| (ZTComma, ZTComma) => true
	| (ZTConjecture, ZTConjecture) => true
	| (ZTDot, ZTDot) => true
	| (ZTDots, ZTDots) => true
	| (ZTEnd, ZTEnd) => true
	| (ZTEos, ZTEos) => true
	| (ZTFreeTyDef, ZTFreeTyDef) => true
	| (ZTFun, ZTFun) => true
	| (ZTGen, ZTGen) => true
	| (ZTIs, ZTIs) => true
	| (ZTLbrace, ZTLbrace) => true
	| (ZTLbrack, ZTLbrack) => true
	| (ZTLet, ZTLet) => true
	| (ZTLsqbrack, ZTLsqbrack) => true
	| (ZTPipe, ZTPipe) => true
	| (ZTPre, ZTPre) => true
	| (ZT„, ZT„) => true
	| (ZT˜, ZT˜) => true
	| (ZT±, ZT±) => true
	| (ZT¦, ZT¦) => true
	| (ZT¤, ZT¤) => true
	| (ZT¶, ZT¶) => true
	| (ZT¶‰1, ZT¶‰1) => true
	| (ZT», ZT») => true
	| (ZTù, ZTù) => true
	| (ZTÌ, ZTÌ) => true
	| (ZTµ, ZTµ) => true
	| (ZT´, ZT´) => true
	| (ZT§, ZT§) => true
	| (ZTÍ, ZTÍ) => true
	| (ZT³, ZT³) => true
	| (ZT², ZT²) => true
	| (ZT¢, ZT¢) => true
	| (ZT·, ZT·) => true
	| (ZTÊ, ZTÊ) => true
	| (ZT¸, ZT¸) => true
	| (ZTRbrace, ZTRbrace) => true
	| (ZTRbrack, ZTRbrack) => true
	| (ZTRel, ZTRel) => true
	| (ZTRsqbrack, ZTRsqbrack) => true
	| (ZTSch, ZTSch) => true
	| (ZTSemi, ZTSemi) => true
	| (ZTSlash, ZTSlash) => true
	| (ZTSt, ZTSt) => true
	| (ZTUnderScore, ZTUnderScore) => true
	| (ZTVert, ZTVert) => true
	| _ => false
);
=TEX
=SML
open Lex;
fun input_eq (i1 : INPUT, i2 : INPUT) : bool = (
	case (i1, i2) of
		(Text t1, Text t2) => t1 = t2
	|	(String t1, String t2) => t1 = t2
	|	(Char t1, Char t2) => t1 = t2
	|	(Separator t1, Separator t2) => t1 = t2
	|	(Error t1, Error t2) => t1 = t2
	|	(Type t1, Type t2) => t1 =: t2
	|	(Term t1, Term t2) => t1 =$ t2
	|	_ => false
);
=TEX
=SML
open CNTypes;
fun cn_token_eq ((x : CN_TOKEN), (y : CN_TOKEN)) : bool = (
	case (x, y) of
		(CNZ t1, CNZ t2) => length t1 = length t2
				andalso all (combine t1 t2) z_tok_eq
	|	(CNText t1, CNText t2) => t1 = t2
	|	(CNString t1, CNString t2) => t1 = t2
	|	(CNKSlot t1, CNKSlot t2) => length t1 = length t2
				andalso all (combine t1 t2) input_eq
	|	(CNEos, CNEos) => true
	|	_ => false
);
=TEX
=SML
fun cn_lexitem_eq ( (lc1, tok1) : CN_LEX_ITEM, (lc2, tok2) : CN_LEX_ITEM ) : bool = (
	lc1 = lc2 andalso cn_token_eq (tok1, tok2)
);
=TEX
=SML
fun cn_lex_items_eq (lis1 : CN_LEX_ITEM list, lis2 : CN_LEX_ITEM list) : bool = (
	length lis1 = length lis2 andalso all (combine lis1 lis2) cn_lexitem_eq
);
=TEX

First we test that the lexical analyser will generate all of the parts of the datatype $CN\_LEX\_CLASS$ and that they are correctly generated.

LCEos is generated by code in a later document, so we don't test it here.

=SML
local
    val t0 = ¹CN abs °
    val t1 = ¹CN & °
    val t2 = ¹CN and °
    val t3 = ¹CN array °
    val t4 = ¹CN at °
    val t5 = ¹CN | °
    val t6 = ¹CN body °
    val t7 = ¹CN := °
    val t8 = ¹CN begin °
    val t9 = ¹CN case °
    val a0 = [(LCAbs, CNText "ABS")] : CN_LEX_ITEM list;
    val a1 = [(LCAmpersand, CNText "&")] : CN_LEX_ITEM list;
    val a2 = [(LCAnd, CNText "AND")] : CN_LEX_ITEM list;
    val a3 = [(LCArray, CNText "ARRAY")] : CN_LEX_ITEM list;
    val a4 = [(LCAt, CNText "AT")] : CN_LEX_ITEM list;
    val a5 = [(LCBar, CNText "|")] : CN_LEX_ITEM list;
    val a6 = [(LCBBody, CNText "BODY")] : CN_LEX_ITEM list;
    val a7 = [(LCBecomes, CNText ":=")] : CN_LEX_ITEM list;
    val a8 = [(LCBegin, CNText "BEGIN")] : CN_LEX_ITEM list;
    val a9 = [(LCCase, CNText "CASE")] : CN_LEX_ITEM list;
in
    val _ = store_mt_results (mt_runf cn_lex_items_eq) [
     ("cn_lex.0", (fn x => x), t0, a0),
     ("cn_lex.1", (fn x => x), t1, a1),
     ("cn_lex.2", (fn x => x), t2, a2),
     ("cn_lex.3", (fn x => x), t3, a3),
     ("cn_lex.4", (fn x => x), t4, a4),
     ("cn_lex.5", (fn x => x), t5, a5),
     ("cn_lex.6", (fn x => x), t6, a6),
     ("cn_lex.7", (fn x => x), t7, a7),
     ("cn_lex.8", (fn x => x), t8, a8),
     ("cn_lex.9", (fn x => x), t9, a9)];
end;
=TEX

=SML
local
    val t0 = ¹CN 'a' °
    val t1 = ¹CN : °
    val t2 = ¹CN , °
    val t3 = ¹CN (1) °
    val t4 = ¹CN constant °
    val t5 = ¹CN con °
    val t6 = ¹CN ) °
    val t7 = ¹CN (4) °
    val t8 = ¹CN delta °
    val t9 = ¹CN digits °
    val a0 = [(LCCharacterLiteral, CNString "a")] : CN_LEX_ITEM list;
    val a1 = [(LCColon, CNText ":")] : CN_LEX_ITEM list;
    val a2 = [(LCComma, CNText ",")] : CN_LEX_ITEM list;
    val a3 = [(LCCompLabel, CNText "(1)")] : CN_LEX_ITEM list;
    val a4 = [(LCConstant, CNText "CONSTANT")] : CN_LEX_ITEM list;
    val a5 = [(LCCon, CNText "CON")] : CN_LEX_ITEM list;
    val a6 = [(LCCrd, CNText ")")] : CN_LEX_ITEM list;
    val a7 = [(LCDecLabel, CNText "(4)")] : CN_LEX_ITEM list;
    val a8 = [(LCDelta, CNText "DELTA")] : CN_LEX_ITEM list;
    val a9 = [(LCDigits, CNText "DIGITS")] : CN_LEX_ITEM list;
in
    val _ = store_mt_results (mt_runf cn_lex_items_eq) [
     ("cn_lex.10", (fn x => x), t0, a0),
     ("cn_lex.11", (fn x => x), t1, a1),
     ("cn_lex.12", (fn x => x), t2, a2),
     ("cn_lex.13", (fn x => x), t3, a3),
     ("cn_lex.14", (fn x => x), t4, a4),
     ("cn_lex.15", (fn x => x), t5, a5),
     ("cn_lex.16", (fn x => x), t6, a6),
     ("cn_lex.17", (fn x => x), t7, a7),
     ("cn_lex.18", (fn x => x), t8, a8),
     ("cn_lex.19", (fn x => x), t9, a9)];
end;
=TEX

=SML
local
    val t0 = ¹CN / °
    val t1 = ¹CN .. °
    val t2 = ¹CN . °
    val t3 = ¹CN else °
    val t4 = ¹CN elsif °
    val t5 = ¹CN end °
    val t6 = ¹CN = °
    val t7 = ¹CN exit °
    val t8 = ¹CN · °
    val t9 = ¹CN for °
    val a0 = [(LCDiv, CNText "/")] : CN_LEX_ITEM list;
    val a1 = [(LCDotDot, CNText "..")] : CN_LEX_ITEM list;
    val a2 = [(LCDot, CNText ".")] : CN_LEX_ITEM list;
    val a3 = [(LCElse, CNText "ELSE")] : CN_LEX_ITEM list;
    val a4 = [(LCElsIf, CNText "ELSIF")] : CN_LEX_ITEM list;
    val a5 = [(LCEnd, CNText "END")] : CN_LEX_ITEM list;
    val a6 = [(LCEquals, CNText "=")] : CN_LEX_ITEM list;
    val a7 = [(LCExit, CNText "EXIT")] : CN_LEX_ITEM list;
    val a8 = [(LCFatDot, CNText "·")] : CN_LEX_ITEM list;
    val a9 = [(LCFor, CNText "FOR")] : CN_LEX_ITEM list;
in
    val _ = store_mt_results (mt_runf cn_lex_items_eq) [
     ("cn_lex.20", (fn x => x), t0, a0),
     ("cn_lex.21", (fn x => x), t1, a1),
     ("cn_lex.22", (fn x => x), t2, a2),
     ("cn_lex.23", (fn x => x), t3, a3),
     ("cn_lex.24", (fn x => x), t4, a4),
     ("cn_lex.25", (fn x => x), t5, a5),
     ("cn_lex.26", (fn x => x), t6, a6),
     ("cn_lex.27", (fn x => x), t7, a7),
     ("cn_lex.28", (fn x => x), t8, a8),
     ("cn_lex.29", (fn x => x), t9, a9)];
end;
=TEX

=SML
local
    val t0 = ¹CN function °
    val t1 = ¹CN => °
    val t2 = ¹CN >= °
    val t3 = ¹CN > °
    val t4 = ¹CN banana °
    val t5 = ¹CN if °
    val t6 = ¹CN in °
    val t7 = ¹CN is °
    val t8 = ¹CN §apple¢ °
    val t9 = ¹CN <= °
    val a0 = [(LCFunction, CNText "FUNCTION")] : CN_LEX_ITEM list;
    val a1 = [(LCGoesTo, CNText "=>")] : CN_LEX_ITEM list;
    val a2 = [(LCGreaterEquals, CNText ">=")] : CN_LEX_ITEM list;
    val a3 = [(LCGreaterThan, CNText ">")] : CN_LEX_ITEM list;
    val a4 = [(LCIdentifier, CNText "BANANA")] : CN_LEX_ITEM list;
    val a5 = [(LCIf, CNText "IF")] : CN_LEX_ITEM list;
    val a6 = [(LCIn, CNText "IN")] : CN_LEX_ITEM list;
    val a7 = [(LCIs, CNText "IS")] : CN_LEX_ITEM list;
    val a8 = [(LCLChevron, CNText "§"), (LCKSlot, CNKSlot [Text "apple"]),
   (LCRChevron, CNText "¢")] : CN_LEX_ITEM list;
    val a9 = [(LCLessEquals, CNText "<=")] : CN_LEX_ITEM list;
in
    val _ = store_mt_results (mt_runf cn_lex_items_eq) [
     ("cn_lex.30", (fn x => x), t0, a0),
     ("cn_lex.31", (fn x => x), t1, a1),
     ("cn_lex.32", (fn x => x), t2, a2),
     ("cn_lex.33", (fn x => x), t3, a3),
     ("cn_lex.34", (fn x => x), t4, a4),
     ("cn_lex.35", (fn x => x), t5, a5),
     ("cn_lex.36", (fn x => x), t6, a6),
     ("cn_lex.37", (fn x => x), t7, a7),
     ("cn_lex.38", (fn x => x), t8, a8),
     ("cn_lex.39", (fn x => x), t9, a9)];
end;
=TEX

=SML
local
    val t0 = ¹CN <> °
    val t1 = ¹CN <  °
    val t2 = ¹CN limited °
    val t3 = ¹CN loop °
    val t4 = ¹CN - °
    val t5 = ¹CN mod °
    val t6 = ¹CN /= °
    val t7 = ¹CN not °
    val t8 = ¹CN null °
    val t9 = ¹CN 4 °
    val a0 = [(LCLessGreat, CNText "<>")] : CN_LEX_ITEM list;
    val a1 = [(LCLessThan, CNText "<")] : CN_LEX_ITEM list;
    val a2 = [(LCLimited, CNText "LIMITED")] : CN_LEX_ITEM list;
    val a3 = [(LCLoop, CNText "LOOP")] : CN_LEX_ITEM list;
    val a4 = [(LCMinus, CNText "-")] : CN_LEX_ITEM list;
    val a5 = [(LCMod, CNText "MOD")] : CN_LEX_ITEM list;
    val a6 = [(LCNotEquals, CNText "/=")] : CN_LEX_ITEM list;
    val a7 = [(LCNot, CNText "NOT")] : CN_LEX_ITEM list;
    val a8 = [(LCNull, CNText "NULL")] : CN_LEX_ITEM list;
    val a9 = [(LCNumericLiteral, CNText "4")] : CN_LEX_ITEM list;
in
    val _ = store_mt_results (mt_runf cn_lex_items_eq) [
     ("cn_lex.40", (fn x => x), t0, a0),
     ("cn_lex.41", (fn x => x), t1, a1),
     ("cn_lex.42", (fn x => x), t2, a2),
     ("cn_lex.43", (fn x => x), t3, a3),
     ("cn_lex.44", (fn x => x), t4, a4),
     ("cn_lex.45", (fn x => x), t5, a5),
     ("cn_lex.46", (fn x => x), t6, a6),
     ("cn_lex.47", (fn x => x), t7, a7),
     ("cn_lex.48", (fn x => x), t8, a8),
     ("cn_lex.49", (fn x => x), t9, a9)];
end;
=TEX

=SML
local
    val t0 = ¹CN of °
    val t1 = ¹CN ( °
    val t2 = ¹CN or °
    val t3 = ¹CN others °
    val t4 = ¹CN out °
    val t5 = ¹CN package °
    val t6 = ¹CN + °
    val t7 = ¹CN (2) °
    val t8 = ¹CN ' °
    val t9 = ¹CN 'world °
    val a0 = [(LCOf, CNText "OF")] : CN_LEX_ITEM list;
    val a1 = [(LCOrd, CNText "(")] : CN_LEX_ITEM list;
    val a2 = [(LCOr, CNText "OR")] : CN_LEX_ITEM list;
    val a3 = [(LCOthers, CNText "OTHERS")] : CN_LEX_ITEM list;
    val a4 = [(LCOut, CNText "OUT")] : CN_LEX_ITEM list;
    val a5 = [(LCPackage, CNText "PACKAGE")] : CN_LEX_ITEM list;
    val a6 = [(LCPlus, CNText "+")] : CN_LEX_ITEM list;
    val a7 = [(LCPPartLabel, CNText "(2)")] : CN_LEX_ITEM list;
    val a8 = [(LCPrime, CNText "'")] : CN_LEX_ITEM list;
    val a9 = [(LCPrimedIdentifier, CNText "'WORLD")] : CN_LEX_ITEM list;
in
    val _ = store_mt_results (mt_runf cn_lex_items_eq) [
     ("cn_lex.50", (fn x => x), t0, a0),
     ("cn_lex.51", (fn x => x), t1, a1),
     ("cn_lex.52", (fn x => x), t2, a2),
     ("cn_lex.53", (fn x => x), t3, a3),
     ("cn_lex.54", (fn x => x), t4, a4),
     ("cn_lex.55", (fn x => x), t5, a5),
     ("cn_lex.56", (fn x => x), t6, a6),
     ("cn_lex.57", (fn x => x), t7, a7),
     ("cn_lex.58", (fn x => x), t8, a8),
     ("cn_lex.59", (fn x => x), t9, a9)];
end;
=TEX

=SML
local
    val t0 = ¹CN private °
    val t1 = ¹CN procedure °
    val t2 = ¹CN record °
    val t3 = ¹CN Ã °
    val t4 = ¹CN rem °
    val t5 = ¹CN renames °
    val t6 = ¹CN é °
    val t7 = ¹CN return °
    val t8 = ¹CN reverse °
    val t9 = ¹CN range °
    val a0 = [(LCPrivate, CNText "PRIVATE")] : CN_LEX_ITEM list;
    val a1 = [(LCProcedure, CNText "PROCEDURE")] : CN_LEX_ITEM list;
    val a2 = [(LCRecord, CNText "RECORD")] : CN_LEX_ITEM list;
    val a3 = [(LCRefinedBy, CNText "Ã")] : CN_LEX_ITEM list;
    val a4 = [(LCRem, CNText "REM")] : CN_LEX_ITEM list;
    val a5 = [(LCRenames, CNText "RENAMES")] : CN_LEX_ITEM list;
    val a6 = [(LCReplacedBy, CNText "é")] : CN_LEX_ITEM list;
    val a7 = [(LCReturn, CNText "RETURN")] : CN_LEX_ITEM list;
    val a8 = [(LCReverse, CNText "REVERSE")] : CN_LEX_ITEM list;
    val a9 = [(LCRRange, CNText "RANGE")] : CN_LEX_ITEM list;
in
     val _ = store_mt_results (mt_runf cn_lex_items_eq) [
     ("cn_lex.60", (fn x => x), t0, a0),
     ("cn_lex.61", (fn x => x), t1, a1),
     ("cn_lex.62", (fn x => x), t2, a2),
     ("cn_lex.63", (fn x => x), t3, a3),
     ("cn_lex.64", (fn x => x), t4, a4),
     ("cn_lex.65", (fn x => x), t5, a5),
     ("cn_lex.66", (fn x => x), t6, a6),
     ("cn_lex.67", (fn x => x), t7, a7),
     ("cn_lex.68", (fn x => x), t8, a8),
     ("cn_lex.69", (fn x => x), t9, a9)];
end;
=TEX

=SML
local
    val t0 = ¹CN ; °
    val t1 = ¹CN separate °
    val t2 = ¹CN (6) °
    val t3 = ¹CN ** °
    val t4 = ¹CN * °
    val t5 = ¹CN (5) °
    val t6 = ¹CN "Hello, world" °
    val t7 = ¹CN subtype °
    val t8 = ¹CN then °
    val t9 = ¹CN till °
    val a0 = [(LCSemi, CNText ";")] : CN_LEX_ITEM list;
    val a1 = [(LCSeparate, CNText "SEPARATE")] : CN_LEX_ITEM list;
    val a2 = [(LCSpecLabel, CNText "(6)")] : CN_LEX_ITEM list;
    val a3 = [(LCStarStar, CNText "**")] : CN_LEX_ITEM list;
    val a4 = [(LCStar, CNText "*")] : CN_LEX_ITEM list;
    val a5 = [(LCStmtLabel, CNText "(5)")] : CN_LEX_ITEM list;
    val a6 = [(LCStringLiteral, CNString "Hello, world")] : CN_LEX_ITEM list;
    val a7 = [(LCSubType, CNText "SUBTYPE")] : CN_LEX_ITEM list;
    val a8 = [(LCThen, CNText "THEN")] : CN_LEX_ITEM list;
    val a9 = [(LCTill, CNText "TILL")] : CN_LEX_ITEM list;
in
    val _ = store_mt_results (mt_runf cn_lex_items_eq) [
     ("cn_lex.70", (fn x => x), t0, a0),
     ("cn_lex.71", (fn x => x), t1, a1),
     ("cn_lex.72", (fn x => x), t2, a2),
     ("cn_lex.73", (fn x => x), t3, a3),
     ("cn_lex.74", (fn x => x), t4, a4),
     ("cn_lex.75", (fn x => x), t5, a5),
     ("cn_lex.76", (fn x => x), t6, a6),
     ("cn_lex.77", (fn x => x), t7, a7),
     ("cn_lex.78", (fn x => x), t8, a8),
     ("cn_lex.79", (fn x => x), t9, a9)];
end;
=TEX

=SML
local
    val t0 = ¹CN type °
    val t1 = ¹CN use °
    val t2 = ¹CN (3) °
    val t3 = ¹CN when °
    val t4 = ¹CN while °
    val t5 = ¹CN with °
    val t6 = ¹CN xor °
    val t7 = ¹CN „ true °
    val t8 = ¹CN [ °
    val t9 = ¹CN ] °
    val a0 = [(LCType, CNText "TYPE")] : CN_LEX_ITEM list;
    val a1 = [(LCUse, CNText "USE")] : CN_LEX_ITEM list;
    val a2 = [(LCVPartLabel, CNText "(3)")] : CN_LEX_ITEM list;
    val a3 = [(LCWhen, CNText "WHEN")] : CN_LEX_ITEM list;
    val a4 = [(LCWhile, CNText "WHILE")] : CN_LEX_ITEM list;
    val a5 = [(LCWith, CNText "WITH")] : CN_LEX_ITEM list;
    val a6 = [(LCXor, CNText "XOR")] : CN_LEX_ITEM list;
    val a7 = [(LCGrkDelta, CNText "„"),
                (LCZ, CNZ [ZTId "true", ZTEos])] : CN_LEX_ITEM list;
    val a8 = [(LCLSqBrack, CNText "[")] : CN_LEX_ITEM list;
    val a9 = [(LCRSqBrack, CNText "]")] : CN_LEX_ITEM list;
in
    val _ = store_mt_results (mt_runf cn_lex_items_eq) [
     ("cn_lex.80", (fn x => x), t0, a0),
     ("cn_lex.81", (fn x => x), t1, a1),
     ("cn_lex.82", (fn x => x), t2, a2),
     ("cn_lex.83", (fn x => x), t3, a3),
     ("cn_lex.84", (fn x => x), t4, a4),
     ("cn_lex.85", (fn x => x), t5, a5),
     ("cn_lex.86", (fn x => x), t6, a6),
     ("cn_lex.87", (fn x => x), t7, a7),
     ("cn_lex.88", (fn x => x), t8, a8),
     ("cn_lex.89", (fn x => x), t9, a9)];
end;
=TEX
	("auxiliary",	LCAuxiliary),
	("using",	LCUsing),
	("implement",	LCImplement),
	("by",		LCBy)

=SML
local
    val t0 = ¹CN auxiliary °
    val t1 = ¹CN using °
    val t2 = ¹CN implement °
    val t3 = ¹CN by °
    val t4 = ¹CN auxiliary abc; °
    val t5 = ¹CN using abc implement def by ghi;°
    val t6 = ¹CN ûimplementý °
    val t7 = ¹CN „ abc [ °
    val t8 = ¹CN „ abc { °
    val t9 = ¹CN „ abc [def, ghi] °
    val a0 = [(LCAuxiliary, CNText "AUXILIARY")] : CN_LEX_ITEM list;
    val a1 = [(LCUsing, CNText "USING")] : CN_LEX_ITEM list;
    val a2 = [(LCImplement, CNText "IMPLEMENT")] : CN_LEX_ITEM list;
    val a3 = [(LCBy, CNText "BY")] : CN_LEX_ITEM list;
    val a4 = [(LCAuxiliary, CNText "AUXILIARY"),
     (LCZ, CNZ [ZTId "abc", ZTEos]), (LCSemi, CNText ";")]
			 : CN_LEX_ITEM list;
    val a5 = [(LCUsing, CNText "USING"), (LCIdentifier, CNText "ABC"),
     (LCImplement, CNText "IMPLEMENT"), (LCZ, CNZ [ZTId "def", ZTEos]),
     (LCBy, CNText "BY"), (LCZ, CNZ [ZTId "ghi", ZTEos]),
     (LCSemi, CNText ";")] : CNTypes.CN_LEX_ITEM list;
    val a6 = [(LCLStrachey, CNText "û"), (LCZ, CNZ [ZTId "implement", ZTEos]),
     (LCRStrachey, CNText "ý")] : CNTypes.CN_LEX_ITEM list;
    val a7 = [(LCGrkDelta, CNText "„"), (LCZ, CNZ [ZTId "abc", ZTEos]),
     (LCLSqBrack, CNText "[")] : CNTypes.CN_LEX_ITEM list;
    val a8 = [(LCGrkDelta, CNText "„"), (LCZ, CNZ [ZTId "abc", ZTEos]),
     (LCLBrace, CNText "{")] : CNTypes.CN_LEX_ITEM list;
    val a9 = [(LCGrkDelta, CNText "„"), (LCZ, CNZ [ZTId "abc", ZTEos]),
     (LCLSqBrack, CNText "["),
     (LCZ, CNZ [ZTId "def", ZTComma, ZTId "ghi", ZTEos]),
     (LCRSqBrack, CNText "]")] : CNTypes.CN_LEX_ITEM list;
in
    val _ = store_mt_results (mt_runf cn_lex_items_eq) [
     ("cn_lex.110", (fn x => x), t0, a0),
     ("cn_lex.111", (fn x => x), t1, a1),
     ("cn_lex.112", (fn x => x), t2, a2),
     ("cn_lex.113", (fn x => x), t3, a3),
     ("cn_lex.114", (fn x => x), t4, a4),
     ("cn_lex.115", (fn x => x), t5, a5),
     ("cn_lex.116", (fn x => x), t6, a6),
     ("cn_lex.117", (fn x => x), t7, a7),
     ("cn_lex.118", (fn x => x), t8, a8),
     ("cn_lex.119", (fn x => x), t9, a9)];
end;
=TEX

=SML
local
    val t0 = ¹CN { °
    val t1 = ¹CN } °
    val t2 = ¹CN û °
    val t3 = ¹CN ý °
    val t4 = ¹CN § °
    val t5 = ¹CN ¢ °
    val t6 = ¹CN references °
    val a0 = [(LCLBrace, CNText "{")] : CN_LEX_ITEM list;
    val a1 = [(LCRBrace, CNText "}")] : CN_LEX_ITEM list;
    val a2 = [(LCLStrachey, CNText "û")] : CN_LEX_ITEM list;
    val a3 = [(LCRStrachey, CNText "ý")] : CN_LEX_ITEM list;
    val a4 = [(LCLChevron, CNText "§")] : CN_LEX_ITEM list;
    val a5 = [(LCRChevron, CNText "¢")] : CN_LEX_ITEM list;
    val a6 = [(LCReferences, CNText "REFERENCES")] : CN_LEX_ITEM list;
in
    val _ = store_mt_results (mt_runf cn_lex_items_eq) [
     ("cn_lex.90", (fn x => x), t0, a0),
     ("cn_lex.91", (fn x => x), t1, a1),
     ("cn_lex.92", (fn x => x), t2, a2),
     ("cn_lex.93", (fn x => x), t3, a3),
     ("cn_lex.94", (fn x => x), t4, a4),
     ("cn_lex.95", (fn x => x), t5, a5),
     ("cn_lex.96", (fn x => x), t6, a6)];
end;
=TEX

Now some slightly longer test cases.

Compound dilimiters
=SML
local
    val t1 = ¹CN => .. ** := /= >= <= << >> <> °
    val a1 = [(LCGoesTo, CNText "=>"), (LCDotDot, CNText ".."),
        (LCStarStar, CNText "**"), (LCBecomes, CNText ":="),
        (LCNotEquals, CNText "/="), (LCGreaterEquals, CNText ">="),
        (LCLessEquals, CNText "<="), (LCIdentifier, CNText "<<"),
        (LCIdentifier, CNText ">>"), (LCLessGreat, CNText "<>")] :
        CN_LEX_ITEM list;
in
    val _ = store_mt_results (mt_runf cn_lex_items_eq) [
    ("cn_lex.97", (fn x => x), t1, a1)];
end;
=TEX

Spark has some weird and wonderful ways of representing numeric literals in various bases.

=SML
local
    val t1 = ¹CN
	12		0		1E6		123_456
	12.0		0.0		0.456		3.14159
	1.34E-12	1.0E+6		00000123
	2#1111_1111#	16#FF#		
	°
    val a1 = [(LCNumericLiteral, CNText "12"),
        (LCNumericLiteral, CNText "0"), (LCNumericLiteral, CNText "1E6"),
        (LCNumericLiteral, CNText "123_456"), (LCNumericLiteral, CNText "12.0"),
        (LCNumericLiteral, CNText "0.0"), (LCNumericLiteral, CNText "0.456"),
        (LCNumericLiteral, CNText "3.14159"),
        (LCNumericLiteral, CNText "1.34E-12"),
        (LCNumericLiteral, CNText "1.0E+6"),
        (LCNumericLiteral, CNText "00000123"),
        (LCNumericLiteral, CNText "2#1111_1111#"),
        (LCNumericLiteral, CNText "16#FF#")] : CN_LEX_ITEM list;
in
    val _ = store_mt_results (mt_runf cn_lex_items_eq) [
    ("cn_lex.98", (fn x => x), t1, a1)];
end;
=TEX

Character literals


=SML
local
    val t1 = ¹CN 'a' '*' ''' ' ' °
    val a1 = [(LCCharacterLiteral, CNString "a"),
   (LCCharacterLiteral, CNString "*"), (LCCharacterLiteral, CNString "'"),
   (LCCharacterLiteral, CNString " ")] : CN_LEX_ITEM list;
in
    val _ = store_mt_results (mt_runf cn_lex_items_eq) [
    ("cn_lex.99", (fn x => x), t1, a1)];
end;
=TEX

String literals

=SMLPLAIN
local
    val t1 = ¹CN
        "Characters such as $, %, and } are allowed in string literals"
        "first line" &
        "and the second line"
        °
    val a1 = [(LCStringLiteral, CNString
        "Characters such as $, %%, and } are allowed in string literals"),
   (LCStringLiteral, CNString "first line"), (LCAmpersand, CNText "&"),
   (LCStringLiteral, CNString "and the second line")] : CN_LEX_ITEM list;
in
    val _ = store_mt_results (mt_runf cn_lex_items_eq) [
    ("cn_lex.100", (fn x => x), t1, a1)];
end;
=TEX

Comments

=SML
local
    val t1 = ¹CN
        -- a long comment may be split into
        -- two or more consecutive line
        °
    val a1 = [] : CN_LEX_ITEM list;
in
    val _ = store_mt_results (mt_runf cn_lex_items_eq) [
    ("cn_lex.101", (fn x => x), t1, a1)];
end;
=TEX

\section{SUMMARY OF RESULTS}

=SML
diag_line(summarize_mt_results());
=TEX

\end{document}

=IGNORE
fun cn_recogniser
    (start:string, lang:string, value:Lex.INPUT list, finish:string) = (
    if ReaderWriterSupport.PrettyNames.is_same_symbol(start, "¹")
        andalso ReaderWriterSupport.PrettyNames.is_same_symbol(finish, "°")
        andalso (lang = "CN")
    then
        value
    else
        fail "cn_recogniser" 504010
            [fn () => start, fn () => lang, fn () => finish]
);
