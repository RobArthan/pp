% dtd511.doc %Z% $Date$ $Revision$ $RCSfile$
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT} %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design: Z Output Function} %% Mandatory field
\TPPref{ISS/HAT/DAZ/DTD511} %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion} %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{Specification}
\TPPkeywords{SPARK}
\TPPauthor{A.C.~Hayward&WIN01}
\TPPauthorisation{R.B.~Jones & HAT Manager}
\TPPabstract{
This document contains the detailed design for the DAZ Z Output Function.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{daz,fmu}

\subsection{Changes History} % to get section number `0.3'
\begin{description}
\item[Issue 1.1, \FormatDate{94/07/11}]
Initial Draft.
\item[Issues 1.2, 1.3 \FormatDate{94/07/11}]
Bug fixing

end{description}
\subsection{Changes Forecast}
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for the DAZ Z Output Function.
The implementation is in \cite{ISS/HAT/DAZ/IMP511}.


\subsection{Introduction}


\subsubsection{Purpose and Background}

\subsubsection{Dependencies}
%\subsubsection{Possible Enhancements}
\subsubsection{Deficiencies}
None known.

\section{Z OUTPUT SUPPORT SIGNATURE}

\subsection{Preamble}
=DOC
signature ÛZOutputSupportÝ = sig
local
	open icl'Kernel PrettyPrinter ZUserInterfaceSupport;
in
=DESCRIBE
This is the signature for the structure containing the output function for Z.
=ENDDOC

\subsection{Dictionary}
The Z Output function works in two stage.  In the first stage we scan through the theory database, picking up the information we require and holding it in a sorted list or dictionary.  This is ordered by the order items were placed into the theory database, and it is in this order we print things out.

The exception in fixity information.  The theory database doesn't tell us when this was introducted, so we place it at the beginning to be sure.

=DOC
type ÛZ_DOC_PARAGRAPHÝ
=DESCRIBE
This datatype is used to store information in out dictionary.
=ENDDOC

=DOC
val ÛZOutput_fixity_numÝ : int
=DESCRIBE
This is set to zero, which places all the fixity information at the beginning of the dictionary.
=ENDDOC

=DOC
val Ûadd_sorted_to_listÝ :
    (int * 'a) list -> int * 'a -> (int * 'a) list
=DESCRIBE
This function adds a new element to a list in ascending order.
=ENDDOC

=DOC
val Ûadd_sort_defnÝ : (int * Z_DOC_PARAGRAPH) list -> string list * THM -> (int * Z_DOC_PARAGRAPH) list
val Ûadd_sort_axiomÝ : (int * Z_DOC_PARAGRAPH) list ->
string list * THM -> (int * Z_DOC_PARAGRAPH) list
val Ûadd_sort_VCÝ : (int * Z_DOC_PARAGRAPH) list ->
string list * THM -> (int * Z_DOC_PARAGRAPH) list
val Ûadd_sort_fixÝ : (int * Z_DOC_PARAGRAPH) list ->
CLASS * TEMPLATE -> (int * Z_DOC_PARAGRAPH) list
=DESCRIBE
These functions add a single element of each type to our dictionary.
=ENDDOC

=DOC
val Ûadd_sort_defnsÝ : (int * Z_DOC_PARAGRAPH) list ->
(string list * THM) list -> (int * Z_DOC_PARAGRAPH) list
val Ûadd_sort_axiomsÝ : (int * Z_DOC_PARAGRAPH) list ->
(string list * THM) list -> (int * Z_DOC_PARAGRAPH) list
val Ûadd_sort_VCsÝ : (int * Z_DOC_PARAGRAPH) list ->
(string list * THM) list -> (int * Z_DOC_PARAGRAPH) list
val Ûadd_sort_fixsÝ : (int * Z_DOC_PARAGRAPH) list ->
(CLASS * TEMPLATE) list -> (int * Z_DOC_PARAGRAPH) list
=DESCRIBE
These functions add a list of elemnts to our dictionary.
=ENDDOC

=DOC
val Ûadd_defnsÝ : (int * Z_DOC_PARAGRAPH) list ->
string -> (int * Z_DOC_PARAGRAPH) list
val Ûadd_axiomsÝ : (int * Z_DOC_PARAGRAPH) list ->
string -> (int * Z_DOC_PARAGRAPH) list
val Ûadd_VCsÝ : (int * Z_DOC_PARAGRAPH) list ->
string -> (int * Z_DOC_PARAGRAPH) list
val Ûadd_fixsÝ : (int * Z_DOC_PARAGRAPH) list ->
string -> (int * Z_DOC_PARAGRAPH) list
=DESCRIBE
These functions take a theory name as an argument, and add the relevant parts from that theory to our dictionary.
=ENDDOC

\subsection{Formatting}
In the second stage, we take the elements of our dictionary in turn and pretty print them.

=DOC
val Ûz_thm_ruleÝ : THM -> THM
=DESCRIBE
z_thm_rule is used to strip the Z Paragraph header information from a theorem.
=ENDDOC

=DOC
val ÛZOutput_tab_widthÝ : int
val ÛZOutput_mk_tabÝ : int -> string
val ÛZOutput_tabÝ : string
val ÛZOutput_llÝ : int
=DESCRIBE
Information needed for the formatting functions.
=ENDDOC

=DOC
val Ûfmt_string_listÝ : string list -> string
val Ûconcat_string_listÝ : string list -> string
val Ûfmt_semi_colonÝ : string list -> string list
val Ûfmt_bodyÝ : string list -> string list
val Ûfmt_prefix_tabÝ : string list -> string list
val Ûdest_z_many_±Ý : TERM -> TERM list
=DESCRIBE
Generally useful functions.
=ENDDOC

=DOC
val Ûfmt_varÝ : Z_TERM * TERM -> string
val Ûfmt_var_listÝ : TERM list -> string
val Ûfmt_decÝ : TERM list * TERM -> string list
val Ûfmt_dec_listÝ : TERM list -> string list
=DESCRIBE
Formatting functions for Declarations.
=FAILURE
511001	Internal error in ZOutputSupport - Unexpected term : ?0
=ENDDOC

=DOC
val Ûfmt_pred_listÝ : TERM list -> string list
=DESCRIBE
Formatting functions for Predicates.
=ENDDOC

=DOC
val Ûfmt_schbox_nameÝ : TERM -> string list
val Ûfmt_schboxÝ : THM -> string list
=DESCRIBE
Formatting functions for Z Schema Boxes
=ENDDOC

=DOC
val Ûfmt_abbdefÝ : THM -> string list
=DESCRIBE
Formatting functions for Z Abbreviation Definations
=ENDDOC

=DOC
val Ûfmt_defnsÝ : THM -> string list
=DESCRIBE
Formatting functions for Definations.
=FAILURE
511002	Internal error in ZOutputSupport - Unexpected defination : ?0
=ENDDOC

=DOC
val Ûfmt_axiomsÝ : THM -> string list
=DESCRIBE
Formatting functions for Axioms.
=ENDDOC

=DOC
val Ûfmt_VCsÝ : string * THM -> string list
=DESCRIBE
Formatting functions for Verification Conditions.
=ENDDOC

=DOC
val Ûfmt_fixs_funÝ : int * TEMPLATE -> string list
val Ûfmt_fixs_genÝ : int * TEMPLATE -> string list
val Ûfmt_fixs_relÝ : TEMPLATE -> string list
val Ûfmt_fixsÝ : CLASS * TEMPLATE -> string list
=DESCRIBE
Formatting functions for Fixity Paragraphs.
=ENDDOC

=DOC
val Ûfmt_paragraphÝ : Z_DOC_PARAGRAPH -> string list
val Ûfmt_paragraphsÝ : (int * Z_DOC_PARAGRAPH) list -> string list
=DESCRIBE
Formatting functions for Z Paragraphs.
=ENDDOC

=DOC
val Ûfmt_z_documentÝ : string -> string
=DESCRIBE
This function creates the whole Z Document from a given theory, and returns it as a string suitable for diag_line or output.
=ENDDOC

\subsection{Epilogue}

=DOC
end (* local ... in *);
end (* signature ZOutputSupport *);
=DESCRIBE
=ENDDOC

\section{Z OUTPUT SIGNATURE}
\subsection{Preamble}
=DOC
signature ÛZOutputÝ = sig
=DESCRIBE
This is the signature for the structure containing the output function for SPARK.
=ENDDOC

=DOC
val Ûprint_z_documentÝ : {theory : string} -> unit
val Ûoutput_z_documentÝ : {out_file : string, theory : string} -> unit
=DESCRIBE
Top level printing and output functions.
=ENDDOC

\section{EPILOGUE}
=DOC
end (* signature ZOutput *);
=DESCRIBE
=ENDDOC

=TEX
\section{TEST POLICY}
The functions in this document are to be tested according to the
criteria identified in \cite{ISS/HAT/DAZ/PLN003}.

The test module is \cite{ISS/HAT/DAZ/WRK001}.  To run the test:

\begin{verbatim}
use_file "wrk001";
output_z_document {out_file="wrk001.thy.old", theory="wrk001"};
open_theory "daz_toolkit_extensions";
delete_theory "wrk001";
new_theory "delete_me";
open_theory "delete_me";
use_file "wrk001.thy.old";
output_z_document {out_file="wrk001.thy.new", theory="delete_me"};
\end{verbatim}

and then at a unix prompt:

\begin{verbatim}
diff wrk001.thy.old wrk001.thy.new > wrk001.diff
\end{verbatim}

Load the file wrk001.diff into an editor, like Xpp and check for the differences.

\small
\twocolumn[\section{INDEX}]
\printindex

\end{document}



