% %Z% $Revision$ $RCSfile$ $Date$
=TEX
% TQtemplate.tex
% use_file "daz_init";
% use_file "int515";
% z_print_theory"-";
% open CNZGenerator;
% print_spark_program();
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DAZ PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{IUCT WP 9 Tests}  %% Mandatory field
\TPPref{ISS/HAT/DAZ/INT516}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}  %% Mandatory field (with sensible default)
\TPPstatus{Informal}
%\TPPstatus{Informal}
\TPPtype{Technical}
%\TPPkeywords{HOL}
\TPPauthor{K.~Blackburn & IUCT Team}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & IUCT Team1}
\TPPabstract{%
This document contains tests based on the Praxis Issues example.
}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library}}

%\TPPclass{CLASSIFICATION}
\newfont{\icllogo}{icllogo50}
\def\TPPheadlhs{$\vcenter{\halign{##\cr\icllogo ICL\cr}}$}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\pagebreak
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,daz}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issues 1.1] First draft.
\item[Issues 1.2] WP 4 changes.

\end{description}
\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains test data for the Compliance Tool.
\subsection{Introduction}
This document contains tests of the IUCT WP 9.

\section{PRELIMINARIES}

=SML
use_file "dtd013";
use_file "imp013";
init_mt_results();
=TEX
Function to clean up before doing a test.
=SML
fun clean_up () = (
	let	val thys = get_descendants "cn" less "cn"
					diff get_cache_theories();
		fun del_thy thy = (force_delete_theory thy handle Fail _ => ());
	in	map del_thy thys
	end;	()
);
=TEX
\section{K Slots in Package Specifications}
=SML
clean_up();
new_script{name="K", state=initial_cn_state};

¹CN
package K is
 § Declarations for K ¢			(1)
end K;
°
¹CN
 (1) é
  C : constant INTEGER := 1;
  function F (X : INTEGER)
  return INTEGER
  ˜ [ F(X) = X + C ] ;
°
=SML
new_script{name="L", state=get_cn_state()};

fun ks_spec1 () =
¹CN
with K;
procedure L( X : in out INTEGER)
„ X [ X = X + KoC ]
is
begin
   X := K.F(X);
end L;
°
=SML
store_mt_results mt_run [ (
	"ks_spec1", ks_spec1, (), ()
)];
=TEX

\section{Nested K Slots}
=SML
clean_up();
new_script{name="SQRT", state=initial_cn_state};
¹CN
  function SQRT (X : INTEGER) return INTEGER
    ˜ [X ¾ 0, SQRT(X) ** 2 ¼ X < (SQRT(X) + 1) ** 2]
  is
     LO : INTEGER;
     § local vars ¢								(100)
  begin
    LO := 0;
    „ LO [X ¾ 0 ± LO = 0, LO ** 2 ¼ X < (LO + 1) ** 2]		(1)
    return LO;
  end SQRT;
°
¹CN
(100) é		HI : INTEGER;
		§ local vars ¢							(200)
°
¹CN
(1) Ã	„ LO, HI [X ¾ 0 ± LO = 0, LO ** 2 ¼ X < (LO + 1) ** 2]	(2)
°
¹CN
(2) Ã	HI := X + 1;
	till ûLO ** 2 ¼ X < (LO + 1) ** 2ý
	loop
	„ LO, HI [LO ** 2 ¼ X < HI ** 2, LO ** 2 ¼ X < HI ** 2]	(3)
	end loop;
°

¹CN
(3) Ã	exit when LO + 1 = HI;
	„ LO,HI [LO ** 2 ¼ X < HI ** 2, LO ** 2 ¼ X < HI ** 2]	(4)
°
¹CN
(200) é	MID : INTEGER;
°
=SML
fun nested1() = 
¹CN
(4) Ã	MID := (LO + HI) / 2;
	if MID ** 2 <= X then LO := MID; else HI := MID; end if;
°
=SML
store_mt_results mt_run [ (
	"nested1", nested1, (), ()
)];
=TEX

\section{EPILOGUE}
=SML
diag_line (summarize_mt_results());
=TEX
\pagebreak
\end{document}
=IGN
