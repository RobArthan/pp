=IGN
********************************************************************************
int523.doc: this file is part of the PPDaz system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
%%%%% YOU MAY WANT TO CHANGE POINT SIZE IN THE FOLLOWING:
\documentclass[a4paper,12pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{epsf}

%%%%% YOU WILL USUALLY WANT TO CHANGE THE FOLLOWING TO SUIT YOU AND YOUR DOCUMENT:

\def\Title{ Compliance Tool --- 2.7.1 Enhancement Tests}

\def\Abstract{\begin{center}
{\bf Abstract}\par\parbox{0.7\hsize}
{\small This document provides integration tests to support the enhancements developed 
under the programme of enhancements to version 2.7.1 of the Compliance Tool carried out during 2003.}
\end{center}}

\def\Reference{LEMMA1/DAZ/INT523}

\def\Author{R.D. Arthan}

\def\EMail{{\tt rda@lemma-one.com}}

\def\Phone{+44 118 958 4409}

\def\Fax{+44 118 956 1920}

%%%%% YOU MAY WANT TO CHANGE THE FOLLOWING TO GET A NICE FRONT PAGE:
\def\FrontPageTitle{ {\huge \Title } }
\def\FrontPageHeader{\raisebox{16ex}{\begin{tabular}[t]{c}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year\\\strut\\
\end{tabular}}}
\begin{centering}



\end{centering}

%%%%% THE FOLLOWING DEFAULTS WILL GENERALLY BE RIGHT:

\def\Version{$Revision: 1.37 $%
}
\def\Date{\FormatDate{$Date: 2003/04/28 14:53:07 $%
}}

%%%%% NOW BEGIN THE DOCUMENT AND MAKE THE FRONT PAGE

\begin{document}
\underscoreoff
\headsep=0mm
\FrontPage
\headsep=10mm

%%%%% STANDARD RED-TAPE SECTIONS (MAY WANT TO INTERLEAVE SOME \newpage COMMANDS IN THESE)

%%%%% CONTENTS:

\subsection{Contents}

\tableofcontents

%%%%% REFERENCES:

\subsection{References}

\bibliographystyle{fmu}

%%%%% CHANGE THE FOLLOWING AS NECESSARY (E.G., TO PICK UP daz.bib):
h{\raggedright
\bibliography{fmu,daz}
}
%%%%% CHANGES HISTORY:
\subsection{Changes History}
\begin{description}
\item[Issues 1.1-1.2] First drafts
\item[Issue 1.3] 2.5.4 bug 7 has been withdrawn.
\item[Issue 1.4] interim release tests.
\item[Issue 1.5] improved recursion examples.
\item[Issue 1.6] more tests for renaming.
\item[Issue 1.7] more tests for subprogram renaming; fix to test of use clauses.
\item[Issue 1.8] Tested relaxation of restriction on aggregates.
\item[Issue 1.9, 1.10] Tests for more liberal treatment of use clauses.
\item[Issue 1.11] Test for pp259-bug3 fix.
\item[Issue 1.12] Test for R0076 bug fix.
\item[Issue 1.13] R0054: reworked treatment of use clauses.
\item[Issue 1.14] More bug fix tests.
\item[Issue 1.15] Further tests for interactions between renaming and use clauses.
\item[Issue 1.16] Tests for assertions.
\item[Issue 1.17] Test for bug fix (pp2510-bug0).
\item[Issue 1.18] Tests for block statements.
\item[Issue 1.19] Tests for default parameters; accommodated fix to VC generation for procedure calls;
more tests for renaming (distributed through the document).
\item[Issue 1.20] Copyright and banner updates for open source release.
\item[Issue 1.21, 1.22] DAZ-specific updates to banner for open source release
\item[Issue 1.23, 1.24] Uniform treatment of block statements.
\item[Issues 1.25--1.27] Tests for non-SPARK warnings.
\item[Issue 1.28] Tests for R0078 (new scheme for translating constant declarations).
\item[Issue 1.29] Corrected test for non-SPARK warnings.
\item[Issue 1.30] Added tests for {\it delete\_script}.
\item[Issue 1.31] Added tests for schemas in function $\Xi$-lists.
\item[Issue 1.32] Added tests for auxiliary variables in function $\Xi$-lists.
\item[Issue 1.33] No longer get non-SPARK warning for named number declarations.
\item[Issues 1.34, 1.35] Tests for new error reporting and error recovery.
\item[Issue 1.36] Added test on free variables in theorems.
\end{description}

%%%%%  CHANGES FORECAST:

\subsection{Changes Forecast}

None.

%%%%% DISTRIBUTION LIST

\subsection{Distribution}
\begin{center}
\begin{tabular}{ll}
Rob Arthan & Lemma 1
\end{tabular}
\end{center}


\section{INTRODUCTION}\label{INTRODUCTION}
This document is intended to provide integration tests to cover
the enhancements undertaken under the programme
of enhancements carried out in Spring 2002. See \cite{LEMMA1/DAZ/HLD509}
for the detailed specification of the enhancements.

The interim releases of the Compliance Tool have been
fully regression-tested and the new features have been module-
and integration-tested to a certain extent by the existing tests.
This document provides specific integration tests to
complete the coverage. 
\section{PREAMBLE}
Load the test harness.

=SML
use_file "dtd013";
use_file "imp013";
=TEX
Function to clean up before doing a test.

=SML
fun clean_up () = (
        let     val thys = (get_descendants "cn" less "cn"
                                        diff get_cache_theories())
                fun del_thy thy = (force_delete_theory thy handle Fail _ => ());
	val err_scrs =map fst (CNZGenerator.get_exception_logs());
        in      map del_thy thys;
	map delete_exception_log err_scrs;
	open_theory"cn";
	set_pc "cn1"
        end;    ()
);
=TEX
For batch use turn off subgoal package output:
=SML
set_flag("subgoal_package_quiet", not(ExtendedIO.is_term_in std_in));
=TEX
\section{THE TESTS}
\subsection{R0085: Omitted Else Parts etc.} \label{R0085}
INT511 tests that the Ada output is valid. Here we check that
the``nothing'' statement form suppresses else parts etc., and that the VC generation
for it is as expected.
=SML
clean_up();
new_script{name = "r0085.1", state = initial_cn_state};

set_string_control("case_of_spark_keywords", "upper");

¹CN
 procedure p
 is
 x, y :  integer;
 begin
   if x > y
  then x := y;
  else „ X, Y[true]
  end if;
 end p;
°

¹CN
  Ã nothing;
°
=SML
print_spark_program();
output_spark_program{out_file = "int522.tmp"};
store_mt_results
mt_run
 [(	"R0085.1", 
	ExtendedIO.system,
	"test  `egrep \"ELSE\" int522.tmp | wc -l `  = 0",
	true)];

=TEX
=SML
clean_up();
new_script{name="R0085.2", state=initial_cn_state};

¹CN
 procedure p
 is
 x, y :  integer;
 begin
   if x > y
  then x := y;
  else „ X, Y[true]
  end if;
 end p;
°


¹CN
  Ã nothing; nothing; „ X, Y [ true]
°

¹CN
  Ã nothing; nothing;
°
=SML
print_spark_program();
output_spark_program{out_file = "int522.tmp"};
store_mt_results
mt_run
 [(	"R0085.2", 
	ExtendedIO.system,
	"test  `egrep \"ELSE\" int522.tmp | wc -l `  = 0",
	true)];

=TEX
=SML
clean_up();
new_script{name="R0085.3", state=initial_cn_state};

¹CN
 procedure p
 is
 x, y :  boolean;
 begin
  „ X, Y [ Y = not X ]
 end p;
°
¹CN
  Ã  case x  is
    when true => y := false;
    when false => y := true;
    when others => „[false, false]
  end case;
°


¹CN
  Ã nothing; nothing; „ [ false, false]
°

¹CN
  Ã nothing; nothing;
°
=SML
print_spark_program();
output_spark_program{out_file = "int522.tmp"};
store_mt_results
mt_run
 [(	"R0085.3.1", 
	ExtendedIO.system,
	"test  `egrep \"OTHERS\" int522.tmp | wc -l `  = 0",
	true)];
=TEX
=SML
set_pc"cn1";
=TEX
=SML
set_goal([], get_conjecture"-""vc_1_1");
a(REPEAT strip_tac THEN all_var_elim_asm_tac1);
a(cn_vc_simp_tac[]);
store_mt_results
mt_run
 [("R0085.3.2.1", fun_true o pop_thm , (), true)];
=TEX
=SML
set_goal([], get_conjecture"-""vc_1_2");
a(REPEAT strip_tac THEN all_var_elim_asm_tac1);
a(cn_vc_simp_tac[]);
store_mt_results
mt_run
 [("R0085.3.2.2", fun_true o pop_thm , (), true)];
=TEX
=SML
set_goal([], get_conjecture"-""vc_1_3");
a(REPEAT strip_tac THEN all_fc_tac[cn_boolean_cases_thm]);
store_mt_results
mt_run
 [("R0085.3.2.3", fun_true o pop_thm , (), true)];

fun R0085_others s = (
	let	val gl = ([], get_conjecture "-" s);
	in	tac_proof(gl, taut_tac); true
	end	handle Fail _ => false
);

store_mt_results
mt_run
 [
	("R0085.3.2.4", R0085_others , "vc_2_1", true),
	("R0085.3.2.5", R0085_others , "vc_2_2", true),
	("R0085.3.2.6", R0085_others , "vc_3_1", true)
];
=TEX
\section{EPILOGUE}
=SML
diag_line(summarize_mt_results());
=TEX
\end{document}
