% imp025.doc   %Z% $Date$ $Revision$ $RCSfile$

=TEX
% imp025.doc   %Z% $Date$ $Revision$ $RCSfile$
\documentstyle[hol1,11pt,TQ]{article}

\TPPtitle{Implementation of Pretty Printer}
\TPPref{DS/FMU/IED/IMP025}
\def\SCCSissue{$Revision$%
}
\TPPissue{\SCCSissue}
\TPPdate{\FormatDate{$Date$%
}}
\TPPproject{FST PROJECT}

=IGN

Commands to process this document in various ways.

make -f rel001.mkf imp025.dvi
doctex imp025
texdvi imp025
bibtex imp025
doctex imp025 ; texdvi imp025
doctex imp025 ; texdvi imp025 ; bibtex imp025
dvipage imp025 &

docsml imp025
use_file "imp025.sml";

lasp -s imp025.doc > zz1
lasp -s -u imp025.OKwords imp025.doc > zz1

=TEX
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{SML Literate Script}
\TPPkeywords{HOL}
\TPPauthor{A.J. Hammon & WIN01}  %% Mandatory field
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{This document contains the user interface to
	the pretty printer.  It also installs the pretty printing
	functions into the PolyML printer.}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library
}}

%\ftlinepenalty=9999
\makeindex

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\catcode`\_=\active
\def\_{\kern.06em\vbox{\hrule height.1ex width.3em}\hskip0.1em\relax}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\makeTPPfrontpage

\vfill
\begin{center}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{DOCUMENT CONTROL}

%********************************************************************

\subsection{Contents List}
\tableofcontents
% \listoftables

%********************************************************************

\subsection{Document Cross References}

\bibliographystyle{fmu}
\bibliography{fmu}

%********************************************************************

\subsection{Changes History}

\begin{description}

\item[Issue 1.1 to 1.10 ] Initial drafts.

\item[\FormatDate{91/09/12}, issue 2.1 ] First approved issue.

\item[Issue 2.2, \FormatDate{92/01/20} ] Updated to use new fonts.

\item [Issue 2.3,13 April 1992 ] Changes due to CR0017.

\item[\FormatDate{$Date$%
}, issue \SCCSissue~]
	Add call on $translate_for_output$ to all format routines.
	Add support for print depth.
	Add support for not printing assumptions of theorems.
	Remove calls of $translate_for_output$. {}

%\item[\FormatDate{$Date$%
%}, issue \SCCSissue~]

\end{description}

%********************************************************************

%\subsection{Changes Forecast} \label{ChangesForecast}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{GENERAL}

%********************************************************************

\subsection{Scope}

This document contains the pretty printer for the ICL HOL system, it
implements the interfaces defined in the detailed design
in~\cite{DS/FMU/IED/DTD025}.

%********************************************************************

\subsection{Introduction}

%--------------------------------------------------------------------

\subsubsection{Purpose and Background}

A number of interfaces are required in ICL~HOL for printing out types,
terms and theorems.  The functions in signature $PrettyPrinter$ provide
the functions needed by the users of the pretty printer, these allow a
user to obtain textual forms of types, terms and theorems in
Standard~ML strings.  Another group of functions interface to the
PolyML pretty printing system so that type, term and theorem values are
printed correctly as (parts of) Standard~ML values shown at top-level.

%--------------------------------------------------------------------

\subsubsection{Dependencies}

This is last of the four structures that together form the HOL pretty
printer.  This document depends upon the other three structures:
Oppen style printing~\cite{DS/FMU/IED/IMP024};
pretty printer support~\cite{DS/FMU/IED/IMP031};
and,
HOL pretty printer functions~\cite{DS/FMU/IED/IMP032}.

%--------------------------------------------------------------------

%\subsubsection{Interface}
%\subsubsection{Algorithms}
%\subsubsection{Possible Enhancements}

%--------------------------------------------------------------------

%\subsubsection{Deficiencies}

%--------------------------------------------------------------------

%\subsubsection{Terminology}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{PRETTY PRINTER}

%********************************************************************

\subsection{Prelude}

=SML
structure €PrettyPrinter› : PrettyPrinter = struct

open OppenFormatting;
open PrettyPrinterSupport;
open HOLPrettyPrinter;
=TEX

%********************************************************************

\subsection{Controls}

These integers control how deeply terms and types are printed.

=SML
val €pp_top_level_depth› : int ref = ref ~1;

val SideEffect =
new_int_control{name="pp_top_level_depth", check=fun_true,
	control=pp_top_level_depth, default=fn() => ~1};
=TEX

=SML
val €pp_format_depth› : int ref = ref ~1;

val SideEffect =
new_int_control{name="pp_format_depth", check=fun_true,
	control=pp_format_depth, default=fn() => ~1}
=TEX

Inside the printing system we deal with non-negative depths and
use $Nil$ to indicate print the whole value.

=SML
fun €get_depth›(which:int ref) : int OPT = (
let
	val d = !which;
in
	if d < 0 then Nil else Value d
end
);
=TEX

Assumptions on theories may be suppressed.

=SML
val pp_print_assumptions : bool ref = ref true;
val _ =
new_flag {name = "€pp_print_assumptions›",  control=pp_print_assumptions,
		check=fun_true, default=fun_true};
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{CALLED INTERFACE FOR PRINTERS}

These functions are the outermost printing functions for the supported
types.  They all produce a textual form of their main argument by using
the set of Oppen printing functions provided as another argument.

%********************************************************************

\subsection{Types}

At present there is no support for printing types in languages other
than HOL.  All HOL types (i.e., of Standard~ML type $TYPE$) are printed
out using the HOL syntax.

=SML
fun €show_type› (add_language:bool) (depth:int OPT) (oppen_funs:OPPEN_FUNS)
			(ty:TYPE) : unit = (
	let
		val lang ="HOL:";

		val env = initial_env lang depth oppen_funs;
	in
		if add_language then start_new_language env lang else ();
		main_type_pp env ty;
		if add_language then conclude_new_language env lang else ()
	end
);
=TEX

%********************************************************************

\subsection{Terms}

The first task when printing terms is to determine which language to
use.  A simple algorithm is used here: if the outermost construct in
the term is a constant applied to a list of arguments then the language
of that constant is chosen, in all other cases ``HOL'' is chosen.

{\hfuzz 1pt
=SML
fun €show_term_in› (lang:string) (add_language:bool) (depth:int OPT)
			(oppen_funs:OPPEN_FUNS) (tm:TERM) : unit = (
	let
		val env = initial_env lang depth oppen_funs;
	in
		if add_language then start_new_language env lang else ();
		main_term_pp env tm;
		if add_language then conclude_new_language env lang else ()
	end
);
=TEX
}

=SML
fun €show_term› (add_language:bool) (depth:int OPT)
			(oppen_funs:OPPEN_FUNS) (tm:TERM) : unit = (
	let
		val lang =	case get_first_const tm
				of Value name => get_const_language name
				| Nil => "HOL";

		val enclose = add_language orelse 
			(get_current_language()) <> lang;
	in
		show_term_in lang enclose depth oppen_funs tm
	end
);
=TEX

%********************************************************************

\subsection{Theorems}

Theorems are considered to be a series of terms, each of which is
printed in isolation but without any language start and end symbols.
The complexity here comes from getting the correct spacing and
indentation.  Assumptions and conclusions should be consistently
spaced, but the turnstile and conclusion kept together.  When they
are formatted over several lines all the terms have their left ends
lined up and the turnstile sticks out to the left.  With no
assumptions there should be no spaces before the turnstile
(the case clause and the `$pr_\ldots$' functions achieve this).

=SML
fun €show_theorem›(depth:int OPT)
			(o_funs as (addstring, beginb, space, endb):OPPEN_FUNS)
			(th : THM) : unit = (
let
	val (assumptions, conclusion) = dest_thm th;

	val oppen_funs = o_funs;

	val d = case depth of Nil => Nil | Value v => Value(v-1);

	val lang =	case get_first_const conclusion
			of Value name => get_const_language name
			| Nil => "HOL";

	fun aux t s = (	beginb(2, false);
			show_term_in lang false d oppen_funs t;
			addstring s;
			endb()
	);

	fun pr_ass nil = ()
	| pr_ass (a :: nil) = aux a ""
	| pr_ass (a :: rest) = (aux a ","; space(1, 4); pr_ass rest);

	fun pr_dots nil = ()
	| pr_dots (a :: nil) = addstring "..."
	| pr_dots (a :: rest) = (addstring "...,"; space(1, 4); pr_dots rest);
in
	beginb(0, true);

	case (assumptions, !pp_print_assumptions)
	of (nil, _) => ()
	| (_, true) => (
		pr_ass assumptions;
		space(1, 2)
		)
	| (_, false) => (
		beginb(0, false);
		pr_dots assumptions;
		endb();
		space(1, 2)
		)
	;

	beginb(2, false);
	addstring "Ù ";
	show_term_in lang false d oppen_funs conclusion;
	endb();
	endb()
end
);
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\newpage
\section{INSTALLATION}

%********************************************************************

\subsection{Installing PolyML Printers}

Based on observation of PolyML and the function $PolyML.install_pp$ it
seems that any unhandled exceptions from the installed printing
function are quietly ignored.  As there is considerable complexity in
the pretty printing code in this document and, furthermore, users may
add their own printing functions it seems desirable to catch and report
any problems.

=SML
local
	fun grumble ex_name msg source = (
		output(std_out, "Exception " ^ ex_name
			^ msg ^ " handled by " ^ source ^ "\n")
	);

	fun €interpose› f f_name a b = (
		((f (get_depth pp_top_level_depth)) a b)
		handle Error args => grumble "Error " (PolyML.makestring args) f_name
		| Fail args => grumble "Fail " (PolyML.makestring args) f_name
		| E => grumble "" (PolyML.makestring E) f_name
	);
=SML
in

fun €pp_init› (() : unit) : unit = (
	PolyML.install_pp  (interpose (show_term true) "show_term");
	PolyML.install_pp  (interpose (show_type true) "show_type");
	PolyML.install_pp  (interpose show_theorem "show_theorem")
);

end;

val side_effect = pp_init();
=TEX

%********************************************************************

\subsection{Pretty Printing Interface}

=SML
fun €format_term› (b : bool) (t : TERM) : string list = (
		oppen_format get_line_length (show_term b (get_depth pp_format_depth)) t
);

fun €format_type› (b : bool) (t : TYPE) : string list = (
		oppen_format get_line_length (show_type b (get_depth pp_format_depth)) t
);

fun €format_thm› (t : THM) : string list = (
		oppen_format get_line_length (show_theorem (get_depth pp_format_depth)) t
);
=TEX

=SML
fun €format_term1› (b : bool) (l : int) (t : TERM) : string list = (
		oppen_format (fn () => l) (show_term b (get_depth pp_format_depth)) t
);

fun €format_type1› (b : bool) (l : int) (t : TYPE) : string list = (
		oppen_format (fn () => l) (show_type b (get_depth pp_format_depth)) t
);

fun €format_thm1› (l : int) (t : THM) : string list = (
		oppen_format (fn () => l) (show_theorem (get_depth pp_format_depth)) t
);
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{FINALE}

=SML
end (* of structure PrettyPrinter *);
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%********************************************************************
%--------------------------------------------------------------------

\makeatletter
\def\refstepcounter#1{\stepcounter{#1}\global\edef\@currentlabel{\csname
	p@#1\endcsname\csname the#1\endcsname}}
\makeatother

%\twocolumn[\section{INDEX}]
\section{INDEX}

\footnotesize
\printindex

\onecolumn

\end{document}


