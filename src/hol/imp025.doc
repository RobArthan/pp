% imp025.doc   %Z% $Date$ $Revision$ $RCSfile$

=TEX
% imp025.doc   %Z% $Date$ $Revision$ $RCSfile$
\documentstyle[hol,11pt,TQ]{article}

\TPPtitle{Implementation of Pretty Printer}
\TPPref{DS/FMU/IED/IMP025}
\def\SCCSissue{$Revision$%
}
\TPPissue{\SCCSissue}
\TPPdate{\FormatDate{$Date$%
}}
\TPPproject{FST PROJECT}

=IGN

Commands to process this document in various ways.

make -f rel001.mkf imp025.dvi
doc4tex imp025
tex4dvi imp025
bibtex imp025
doc4tex imp025 ; tex4dvi imp025
doc4tex imp025 ; tex4dvi imp025 ; bibtex imp025
dvipage imp025 &

doc4errors imp025
usefile "imp025.sml";

lasp -s imp025.doc > zz1
lasp -s -u imp025.OKwords imp025.doc > zz1

=TEX
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Standard}
\TPPkeywords{HOL}
\TPPauthor{A.J. Hammon & WIN01}  %% Mandatory field
\TPPauthorisation{R.B.~Jones & FMU Manager}
\TPPabstract{This document contains the user interface to
	the pretty printer.  It also installs the pretty printing
	functions into the PolyML printer.}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library
}}

%\ftlinepenalty=9999
\makeindex

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\catcode`\_=\active
\def\_{\kern.06em\vbox{\hrule height.1ex width.3em}\hskip0.1em\relax}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\makeTPPfrontpage

\vfill
\begin{center}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{DOCUMENT CONTROL}

%********************************************************************

\subsection{Contents List}
\tableofcontents
% \listoftables

%********************************************************************

\subsection{Document Cross References}

\bibliographystyle{fmu}
\bibliography{fmu}

%********************************************************************

\subsection{Changes History}

\begin{description}

\item[10 June 1991, issue 1.3 ] Simple HOL only pretty printer for use
	during development of the rest of ICL HOL until the real pretty
	printer is available.

\item[10 July 1991, issue 1.4 ] First issue of the real pretty printer.

\item[\FormatDate{$Date$%
}, issue \SCCSissue~]
	Rename $format_theorem$ to $format_thm$. {}
	Omit the language start and finish symbols around terms in
	theorems and also around terms and types shown by the
	``$format_\ldots$'' functions.
	Reduce indentation of theorems.
	Do not allow exceptions to pass out of the $show_\ldots$ functions.
\end{description}

%********************************************************************

%\subsection{Changes Forecast} \label{ChangesForecast}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{GENERAL}

%********************************************************************

\subsection{Scope}

This document contains the pretty printer for the ICL HOL system, it
implements the interfaces defined in the detailed design
in~\cite{DS/FMU/IED/DTD025}.

%********************************************************************

\subsection{Introduction}

%--------------------------------------------------------------------

%\subsection{Purpose and Background}

%--------------------------------------------------------------------

\subsection{Dependencies}

This is last of the four structures that together form the HOL pretty
printer.  This document depends upon the other three structures:
Oppen style printing~\cite{DS/FMU/IED/IMP024};
pretty printer support~\cite{DS/FMU/IED/IMP031};
and,
HOL pretty printer functions~\cite{DS/FMU/IED/IMP032}.

%--------------------------------------------------------------------

%\subsection{Interface}
%\subsection{Algorithms}
%\subsection{Possible Enhancements}

%--------------------------------------------------------------------

%\subsection{Deficiencies}

%--------------------------------------------------------------------

%\subsection{Terminology}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{PRETTY PRINTER}

%********************************************************************

\subsection{Prelude}

=SML
structure âPrettyPrinterá : PrettyPrinter = struct

open OppenFormatting;
open PrettyPrinterSupport;
open HOLPrettyPrinter;
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{CALLED INTERFACE FOR PRINTERS}

These functions are the outermost printing functions for the supported
types.  They all produce a textual form of their main argument by using
the set of Oppen printing functions provided as another argument.

%********************************************************************

\subsection{Types}

At present there is no support for printing types in languages other
than HOL.  All HOL types (i.e., of Standard~ML type $TYPE$) are printed
out using the HOL syntax.

=SML
fun âshow_typeá (add_language:bool) (oppen_funs:OPPEN_FUNS) (ty:TYPE) = (
	let
		val lang ="HOL:";

		val env = initial_env lang oppen_funs;
	in
		if add_language then start_new_language env lang else ();
		main_type_pp env ty;
		if add_language then conclude_new_language env lang else ()
	end
);
=TEX

%********************************************************************

\subsection{Terms}

The first task when printing terms is to determine which language to
use.  A simple algorithm is used here: if the outermost construct in
the term is a constant applied to a list of arguments then the language
of that constant is chosen, in all other cases ``HOL'' is chosen.

=SML
fun âshow_termá (add_language:bool) (oppen_funs:OPPEN_FUNS) (tm:TERM) = (
	let
		val lang =	case get_first_const tm
				of Value name => get_const_language name
				| Nil => "HOL";

		val env = initial_env lang oppen_funs;
	in
		if add_language then start_new_language env lang else ();
		main_term_pp env tm;
		if add_language then conclude_new_language env lang else ()
	end
);
=TEX

%********************************************************************

\subsection{Theorems}

Theorems are considered to be a series of terms, each of which is
printed in isolation but without any language start and end symbols.
The complexity here comes from getting the correct spacing and
indentation.  Assumptions and conclusions should be consistently
spaced, but the turnstyle with the conclusion, all the terms being
lined up and the turnstyle sticking out to the left.  With no
assumptions there should be no spaces before the turnstyle (function
$pr_assumptions$ achieves this).

=SML
fun âshow_theoremá(o_funs as (addstring, beginb, space, endb):OPPEN_FUNS) (th : THM) = (
let
	val (assumptions, conclusion) = dest_thm th;

	fun aux t s = (	beginb(2, false);
			show_term false o_funs t;
			addstring s;
			endb()
	);

	fun pr_ass nil = ()
	| pr_ass (a :: nil) = aux a ""
	| pr_ass (a :: rest) = (aux a ","; space(1, 4); pr_ass rest);

	fun pr_assumptions nil = ()
	| pr_assumptions assum = (pr_ass assum; space(1, 2));
in
	beginb(0, true);
	pr_assumptions assumptions ;
	beginb(2, false);
	addstring "… ";
	show_term false o_funs conclusion;
	endb();
	endb()
end
);
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\newpage
\section{INSTALLATION}

%********************************************************************

\subsection{Installing PolyML Printers}

Based on observation of PolyML and the function $PolyML.install_pp$ it
seems that any unhandled exceptions from the installed printing
function are quietly ignored.  As there is considerable complexity in
the pretty printing code in this document and, furthermore, users may
add their own printing functions it seems desirable to catch and report
any problems.

=SML
local
	fun grumble ex_name msg source = (
		output(std_out, "Exception " ^ ex_name ^ msg ^ " handled by " ^ source ^ "\n")
	);

	fun âinterposeá f f_name a b = (
		(f a b)
		handle Error args => grumble "Error " (PolyML.makestring args) f_name
		| Fail args => grumble "Fail " (PolyML.makestring args) f_name
		| E => grumble "" (PolyML.makestring E) f_name
	);
in

val side_effect = PolyML.âinstall_pp  (interpose (show_term true) "show_term")á;
val side_effect = PolyML.âinstall_pp  (interpose (show_type true) "show_type")á;
val side_effect = PolyML.âinstall_pp  (interpose show_theorem "show_theorem")á;

end;
=TEX

%********************************************************************

\subsection{Pretty Printing Interface}

=SML
fun âformat_termá(t : TERM) : string list = (
	oppen_format get_line_length (show_term false) t
);

fun âformat_typeá(t : TYPE) : string list = (
	oppen_format get_line_length (show_type false) t
);

fun âformat_thmá(t : THM) : string list = (
	oppen_format get_line_length show_theorem t
);
=TEX

=SML
fun âformat_term1á (l : int) (t : TERM) : string list = (
	oppen_format (fn () => l) (show_term false) t
);

fun âformat_type1á (l : int) (t : TYPE) : string list = (
	oppen_format (fn () => l) (show_type false) t
);

fun âformat_thm1á (l : int) (t : THM) : string list = (
	oppen_format (fn () => l) show_theorem t
);
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{FINALE}

=SML
end (* of structure PrettyPrinter *);
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%********************************************************************
%--------------------------------------------------------------------

\makeatletter
\def\refstepcounter#1{\stepcounter{#1}\global\edef\@currentlabel{\csname
	p@#1\endcsname\csname the#1\endcsname}}
\makeatother

%\twocolumn[\section{INDEX}]
\section{INDEX}

\footnotesize
\printindex

\onecolumn

\end{document}
