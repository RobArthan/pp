=IGN
********************************************************************************
imp004.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
\TPPtitle{Implementation for Derived Terms}  %% Mandatory field
\TPPref{DS/FMU/IED/IMP004}  %% Mandatory field
\def\SCCSversion{$Revision: 2.13 $
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2005/12/16 10:34:27 $%
}}  %% Mandatory field
\TPPstatus{Draft}
%\TPPstatus{Approved}
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{K.~Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.Arthan & FST Team Leader}
\TPPabstract{This document gives an implementation for functions concerning derived terms that are not used in defining the type $THM$.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item [Issue 1.1 to 1.13]
Initial Drafts
\item [Issue 1.14,1.15]
Changes in response to deskcheck ID0091.
\item [Issue 2.1 (20th November 1991)]
Approved version of issue 1.15.

\item[Issue 2.2, \FormatDate{92/01/20} ] Updated to use new fonts.
\item[Issue 2.3, 2.4 (11th February 1992)]
Added functions $list\_mk\_­\_type$, $strip\_­\_type$,
$is\-\_empty\-\_list$, $dest\-\_empty\-\_list$,
$dest\-\_t$, $dest\-\_f$,
$is\-\_š$, and $dest\-\_š$.
\item [Issue 2.5 (16th March 1992)]
Added stripping combinators.
\item [Issue 2.6 (1st April 1992)]
Changes required by CR0016.
\item [Issue 2.7 (13th April 1992)]
Changes due to CR0017.
\item [Issue 2.8 (13th April 1992)]
Removed a use of $PolyML.makestring$.
\item [Issue 2.9 (3rd June 1992)]
Added literals to $DEST\_TERM$.
\item[Issue 2.10] Use of new INTEGER type.
\item[Issue 2.11] Copyright and banner updates for open source release.
\item[Issue 2.12] PPHol-specific updates for open source release
\item[Issue 2.13] The prefix for private interfaces is now $pp'$ rather than $icl'$.
\item[Issue 2.14] Support for floating point literals.
\end{description}
\subsection{Changes Forecast}
\section{GENERAL}
\subsection{Scope}
This document contains an implementation of some functions for derived terms of ICL HOL, and functions to handle them, called for by section 4.2 of the Release 1 ICL HOL Product Requirement Specification \cite{DS/FMU/IED/DEF004}.
They are not required for the implementation of type $THM$, such derived functions may be found in \cite{DS/FMU/IED/DTD003}.
The high-level specification for the code may be considered
to be given in \cite{DS/FMU/IED/SPC001}.
The design is in \cite{DS/FMU/IED/DTD004}.
\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains an implementation of functions for derived terms of ICL HOL, and functions to handle them.
\subsubsection{Dependencies}
This document's signature is given in \cite{DS/FMU/IED/DTD004}.
\subsubsection{Deficiencies}
None known.
\subsubsection{Possible Enhancements}
None known.
\section{DERIVED TERMS}
=SML
structure ÛTypesAndTermsÝ : TypesAndTerms = struct
=TEX
First gain the items implemented in $pp'TypesAndTerms$.
Opening that structure here allows an invisible (at the user interface level) movement of items between the two structures.
=SML
open pp'TypesAndTerms;
=TEX
\subsection{Generic Stripping Functions}
=SML
fun Ûstrip_leavesÝ (dest:'a -> 'a * 'a) : 'a -> 'a list = (
let	fun aux x = (
	let	val (x1,x2) = dest x
	in
		aux x1 @ aux x2
	end
	handle (Fail _) => [x]);
in
	aux
end);
=TEX
=SML
fun Ûstrip_spine_leftÝ (dest:'a -> 'a * 'a) : 'a -> 'a list = (
let	fun aux x = (
	let	val (x1,x2) = dest x
	in
		aux x1 @ [x2]
	end
	handle (Fail _) => [x]);
in
	aux
end);
=TEX
=SML
fun Ûstrip_spine_rightÝ (dest:'a -> 'a * 'a) : 'a -> 'a list = (
let	fun aux x = (
	let	val (x1,x2) = dest x
	in
		x1 :: aux x2
	end
	handle (Fail _) => [x]);
in
	aux
end);
=TEX

\subsection{Derived Type Functions}
=SML
fun Ûlist_mk_­_typeÝ ([ty]:TYPE list) : TYPE = ty
| list_mk_­_type (ty :: tys) = mk_­_type(ty, list_mk_­_type tys)

| list_mk_­_type ([]:TYPE list) = fail "list_mk_­_type" 3017 [];

val Ûstrip_­_typeÝ : TYPE -> TYPE list = strip_spine_right dest_­_type;

=TEX
\subsection{Truth Values}
=SML
val Ûmk_tÝ : TERM = mk_const("T",BOOL);
fun Ûis_tÝ (tm : TERM) : bool = (tm =$ mk_t);
fun Ûdest_tÝ (tm:TERM) : unit = (
	if tm =$ mk_t
	then ()
	else term_fail "dest_t" 4036 [tm]
);
=TEX
=SML
val Ûmk_fÝ : TERM = mk_const("F",BOOL);
fun Ûis_fÝ (tm : TERM) : bool = (tm =$ mk_f);
fun Ûdest_fÝ (tm:TERM) : unit = (
	if tm =$ mk_f
	then ()
	else term_fail "dest_f" 4037 [tm]
);
=TEX
\subsection{Pairs}
=SML
fun Ûmk_¸_typeÝ ((t1, t2) : TYPE * TYPE): TYPE = mk_ctype("¸", [t1, t2]);

fun Ûdest_¸_typeÝ (ty : TYPE): TYPE * TYPE = (
	case dest_simple_type ty of
	Ctype ("¸",[t1,t2]) => (t1,t2)
	| _ => type_fail "dest_¸_type" 4018 [ty]
);
fun Ûis_¸_typeÝ (ty : TYPE): bool = (
	case dest_simple_type ty of
	Ctype ("¸",[t1,t2]) => true
	| _ => false
);

local
	fun comma (ty1: TYPE) (ty2: TYPE): TERM = (
	mk_const(",", mk_­_type (ty1, mk_­_type (ty2, mk_¸_type (ty1,ty2))))
);
in
fun Ûmk_pairÝ (xy: TERM * TERM) : TERM = (
	(mk_bin_op "mk_pair" 4033 4033 comma xy)
	handle (Fail _) =>
	error "mk_pair" 4033 [fn () => string_of_term (fst xy),	
		fn () => string_of_term (snd xy)]);
end;

val Ûdest_pairÝ : TERM -> (TERM * TERM) = dest_bin_op "dest_pair" 4003 ",";

val Ûis_pairÝ : TERM -> bool = is_bin_op ",";
=TEX
\subsection{(Paired) Ì-abstractions}
=SML
local
fun Uncurry (t1:TYPE) (t2:TYPE) (t3:TYPE):TERM = (
	mk_const("Uncurry",
	mk_­_type(mk_­_type(t1,mk_­_type(t2, t3)), mk_­_type(mk_¸_type(t1, t2), t3)))
);
in
=TEX
The following function can handle an arbitrarily nested paired abstraction.
=SML
fun Ûmk_ÌÝ ((x, y): TERM * TERM) : TERM = (
	(if is_pair x
	then (let val (a,b) = dest_pair x;
		val ta = type_of a and
			tb = type_of b
	in
		mk_app(Uncurry ta tb (type_of y),
			mk_Ì(a, mk_Ì(b, y)))
	end)
	else mk_simple_Ì(x, y))
	handle complaint => 
	case area_of complaint of
	"mk_simple_Ì" => term_fail "mk_Ì" 4016 [x]
	| anm => reraise complaint anm
);
end;
=TEX
=SML
fun Ûdest_ÌÝ (ab : TERM) : TERM * TERM = (
	(if is_simple_Ì ab
	then dest_simple_Ì ab
	else let val (a,b) = dest_app ab
	in
		if is_const a andalso (fst(dest_const a) = "Uncurry")
		then (let val (b1, b2) = dest_Ì b;
			val (b21, b22) = dest_Ì b2
		in
			(mk_pair(b1,b21), b22)
		end)
		else fail "dest_Ì" 4002 []
	end)
	handle (Fail _) => 
	term_fail "dest_Ì" 4002 [ab]
);
=TEX
=SML
fun Ûis_ÌÝ (tm : TERM) : bool = (dest_Ì tm; true) handle (Fail _) => false;
=TEX
\subsection{Generic Binders}
=SML
fun Ûmk_binderÝ (area : string) (msg : int) (binder:TYPE -> TYPE -> TERM) 
	((v, b) : TERM * TERM) : TERM = (
	
	(mk_app (binder (type_of v) (type_of b), 
		mk_Ì(v, b)))
	handle complaint => 
	case area_of complaint of
	"mk_Ì" => pass_on complaint "mk_Ì" area
	| _ => term_fail area msg [v,b]
);

fun Ûdest_binderÝ (area_name : string) (msg : int) (op_name : string)
	(tm : TERM) : TERM * TERM = (
	let	val (binder, abs) = dest_app tm;
		val (var, body) = dest_Ì abs;
	in	if fst (dest_const binder) = op_name
		then (var, body)
		else fail area_name msg []
	end
	handle (Fail _) => term_fail area_name msg [tm]
);

fun Ûis_binderÝ (op_name : string) (tm : TERM) : bool = (
	let	val (binder, bdy) = dest_app tm;
	in	is_Ì bdy
		andalso
		(fst (dest_const binder) = op_name)
	end
	handle (Fail _) => false
);
=TEX
=SML
fun Ûlist_mk_binderÝ (maker : TERM * TERM -> TERM) 
	((tml, tm) : TERM list * TERM) : TERM = (
let	fun aux [] = tm
	| aux (htm :: ttm) = maker(htm, (aux ttm))
in
	aux tml
end);
=TEX
=SML
fun Ûstrip_binderÝ (op_name : string) (tm : TERM) : TERM list * TERM = (
let	fun aux (tm1:TERM) : (TERM list * TERM) = (
	let	val (binder, abs) = dest_app tm1;
		val (var, body) = dest_Ì abs;
	in	if fst (dest_const binder) = op_name
		then (let val (vs,bd) = aux body;
		in
			((var :: vs) , bd)
		end)
		else ([],tm1)
	end
	handle (Fail _) => ([],tm1)
	);
in
	aux tm
end);
fun Ûstrip_simple_binderÝ (op_name : string) (tm : TERM) : TERM list * TERM = (
let	fun aux (tm1:TERM) : (TERM list * TERM) = (
	let	val (binder, abs) = dest_app tm1;
		val (var, body) = dest_simple_Ì abs;
	in	if fst (dest_const binder) = op_name
		then (let val (vs,bd) = aux body;
		in
			((var :: vs) , bd)
		end)
		else ([],tm1)
	end
	handle (Fail _) => ([],tm1)
	);
in
	aux tm
end);
=TEX
\subsection{(Paired) Ì-abstractions II}
=SML
val Ûlist_mk_ÌÝ : (TERM list * TERM) -> TERM = list_mk_binder mk_Ì;

fun Ûstrip_ÌÝ (tm : TERM ) : (TERM list * TERM) = (
let	val (var, body) = dest_Ì tm;
in	(let	val (vs,bd) = strip_Ì body;
	in
		((var :: vs) , bd)
	end)
end
handle (Fail _) => ([],tm)
);
=TEX
\subsection{Conjunctions}
=SML
val Ûmk_±Ý : (TERM * TERM) -> TERM = (
	mk_bin_op "mk_±" 3031 3015 (bin_bool_op "±")
);

val Ûdest_±Ý : TERM -> (TERM * TERM) = (
	dest_bin_op "dest_±" 4032 "±"
);

val Ûis_±Ý : TERM -> bool = is_bin_op "±";

val Ûlist_mk_±Ý : TERM list -> TERM = (
	list_mk_bin_op "list_mk_±" 3031 3015 (bin_bool_op "±")
);

val Ûstrip_±Ý : TERM -> TERM list = strip_bin_op "±";
=TEX
\subsection{Disjunctions}
=SML
val Ûmk_²Ý : (TERM * TERM) -> TERM = (
	mk_bin_op "mk_²" 3031 3015 (bin_bool_op "²")
);

val Ûdest_²Ý : TERM -> (TERM * TERM) = (
	dest_bin_op "dest_²" 4027 "²"
);

val Ûis_²Ý : TERM -> bool = is_bin_op "²";

val Ûlist_mk_²Ý : TERM list -> TERM = (
	list_mk_bin_op "list_mk_²" 3031 3015 (bin_bool_op "²")
);

val Ûstrip_²Ý : TERM -> TERM list = strip_bin_op "²";
=TEX
\subsection{Bi-implications}
=SML
val Ûmk_¤Ý : (TERM * TERM) -> TERM =(
	 mk_bin_op "mk_¤" 3031 3015 (bin_bool_op "=")
);

fun Ûdest_¤Ý (tm : TERM) : (TERM * TERM) = (
let	val (tm1, tm2) = dest_bin_op "dest_¤" 4031 "=" tm
in
	if (type_of tm1 =: BOOL)
	then (tm1, tm2)
	else term_fail "dest_¤" 4031 [tm]
end);

fun Ûis_¤Ý (tm : TERM) : bool = (
let	val (tm1, tm2) = dest_eq tm
in
	(type_of tm1 =: BOOL)
end
handle (Fail _) => false);
=TEX
\subsection{Conditionals}
=SML
fun Ûmk_ifÝ (c : TERM, y : TERM, n : TERM) : TERM = (
let	val cty = type_of c;
	val yty = type_of y
in
	if not(cty =: BOOL)
	then term_fail "mk_if" 3031 [c]
	else if not(yty =: type_of n)
	then term_fail "mk_if" 3012 [y,n]
	else	let	val If = mk_const("Cond", 
			mk_­_type (BOOL,(mk_­_type (yty,(mk_­_type(yty, yty))))));
		in	mk_app(mk_app(mk_app(If, c), y), n)
		end
end);
=TEX
=SML
fun Ûis_ifÝ (tm : TERM) : bool = (
	let	val rand = (fst o dest_app);
		val name = fst(dest_const(rand(rand(rand tm))));
	in	name = "Cond"
	end handle (Fail _) => false
);
=TEX
=SML
fun Ûdest_ifÝ (tm : TERM) : (TERM * TERM * TERM) = (
	(case ((fst o dest_const) ** Combinators.I)(strip_app tm) of
		("Cond", [c, y, n]) => (c, y, n)
	|	_ => fail "dest_if" 4006 [])
	handle (Fail _) => 
	term_fail "dest_if" 4006 [tm]
);
=TEX
\subsection{Floating Point Literals}
=SML
local
	val nat_ty = mk_ctype("î",[]);
	val int_ty = mk_ctype("ú",[]);
	val real_ty = mk_ctype("¯",[]);
	val nat_int_ty = mk_­_type(nat_ty, int_ty);
	val nat_int = mk_const("îú", nat_int_ty);
	val minus_ty = mk_­_type(int_ty, int_ty);
	val minus = mk_const("~‰Z", minus_ty);
	val float_ty = list_mk_­_type[nat_ty, int_ty, int_ty, real_ty];
	val float = mk_const("Float", float_ty);
	fun mk_int (n : INTEGER) : TERM = (
		if	n @< 0
		then	mk_app(minus, mk_int(@~ n))
		else	mk_app(nat_int, mk_î n)
	);
	fun dest_int (tm : TERM) : INTEGER = (
		let	val (f1, a1) = dest_app tm;
		in	if	f1 =$ minus
			then	let	val (f2, a2) = dest_app a1;
				in	if	f2 =$ nat_int
					then	@~(dest_î a2)
					else	fail "" 0 []
				end
			else if	f1 =$ nat_int
			then	dest_î a1
			else	fail "" 0 []
		end
	);	
		
in
fun Ûmk_floatÝ ((x, p, e): INTEGER * INTEGER * INTEGER) :TERM = (
	let	val x_tm = mk_î x;
		val p_tm = mk_int p;
		val e_tm = mk_int e;
	in	list_mk_app(float, [x_tm, p_tm, e_tm])
	end	handle Fail _ => fail "mk_float" 4041 []
);
fun Ûdest_floatÝ (tm : TERM) : INTEGER * INTEGER * INTEGER = (
	(case strip_app tm of
		(flt, [x_tm, p_tm, e_tm]) =>
		(dest_î x_tm, dest_int p_tm, dest_int e_tm)
	|	_ => fail "" 0 [])
	handle Fail _ => term_fail "dest_float" 4042 [tm]
);
fun Ûis_floatÝ (tm : TERM) : bool = (
	(dest_float tm; true) handle Fail _ => false
);
end;
=TEX
\subsection{Let-terms}
We implement $mk\_let$ to carry out three steps:
\begin{enumerate}
\item
Given a list of local bindings, $bindings$, process them with $process\_bindings$, to replace bindings of local functions, e.g. $f\ x\ =\ y$, with bindings of variable structures (actually the replacement will always be with variables) to abstractions, e.g. $f\ =\ Ì\ x\ ·\ y$.
This gives us $bindings'$.
Bindings to variable structures will be left unchanged in this step.
\item
Abstract, as a list, the variable structures of $bindings'$ from the body of the local definition, $bdy$, using $list\_mk\_Ì$.
\item
Apply the abstracted body to the values of $bindings'$,
using the marker function $Let$ to indicate the presence of a local definition construct.
This is done in $aux$ by repeatedly calling $l\_mk\_let$.
\end{enumerate}
=SML
fun Ûmk_letÝ ((bindings, bdy): (TERM * TERM)list * TERM) : TERM = (
let
	fun l_mk_let (t2, t3) = (
		let	val tt2 = type_of t2 and
		 		tt3 = type_of t3;
			val (tt31,tt32) = dest_­_type tt3
		in
			mk_app(mk_app(
			 mk_const("Let",
			 mk_­_type(tt3,mk_­_type(tt2,tt32))),
			 t3), t2)
		end);

	fun aux [] bd = bd
	| aux ((t1, t2) :: blist) bd = aux blist (l_mk_let(t2, bd));

	fun process_bindings ((t1, t2) :: blist) = (
	if not(type_of t1 =: type_of t2)
	then term_fail "mk_let" 3012 [t1,t2]
	else (let fun aux1 (Var v) = ((t1, t2) :: process_bindings blist)
		| aux1 (App cc) = (
		 if is_pair t1
		 then ((t1, t2) :: process_bindings blist)
		 else (let val (f,alist) = strip_app t1 in
			(f, list_mk_Ì (alist, t2)) :: process_bindings blist
		 end
		 handle complaint =>
		 (case area_of complaint of
		 "mk_Ì" => term_fail "mk_let" 4007 [t1]
		 | anm => reraise complaint anm))
		) | aux1 _ = term_fail "mk_let" 4007 [t1]
		;
	in
		aux1 (dest_simple_term t1)
	end
	)) | process_bindings [] = [];
	
	val bindings' = process_bindings bindings;
in
	aux bindings' (list_mk_Ì(map fst bindings', bdy))
end);
=TEX
To destroy a $let\ldots in$, we first strip off as many $Let$'s as
possible, saving the arguments as they are the values bound to.
We then strip off an equal number of abstractions, using $dest\_Ì$, and the varstruct's are the things that the values are bound to.
The remaining term is the body of the local definition.

The function will fail entirely if it attempts to destroy, e.g.
\[let\ x\ =\ 1\ in\ (Let\ p\ q)\]
where $p$ is not an abstraction, and $Let$ is the marker function for
local definitions.
In this case, for instance, it would not return
$([(x,\ 1)],\ (Let\ p\ q))$.
=SML
fun Ûdest_letÝ (tm : TERM) : (TERM * TERM)list * TERM = (
	(if is_bin_op "Let" tm
	then (let
	val ldest_let = dest_bin_op "" 0 "Let";

	fun get_values trm value_list = (
		let	val (bd, vl) = ldest_let trm
		in
			get_values bd (vl :: value_list)
		end
		handle (Fail _) => (value_list, trm));

	fun get_vstructs trm value_list = (
		let	val (rev_vslist,bdy) = (
		 fold (fn (_,(vslist, bd)) => ( 
			let	val (vs, bd') = dest_Ì bd
			in
				((vs :: vslist), bd')
			end))
			value_list
			([], trm))
		in
			(rev rev_vslist, bdy)
		end
	);

	val (values, LetForm) = get_values tm [];

	val (vstructs, body) = get_vstructs LetForm values;
	in
		(combine vstructs values, body)
	end)
	else fail "dest_let" 4009 [])
handle (Fail _) => 
term_fail "dest_let" 4009 [tm]
);
=TEX
=SML
fun Ûis_letÝ (tm : TERM) : bool = (
	(dest_let tm; true) handle (Fail _) => false
);

fun Ûlist_mk_letÝ ((bindings, bdy):((TERM * TERM)list)list * TERM) : TERM = (
	fold mk_let bindings bdy
);

fun Ûstrip_letÝ (trm:TERM): ((TERM * TERM)list)list * TERM = (
let
	fun aux (tm:TERM) (bindings:((TERM * TERM) list)list) = (
		let	val (binding, bdy) = dest_let tm;
		in
			aux bdy (binding :: bindings)
		end
		handle (Fail _) => (rev bindings, tm)
	);
in
	aux trm []
end);		 
=TEX
\subsection{List-terms}
=SML
local
	fun mk_LIST ty = mk_ctype("LIST",[ty])
in
fun Ûmk_listÝ (tml : TERM list): TERM = ((
	if is_nil tml
	then fail "mk_list" 3017 []
	else let
		val tt = type_of(hd tml);
		val cons = mk_const("Cons",mk_­_type(tt, 
			mk_­_type(mk_LIST tt, mk_LIST tt)));
		fun aux (el :: els) = (
			if tt =: type_of el
			then list_mk_app (cons, [el, aux els])
			else term_fail "mk_list" 3012 [hd tml, el]
		) | aux [] = mk_const("Nil", mk_LIST tt);
	in
		aux tml
	end
)
handle complaint => divert complaint "mk_app" "mk_list" 4010 []);
=TEX
=SML
fun Ûmk_empty_listÝ (ty : TYPE) : TERM = mk_const("Nil", mk_LIST ty);
fun Ûdest_empty_listÝ (tm : TERM) : TYPE = (
let	val (nm,ty) = dest_const tm
		handle (Fail _) =>
		term_fail "dest_empty_list" 4034 [tm]
in
	if nm = "Nil"
	then hd(snd(dest_ctype ty))
	else term_fail "dest_empty_list" 4034 [tm]
end);
fun Ûis_empty_listÝ (tm : TERM) : bool = (
	is_const tm andalso
	fst(dest_const tm) = "Nil"
);
=TEX
=SML
fun Ûdest_listÝ (tm : TERM) : TERM list = ((
let
	fun aux (Const ("Nil", _)) = []
	| aux (App (f, a)) = (
		let	val (f1, f2) = dest_app f;
			val (cns, _) = dest_const f1
		in
			if cns = "Cons"
			then (f2 :: aux (dest_simple_term a))
			else fail "dest_list" 4015 []
		end
	) | aux _ = fail "dest_list" 4015 [];
in
	aux (dest_simple_term tm)
end)
handle (Fail _) => 
term_fail "dest_list" 4015 [tm]
);
=TEX
=SML
fun Ûis_listÝ (tm : TERM) : bool = (
	(dest_list tm;true) handle (Fail _) => false
);
end (* local mk_LIST *);
=TEX
\subsection{Enumerated Sets} 
=SML
local
	fun mk_SET ty = mk_ctype("SET",[ty])
in
fun Ûmk_enum_setÝ (tml : TERM list): TERM = ((
	if is_nil tml
	then fail "mk_enum_set" 3017 []
	else let
		val tt = type_of(hd tml);
		val insert = mk_const("Insert",mk_­_type(tt, 
			mk_­_type(mk_SET tt, mk_SET tt)));
		val empty = mk_const("Empty", mk_SET tt);
		fun aux (el :: els) = (if type_of el =: tt
			then list_mk_app (insert, [el, aux els])
			else term_fail "mk_enum_set" 3012 [hd tml, el]
		) | aux [] = empty;
	in
		aux tml
	end
)
handle complaint => divert complaint "mk_app" "mk_enum_set" 4010 []);
=TEX
=SML
fun Ûmk_šÝ (ty : TYPE) : TERM = mk_const("Empty", mk_SET ty);
fun Ûdest_šÝ (tm : TERM) : TYPE = (
let	val (nm,ty) = dest_const tm
		handle (Fail _) =>
		term_fail "dest_š" 4035 [tm]
in
	if nm = "Empty"
	then hd(snd(dest_ctype ty))
	else term_fail "dest_š" 4035 [tm]
end);
fun Ûis_šÝ (tm : TERM) : bool = (
	is_const tm andalso
	fst(dest_const tm) = "Empty"
);

=TEX
=SML
fun Ûdest_enum_setÝ (tm : TERM) : TERM list = ((
let
	fun aux (Const ("Empty", _)) = []
	| aux (App (f, a)) = (
		let	val (f1, f2) = dest_app f;
			val (ins, _) = dest_const f1
		in
			if ins = "Insert"
			then (f2 :: aux (dest_simple_term a))
			else fail "dest_enum_set" 4011 []
		end
	) | aux _ = fail "dest_enum_set" 4011 [];
in
	aux (dest_simple_term tm)
end)
handle (Fail _) => 
term_fail "dest_enum_set" 4011 [tm]
);
=TEX
=SML
fun Ûis_enum_setÝ (tm : TERM) : bool = (
	(dest_enum_set tm;true) handle (Fail _) => false
);
=TEX
=SML
local 
	fun lmk_set_comp t1 _ = mk_const("SetComp", mk_­_type(mk_­_type(
		t1, BOOL), mk_SET t1))
in
	val Ûmk_set_compÝ : TERM * TERM -> TERM = (
		mk_binder "mk_set_comp" 3015 lmk_set_comp
	);

	val Ûdest_set_compÝ : TERM -> TERM * TERM = (
		dest_binder "dest_set_comp" 4013 "SetComp"
	);

	val Ûis_set_compÝ : TERM -> bool = is_binder "SetComp";

end (* local lmk_set_comp *);
=TEX
\subsection{Negations}
=SML
end (* local mk_SET *);
=TEX

=SML
local 
	fun Negate _ = mk_const("³", mk_­_type (BOOL, BOOL));
in
	val Ûmk_³Ý: TERM -> TERM = mk_mon_op "mk_³" 3031 Negate;
end;

fun Ûmk_multi_³Ý (n : int, tm : TERM) : TERM = (
let	fun aux (0,tm) = tm
	| aux (n,tm) = aux (n-1, mk_³ tm)
		handle complaint =>
		pass_on complaint "mk_³" "mk_multi_³";
in
	if n < 0
	then fail "mk_multi_³" 4030 [fn()=>string_of_int n]
	else aux(n,tm)
end);

val Ûdest_³Ý : TERM -> TERM = dest_mon_op "dest_³" 4029 "³";

val Ûis_³Ý : TERM -> bool = is_mon_op "³";

fun Ûdest_multi_³Ý (tm : TERM) : (int * TERM) = (
let	fun aux n tm = if is_³ tm
		then aux (n+1) (dest_³ tm)
		else (n, tm);
in
	aux 0 tm
end);
=TEX
\subsection{(Paired) µ-terms}
=SML
local 
	fun Forall t1 _ = quantifier "µ" t1 BOOL;
in
val Ûmk_µÝ : TERM * TERM -> TERM = mk_binder "mk_µ" 3015 Forall;

val Ûdest_µÝ : TERM -> TERM * TERM = dest_binder "dest_µ" 4017 "µ";

val Ûis_µÝ : TERM -> bool = is_binder "µ";

val Ûlist_mk_µÝ : (TERM list * TERM) -> TERM = list_mk_binder mk_µ;
 
val Ûstrip_µÝ : TERM -> (TERM list * TERM) = strip_binder "µ";

end (* local Forall *);

val Ûstrip_simple_µÝ : TERM -> (TERM list * TERM) = strip_simple_binder "µ";
=TEX
\subsection{(Paired) ¶-terms}
=SML
local
	fun Exists t1 _ = quantifier "¶" t1 BOOL;
in
val Ûmk_¶Ý : TERM * TERM -> TERM = mk_binder "mk_¶" 3015 Exists;

val Ûdest_¶Ý : TERM -> TERM * TERM = dest_binder "dest_¶" 4020 "¶";

val Ûis_¶Ý : TERM -> bool = is_binder "¶";

val Ûlist_mk_¶Ý : (TERM list * TERM) -> TERM = list_mk_binder mk_¶;
 
val Ûstrip_¶Ý : TERM -> (TERM list * TERM) = strip_binder "¶";

end (* local Exists *);

val Ûstrip_simple_¶Ý : TERM -> (TERM list * TERM) = strip_simple_binder "¶";
=TEX
\subsection{Simple and Paired ¶$_1$-terms}
=SML
local
	fun Exists1 t1 _ = quantifier "¶‰1" t1 BOOL;
in
val Ûmk_simple_¶‰1Ý : TERM * TERM -> TERM = (
	mk_simple_binder "mk_simple_¶‰1" 3015 Exists1
);

val Ûdest_simple_¶‰1Ý : TERM -> TERM * TERM = (
	dest_simple_binder "dest_simple_¶‰1" 4019 "¶‰1")
;

val Ûis_simple_¶‰1Ý : TERM -> bool = is_simple_binder "¶‰1";

val Ûmk_¶‰1Ý : TERM * TERM -> TERM = (
		mk_binder "mk_¶‰1" 3015 Exists1
);

val Ûdest_¶‰1Ý : TERM -> TERM * TERM = (
	dest_binder "dest_¶‰1" 4021 "¶‰1"
);

val Ûis_¶‰1Ý : TERM -> bool = is_binder "¶‰1";
end (* local Exists1 *);
=TEX
\subsection{Å-terms}
=SML
local 
	fun Select t1 _ = mk_const("Å", mk_­_type(mk_­_type(
		t1, BOOL), t1))
in
val Ûmk_ÅÝ : TERM * TERM -> TERM = mk_binder "mk_Å" 3015 Select;

val Ûdest_ÅÝ : TERM -> TERM * TERM = dest_binder "dest_Å" 4023 "Å";

val Ûis_ÅÝ : TERM -> bool = is_binder "Å";

val Ûlist_mk_ÅÝ : (TERM list * TERM) -> TERM = list_mk_binder mk_Å;
 
val Ûstrip_ÅÝ : TERM -> (TERM list * TERM) = strip_binder "Å";

end (* local Select *);
=TEX
\subsection{The Type of Destroyed Derived Terms}
=SML
datatype ÛDEST_TERMÝ = ÛDVarÝ of string * TYPE |
	ÛDConstÝ of string * TYPE |
	ÛDAppÝ of TERM * TERM |
	ÛDÌÝ of TERM * TERM |
	ÛDEqÝ of TERM * TERM |
	ÛD´Ý of TERM * TERM |
 	ÛDTÝ |
 	ÛDFÝ |
	ÛD³Ý of TERM |
	ÛDPairÝ of TERM * TERM |
	ÛD±Ý of TERM * TERM |
	ÛD²Ý of TERM * TERM |
	ÛD¤Ý of TERM * TERM |
	ÛDLetÝ of ((TERM * TERM)list * TERM) |
	ÛDEnumSetÝ of TERM list |
 	ÛDšÝ of TYPE |
	ÛDSetCompÝ of TERM * TERM |
	ÛDListÝ of TERM list |
 	ÛDEmptyListÝ of TYPE |
	ÛDµÝ of TERM * TERM |
	ÛD¶Ý of TERM * TERM |
 	ÛD¶‰1Ý of TERM * TERM |
	ÛDÅÝ of TERM * TERM |
	ÛDIfÝ of (TERM * TERM * TERM) |
	ÛDîÝ of INTEGER |
	ÛDFloatÝ of INTEGER * INTEGER * INTEGER |
	ÛDCharÝ of string |
	ÛDStringÝ of string;
=TEX
=SML
local
	val BtoBtoB = mk_­_type(BOOL,mk_­_type(BOOL,BOOL));
	val CHAR_LIST = mk_ctype("LIST",[CHAR]);
in
fun Ûdest_termÝ (tm : TERM ) : DEST_TERM = (
let
	fun aux3 "Nil" ty = (
		if is_ctype ty
		then (let val (s,tyl) = dest_ctype ty
			in
			if (s = "LIST" andalso length tyl = 1)
			then DEmptyList(hd tyl)
			else DConst("Nil",ty)
			end)
		else DConst("Nil",ty)
	) | aux3 "Empty" ty = (
		if is_ctype ty
		then (let val (s,tyl) = dest_ctype ty
			in
			if (s = "SET" andalso length tyl = 1)
			then Dš(hd tyl)
			else DConst("Empty",ty)
			end)
		else DConst("Empty",ty)
	) | aux3 "T" ty = (
		if ty =: BOOL
		then DT
		else DConst("T",ty)
	) | aux3 "F" ty = (
		if ty =: BOOL
		then DF
		else DConst("F",ty)
	) | aux3 nm ty = (if ty =: CHAR
		then (if is_char tm
			then DChar (dest_char tm)
			else DConst (nm, ty))
		else if ty =: CHAR_LIST
		then (if is_string tm
			then DString (dest_string tm)
			else DConst (nm, ty))
		else if ty =: î
		then (if is_î tm
			then Dî (dest_î tm)
			else DConst (nm, ty))
		else DConst (nm,ty)
	);
	fun aux2 (App(f11, f12)) f1 f2 f a = (
		if is_const f11 andalso (fst(dest_const f11) = "Cond")
		then DIf(f12, f2, a)
		else DApp(f, a)
	) | aux2(Var _) f1 f2 f a = DApp(f, a)
	| aux2(SimpleÌ _) f1 f2 f a = DApp(f, a)
	| aux2(Const(co,ty)) f1 f2 f a = (
		case co
		of "´" => D´ (f2, a)
		| "=" => (
			if ty =: BtoBtoB
			then D¤ (f2, a)
			else DEq (f2, a)
		) | "±" => D± (f2, a)
		| "²" => D² (f2, a)
		| "," => DPair (f2, a)
		| "Let" => (
			DLet(dest_let tm)
			handle (Fail _) =>
			DApp(f, a)
		) | "Insert" => (
			DEnumSet(dest_enum_set tm)
			handle (Fail _) =>
			DApp(f, a)
		) | "Cons" => (
			DList(dest_list tm)
			handle (Fail _) =>
			DApp(f, a)
		) | _ => DApp(f, a));

	fun aux1 (App(f1, f2)) f a = (
		aux2(dest_simple_term f1) f1 f2 f a
	) | aux1(Var v) f a = DApp(f, a)
	| aux1 (SimpleÌ c) f a = DApp (f, a)
	| aux1 (Const(co,ty)) f a = (
		case co
		of "Uncurry" => (
			DÌ(dest_Ì tm)
			handle (Fail _) =>
			DApp(f, a)
		) | "µ" => (
			Dµ(dest_µ tm)
			handle (Fail _) =>
			DApp(f, a)
		) | "¶" => (
			D¶(dest_¶ tm)
			handle (Fail _) =>
			DApp(f, a)
		) | "¶‰1" => (
			D¶‰1(dest_¶‰1 tm)
			handle (Fail _) =>
			DApp(f, a)
		) | "Å" => (
			DÅ(dest_Å tm)
			handle (Fail _) =>
			DApp(f, a)
		) | "SetComp" => (
			DSetComp(dest_set_comp tm)
			handle (Fail _) =>
			DApp(f, a)
		) | "Float" => (
			DFloat(dest_float tm)
			handle (Fail _) =>
			DApp(f, a)
		) | "³" => (
			D³ a
		) | _ => DApp(f, a));
		
	fun aux (App (f, a)) = (aux1 (dest_simple_term f) f a)
	| aux (Var v) = DVar v
	| aux (SimpleÌ a) = DÌ a
	| aux (Const (nm,ty)) = aux3 nm ty;
in
	aux (dest_simple_term tm)
end (* let *));
end (* local *);
=TEX
=SML
fun Ûmk_termÝ ((DVar v) : DEST_TERM) : TERM = mk_var v
| mk_term (DConst c) = mk_const c
| mk_term (DApp fa) = mk_app fa
| mk_term (DÌ ab) = mk_Ì ab
| mk_term (DT) = mk_t
| mk_term (DF) = mk_f
| mk_term (DEq ee) = mk_eq ee
| mk_term (D´ imp) = mk_´ imp
| mk_term (D³ n) = mk_³ n
| mk_term (DPair p) = mk_pair p
| mk_term (D± cc) = mk_± cc
| mk_term (D² dd) = mk_² dd
| mk_term (D¤ ee) = mk_¤ ee
| mk_term (DLet ll) = mk_let ll
| mk_term (DEnumSet ttl) = mk_enum_set ttl
| mk_term (Dš ty) = mk_š ty
| mk_term (DSetComp s) = mk_set_comp s
| mk_term (DList ttl) = mk_list ttl
| mk_term (DEmptyList ty) = mk_empty_list ty
| mk_term (Dµ f) = mk_µ f
| mk_term (D¶ e) = mk_¶ e
| mk_term (D¶‰1 e) = mk_¶‰1 e
| mk_term (DÅ s) = mk_Å s
| mk_term (DIf ii) = mk_if ii
| mk_term (DFloat xpe) = mk_float xpe
| mk_term (DChar s) = mk_char s
| mk_term (DString s) = mk_string s
| mk_term (Dî n) = mk_î n;
=TEX
 
=SML
end; (* of TypesAndTerms structure *)
=TEX
=SML
open TypesAndTerms;
=TEX
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}


