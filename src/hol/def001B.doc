=IGN
********************************************************************************
def001B.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
To be included as the section `THE ICL HOL GRAMMAR'
=IGN
 %Z% $Revision: 1.7 $ $RCSfile: def001B.doc,v $ $Date: 2002/10/17 16:20:01 $
=TEX

The grammar of the \ProductHOL{} language is divided into a number of parts which build to form the whole language.
These are given in the subsections of section~\ref{CollectedGrammar}.
Section~\ref{FurtherExplanation} provides additional explanatory material on various aspects of the grammar.

%********************************************************************

\subsection{Collected Grammar} \label{CollectedGrammar}

The grammar for HOL is given in sections~\ref{Term}-\ref{LocalDef}
in terms of the terminal symbols described in section~\ref{LexicalUnits}.
The rules whereby a fragment of text is construed as a sequence of
these terminal symbols are given in section~\ref{LEXICALANALYSIS}.

Sections~\ref{Term} and \ref{Types} give productions for HOL terms
and types.
Sections~\ref{VarStructs}-\ref{LocalDef} give productions for certain
auxiliary nonterminals used in the productions for terms.

\subsubsection{Terms} \label{Term}

To specify the concrete syntax for terms an ambiguous grammar is given,
together with rules to say how any ambiguity in parsing a sentence
should be resolved.  The comments against the grammar productions refer
to the sections where additional grammar rules and explanations are
given.

% The identities of the notes below are surrounded by ! and . characters to
% make them easier to find with editors etc.  The ! and . are redefined
% to allow access to the LaTeX command \ref{} within formal text.
{\catcode`\!=\active
\def!#1.{\ref{#1}}

{
\ftlinepenalty=10000
=GFT BNF
	€Tm›	=
		Binder, BndVars, `∑`, Tm		(* binding construct		!BinderAbbrev. *)
	|	`let`, L, { `and`, L }, `in`, Tm	(* let clause			!LocalDef. *)
	|	`if`, Tm, `then`, Tm, `else`, Tm	(* conditional			!NOTEcond. *)
	|	OTm					(* operator term		!NOTEInTmOp. *)
	|	Tm, `:`, Ty				(* type cast			!Types. *)
	|	Tm, Tm				(* application			!NOTEjuxta. *)
	|	Name					(* variable or constant	!NOTEname. *)
	|	TmQ					(* term quotation		!Quotation. *)
	|	`{`, OptTms, `}`			(* set display			!SetExpr. *)
	|	`{`, V, `|`, Tm, `}`			(* set comprehension		!SetExpr. *)
	|	`(`, Tm, `)`				(* bracketted term		!NOTEbracket. *)
	|	`[`, OptTms, `]`;			(* list display			!ListExpr. *)

	€OTm›	=	(	Tm, InTmOp, Tm	(* infix operation		!NOTEInTmOp. *)
				| PreOp, Tm		(* prefix operation		!NOTEpreop. *)
				| Tm, PostOp	)	(* postfix operation		!NOTEpostop. *)
	€OptTms›   =	[ Tm, { `;`, Tm } ];
=TEX
}

Ambiguities are to be resolved by the following rules:

\begin{enumerate}

\item The alternatives for $Tm$ above are listed in order of increasing
	precedence, i.e. if a given sentence can be parsed according to
	two distinct alternatives then the alternative which comes earlier
	in the list above is to be preferred.  For example, the sentence
		`$ Ãx∑ t  = u $' would be parsed as
		`$ Ãx∑(t  = u)$' rather than as
		`$(Ãx∑ t) = u $' by this rule.
	Note that this rule does not apply to the alternatives for $OTm$,
	which are disambiguated by a system of numeric
	precedences, see rule~\ref{PriorityRule}.

\item \label{TypeRule} A term containing a type must be parsed so that
	each type extends as far to the right as possible.  For
	example, `$t:”â1\;”â2:”â3$' must be parsed so that the types it
	contains are `$”â1\;”â2$' and `$”â3$' (not `$”â1$' and `$”â3$').
	This term might be rewritten as `$(t:”â1\;”â2):”â3$' indicating
	that types `$”â1\;”â2$' and `$”â3$' are equivalent, and that
	`$t$' has that type.


%	Also, sections !NOTEpreop.\ and !NOTEpostop.
\item \label{PriorityRule} Infix, prefix and postfix function
	applications (see section~!NOTEInTmOp.) associate according to their
	associated precedences.  Higher values of precedence bind more
	tightly than lower values.  Equal values of precedence associate
	to the right.  Brackets may be used to force a different order
	of association.  Defining the precedences of the standard HOL
	operators is outside the scope of this document.

\item Juxtaposition (see section~!NOTEjuxta.) associates to the
	left.  For example, if a sentence can be parsed as both
	`$(f\;t)\;u$' and `$f(t\;u)$', the former is preferred.

\end{enumerate}
}
%********************************************************************

\subsubsection{Types} \label{Types}

Terms may be given a type explicitly using a `type cast' of the form ``$Tm, $`:'$, Ty$''.
This may be done for purely documentary purposes, or to force a less general type than would otherwise be inferred, or to disambiguate the use of aliases.

The syntax for types is given by the nonterminal $Ty$ in the following
grammar.
Note that the
grammar for types is ambiguous, but the text that follows shows how to
disambiguate it.

=GFT BNF
	€Ty›		=	Name
			|	TyQ
			|	Typars, Name
			|	Ty, InTyOp, Ty
			|	`(`, Ty, `)`;
		
	€Typars›	=	Ty
			|	`(`, Ty, { `,`, Ty }, `)`;
=TEX

Type variables and nullary type constructors are included under the first alternative, {\em Name}, here; the name is construed as a type variable name if it begins with a prime (`$\verb!'!$') character.
In general a type is either such a name, or a quotation (see section~\ref{Quotation}), or a type constructor applied to a list of types.

Non-nullary type constructors are normally used in a postfix format.
If a Binary type constructor is declared as ``infix'' then it should be used infix unless preceded by `\$'.
If a type constructor has lexical status ``nonfix'' then it is written postfix.
If a non-nullary type constructor is given any other lexical status then the lexical status must be suspended using `\$' before it can be used, and it will then be usable only as a postfix operator.
If a type constructor takes more than one argument, the arguments are given as a comma-separated list enclosed in brackets.
Brackets may also be used in more general ways, e.g.: to group the arguments of infix type constructors.

The binary type constructors for product, sum, and function (written as `∏',
`$+$' and `≠' respectively) are typical examples of infix type constructors.

Ambiguities in the grammar for types are resolved using the following rules:

\begin{enumerate}
\item
The postfix form is of higher precedence than the infix.
\item
Infix type constructors are assigned a precedence when their infix status is declared (see section~\ref{ControlofLexicalAnalysisandParsing}).
Higher values of precedence bind more tightly than lower values.
Equal values of precedence associate to the right. 
\end{enumerate}

%********************************************************************

\subsubsection{Variable Structures} \label{VarStructs}

`Variable Structures' (often abbreviated as `varstructs') may be used instead of simple variables in any variable binding construct where the variable to be bound would otherwise have a type formed by the ordered pair type constructor, `$∏$'.
In these circumstances it is convenient to allow distinct names to be bound to each element of the pair, so that these names may be used in the scope of the binding instead of expressions involving the projection functions from pairs ($Fst$,$Snd$).
This effect is achieved by writing the variable names in the declaration part of the variable binding construct combined using the pair constructor `,' and enclosed in brackets.
The effect may be iterated, yielding a variable structure of arbitrarily nested pairs (consistent with type contraints).

A varstruct or any of its subterms may be given a type cast.

Examples of this notation are:

=GFT HOL terms
	¨Ã (a,b):(Ó ∏ Ó) ∑ f(a,b)Æ;
	¨Ã (a:Ó,(b,(c,d),e)) ∑  f(a,b,c,d,e)Æ;
=TEX

This precise syntax for varstructs is described by the following BNF syntax rule for the nonterminal $V$.

=GFT BNF
	€V›	= 	V1, [ `:`, Ty ];
	€V1›	= 	Name
		|	`(`, V, { `,`, V }, `)`;
=TEX

Bindings composed using varstructs are often called `paired abstractions'.

\subsubsection*{Interpretation}

Varstructs can only be interpreted by giving the meaning of the variable binding construct (in this case a `paired abstraction') in which they occur.

A paired $Ã$-term is a syntactic abbreviation for (i.e. is parsed into the same term as) an application of the constant $Uncurry$ to a simple $Ã$-abstraction formed by abstracting over each of the constituent variables in turn.
The function $Uncurry$ converts a (so-called `curried') function of two arguments into a function of a single argument (which must be a pair).

For example: 
=INLINEFT
¨Ã (a, b) ∑ tÆ
=TEX
\ yields the same term as
=INLINEFT
¨Uncurry (Ãa∑Ãb∑t)Æ
=TEX
.

Where a binding construct is formed using a constant declared as a binder, the same effect takes place on the underlying $Ã$-term.

E.g.
=INLINEFT
¨µ (a, b) ∑ pÆ
=TEX
\ yields the same term as
=INLINEFT
¨$µ (Uncurry (Ãa∑Ãb∑p))Æ
=TEX
.

Similar effects apply to other constructs which involve variable binding, such as let clauses and set abstractions.

=INLINEFT
¨let (a,b) = c in tÆ
=TEX
\ yields the same term as
=INLINEFT
¨Let(Uncurry(Ã (a, b) ∑ t))cÆ
=TEX
\ (cf. section~\ref{LocalDef}).

%********************************************************************

%\newpage
\subsubsection{Binder Abbreviation} \label{BinderAbbrev}

Where $Ã$-terms or nested terms formed by application of a constant (or variable) with lexical status of `binder' appear, the inner occurrences of `$Ã$' or of the repeated binder may be omitted.
This is also permitted when varstructs rather than simple variables are used in the bindings.
This facility is not available for set abstractions.

Since a type in a cast applied to a varstruct extends as far as possble to the right, it may be necessary in some cases to add additional punctuation to delimit the type.
This may be done with brackets or by the use of a semicolon.
Where only the last of a series of variables has a type cast applied to it, the cast is deemed to apply to all variables preceding it up to the first which either has a type cast or is followed by a semi-colon.

=GFT HOL terms
	¨µ x y z xâ1 yâ1 ∑ f(x, y, z, xâ1, yâ1)Æ;
	¨µ x : BOOL ∑ x ≤ ≥ xÆ;
	¨µ (x,y) ∑ P x yÆ;
	¨µ x y : BOOL; ∑ x § y ≤ x ≤ yÆ;
	¨µ x y : BOOL; z xâ1 : Ó ∑ TÆ;
	¨µ (x : BOOL, y : ) ∑ TÆ;
	¨µ (x,y) : (BOOL ∏ BOOL) ∑ TÆ;
	¨µ (x,y) ((z,xâ1),yâ1) ∑ TÆ;
	¨µ (x,y) (z,xâ1) (yâ1,zâ1) : BOOL ∏ BOOL; xâ2 yâ2; zâ2 : Ó ∑ TÆ;
	¨µ x : BOOL SET ∑ x Ä {T,F}Æ;
	¨µ (x : BOOL) SET ∑ ≥ (SET = SET) ¥ xÆ;
	¨µ x : BOOL; SET ∑ ≥ (SET = SET) ¥ xÆ;
=TEX

Note that the effect of the second semicolon in the last example is to stop the type constraint on $zâ2$ applying to $xâ2$ and $yâ2$.
However, in the first example, where there is no cast, the variables need not have the same type.

The intention of the grammar of binders is that the binder ranges over
a series of blocks of bound variables, which are given by rule $BndVars$
below.  Each block may declare many names or many paired abstractions
and is optionally typed. The blocks are separated by semicolons.

=GFT BNF
	€BndVars›	=	Block, {`;`, Block };
	€Block›		=	V1, { V1 }, [ `:`, Ty ];
=TEX


%--------------------------------------------------------------------

\subsubsection*{Interpretation}

The simple $Ã$-abstraction
=INLINEFT
¨Ãx∑tÆ
=TEX
\ yields a term formed by the primitive `$mk\_abs$' constructor with the terms $x$ and $t$ as its arguments.
All variable binding constructs in the \ProductHOL\ concrete syntax are syntactic abbreviations for less concise expressions in which all variable binding is done by simple $Ã$-expressions.

The following four \ProductHOL\ fragments yield the same \ProductHOL\ TERMs.

=GFT HOL terms
	¨µ xâ1 xâ2 xâ3 xâ4 ∑ TÆ;
	¨µ xâ1∑ µ xâ2∑ µ xâ3∑ µ xâ4 ∑ TÆ;
	¨µ xâ1∑ (µ xâ2∑ (µ xâ3∑ (µ xâ4∑ T)))Æ;
	¨($ µ)(Ã xâ1∑(($ µ) Ã xâ2∑(($ µ) Ã xâ3∑(($ µ) Ã xâ4 ∑ T))))Æ;
=TEX

The use of `\$' in the above to suppress the binder status of the name\footnote {Note that giving binder status to a name affects all uses of that name, whether as a constant or as a variable.} `$µ$' is discussed in section~\ref{LexicalAnalysis}.

%********************************************************************

\subsubsection{Local Definitions} \label{LocalDef}

A {\bf let} clause assigns a local name to stand for the value of an arbitrary HOL term within the body of the clause.
Where the value to be assigned to the local variable is a function then the value may either be expressed as a $Ã$-expression.
Alternatively the function may be defined in the {\bf let} clause by an equation in which the function is applied on the left of the equation to one or more variable structures which serve as formal parameters to the function.
The variables occurring in the varstructs are binding occurrences whose scope is the right hand side of the equation.

A single {\bf let} clause may introduce several local definitions in parallel, separated by the terminal `and'.

Examples of local definitions are:

=GFT HOL terms
	¨let (a,b) = c in f(a)Æ;
	¨let (a:Ó,(b,(c,d),e)) = exp in f(a,b,c,d,e)Æ;
	¨let x = exp1 in exp2Æ;
	¨let f x = exp1 in exp2Æ;
	¨let f (xâ1,xâ2) (yâ1,(yâ2,yâ3),yâ4) = exp1 in exp2Æ;
	¨let x = exp1
	and f x = exp2
	and g f (x,b) (yâ1,(yâ2,yâ3),yâ4) = exp3
	in exp3Æ;
=TEX

For a local function definition the function name is followed by formal argument patterns, a sequence of variable structures in the same form as would be permitted in a `$Ã$'-expression.
Production $L$ below gives the part of the clauses between the {\bf let} or {\bf and} keywords and the `in'.

=GFT BNF
	€L›	=	Vs `=`, Tm;
	€Vs›	=	V		| Name, V1s;
	€V1s›	=	V1		| V1s, V1;
=TEX
Thus if there is a list of varstructs after the {\bf let} or {\bf and}
the first one must just be a name. 
%--------------------------------------------------------------------

\subsubsection*{Interpretation}

A {\bf let} clause abbreviates the application of the constant $Let$ to a lambda abstraction.

The following pairs of expressions yield the same \ProductHOL\ TERMs.

=GFT Identical HOL TERMs
	¨let x = t in uÆ;
	¨Let(Ã x ∑ u) tÆ;
=TEX

=GFT Identical HOL TERMs
	¨let x = t and y = u and z = v in wÆ;
	¨Let(Let(Let(Ã x y z ∑ w)t)u)vÆ;
=TEX

=GFT Identical HOL TERMs
	¨let x = t in let y = u in let z = v in wÆ;
	¨Let(Ã x ∑ Let(Ã y ∑ Let(Ã z ∑ w)v)u)tÆ;
=TEX

Note that the defining expressions on the right hand side of the equations of the let clause are not in the scope of the variable binding created.
This applies to all the expressions involved in multiple local declarations formed using {\bf and} in the {\bf let} clause.

Thus in :
=INLINEFT
¨let f x = f x in bÆ
=TEX
\ the local definition is not recursive since the second occurrence of $f$ is not in the scope of the local declaration.

\subsection{Explanations of the Grammar} \label{FurtherExplanation}

The above sections gave the full grammar of \ProductHOL{} and the description
of parts of it.  The next sections complete the description.

%********************************************************************

\subsubsection{Lists} \label{ListExpr}

The square bracket notation is for lists.  Elements of lists
are separated by semicolons, and the empty list is allowed.

%--------------------------------------------------------------------

\subsubsection*{Interpretation}

The list `$[t;\;u;\;v\;\ldots]$' stands for
`$Cons\;t(Cons\;u(Cons\;v(\ldots Nil)\ldots)))$', and the empty list
`$[\;]$' stands for `$Nil$.'

%********************************************************************

\subsubsection{Set Terms} \label{SetExpr}

Set terms may be given in two forms.
Either by enumeration of the values, or by set comprehension.
%See also section~\ref{CompareSets}.
Examples of set terms are as follows.

=GFT HOL terms
	¨{1; 4; 9; 16; 55}Æ;
	¨{x | ∂ y : Ó ∑ y º 5 ± x = y * y}Æ;
	¨{(x,y) | x æ y}Æ;
=TEX

%--------------------------------------------------------------------

\subsubsection*{Interpretation}

The set `$\{t;\;u;\;v\;\ldots\}$' stands for
`$Insert\;t(Insert\;u(Insert\;v(\ldots Empty)\ldots)))$', and the empty
set `$\{\;\}$' stands for `$Empty$.'

A set comprehension stands for the constant $SetComp$ applied to a lambda
term.  The set  `$\{x|p\}$' stands for `$SetComp(Ã x
∑ p)$.'

%********************************************************************

\subsubsection{Conditionals} \label{NOTEcond}

Conditionals are of the form `$if$ condition $then$ consequence $else$ alternative.'
%See also section~\ref{CompareCond}.

%--------------------------------------------------------------------

\subsubsection*{Interpretation}

The conditional form stands for an application of the polymorphic constant
`$Cond$'.  The conditional `$if\;t\;then\;u\;else\;v$' stands for the term
`$Cond\;\;t\;\;u\;\;v$.'

%********************************************************************

\subsubsection{Juxtaposition} \label{NOTEjuxta}

Juxtaposition stands for the application of a function
to an argument, e.g. $f\,a$ stands for application of $f$ to $a$.
This corresponds to the primitive $mk\_comb$.

%--------------------------------------------------------------------

%\subsubsection*{Interpretation}

%********************************************************************

\subsubsection{Infix, Prefix and Postfix Operators}
\label{NOTEInTmOp} \label{NOTEpreop} \label{NOTEpostop}

As described in section~\ref{ControlofLexicalAnalysisandParsing} the user may declare that a name\footnote
{Note that operator names need not necessarily be constants;
they may be variables with associated fixity syntax.}
is to be used with infix,
prefix or postfix syntax.
A numeric precedence is assigned to the name in such a declaration
and is used to determine the order of
application, as described in rule~\ref{PriorityRule} of
section~\ref{Term}, and illustrated by the following examples.

Assuming that `$I1$', `$I4$', `$R2$', `$R5$', `$S3$' and `$S6$' are two
infix, two prefix and two postfix operators respectively with
precedences as given in the name (i.e., precedences of 1, 4, 2, 5, 3 and
6 respectively) then the brackets in the following examples are
redundant.

=GFT HOL fragments
	(t I4 u) I1 v		t I1 (u I4 v)		(t I4 u) I4 v
	R2 (R5 t)		R5 (R2 t)
	(t S6) S3		(t S3) S6
	(R5 t) S3		R2 (t S6)
	(R5 t) I1 (u S6)	R2 ((t I4 u) S3)
=TEX

%--------------------------------------------------------------------

\subsubsection*{Interpretation}

These forms simply provide additional ways of expressing
function application. For example, in each of the following three
examples the two terms shown are equivalent. In these examples,
we use the `\verb"$"' symbol to suppress the infix, prefix or
postfix status of an identifier (as described in
section~\ref{LEXICALANALYSIS}).

=GFT Equivalent HOL terms
	 l   i_op   r 
	 ($i_op   l)   r 
=TEX

=GFT Equivalent HOL terms
	 pre_op   a 
	$pre_op   a 
=TEX

=GFT Equivalent HOL terms
	 a   post_op 
	 $post_op   a 
=TEX


%********************************************************************

\subsubsection{Names of Variables and Constants} \label{NOTEname}

This alternative is for variables and constants, it includes any identifier
which has not been declared to have special syntactic status
(as defined in section~\ref{ControlofLexicalAnalysisandParsing})
and which is not escaped by preceding it with a `\verb"$"'.

For example with typical binder declarations, `\verb"$"$µ$' the name of
the universal quantification operation considered as a constant in
its own right, whereas `$µ$' is not a name.
%--------------------------------------------------------------------

%\subsubsection*{Interpretation}

%********************************************************************

\subsubsection{Grouping} \label{NOTEbracket}

Brackets may be used to override the precedence and precedence rules.

%--------------------------------------------------------------------

%\subsubsection*{Interpretation}

%********************************************************************

\subsubsection{Quotation} \label{Quotation}

\Product{} is a multilingual system which supports mixed language working.

The lexical terminals `$TmQ$' and `$TyQ$' in the grammar of \ProductHOL{} represent points at which TERMs or TYPEs respectively may be entered by nested quotation in some other language.


%--------------------------------------------------------------------

%\subsubsection*{Interpretation}

