=IGN
********************************************************************************
imp014.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
%%%%% YOU MAY WANT TO CHANGE POINT SIZE IN THE FOLLOWING:
\documentclass[a4paper,11pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{latexsym}
\usepackage{epsf}
\makeindex

%%%%% YOU WILL WANT TO CHANGE THE FOLLOWING TO SUIT YOU AND YOUR DOCUMENT:

\def\Title{Implementation of Unification}

\def\AbstractText{This contains the Standard ML implementation of the unification function}

\def\Reference{DS/FMU/IED/IMP014}

\def\Author{D.J. King}


\def\EMail{C/O {\tt rda@lemma-one.com}}

\def\Phone{C/O +44 7497 030682}

\def\Abstract{\begin{center}{\bf Abstract}\par\parbox{0.7\hsize}
{\small \AbstractText}
\end{center}}

%%%%% YOU MAY WANT TO CHANGE THE FOLLOWING TO GET A NICE FRONT PAGE:
\def\FrontPageTitle{ {\huge \Title } }
\def\FrontPageHeader{\raisebox{16ex}{\begin{tabular}[t]{c}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year\\\strut\\
\end{tabular}}}

%%%%% THE FOLLOWING DEFAULTS WILL GENERALLY BE RIGHT:

\def\Version{\VCVersion}
\def\Date{\FormatDate{\VCDate}}

%% LaTeX2e port: =TEX
%% LaTeX2e port: % TQtemplate.tex
%% LaTeX2e port: \documentstyle[hol1,11pt,TQ]{article}
%% LaTeX2e port: \ftlinepenalty=9999
\def\Hide#1{}
%% LaTeX2e port: \def\Bool{``$\it{:}bool\,$''}
%% LaTeX2e port: \makeindex
%% LaTeX2e port: \TPPproject{FST PROJECT}  %% Mandatory field
%% LaTeX2e port: %\TPPvolume{}
%% LaTeX2e port: %\TPPpart{}
%% LaTeX2e port: \TPPtitle{Implementation of Unification}  %% Mandatory field
%% LaTeX2e port: \TPPref{DS/FMU/IED/IMP014}  %% Mandatory field
%% LaTeX2e port: \def\SCCSversion{$Revision: 2.9 $%
%% LaTeX2e port: }
%% LaTeX2e port: \TPPissue{\SCCSversion}  %% Mandatory field
%% LaTeX2e port: \TPPdate{\FormatDate{$Date: 2004/07/18 12:30:22 $%
%% LaTeX2e port: }}  %% Mandatory field (with sensible default)
%% LaTeX2e port: \TPPstatus{Draft}
%% LaTeX2e port: %\TPPstatus{Approved}
%% LaTeX2e port: \TPPtype{Specification}
%% LaTeX2e port: \TPPkeywords{HOL}
%% LaTeX2e port: \TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%% LaTeX2e port: %\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
%% LaTeX2e port: \TPPauthorisation{R.D.~Arthan & FST Team Leader}
%% LaTeX2e port: \TPPabstract{
%% LaTeX2e port: This contains the Standard ML implementation of the unification function}
%% LaTeX2e port: %\TPPabstractB{}
%% LaTeX2e port: %\TPPabstractC{}
%% LaTeX2e port: %\TPPabstractD{}
%% LaTeX2e port: %\TPPabstractE{}
%% LaTeX2e port: %\TPPabstractF{}
%% LaTeX2e port: \TPPdistribution{\parbox[t]{4.0in}{%
%% LaTeX2e port:       Library \\ R.D. Arthan\\ D.J. King}}
%% LaTeX2e port: 
%% LaTeX2e port: %\TPPclass{CLASSIFICATION}
%% LaTeX2e port: %\def\TPPheadlhs{}
%% LaTeX2e port: %\def\TPPheadcentre{}
%% LaTeX2e port: %def\TPPheadrhs{}
%% LaTeX2e port: %\def\TPPfootlhs{}
%% LaTeX2e port: %\def\TPPfootcentre{}
%% LaTeX2e port: %\def\TPPfootrhs{}
%% LaTeX2e port: 
%% LaTeX2e port: \begin{document}
%% LaTeX2e port: \TPPsetsizes
%% LaTeX2e port: \makeTPPfrontpage
%% LaTeX2e port: 
%% LaTeX2e port: \vfill
%% LaTeX2e port: \begin{centering}
%% LaTeX2e port: 
%% LaTeX2e port: \bf Copyright \copyright\ : Lemma 1 Ltd. \number\year
%% LaTeX2e port: 
%% LaTeX2e port: \end{centering}

\begin{document}

\headsep=0mm
\FrontPage
\headsep=10mm

\setcounter{section}{-1}

\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history}  % to get section number `0.3'
\begin{description}

\item[Issue 2.1 (1991/08/20)]
This is an approved version of issue 1.6.

\item[Issue 2.2 (1991/10/02)]
Fixed bug in unify which caused an error message not to
have the unknown parameters filled in.

\item[Issue 2.3 (1991/11/25) 20 November 1991]
Changed the representation of the substitution function
from a binary tree to sparse array. This increases
the speed significantly.

\item[Issue 2.4 (1991/11/28) 28 November 1991]
Fixed bug in $extend$.

\item[Issue 2.5 (1992/01/20) \FormatDate{92/01/20} ] Updated to use new fonts.

\item[Issue 2.6 (2001/07/17) \FormatDate{01/07/16} ] Prototyping type-checking performance enhancements.

\item[Issue 2.7 (2002/10/17)] Copyright and banner updates for open source release.
\item[Issue 2.8 (2002/10/17)] PPHol-specific updates for open source release
\item[Issue 2.9 (2004/07/18)] Space and speed performance tweak to {\em sub\_type}.
\item[Issue 2.10 (2005/04/24)] Now uses {\tt app} rather than {\tt map} as appropriate.
\item[2014/07/23]
Augmented old RCS version numbers in the changes history with dates.
Dates will be used in place of version numbers in future.

%%%% END OF CHANGES HISTORY %%%%
\end{description}
\subsection{Changes forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}

This document contains the Standard ML code for implementing
Unification. It corresponds to the
detailed design of Unification as specified in \cite{DS/FMU/IED/DTD014}.

\subsection{Introduction}

\subsubsection{Background and Purpose}

The function $Unification$ is required by the type
inferrer to identify all the types in a partially typed
term. This document contains the Standard ML code
for implementing this function and its supporting functions
and is produced in response to the specification
of $Unification$ provided in \cite{DS/FMU/IED/DTD014}.

\subsubsection{Dependencies}

The Standard ML code in this document depends on the literate script
contained in \cite{DS/FMU/IED/DTD014} for the signature of Unification.

\subsubsection{Possible Enhancements}

None.

\subsubsection{Deficiencies}

None known.

\section{THE STRUCTURE $Unification$}

The $Unification$ structure binds together the function
unify and various subsidiary functions which are used
to define unify. The structure has the signature $Unification$
defined in \cite{DS/FMU/IED/DTD014}.

We now start the structure $Unification$ which contains
the unification algorithm and some associated data types
and utilities.
=SML
structure ÛUnificationÝ : Unification = struct
=TEX
The substitution supporting functions and the substitution
type use the structure $DynamicArray$.
=SML
open DynamicArray;
=TEX

\subsection{The type $EXTYPE$}

The type of extended types (i.e. types containing type unknowns) is
the following type $EXTYPE$.
=SML
datatype ÛEXVARÝ = ÛKnownÝ of string | ÛUnknownÝ of int;

datatype ÛEXTYPEÝ = ÛExVartypeÝ of EXVAR | ÛExTypeÝ of string * (EXTYPE list);
=TEX

The substitution is represented by a sparse array of
extended types. The substitution which takes a type unknown
onto an extended type is implemented as an array of
extended types, the array index
corresponding to the type unknown (a natural number).
A substitution which does not take a type unknown onto anything
is represented by an empty cell. The sparse array function
$sub\_opt$ returns $Nil$ when an empty cell is encountered.

=SML
type ÛSUBSÝ = EXTYPE DYNAMIC_ARRAY;
=TEX
The following function is needed to detect an error
case during unification. It detects whether or not the
type unknown occurs in any of the extended types which
repeated application of the substitution  gives, returning
true or false.
=SML
fun Ûtyvars_setÝ (phi:SUBS) (ExVartype(Known _)) (tvn : int) = false
|   tyvars_set phi (ExVartype(Unknown tvn')) (tvn : int) = (
	case sub_opt (phi, tvn') of
		Nil => (tvn = tvn')
	|	Value ty => tyvars_set phi ty tvn
) | tyvars_set phi (ExType(_, tyl)) (tvn : int) = any tyl (fn ty => tyvars_set phi ty tvn);
=TEX
\subsection{Substitutions}

The unification algorithm works using so-called
substitutions. These are functions from
type unknowns to (extended) types.
They have the property that they differ from
the identity function (on the set of all type unknowns)
in only finitely many places.

When the type inference process is complete (and also
for formatting error messages), we need to be able
to convert extended types back into types using the
most general typing which has been computed as a
substitution.

=SML
fun Ûextype_to_typeÝ (phi : SUBS) (namemap : (int * string) list)
	 (ExVartype(Known x)) = (
	mk_vartype x
) | extype_to_type phi namemap (ExVartype(Unknown x)) = (
	case sub_opt (phi, x) of
		Nil => (mk_vartype (lassoc3 namemap x)
			handle Fail msg =>
				fail "extype_to_type" 14003 [fn () => string_of_int x])
		| Value y => extype_to_type phi namemap y
) | extype_to_type phi namemap (ExType(s, l)) = (
	mk_ctype(s, map (extype_to_type phi namemap) l)
);
=TEX
The inverse of this function is $type\_to\_extype$.
=SML
fun Ûtype_to_extypeÝ (ty : TYPE) : EXTYPE = (
	let	fun aux ty = (
		if is_vartype ty
		then
			let	val x = dest_vartype ty
			in
				ExVartype(Known x)
			end
		else
			let	val (s,tyl) = dest_ctype ty
			in
				 ExType(s, map aux tyl)
			end
		)
	in
		aux ty
	end
);
=TEX
$sub\_type$ applies a substitution to a type repeatedly until
the substitution ceases to change the type.
For efficiency, it is coded to raise an exception in subtrees of the type where no change occurs.
=SML
fun Ûsub_typeÝ (phi : SUBS) (exty : EXTYPE) : EXTYPE  = (
	let	exception NoChange;
		fun do_ty (ExVartype(Known _)) = (
			raise NoChange
		) | do_ty (ExVartype(Unknown tvn)) = (
			case sub_opt (phi, tvn) of
				Nil =>  raise NoChange
			|	Value ty =>  (do_ty ty handle NoChange => ty)
		) | do_ty (ExType(s, tyl)) = (
			ExType(s, do_tyl false [] tyl)
		) and do_tyl changed acc [] = (
			if	changed
			then	rev acc
			else	raise NoChange
		) | do_tyl changed acc (exty::more) = (
			let	val exty' = do_ty exty;
			in	do_tyl true (exty'::acc) more
			end	handle NoChange => do_tyl changed (exty::acc) more
		);
	in	do_ty exty handle NoChange => exty
	end
);
=TEX
$new\_subs$ creates a new substitution array. The size
$sz$ is passed to the sparse array package and determines
the array size. The array is an indexed array of
lists. The larger the array, the shorter the lists in the
array, and hence the faster the lookup time. If the
array is too large, then space is wasted. A value of
100 for $sz$ gives reasonable performance for the ICL HOL
type inferrer. $init\_subs$ returns a substitution to the
identity function.

=SML
fun Ûnew_subsÝ (sz:int) : SUBS = array sz;
val Ûinit_subsÝ  : SUBS -> unit = scratch;
=TEX

The substitution array implements a form of structure sharing.
For example, a substitution:\\
\ \\
$\{?1 \mapsto ?3, ?2 \mapsto ?3\}$\\
\ \\
extended by $?3 \mapsto (?4­?5­?6)$, yields\\
\ \\
$\{?1 \mapsto ?3, ?2 \mapsto ?3, ?3 \mapsto (?4­?5­?6)\}$,\\
\ \\
whereas
without structure sharing (which was the case in the previous
version of this algorithm and the HOL prototype), the
substitution was represented as:\\
\ \\
$\{?1 \mapsto (?4­?5­?6), ?2 \mapsto (?4­?5­?6)\}$.\\
\ \\
Each occurrence of the unknown is substituted during unification.
With structure sharing, the substitution is deferred.
To find what $?1$ maps to, two look-ups to
the substitution array are required, the first look-up yields
$?3$, the second, $(?4­?5­?6)$. Further look-ups using
$?4$, $?5$, and $?6$ will fail (yielding Nil). This gives
$(?4­?5­?6)$ as the type which $?1$ maps to.

In the prototype, it was possible and valid to have the
substitution $\{?1 \mapsto ?2, ?2 \mapsto ?1\}$. This
situation is undesirable since loop detection is difficult.
A solution is to represent type unknowns which are equivalent
by an equivalence class. The nominated
representative of an equivalence
class is the terminal of the graph. e.g., the representative
of\\
\ \\
$\{?1 \mapsto ?3, ?2 \mapsto ?3\}$\\
\ \\
is $?3$. So the extension of this substitution by
$\{?4 \mapsto ?1\}$, is represented as\\
\ \\
$\{?1 \mapsto ?3, ?2 \mapsto ?3, ?4 \mapsto ?3\}$.\\
\ \\
Note that the substitution is not extended when the type unknown is
the same as the equivalence class representative.

As a happy side-effect of the above functional considerations,
{\it look\_up\_eq\_class} and {\it extend} together implement a special
case of Tarjan's path-compression algorithm and this ensures that the
$\mapsto$-chains in the substitution never have more than one edge.

=SML
fun Ûlook_up_eq_classÝ (phi : SUBS) (tvn : int) : int OPT = (
	case sub_opt (phi, tvn) of
		Value (ExVartype(Unknown tvn')) =>
			look_up_eq_class phi tvn'
		|Value Other => Nil
		|Nil => Value tvn
);
=TEX
$extend\,\phi\,tvn\,ty$ is $\phi$ modified to send
$tvn$ to $ty$.
An exception is raised when solving equations
of the form $?1­?1=?1$ which arise from
terms like ``$f f$'' (for $f$ a variable).
This is the so-called ``occurs check''. Note that it guarantees
that the substitution array contains no loops. i.e., that if
$R : î \leftrightarrow î$ denotes the relation between
type unknown names such that $x\  R\  y\  \leftrightarrow\  y$ occurs somewhere
in $sub\_opt (\phi,\  x)$, then the transitive closure $R^+$ of $R$
is irreflexive, i.e., $³ x\  R^+\  x$ for all x.
To see this note that $extend\  \phi\  tvn$ is never called when
tvn already has an entry in $\phi$. (See the use of
$extend$ in $unify$).
This gives us Tarjan's path-compression algorithm without having
to change any links when reading the data structure that represents
the substitution.
=SML
fun ÛextendÝ (phi : SUBS) (tvn : int) (ty : EXTYPE) : unit = (
	case ty of
	ExVartype(Unknown tvn') => (
		case look_up_eq_class phi tvn' of
		Value tvn'' =>
			if tvn = tvn'' then ()
			else update (phi, tvn, ExVartype(Unknown tvn''))
		|Nil =>	if tyvars_set phi ty tvn
			then fail "unify" 14002 []
			else update (phi, tvn, ty))
	| ExVartype(Known s) => (update (phi, tvn, ty))
	| ExType (ty', tyl) => (
		if tyvars_set phi ty tvn
		then fail "unify" 14002 []
		else update (phi, tvn, ty))
);
=TEX
\subsection{The Unification Algorithm}
The work of unification is done by the function
$unify$ below.
Given a substitution, $\phi$, which is an idempotent
substitution giving the most general solution
of some system, $S$, of type equations,
and a pair of types, $ty$ and $ty'$, $unify$ computes
an idempotent substitution
which is the most general solution of
$S\,À\,\{ty = ty'\}$, provided such a solution exists.

The algorithm is fairly straightforward.
If either type argument is a type unknown then if that unknown is not
changed by $\phi$ we simply extend $\phi$ to send
that type unknown to the other type argument.
If one of the arguments is a type unknown and it is
changed by $\phi$ we must recursively unify its
image under $\phi$ with the other argument.
If neither argument is a type unknown then they must
both have the same top-level structure and we
recursively examine the corresponding
subtypes of the two arguments (if any) to find
the solution.

If the types cannot be unified, fail is called which
raises an exception with the contructor ``Fail''.
=SML
fun ÛunifyÝ (phi : SUBS) ((ty, ty') : EXTYPE * EXTYPE) : unit = (
	case ty of
		ExVartype(Unknown tvn) => (
			case sub_opt (phi, tvn) of
				Nil => (
					extend phi tvn ty'
				) |Value phitvn => (
					unify phi (phitvn, ty'))
	) |	ExVartype(Known kty) => (
			case ty' of
				ExVartype(Known kty') => (
					if kty = kty'
					then ()
					else fail "unify" 14001 [fn () => kty,
								 fn () => kty']
			) |	ExVartype(Unknown _ ) => unify phi (ty', ty)
			|	ExType(s, _) => fail "unify" 14001 [fn () => kty,
								    fn () => s]
	) |	ExType(s, tyl) => (
			case ty' of
				ExVartype _ => unify phi (ty', ty)
			|	ExType(s', tyl') => (
					if s = s' andalso length tyl = length tyl'
					then	app (unify phi) (combine tyl tyl')
					else	fail "unify" 14001 [fn () => s,
								 fn () => s']
			)
	)
);
=TEX

The function $list\_unify$ applied to a list $[t1,t2,...,tn]$
finds the unification $t1$ and $t2$, the unification of
$t2$ with $t3$, and so on, folding in the substitution.
At the end of the process, the substitution function
yielded is the unification of all the types in the list.
The substitution $phi$ is yielded as a side-effect of
unify, and the function returns $unit$.

=SML
fun Ûlist_unifyÝ (phi : SUBS) (tyl : EXTYPE list) : unit = (
let	fun aux (x1::x2::xs) = (
		let	val sd = unify phi (x1, x2);
		in
			aux (x2::xs)
		end)
	  | aux _ = ();
in
	aux tyl
end);
=TEX
\subsection{Further Utilities}

The following two utilities support a supply of unique names.

=SML
local
	val name_supply : int ref = ref 0;
in
	fun Ûstart_againÝ() = name_supply := 0;
	fun Ûnext_nameÝ () = (
		let	val x = !name_supply
		in	(name_supply := x+1; x)
		end
	);
end;
=TEX

=SML
fun Ûnew_nameÝ (names : 'a list) : ('a * int) list = (
	map (fn x => (x, next_name())) names
);
=TEX

The function $replaced$ below has the same functionality
as the function $replaced$ in the HOL prototype
\cite{DS/FMU/IED/SML007}, but has been recoded. The
value constructors in the prototype version are
now pure functions and cannot be used for pattern
matching. Hence we require the test $is\_vartype$ here.
This makes the implementation of the function look quite
different from the prototype, although it does the same
thing.

=SML
fun ÛreplacedÝ (ty : TYPE) : EXTYPE = (
	let	val rename = lassoc3(new_name (type_tyvars ty));
		fun aux ty = (
			if is_vartype ty
			then
				let	val x = dest_vartype ty;
				in
					ExVartype(Unknown(rename x))
				end
			else
				let	val	(s,tyl) = dest_ctype ty;
				in
					ExType(s, map aux tyl)
				end)
	in
		aux ty
	end
);
=TEX
=SML
end; (* of structure Unification *)
=TEX

\twocolumn[\section{INDEX OF DEFINED TERMS}]
\printindex
\end{document}

=IGN
The following code is provided for diagnostic purposes:

fun ÛpsubÝ()  =
let	fun aux lwr upr pos =
		if pos > upr then nil
		else (sub_opt(ti_subs, pos))::(aux lwr upr (pos+1))
	val lwr = lindex ti_subs;
	val upr = uindex ti_subs;
in
	aux lwr upr lwr
end;

fun ÛshowsubsÝ() =
let	val sublist = psub();
	fun aux ((Nil)::sl) i = (i, Nil)::(aux sl (i+1))
	  | aux ((Value x)::sl) i = (i, Value x)::(aux sl (i+1))
	  | aux nil _ = nil
in
	aux sublist 0
end;

fun Ûtyvars_setÝ (phi:SUBS) (ExVartype(Known _)) (tvn : int) = false
|   tyvars_set phi (ExVartype(Unknown tvn')) (tvn : int) = (
	case sub_opt (phi, tvn) of
		Nil => (tvn = tvn')
	|	Value ty => tyvars_set phi ty tvn
) | tyvars_set phi (ExType(_, tyl)) (tvn : int) = any tyl (fn ty => tyvars_set phi ty tvn);

fun ÛgsubÝ id =
let	val sublist = psub();
	fun aux ((Nil)::sl) i = if i = id
		then (i, Nil)::(aux sl (i+1))
		else (aux sl (i+1))
	  | aux ((Value x)::sl) i = if i = id
		then (i, Value x)::(aux sl (i+1))
		else	if tyvars_set ti_subs x id
			then (i, Value x)::(aux sl (i+1))
			else (aux sl (i+1))
	  | aux nil _ = nil
in
	aux sublist 0
end;


fun ÛfrÝ tm = let val f = frees tm in (f, map type_of f, type_of tm) end;





