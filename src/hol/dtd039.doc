%  dtd039.doc  %Z% $Date$ $Revision$ $RCSfile$
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST Project}  %% Mandatory field
\TPPtitle{Detailed Design for the Theory of Lists}  %% Mandatory field
\def\TPPheadtitle{Detailed Design for the \cr
Theory of Lists}
\TPPref{DS/FMU/IED/DTD039}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}  %% Mandatory field
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{D.J. King & WIN01}  %% Mandatory field
%\TPPauthors{R.D. Arthan & WIN01\\K. Blackburn & WIN01}
\TPPauthorisation{R.D. Arthan & FST Team Leader}
\TPPabstract{This document gives a detailed design for the 
theory ``list''.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item [Issue 1.1 - 1.3]
Initial drafts.
\item[Issue 1.4, 22 November 1991]
Draft for review.

\item[Issue 1.5, \FormatDate{92/01/20} ] Updated to use new fonts.
\item[Issue 1.6 (23rd January 1992)]
$new\_axiom$, $simple\_new\_type\_defn$ and $new\_type\_defn$
are
all changed to take lists of keys, rather than single ones.

\item[Issue 1.7 (14 May 1992)] Use correct quotation symbols.

\end{description}
\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains a detailed design
for the theory ``list'',
called for in \cite{DS/FMU/IED/HLD011}.
The design is implemented in \cite{DS/FMU/IED/IMP039}.

\subsection{Introduction}

This document introduces design for the aggregation of
information into a sequence. The type $LIST$ is
introduced. The concrete representation of a list
is a pair, the first element denoting a function which
given a number will return the nth item in the list; the
second element is a number denoting the length of the
list. The defining properties of a list are that there
is a list which has length zero, namely $Nil$, and that
there is a function $Cons$ which is the list constructor with
the defining properties that:
\begin{itemize}
\item
a constructed list will never be empty and
\item
the constructor function is one to one and
\item
recursion can be applied to all lists.
\end{itemize}
The concrete representation of lists is used for introducing
the new type. No further use is made of it in this document
or is likely to be used in subsequent documents.
\subsubsection{Purpose and Background}
This document contains the detailed design for the theory ``list''.
This defines the type $LIST$, and the operators upon it.
\subsubsection{Dependencies}
This document depends on \cite{DS/FMU/IED/IMP038},
and the theory design tools of \cite{DS/FMU/IED/DTD035}.
\subsubsection{Deficiencies}
None.
\subsubsection{Possible Enhancements}
None known.
\section{THE THEORY CONTENTS}
\subsection{Theory Name}

The theory name is that specified in \cite{DS/FMU/IED/HLD011}
for the theory of lists.
=THDOC
req_name "list" (Value "Ó");
=DESCRIBE
The theory ``€list›'' defines a type of lists,
operations on lists,
and some associated theories and tactics.
=ENDDOC
\subsection{Basic Definitions}
=THDOC
req_const("IsListRep",î((Ó≠'a)∏Ó)≠BOOLÆ);
req_defn(["IsListRep","is_list_rep_def"], ([], ¨
	∂ nil:(Ó≠'a)∏Ó∑∂ cons:'a≠((Ó≠'a)∏Ó)≠((Ó≠'a)∏Ó) ∑
	(IsListRep nil) ±
	(µx∑IsListRep x
		¥ (µh:'a∑≥cons h x = nil)) ±
	(µx y∑IsListRep x ± IsListRep y
		¥ (µa b∑ cons a x = cons b y
			§ (a=b ± x=y))) ±
	(µx∑IsListRep x
		¥ (µh:'a∑IsListRep (cons h x))) ±

	(µp:((Ó≠'a)∏Ó)≠BOOL ∑ p nil ±
		(µm∑ p m ¥ (µh∑ p (cons h m)))
			¥ (µn∑ IsListRep n ¥ p n))
Æ));
=DESCRIBE
The representation type of lists, as given by
$€IsListRep›$ is a function from the concrete type for
lists onto BOOL.
The representation type for lists is a pair: the first
element is a function which given a number, $n$ yields
the ``nth'' element of the list; the second is the length of
the list. The defining properties of lists are encapsulated
in the predicate of the definition. This concrete
representation is only useful for introducing the type
of lists, and no use of it is envisaged elsewhere.
=ENDDOC

=THDOC
req_type("LIST",1);
req_defn(["LIST","list_def"],([],¨∂ f:'a LIST≠((Ó≠'a)∏Ó)∑ TypeDefn IsListRep fÆ));
=DESCRIBE
The type of lists, $€'a LIST›$ is given by the representation
function $IsListRep$, and is useful for representing
sequences of objects with some arbitrary type.
=ENDDOC

=THDOC
req_const("Nil",î'a LISTÆ);
req_const("Cons",î'a ≠ 'a LIST ≠ 'a LISTÆ);
req_defn(["Nil","Cons","nil_cons_def"], ([],
¨	(µ x : 'a; list:'a LIST ∑ ≥Cons x list = Nil) ±
	(µ x1 x2 : 'a; list1 list2 : 'a LIST ∑
		Cons x1 list1 = Cons x2 list2
			§ (x1=x2 ± list1=list2)) ±
	(µp:'a LIST≠BOOL ∑ p Nil ±
		(µlist:'a LIST∑ p list ¥ (µx∑ p (Cons x list)))
			¥ (µlist∑ p list))
Æ));
=DESCRIBE
The HOL constant $€Nil›$ is the empty list.
The HOL constant $€Cons›$ is the list contructor, taking
an element and attaching it to the front of a list.
=ENDDOC

\subsection{Definitions of Operations on Lists}
=THDOC
req_const("Length",î'a LIST≠ÓÆ);
req_defn(["Length","length_def"], ([], ¨
	Length (Nil:'a LIST) = 0 ±
	µ h:'a; list:'a LIST∑
		Length (Cons h list) = Length list + 1Æ));
=DESCRIBE
$Length$ returns the length of a list.
=ENDDOC

=THDOC
req_const("Hd",î'a LIST≠'aÆ);
req_defn(["Hd","hd_def"], ([], ¨
	µh:'a; list:'a LIST∑ Hd (Cons h list) = hÆ));
=DESCRIBE
The loosely defined function
$Hd$ returns the first element of a list. 
=ENDDOC

=THDOC
req_const("Tl",î'a LIST≠'a LISTÆ);
req_defn(["Tl","tl_def"], ([], ¨
	µh:'a; list:'a LIST∑ Tl (Cons h list) = listÆ));
=DESCRIBE
$Tl$ returns the list after the first element has
been removed.
=ENDDOC

=THDOC
req_const("Append",î'a LIST≠'a LIST≠'a LISTÆ);
req_defn(["Append","append_def"], ([], ¨
	(µlist:'a LIST∑ Append Nil list = list) ±
	(µh:'a; list:'a LIST; list':'a LIST∑
	  Append (Cons h list) list' = Cons h (Append list list'))Æ));
req_alias ("@", ¨AppendÆ);
req_infix (300, "@");
=DESCRIBE
$Append$ joins one list to another. The infix form is
the ``@'' symbol, similar to the Standard ML list
conjunction.
=ENDDOC

=THDOC
req_const("Rev",î'a LIST≠'a LISTÆ);
req_defn(["Rev","rev_def"], ([], ¨
	Rev (Nil:'a LIST) = Nil ±
	µ h:'a; list:'a LIST∑
		Rev (Cons h list) = Append (Rev list) [h]Æ));
=DESCRIBE
$Rev$ reverses the order of elements in a list.
=ENDDOC

=THDOC
req_const("Map",î('a≠'b)≠'a LIST≠'b LISTÆ);
req_defn(["Map","map_def"], ([], ¨
	(µg:'a≠'b∑ Map g Nil = Nil) ±
	(µh:'a; g:'a≠'b; list:'a LIST∑
	  Map g (Cons h list) = Cons (g h) (Map g list))Æ));
=DESCRIBE
$Map(f,\  list)$ applies $f$ to each of the elements
of $list$ producing a list of results.
=ENDDOC

=THDOC
req_const("Fold",î('a≠'b≠'b)≠'a LIST≠'b≠'bÆ);
req_defn(["Fold","fold_def"], ([], ¨
	(µg:'a≠'b≠'b; x:'b∑ Fold g Nil x = x) ±
	(µh:'a; g:'a≠'b≠'b; x:'b; list:'a LIST∑
		Fold g (Cons h list) x = g h (Fold g list x))Æ));
=DESCRIBE
$Fold(f,\  list, x)$ applies the function f to each of the
elements of $list$ folding in the result.
=ENDDOC

=THDOC
req_const("Split",î('a∏'b)LIST≠('a LIST∏'b LIST)Æ);
req_defn(["Split", "split_def"], ([], ¨
	Split (Nil:('a∏'b)LIST) = (Nil,Nil) ±
	(µ list:('a∏'b) LIST; h1:'a; h2:'b∑
	 Split (Cons (h1,h2) list) =
		(Cons h1 (Fst(Split list)),
			Cons h2 (Snd(Split list))))Æ));
=DESCRIBE
$Split$ splits a list of pairs into a pair of lists
(of equal length).
=ENDDOC

=THDOC
req_const("Combine",î'a LIST≠'b LIST≠('a∏'b)LISTÆ);
req_defn(["Combine","combine_def"], ([], ¨
	Combine (Nil:'a LIST) (Nil:'b LIST) = Nil ±
	(µ h1:'a; h2:'b; list1:'a LIST; list2:'b LIST∑
		Combine (Cons h1 list1) (Cons h2 list2) =
		Cons (h1,h2) (Combine list1 list2))Æ));
=DESCRIBE
The loosely defined function $Combine$ takes a pair
of equal length lists and yields a list of pairs -- the
opposite of $Split$.
=ENDDOC

\subsection{Theorems}
=THDOC
req_thm("list_induction_thm", ([], ¨
	µp:'a LIST≠BOOL ∑ p Nil ±
		(µlist:'a LIST∑ p list ¥ (µx∑ p (Cons x list)))
			¥ (µlist∑ p list)Æ));
=DESCRIBE
This defines induction for lists. If $p$ is true for
an empty list, and if $p$ being true for $list$ implies
that it is true for $list$ prefixed with some element, then
$p$ is true for any list.
=ENDDOC
=THDOC
req_thm("list_prim_rec_thm", ([], ¨
	µn:'b∑µc:'a≠'b≠'a LIST≠'b∑ ∂%down%1f:'a LIST≠'b∑
		f Nil = n
	±	µlist:'a LIST∑µa:'a∑
			f(Cons a list) = c a (f list) listÆ));
=DESCRIBE
This is the principle of primitive recursion for lists.
=ENDDOC
=THDOC
req_thm("list_clauses", ([], ¨
	µ x1 x2 list1 list2∑
	≥ Cons x1 list1 = [] ±
	≥ [] = Cons x1 list1 ±
	(Cons x1 list1 = Cons x2 list2
		§ x1 = x2 ± list1 = list2) ±
	Hd (Cons x1 list1) = x1 ±
	Tl (Cons x1 list1) = list1
Æ));
=DESCRIBE
This theorem gives rules for simplifying lists, expressed
as rewrite rules. 
=ENDDOC
=THDOC
req_thm("list_cases_thm", ([], ¨
	µ list1∑ list1 = [] ≤
	∂ x list2∑ list1 = Cons x list2Æ));
=DESCRIBE
Any list is either empty, or can be expressed as
a construction of an element to some list.
=ENDDOC


\section{THE SIGNATURE}
=DOC
signature €List› = sig
=DESCRIBE
This is the signature in which the theory ``list'' is declared.
=ENDDOC

\subsection{Definitions}
=DOC
	val €is_list_rep_def› : THM
	val €nil_cons_def› : THM
	val €length_def› : THM
	val €hd_def› : THM
	val €tl_def›  : THM
	val €append_def› : THM
	val €map_def› : THM
	val €fold_def› : THM
	val €split_def› : THM
	val €combine_def› : THM
	val €rev_def› : THM
=DESCRIBE
These Standard ML variables are bound to the definitions
in the theory ``list''.
=ENDDOC

\subsection{Theorems}
=DOC
	val €list_clauses› : THM
	val €list_cases_thm› : THM
	val €list_induction_thm› : THM
	val €list_prim_rec_thm› : THM
=DESCRIBE
These Standard ML variables are bound to the theorems
in the theory ``list''.
=ENDDOC

\subsection{Tactics}
=DOC
	val €list_induction_tac› : TERM -> TACTIC
=DESCRIBE
This tactic implements induction over lists :
to prove $t[x]$ it suffices to prove $t[Nil]$ and to prove $t[Cons\  h\  x]$ on the
assumption that $t[x]$. The term argument must
appear free in the conclusion of the
goal but not in its assumptions.
=FRULE 2 Tactic
list_induction_tac ¨xÆ
˜
{ á } t[x] 
˜
{ á } t[Nil] ; strip{t[x], á} t[Cons h x]
=TEX
=SEEALSO
$LIST\_INDUCTION\_T$
=FAILURE
39001	?0 is not a term variable
39002	?0 does not appear free in the conclusion of the goal
39003	?0 appears free in the assumptions of the goal
=ENDDOC
=DOC
val €LIST_INDUCTION_T› : TERM -> (THM -> TACTIC) -> TACTIC;
=DESCRIBE
This implements induction over lists as
a tactical. The term argument must appear free in the conclusion of the
goal but not in its assumptions.
The inductive hypothesis is passed to the tactic generating function
given by the second argument.
=FRULE 2 Tactic
LIST_INDUCTION_T ¨xÆ ttac
˜
{ á } t[x] 
˜
{ á } t[Nil] ; ttac(t[x] Ù t[x])
             ({ á } t[Cons h x])
=TEX
=USES
Most commonly used with $asm\_tac$ to avoid the stripping up of
the inductive hypothesis which occurs with $list\_induction\_tac$.
=SEEALSO
$list\_induction\_tac$
=FAILURE
39001	?0 is not a term variable
39002	?0 does not appear free in the conclusion of the goal
39003	?0 appears free in the assumptions of the goal
=ENDDOC

=SML
end (* of signature List *);
=TEX

\section{TEST POLICY}
The functions in this document should be tested according to the
general criteria list out in \cite{DS/FMU/IED/PLN008}, using the
tests in \cite{DS/FMU/IED/MDT039}.
The theories produced should be checked by the theory design tools
of \cite{DS/FMU/IED/DTD035}, against the theory design provided.

\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}


