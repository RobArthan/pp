%  %Z% $Date$ $Revision$ $RCSfile$
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Elementary Theory of Arithmetic}  %% Mandatory field
\TPPref{DS/FMU/IED/IMP038}  %% Mandatory field
\def\SCCSversion{$Date$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{R.D.~Arthan & WIN01}  %% Mandatory field
\TPPauthorisation{R.B.~Jones & FMU Manager}
\TPPabstract{}
\TPPdistribution{\parbox[t]{4.0in}{%
	    R.D.~Arthan \\ K.~Blackburn
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History} 
\begin{description}
\item[Issue 1.5 (25 August 1991)] First draft
\item[Issue 1.9 (25 August 1991)] First version with design and test
\item[Issue 1.10 (16th October 1991)] Brought in line with issue 1.3 design.
\item[Issue 1.11 (17th October 1991)] 
Lost $fun\_rel\_thm$ to \cite{DS/FMU/IED/IMP037}.
\item[Issue 1.13 (15 November 1991)] Corrected definition of $>$. Corrected $lt\-\_trans\-\_thm$.
\item[Issue 1.14 (\FormatDate{91/11/21%
})] Change names of complete induction material (now called
course\--of\--values induction). Added theorem about uniqueness of
division and modulus.
\item [Issue 1.16 (10 December 1991)]
Added a further structure split, to enable SUN 3 builds.

\item[Issue 1.18, \FormatDate{92/01/20} ] Updated to use new fonts.
\item[Issue 1.19 (23rd January 1992)]
$new\_axiom$, $simple\_new\_type\_defn$, $new\_type\_defn$
all changed to take lists of keys, rather than single ones.
\item[Issue 1.20 (27th January 1992)]
Corrected arithmetic theorem names.
\item [Issue 1.21 (18th  March 1992)]
Used $simple\_taut\_tac$ rather than $taut\_tac$.
\item [Issue 1.22(26th March 1992)]
changed to use new proof context material.
\item [Issue 1.23 (2nd April 1992)]
Changes required by CR0016.
\item [Issue 1.25 (13th April 1992)]
Changes due to CR0017.
\item[Issue 1.26 (15 May 1992)] Use correct quotation symbols.
\item [Issue 1.27,1.28 (21st May 1992)]
Rearranging proof contexts.
\item[Issue 1.30 (24th June 1992)]
Renamings from issue 1.6 of \cite{DS/FMU/IED/WRK038},
mostly proof context name changes.
\end{description}
\subsection{Changes Forecast}

Under development.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the implementation of the elementary
theory of arithmetic for the ICL HOL proof development system.
\subsection{Introduction}
\subsection{Purpose and Background}
This document will be called for in the yet-to-be-written
\cite{DS/FMU/IED/DTD038}.
\subsection{Dependencis}
The document depends on the theory of pairs given in
\cite{DS/FMU/IED/DTD037}.
\subsection{Deficiencies}
Operator precedences and names need reviewing against requirements.
\subsection{Possible Enhancements}
It might be better to give a loose definition of subtraction.
\section{PROLOGUE}
In this section we create the new theory and begin the structure which
contains the theory.
We actually use three structures, all called $Ó$
(so the second overwrites the first, and the third the second),
and where the third includes the second includes the first.
This is to ease processing.

=SML
structure €Ó› = struct
=TEX
First of all we make sure we are in the right theory
and have the right proof context:
=SML
val _ = open_theory"pair";
val _ = new_theory"Ó";
val _ = push_merge_pcs ["'propositions",
		"'simple_abstractions"];
=TEX
\section{INTRODUCING THE TYPE Ó}
In this section we define the type Ó.
The following lemma asserts the existence of what will be the representations
of the $Suc$ and $0$. The characterising property it uses
is the first step on the way from the axiom of infinity to the Peano
postulates and brings out the fact that the successor function is not onto.
=SML
val €lemma1› : THM = (
push_goal([], ¨
∂suc:IND≠IND; zero:IND∑ OneOne suc ± (µx∑≥suc x = zero)
Æ);
=TEX
=SML
a(strip_asm_tac infinity_axiom THEN simple_∂_tac¨f:IND≠INDÆ 
	THEN asm_rewrite_tac[]);
a(asm_ante_tac¨≥ Onto (f:IND≠IND)Æ THEN rewrite_tac[onto_def]
	THEN REPEAT strip_tac);
a(simple_∂_tac¨y:INDÆ THEN strip_tac THEN conv_tac(ONCE_MAP_C eq_sym_conv) 
	THEN asm_rewrite_tac[]);
pop_thm()
);
=TEX
The next lemma is for use in loosely specifying the defining predicate
for the new type. It asserts that for some
subset of $IND$, analogues of the Peano postulates hold for
appropriate representatives of $Suc$ and $0$. The lemma is formulated
for use with $new\_spec$ to define $Is\_Ó\_Rep$.

Note that the lemma is slightly stronger than what is strictly necessary, in
that the last two conjuncts are not relativised to the subset determined
by $Is\_Ó\_Rep$. This makes later proofs a little easier.
=SML
val €is_Ó_rep_thm› : THM = (
push_goal([], ¨
∂Is_Ó_Rep:IND ≠ BOOL∑
	∂ zero suc∑
		(Is_Ó_Rep zero ± µn∑Is_Ó_Rep n ¥ Is_Ó_Rep(suc n))
	±	(µn∑Is_Ó_Rep n ¥ ≥ suc n = zero)
	±	OneOne suc
	±	(µp∑	p zero ± (µm∑p m ¥ p (suc m))
		 ¥	(µn∑Is_Ó_Rep n ¥ p n))
Æ);
=TEX
=SML
(* First bring in the lemma: *)
a(strip_asm_tac(rewrite_rule[one_one_def] lemma1));
(* Now exhibit the witnesses: *)
a(simple_∂_tac¨Ãi:IND∑µq∑ q zero ± (µn∑ q n ¥ q (suc n)) ¥ q iÆ);
a(simple_∂_tac¨zero:INDÆ);
a(simple_∂_tac¨suc:IND≠INDÆ);
(* Get rid of beta-redexes and strip the goal: *)
a(rewrite_tac[one_one_def] THEN REPEAT strip_tac);
(* 4 subgoals. 1: *)
a(DROP_NTH_ASM_T 3 (ante_tac o all_simple_µ_elim) THEN asm_rewrite_tac[]);
(* 2: *)
a(asm_rewrite_tac[]);
(* 3: *)
a(POP_ASM_T ante_tac THEN asm_rewrite_tac[]);
(* 4: *)
a(POP_ASM_T (ante_tac o simple_µ_elim¨p:IND≠BOOLÆ) THEN asm_rewrite_tac[]);
=TEX
=SML
pop_thm()
);
=TEX
We now define $Is\_Ó\_Rep$:
=SML
val €is_Ó_rep_def› : THM = new_spec(["Is_Ó_Rep","is_Ó_rep_def"], 1, is_Ó_rep_thm);
=TEX
In order to use $Is\_Ó\_Rep$, to define the new type, we need to show
that the subset of $IND$ which it determines is non-empty:
=SML
val €Ó_exist_thm› : THM = (
push_goal([], ¨∂x:IND∑ Is_Ó_Rep xÆ);
=TEX
=SML
a(strip_asm_tac is_Ó_rep_def);
a(simple_∂_tac ¨zero:INDÆ THEN asm_rewrite_tac[]);
pop_thm()
);
=TEX
Now we can introduce the new type:
=SML
val €Ó_def› : THM = new_type_defn(["Ó","Ó_def"], "Ó", [], Ó_exist_thm);
=TEX
\section{THE PEANO POSTULATES}
We now prove the existence of a zero-element and a successor
function for the new type satisfying the Peano postulates.
This is just a simple matter of lifting already-proved properties of the
representations of these objects up to the new type, and like most such
simple activities it is rather more difficult than one would hope.

The theorem is formulated for use to define $Zero$ and $Suc$ with
$new\_spec$. Note that the names $Zero$ and $Suc$ used here,
do, and must, agree with those used by $icl'suc\_conv$ as defined
in \cite{DS/FMU/IED/DTD006}.

=SML
val €zero_suc_thm› : THM = (
push_goal([], ¨
	∂ Zero:Ó; Suc:Ó ≠ Ó∑
		(µn∑ ≥ Suc n = Zero)
	±	OneOne Suc
	±	(µp∑ p Zero ± (µm∑p m ¥ p (Suc m)) ¥ (µn∑p n))
Æ);
=TEX
=SML
(* We use the type lemmas to bring abstraction and representation functions *)
(* for the new type into the assumptions: *)
a (strip_asm_tac (simple_¥_match_mp_rule type_lemmas_thm Ó_def));
a (strip_asm_tac (rewrite_rule[one_one_def] is_Ó_rep_def));
(* Now we can introduce the witnesses: *)
a (simple_∂_tac ¨(abs:IND ≠ Ó)zeroÆ);
a (simple_∂_tac ¨Ãa:Ó∑(abs:IND ≠ Ó)(suc((rep:Ó ≠ IND) a))Æ);
a (asm_rewrite_tac[one_one_def] THEN REPEAT strip_tac);
(* 3 subgoals: 1: *)
a (lemma_tac ¨Is_Ó_Rep((rep:Ó ≠ IND) n)Æ THEN_LIST [asm_rewrite_tac[], id_tac]);
(* asm_rewrite_tac proves the lemma so ony 1 subgoal *)
a (lemma_tac ¨Is_Ó_Rep(suc((rep:Ó ≠ IND)n))Æ);
(* 1.1: *)
a (DROP_NTH_ASM_T 5 (ante_tac o simple_µ_elim¨(rep:Ó ≠ IND)nÆ) THEN
	REPEAT strip_tac);
(* 1.2: *)
a contr_tac;
a (lemma_tac¨(rep:Ó ≠ IND)((abs:IND ≠ Ó)(suc(rep n)))= rep(abs zero)Æ
	THEN_LIST [asm_rewrite_tac[], id_tac]);
(* asm_rewrite_tac proves the lemma so ony 1 subgoal *)
a (GET_NTH_ASM_T 10 (ante_tac o simple_µ_elim¨suc((rep:Ó ≠ IND)n):INDÆ) THEN
	REPEAT strip_tac);
a (GET_NTH_ASM_T 11 (ante_tac o simple_µ_elim¨zero:INDÆ) THEN
	REPEAT strip_tac);
a (GET_NTH_ASM_T 9 (ante_tac o simple_µ_elim¨((rep:Ó ≠ IND)n)Æ) THEN
	REPEAT strip_tac);
a (GET_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
(* Completes 1.2 and 1. 2: *)
a (lemma_tac¨(rep:Ó ≠ IND)x1 = rep x2Æ);
(* 2.1: *)
a (lemma_tac¨(suc:IND≠IND)((rep:Ó ≠ IND)x1) = suc(rep x2)Æ);
(* 2.1.1: *)
a (DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[] THEN REPEAT strip_tac);
(* only 1 subgoal. *)
a (lemma_tac ¨(rep:Ó ≠ IND)((abs:IND ≠ Ó)(rep x2)) = rep x2 
		± rep(abs(rep x1)) = rep x1Æ
	THEN_LIST [asm_rewrite_tac[], id_tac]);
a (GET_NTH_ASM_T 3 (ante_tac o simple_µ_elim¨(rep:Ó ≠ IND)x2Æ) THEN
	REPEAT strip_tac);
a (GET_NTH_ASM_T 4 (ante_tac o simple_µ_elim¨(rep:Ó ≠ IND)x1Æ) THEN
	REPEAT strip_tac);
a (GET_NTH_ASM_T 6 (ante_tac o app_fun_rule ¨rep:Ó ≠ INDÆ) 
	THEN asm_rewrite_tac[]);
(* Completes 2.1.1. 2.1.2: *)
a (GET_NTH_ASM_T 4 (ante_tac o list_simple_µ_elim[¨(rep:Ó ≠ IND)x1Æ, 
	¨(rep:Ó ≠ IND)x2Æ]) THEN
	REPEAT strip_tac);
(* Completes 2.1.2. 2.2: *)
a (POP_ASM_T (ante_tac o app_fun_rule ¨abs:IND ≠ ÓÆ) 
	THEN asm_rewrite_tac[]);
(* Completes 2. 3: *)
a (lemma_tac¨µa:IND∑Is_Ó_Rep a ¥ Is_Ó_Rep a ± p ((abs:IND ≠ Ó) a)Æ);
(* 2 subgoals. 3.1: *)
a (lemma_tac¨µa:IND∑Is_Ó_Rep a ± p ((abs:IND ≠ Ó) a) ¥
		Is_Ó_Rep (suc a) ± p (abs (suc a))Æ);
(* 2 subgoals. 3.1.1: *)
a (REPEAT strip_tac);
(* 2 subgoals. 3.1.1.1: *)
a (GET_NTH_ASM_T 2 (asm_ante_tac o concl) THEN asm_rewrite_tac[]);
(* Completes 3.1.1.1. 3.1.1.2: *)
a (GET_NTH_ASM_T 3 (ante_tac o simple_µ_elim¨(abs:IND ≠ Ó)mÆ));
a (GET_NTH_ASM_T 2 (asm_ante_tac o concl) 
	THEN GET_NTH_ASM_T 9 rewrite_thm_tac);
a (strip_tac THEN asm_rewrite_tac[]);
a (GET_NTH_ASM_T 3 (ante_tac o simple_µ_elim¨(abs:IND ≠ Ó)aÆ) THEN 
	POP_ASM_T rewrite_thm_tac THEN REPEAT strip_tac);
(* Completes 3.1.1. 3.1.2: *)
a (GET_NTH_ASM_T 4 (ante_tac o simple_µ_elim¨
	Ãa∑ Is_Ó_Rep a ± p ((abs:IND ≠ Ó) a)Æ) THEN 
	conv_tac all_simple_¬_conv THEN simple_taut_tac);
(* Completes 3.1. 3.2: *)
a (lemma_tac ¨Is_Ó_Rep ((rep:Ó ≠ IND) n)Æ THEN_LIST 
	[asm_rewrite_tac[], id_tac]);
(* asm_rewrite_tac proves the lemma so only one subgoal *)
a (GET_NTH_ASM_T 2 (ante_tac o simple_µ_elim¨(rep:Ó ≠ IND) nÆ)
	THEN GET_NTH_ASM_T 11 rewrite_thm_tac THEN REPEAT strip_tac);
=TEX
=SML
pop_thm()
);
=TEX
$new\_spec$ may now be used to introduce the basic operations
on the natural numbers.
=SML
val €zero_suc_def› : THM = new_spec(["€Zero›", "€Suc›","zero_suc_def"], 2, zero_suc_thm);
=TEX
=SML
val €zero_conv› : CONV = ONCE_MAP_C 
	(simple_eq_match_conv (eq_sym_rule
	(icl'Kernel.icl'suc_conv ¨0Æ)));
=TEX
The individual Peano postulates are trivial to extract from the
definition of $Suc$ and $Zero$:
=SML
val €≥_suc_thm› = (conv_rule zero_conv)(±_left_elim zero_suc_def);
=TEX
=SML
val €one_one_suc_thm› = rewrite_rule[one_one_def] (±_left_elim (±_right_elim zero_suc_def));
=TEX
=SML
val €suc_induction_thm› = (conv_rule zero_conv)(±_right_elim (±_right_elim zero_suc_def));
=TEX
\section{INDUCTION TACTIC}
The following tactic implements ordinary mathematical induction.
It takes as its argument the variable on which induction is to be performed.

It is unsatisfactory for two reasons at the moment. Firstly, its error
messages aren't defined. Secondly, and deeper, it assumes that the variable
on which induction is being performed is free in the goal. Requirements here
need investigation. 
=SML
fun €suc_induction_tac› (tm : TERM) : TACTIC = (
	if not(is_var tm andalso type_of tm =: Ó)
	then term_fail "suc_induction_tac" 99999 [tm]
	else let fun aux_tac (gl as (seqasms, conc)) = (
			let	val abs = mk_simple_Ã(tm, conc);
				val thm0 = (conv_rule
						(ONCE_MAP_C (simple_¬_conv))
						(simple_µ_elim abs suc_induction_thm));
				val thm1 = undisch_rule(conv_rule
	((RATOR_C o RAND_C o RAND_C o RAND_C)(simple_¡_conv (fst(dest_var tm))))
						thm0);
				val thm2 = simple_µ_elim tm thm1;
				val conc' = (hd (asms thm2));
			in	([(seqasms, conc')],
				 (fn [th] => prove_asm_rule th thm2
				  | _ => bad_proof "suc_induction_tac"))
			end
		);
	in	aux_tac THEN ±_tac THEN_LIST [id_tac, simple_µ_tac THEN ¥_tac]
	end
);
=TEX
\section{PRIMITIVE RECURSION THEOREM}
Our approach to the primitive recursion theorem is a straightforward
adaptation of the approach one might take in set theory.

It is usual in set theory to prove a ``principle of definition by
induction''. E.g. in \cite{Halmos74}, Halmos proves what he calls
the ``recursion theorem'', which (modulo names and a uniqueness assertion)
is the following:

\paragraph{Principle of Definition by Induction (PDI):} Let $X$ be a set, let $z \in X$,
and let $s$ be a function from $X$ to itself, then there exists a unique
function $f$ from $Ó$ to $X$ such that $f(0) = z$ and
for any $n$, $f(n+1)=s(f n)$.

We wish to prove the slightly stronger ``principle of definition by
primitive recursion'', and the informal statement of which is:

\paragraph{Principle of Definition by Primitive Recursion(PDPR):}
Let $X$ be a set, let $z \in X$,
and let $s$ be a function of two arguments with domain and first codomain
$X$ and with the second codomain $Ó$, then there exists a unique
function $f$ from $Ó$ to $X$ such that $f(0) = z$ and
for any $n$, $f(n+1)=s(f n)n$.

Now, $PDPR$, is decidedly more useful than $PDI$, as is clear
when one examines almost any real-life recursive definition, e.g that
of the factorial function. However,
a mathematician would probably not bother to state $PDPR$ result separately,
since it is a fairly trivial consequence of $PDI$: given the problem
data of $PDPR$, one uncurries $s$ and combines it with the identity function
to give a function from $X∏Ó$ to itself to which $PDI$ may be applied
to give a function from $Ó$ to $X∏Ó$ which composes with the projection
onto the first factor to give the desired function for $PDPR$.
(In both $PDI$ and $PDPR$ the uniqueness part is an easy induction. Halmos
does not even bother to mention it.)

Our plan for proving $PDPR$ therefore is to prove $PDI$ by adapting the
standard proof from set-theory and to derive $PDPR$ from it by formalising
the remarks of the previous paragraph.

\subsection{Definition by Induction}
As we have mentioned we will
prove the principle of definition by induction following the usual
set-theoretic proof, which may be found, for example, in \cite{Halmos74}.
The informal statement and a sketch of the proof is as follows:

\paragraph{Principle of Definition by Induction:} Let $X$ be a set, let $z \in X$,
and let $s$ be a function from $X$ to itself, then there exists a unique
function $f$ from $Ó$ to $X$ such that $f(0) = z$ and
for any $n$, $f(n+1)=s(f n)$.

\paragraph{Sketch Proof} The uniqueness part is a straight forward proof by
induction; for the existence, let $\cal C$ be the collection of all subsets, $R$,  of
$Ó \times X$ such that $(0, z)\in R$ and for any $n\in Ó$ and $x\in X$,
$(n+1, s x)\in X$ if $(n, x)\in X$. Let $Q = \bigcap \cal C$. We then
prove the following:

\begin{enumerate}
\item $Q \in \cal C$;
\item $Q$ is the graph of a function;
\item the function whose graph is $Q$ is the desired function $f$.
\end{enumerate}

This completes the proof.

This proof translates into HOL reasonably straightforwardly. To avoid
a dependency on the theory of sets, we work with two-place relations instead
of subsets of $Ó \times X$.

Much of the work of the proof is in exhibiting elements from the collection
$\cal C$ satisfying certain requirements. This is done in the following
lemmas, the first of which is fairly easy. In terms of the informal proof,
it says that exists an $R\in \cal C$ such that $(0, x)\in R$ iff. $x = z$.
Note that the first two conjuncts in the HOL statement below stand for
the assertion that $R\in \cal C$.
=SML
val €rec_lemma1› = (
push_goal([],
	¨µz:'a∑µs:'a≠'a∑ ∂r:Ó≠'a≠BOOL∑
		r 0 z
	±	(µn x∑r n x ¥ r(Suc n)(s x))
	±	µx:'a∑r 0 x ¥ x = zÆ);
=TEX
=SML
a(REPEAT strip_tac THEN simple_∂_tac¨Ã(k:Ó) (y:'a)∑≥(k = 0) ≤ (k = 0 ± y = z)Æ);
a(rewrite_tac[≥_suc_thm]);
pop_thm()
);
=TEX
The second lemma exhibiting an element of $\cal C$ is rather harder, and
requires the following arithmetic result:
=SML
val €rec_lemma2› = (
push_goal([], ¨µn:Ó∑≥(Suc n = n)Æ);
=TEX
=SML
a(REPEAT strip_tac THEN suc_induction_tac ¨n:ÓÆ);
(* 2 subgoals: 1: *)
a(rewrite_tac[≥_suc_thm]);
(* 2: *)
a(contr_tac THEN strip_asm_tac (list_simple_µ_elim[¨Suc nÆ, ¨n:ÓÆ]
	one_one_suc_thm));
pop_thm()
);
=TEX
The second lemma exhibiting an element of $\cal C$ asserts that for
any $k\in Ó$, there exists $R\in \cal C$ and $t\in X$ such that
$(k, x)\in R$ iff. $x = t$. Note that this implies
that $\bigcap \cal C$ is the graph of a (possibly partial) function on $Ó$.
=SML
val €rec_lemma3› = (
push_goal([],
	¨µz:'a∑µs:'a≠'a∑ µk:Ó∑∂r:Ó≠'a≠BOOL∑
		r 0 z
	±	(µn x∑r n x ¥ r(Suc n)(s x))
	±	∂t∑r k t ± µx:'a∑r k x ¥ x = tÆ);
=TEX
=SML
a(REPEAT strip_tac THEN suc_induction_tac¨k:ÓÆ);
(* 2 subgoals: 1 (base case): *)
a(strip_asm_tac (all_simple_µ_elim rec_lemma1) 
	THEN simple_∂_tac¨r:Ó≠'a≠BOOLÆ);
a(asm_rewrite_tac[] THEN simple_∂_tac¨z:'aÆ THEN asm_rewrite_tac[]);
(* 2 *)
a(simple_∂_tac¨Ã(i:Ó) (y:'a)∑if Suc k = i then y = s (t:'a) else r i yÆ
	THEN rewrite_tac[≥_suc_thm] THEN REPEAT strip_tac);
(* 7 subgoals: 2.1: *)
a(strip_asm_tac (list_simple_µ_elim[¨k:ÓÆ, ¨n:ÓÆ]one_one_suc_thm));
a(asm_ante_tac ¨(r:Ó≠'a≠BOOL) n xÆ THEN 
	POP_ASM_T (rewrite_thm_tac o eq_sym_rule));
a(lemma_tac ¨(r:Ó≠'a≠BOOL) k x ¥ x = tÆ THEN asm_rewrite_tac[]);
(* 2.2: *)
a(asm_ante_tac ¨(r:Ó≠'a≠BOOL) n xÆ THEN asm_rewrite_tac[]);
(* 2.3: *)
a(asm_ante_tac ¨Suc k = nÆ THEN asm_rewrite_tac[rec_lemma2]);
(* 2.4 *)
a(LEMMA_T ¨(r:Ó≠'a≠BOOL) n xÆ ante_tac);
(* 2 subgoals. 2.4.1: *)
a(DROP_ASM_T¨Suc k = nÆ (asm_rewrite_thm_tac o eq_sym_rule));
a(asm_ante_tac ¨(r:Ó≠'a≠BOOL) k tÆ THEN asm_rewrite_tac[]);
(* 2.4.2: *)
a(asm_rewrite_tac[]);
(* 2.5: *)
a(strip_asm_tac (list_simple_µ_elim[¨k:ÓÆ, ¨n:ÓÆ]one_one_suc_thm));
a(asm_ante_tac ¨(r:Ó≠'a≠BOOL) n xÆ THEN POP_ASM_T 
	(rewrite_thm_tac o eq_sym_rule));
a(lemma_tac ¨(r:Ó≠'a≠BOOL) k x ¥ x = tÆ THEN asm_rewrite_tac[]);
(* 2.6: *)
a(asm_ante_tac ¨(r:Ó≠'a≠BOOL) n xÆ THEN asm_rewrite_tac[]);
(* 2.7: *)
a(simple_∂_tac¨(s:'a≠'a)tÆ THEN REPEAT strip_tac THEN asm_rewrite_tac[]);
=TEX
=SML
pop_thm()
);
=TEX
We can now prove the existence part of the principle of definition of
induction (in terms of two-place relations):
=SML
val €rec_lemma4› = (
push_goal([],
	¨µz:'a∑µs:'a≠'a∑ ∂r:Ó≠'a≠BOOL∑
		r 0 z
	±	(µn x∑r n x ¥ r(Suc n)(s x))
	±	(µm∑∂y∑r m y ± µx∑r m x ¥ x = y)Æ);

a(REPEAT strip_tac THEN
  simple_∂_tac¨(Ã(k:Ó) (y:'a)∑(µq∑(q 0 z ± (µn x∑q n x ¥ q(Suc n)(s x))) ¥ q k y))Æ);
a(rewrite_tac[] THEN REPEAT strip_tac);
(* 2 subgoals: 1: *)
a(DROP_NTH_ASM_T 3 (ante_tac o simple_µ_elim¨q:Ó≠'a≠BOOLÆ) 
	THEN asm_rewrite_tac[]);
(* 1.2: *)
a(suc_induction_tac ¨m:ÓÆ);
(* 2 subgoals: 2.1: *)
a(simple_∂_tac¨z:'aÆ THEN REPEAT strip_tac);
a(strip_asm_tac(all_simple_µ_elim rec_lemma1));
a(DROP_NTH_ASM_T 4 (ante_tac o simple_µ_elim¨r:Ó≠'a≠BOOLÆ) 
	THEN asm_rewrite_tac[]);
(* 2.2: *)
a(simple_∂_tac ¨(s:'a≠'a)yÆ THEN REPEAT strip_tac);
(* 2 subgoals: 2.2.1: *)
a(DROP_NTH_ASM_T 4 (ante_tac o simple_µ_elim¨q:Ó≠'a≠BOOLÆ) 
	THEN asm_rewrite_tac[]);
(* 2.2.2: *)
a(strip_asm_tac(list_simple_µ_elim[¨z:'aÆ, ¨s:'a≠'aÆ, ¨Suc mÆ]rec_lemma3));
a(lemma_tac ¨(r:Ó≠'a≠BOOL)m yÆ);
(* 2.2.2.1: *)
a(DROP_NTH_ASM_T 7 (ante_tac o simple_µ_elim¨r:Ó≠'a≠BOOLÆ) 
	THEN asm_rewrite_tac[]);
(* 2.2.2.2: *)
a(lemma_tac ¨(r:Ó≠'a≠BOOL)(Suc m) (s:'a≠'a y)Æ);
(* 2.2.2.2.1: *)
a(DROP_NTH_ASM_T 4 (ante_tac o list_simple_µ_elim[¨m:ÓÆ, ¨y:'aÆ]) 
	THEN asm_rewrite_tac[]);
(* 2.2.2.2.2: *)
a(lemma_tac ¨(r:Ó≠'a≠BOOL)(Suc m) xÆ);
(* 2.2.2.2.2.1: *)
a(DROP_NTH_ASM_T 7 (ante_tac o simple_µ_elim¨r:Ó≠'a≠BOOLÆ) 
	THEN asm_rewrite_tac[]);
(* 2.2.2.2.2.2: *)
a(GET_NTH_ASM_T 4 (ante_tac o simple_µ_elim¨x:'aÆ));
a(DROP_NTH_ASM_T 4 (ante_tac o simple_µ_elim¨s:'a≠'a yÆ));
a(strip_tac THEN asm_rewrite_tac[]);
=TEX
=SML
pop_thm()
);
=TEX
It turns out to be slightly more convenient to have available
the following trivial consequence of $fun\_rel\_thm$:
=SML
val €rec_lemma5› = (
push_goal([], ¨µr:'a≠'b≠BOOL∑
	(µx∑∂y∑r x y ± µz∑r x z ¥ z = y) ¥ (∂f∑µx y∑(f x = y) = r x y)
Æ);
=TEX
=SML
a(rewrite_tac[fun_rel_thm]);
pop_thm()
);
=TEX
The following result gives the uniqueness part of the principle
of definition by induction:
=SML
val €rec_lemma6› = (
push_goal([],
	¨µz:'a∑µs:'a≠'a∑ µf g:Ó≠'a∑
	(	(	f 0 = z
		±	µn:Ó∑f(Suc n) = s(f n))
		± (	g 0 = z
		±	µn:Ó∑g(Suc n) = s(g n)))
	¥	f = gÆ);
=TEX
=SML
a(REPEAT strip_tac THEN pure_once_rewrite_tac[ext_thm]);
a(strip_tac THEN suc_induction_tac ¨x:ÓÆ THEN asm_rewrite_tac[]);
=TEX
=SML
pop_thm()
);
=TEX
Using $rec_lemma5$, we now prove the existence part of the principle
of definition by induction in terms of HOL functions:
=SML
val €rec_lemma7› = (
push_goal([],
	¨µz:'a∑µs:'a≠'a∑ ∂f:Ó≠'a∑
		f 0 = z
	±	µn:Ó∑f(Suc n) = s(f n)Æ);
=TEX
=SML
a(REPEAT strip_tac);
a((strip_asm_tac o all_simple_µ_elim) rec_lemma4);
a( (ante_tac o simple_µ_elim¨r:Ó≠'a≠BOOLÆ o
	inst_type_rule[(Ó, î'aÆ), (î'aÆ, î'bÆ)]) rec_lemma5);
a(asm_rewrite_tac [] THEN REPEAT strip_tac);
a(simple_∂_tac¨f:Ó≠'aÆ);
a(REPEAT strip_tac THEN asm_rewrite_tac[]);
(* Only 1 subgoal *)
a(suc_induction_tac¨n:ÓÆ);
(* 2 subgoals: 1 (base case): *)
a(LEMMA_T ¨(f 0):'a=zÆ rewrite_thm_tac);
(* 1.1: *)
a(asm_rewrite_tac[]);
(* 1.2: *)
a(asm_ante_tac¨(r:Ó≠'a≠BOOL) 0 zÆ THEN asm_rewrite_tac[]);
(* 2 (step): *)
a(LEMMA_T¨(f(Suc n)):'a=s(f n)Æ rewrite_thm_tac);
(* 2.1: *)
a(asm_rewrite_tac[]);
(* 2.2: *)
a(TOP_ASM_T (asm_ante_tac o concl) THEN asm_rewrite_tac[]);
=TEX
=SML
pop_thm()
);
=TEX
We can now assemble the existence and uniqueness parts of the
theorem to give the desired principle of definition by induction:
=SML
val €induct_def_thm› = (
push_goal([],
	¨µz:'a∑µs:'a≠'a∑ ∂â1f:Ó≠'a∑
		f 0 = z
	±	µn:Ó∑f(Suc n) = s(f n)Æ);
=TEX
=SML
a(REPEAT strip_tac THEN conv_tac simple_∂â1_conv);
a(strip_asm_tac(all_simple_µ_elim rec_lemma7) THEN simple_∂_tac¨f:Ó≠'aÆ);
a(asm_rewrite_tac[]);
a(REPEAT strip_tac THEN
	ante_tac (list_simple_µ_elim[¨z:'aÆ, ¨s:'a≠'aÆ, ¨f:Ó≠'aÆ, ¨x:Ó≠'aÆ]rec_lemma6));
a(asm_rewrite_tac[] THEN ¥_T (accept_tac o eq_sym_rule));
pop_thm()
);
=TEX
\subsection{Primitive Recursion Theorem}
As we have already mentioned, the existence part
of the primitive recursion theorem is a straightforward consequence of
the principle of definition by induction: given a set $X$, an element $z\in X$
and a two-place function, $s$, from $X ∏ Ó$ to X, we use the principle of
definition by induction to define a function from $Ó$ to $X ∏ Ó$
which sends $0$ to $(0, z) an,d for any $n$, sends $n+1$ to
$(n+1, s(f n))$. The composite of this function with projection onto
the first factor of $X ∏ Ó gives the desired function, $f$ say, from
$Ó$ to $X$ satisfying $f(0)=z$ and $f(n+1)=s(f(n), n)$.

The HOL translation of the above argument is the following:

=SML
val €rec_lemma8› = (
push_goal([],
	¨µz:'a∑µs:'a≠Ó≠'a∑ ∂f:Ó≠'a∑
		f 0 = z
	±	µn:Ó∑f(Suc n) = s(f n)nÆ);
=TEX
=SML
a(REPEAT strip_tac THEN strip_asm_tac
	(list_simple_µ_elim[¨((z:'a), 0)Æ, ¨Ã ix:'a ∏ Ó∑((s (Fst ix) (Snd ix):'a), Suc(Snd ix))Æ]
	(inst_type_rule[(î'a ∏ ÓÆ, î'aÆ)] rec_lemma7)));
a(simple_∂_tac ¨Ãi∑Fst((f:Ó≠('a ∏ Ó)) i)Æ);
a(GET_ASM_T ¨(f 0:'a ∏ Ó) = (z, 0)Æ (fn th=> rewrite_tac[pair_clauses, th]));
a(strip_tac THEN suc_induction_tac¨n:ÓÆ);
(* 2 subgoals: 1 (base case) *)
a(asm_rewrite_tac[pair_clauses]);
(* 1/2: (step) *)
a(asm_rewrite_tac[pair_clauses]);
a(LEMMA_T ¨µk∑Snd((f:Ó≠('a ∏ Ó))k) = kÆ rewrite_thm_tac);
a(strip_tac THEN suc_induction_tac¨k:ÓÆ THEN asm_rewrite_tac[pair_clauses]);
=TEX
=SML
pop_thm()
);
=TEX
The uniqueness part of the primitive recursion theorem is
straightforward:
=SML
val €rec_lemma9› = (
push_goal([],
	¨µz:'a∑µs:'a≠Ó≠'a∑ µf g:Ó≠'a∑
	(	(	f 0 = z
		±	µn:Ó∑f(Suc n) = s(f n)n)
		± (	g 0 = z
		±	µn:Ó∑g(Suc n) = s(g n)n))
	¥	f = gÆ);
=TEX
=SML
a(REPEAT strip_tac THEN pure_once_rewrite_tac[ext_thm]);
a(strip_tac THEN suc_induction_tac¨x:ÓÆ THEN asm_rewrite_tac[]);
=TEX
=SML
pop_thm()
);
=TEX
Assembling $rec_lemma8$ and $rec_lemma9$ to give the primitive recursion theorem
in its usual form, is just like the corresponding step in the
proof of the principle of definition by induction:
=SML
val €suc_prim_rec_thm› = (
push_goal([],
	¨µz:'a∑µs:'a≠Ó≠'a∑ ∂â1f:Ó≠'a∑
		f 0 = z
	±	µn:Ó∑f(Suc n) = s(f n)nÆ);
=TEX
=SML
a(REPEAT strip_tac THEN conv_tac simple_∂â1_conv);
a(strip_asm_tac(all_simple_µ_elim rec_lemma8) THEN simple_∂_tac¨f:Ó≠'aÆ);
a(asm_rewrite_tac[]);
a(REPEAT strip_tac THEN
	ante_tac (list_simple_µ_elim[¨z:'aÆ, ¨s:'a≠Ó≠'aÆ, ¨f:Ó≠'aÆ, ¨x:Ó≠'aÆ]rec_lemma9));
a(asm_rewrite_tac[] THEN ¥_T (accept_tac o eq_sym_rule));
pop_thm()
);

=TEX
\section{THE ARITHMETIC OPERATORS}
\subsection{Interlude}
The following is required to circumvent a compiler problem which would
be caused if we attempted to include all the material in this document
in one Standard ML structure:
=SML
end; (* of structure Ó (part 1) *)
structure Ó = struct
open Ó;
=TEX
\subsection{Fixity Declarations}
We choose fixities for the arithmetic operations as follows:
=SML
val side_effect = (
declare_infix(210, "<");
declare_infix(210, ">");
declare_infix(210, "º");
declare_infix(210, "æ");
declare_infix(300, "+");
declare_infix(300, "-");
declare_infix(310, "*");
declare_infix(310, "Div");
declare_infix(310, "Mod")
);
=TEX
Thus, the relational operations are lower precedence than the operations
which return numbers. Addition and subtraction are lower precedence than
multiplication, division and modulus.

These precedences may need to be altered in the light of comparison with
other theories.
\subsection{Addition}
The defining property for $+$ includes a clause about the relation
of $+$ with $Suc$, with a view to freeing the world from $Suc$ as soon
as possible. Indeed, it would, in principle, be possible to build
the theory without ever defining $Suc$, however this would effectively
involve proving all of the results we have proved to date relativised to
the representation type for $Ó$ followed by a mammoth task of lifting them
to $Ó$. Since some people seem to like $Suc$, and it will have its uses from the
efficiency point of view in coding some proof procedures, we have taken it
as primitive.
=SML
val €plus_def› = new_spec(["+","plus_def"], 1, (
push_goal([], ¨
	∂$+:Ó≠Ó≠Ó∑ µm n∑
		0 + n = n
	±	(m + 1) + n = (m + n) + 1
	±	Suc m = m + 1
Æ);
=TEX
=SML
a(lemma_tac ¨
	∂$+:Ó≠Ó≠Ó∑ µm n∑
		0 + n = n
	±	(Suc m) + n = Suc (m + n)
Æ);
(* 1: *)
a(strip_asm_tac	(conv_rule all_simple_¬_conv
	(list_simple_µ_elim
	[¨Ãn:Ó∑nÆ, ¨Ãf:Ó≠Ó∑Ãm:Ó∑Ãn∑Suc(f n)Æ]
	(inst_type_rule[(îÓ≠ÓÆ, î'aÆ)]suc_prim_rec_thm))));
a(simple_∂_tac ¨f:Ó≠Ó≠ÓÆ);
a(REPEAT strip_tac THEN asm_rewrite_tac[]);
(* 2: *)
a(simple_∂_tac ¨$+:Ó≠Ó≠ÓÆ THEN asm_rewrite_tac[]);
a(LEMMA_T ¨µm∑m + 1 = Suc mÆ asm_rewrite_thm_tac);
(* The rewriting proves the goal, so only the lemma to do *)
a(strip_tac THEN suc_induction_tac ¨m:ÓÆ);
(* 2.1: *)
a (conv_tac (ONCE_MAP_C suc_conv) THEN asm_rewrite_tac[]);
(* 2.2 *)
a (asm_rewrite_tac[]);
=TEX
=SML
pop_thm()
));
=TEX
\subsection{Some Earlier Work Revisited}
We use $+1$ in preference to $Suc$ from now on and so we must carry
the induction and primitive recursion theorems etc. over to use
this notation.
=SML
val €induction_thm› = save_thm("induction_thm",
	rewrite_rule[plus_def] suc_induction_thm);
val €≥_plus1_thm› = save_thm("≥_plus1_thm",
		rewrite_rule[plus_def] ≥_suc_thm);
val €one_one_plus1_thm› = save_thm("one_one_plus1_thm",
		rewrite_rule[plus_def] one_one_suc_thm);
val €prim_rec_thm› = save_thm("prim_rec_thm",
	rewrite_rule[plus_def] suc_prim_rec_thm);
=TEX
=SML
fun €INDUCTION_T› (tm : TERM) : (THM -> TACTIC) -> TACTIC = (
	if not(is_var tm andalso type_of tm =: Ó)
	then term_fail "INDUCTION_T" 38001 [tm]
	else (fn thmtac =>
		let fun aux_tac (gl as (seqasms, conc)) = (
			if not (is_free_in tm conc)
			then term_fail "INDUCTION_T" 38002 [tm]
			else if any seqasms (is_free_in tm)
			then term_fail "INDUCTION_T" 38003 [tm]
			else let
				val abs = mk_simple_Ã(tm, conc);
				val thm0 = (conv_rule
						(ONCE_MAP_C (simple_¬_conv))
						(simple_µ_elim abs induction_thm));
				val thm1 = undisch_rule(conv_rule
	((RATOR_C o RAND_C o RAND_C o RAND_C)
	 (simple_¡_conv (fst(dest_var tm))))
						thm0);
				val thm2 = simple_µ_elim tm thm1;
				val conc' = (hd (asms thm2));
			in	([(seqasms, conc')],
				 (fn [th] => prove_asm_rule th thm2
				  | _ => bad_proof "INDUCTION_T"))
			end
		);
		in	aux_tac THEN ±_tac THEN_LIST 
			[id_tac, simple_µ_tac THEN ¥_T thmtac]
		end)
);
=TEX
=SML
fun €induction_tac› (tm : TERM) : TACTIC = (
	let	val tac = (INDUCTION_T tm strip_asm_tac);
	in	fn gl => (tac gl
			handle ex => pass_on ex "INDUCTION_T" "induction_tac")
	end handle ex => pass_on ex "INDUCTION_T" "induction_tac"
);
=TEX
=SML
val €plus1_lemma› = tac_proof(([], ¨µm∑Suc m = m + 1Æ), rewrite_tac[plus_def]);
val €plus1_conv› : CONV = (fn tm =>
	((suc_conv THEN_C simple_eq_match_conv plus1_lemma) tm)
	handle ex => pass_on ex "suc_conv" "plus1_conv");	
=TEX
\subsection{Arithmetic Relations}
We first define $º$ using an obvious definition as
characterising theorem. Then we define $æ$, $<$ and $>$
in terms of it.

=SML
val €º_def› = new_spec(["º","º_def"], 1, (
push_goal([], ¨
	∂$º:Ó≠Ó≠BOOL∑ µm n∑ m º n § ∂ i:Ó ∑ m + i = n
Æ);
=TEX
=SML
a(simple_∂_tac¨Ãm n ∑ ∂ i:Ó ∑ m + i = nÆ THEN rewrite_tac[]);
=TEX
=SML
pop_thm()
));
=TEX
=SML
val €æ_def› = new_spec(["æ","æ_def"], 1, (
push_goal([], ¨
	∂$æ:Ó≠Ó≠BOOL∑ µm n∑ m æ n § n º m
Æ);
=TEX
=SML
a(simple_∂_tac ¨Ãm n∑ n º mÆ THEN rewrite_tac[]);
=TEX
=SML
pop_thm()
));
=TEX
=SML
val €less_def› = new_spec(["<","less_def"], 1, (
push_goal([], ¨
	∂$<:Ó≠Ó≠BOOL∑ µm n∑ m < n § m + 1 º n
Æ);
=TEX
=SML
a(simple_∂_tac ¨Ãm n∑ m + 1 º nÆ THEN rewrite_tac[]);
=TEX
=SML
pop_thm()
));
=TEX
=SML
val €greater_def› = new_spec([">","greater_def"], 1, (
push_goal([], ¨
	∂$>:Ó≠Ó≠BOOL∑ µm n∑ m > n § n < m
Æ);
=TEX
=SML
a(simple_∂_tac ¨Ãm n∑ n < mÆ THEN rewrite_tac[]);
=TEX
=SML
pop_thm()
));
=TEX
\subsection{Multiplication}
=SML
val €times_def› = new_spec(["*","times_def"], 1, (
push_goal([], ¨
	∂$*:Ó≠Ó≠Ó∑ µm n∑
		0 * n = 0
	±	(m + 1) * n = m * n + n
Æ);
=TEX
=SML
a(strip_asm_tac	(conv_rule all_simple_¬_conv
	(list_simple_µ_elim
	[¨Ãn:Ó∑0Æ, ¨Ãf:Ó≠Ó∑Ãm:Ó∑Ãn∑f n + n
Æ]
	(inst_type_rule[(îÓ≠ÓÆ, î'aÆ)]prim_rec_thm))));
a(simple_∂_tac ¨f:Ó≠Ó≠ÓÆ);
a(asm_rewrite_tac[]);
=TEX
=SML
pop_thm()
));
=TEX
\subsection{Modulus}
We characterise $Mod$ by an odometer-style definition. This seems to be the
most straightforward way.
=SML
val €mod_def› = new_spec(["Mod","mod_def"], 1, (
push_goal([], ¨
	∂$Mod:Ó≠Ó≠Ó∑ µm n∑
		0 < n ¥
		0 Mod n = 0
	±	(m + 1) Mod n = if m Mod n + 1 < n then m Mod n + 1 else 0
Æ);
=TEX
=SML
a(strip_asm_tac	(conv_rule all_simple_¬_conv
	(list_simple_µ_elim
	[¨Ãn:Ó∑0Æ, ¨Ãf:Ó≠Ó∑Ãm:Ó∑Ãn∑if f n + 1 < n then f n + 1 else 0
Æ]
	(inst_type_rule[(îÓ≠ÓÆ, î'aÆ)]prim_rec_thm))));
a(simple_∂_tac ¨f:Ó≠Ó≠ÓÆ);
a(asm_rewrite_tac[]);
=TEX
=SML
pop_thm()
));
=TEX
\subsection{Division}
We characterise $Div$ using $Mod$.
=SML
val €div_def› = new_spec(["Div","div_def"], 1, (
push_goal([], ¨
	∂$Div:Ó≠Ó≠Ó∑ µm n∑
		0 < n ¥
		0 Div n = 0
	±	(m + 1) Div n = if m Mod n + 1 < n then m Div n else m Div n + 1
Æ);
=TEX
=SML
a(strip_asm_tac	(conv_rule all_simple_¬_conv
	(list_simple_µ_elim
	[¨Ãn:Ó∑0Æ, ¨Ãf:Ó≠Ó∑Ãm:Ó∑Ãn∑if m Mod n + 1 < n then f n else f n + 1
Æ]
	(inst_type_rule[(îÓ≠ÓÆ, î'aÆ)]prim_rec_thm))));
a(simple_∂_tac ¨f:Ó≠Ó≠ÓÆ);
a(asm_rewrite_tac[]);
=TEX
=SML
pop_thm()
));
=TEX
\subsection{Associativity of $+$}

We wish to prove the associativity of $+$.

=SML
val €plus_assoc_thm› = (
push_goal([],¨µ i m n ∑ (i + m) + n  =  i + m + nÆ);
=TEX
=SML
a(strip_tac THEN induction_tac ¨i:ÓÆ THEN
	asm_rewrite_tac[plus_def]);
save_pop_thm"plus_assoc_thm"
);
=TEX
=SML
val €plus_assoc_thm1› = (
push_goal([],¨µ i m n ∑ i + m + n  =  (i + m) + nÆ);
=TEX
=SML
a(rewrite_tac[plus_assoc_thm]);
save_pop_thm"plus_assoc_thm1"
);
=TEX

\subsection{Commutativity of $+$}

We wish to prove the commutativity of $+$.
=SML
val €plus_comm_thm› = (
push_goal([],¨µ m n ∑ m + n  =  n + mÆ);
=TEX
=SML
a(MAP_EVERY (fn x => strip_tac THEN induction_tac x)[¨m:ÓÆ,¨n:ÓÆ]);
(* *** Goal "1" *** *)
a(rewrite_tac[]);
(* *** Goal "2" *** *)
a(rewrite_tac[plus_def]);
a(TOP_ASM_T (rewrite_thm_tac o eq_sym_rule));
a(rewrite_tac[plus_def]);
(* *** Goal "3" *** *)
a(rewrite_tac[plus_def]);
a(TOP_ASM_T (rewrite_thm_tac o simple_µ_elim¨0Æ));
a(rewrite_tac[plus_def]);
(* *** Goal "4" *** *)
a(rewrite_tac[plus_def]);
a(TOP_ASM_T (rewrite_thm_tac o eq_sym_rule));
a(once_rewrite_tac[plus_def]);
a(rewrite_tac[plus_assoc_thm]);
save_pop_thm"plus_comm_thm"
);
=TEX
=SML
val €plus_def1› = (
push_goal ([],¨
µ m n∑ m + 0 = m ± m + (n + 1) = (m + n) + 1
Æ);
a(rewrite_tac[plus_assoc_thm]);
a(once_rewrite_tac[plus_comm_thm] THEN rewrite_tac[plus_def]);
pop_thm()
);
=TEX
\subsection{Reordering Sums}
If we specialise $i$ in the following theorem to $t$ say, repeated rewriting
with the resulting theorem will change any term of the form
$a + b + \ldots + t + \ldots$ into a term of the form $t + \ldots$.
=SML
val €plus_order_thm› = (
push_goal([], ¨µi m n∑
		m + i = i + m
	±	(i + m) + n = i + m + n
	±	m + i + n = i + m + n
Æ);
a(rewrite_tac[plus_assoc_thm, simple_µ_elim¨m:ÓÆplus_comm_thm]);
save_pop_thm"plus_order_thm"
);
=IGN
rewrite_conv[simple_µ_elim¨1Æplus_order_thm] ¨
	(101 + 102) + 2 + 3 + (1 + 2 + 99) + (55 + 10) +
	(101 + 102) + 2 + 3 + (3 + 1 + 99) + (55 + 10) 
	Æ;
=TEX
\subsection{Cancellation Rules for $+$}
=SML
val €plus_lemma1› = (
push_goal([], ¨µm∑
		m + 0 = m
	±	0 + m = m
Æ);
a(rewrite_tac[plus_def, plus_def1]);
pop_thm()
);
=TEX
=SML
val €plus_lemma2› = (
push_goal([], ¨µm n∑
		m + 1 = n + 1 § m = n
Æ);
a(REPEAT strip_tac);
(* *** Goal "1" *** *)
a(strip_asm_tac (list_simple_µ_elim[¨m:ÓÆ, ¨n:ÓÆ]one_one_plus1_thm));
(* *** Goal "2" *** *)
a(asm_rewrite_tac[]);
pop_thm()
);
=TEX
=SML
val €plus_lemma3› = (
push_goal([], ¨≥1 = 0Æ);
a(conv_tac (ONCE_MAP_C suc_conv) THEN rewrite_tac[≥_suc_thm]);
pop_thm()
);
=TEX
=SML
val €plus_lemma4› = (
push_goal([], ¨µm n∑m + n = 0 § m = 0 ± n = 0Æ);
a(strip_tac THEN strip_tac THEN induction_tac¨n:ÓÆ
	THEN asm_rewrite_tac[plus_assoc_thm1, ≥_plus1_thm, plus_lemma1, plus_lemma3]);
pop_thm()
);
=TEX
=SML
val €plus_lemma5› = (
push_goal([], ¨µm n i∑
		(m + i = n + i § m = n)
	±	(m + i = i § m = 0)
Æ);
a(REPEAT strip_tac THEN TRY_T (asm_rewrite_tac[plus_lemma1])
	THEN POP_ASM_T ante_tac THEN induction_tac¨i:ÓÆ
	THEN asm_rewrite_tac[plus_lemma1, plus_assoc_thm1, plus_lemma2]);
pop_thm()
);
val €plus_clauses› = (
push_goal([], ¨µm n i∑
		(m + i = n + i § m = n)
	±	(i + m = n + i § m = n)
	±	(m + i = i + n § m = n)
	±	(i + m = i + n § m = n)
	±	(m + i = i § m = 0)
	±	(i + m = i § m = 0)
	±	(i = i + n § n = 0)
	±	(i = n + i § n = 0)
	±	(m + i = 0 § m = 0 ± i = 0)
	±	(0 = m + i § m = 0 ± i = 0)
	±	(m + 0 = m ± 0 + m = m)
	±	≥1 = 0
	±	≥0 = 1
Æ);
a(rewrite_tac[eq_sym_conv¨0 = 1Æ, eq_sym_conv¨i = n + iÆ,
	eq_sym_conv ¨0 = m + iÆ,
	simple_µ_elim¨i:ÓÆ plus_comm_thm,
	plus_lemma1, plus_lemma2, plus_lemma3, plus_lemma4, plus_lemma5]);
save_pop_thm"plus_clauses"
);
=TEX
\subsection{Transitivity for $\leq $ and $<$}
=SML
val €º_trans_thm› = (
push_goal([], ¨µm i n∑m º i ±  i º n ¥ m º nÆ);
a(rewrite_tac[º_def] THEN REPEAT strip_tac);
a(simple_∂_tac¨i' + i''Æ THEN asm_rewrite_tac[plus_assoc_thm1]);
save_pop_thm"º_trans_thm"
);
=TEX
=SML
val €less_trans_thm› = (
push_goal([], ¨µm i n∑m < i ±  i < n ¥ m < nÆ);
a(rewrite_tac[º_def, less_def] THEN REPEAT strip_tac);
a(simple_∂_tac¨i' + 1 + i''Æ THEN asm_rewrite_tac[plus_assoc_thm1]);
save_pop_thm"less_trans_thm"
);
=TEX
\subsection{Cancellation Rules for $\leq $}
=SML
val €º_lemma1› = (
push_goal([], ¨µm n i∑m + i º  n + i § m º nÆ);
a(rewrite_tac[º_def] THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(simple_∂_tac¨i':ÓÆ THEN POP_ASM_T ante_tac
	THEN rewrite_tac[plus_assoc_thm, simple_µ_elim¨i:ÓÆ plus_comm_thm]);
a(rewrite_tac[plus_assoc_thm1, plus_clauses]);
(* *** Goal "2" *** *)
a(simple_∂_tac¨i':ÓÆ THEN rewrite_tac[plus_assoc_thm, simple_µ_elim¨i:ÓÆ plus_comm_thm]);
a(asm_rewrite_tac[plus_assoc_thm1]);
pop_thm()
);
=TEX
=SML
val €º_lemma2› = (
push_goal([], ¨µm∑0 º m ± ≥1 º 0Æ);
a(rewrite_tac[º_def] THEN REPEAT strip_tac);
a(simple_∂_tac¨m:ÓÆ THEN rewrite_tac[plus_clauses]);
a(rewrite_tac[plus_clauses]);
pop_thm()
);
=TEX
=SML
val €º_lemma3› = (
push_goal([], ¨µm i∑ m + i º i § m = 0Æ);
a(rewrite_tac[º_def] THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(POP_ASM_T ante_tac THEN
	rewrite_tac[simple_µ_elim¨m:ÓÆ plus_comm_thm,
		plus_assoc_thm, plus_clauses] THEN REPEAT strip_tac);
(* *** Goal "2" *** *)
a(simple_∂_tac¨0Æ THEN asm_rewrite_tac[plus_clauses]);
pop_thm()
);
=TEX
=SML
val €º_lemma4› = (
push_goal([], ¨µm i∑ m º m + iÆ);
a(rewrite_tac[º_def] THEN REPEAT strip_tac THEN simple_∂_tac¨i:ÓÆ
	THEN rewrite_tac[plus_clauses]);
pop_thm()
);
=TEX
=SML
val €º_lemma5› = (
push_goal([], ¨µm i∑m + i º 0 § m = 0 ± i = 0Æ);
a(rewrite_tac[º_def, plus_clauses] THEN REPEAT strip_tac);
a(simple_∂_tac¨0Æ THEN asm_rewrite_tac[]);
pop_thm()
);
=TEX
=SML
val €º_lemma6› = (
push_goal([], ¨µm∑m º mÆ);
a(rewrite_tac[º_def] THEN REPEAT strip_tac THEN simple_∂_tac¨0Æ
	THEN rewrite_tac[plus_clauses]);
pop_thm()
);
=TEX
=SML
val €º_lemma7› = (
push_goal([], ¨µm∑m º 0 § m = 0Æ);
a(rewrite_tac[º_def] THEN REPEAT strip_tac);
a(all_asm_ante_tac THEN rewrite_tac[plus_clauses] THEN REPEAT strip_tac);
a(simple_∂_tac¨0Æ THEN asm_rewrite_tac[plus_clauses]);
pop_thm()
);
=TEX
=SML
val €º_clauses› = (
push_goal([], ¨µm n i∑
		(m + i º n + i § m º n)
	±	(i + m º n + i § m º n)
	±	(m + i º i + n § m º n)
	±	(i + m º i + n § m º n)
	±	(m + i º i § m = 0)
	±	(i + m º i § m = 0)
	±	(m + i º 0 § m = 0 ± i = 0)
	±	(m º 0 § m = 0)
	±	m º m + i
	±	m º i + m
	±	m º m
	±	0 º m
	±	≥1 º 0
Æ);
a(rewrite_tac[simple_µ_elim¨i:ÓÆ plus_comm_thm,
	º_lemma1, º_lemma2, º_lemma3, º_lemma4, º_lemma5, º_lemma6, º_lemma7]);
save_pop_thm"º_clauses"
);
=TEX
\subsection{Cancellation Rules for $<$}
=SML
val €less_clauses› = (
push_goal([], ¨µm n i∑
		(m + i < n + i § m < n)
	±	(i + m < n + i § m < n)
	±	(m + i < i + n § m < n)
	±	(i + m < i + n § m < n)
	±	(m < m + i § 0 < i)
	±	(m < i + m § 0 < i)
	±	≥m + i < m
	±	≥m + i < i
	±	≥m < 0
	±	≥m < m
	±	0 < m + 1
	±	0 < 1 + m
	±	0 < 1
Æ);
a(rewrite_tac[less_def, simple_µ_elim¨i:ÓÆ plus_order_thm, º_clauses, plus_clauses]);
a(rewrite_tac[simple_µ_elim¨m:ÓÆ plus_order_thm, º_clauses, plus_clauses]);
save_pop_thm"less_clauses"
);
=TEX
\subsection{Case Analysis Etc.}
=SML
val €Ó_cases_thm› = (
push_goal([], ¨µm∑ m = 0 ≤ ∂i∑ m = i + 1Æ);
a(strip_tac THEN induction_tac¨m:ÓÆ THEN asm_rewrite_tac[plus_clauses]);
a(simple_∂_tac¨0Æ THEN rewrite_tac[]);
a(simple_∂_tac¨m:ÓÆ THEN rewrite_tac[]);
save_pop_thm"Ó_cases_thm"
);
=TEX
=SML
val €º_cases_thm› = (
push_goal([], ¨µm n∑m º n ≤ n º mÆ);
a(rewrite_tac[º_def] THEN REPEAT_N 2 strip_tac THEN induction_tac¨m:ÓÆ
	THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(POP_ASM_T (ante_tac o simple_µ_elim¨n:ÓÆ) THEN rewrite_tac[plus_clauses]);
(* *** Goal "2" *** *)
a(strip_asm_tac(simple_µ_elim¨i:ÓÆ Ó_cases_thm));
(* *** Goal "2.1" *** *)
a(simple_∂_tac¨1Æ THEN asm_ante_tac¨m + i = nÆ THEN asm_rewrite_tac[plus_clauses]);
a(¥_T rewrite_thm_tac);
(* *** Goal "2.2" *** *)
a(asm_ante_tac¨m + i = nÆ THEN
	POP_ASM_T (rewrite_thm_tac o once_rewrite_rule[plus_comm_thm])
	THEN asm_rewrite_tac[plus_assoc_thm1]);
(* *** Goal "3" *** *)
a(simple_∂_tac¨i+1Æ THEN asm_rewrite_tac[plus_assoc_thm1]);
save_pop_thm"º_cases_thm"
);
=TEX
=SML
val €º_plus1_thm› = (
push_goal([], ¨µm n∑m º n + 1 § m = n + 1 ≤ m º nÆ);
a(REPEAT strip_tac);
(* *** Goal "1" *** *)
a(all_asm_ante_tac THEN rewrite_tac[º_def] THEN REPEAT strip_tac);
a(strip_asm_tac(simple_µ_elim¨i:ÓÆ Ó_cases_thm));
(* *** Goal "1.1" *** *)
a(asm_ante_tac¨m + i = n + 1Æ THEN asm_rewrite_tac[plus_clauses]);
(* *** Goal "1.2" *** *)
a(simple_∂_tac¨i':ÓÆ);
a(asm_ante_tac¨m + i = n + 1Æ THEN asm_rewrite_tac[plus_clauses, plus_assoc_thm1]);
(* *** Goal "2" *** *)
a(asm_rewrite_tac[º_clauses]);
(* *** Goal "3" *** *)
a(lemma_tac¨n º n + 1Æ);
a(asm_rewrite_tac[º_clauses]);
a(strip_asm_tac(list_simple_µ_elim[¨m:ÓÆ, ¨n:ÓÆ, ¨n+1Æ] º_trans_thm));
save_pop_thm"º_plus1_thm"
);
=TEX
=SML
val €plus1_º_thm› = (
push_goal([], ¨µm n∑m + 1 º n § m º n ± ≥m = nÆ);
a(rewrite_tac[º_def] THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(simple_∂_tac¨1+iÆ THEN asm_rewrite_tac[plus_assoc_thm1]);
(* *** Goal "2" *** *)
a(contr_tac THEN asm_ante_tac¨(m + 1) + i = nÆ THEN
	asm_rewrite_tac[plus_assoc_thm, plus_clauses]);
(* *** Goal "3" *** *)
a(strip_asm_tac(simple_µ_elim¨iÆÓ_cases_thm));
(* *** Goal "3.1" *** *)
a(asm_ante_tac¨m + i = nÆ THEN asm_rewrite_tac[plus_clauses]);
(* *** Goal "3.2" *** *)
a(simple_∂_tac¨i'Æ THEN asm_ante_tac¨m + i = nÆ);
a(asm_rewrite_tac[plus_assoc_thm, simple_µ_elim¨1Æ plus_comm_thm]);
save_pop_thm"plus1_º_thm"
);
=TEX
=SML
val €≥_plus1_º_thm› = (
push_goal([], ¨µm n∑≥m + 1 º n § n º mÆ);
a(rewrite_tac[º_def] THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(all_asm_ante_tac THEN induction_tac¨n:ÓÆ);
(* *** Goal "1.1" *** *)
a(rewrite_tac[plus_clauses] THEN simple_∂_tac¨m:ÓÆ THEN rewrite_tac[]);
(* *** Goal "1.2" *** *)
a(REPEAT strip_tac);
a(LEMMA_T ¨(m+1)+i+1 = n+1Æ ante_tac);
(* *** Goal "1.2.1" *** *)
a(GET_NTH_ASM_T 2 (fn th=>rewrite_tac[plus_assoc_thm1, th]));
(* *** Goal "1.2.2" *** *)
a(asm_rewrite_tac[]);
(* *** Goal "1.3" *** *)
a(REPEAT strip_tac);
a(strip_asm_tac(simple_µ_elim¨iÆÓ_cases_thm));
(* *** Goal "1.3.1" *** *)
a(asm_ante_tac ¨n + i = mÆ THEN asm_rewrite_tac[plus_clauses] THEN strip_tac);
a(LEMMA_T¨(m+1)+0 = n+1Æ ante_tac);
a(DROP_NTH_ASM_T 3 (fn _ => id_tac) THEN asm_rewrite_tac[plus_clauses]);
a(asm_rewrite_tac[]);
(* *** Goal "1.3.2" *** *)
a(simple_∂_tac¨i'Æ THEN asm_ante_tac ¨n + i = mÆ THEN
	asm_rewrite_tac[plus_assoc_thm, simple_µ_elim¨1Æ plus_comm_thm]);
(* *** Goal "2" *** *)
a(CONTR_T (asm_tac o eq_sym_rule o rewrite_rule[]));
a(asm_ante_tac ¨n + i = mÆ THEN asm_rewrite_tac[plus_clauses, plus_assoc_thm]);
save_pop_thm"≥_plus1_º_thm"
);
=TEX
=SML
val €less_cases_thm› = (
push_goal([], ¨µm n∑m < n ≤ m = n ≤ n < mÆ);
a(rewrite_tac[less_def] THEN REPEAT strip_tac);
a(rewrite_tac[plus1_º_thm] THEN conv_tac(ONCE_MAP_C eq_sym_conv));
a(asm_ante_tac ¨≥ m + 1 º nÆ THEN asm_rewrite_tac[≥_plus1_º_thm]);
save_pop_thm"less_cases_thm"
);
=TEX
=SML
val €≥_less_plus1_thm› = (
push_goal([], ¨µm n∑≥m < n + 1 § n < mÆ);
a(rewrite_tac[less_def, ≥_plus1_º_thm]);
save_pop_thm"≥_less_plus1_thm"
);
=TEX
=SML
val €less_plus1_thm› = (
push_goal([], ¨µm n∑m < n + 1 § m = n ≤ m < nÆ);
a(rewrite_tac[less_def, º_plus1_thm, plus_clauses]);
save_pop_thm"less_plus1_thm"
);
=TEX
=SML
val €plus1_less_thm› = (
push_goal([], ¨µm n∑m + 1 < n § m < n ± ≥m + 1 = nÆ);
a(rewrite_tac[less_def, plus1_º_thm, plus_clauses] THEN REPEAT strip_tac);
save_pop_thm"plus1_less_thm"
);
=TEX
=SML
val €º_antisym_thm› = (
push_goal([], ¨µm n∑m º n ± n º m § m = nÆ);
a(REPEAT strip_tac THEN TRY_T(asm_rewrite_tac[º_clauses]));
a(all_asm_ante_tac THEN asm_rewrite_tac[º_def] THEN REPEAT strip_tac);
a(POP_ASM_T (fn th => all_asm_ante_tac THEN
		rewrite_tac[eq_sym_rule th, plus_assoc_thm, plus_clauses] THEN
		REPEAT strip_tac));
save_pop_thm"º_antisym_thm"
);
=TEX
=SML
val €less_irrefl_thm› = (
push_goal([], ¨µm n∑≥(m < n ± n < m)Æ);
a(rewrite_tac[less_def, º_def] THEN REPEAT strip_tac);
a(POP_ASM_T (rewrite_thm_tac o eq_sym_rule) THEN
	rewrite_tac[plus_assoc_thm, plus_clauses]);
save_pop_thm"less_irrefl_thm"
);
=TEX
\subsection{Complete Induction}
=SML
val €cov_induction_thm› = (
push_goal([], ¨µp∑(µn∑(µm∑m < n ¥ p m) ¥ p n) ¥ (µn∑p n)Æ);
a(REPEAT strip_tac);
a(lemma_tac¨µm∑m < n ¥ p mÆ);
(* *** Goal "1" *** *)
a(induction_tac¨n:ÓÆ);
(* *** Goal "1.1" *** *)
a(rewrite_tac[less_clauses]);
(* *** Goal "1.2" *** *)
a(rewrite_tac[less_plus1_thm] THEN REPEAT strip_tac);
(* *** Goal "1.2.1" *** *)
a(POP_ASM_T rewrite_thm_tac THEN POP_ASM_T ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "1.2.2" *** *)
a(POP_ASM_T ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(POP_ASM_T ante_tac THEN asm_rewrite_tac[]);
save_pop_thm"cov_induction_thm"
);
=TEX
=SML
fun €COV_INDUCTION_T› (tm : TERM) : (THM -> TACTIC) -> TACTIC = (
	if not(is_var tm andalso type_of tm =: Ó)
	then term_fail "COV_INDUCTION_T" 38001 [tm]
	else (fn thmtac =>
		 let fun aux_tac (gl as (seqasms, conc)) = (
			if not (is_free_in tm conc)
			then term_fail "COV_INDUCTION_T" 38002 [tm]
			else if any seqasms (is_free_in tm)
			then	term_fail "COV_INDUCTION_T" 38003 [tm]
			else let
				val abs = mk_simple_Ã(tm, conc);
				val thm0 = (conv_rule
						(ONCE_MAP_C (simple_¬_conv))
						(simple_µ_elim abs cov_induction_thm));
				val thm1 = undisch_rule(conv_rule
	((RATOR_C o RAND_C o RAND_C)(simple_¡_conv (fst(dest_var tm))))
						thm0);
				val thm2 = simple_µ_elim tm thm1;
				val conc' = (hd (asms thm2));
			in	([(seqasms, conc')],
				 (fn [th] => prove_asm_rule th thm2
				  | _ => bad_proof "COV_INDUCTION_T"))
			end
		);
		in	aux_tac THEN simple_µ_tac THEN ¥_T thmtac
		end)
);
=TEX
=SML
fun €cov_induction_tac› (tm : TERM) : TACTIC = (
	let	val tac = (COV_INDUCTION_T tm strip_asm_tac);
	in	fn gl => (tac gl
			handle ex => pass_on ex
				"COV_INDUCTION_T" "cov_induction_tac")
	end handle ex => pass_on ex "COV_INDUCTION_T" "cov_induction_tac"
);
=TEX
=SML
val €less_well_order_thm› = (
push_goal([], ¨µp∑(∂i∑p i) § ∂m∑ p m ± µi∑ p i ¥ ≥i < mÆ);
a(REPEAT strip_tac);
(* *** Goal "1" *** *)
a(asm_ante_tac¨p iÆ THEN cov_induction_tac¨iÆ);
a(strip_tac THEN cases_tac¨∂n∑n < i ± p nÆ);
(* *** Goal "1.1" *** *)
a(GET_NTH_ASM_T 4 (strip_asm_tac o simple_µ_elim ¨nÆ));
a(simple_∂_tac¨mÆ THEN asm_rewrite_tac[]);
(* *** Goal "1.2" *** *)
a(simple_∂_tac¨iÆ THEN REPEAT strip_tac);
a(GET_NTH_ASM_T 2 (strip_asm_tac o simple_µ_elim ¨i'Æ));
(* *** Goal "2" *** *)
a(simple_∂_tac¨mÆ THEN asm_rewrite_tac[]);
save_pop_thm"less_well_order_thm"
);
=TEX
=SML
val €≥_less_thm› = (
push_goal([], ¨µm n∑ ≥m < n § n º mÆ);
a(rewrite_tac[less_def, ≥_plus1_º_thm]);
save_pop_thm"≥_less_thm"
);
=TEX
=SML
val €≥_º_thm› = (
push_goal([], ¨µm n∑ ≥m º n § n < mÆ);
a(REPEAT strip_tac THEN strip_asm_tac(list_simple_µ_elim[¨n:ÓÆ, ¨m:ÓÆ]≥_less_thm));
save_pop_thm"≥_º_thm"
);
=TEX
=SML
val €º_well_order_thm› = (
push_goal([], ¨µp∑(∂i∑p i) § ∂m∑ p m ± µi∑ p i ¥ m º iÆ);
a(accept_tac (rewrite_rule[≥_less_thm]less_well_order_thm));
save_pop_thm"º_well_order_thm"
);
=TEX
\subsection{Theorems on Multiplication}
=SML
val €times_lemma1› = (
push_goal([], ¨µm∑ m * 0 = 0Æ);
a(strip_tac THEN induction_tac¨m:ÓÆ THEN asm_rewrite_tac[times_def, plus_clauses]);
pop_thm()
);
=TEX
=SML
val €times_lemma2› = (
push_goal([], ¨µm n∑ m * (n + 1) = m * n + mÆ);
a(strip_tac THEN induction_tac¨m:ÓÆ THEN asm_rewrite_tac[times_def, plus_clauses]);
a(rewrite_tac[plus_assoc_thm1, plus_clauses]);
a(rewrite_tac[plus_assoc_thm, plus_clauses]);
pop_thm()
);
=TEX
=SML
val €times_comm_thm› = (
push_goal([], ¨µm n∑ m * n = n * mÆ);
a(strip_tac THEN induction_tac¨m:ÓÆ THEN rewrite_tac[times_def, times_lemma1]);
a(asm_rewrite_tac[times_lemma2]);
save_pop_thm"times_comm_thm"
);
=TEX
=SML
val €times_lemma3› = (
push_goal([], ¨µi m n∑ (i + m) * n = i * n + m * nÆ);
a(strip_tac THEN induction_tac¨i:ÓÆ THEN rewrite_tac[times_def, plus_clauses]);
a(LEMMA_T¨µi m'∑(i + 1) + m' = (i + m') + 1Æ rewrite_thm_tac);
(* *** Goal "1" *** *)
a(rewrite_tac[plus_assoc_thm, plus_clauses]);
(* *** Goal "2" *** *)
a(asm_rewrite_tac[times_def, plus_assoc_thm, plus_clauses]);
pop_thm()
);
=TEX
=SML
val €times_assoc_thm› = (
push_goal([], ¨µi m n∑ (i * m) * n = i * (m * n)Æ);
a(strip_tac THEN induction_tac¨i:ÓÆ THEN rewrite_tac[times_def]);
a(asm_rewrite_tac[times_lemma3, plus_clauses]);
save_pop_thm"times_assoc_thm"
);
=TEX
=SML
val €times_plus_distrib_thm› = (
push_goal([], ¨µi m n∑
		(i + m) * n = i * n + m * n
	±	i * (m + n) = i * m + i * nÆ);
a(rewrite_tac[times_lemma3]);
a(rewrite_tac[simple_µ_elim¨i:ÓÆ times_comm_thm, times_lemma3]);
save_pop_thm"times_plus_distrib_thm"
);
=TEX
=SML
val €times_lemma4› = (
push_goal([], ¨µm∑ 1 * m  = mÆ);
a(conv_tac (ONCE_MAP_C plus1_conv) THEN rewrite_tac[times_def, plus_clauses]);
pop_thm()
);
=TEX
=SML
val €times_clauses› = (
push_goal([], ¨µm∑
		m * 0 = 0
	±	0 * m = 0
	±	m * 1 = m
	±	1 * m = mÆ);
a(rewrite_tac[
	simple_µ_elim¨m:ÓÆ times_comm_thm,
	times_def, times_lemma4]); 
save_pop_thm"times_clauses"
);
=TEX
\subsection{Interlude}
The following is required to circumvent a compiler problem which would
be caused if we attempted to include all the material in this document
in one Standard ML structure:
=SML
end; (* of structure Ó (part 2) *)
structure Ó : Ó = struct
open Ó;
=TEX
\subsection{Theorems on Division and Modulus}
=SML
val €mod_less_thm› = (
push_goal([], ¨µm n∑ 0 < n ¥ m Mod n < nÆ);
a(strip_tac THEN strip_tac THEN induction_tac¨m:ÓÆ);
(* *** Goal "1" *** *)
a(strip_tac THEN strip_asm_tac (all_simple_µ_elim mod_def)
	THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(strip_tac);
(* *** Goal "3" *** *)
a(strip_tac THEN strip_asm_tac (all_simple_µ_elim mod_def)
	THEN asm_rewrite_tac[]);
a(CASES_T ¨m Mod n + 1 < nÆ asm_rewrite_thm_tac);
save_pop_thm"mod_less_thm"
);
=TEX
=SML
val €div_mod_thm› = (
push_goal([], ¨µm n∑ 0 < n ¥ m = (m Div n) * n + m Mod nÆ);
a(strip_tac THEN strip_tac THEN induction_tac¨m:ÓÆ);
(* *** Goal "1" *** *)
a(strip_tac THEN strip_asm_tac (all_simple_µ_elim mod_def)
	THEN strip_asm_tac (all_simple_µ_elim div_def)
	THEN asm_rewrite_tac[times_def, plus_clauses]);
(* *** Goal "2" *** *)
a(strip_tac);
(* *** Goal "3" *** *)
a(strip_tac THEN strip_asm_tac (all_simple_µ_elim mod_def)
	THEN strip_asm_tac (all_simple_µ_elim div_def));
a(REPEAT_N 4 (POP_ASM_T (TRY_T o rewrite_thm_tac)));
a(CASES_T¨m Mod n + 1 < nÆ (fn th => rewrite_tac[th] THEN asm_tac th));
(* *** Goal "3.1" *** *)
a(rewrite_tac[plus_assoc_thm1, plus_clauses] THEN strip_tac);
(* *** Goal "3.2" *** *)
a(strip_asm_tac (list_simple_µ_elim[¨mÆ, ¨nÆ] mod_less_thm));
a(DROP_ASM_T ¨≥m Mod n + 1 < nÆ (strip_asm_tac o rewrite_rule[plus1_less_thm]));
a(rewrite_tac[times_def, plus_clauses]);
a(LEMMA_T ¨m + 1 = (m Div n) * n + m Mod n + 1Æ
	(fn th => rewrite_tac[th, plus_clauses] THEN strip_tac));
a(rewrite_tac[plus_assoc_thm1, plus_clauses] THEN strip_tac);
save_pop_thm"div_mod_thm"
);
val €less_lemma1› = (
push_goal([], ¨µm n∑ m < n ¥ 0 < nÆ);
a(rewrite_tac[less_def, º_def] THEN REPEAT strip_tac);
a(simple_∂_tac¨m+iÆ THEN
	LEMMA_T¨(0 + 1) + (m + i) = (m + 1) + iÆ asm_rewrite_thm_tac);
a(rewrite_tac[plus_clauses, plus_assoc_thm1]);
pop_thm()
);
=TEX
=SML
val €mod_lemma1› = (
push_goal([], ¨µm n∑ m < n ¥ m Mod n = mÆ);
a(REPEAT simple_µ_tac THEN induction_tac¨m:ÓÆ);
(* *** Goal "1" *** *)
a(strip_tac THEN strip_asm_tac(all_simple_µ_elim mod_def));
(* *** Goal "2" *** *)
a(strip_tac THEN lemma_tac ¨m + 1 < n ¥ m < nÆ);
a(strip_asm_tac (list_simple_µ_elim[¨mÆ, ¨m+1Æ, ¨nÆ]less_trans_thm));
a(asm_ante_tac¨≥ m < m + 1Æ THEN rewrite_tac[less_clauses]);
(* *** Goal "3" *** *)
a(strip_tac THEN strip_asm_tac(list_simple_µ_elim[¨m + 1Æ, ¨nÆ]less_lemma1));
a(strip_asm_tac (simple_µ_intro¨m:ÓÆ(undisch_rule(all_simple_µ_elim mod_def))));
a(asm_rewrite_tac[]);
pop_thm()
);
=TEX
=SML
val €mod_lemma2› = (
push_goal([], ¨µn∑ 0 < n ¥ n Mod n = 0Æ);
a(REPEAT strip_tac);
a(lemma_tac¨∂i∑n Mod n = (i + 1) Mod n ± i < n ± i Mod n + 1 = nÆ);
(* *** Goal "1" *** *)
a(POP_ASM_T(strip_asm_tac o rewrite_rule
		[less_def, º_def, plus_clauses, simple_µ_elim¨1Æplus_comm_thm]));
a(simple_∂_tac ¨iÆ THEN asm_rewrite_tac[]);
a(lemma_tac¨i < nÆ);
(* *** Goal "1.1" *** *)
a(POP_ASM_T (rewrite_thm_tac o eq_sym_rule) THEN rewrite_tac[less_clauses]);
(* *** Goal "1.2" *** *)
a(strip_tac THEN strip_asm_tac (list_simple_µ_elim[¨iÆ, ¨nÆ]mod_lemma1));
a(asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(strip_asm_tac(list_simple_µ_elim[¨iÆ, ¨nÆ]mod_def));
a(asm_rewrite_tac[less_clauses]);
pop_thm()
);
=TEX
=SML
val €mod_lemma3› = (
push_goal([], ¨µm n∑ 0 < n ¥ (m + n) Mod n = m Mod nÆ);
a(REPEAT strip_tac THEN 
	strip_asm_tac (simple_µ_intro¨m:ÓÆ(undisch_rule(all_simple_µ_elim mod_def)))
	THEN induction_tac¨m:ÓÆ);
(* *** Goal "1" *** *)
a(asm_rewrite_tac[plus_clauses]);
a(strip_asm_tac (simple_µ_elim ¨nÆ mod_lemma2));
a(LEMMA_T¨(m + 1) + n = (m + n) + 1Æ asm_rewrite_thm_tac);
a(rewrite_tac[plus_assoc_thm, plus_clauses]);
pop_thm()
);
=TEX
=SML
val €mod_lemma4› = (
push_goal([], ¨µm n i∑ 0 < n ¥ (m*n + i) Mod n = i Mod nÆ);
a(REPEAT strip_tac THEN induction_tac¨m:ÓÆ);
(* *** Goal "1" *** *)
a(rewrite_tac[times_clauses, plus_clauses]);
(* *** Goal "2" *** *)
a(LEMMA_T¨(m + 1) * n + i = (m * n + i) + nÆ rewrite_thm_tac);
(* *** Goal "2.1" *** *)
a(rewrite_tac[times_plus_distrib_thm, plus_assoc_thm, plus_clauses, times_clauses]);
(* *** Goal "2.2" *** *)
a(strip_asm_tac(list_simple_µ_elim[¨m * n + iÆ, ¨nÆ]mod_lemma3));
a(asm_rewrite_tac[]);
pop_thm()
);
=TEX
=SML
val €div_lemma1› = (
push_goal([], ¨µn∑ 0 < n ¥ n Div n = 1Æ);
a(REPEAT strip_tac THEN
	STRIP_THM_THEN ante_tac(list_simple_µ_elim[¨n:ÓÆ, ¨n:ÓÆ] div_mod_thm));
a(strip_asm_tac(simple_µ_elim¨nÆ mod_lemma2) THEN POP_ASM_T rewrite_thm_tac);
a(strip_asm_tac(list_simple_µ_elim[¨n Div nÆ, ¨1Æ] less_cases_thm) THEN contr_tac);
(* *** Goal "1" *** *)
a(lemma_tac ¨n Div n = 0Æ);
(* *** Goal "1.1" *** *)
a(strip_asm_tac (simple_µ_elim¨n Div nÆ Ó_cases_thm));
a(asm_ante_tac¨n Div n < 1Æ THEN asm_rewrite_tac[less_clauses]);
(* *** Goal "1.2" *** *)
a(asm_ante_tac¨n = (n Div n) * n + 0Æ THEN asm_rewrite_tac[plus_clauses, times_clauses]);
a(contr_tac THEN asm_ante_tac¨0 < nÆ  THEN rewrite_tac[less_def, º_def]
	THEN REPEAT strip_tac);
a(asm_rewrite_tac[plus_clauses]);
(* *** Goal "2" *** *)
a(asm_ante_tac¨1 < n Div nÆ THEN
	rewrite_tac[less_def, º_def, simple_µ_elim¨i:ÓÆ plus_order_thm] THEN
	REPEAT strip_tac);
a(conv_tac (RAND_C eq_sym_conv));
a(contr_tac THEN asm_ante_tac ¨n = (n Div n) * n + 0Æ);
a(asm_rewrite_tac[plus_clauses, times_plus_distrib_thm, times_clauses, plus_assoc_thm1]);
a(REPEAT strip_tac);
a(asm_ante_tac ¨0 < nÆ THEN asm_rewrite_tac[less_clauses]);
pop_thm()
);
=TEX
=SML
val €div_lemma2› = (
push_goal([], ¨µm n∑ 0 < n ¥ (m + n) Div n = m Div n + 1Æ);
a(REPEAT strip_tac THEN 
	strip_asm_tac (simple_µ_intro¨m:ÓÆ(undisch_rule(all_simple_µ_elim div_def)))
	THEN induction_tac¨m:ÓÆ);
(* *** Goal "1" *** *)
a(strip_asm_tac(simple_µ_elim¨nÆdiv_lemma1) THEN asm_rewrite_tac[plus_clauses]);
(* *** Goal "2" *** *)
a(LEMMA_T¨(m + 1) + n = (m + n) + 1Æ rewrite_thm_tac);
(* *** Goal "2.1" *** *)
a(rewrite_tac [plus_assoc_thm, plus_clauses]);
(* *** Goal "2.2" *** *)
a(strip_asm_tac (simple_µ_intro¨m:ÓÆ(undisch_rule(all_simple_µ_elim mod_lemma3))));
a(asm_rewrite_tac[]);
a(cases_tac¨m Mod n + 1 < nÆ THEN asm_rewrite_tac[]);
pop_thm()
);
=TEX
=SML
val €div_lemma3› = (
push_goal([], ¨µn i∑ i < n ¥ i Div n = 0Æ);
a(REPEAT strip_tac);
a(strip_asm_tac (list_simple_µ_elim[¨iÆ, ¨nÆ]less_lemma1));
a(strip_asm_tac (simple_µ_intro¨m:ÓÆ(undisch_rule(all_simple_µ_elim div_def))));
a(asm_ante_tac¨i < nÆ THEN induction_tac¨iÆ THEN asm_rewrite_tac[]
	THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(lemma_tac¨i < i + 1Æ);
(* *** Goal "1.1" *** *)
a(rewrite_tac[less_clauses]);
(* *** Goal "1.2" *** *)
a(strip_asm_tac(list_simple_µ_elim[¨iÆ, ¨i + 1Æ, ¨nÆ]less_trans_thm));
(* *** Goal "2" *** *)
a(lemma_tac¨i < nÆ);
(* *** Goal "2.1" *** *)
a(lemma_tac¨i < i + 1Æ);
(* *** Goal "2.1.1" *** *)
a(rewrite_tac[less_clauses]);
(* *** Goal "2.1.2" *** *)
a(strip_asm_tac(list_simple_µ_elim[¨iÆ, ¨i + 1Æ, ¨nÆ]less_trans_thm));
(* *** Goal "2.2" *** *)
a(strip_asm_tac(list_simple_µ_elim[¨iÆ, ¨nÆ]mod_lemma1));
a(asm_rewrite_tac[]);
pop_thm()
);
=TEX
=SML
val €div_lemma4› = (
push_goal([], ¨µm n i∑ i < n ¥ (m * n + i) Div n = mÆ);
a(REPEAT strip_tac THEN induction_tac¨m:ÓÆ);
(* *** Goal "1" *** *)
a(strip_asm_tac(list_simple_µ_elim[¨nÆ, ¨iÆ]div_lemma3));
a(asm_rewrite_tac[times_clauses, plus_clauses]);
(* *** Goal "2" *** *)
a(strip_asm_tac(list_simple_µ_elim[¨iÆ, ¨nÆ]less_lemma1));
a(strip_asm_tac(list_simple_µ_elim[¨m * n + iÆ, ¨nÆ]div_lemma2));
a(LEMMA_T¨(m + 1) * n + i = (m * n + i) + nÆ asm_rewrite_thm_tac);
a(rewrite_tac[times_plus_distrib_thm, plus_assoc_thm, times_clauses, plus_clauses]);
pop_thm()
);
=TEX
=SML
val €div_mod_unique_thm› = (
push_goal([], ¨µm n d r∑ r < n ¥ (m = d * n + r ¥ d = m Div n ± r = m Mod n)Æ);
a(REPEAT strip_tac);
(* *** Goal "1" *** *)
a(strip_asm_tac(list_simple_µ_elim[¨dÆ, ¨nÆ, ¨rÆ]div_lemma4));
a(asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(strip_asm_tac(list_simple_µ_elim[¨rÆ, ¨nÆ]less_lemma1));
a(strip_asm_tac(list_simple_µ_elim[¨dÆ, ¨nÆ, ¨rÆ]mod_lemma4));
a(strip_asm_tac(list_simple_µ_elim[¨rÆ, ¨nÆ]mod_lemma1));
a(asm_rewrite_tac[]);
save_pop_thm"div_mod_unique_thm"
);
=TEX
\subsection{Subtraction}
=SML
val €minus_def› = new_spec(["-","minus_def"], 1, (
push_goal([], ¨
	∂$-:Ó≠Ó≠Ó∑ µm n∑
		(m + n) - n = m
Æ);
=TEX
=SML
a(strip_asm_tac	(conv_rule all_simple_¬_conv
	(list_simple_µ_elim
	[¨Ãn:Ó∑0Æ, ¨Ãf:Ó≠Ó∑Ãm:Ó∑Ãn∑if m < n then 0 else (f n) + 1Æ]
	(inst_type_rule[(îÓ≠ÓÆ, î'aÆ)]prim_rec_thm))));
a(simple_∂_tac ¨f:Ó≠Ó≠ÓÆ);
a(strip_tac THEN strip_tac THEN induction_tac¨m:ÓÆ);
(* *** Goal "1" *** *)
a(rewrite_tac[plus_clauses] THEN induction_tac¨nÆ THEN asm_rewrite_tac[less_clauses]);
(* *** Goal "2" *** *)
a(asm_rewrite_tac[plus_def, less_clauses]);
=TEX
=SML
pop_thm()
));
=TEX
=SML
val €minus_lemma1› = (
push_goal([], ¨µm∑ m - m = 0Æ);
a(LEMMA_T ¨µm∑ (0 + m) - m = 0Æ
	(rewrite_thm_tac o rewrite_rule[plus_clauses])
	THEN rewrite_tac[minus_def]);
pop_thm()
);
=TEX
=SML
val €minus_lemma2› = (
push_goal([], ¨µm∑ m - 0 = mÆ);
a(LEMMA_T ¨µm∑ (m + 0) - 0 = mÆ
	(rewrite_thm_tac o rewrite_rule[plus_clauses])
	THEN rewrite_tac[minus_def]);
pop_thm()
);
=TEX
=SML
val €minus_clauses› = (
push_goal([], ¨µm n∑
		m - m = 0
	±	m - 0 = m
	±	(m + n) - n = m
	±	(m + n) - m = n
Æ);
a(rewrite_tac[minus_lemma1, minus_lemma2, minus_def]);
a(rewrite_tac[simple_µ_elim¨n:ÓÆplus_order_thm, minus_def]);
save_pop_thm"minus_clauses"
);
=TEX
\section{EPILOGUE}
=SML
val _ = pop_pc();
end; (* of structure Ó (part 3) *)
open Ó;
=TEX

\end{document}



