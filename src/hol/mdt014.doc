%  mdt014.doc  %Z% $Date$ $Revision$ $RCSfile$
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Module Tests for Unification}  %% Mandatory field
\TPPref{DS/FMU/IED/MDT014}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}  %% Mandatory field (with sensible default)
\TPPstatus{Draft}
%\TPPstatus{Approved}
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{
This document comprises test cases and test data for
Unification}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library \\ R.D. Arthan\\ D.J. King}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1 -1.4]
Initial drafts.

\item[Issue 1.5]
Done rework as required by desk check report ID0085.

\item[Issue 2.1]
This is an approved version of issue 1.5.

\item[Issue 2.2 20 November 1991]
Modified to work with the version of
unification supplied in issue 2.2 (and those following) of
\cite{DS/FMU/IED/DTD014}.


\item[Issue \SCCSversion, \FormatDate{92/01/20} ] Updated to use new fonts.

\end{description}
\subsection{Changes forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}

This document comprises tests of the function $unify$
which is specified in \cite{DS/FMU/IED/IMP014}.

\subsection{Introduction}

\subsubsection{Background and Purpose}

The purpose of this document is to test
the function unify in accordance with the test policy in
\cite{DS/FMU/IED/DTD014} and the guidelines laid out in the
quality plan, \cite{DS/FMU/IED/PLN008}.

\subsubsection{Dependencies}

This document depends on the signature $Unification$ specified
in \cite{DS/FMU/IED/DTD014}, and the structure $Unification$
specified in \cite{DS/FMU/IED/IMP014}. It makes use of the
module test harness described in \cite{DS/FMU/IED/DTD013} and
\cite{DS/FMU/IED/IMP013}.

\subsubsection{Possible Enhancements}

None.

\subsubsection{Deficiencies}

None Known.

\section{TEST CASES}

Ideally, the tests for unify would comprise output of
the parser together with the type inferrer for
examples of expressions. However, because the
parser and the type inferrer are not available at the
time of writing these tests, the approach used
has been to construct by hand the output the parser
would generate for some expressions and to feed that
output into the function $unify$ and then observe the
result.

The expressions used have been picked from
\cite{PeytonJones86} (test cases 3 and 4) and
\cite{DS/FMU/IED/DTD014} (test case 1). The
others have been provided to ensure that all
the features of unify are fully exercised. The reader
should note that each test case for $unify$ will
call the unify function possibly several times. Hence
the actual number of tests carried out on the function
is much higher than the apparent number of test cases.

The data for each test case is constructed by hand. The
equations for each test cases are provided in the
form introduced in \cite{PeytonJones86}, and the
naming convention used in the test data should
indicate a correspondence to the equations. It is believed
that the test case data for $unify$ is self-explanitory.

A local function called $rep\_unify$ is supplied. Its
purpose is to unify a list of pairs of types, folding
the substitution. This is convenient for unifying
a group of equations. The results of unifying an
expression are then tested applying the function $sub_type1$
to the substitution tree produced by unification. This
enables the expected results for unification to be
expressed concisely.

The functions $extype\_to\_type$ and $type\_to\_extype$
are also tested in this
document, since they are not tested indirectly by other
tests in this document, nor are likely to be tested
sufficiently in the tests for type inference.

\begin{description}

\item[unify.1]

For the expression
$(Ìx · a = x)F$ test that $a$ and $x$ are both of type
$bool$.

\item[unify.2]

For the expression
$x + sin\ theta$ test that the variables $x$ and $theta$ are
both of type $real$.

\item[unify.3]

For the expression
$(Ìx · Ìy · Ìz · x\ z\ (y\ z))$ test that the types of $x$, $y$ and
$z$ correspond to the way they are applied.

\item[unify.4]

For the expression
$Ìf · Ìa · Ìb · Ìc · c (f\ a) (f\ b)$
test that the types of $a,b,c$ and
$f$ correspond to the way they are applied.


\item[unify.5]

For the expression
$y:real = m * x + c$ test that the variables $m$, $x$ and
$c$ have the type $real$.

\item[unify.6]

For the expression
y = (1 = 2) test that the variable $y$ is of type $bool$, and
that each of the occurences of $=$ are
typed appropriately.

\item[unify.7]

Test that the unification of two different types
raises an exception with the correct error message.

\item[unify.8]

Test that the unification of ?1 with ?1 ­ ?1 generates
the appropriate error message.

\item[extype\_to\_type.1]

Test that the function $extype\_to\_type$ applied
to an unknown type gives a type with a new type name when:

\begin{enumerate}

\item
when the name map contains a mapping for
that unknown type and the substitution is the identity.

\item
when the name map contains a mapping for
that unknown type and the substitution takes
the type unknown onto a known type.

\item
when name map contains no mapping for
that unknown type and the substitution takes
the type unknown onto a known type.

\end{enumerate}

\item[extype\_to\_type.2]

Test that the function $extype\_to\_type$ applied
to an known type gives the corresponding type.

\item[extype\_to\_type.3]
Test that an exception is raised when the name map contains no mapping for
that unknown type.

\item[extype\_to\_type.4]
Test that an extended type with more than one unknown
is correctly translated when those unknowns appear in
the name map.

\item[type\_to\_extype]

Test that $type\_to\_extype$ correctly converts
types to extended types for each TYPE value constructor.

\item[next\_name.1]

Test that $next\_name$ when called after $start\_again$
gives the value 1.

\item[next\_name.2]

Test that a subsequent call to $next\_name$ gives the value 1.

\item[new\_name.1]

Test that $new\_name$ correctly associates numbers with names
provided in a list, and yields a list of pairs.

\item[replaced.1]

Test that calling $replaced$ with a type variable yields
a type unknown.

\item[replaced.2]

Test that calling $replaced$ with a compound type with
no type variables yields a corresponding extended type.

\end{description}

\section{TEST HARNESS INITIALISATION}

=SML
usefile "dtd013.sml";
usefile "imp013.sml";
init_mt_results ();
=TEX

\section{TEST DATA AND TEST CODE}

The following function is useful for constructing the
test cases.

=SML
let
open SparseArray Unification;

fun rep_unify (phi : SUBS) (nil :(EXTYPE * EXTYPE) list) : SUBS = phi
  | rep_unify phi (x::xs) = rep_unify ((unify phi x);phi) xs;
=TEX

The function $funt$ is a shorthand way of constructing a
function type.
=SML
fun funt t1 t2 = ExType ("­",[t1, t2]);
=TEX
The function $sub\_type1$ takes a type unknown $i$ and
applies the substitution function $phi$ recursively until
the extended type is unchanged. The result returned
is the extended type which the type unknown $i$ changes to
through $phi$.

=SML
fun sub_type1 (phi, i) = sub_type phi (ExVartype(Unknown i));
=TEX

The following variables will be used to construct the
tests.

=SML
val bool = ExType("bool",[]);
val int = ExType("int",[]);
val real = ExType("real",[]);
val unk0 = ExVartype(Unknown 0);
val unk1 = ExVartype(Unknown 1);
val unk2 = ExVartype(Unknown 2);
val unk3 = ExVartype(Unknown 3);
val unk4 = ExVartype(Unknown 4);
val unk5 = ExVartype(Unknown 5);
val unk6 = ExVartype(Unknown 6);
val unk7 = ExVartype(Unknown 7);
val unk8 = ExVartype(Unknown 8);
val unk9 = ExVartype(Unknown 9);
=TEX

\subsection{Test Data for Case $unify.1$}

=EXAMPLE
(Ìx · a = x)F

	x	: ?1
	a	: ?2
	=	: ?3 ­ ?3 ­ bool
	F	: bool

	?3 ­ ?3 ­ bool	=	?2 ­ ?1 ­ ?4
	?1 ­ ?4 		=	bool ­ ?5
=SML
val eq1000 = (funt unk3 (funt unk3 bool),
		funt unk2 (funt unk1 unk4));
val eq1001 = (funt unk1 unk4, funt bool unk5);

val newsubs1 = rep_unify (new_subs 100) [eq1000,eq1001];
val res1000 = bool;
val res1001 = bool;
val res1002 = bool;
=TEX

\subsection{Test Data for Case $unify.2$}

=EXAMPLE
x + sin theta
=TEX
=EXAMPLE
	x	: ?0
	+	: ?1 ­ ?1 ­ ?1
	sin	: real ­ real
	theta	: ?2
=TEX
=EXAMPLE
	real ­ real	=	?2 ­ ?3
	?1 ­ ?1 ­ ?1	=	?0 ­ ?3 ­ ?4
=SML
val eq2000 = (funt real real,funt unk2 unk3);
val eq2001 = (funt unk1 (funt unk1 unk1),funt unk0 (funt unk3 unk4));
val newsubs2 = rep_unify (new_subs 100) [eq2000,eq2001];
val res2000 = real;
val res2001 = real;
val res2002 = real;
=TEX

\subsection{Test Data for Case $unify.3$}

=EXAMPLE
(Ìx · Ìy · Ìz · x z (y z))
(Ìx · Ìy · Ìz · x:?0 z:?1 (y:?2 z:?3))
=TEX
=EXAMPLE
	?0		=	?1 ­ ?4
	?2		=	?3 ­ ?5
	?4		=	?5 ­ ?6

=SML
val eq3000 = (unk0,funt unk1 unk4);
val eq3001 = (unk2,funt unk3 unk5);
val eq3002 = (unk4,funt unk5 unk6);
val newsubs3 = rep_unify (new_subs 100) [eq3000,eq3001,eq3002];
val res3000 = (funt unk1 (funt unk5 unk6));
val res3001 = unk1;
val res3002 = (funt unk3 unk5);
val res3003 = unk3;
=TEX

\subsection{Test Data for Case $unify.4$}

=EXAMPLE
F = Ìf · Ìa · Ìb · Ìc · c (f a) (f b)
=TEX
=EXAMPLE
	f	: ?0
	a	: ?1
	c	: ?2
	f	: ?4
	b	: ?5
=TEX
=EXAMPLE
	?0		=	?1 ­ ?3
	?2		=	?3 ­ ?6
	?4		=	?5 ­ ?7
	?6		=	?7 ­ ?8
=SML
val eq4000 = (unk0, funt unk1 unk3);
val eq4001 = (unk2, funt unk3 unk6);
val eq4002 = (unk4, funt unk5 unk7);
val eq4003 = (unk6, funt unk7 unk8);
val newsubs4 = rep_unify (new_subs 100) [eq4000,eq4001,eq4002,eq4003];
val res4000 = (funt unk1 unk3);
val res4001 = unk1;
val res4002 = (funt unk3 (funt unk7 unk8));
val res4003 = (funt unk5 unk7);
val res4004 = unk5;
=TEX

\subsection{Test Data for Case $unify.5$}

=EXAMPLE
y:real = m * x + c
=TEX
=EXAMPLE
	m	: ?0
	x	: ?1
	c	: ?2
	=	: ?3 ­ ?3 ­ bool
	+	: ?4 ­ ?4 ­ ?4
	*	: ?5 ­ ?5 ­ ?5
=TEX
=EXAMPLE
	?5 ­ ?5 ­ ?5		=	?0 ­ ?1 ­ ?6
	?4 ­ ?4 ­ ?4		=	?6 ­ ?2 ­ ?7
	?3 ­ ?3 ­ bool	=	real ­ ?7 ­ ?8
=SML
val eq5000 = (funt unk5 (funt unk5 unk5), funt unk0 (funt unk1 unk6));
val eq5001 = (funt unk4 (funt unk4 unk4), funt unk6 (funt unk2 unk7));
val eq5002 = (funt unk3 (funt unk3 bool), funt real (funt unk7 unk8));
val newsubs5 = rep_unify (new_subs 100) [eq5000,eq5001,eq5002];
val res5000 = real;
val res5001 = real;
val res5002 = real;
=TEX

\subsection{Test Data for Case $unify.6$}

=EXAMPLE
y = (1 = 2)
=TEX
=EXAMPLE
	y	: ?0
	=	: ?1 ­ ?1 ­ bool
	1	: int
	=	: ?2 ­ ?2 ­ bool
	2	: int
=TEX
=EXAMPLE
	
	?2 ­ ?2 ­ bool	=	int ­ int ­ ?3
	?1 ­ ?1 ­ bool	=	?0 ­ ?3 ­ bool
=SML
val eq6000 = (funt unk2 (funt unk2 bool), funt int (funt int unk3));
val eq6001 = (funt unk1 (funt unk1 bool), funt unk0 (funt unk3 bool));
val newsubs6 = rep_unify (new_subs 100) [eq6000,eq6001];
val res6000 = bool;
val res6001 = bool;
val res6002 = int;
=TEX

\subsection{Test Data for Other Cases of $unify$}

=SML
val in7000 = (int,bool);
val res7000 = gen_fail_msg "unify" 14001 ["int","bool"];

val in8000 = (unk1,funt unk1 unk1);
val res8000 = gen_fail_msg "unify" 14002 [];
=TEX

\subsection{Test Data for $extype\_to\_type$ and $type\_to\_extype$}

=SML
val in9000 = ExVartype (Known "ANY");
val in9001 = ExType ("ANY", [unk0, unk1]);
val map9000 = [(9, "'a")];
val map9001 = [(0, "'a"), (1, "'b")];

val res9000 = mk_vartype "'a";
val res9001 = mk_ctype ("bool",[]);
val res9002 = mk_vartype "ANY";
val res9003 = mk_ctype ("ANY", [mk_vartype "'a",mk_vartype "'b"]);

val res10000 = gen_fail_msg "extype_to_type" 14003 ["1"];

val in11000 = mk_vartype "ANY";
val in11001 = mk_ctype ("ANY",[]);
val in11002 = mk_ctype ("ANY",[mk_ctype ("int",[]), mk_ctype ("bool",[])]);

val res11000 = ExVartype (Known "ANY");
val res11001 = ExType ("ANY",[]);
val res11002 = ExType ("ANY",[int, bool]);
=TEX
\subsection{Test Data for $next\_name$}

=SML
val side_effect = start_again();
val res13000 = 0;
val res13001 = 1;
=TEX

\subsection{Test Data for $new\_name$}

=SML
val in14000 = ["A","B","C"];
val res14000 = [("A",2),("B",3),("C",4)];
=TEX

\subsection{Test Data for $replaced$}

=SML
val in15000 = mk_vartype "X";
val in15001 = mk_ctype("Y",[BOOL]);
val res15000 = ExVartype(Unknown 5);
val res15001 = ExType("Y",[ExType ("BOOL",[])]);
=TEX

\subsection{Running the Tests}

=SML
in
store_mt_results mt_run [
("unify.1.1",sub_type1, (newsubs1,1), res1000),
("unify.1.2",sub_type1, (newsubs1,2), res1001),
("unify.1.3",sub_type1, (newsubs1,3), res1002),
("unify.2.1",sub_type1, (newsubs2,0), res2000),
("unify.2.2",sub_type1, (newsubs2,1), res2001),
("unify.2.3",sub_type1, (newsubs2,2), res2002),
("unify.3.1",sub_type1, (newsubs3,0), res3000),
("unify.3.2",sub_type1, (newsubs3,1), res3001),
("unify.3.3",sub_type1, (newsubs3,2), res3002),
("unify.3.4",sub_type1, (newsubs3,3), res3003),
("unify.4.1",sub_type1, (newsubs4,0), res4000),
("unify.4.2",sub_type1, (newsubs4,1), res4001),
("unify.4.3",sub_type1, (newsubs4,2), res4002),
("unify.4.4",sub_type1, (newsubs4,4), res4003),
("unify.4.5",sub_type1, (newsubs4,5), res4004),
("unify.5.1",sub_type1, (newsubs5,0), res5000),
("unify.5.2",sub_type1, (newsubs5,1), res5001),
("unify.5.3",sub_type1, (newsubs5,2), res5002),
("unify.6.1",sub_type1, (newsubs6,0), res6000),
("unify.6.2",sub_type1, (newsubs6,1), res6001),
("unify.6.3",sub_type1, (newsubs6,2), res6002)
];

store_mt_results mt_run_fail [
("unify.7.1",unify (new_subs 100), in7000, res7000),
("unify.8.1",unify (new_subs 100), in8000, res8000)
];

store_mt_results mt_run [
("extype_to_type.1.1",extype_to_type (new_subs 100) map9000, unk9, res9000),
("extype_to_type.1.2",extype_to_type newsubs1 [], unk1, res9001),
("extype_to_type.1.3",extype_to_type newsubs1 [], unk1, res9001),
("extype_to_type.2.1",extype_to_type (new_subs 100) [], in9000, res9002),
("extype_to_type.2.2",extype_to_type (new_subs 100) [], in9000, res9002),
("extype_to_type.4",extype_to_type (new_subs 100) map9001, in9001, res9003)
];

store_mt_results mt_run_fail [
("extype_to_type.3",extype_to_type (new_subs 100) [], unk1, res10000)
];

store_mt_results mt_run [
("type_to_extype.1.1",type_to_extype, in11000, res11000),
("type_to_extype.1.2",type_to_extype, in11001, res11001),
("type_to_extype.1.3",type_to_extype, in11002, res11002)
];

store_mt_results mt_run [
("next_name.1", next_name, (), res13000),
("next_name.2", next_name, (), res13001)
];

store_mt_results mt_run [
("new_name.1", new_name, in14000, res14000)
];

store_mt_results mt_run [
("replaced.1", replaced, in15000, res15000),
("replaced.2", replaced, in15001, res15001)
]

(* end  of let ... in ... *)
end; (* of local ... in ... *)
=TEX

\section{SUMMARY OF RESULTS}

Finally, the results are printed.
=SML
diag_string(summarize_mt_results());
=TEX


%\newpage
%\twocolumn[\section{INDEX OF DEFINED TERMS}]
%\printindex
\end{document}


