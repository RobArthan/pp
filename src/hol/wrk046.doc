=IGN
********************************************************************************
wrk046.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
%  2002/10/17 16:20:01  1.8 wrk046.doc,v
% COPYRIGHT (c) Lemma 1 Ltd.
=IGN
%
% The material in this document may be loaded into the ProofPower-HOL system
% using the following UNIX commands:
docsml wrk046			# strip the proof script out into wrk046.sml
hol				# run ProofPower-HOL
use_file"wrk046";		(* load file wrk046.sml into ProofPower-HOL *)
%
% Useful ProofPower-HOL commands:
%	
open_theory"lib_thms";		(* open the theory built by this file *)
print_theory"lib_thms";		(* list the theory on the screen *)
output_theory{theory="lib_thms", out_file="wrk046.thl.doc"};
				(* list the theory into a file in .doc format *)
%
% Useful UNIX commands:
doctex wrk046		# convert the document into LaTeX format (in wrk046.tex)
doctex wrk046.thl	# convert the theory listing into LaTeX \input format
texdvi wrk046		# run LaTeX on the document (giving wrk046.dvi)
docsml wrk046		# strip the proof script out into wrk046.sml
=TEX
\documentclass[a4paper,11pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}

\ftlinepenalty=9999
\pagestyle{plain}
\thispagestyle{plain}

\parskip=0.5\parskip


\makeindex
\thispagestyle{empty}

\begin{document}
\thispagestyle{empty}
\date{}
\title{\vspace{-3pc}\bf Library Theorems \\ (DRAFT)}
\author{\large Rob Arthan \\
    \normalsize International Computers Limited, \\
    \normalsize Eskdale Road,
    \normalsize Winnersh,
    \normalsize Berks, England, RG11 5TT. \\
    \normalsize Phone: +44 734 693131,\\
	E-mail: R.B.Jones@win0109.uucp, rda@win.icl.co.uk
}
\maketitle
\begin{abstract}
\noindent
This document contains a miscellany of theorems about the objects
defined in the general purpose library of HOL theories (the theories
$bin\_rel$, $fun\_rel$, $seq$, and $fin\_set$).
\end{abstract}
\section{CONTENTS}
\tableofcontents
\section{INTRODUCTION}
This document contains a miscellany of theorems about the objects
defined in the general purpose library of HOL theories (the theories
$bin\_rel$, $fun\_rel$, $seq$, and $fin\_set$).

The source of the document is intended to be supplied with early
\Product\ releases as example material for the users. Theorems
based on the ones here, but more systematically organised may be
included as part of future releases.
\section{PREAMBLE}
=SML
open_theory"fin_thms";
new_theory"lib_thms";
set_pc"hol";
=TEX
=SML
val €rel_ext_thm› = save_thm("rel_ext_thm", (
push_goal([], ¨µ r s∑ r = s § (µ x y∑ (x, y) ç r § (x, y) ç s)Æ);
a(REPEAT strip_tac);
(* *** Goal "1" *** *)
a(DROP_ASM_T ¨r = sÆ (asm_rewrite_thm_tac o eq_sym_rule));
(* *** Goal "2" *** *)
a(asm_rewrite_tac[]);
(* *** Goal "3" *** *)
a(rewrite_tac[sets_ext_clauses] THEN strip_tac);
a(LIST_SPEC_NTH_ASM_T 1 [¨Fst xÆ, ¨Snd xÆ] (strip_asm_tac o rewrite_rule[])
	THEN REPEAT strip_tac);
pop_thm()
));
=TEX
=SML
val €rev_Î_thm› = save_thm("rev_Î_thm", (
push_goal([], ¨
		µlist x∑ Rev(list Î [x]) = Cons x (Rev list)
Æ);
a(strip_tac THEN list_induction_tac¨list:'a LISTÆ
	THEN asm_rewrite_tac[rev_def, Î_def]);
pop_thm()
));
=TEX
=SML
val €rev_rev_thm› = save_thm("rev_rev_thm", (
push_goal([], ¨
		µlist∑ Rev(Rev list) = list
Æ);
a(strip_tac THEN list_induction_tac¨list:'a LISTÆ
	THEN asm_rewrite_tac[rev_def, rev_Î_thm]);
pop_thm()
));
=TEX
=SML
val €rev_list_induction_thm› = save_thm("rev_list_induction_thm", (
push_goal([], ¨
		µp∑	p [] ± (µ list∑ p list ¥ µ x∑ p (list Î [x]))
		¥ 	µ list∑ p list
Æ);
a(REPEAT strip_tac);
a(lemma_tac¨µl∑(p o Rev)lÆ);
(* *** Goal "1" *** *)
a(strip_tac THEN list_induction_tac¨l:'a LISTÆ);
(* *** Goal "1.1" *** *)
a(asm_rewrite_tac[o_def, rev_def]);
(* *** Goal "1.2" *** *)
a(POP_ASM_T ante_tac THEN rewrite_tac[o_def, rev_def] THEN strip_tac);
a(asm_fc_tac[]);
(* *** Goal "2" *** *)
a(POP_ASM_T (accept_tac o rewrite_rule[o_def, rev_rev_thm] o µ_elim¨Rev listÆ));
pop_thm()
));
=TEX
=SML
val €rev_list_induction_tac› = gen_induction_tac rev_list_induction_thm;
=TEX
=SML
val €length_Î_thm› = save_thm("length_Î_thm", (
push_goal([], ¨
	µlist1 list2∑ Length (list1 Î list2) = Length list1 + Length list2
Æ);
a(strip_tac);
a(list_induction_tac¨list1:'a LISTÆ
	THEN asm_rewrite_tac[Î_def, length_def, plus_assoc_thm]);
pop_thm()
));
=TEX
=SML
val €list_rel_thm› = save_thm("list_rel_thm", (
push_goal([], ¨
	µlist∑ListRel list =
		{(i, x) | 1 º i ± i º Length list ± Nth list i = x}
Æ);
a(rewrite_tac [get_spec¨ListRelÆ, get_spec¨$..Æ,
		get_spec¨$ÚÆ, get_spec¨GraphÆ, length_def]);
a(PC_T "hol1"(REPEAT strip_tac) THEN asm_rewrite_tac[]);
pop_thm()
));
=TEX
=SML
val €list_rel_cons_thm› = save_thm("list_rel_cons_thm", (
push_goal([], ¨
	ListRel [] = {}
±	µx list∑ListRel (Cons x list) =
		{(i, y) | ∂j∑j + 1 = i ± (j, y) ç ListRel list} ¿ {(1, x)}
Æ);
a(rewrite_tac[list_rel_thm, length_def, nth_def]);
a(PC_T "hol1"(REPEAT strip_tac) THEN_TRY asm_rewrite_tac[]);
(* *** Goal "1" *** *)
a(DROP_ASM_T¨1 º Fst xÆ ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(swap_nth_asm_concl_tac 3 THEN
	CASES_T ¨Fst x' = 1Æ (fn th => rewrite_thm_tac th THEN strip_asm_tac th));
(* *** Goal "2.1" *** *)
a(DROP_ASM_T ¨≥ x' = (1, x)Æ (strip_asm_tac o once_rewrite_rule[pair_clauses]));
a(swap_nth_asm_concl_tac 1 THEN asm_rewrite_tac[]);
(* *** Goal "2.2" *** *)
a(GET_ASM_T¨1 º Fst x'Æ
	(strip_asm_tac o rewrite_rule[º_def, µ_elim¨i:ÓÆplus_order_thm]));
a(TOP_ASM_T(rewrite_thm_tac o eq_sym_rule));
a(cases_tac ¨≥1 º iÆ);
(* *** Goal "2.2.1" *** *)
a(POP_ASM_T (strip_asm_tac o rewrite_rule[≥_º_thm, less_def, º_def]));
a(DROP_ASM_T ¨i + 1 = Fst x'Æante_tac THEN asm_rewrite_tac[]);
a(swap_asm_concl_tac ¨1 º Fst x'Æ);
a(GET_ASM_T¨1 = Fst x'Æ (strip_asm_tac o eq_sym_rule));
(* *** Goal "2.2.2" *** *)
a(swap_asm_concl_tac¨Fst x' º Length list + 1Æ);
a(GET_ASM_T¨i + 1 = Fst x'Æ(rewrite_thm_tac o eq_sym_rule));
a(contr_tac THEN asm_fc_tac[]);
(* *** Goal "3" *** *)
a(bc_tac[º_trans_thm] THEN ∂_tac¨jÆ THEN REPEAT strip_tac);
a(rewrite_tac[º_def] THEN ∂_tac¨1Æ THEN asm_rewrite_tac[]);
(* *** Goal "4" *** *)
a(bc_tac[º_trans_thm] THEN ∂_tac¨j+1Æ THEN REPEAT strip_tac);
a(asm_rewrite_tac[]);
(* *** Goal "5" *** *)
a(DROP_ASM_T ¨1 º jÆ (strip_asm_tac o rewrite_rule[º_def]));
a(LEMMA_T¨Fst x' = (1+i)+1Æ rewrite_thm_tac THEN asm_rewrite_tac[]);
pop_thm()
));
=TEX
=SML
val €list_rel_Î_thm› = save_thm("list_rel_Î_thm", (
push_goal([], ¨
	µlist1 list2∑
		ListRel (list1 Î list2)
	=	ListRel list1 ¿
		{(i, y) | ∂j∑Length list1 + j= i ± (j, y) ç ListRel list2}
Æ);
a(strip_tac THEN list_induction_tac¨list1:'a LISTÆ);
(* *** Goal "1" *** *)
a(rewrite_tac[list_rel_cons_thm, Î_def, length_def]);
a(conv_tac (MAP_C prove_∂_conv));
a(PC_T"hol1" (REPEAT strip_tac THEN all_asm_ante_tac THEN rewrite_tac[]));
(* *** Goal "2" *** *)
a(rewrite_tac[list_rel_cons_thm, Î_def, length_def]);
a(PC_T"hol1" (REPEAT strip_tac));
(* *** Goal "2.1" *** *)
a(swap_nth_asm_concl_tac 3 THEN asm_rewrite_tac[]);
a(PC_T"hol1" (REPEAT strip_tac));
(* *** Goal "2.1.1" *** *)
a(spec_nth_asm_tac 3 ¨jÆ);
(* *** Goal "2.1.2" *** *)
a(SWAP_ASM_CONCL_T ¨j + 1 = Fst x'Æ
	(rewrite_thm_tac o eq_sym_rule o conv_rule ≥_≥_conv));
a(spec_nth_asm_tac 2 ¨j'Æ);
a(SWAP_ASM_CONCL_T ¨≥ (Length list1 + 1) + j' = Fst x'Æ
	(rewrite_thm_tac o eq_sym_rule o conv_rule ≥_≥_conv));
a(rewrite_tac[plus_assoc_thm]);
(* *** Goal "2.2" *** *)
a((POP_ASM_T (strip_asm_tac o rewrite_rule[pair_clauses])));
(* *** Goal "2.3" *** *)
a(swap_nth_asm_concl_tac 2 THEN GET_NTH_ASM_T 4 rewrite_thm_tac);
a(PC_T"hol1" (REPEAT strip_tac));
a(∂_tac¨jÆ THEN PC_T"hol1" (REPEAT strip_tac));
(* *** Goal "2.4" *** *)
a((POP_ASM_T (strip_asm_tac o rewrite_rule[pair_clauses])));
(* *** Goal "2.5" *** *)
a(swap_nth_asm_concl_tac 2 THEN GET_NTH_ASM_T 4 rewrite_thm_tac);
a(PC_T"hol1" (REPEAT strip_tac));
a(∂_tac¨Length list1+jÆ THEN
	rewrite_tac[prove_rule[plus_assoc_thm]¨(Length list1 + j)+1=(Length list1 + 1) + jÆ]
		THEN PC_T"hol1" (REPEAT strip_tac));
a(∂_tac¨jÆ THEN PC_T"hol1" (REPEAT strip_tac));
pop_thm()
));
=TEX
=SML
val €list_rel_singleton_thm› = save_thm("list_rel_singleton_thm", (
push_goal([], ¨
	µ x∑
	ListRel ([x]) = {(1, x)}
Æ);
a(rewrite_tac[list_rel_thm, length_def, nth_def]);
a(PC_T"hol1" (REPEAT strip_tac));
(* *** Goal "1" *** *)
a(swap_nth_asm_concl_tac 2);
a(lemma_tac ¨Fst x' = 1Æ);
(* *** Goal "1.1" *** *)
a(bc_tac[º_antisym_thm] THEN REPEAT strip_tac);
(* *** Goal "1.2" *** *)
a(asm_rewrite_tac[]);
a(swap_nth_asm_concl_tac 2);
a(asm_rewrite_tac[pair_clauses]);
(* *** Goal "2" *** *)
a(asm_rewrite_tac[]);
(* *** Goal "3" *** *)
a(asm_rewrite_tac[]);
(* *** Goal "4" *** *)
a(asm_rewrite_tac[]);
pop_thm()
));
=TEX
=SML
val €list_rel_Î_singleton_thm› = save_thm("list_rel_Î_singleton_thm", (
push_goal([], ¨
	µlist x∑
	ListRel (list Î [x]) = ListRel list ¿ {(Length list + 1, x)}
Æ);
a(rewrite_tac[list_rel_Î_thm, list_rel_singleton_thm]);
a(conv_tac (MAP_C prove_∂_conv));
a(PC_T"hol1" (REPEAT strip_tac));
(* *** Goal "1" *** *)
a(POP_ASM_T (ante_tac o rewrite_rule[pair_clauses]));
a(asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(asm_rewrite_tac[]);
pop_thm()
));
=TEX
=SML
val €dom_list_rel_thm› = save_thm("dom_list_rel_thm", (
push_goal([], ¨
	µlist∑ Dom(ListRel list) = 1 .. Length list
Æ);
a(rewrite_tac[list_rel_thm, dot_dot_def, dom_def]
	THEN PC_T"hol1"(REPEAT strip_tac));
a(prove_∂_tac THEN REPEAT strip_tac);
pop_thm()
));
=TEX
=SML
val €dom_id_ran_id_thm› = save_thm("dom_id_ran_id_thm", (
push_goal([], ¨
	µa∑ Dom(Id a) = a ± Ran(Id a) = a
Æ);
a(rewrite_tac[get_spec¨DomÆ, get_spec¨RanÆ, get_spec¨IdÆ]
	THEN PC_T"hol1"(prove_tac[]));
pop_thm()
));
=TEX
=SML
val €dot_dot_size_thm› = save_thm("dot_dot_size_thm", (
push_goal([], ¨
	µi j∑	i .. j ç Finite
	±	#(i .. j) = if j < i then 0 else (j - i) + 1
Æ);
a(REPEAT µ_tac);
a(lemma_tac¨∂list∑
		i .. j = Elems list
	±	list ç Distinct
	±	(if j < i then 0 else (j - i) + 1) = Length listÆ);
(* *** Goal "1" *** *)
a(cases_tac ¨j < iÆ THEN asm_rewrite_tac[]);
(* *** Goal "1.1" *** *)
a(∂_tac ¨[]Æ);
a(POP_ASM_T (strip_asm_tac o rewrite_rule[less_def, º_def]));
a(POP_ASM_T (rewrite_thm_tac o eq_sym_rule));
a(rewrite_tac[plus_assoc_thm, dot_dot_def, distinct_def, length_def, elems_def]);
a(PC_T"hol1" (REPEAT strip_tac));
a(lemma_tac ¨j + 1 + i' º jÆ);
a(bc_tac[º_trans_thm] THEN ∂_tac ¨xÆ THEN REPEAT strip_tac);
(* *** Goal "1.2" *** *)
a(conv_tac(ONCE_MAP_C eq_sym_conv));
a(lemma_tac¨∂f∑
		f 0 = [i]
	±	µm∑f (m+1) = Cons(i+m+1)(f m)Æ THEN1 prove_∂_tac);
a(DROP_ASM_T ¨≥j < iÆ (strip_asm_tac o rewrite_rule[≥_less_thm, º_def]));
a(POP_ASM_T (rewrite_thm_tac o eq_sym_rule));
a(∂_tac¨f i'Æ THEN induction_tac¨i'Æ);
(* *** Goal "1.2.1" *** *)
a(asm_rewrite_tac[dot_dot_def, distinct_def, length_def, elems_def]);
a(PC_T"hol1" (REPEAT strip_tac) THEN_TRY asm_rewrite_tac[]);
a(swap_asm_concl_tac¨≥ x = iÆ THEN bc_tac[º_antisym_thm] THEN REPEAT strip_tac);
(* *** Goal "1.2.2" *** *)
a(asm_rewrite_tac[dot_dot_def, distinct_def, length_def, elems_def]);
a(PC_T"hol1" (REPEAT strip_tac) THEN_TRY asm_rewrite_tac[]);
(* *** Goal "1.2.2.1" *** *)
a(rewrite_tac[plus_assoc_thm1] THEN rename_tac[(¨iÆ, "ii")]);
a(bc_tac[º_trans_thm] THEN ∂_tac¨ii+i'Æ THEN REPEAT strip_tac THEN rewrite_tac[]);
(* *** Goal "1.2.2.2" *** *)
a(swap_asm_concl_tac¨x º i + i' + 1Æ
	THEN rewrite_tac[plus_assoc_thm1, º_plus1_thm]
	THEN REPEAT strip_tac);
a(asm_rewrite_tac[plus_assoc_thm]);
(* *** Goal "2" *** *)
a(asm_rewrite_tac[fin_set_thm4]);
a(fc_tac[size_thm2]);
pop_thm()
));
=TEX
=SML
val €enumerate_thm› = save_thm("enumerate_thm", (
push_goal([], ¨
	µa∑	Enumerate a = {(m, n) | n ç a ± #{i | i ç a ± i º n} = m}
Æ);
a(rewrite_tac[get_spec¨EnumerateÆ, get_spec¨$..Æ]
	THEN PC_T"hol1"(REPEAT strip_tac));
(* *** Goal "1" *** *)
a(LEMMA_T ¨{i|i ç a ± i º Snd x} = Elems lÆ rewrite_thm_tac);
(* *** Goal "1.1" *** *)
a(PC_T"hol1"(REPEAT strip_tac) THEN asm_fc_tac[]);
a(spec_nth_asm_tac 3 ¨x'Æ);
(* *** Goal "1.2" *** *)
a(fc_tac[size_thm2]);
a(asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(all_asm_ante_tac THEN intro_µ_tac(¨Snd xÆ, ¨m:ÓÆ)
	THEN intro_µ_tac(¨Fst xÆ, ¨n:ÓÆ));
a(REPEAT_N 3 strip_tac);
a(lemma_tac ¨{i|i ç a ± i º m} ç FiniteÆ);
a(rename_tac[(¨aÆ, "aa")] THEN bc_tac[size_thm4]);
a(∂_tac¨0 .. mÆ THEN rewrite_tac[dot_dot_size_thm]);
a(rewrite_tac[dot_dot_def] THEN PC_T"hol1"(REPEAT strip_tac));
(* *** Goal "2.2" *** *)
a(fc_tac[fin_set_thm1]);
a(strip_tac THEN ∂_tac¨listÆ);
a(REPEAT strip_tac);
(* *** Goal "2.2.1" *** *)
a(fc_tac[size_thm2]);
a(swap_nth_asm_concl_tac 2 THEN asm_rewrite_tac[]);
(* *** Goal "2.2.2" *** *)
a(GET_NTH_ASM_T 3 (rewrite_thm_tac o eq_sym_rule));
a(PC_T"hol1"(REPEAT strip_tac));
pop_thm()
));
=TEX
=SML
val €squash_id_thm› = save_thm("squash_id_thm", (
push_goal([], ¨
	µa∑ Squash(Id a) = Enumerate a
Æ);
a(rewrite_tac[get_spec¨SquashÆ, dom_id_ran_id_thm, enumerate_thm,
	get_spec¨$R_ª_RÆ, get_spec¨IdÆ]);
a(PC_T"hol1"(REPEAT strip_tac));
(* *** Goal "1" *** *)
a(POP_ASM_T (asm_rewrite_thm_tac o eq_sym_rule));
(* *** Goal "2" *** *)
a(POP_ASM_T (asm_rewrite_thm_tac o eq_sym_rule));
(* *** Goal "3" *** *)
a(∂_tac¨Snd xÆ THEN REPEAT strip_tac);
pop_thm()
));
=TEX
=SML
val €squash_thm› = save_thm("squash_thm", (
push_goal([], ¨
	µr∑ Squash r = {(m, y) | ∂n∑ (n, y) ç r ± #{i | i ç Dom r ± i º n} = m}
Æ);
a(rewrite_tac[get_spec¨SquashÆ, dom_def, get_spec¨$R_ª_RÆ, enumerate_thm]);
a(PC_T"hol1"(REPEAT strip_tac));
(* *** Goal "1" *** *)
a(∂_tac¨yÆ THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(∂_tac¨nÆ THEN asm_rewrite_tac[]);
a(∂_tac¨Snd xÆ THEN asm_rewrite_tac[]);
pop_thm()
));
=TEX
=SML
val €¿_í_thm› = save_thm("¿_í_thm", (
push_goal([], ¨
	µr s; a∑ (r ¿ s) í a = (r í a) ¿ (s í a)
Æ);
a(rewrite_tac [í_def]);
a(PC_T"hol1"(REPEAT strip_tac));
pop_thm()
));
=TEX
=SML
val €dom_¿_thm› = save_thm("dom_¿_thm", (
push_goal([], ¨
	µr s∑ Dom (r ¿ s) = Dom r ¿ Dom s
Æ);
a(rewrite_tac [dom_def]);
a(PC_T"hol1"(prove_tac[]));
(* *** Goal "1" *** *)
a(∂_tac¨yÆ THEN REPEAT strip_tac);
(* *** Goal "2" *** *)
a(∂_tac¨yÆ THEN REPEAT strip_tac);
pop_thm()
));
=TEX
The proof of the following theorem is rather long (about 120 lines).
However, there is a great deal of repetition in it. The first split
gives 6 subgoals. Of these, the proofs of 1 and 2 are identical and
almost identical with that of 5. Similarly, the proofs of 3 and 4
are identical and only differ in the first line or two from that of
6. There may well be a way of abbreviating all of this (perhaps
by more sophisticated preparation before the split), but cut-and-paste
seemed to be quicker at the time.
=SML
val €enumerate_¿_thm› = save_thm("enumerate_¿_thm", (
push_goal([], ¨
µa b∑ (µi j∑i ç a ± j ç b ¥ i < j) ¥
		Enumerate (a ¿ b)
	=	Enumerate a ¿ {(m, n) | n ç b ± ∂j∑#a + j = m ± (j, n) ç Enumerate b}
Æ);
a(rewrite_tac [enumerate_thm]);
a(PC_T"hol1"(REPEAT strip_tac));
(* *** Goal "1" of 6 *** *)
a(lemma_tac¨{i|i ç a ¿ b ± i º Snd x} = {i|i ç a ± i º Snd x}Æ);
(* *** Goal "1.1" *** *)
a(PC_T"hol1"(REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
a(swap_asm_concl_tac¨Snd x < x'Æ THEN asm_rewrite_tac[≥_less_thm]);
(* *** Goal "1.2" *** *)
a(LIST_DROP_NTH_ASM_T [2,3] (MAP_EVERY ante_tac) THEN asm_rewrite_tac[]
	THEN REPEAT strip_tac);
(* *** Goal "2" *** *)
a(lemma_tac¨{i|i ç a ¿ b ± i º Snd x} = {i|i ç a ± i º Snd x}Æ);
(* *** Goal "2.1" *** *)
a(PC_T"hol1"(REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
a(swap_asm_concl_tac¨Snd x < x'Æ THEN asm_rewrite_tac[≥_less_thm]);
(* *** Goal "2.2" *** *)
a(LIST_DROP_NTH_ASM_T [2,3] (MAP_EVERY ante_tac) THEN asm_rewrite_tac[]
	THEN REPEAT strip_tac);
(* *** Goal "3" *** *)
a(prove_∂_tac);
a(DROP_NTH_ASM_T 2 (asm_rewrite_thm_tac o eq_sym_rule));
a(lemma_tac ¨a ç Finite ± {i|i ç b ± i º Snd x} ç FiniteÆ);
(* *** Goal "3.1" *** *)
a(lemma_tac ¨a Ä 0 .. Snd x ± {i|i ç b ± i º Snd x} Ä 0 .. Snd xÆ);
(* *** Goal "3.1.1" *** *)
a(rewrite_tac[dot_dot_def] THEN PC_T"hol1"(REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
a(swap_asm_concl_tac¨x' < Snd xÆ THEN asm_rewrite_tac[≥_less_thm]);
a(fc_tac[º_cases_thm]);
(* *** Goal "3.1.2" *** *)
a(fc_tac[once_rewrite_rule[taut_rule¨µp q∑p ± q § q ± pÆ]size_thm4]
	THEN REPEAT strip_tac THEN fc_tac[dot_dot_size_thm]);
(* *** Goal "3.2" *** *)
a(strip_asm_tac(list_µ_elim[¨aÆ, ¨{i|i ç b ± i º Snd x}Æ]size_thm7));
a(POP_ASM_T (rewrite_thm_tac o eq_sym_rule));
a(LEMMA_T ¨a ° {i|i ç b ± i º Snd x} = {}Æ rewrite_thm_tac);
(* *** Goal "3.2.1" *** *)
a(PC_T"hol1"(REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
(* *** Goal "3.2.2" *** *)
a(LEMMA_T ¨a ¿ {i|i ç b ± i º Snd x} = {i|i ç a ¿ b ± i º Snd x}Æ
	rewrite_thm_tac);
(* *** Goal "3.2.2.1" *** *)
a(PC_T"hol1"(REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
a(swap_asm_concl_tac¨x' < Snd xÆ THEN asm_rewrite_tac[≥_less_thm]);
a(fc_tac[º_cases_thm]);
(* *** Goal "3.2.2.2" *** *)
a(rewrite_tac[size_thm1]);
(* *** Goal "4" *** *)
a(prove_∂_tac);
a(DROP_NTH_ASM_T 2 (asm_rewrite_thm_tac o eq_sym_rule));
a(lemma_tac ¨a ç Finite ± {i|i ç b ± i º Snd x} ç FiniteÆ);
(* *** Goal "4.1" *** *)
a(lemma_tac ¨a Ä 0 .. Snd x ± {i|i ç b ± i º Snd x} Ä 0 .. Snd xÆ);
(* *** Goal "4.1.1" *** *)
a(rewrite_tac[dot_dot_def] THEN PC_T"hol1"(REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
a(swap_asm_concl_tac¨x' < Snd xÆ THEN asm_rewrite_tac[≥_less_thm]);
a(fc_tac[º_cases_thm]);
(* *** Goal "4.1.2" *** *)
a(fc_tac[once_rewrite_rule[taut_rule¨µp q∑p ± q § q ± pÆ]size_thm4]
	THEN REPEAT strip_tac THEN fc_tac[dot_dot_size_thm]);
(* *** Goal "4.2" *** *)
a(strip_asm_tac(list_µ_elim[¨aÆ, ¨{i|i ç b ± i º Snd x}Æ]size_thm7));
a(POP_ASM_T (rewrite_thm_tac o eq_sym_rule));
a(LEMMA_T ¨a ° {i|i ç b ± i º Snd x} = {}Æ rewrite_thm_tac);
(* *** Goal "4.2.1" *** *)
a(PC_T"hol1"(REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
(* *** Goal "4.2.2" *** *)
a(LEMMA_T ¨a ¿ {i|i ç b ± i º Snd x} = {i|i ç a ¿ b ± i º Snd x}Æ
	rewrite_thm_tac);
(* *** Goal "4.2.2.1" *** *)
a(PC_T"hol1"(REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
a(swap_asm_concl_tac¨x' < Snd xÆ THEN asm_rewrite_tac[≥_less_thm]);
a(fc_tac[º_cases_thm]);
(* *** Goal "4.2.2.2" *** *)
a(rewrite_tac[size_thm1]);
(* *** Goal "5" *** *)
a(POP_ASM_T (rewrite_thm_tac o eq_sym_rule));
a(LEMMA_T ¨{i|i ç a ± i º Snd x} = {i|i ç a ¿ b ± i º Snd x}Æ
	rewrite_thm_tac);
a(PC_T"hol1"(REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
a(swap_asm_concl_tac¨Snd x < x'Æ THEN asm_rewrite_tac[≥_less_thm]);
(* *** Goal "6" *** *)
a(LIST_DROP_NTH_ASM_T [1,2] (rewrite_tac o map eq_sym_rule));
a(lemma_tac ¨a ç Finite ± {i|i ç b ± i º Snd x} ç FiniteÆ);
(* *** Goal "6.1" *** *)
a(lemma_tac ¨a Ä 0 .. Snd x ± {i|i ç b ± i º Snd x} Ä 0 .. Snd xÆ);
(* *** Goal "6.1.1" *** *)
a(rewrite_tac[dot_dot_def] THEN PC_T"hol1"(REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
a(swap_asm_concl_tac¨x' < Snd xÆ THEN asm_rewrite_tac[≥_less_thm]);
a(fc_tac[º_cases_thm]);
(* *** Goal "6.1.2" *** *)
a(fc_tac[once_rewrite_rule[taut_rule¨µp q∑p ± q § q ± pÆ]size_thm4]
	THEN REPEAT strip_tac THEN fc_tac[dot_dot_size_thm]);
(* *** Goal "6.2" *** *)
a(strip_asm_tac(list_µ_elim[¨aÆ, ¨{i|i ç b ± i º Snd x}Æ]size_thm7));
a(POP_ASM_T (rewrite_thm_tac o eq_sym_rule));
a(LEMMA_T ¨a ° {i|i ç b ± i º Snd x} = {}Æ rewrite_thm_tac);
(* *** Goal "6.2.1" *** *)
a(PC_T"hol1"(REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
(* *** Goal "6.2.2" *** *)
a(LEMMA_T ¨a ¿ {i|i ç b ± i º Snd x} = {i|i ç a ¿ b ± i º Snd x}Æ
	rewrite_thm_tac);
(* *** Goal "6.2.2.1" *** *)
a(PC_T"hol1"(REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
a(swap_asm_concl_tac¨x' < Snd xÆ THEN asm_rewrite_tac[≥_less_thm]);
a(fc_tac[º_cases_thm]);
(* *** Goal "6.2.2.2" *** *)
a(rewrite_tac[size_thm1]);
pop_thm()
));
=TEX
=SML
val €elems_set_comp_thm› = save_thm("elems_set_comp_thm", (
push_goal([], ¨
	µlist∑ Elems list = {x | ∂i∑1 º i ± i º Length list ± Nth list i = x}
Æ);
a(strip_tac);
a(list_induction_tac¨listÆ THEN rewrite_tac[length_def, nth_def, elems_def]);
(* *** Goal "1" *** *)
a(PC_T"hol1"(REPEAT strip_tac));
a(asm_ante_tac¨1 º iÆ THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(asm_rewrite_tac[] THEN PC_T"hol1"(REPEAT strip_tac));
(* *** Goal "2.1" *** *)
a(∂_tac¨1Æ THEN asm_rewrite_tac[]);
(* *** Goal "2.2" *** *)
a(∂_tac¨i+1Æ THEN asm_rewrite_tac[]);
a(cases_tac¨≥i = 0Æ THEN1 asm_rewrite_tac[]);
a(asm_ante_tac¨1 º iÆ THEN asm_rewrite_tac[]);
(* *** Goal "2.3" *** *)
a(cases_tac ¨i = 1Æ);
(* *** Goal "2.3.1" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[] THEN strip_tac);
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.3.2" *** *)
a(strip_asm_tac(µ_elim¨iÆÓ_cases_thm));
(* *** Goal "2.3.2.1" *** *)
a(asm_ante_tac¨1 º iÆ THEN asm_rewrite_tac[]);
(* *** Goal "2.3.2.2" *** *)
a(strip_asm_tac(µ_elim¨i'ÆÓ_cases_thm));
a(asm_ante_tac ¨≥ i = 1Æ THEN asm_rewrite_tac[]);
(* *** Goal "2.3.2.2.2" *** *)
a(DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[] THEN strip_tac);
a(∂_tac¨i''+1Æ THEN asm_rewrite_tac[]);
a(asm_ante_tac¨i º Length list + 1Æ THEN asm_rewrite_tac[]);
pop_thm()
));
=TEX
=IGN
val €enumerate_functional_thm› = save_thm("size_enumerate_thm", (
push_goal([], ¨
	µa∑ Enumerate a ç Functional ° Injective
Æ);
pop_thm()
));
=TEX
=IGN
val €size_enumerate_thm› = save_thm("size_enumerate_thm", (
push_goal([], ¨
	µa∑ a ç Finite ¥ #(Enumerate a) = # a
Æ);



a(PC_T"hol1"(REPEAT strip_tac));

pop_thm()
));
=IGN
push_goal([], ¨
	µl x s∑	Squash (Id (Dom (ListRel (l Î [x]) í s)))
	=	if	≥x ç s
		then	Squash (Id (Dom (ListRel l í s)))
		else	Squash (Id (Dom (ListRel l í s)))
			¿ {(#(Squash (Id (Dom (ListRel l í s)))) + 1, Length l + 1)}
Æ);
a(rewrite_tac [squash_id_thm, list_rel_Î_singleton_thm, ¿_í_thm, dom_¿_thm]);
a(REPEAT µ_tac);
a(lemma_tac¨
µi j∑i ç Dom (ListRel l í s) ± j ç Dom ({(Length l + 1, x)} í s) ¥ i < j
Æ);
(* *** Goal "1" *** *)
a(rewrite_tac[list_rel_thm, dom_def, í_def] THEN PC_T"hol1"(REPEAT strip_tac));
a(asm_ante_tac ¨i º Length lÆ THEN asm_rewrite_tac[º_def]);
a(strip_tac THEN POP_ASM_T(fn th => rewrite_tac[plus_assoc_thm, eq_sym_rule th]));
(* *** Goal "2" *** *)
a(FC_T rewrite_tac [enumerate_¿_thm]);
a(cases_tac¨≥x ç sÆ THEN (TOP_ASM_T rewrite_thm_tac));
(* *** Goal "2.1" *** *)
a(LEMMA_T¨Dom ({(Length l + 1, x)} í s) = {}Æ (PC_T1"hol1" rewrite_thm_tac));
a(rewrite_tac[í_def, dom_def] THEN PC_T"hol1"(REPEAT strip_tac));
a(asm_ante_tac ¨y ç sÆ THEN asm_rewrite_tac[]);
(* *** Goal "2.2" *** *)
a(LEMMA_T¨Dom ({(Length l + 1, x)} í s) = {Length l + 1}Æ (rewrite_thm_tac));
(* *** Goal "2.2.1" *** *)
a(rewrite_tac[í_def, dom_def] THEN PC_T"hol1"(REPEAT strip_tac));
a(prove_∂_tac THEN REPEAT strip_tac);
(* *** Goal "2.2.2" *** *)
a(PC_T"hol1"(REPEAT strip_tac));

=TEX
\end{document}
