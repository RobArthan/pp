% mdt031.doc   %Z% $Date$ $Revision$ $RCSfile$

=TEX
% mdt031.doc   %Z% $Date$ $Revision$ $RCSfile$
\documentstyle[hol1,11pt,TQ]{article}

\TPPtitle{Module Tests for Pretty Printer Support Structure}
\TPPref{DS/FMU/IED/MDT031}
\def\SCCSissue{$Revision$%
}
\TPPissue{\SCCSissue}
\TPPdate{\FormatDate{$Date$%
}}
\TPPproject{FST PROJECT}

=IGN

Commands to process this document in various ways.

doc4errors mdt031
usefile "mdt031.sml";

make -f rel001.mkf mdt031.dvi
doc4tex mdt031
tex4dvi mdt031
bibtex mdt031
doc4tex mdt031 ; tex4dvi mdt031
doc4tex mdt031 ; tex4dvi mdt031 ; bibtex mdt031
dvipage mdt031 &

doc4errors mdt031
usefile "mdt031.sml";

=TEX
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{SML Literate Script}
\TPPkeywords{HOL}
\TPPauthor{A.J. Hammon & WIN01}  %% Mandatory field
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{This document contains the module tests for the ICL~HOL
	Pretty Printer Support Structure.}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library
}}

\ftlinepenalty=9999
\makeindex

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\catcode`\_=\active
\def\_{\kern.06em\vbox{\hrule height.1ex width.3em}\hskip0.1em\relax}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\makeTPPfrontpage

\vfill
\begin{center}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{DOCUMENT CONTROL}

%********************************************************************

\subsection{Contents List}
\tableofcontents
% \listoftables

%********************************************************************

\subsection{Document Cross References}

\bibliographystyle{fmu}
\bibliography{fmu}

%********************************************************************

\subsection{Changes History}

\begin{description}

\item[Issues 1.1 to 1.3] Initial drafts.

\item[\FormatDate{91/09/12}, issue 2.1 ] First approved version.

\item[Issue \SCCSissue, \FormatDate{92/01/20} ] Updated to use new fonts.

%\item[\FormatDate{$Date$%
%}, issue \SCCSissue~]

\end{description}

%********************************************************************

%\subsection{Changes Forecast} \label{ChangesForecast}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{GENERAL}

%********************************************************************

\subsection{Scope}

This document contains the module tests for the pretty printing support
routines for the ICL HOL system which are discussed
in~\cite{DS/FMU/IED/DTD031}.  The tests use the module testing system
of~\cite{DS/FMU/IED/DTD013} and~\cite{DS/FMU/IED/IMP013}.

%********************************************************************

\subsection{Introduction}

\subsubsection{Purpose and Background}

To test the simple functional interfaces of the pretty printing support
routines.

\subsubsection{Deficiencies}

As described in the test policy for this module
(in~\cite{DS/FMU/IED/DTD031}) the tests here cover only those functions
that have with simple functional interfaces that can readily be
tested.  Extensive tests of the other interfaces are implicit in the
tests in~\cite{DS/FMU/IED/MDT025}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{TEST HARNESS INITIALISATION}

=IGN
Get the test harness files
sccs -d ~ied get dtd013.doc imp013.doc
doc4errors dtd013
doc4errors imp013

doc4errors mdt031
usefile "mdt031.sml";

=TEX

Load and initialise the module test system.

=SML
usefile "dtd013.sml";
usefile "imp013.sml";
init_mt_results ();
=TEX

Open the structure;

=SML
open PrettyPrinterSupport;
infix gt_prec;
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{PRECEDANCE TESTS}

Tests of function $gt_prec$, locally we set it to nonfix so that the
module test harness is easy to use.

=SML
nonfix gt_prec;

set_flag("pp_add_brackets", false);

store_mt_results_show mt_run[
("gep_1_1f", gt_prec, (PcHighest, PcHighest), false),
("gep_1_2f", gt_prec, (PcHighest, PcNormal(1,1,false)), true),
("gep_1_3f", gt_prec, (PcHighest, PcLowest), true),
("gep_1_4f", gt_prec, (PcHighest, PcVeryLow(32,32,false)), true),

("gep_1_5f", gt_prec, (PcNormal(1,1,false), PcNormal(1,1,false)), false),
("gep_1_6f", gt_prec, (PcNormal(1,1,false), PcLowest), true),
("gep_1_7f", gt_prec, (PcNormal(1,1,false), PcVeryLow(32,32,false)), true),

("gep_1_8f", gt_prec, (PcLowest, PcLowest), false),
("gep_1_9f", gt_prec, (PcLowest, PcVeryLow(32,32,false)), true),

("gep_1_10f", gt_prec, (PcVeryLow(32,32,false), PcVeryLow(32,32,false)), false),

("gep_2_1f", gt_prec, (PcNormal(2,1,false), PcNormal(1,1,false)), true),
("gep_2_2f", gt_prec, (PcNormal(1,2,false), PcNormal(1,1,false)), true),
("gep_2_3f", gt_prec, (PcNormal(1,1,true), PcNormal(1,1,true)), true),

("gep_2_4f", gt_prec, (PcNormal(1,1,false), PcNormal(2,1,false)), false),
("gep_2_5f", gt_prec, (PcNormal(1,1,false), PcNormal(1,2,false)), false)
];

set_flag("pp_add_brackets", true);

store_mt_results_show mt_run[
("gep_1_1t", gt_prec, (PcHighest, PcHighest), true),
("gep_1_2t", gt_prec, (PcHighest, PcNormal(1,1,false)), true),
("gep_1_3t", gt_prec, (PcHighest, PcLowest), true),
("gep_1_4t", gt_prec, (PcHighest, PcVeryLow(32,32,false)), true),

("gep_1_5t", gt_prec, (PcNormal(1,1,false), PcNormal(1,1,false)), true),
("gep_1_6t", gt_prec, (PcNormal(1,1,false), PcLowest), true),
("gep_1_7t", gt_prec, (PcNormal(1,1,false), PcVeryLow(32,32,false)), true),

("gep_1_8t", gt_prec, (PcLowest, PcLowest), false),
("gep_1_9t", gt_prec, (PcLowest, PcVeryLow(32,32,false)), true),

("gep_1_10t", gt_prec, (PcVeryLow(32,32,false), PcVeryLow(32,32,false)), true),

("gep_2_1t", gt_prec, (PcNormal(2,1,false), PcNormal(1,1,false)), true),
("gep_2_2t", gt_prec, (PcNormal(1,2,false), PcNormal(1,1,false)), true),
("gep_2_3t", gt_prec, (PcNormal(1,1,true), PcNormal(1,1,true)), true),

("gep_2_4t", gt_prec, (PcNormal(1,1,false), PcNormal(2,1,false)), true),
("gep_2_5t", gt_prec, (PcNormal(1,1,false), PcNormal(1,2,false)), true)
];

set_flag("pp_add_brackets", false);

infix gt_prec;
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{PRINTER FUNCTION CONTROLS}

=SML
let
fun UT () = true;

fun (dummy_fun_cv : PP_ENV -> TERM -> string -> TYPE -> TERM list
	-> PFUN_ANS) _ _ _ _ _ = PfOk;
fun (dummy_Ì : PP_ENV -> TERM -> TERM -> unit) _ _ _ = ();
fun (dummy_app : PP_ENV -> TERM -> TERM list -> unit) _ _ _ = ();
fun (dummy_var_const : PP_ENV -> TERM -> string -> TYPE -> unit) _ _ _ _ = ();

val d_funs = (dummy_Ì, dummy_app, dummy_var_const, dummy_fun_cv,
	dummy_fun_cv, dummy_var_const);
in

store_mt_results_show mt_run[
("sp_1", UT o set_printers, ("junk", d_funs), true)
];

store_mt_results_show mt_run_fail[
("sp_2", set_printers, ("junk", d_funs), gen_fail_msg "set_printers" 31002 ["junk"])
]

end;
=TEX

These tests are normally run when the whole pretty printing suite is
loaded which means that error code~31001 cannot be generated.  As a
consequence there are no useful tests of functions $initial_env$ and
$set_env_for_language$, however we can use them whilst checking other
functions.

=SML
let
val opf : OppenFormatting.OPPEN_FUNS = (fn _ => (), fn _ => (), fn _ => (), fn _ => ());

val init_env = initial_env "absent" opf;

val next_env = set_env_for_language "HOL" init_env;

val e2 = set_prec PcHighest next_env;
val e3 = set_prec PcLowest e2;
val e4 = set_prec (PcNormal(1,1,false)) e3;
val e5 = set_prec (PcVeryLow(32,32,false)) e4;

fun get_prec(PpEnv{pe_prec=p, ...}) = p;

in

store_mt_results_show mt_run[
("ie_1", get_prec, e2, PcHighest),
("ie_2", get_prec, e3, PcLowest),
("ie_3", get_prec, e4, PcNormal(1,1,false)),
("ie_4", get_prec, e5, PcVeryLow(32,32,false))
]

end;
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{TERM ACCESSING}

=SML
let
val gfc_1 = ¬if a then b else c®;
val gfc_2 = ¬let a = b in c®;
val gfc_3 = ¬Ì a · if a then b else c®;
val gfc_4 = ¬Ì a · let a = b in c®;
val gfc_5 = ¬µ a · if a then b else c®;
val gfc_6 = ¬µ a · let a = b in c®;
val gfc_7 = ¬T®;

in

store_mt_results_show mt_run[
("gfc_1", get_first_const, gfc_1, Value "Cond"),
("gfc_2", get_first_const, gfc_2, Value "Let"),
("gfc_3", get_first_const, gfc_3, Nil),
("gfc_4", get_first_const, gfc_4, Nil),
("gfc_5", get_first_const, gfc_5, Value "µ"),
("gfc_6", get_first_const, gfc_6, Value "µ"),
("gfc_7", get_first_const, gfc_7, Value "T")
]

end;
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{SUMMARY OF RESULTS}

=SML
diag_string(summarize_mt_results());
=TEX

\end{document}


