=IGN
********************************************************************************
mdt044.doc: this file is part of the ProofPower system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Module Tests for the Theory of Sets}  %% Mandatory field
\def\TPPheadtitle{Module Tests for the \cr Theory of Sets}
\TPPref{DS/FMU/IED/MDT044}  %% Mandatory field
\def\SCCSversion{$Revision: 1.12 $ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\def\SCCSdate{\FormatDate{$Date: 1993/01/27 10:18:30 $ %
}}
\TPPdate{\SCCSdate}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{ML Literate Script}
\TPPkeywords{}
\TPPauthor{K.Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{K.Blackburn & WIN01\\D.J.~King & WIN01}
\TPPauthorisation{R.D.Arthan & Project Manager}
\TPPabstract{A set of module tests are given for the 
functions (conversions ,etc) associated with the
theory of sets.
It also checks that the theory design has been met by the theory implementation.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year
\end{centering}
\pagebreak
\section{Document Control}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History} 
\begin{description}
\item [Issue 1.1]
First draft version, works for \cite{DS/FMU/IED/IMP044} version 1.2.

\item[Issue 1.2, (\FormatDate{92/01/20}) ] Updated to use new fonts.

\item[Issue 1.3 ]\ 

Updated to test against \cite{DS/FMU/IED/DTD044} version ?.

\item [Issue 1.4 (9th April 1992)]
Changes required by CR0016.
\item [Issue 1.5 (14th April 1992)]
Changes required by CR0017.
\item [Issue 1.7,1.8 (18th May 1992)]
Modified proof context material.
\item [Issue 1.9 (20th May 1992)]
Removed proof contexts "$build\_sets\_?$".
\item [Issue 1.10 (27th May 1992)]
Added $sets\_simple\_∂\_conv$.
\item[Issue 1.11 (24th June 1992)]
Renamings from issue 1.6 of \cite{DS/FMU/IED/WRK038},
mostly proof context name changes.
\item[Issue 1.12 (27th January 1993)]
Added $sets\_eq\_conv$ etc.
\item[Issue 1.13] Copyright and banner updates for open source release.
\end{description}
\subsection{Changes Forecast}
Additions, as required by the additions of functions
to \cite{DS/FMU/IED/DTD044}.
\section{GENERAL}
\subsection{Scope}
This document contains the module testing of thfunctions (conversions ,etc) associated with the
theory of sets, required by \cite{DS/FMU/IED/DTD044}.
The design is in \cite{DS/FMU/IED/DTD044}
and it is
implemented in \cite{DS/FMU/IED/IMP044}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains the module testing of the function material given a design in \cite{DS/FMU/IED/DTD044},
following the test policy given in that document and the general policy given in \cite{DS/FMU/IED/PLN008}.

The testing uses material from \cite{DS/FMU/IED/DTD013}.

\subsubsection{Dependencies}
This document is derived from the detailed design in \cite{DS/FMU/IED/DTD044},
and is further influenced by the implementation, in  \cite{DS/FMU/IED/IMP044}.
It also requires a theory check file, ``dtd044.tch'', created
by \[doc4thcheck\ dtd044\]

\subsubsection{Deficiencies}
Unable to test message 44013, as not certain that it can be raised by $sets\-\_simple\-\_∂\-\_conv$.
\section{INITIALISATION}
Initialise the test package
(if we don't have proof context ``basic$\_$hol'' then use
whatever is present).
=SML
use_file "dtd013";
use_file "imp013";
init_mt_results();
open_theory "sets";
push_merge_pcs ["'propositions","'paired_abstractions"];
repeat drop_main_goal;
=TEX
=SML
fun list_eq (eq:'a * 'a -> bool) ((a :: x), (b :: y)) : bool = (
	eq(a,b) andalso list_eq eq (x, y)
) | list_eq eq ([], []) = true
| list_eq _ _ = false;
=TEX
\section{TESTING FUNCTIONS OF THE DESIGN}
=SML
store_mt_results (mt_runf (op =#))[
("simple_ç_comp_conv 1",
	dest_thm o simple_ç_comp_conv,
	¨xx ç {vv | vv = 0}Æ,
	([],¨xx ç {vv | vv = 0} § xx = 0Æ)),
("simple_ç_comp_conv 2",
	dest_thm o simple_ç_comp_conv,
	¨x ç {v | 0 = v}Æ,
	([],¨x ç {v | 0 = v} § 0 = xÆ)),
("simple_ç_comp_conv 3",
	dest_thm o simple_ç_comp_conv,
	¨x ç {v | T}Æ,
	([],¨x ç {v | T} § TÆ))];
=TEX
=SML
store_mt_results mt_run_fail [
("simple_ç_comp_conv 44001 a",
	simple_ç_comp_conv,
	¨TÆ,
	gen_fail_msg "simple_ç_comp_conv" 44001 ["¨TÆ"]),
("simple_ç_comp_conv 44001 b",
	simple_ç_comp_conv,
	¨x ç {(p,q) | p = q}Æ,
	gen_fail_msg "simple_ç_comp_conv" 44001 ["¨x ç {(p, q)|p = q}Æ"])];
=TEX
\subsection{ç\_comp\_conv}
=SML
store_mt_results (mt_runf (op =#))[
("ç_comp_conv 1",
	dest_thm o ç_comp_conv,
	¨(a,b) ç {(x,y) | x ≤ y}Æ,
	([],¨((a,b) ç {(x,y) | x ≤ y}) § a ≤ bÆ)),
("ç_comp_conv 2",
	dest_thm o ç_comp_conv,
	¨a ç {y | a ≤ y}Æ,
	([],¨(a ç {y | a ≤ y}) § a ≤ aÆ)),
("ç_comp_conv 3",
	dest_thm o ç_comp_conv,
	¨a ç {(x,y) | x ≤ y}Æ,
	([],¨(a ç {(x,y) | x ≤ y}) § Fst a ≤ Snd aÆ))
	];
store_mt_results mt_run_fail [
("ç_comp_conv 27002",
	ç_comp_conv,
	¨x ç sÆ,
	gen_fail_msg "ç_comp_conv" 27002 ["¨x ç sÆ"])
	];
=TEX
\subsection{ç\_enum\_set\_rule}
=SML
store_mt_results (mt_runf (op =#))[
("ç_enum_set_rule 1",
	dest_thm o ç_enum_set_rule ¨bÆ,
	[¨aÆ, ¨aÆ, ¨bÆ, ¨cÆ],
	([],¨b ç {a; a; b; c}Æ)),
("ç_enum_set_rule 2",
	dest_thm o ç_enum_set_rule ¨1Æ,
	[¨1Æ],
	([],¨1 ç {1}Æ))
	];
store_mt_results mt_run_fail [
("ç_enum_set_rule 3012",
	ç_enum_set_rule ¨bÆ,
	[¨1Æ,¨bÆ],
	gen_fail_msg "ç_enum_set_rule" 3012 ["¨1Æ","¨bÆ"]),
("ç_enum_set_rule 27001 a",
	ç_enum_set_rule ¨1Æ,
	[¨aÆ,¨bÆ],
	gen_fail_msg "ç_enum_set_rule" 27001 ["¨1Æ"]),
("ç_enum_set_rule 27001 b",
	ç_enum_set_rule ¨1Æ,
	[],
	gen_fail_msg "ç_enum_set_rule" 27001 ["¨1Æ"])
	];
=TEX
\subsection{ç\_enum\_set\_conv}
=SML
store_mt_results (mt_runf (op =#))[
("ç_enum_set_conv 1",
	dest_thm o ç_enum_set_conv,
	¨b ç {a; a; b; c}Æ,
	([],¨b ç {a; a; b; c} § TÆ)),
("ç_enum_set_conv 2",
	dest_thm o ç_enum_set_conv,
	¨1 ç {1}Æ,
	([],¨1 ç {1} § TÆ))
	];
store_mt_results mt_run_fail [
("ç_enum_set_conv 27005",
	ç_enum_set_conv,
	mk_t,
	gen_fail_msg "ç_enum_set_conv" 27006 ["¨TÆ"]),
("ç_enum_set_conv 27006 a",
	ç_enum_set_conv,
	¨1 ç {0;2;3}Æ,
	gen_fail_msg "ç_enum_set_conv" 27005 ["¨1Æ","¨{0; 2; 3}Æ"]),
("ç_enum_set_conv 27006 b",
	ç_enum_set_conv,
	¨1 ç {}Æ,
	gen_fail_msg "ç_enum_set_conv" 27005 ["¨1Æ","¨{}Æ"])
	];
=TEX
\subsection{sets$\_$simple$\_$∂$\_$conv}
=SML
let
val tm1 = ¨∂ S ∑ x ç S § ≥(x = 0)Æ;
val tm2 =  ¨∂ S ∑ µ x ∑ x ç S § ≥(x = 0)Æ;
val tm3 =  ¨∂ S ∑ µ x y ∑ x ç S y § ≥(x = y)Æ;
val tm4 =  ¨∂ S ∑ µ x y z ∑ ≥(x = y ≤ x = z) § x ç S y zÆ;
val tm5 =  ¨∂ S ∑ µ x y ∑ x ç S y § y ç S xÆ;
val tm6 =  ¨∂ S ∑ µ x y ∑ x ç S (y ç S T) § (y = x)Æ;
in
store_mt_results (mt_runf (op =$)) [
	("sets_simple_∂_conv 1",
	concl o sets_simple_∂_conv,
	tm1,
	mk_§(tm1,¨∂ S' ∑ S' x § ≥(x = 0)Æ)),
	("sets_simple_∂_conv 2",
	concl o sets_simple_∂_conv,
	tm2,
	mk_§(tm2,¨∂ S' ∑ µ x ∑ S' x § ≥(x = 0)Æ)),
	("sets_simple_∂_conv 3",
	concl o sets_simple_∂_conv,
	tm3,
	mk_§(tm3,¨∂ S' ∑ µ x y ∑ S' y x § ≥(x = y)Æ)),
	("sets_simple_∂_conv 4",
	concl o sets_simple_∂_conv,
	tm4,
	mk_§(tm4,¨∂ S' ∑ µ x y z ∑ ≥(x = y ≤ x = z) § S' y z xÆ)),
	("sets_simple_∂_conv 5",
	concl o sets_simple_∂_conv,
	tm5,
	mk_§(tm5,¨∂ S' ∑ µ x y ∑ S' y x § S' x yÆ)),
	("sets_simple_∂_conv 6",
	concl o sets_simple_∂_conv,
	tm6,
	mk_§(tm6,¨∂ S' ∑ µ x y ∑ S' (S' T y) x § (y = x)Æ))]
end;
=TEX
=SML
store_mt_results mt_run_fail [
	("sets_simple_∂_conv 44010 a",
	sets_simple_∂_conv,
	¨TÆ,
	gen_fail_msg "sets_simple_∂_conv" 44010 ["¨TÆ"]),
	("sets_simple_∂_conv 44010 b",
	sets_simple_∂_conv,
	¨∂ x : 'a ∑ TÆ,
	gen_fail_msg "sets_simple_∂_conv" 44010 ["¨∂ x∑ TÆ"]),
	("sets_simple_∂_conv 44010",
	sets_simple_∂_conv,
	¨∂ x : BOOL ∑ TÆ,
	gen_fail_msg "sets_simple_∂_conv" 44010 ["¨∂ x∑ TÆ"]),
	("sets_simple_∂_conv 44011",
	sets_simple_∂_conv,
	¨∂ S : 'a SET ∑ TÆ,
	gen_fail_msg "sets_simple_∂_conv" 44011 ["¨∂ S∑ TÆ"]),
	("sets_simple_∂_conv 44012",
	sets_simple_∂_conv,
	¨∂ S ∑ µ x y ∑ x ç S y ± S = S1Æ,
	gen_fail_msg "sets_simple_∂_conv" 44012 
	    ["¨∂ S∑ µ x y∑ x ç S y ± S = S1Æ","¨SÆ"])];
=TEX
\subsection{Extensionality Conversions}
=SML
store_mt_results (mt_runf (op =$)) [
	("sets_eq_conv 1",
	concl o sets_eq_conv,
	¨a : 'a SET = bÆ,
	¨a = b § (µ x : 'a ∑ x ç a § x ç b)Æ),
	("sets_eq_conv 2",
	concl o sets_eq_conv,
	¨a : ('a ∏ 'b) SET = bÆ,
	¨a = b § (µ x1: 'a; x2 : 'b∑ (x1, x2) ç a § (x1, x2) ç b)Æ),
	("sets_eq_conv 3",
	concl o sets_eq_conv,
	¨a : ('a ∏ ('b ∏ 'c)) SET = bÆ,
	¨a = b § (µ x1: 'a; x2: 'b; x3: 'c∑ (x1, x2, x3) ç a § (x1, x2, x3) ç b)Æ),
	("sets_eq_conv 4",
	concl o sets_eq_conv,
	¨a : (('a ∏ 'd) ∏ ('b ∏ 'c)) SET = x3Æ,
	¨a : (('a ∏ 'd) ∏ ('b ∏ 'c)) SET = x3
   	 § (µ x1 x2 x4 x5∑ ((x1, x2), x4, x5) ç a § ((x1, x2), x4, x5) ç x3)Æ)
];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [
	("Ä_conv 1",
	concl o Ä_conv,
	¨a : 'a SET Ä bÆ,
	¨a Ä b § (µ x : 'a ∑ x ç a ¥ x ç b)Æ),
	("Ä_conv 2",
	concl o Ä_conv,
	¨a : ('a ∏ 'b) SET Ä bÆ,
	¨a Ä b § (µ x1: 'a; x2 : 'b∑ (x1, x2) ç a ¥ (x1, x2) ç b)Æ),
	("Ä_conv 3",
	concl o Ä_conv,
	¨a : ('a ∏ ('b ∏ 'c)) SET Ä bÆ,
	¨a Ä b § (µ x1: 'a; x2: 'b; x3: 'c∑ (x1, x2, x3) ç a ¥ (x1, x2, x3) ç b)Æ),
	("Ä_conv 4",
	concl o Ä_conv,
	¨a : (('a ∏ 'd) ∏ ('b ∏ 'c)) SET Ä x3Æ,
	¨a : (('a ∏ 'd) ∏ ('b ∏ 'c)) SET Ä x3
   	 § (µ x1 x2 x4 x5∑ ((x1, x2), x4, x5) ç a ¥ ((x1, x2), x4, x5) ç x3)Æ)
];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [
	("†_conv 1",
	concl o †_conv,
	¨a : 'a SET † bÆ,
	¨a † b § (µ x : 'a ∑ x ç a ¥ x ç b) ± (∂ x∑ ≥ x ç a ± x ç b)Æ),
	("†_conv 2",
	concl o †_conv,
	¨a : ('a ∏ 'b) SET † bÆ,
	¨a † b § (µ x1: 'a; x2 : 'b∑ (x1, x2) ç a ¥ (x1, x2) ç b)
	± (∂ x1 x2∑ ≥ (x1, x2) ç a ± (x1, x2) ç b)Æ)
];
=TEX
=SML
store_mt_results mt_run_fail [
	("sets_eq_conv error 44021",
	sets_eq_conv,
	¨≥a : 'a SET = bÆ,
	gen_fail_msg "sets_eq_conv" 44021 [string_of_term¨≥a : 'a SET = bÆ]),
	("sets_eq_conv error 44022",
	Ä_conv,
	¨≥a : 'a SET Ä bÆ,
	gen_fail_msg "Ä_conv" 44022 [string_of_term¨≥a : 'a SET Ä bÆ]),
	("†_conv error 44023",
	†_conv,
	¨≥a : 'a SET † bÆ,
	gen_fail_msg "†_conv" 44023 [string_of_term¨≥a : 'a SET † bÆ])
];
=TEX
\section{CHECK THE THEORY DESIGN}
=SML
use_file "dtd044.tch";
store_mt_results mt_run [
("theory design of set",
	theory_check_success,
	(),
	true)];
=TEX
\section{CHECK THE ``$'$sets$\_$ext'' PROOF CONTEXT}
This is declared in \cite{DS/FMU/IED/IMP076},
but more fully tested here than in its
implementations module tests.
=SML
push_merge_pcs ["basic_hol","'sets_ext"] 
handle _ => ();
local
fun map_tactic t = map (fn x => (
		let	val res = tac_proof(([],x),t);
		in (snd o dest_thm) res
		end))
in
local
val terms1 =
	[
		¨a ¿ a = a ¿ {}Æ,
		¨a ¿ {} = a ° aÆ,
		¨a ° a = a \ {}Æ,
		¨a \ {} = aÆ,
		¨a ° {} = a \ aÆ,
		¨a \ a = {} \ aÆ,
		¨{} \ a = {}Æ,
		¨a ¿ b = b ¿ aÆ,
		¨a ° b = b ° aÆ,
		¨a ¿ (b ¿ c) = (a ¿ b) ¿ cÆ,
		¨a ° (b ° c) = (a ° b) ° cÆ,
		¨a ¿ (b ° c) = (a ¿ b) ° (a ¿ c)Æ,
		¨a ° (b ¿ c) = (a ° b) ¿ (a ° c)Æ,
		¨(a ° b) ¿ (a \ b) = aÆ,
		¨(a \ b) ° b = {}Æ,
		¨a \ (b \ c) = (a \ b) ¿ (a ° c)Æ,
		¨(a \ b) \ c = (a \ (b ¿ c))Æ,
		¨a ¿ (b \ c) = (a ¿ b) \ (c \ a)Æ,
		¨a ° (b \ c) = (a ° b) \ cÆ,
		¨(a ¿ b) \ c = (a \ c) ¿ (b \ c)Æ,
		¨a \ (b ° c) = (a \ b) ¿ (a \ c)Æ
	];
in
val it =
store_mt_results (mt_runf (list_eq(op =$)))[
("proof context sets_ext 1",
	map_tactic contr_tac,
	terms1,
	terms1)];
val it =
store_mt_results (mt_runf (list_eq(op =$)))[
("proof context sets_ext 2",
	map_tactic (REPEAT strip_tac),
	terms1,
	terms1)]
end;
local
val terms2 =
	[	¨≥ x ç {}Æ,
		¨a Ä aÆ,
		¨≥ a † aÆ,
		¨{} Ä aÆ,
		¨ﬁ {} = {}Æ
	];
in
val it =
store_mt_results (mt_runf (list_eq(op =$))) [
("proof context sets_ext 3",
	map_tactic contr_tac,
	terms2,
	terms2)];
val it =
store_mt_results (mt_runf (list_eq(op =$))) [
("proof context sets_ext 4",
	map_tactic (REPEAT strip_tac),
	terms2,
	terms2)]
end;
end;
=TEX

\section{END OF TESTS}
=SML
diag_string(summarize_mt_results());
=TEX
\end{document}


