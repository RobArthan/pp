% dtd031.doc   %Z% $Date$ $Revision$ $RCSfile$

=TEX
% dtd031.doc   %Z% $Date$ $Revision$ $RCSfile$
\documentstyle[hol,11pt,TQ]{article}

\TPPtitle{Detailed Design of Pretty Printer Support Structure}
\TPPref{DS/FMU/IED/DTD031}
\def\SCCSissue{$Revision$%
}
\TPPissue{\SCCSissue}
\TPPdate{\FormatDate{$Date$%
}}
\TPPproject{FST PROJECT}

=IGN

Commands to process this document in various ways.

make -f rel001.mkf dtd031.dvi
doc4tex dtd031
tex4dvi dtd031
bibtex dtd031
doc4tex dtd031 ; tex4dvi dtd031
doc4tex dtd031 ; tex4dvi dtd031 ; bibtex dtd031
dvipage dtd031 &


doc4errors dtd031
usefile "dtd031.sml";

lasp -s dtd031.doc > zz1
lasp -s -u dtd031.OKwords dtd031.doc > zz1

=TEX
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Standard}
\TPPkeywords{HOL}
\TPPauthor{A.J. Hammon & WIN01}  %% Mandatory field
\TPPauthorisation{R.B.~Jones & FMU Manager}
\TPPabstract{This document contains declarations for the supporting the
	ICL~HOL pretty printer.  They form a framework for pretty
	printing terms and are used to declare and install printing
	functions for the concrete syntaxes of the languages supported
	by or added into ICL~HOL.}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library
}}

%\ftlinepenalty=9999
\makeindex

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\catcode`\_=\active
\def\_{\kern.06em\vbox{\hrule height.1ex width.3em}\hskip0.1em\relax}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\makeTPPfrontpage

\vfill
\begin{center}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{DOCUMENT CONTROL}

%********************************************************************

\subsection{Contents List}
\tableofcontents
% \listoftables

%********************************************************************

\subsection{Document Cross References}

\bibliographystyle{fmu}
\bibliography{fmu}

%********************************************************************

\subsection{Changes History}

\begin{description}

\item[\FormatDate{91/07/10}, issue 1.1~] First issue.

\item[\FormatDate{}, issue \SCCSissue~]
	Alter datatype $PP_ENV$ to additionally encode the application
	of HOL variables to lists of arguments.
	Removed error message 25004.
\item[\FormatDate{91/07/17}, issue 1.3~]
	Alter datatype $PP_ENV$ to additionally encode the application
	of HOL variables to lists of arguments.
	Removed error message 25004.
\item[\FormatDate{91/07/29}, issue 1.4~]
	Changed names of syntax functions.
\item[\FormatDate{91/08/20}, issue 1.5~]
	Changes from deskcheck ID0023.
	Rename $ge_prec$ to $gt_prec$. {}
	Add $pp_use_alias$ control flag.
	Add error 31002.
	Extra $TERM$ argument to some functions in type $PP_ENV$ to
		improve handling of aliases, constants and variables.

%\item[\FormatDate{$Date$%
%}, issue \SCCSissue~]
\end{description}

%********************************************************************

\subsection{Changes Forecast} \label{ChangesForecast}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{GENERAL}

%********************************************************************

\subsection{Scope}

This document contains the pretty printer support structure for the ICL
HOL system.  The high-level design for this document
in~\cite{DS/FMU/IED/HLD008}.

%********************************************************************

\subsection{Introduction}

%--------------------------------------------------------------------

\subsubsection{Purpose and Background}

The desired attributes of the pretty printer subsystem are defined in
\cite{DS/FMU/IED/HLD002} and further elaborated in
\cite{DS/FMU/IED/HLD008}.  This part of the pretty printer subsystem
hols the basic pretty printing routines.

%--------------------------------------------------------------------

%\subsubsection{Dependencies}
%\subsubsection{Interface}
\subsubsection{Algorithms}

The basic pretty printing algorithm is a recursive descent through the
data structures holding the HOL term.  At each stage the outermost
structure of the term is destroyed and a suitable printing function
chosen.  The called function prints out various fixed strings and
spacing interleaved with the the subterms it is given.  These subterms
are printed by calling the outermost printing function.

Suitable printing functions are chosen based on the ``current
language'' or the language of the HOL constant being applied at the
outermost level of each recursive call.  A database of languages and
printing functions is held, and routines are provided in this structure
to access the database.

%--------------------------------------------------------------------

%\subsubsection{Possible Enhancements}
%\subsubsection{Deficiencies}
%\subsubsection{Terminology}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{SIGNATURE} \label{StartSignature}

=DOC
signature ‚PrettyPrinterSupport· = sig
=ENDDOC

\section{LANGUAGE EMBEDDING INTERFACE}

Some extra interfaces are provided for adding printing functions
for embedded languages.

%--------------------------------------------------------------------
=DOC
datatype ‚PREC_CONTEXT·
	=	‚Pc_Highest·
	|	‚Pc_Normal·			of int * int * bool
	|	‚Pc_Lowest·
	|	‚Pc_Very_Low·		of int * int * bool
	;
=DESCRIBE
This is a datatype used in the pretty printing system.
Precedence levels are used to help decide when brackets are necessary in
the generated text.  The levels are used as follows.

\begin{description}
\def\ITEM#1{\item[$#1$ ] }

\ITEM{Pc_Highest} Items which are self bracketing (e.g., HOL set
	displays which are enclosed by curly braces) bind most tightly,
	they have this high precedence, they do not need to be enclosed in
	round brackets.

\ITEM{Pc_Normal} Most of the precedences used are given with this
	constructor.

\ITEM{Pc_Lowest} The normal lowest precedence binds weakly, it is
	mostly used as an enclosing precedence (e.g., within round
	brackets or between the words `{\tt if}' and `{\tt then}' of a
	HOL conditional), it shows that any other language construct
	may be enclosed without the need for brackets.

\ITEM{Pc_Very_Low} In some cases brackets must be added around a term,
	but multiple set of brackets are not wanted.  Having an extra
	precedence below $Pc_Lowest$ allows the general bracket
	elimination mechanism to be used to insert only those brackets
	that are necessary.  For generality the same arguments are
	provided as with $Pc_Normal$, they have the same
	interpretation.

\end{description}
=SEEALSO
Function $gt_prec$ for details of comparing these values.
=ENDDOC
%--------------------------------------------------------------------

Function $gt_prec$ provides comparison of precedances, it is
convienently declared as an infix operator within contexts that use
the pretty printer support structure.

A suggested use of this three stage comparison
is to distinguish: (first integer) the area of the syntax; (second
integer) the precedence of an infix, prefix or postfix operator with
the syntax area for operators; and, (boolean) the associativity of the
operator.

For values where only the syntax area is of interest, the second
integer and the boolean should be set to zero and $false$.

%--------------------------------------------------------------------
=DOC
val ‚gt_prec· : PREC_CONTEXT * PREC_CONTEXT -> bool;
(* infix gt_prec; *)
=DESCRIBE
Compares two precedences returning $true$ when the first (left hand)
argument is greater than the second.  Values of
$Pc_Highest$ are greater than $Pc_Normal$ which are greater than
$Pc_Lowest$ which are greater than $Pc_Very_Low$.

With two values of $Pc_Normal$ the second integer is only used when the
first integers are the same.  Normal integer comparisons are used.  The
booleans are only used when the first integers and the second integers
are the same in which case the result is their conjunction.  Two values
of $Pc_Very_Low$ are compared in the same way as values of
$Pc_Normal$.
=ENDDOC
%--------------------------------------------------------------------

Note, the bracket elimination conventions intentionally leave in some
brackets where, strictly, they are not needed.  The intention is to
leave those brackets that help in understanding the structure of the
term or type.

%--------------------------------------------------------------------
=DOC
(* Flag ‚pp_add_brackets· : boolean control, default false *)
=DESCRIBE
Controls the bracket elimination conventions in the pretty printer by
changing the way that function $gt_prec$ works.  When set to $true$
many brackets are included in the output, this is achieved by making
$gt_prec$ return $true$ more often.  The default (namely $false$) is to
eliminate most of the unnecessary brackets.

When the flag is $true$ function $gt_prec$ returns $true$ whenever
its first argument is not $Pc_Lowest$, it returns $false$ otherwise.
=ENDDOC
%--------------------------------------------------------------------

%--------------------------------------------------------------------
=DOC
(* Flag ‚pp_use_alias· : boolean control, default true *)
=DESCRIBE
Controls whether aliases are used when printing out identifiers.
=SEEALSO
Function $set_alias$.
=ENDDOC
%--------------------------------------------------------------------

%--------------------------------------------------------------------
=DOC
datatype ‚PFUN_ANS·
	=	‚Pf_Fewer·		of int
	|	‚Pf_Not_Possible·
	|	‚Pf_Ok·
	;
=DESCRIBE
This is a datatype used in the pretty printing system, it holds
the result type of functions used to print out a function application
of a constant or variable  to a list of arguments, these are
components $pe_fun_const$ and $pe_fun_var$ of
datatype $PP_ENV$ below.  Value $Pf_Ok$ means that the application has
been output.  Value $Pf_Not_Possible$ means that the application cannot
be printed by this function.  Value $Pf_Fewer$ means the function can
print out the application, but not with the given number of arguments,
the integer indicates how many arguments it could print.
=ENDDOC
%--------------------------------------------------------------------

%--------------------------------------------------------------------
=DOC
datatype ‚PP_ENV· = Pp_Env of {
	‚pe_prec·	: PREC_CONTEXT,
	‚pe_lang·	: string,
	‚pe_fun_const·	: PP_ENV -> TERM -> string -> TYPE
				-> TERM list -> PFUN_ANS,
	‚pe_fun_var·	: PP_ENV -> TERM -> string -> TYPE
				-> TERM list -> PFUN_ANS,
	‚pe_app·	: PP_ENV -> TERM -> TERM list -> unit,
	‚pe_const·	: PP_ENV -> TERM -> string -> TYPE -> unit,
	‚pe_var·	: PP_ENV -> TERM -> string -> TYPE -> unit,
	‚pe_ç·		: PP_ENV -> TERM -> TERM -> unit,
	‚pe_addstring·	: string -> unit,
	‚pe_beginb·	: (int * bool) -> unit,
	‚pe_endb·	: unit -> unit,
	‚pe_space·	: (int * int) -> unit
};
=DESCRIBE
This is a datatype used in the pretty printing system, it holds
an environment value to be passed between the printing functions.

Elements $pe_ç$, $pe_app$, $pe_const$, $pe_fun_const$,
$pe_fun_var$ and $pe_var$ are
the printing routines for the current language which is given by
$pe_lang$.

Elements $pe_addstring$, $pe_beginb$, $pe_endb$ and $pe_space$ are the
Oppen style printing routines to be used,
see~\cite{DS/FMU/IED/IMP024}.
=ENDDOC

Several of the term printing functions contain a destroyed constant or
variable (the $string$ and $TYPE$) arguments, these functions have as
their first $TERM$ argument the original constant or variable.  The two
forms are closely related via the constructor or destructor functions,
but the components have had aliases expanded (if required by control
flag $pp_use_alias$), thus they cannot always be reasembled into
the same constant or variable.  Further explanation is given in the
list below which describes of all of the environment values.

\begin{description}
\def\ITEM#1{\item[$#1$ ] }

\ITEM{pe_prec} The enclosing precedence context provided by the calling
	printing function.  This is used as the left hand argument of
	function $gt_prec$.

\ITEM{pe_lang} The `current language'.

\ITEM{pe_fun_const, pe_fun_var} The functions for printing function
	applications of constants and variables in the current
	language.  The first term value is the constant or variable,
	the string and type are from its destroyed form after aliases
	are found.  The term list holds the arguments that the constant
	or variable is applied to.  The original term may be recreated
	by $list_mk_app$ applied to the term and the term list.

\ITEM{pe_const, pe_var} Two of the four functions for printing the
	basic HOL term types in the current language.  The term value
	is the constant or variable, the string and type are from its
	destroyed form after aliases are found.

\ITEM{pe_app, pe_ç} The remaining two functions for printing the
	basic HOL term types in the current language, although the
	application form is generalised to allow a list of arguments.

\ITEM{pe_addstring, pe_beginb, pe_endb, pe_space} The Oppen printing
	functions to be used, see~\cite{DS/FMU/IED/IMP024}.

\end{description}

%--------------------------------------------------------------------

%--------------------------------------------------------------------
=DOC
val ‚set_printers· :
	(string *
		( (PP_ENV -> TERM -> TERM -> unit)			(* ç *)
		* (PP_ENV -> TERM -> TERM list -> unit)		(* app *)
		* (PP_ENV -> TERM -> string -> TYPE -> unit)	(* const *)
		* (PP_ENV -> TERM -> string -> TYPE -> TERM list
				-> PFUN_ANS)				(* const fun app *)
		* (PP_ENV -> TERM -> string -> TYPE -> TERM list
				-> PFUN_ANS)				(* var fun app *)
		* (PP_ENV -> TERM -> string -> TYPE -> unit)	(* var *)
	))  -> unit;
=DESCRIBE
Sets the printing functions to be used for the language named
in the string argument.
=FAILURE
31002	Printing functions already installed for language `?0`
=ENDDOC
%--------------------------------------------------------------------

%--------------------------------------------------------------------
=DOC
val initial_env : string -> OppenFormatting.OPPEN_FUNS -> PP_ENV;
=DESCRIBE
Creates an initial environment value to contain the printing functions
for the named language and the given Oppen printing functions.  If there
are no function available for the named language then functions for
HOL are tried, if these are not available then error 31001 is issued.
=FAILURE
31001	Printing functions not installed for language `?0` or `HOL`
=ENDDOC
%--------------------------------------------------------------------

%--------------------------------------------------------------------
=DOC
val set_env_for_language : string -> PP_ENV -> PP_ENV;
=DESCRIBE
Updates an environment value to contain printing functions for
the named language.  If the language is not known then the HOL
printing functions are selected.
=FAILURE
31001	Printing functions not installed for language `?0` or `HOL`
=ENDDOC
%--------------------------------------------------------------------

%--------------------------------------------------------------------
=DOC
val set_prec : PREC_CONTEXT -> PP_ENV -> PP_ENV;
=DESCRIBE
Updates an environment value to contain the given precedence value.
=ENDDOC
%--------------------------------------------------------------------

%--------------------------------------------------------------------
=DOC
val ‚start_new_language· : PP_ENV -> string -> unit;
val ‚conclude_new_language· : PP_ENV -> string -> unit;
=DESCRIBE
These functions output the appropriate start and end of quotation
characters for the indicated language.
=ENDDOC
%--------------------------------------------------------------------

%--------------------------------------------------------------------
=DOC
val ‚main_term_pp· : PP_ENV -> TERM -> unit;
=DESCRIBE
Entry point to the recursive part of the pretty printer.  All of the
printing functions call this function to print the sub terms of the
term they were given.
=ENDDOC
%--------------------------------------------------------------------

%--------------------------------------------------------------------
=DOC
val ‚get_first_const· : TERM -> string OPT;
=DESCRIBE
If the given term is a constant applied to a list of arguments then
return its name. 
=ENDDOC
%--------------------------------------------------------------------

=DOC
end (* of signature PrettyPrinterSupport *);
=ENDDOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{TEST POLICY}

The pretty printer support functions functions are to be tested
according to the general criteria laid down in the quality
plan~\cite{DS/FMU/IED/PLN008}.  Two set of tests are considered.  Those
of the simple functional interfaces can readily be tested.  However,
much of the printer support support functionality requires extensive
setting up of the calling environments (values of type $Pp_Env$) and of
complex HOL terms.  Extensive tests of these latter form are included
in the module tests of the whole pretty printer(see its detailed design
in~\cite{DS/FMU/IED/DTD025}) which provides the necessary environment.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%********************************************************************
%--------------------------------------------------------------------

\makeatletter
\def\refstepcounter#1{\stepcounter{#1}\global\edef\@currentlabel{\csname
	p@#1\endcsname\csname the#1\endcsname}}
\makeatother

\twocolumn[\section{INDEX}] \label{Index}

\footnotesize
\printindex

\onecolumn

\end{document}
