=TEX
=SML
open Lex Parser;
val terms : string list list ref = ref [["ç"]];

val classify : (string -> HOL_TOKEN) ref =
	ref (fn		 "ç" => HTBinder "ç"
		|	"Ä" => HTInOp{name="Ä", prec=40, is_term_op=true, is_type_op=true}
		|	"Å" => HTInOp{name="Å", prec=30, is_term_op=true, is_type_op=true}
		|	"=" => HTInOp{name="=", prec=50, is_term_op=true, is_type_op=true}
		|	"," => HTInOp{name=",", prec=100, is_term_op=true, is_type_op=true}
		|	"+" => HTInOp{name="+", prec=200, is_term_op=true, is_type_op=true}
		|	"ã" => HTInOp{name="ã", prec=100, is_term_op=false, is_type_op=true}
		|	"å" => HTPreOp{name="å", prec=300}
		|	"!" => HTPostOp{name="!", prec=400}
		|	_ => HTBlob);
=TEX
=SML
fun HOL_term_recogniser (_, _, ip, _) = (HOL_parser o lex (!terms) (!classify)) ip;
=TEX
=TEST
(diag_line o format_tm format_ty)ªç(x, y)é(y, x)º;
(diag_line o format_tm format_ty)ªlet x = a in yº;
(diag_line o format_tm format_ty)ªlet(x, y) = (a, b) and z = c in (z, y, x)º;
(diag_line o format_tm format_ty)ªif a then 1 else 2º;
(diag_line o format_tm format_ty)ªaÄbÅcº;
(diag_line o format_tm format_ty)ªaÄbÄcº;
(diag_line o format_tm format_ty)ªaÅbÅcº;
(diag_line o format_tm format_ty)ªåxº;
(diag_line o format_tm format_ty)ª27!º;
(diag_line o format_tm format_ty)ª27:Üº;
(diag_line o format_tm format_ty)ªf "abc"º;
(diag_line o format_tm format_ty)ªf `a`º;
(diag_line o format_tm format_ty)ªª%down%SML (mk_var("var", mk_vartype"'vartype"))ºº;
(diag_line o format_tm format_ty)ª{1;2;3;4}º;
(diag_line o format_tm format_ty)ª{1}º;
(diag_line o format_tm format_ty)ª{}º;
(diag_line o format_tm format_ty)ª{x:Ü|f x = 0}º;
(diag_line o format_tm format_ty)ª(a+b)º;
(diag_line o format_tm format_ty)ª[a;b;c;d]º;
(diag_line o format_tm format_ty)ª[a]º;
(diag_line o format_tm format_ty)ª[]º;
(diag_line o format_tm format_ty)ªçx y z:Ü; a b c:bool; deféx+y+z,a,b,c,defº;
(diag_line o format_tm format_ty)ªlet x = 1+2 and y = 2+3 and z = 3+4 in z + y + xº;
(diag_line o format_tm format_ty)ªx:Ü ã boolº;
(diag_line o format_tm format_ty)ªy:ª%down%SML: (mk_vartype"'vartype")ºº;
(diag_line o format_tm format_ty)ªy:tynameº;
(diag_line o format_tm format_ty)ª(y:tyname)º;
(diag_line o format_tm format_ty)ª(y:ty1 ty2)º;
(diag_line o format_tm format_ty)ªy:(ty1, ty2, ty3) fredº;
(diag_line o format_tm format_ty)ª$!º;

(diag_line o format_tm format_ty)ªç(x, y)éé(y, x)º;
(diag_line o format_tm format_ty)ªlet x = a In yº;
(diag_line o format_tm format_ty)ªlet(x, y) = (a, b) and z =  in (z, y, x)º;
(diag_line o format_tm format_ty)ªif let a then 1 else 2º;
(diag_line o format_tm format_ty)ªaÄbÅ Åcº;
(diag_line o format_tm format_ty)ªåº;
(diag_line o format_tm format_ty)ª!º;
(diag_line o format_tm format_ty)ª27::Üº;
(diag_line o format_tm format_ty)ª! "abc"º;
(diag_line o format_tm format_ty)ª^(mk_var"var", mk_vartype"'vartype"))º;
(diag_line o format_tm format_ty)ª{1;2;3;;4}º;
(diag_line o format_tm format_ty)ª{1}}º;
(diag_line o format_tm format_ty)ª{{}º;
(diag_line o format_tm format_ty)ª{x:Üéf x = 0}º;
(diag_line o format_tm format_ty)ª(a+b))º;
(diag_line o format_tm format_ty)ª(a+bº;
(diag_line o format_tm format_ty)ª[a;b;c;d]]º;
(diag_line o format_tm format_ty)ª[[[a]º;
(diag_line o format_tm format_ty)ª[]]º;
(diag_line o format_tm format_ty)ªçx+y z:Ü; a b c:bool; deféx+y+z,a,b,c,defº;
(diag_line o format_tm format_ty)ªç($, a b)é(b, a)º;
(diag_line o format_tm format_ty)ªlet x, = 1+2 and y = 2+3 and z = 3+4 in z + y + xº;
(diag_line o format_tm format_ty)ªx:ã Ü ã boolº;
(diag_line o format_tm format_ty)ªy:ª%down%SML: (mk_vartype"'vartype")ºº;
(diag_line o format_tm format_ty)ªy:ãº;
(diag_line o format_tm format_ty)ª(y:tynameº;
(diag_line o format_tm format_ty)ª(y:ty1, ty2)º;
(diag_line o format_tm format_ty)ªy:(ty1, ty2, ty3 fredº;

