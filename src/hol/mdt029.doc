=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
\TPPtitle{Module Tests for Tactics III}
\TPPref{DS/FMU/IED/MDT029}  %% Mandatory field
\def\SCCSversion{$Revision$ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}  %% Mandatory field
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{K.~Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{R.D.~Arthan & WIN01 \\ K.~Blackburn & WIN01}
\TPPauthorisation{R.D.Arthan & FST Team Leader}
\TPPabstract{This document gives the module tests for the 
third group of tactics and tacticals in ICL HOL.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Project Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item [Issue 1.1]
First version.
\item [Issue 1.2]
Modified $spec\_asm\_tac$ tests, et al.
\item [Issue 1.3]
Changes to match issue 1.5 of \cite{DS/FMU/IED/DTD029}.
\end{description}
\subsection{Changes Forecast}
Completion of coverage.
\section{GENERAL}
\subsection{Scope}
This document contains the module tests for the material
whose detailed design is given in in \cite{DS/FMU/IED/DTD029}.
\subsection{Introduction}
We are pretty cursory in the following, doing little more than just demonstrating
the tactics presence and error message origin.
\subsubsection{Dependencies}
The tests depend upon \cite{DS/FMU/IED/IMP013}, the test harness.
In addition, testing by the subgoal package
depends on \cite{DS/FMU/IED/IMP030}.

\subsubsection{Deficiencies}
The testing could be more rigorous.
\section{TEST CASES}
We test each function of the signature of \cite{DS/FMU/IED/DTD029}
in turn, where possible in the same order as in the design document.
\section{PREAMBLE}
=SML
open_theory"Ü";
usefile "dtd013";
usefile "imp013";
init_mt_results();
set_flag("subgoal_package_quiet",true);
repeat drop_main_goal;
val _ = push_proof_context pair_epc;
=TEX
\section{TESTS}
\subsection{Testing Using Subgoal Package}
The following functions apply a tactic to a selected goal
and returns the resulting top goal. 
This of course doesn't fully test tactics that return multiple
goals.
The functions differ in that $tac\_res1$ inputs and outputs
both assumptions and conclusion, while $tac\_res$
just assumes an empty assumption list.
=SML
fun ‚tac_res· tac goal = (push_goal([],goal);
		a tac;
		let val (asms,gl) = top_goal()
		in
			(drop_main_goal();
			gl)
		end);
fun ‚tac_res1· tac (asms, goal) = (
		push_goal(asms,goal);
		a tac;
		let val (asms,gl) = top_goal()
		in
			(drop_main_goal();
			(asms,gl))
		end);
=TEX
This function tests that a tactic proves a goal:
=SML
fun ‚tac_solve· tac (asms, goal) = (
	dest_thm (tac_proof ((asms,goal),tac))
	=
	(asms, goal)
);
=TEX
This function tests that a tactic fails on a goal:
=SML
fun ‚tac_fail· tac (asms, goal) = (
	push_goal(asms,goal);
	a tac
	handle complaint =>
	(drop_main_goal();
	reraise complaint (area_of complaint))
);
=TEX
=SML

=TEX
\section{THE TESTS}
\subsection{Concerning Tautologies}
=SML
store_mt_results mt_run [("taut_rule",
	dest_thm o taut_rule,
	ª(a Ä b Ä c Ä d ä e) Ç (a ä b ä c ä d ä e)º,
	([],ª(a Ä b Ä c Ä d ä e) Ç (a ä b ä c ä d ä e)º))];
store_mt_results mt_run_fail [("taut_rule 27037",
	taut_rule,
	ªFº,
	gen_fail_msg "taut_rule" 27037 ["ªFº"]),
	("taut_rule 27030",
	taut_rule,
	ª1º,
	gen_fail_msg "taut_rule" 27037 ["ª1º"])];
=TEX
=SML
store_mt_results mt_run [("taut_conv",
	dest_thm o taut_conv,
	ª(a Ä b Ä c Ä d ä e) Ç (a ä b ä c ä d ä e)º,
	([],ª((a Ä b Ä c Ä d ä e) Ç (a ä b ä c ä d ä e)) Ç Tº))];
store_mt_results mt_run_fail [("taut_conv 27037 a",
	taut_conv,
	ªFº,
	gen_fail_msg "taut_conv" 27037 ["ªFº"]),
	("taut_conv 27037 b",
	taut_conv,
	ª1º,
	gen_fail_msg "taut_conv" 27037 ["ª1º"])];
=TEX
=SML
store_mt_results mt_run [("taut_eq_conv",
	dest_thm o taut_eq_convª(a ä b ä c ä d ä e)º,
	ª(a Ä b Ä c Ä d ä e)º,
	([],ª((a Ä b Ä c Ä d ä e) Ç (a ä b ä c ä d ä e))º))];
store_mt_results mt_run_fail [("taut_eq_conv 27015",
	taut_eq_conv ªTº,
	ªFº,
	gen_fail_msg "taut_eq_conv" 27015 ["ªTº","ªFº"]),
	("taut_eq_conv 27015 a",
	taut_eq_conv ªTº,
	ª1º,
	gen_fail_msg "taut_eq_conv" 27015 ["ªTº","ª1º"]),
	("taut_eq_conv 27015 b",
	taut_eq_conv ª1º,
	ªTº,
	gen_fail_msg "taut_eq_conv" 27015 ["ª1º","ªTº"])];
=TEX
\subsection{Concerning å}
=SML
store_mt_results mt_run [
	("å_in_tac 1",
	tac_res å_in_tac,
	ªå(å F)º,
	ªFº),
	("å_in_tac 2",
	tac_res å_in_tac,
	ªå(a Ä b)º,
	ªå a Å å bº),
	("å_in_tac 3",
	tac_res å_in_tac,
	ªå(a Å b)º,
	ªå a Ä å bº),
	("å_in_tac 4",
	tac_res å_in_tac,
	ªå(a ä b)º,
	ªa Ä å bº),
	("å_in_tac 5",
	tac_res å_in_tac,
	ªå(a Ç b)º,
	ª(a Ä åb) Å (b Ä åa)º),
	("å_in_tac 6",
	tac_res å_in_tac,
	ªå(É x éf x)º,
	ªÑ x éå f xº),
	("å_in_tac 7",
	tac_res å_in_tac,
	ªå(É (x,y) é f x y)º,
	ªÑ (x,y) é å f x yº),
	("å_in_tac 8",
	tac_res å_in_tac,
	ªå(Ñ x éf x)º,
	ªÉ x éå f xº),
	("å_in_tac 9",
	tac_res å_in_tac,
	ªå(Ñ (x,y) é f x y)º,
	ªÉ (x,y) é å f x yº),
	("å_in_tac 10",
	tac_res å_in_tac,
	ªå(Ñ%down%1 x éf x)º,
	ªÉ x éå (f x Ä É x' éf x' ä x' = x)º),
	("å_in_tac 11",
	tac_res å_in_tac,
	ªå(Ñ%down%1 (x,y) é f x y)º,
	ªÉ (x,y) é å (f x y Ä É (x',y') éf x' y' ä (x',y') = (x,y))º),
	("å_in_tac 12",
	tac_res å_in_tac,
	ªå Tº,
	ªFº)];
store_mt_results mt_run[
	("å_in_tac 13",
	tac_solve å_in_tac,
	([],ªåFº),
	true)];
store_mt_results mt_run_fail [("å_in_tac 28025",
	tac_fail å_in_tac,
	([],ªTº),
	gen_fail_msg "å_in_tac" 28025 [])];
=TEX
As $å\_IN\_THEN$ is based on the same conversion as the above,
we just test one case.
=SML
store_mt_results mt_run [("å_IN_THEN",
	tac_res (å_IN_THEN ante_tac f_thm),
	ªTº,
	ªT ä Tº)];
store_mt_results mt_run_fail [("å_IN_THEN 29010",
	å_IN_THEN asm_tac,
	t_thm,
	gen_fail_msg "å_IN_THEN" 29010 ["Ö T"])];
=TEX
\subsection{Concerning É}
=SML
store_mt_results mt_run [("É_tac 1",
	tac_res É_tac,
	ªÉ x é f xº,
	ªf x : BOOLº),
	("É_tac 2",
	tac_res É_tac,
	ªÉ (x,y,z) é f x y zº,
	ªf x y z: BOOLº)];
store_mt_results mt_run_fail [("É_tac 29001",
	tac_fail É_tac,
	([],ªTº),
	gen_fail_msg "É_tac" 29001 [])];
=TEX
\subsection{Concerning Ñ}
=SML
store_mt_results mt_run [("Ñ_tac 1",
	tac_res (Ñ_tac ª1º),
	ªÑ x é x = 1º,
	ª1 = 1º),
	("Ñ_tac 2",
	tac_res (Ñ_tac ª(1,2)º),
	ªÑ (x,y):Ü â Ü é å(x = y)º,
	ªå(1 = 2)º),
	("Ñ_tac 3",
	tac_res (Ñ_tac ªx:'aº),
	ªÑ  y : Ü é y = yº,
	ª(x:Ü) = xº),
	("Ñ_tac 4",
	tac_res (Ñ_tac ªx:'aº),
	ªÑ (x,y): 'a â 'a é x = yº,
	ªFst (x: 'a â 'a) = Snd xº)];
store_mt_results mt_run_fail [("Ñ_tac 29002",
	tac_fail (Ñ_tac mk_t),
	([],ªa Å bº),
	gen_fail_msg "Ñ_tac" 29002 []),
	("Ñ_tac 29008",
	tac_fail (Ñ_tac ª(1,2)º),
	([],ªÑ a é a Å bº),
	gen_fail_msg "Ñ_tac" 29008 ["ª(1, 2)º","ªaº"])];
=TEX
=SML
store_mt_results mt_run [("Ñ_THEN",
	tac_res1 (Ñ_THEN ante_tac (asm_rule ªÑ (x,y) é x = yº)),
	([],ªx:BOOLº),
	([],ª(x' = y) ä xº))];
store_mt_results mt_run_fail [("Ñ_THEN 29003",
	Ñ_THEN ante_tac,
	t_thm,
	gen_fail_msg "Ñ_THEN" 29003 ["Ö T"])];
=TEX
\subsection{Concerning Ñ$_1$}
=SML
store_mt_results mt_run [("Ñ%down%1_tac 1",
	tac_res (Ñ%down%1_tac ª2º),
	ªÑ%down%1 x é x = 1º,
	ª2 = 1 Ä É x' é x' = 1 ä x' = 2º),
	("Ñ%down%1_tac 2",
	tac_res (Ñ%down%1_tac ª(1,2)º),
	ªÑ%down%1 (x:Ü,y) é å(x = y)º,
	ªå(1 = 2) Ä É (x',y') é å(x' = y') ä (x',y') = (1,2)º),
	("Ñ%down%1_tac 3",
	tac_res (Ñ%down%1_tac ªx:'aº),
	ªÑ%down%1 y : Ü é y = yº,
	ª((x:Ü) = x) Ä É y' é (y' = y') ä y' = xº),
	("Ñ%down%1_tac 4",
	tac_res (Ñ%down%1_tac ªx:'aº),
	ªÑ%down%1 (x,y): 'a â 'a é x = yº,
	ªFst (x: 'a â 'a) = Snd x Ä É (x',y') é (x' = y') ä (x',y') = (Fst x, Snd x)º)];
store_mt_results mt_run_fail [("Ñ%down%1_tac 29004",
	tac_fail (Ñ%down%1_tac mk_t),
	([],ªa Å bº),
	gen_fail_msg "Ñ%down%1_tac" 29004 []),
	("Ñ%down%1_tac 29008",
	tac_fail (Ñ%down%1_tac ª(1,2)º),
	([],ªÑ%down%1 a é a Å bº),
	gen_fail_msg "Ñ%down%1_tac" 29008 ["ª(1, 2)º","ªaº"])];
=TEX
=SML
store_mt_results mt_run [("Ñ%down%1_THEN",
	tac_res1 (Ñ%down%1_THEN ante_tac (asm_rule ªÑ%down%1 (x,y) é x = yº)),
	([],ªx:BOOLº),
	([],ª((x' = y) Ä 
		(É (x'',y') é (x'' = y') ä (x'',y') = (x',y)))ä xº))];
store_mt_results mt_run_fail [("Ñ%down%1_THEN 29005",
	Ñ%down%1_THEN ante_tac,
	t_thm,
	gen_fail_msg "Ñ%down%1_THEN" 29005 ["Ö T"])];
=TEX
\subsection{Concerning Assumptions}
=SML
store_mt_results mt_run [("spec_asm_tac",
	tac_res1 (spec_asm_tac ªÉ x é x = 1º ª0º),
	([ªÉ x é x = 1º],ªFº),
	([ª0 = 1º,ªÉ x é x = 1º],ªFº))];
store_mt_results mt_run [("list_spec_asm_tac",
	tac_res1 (list_spec_asm_tac ªÉ x y:Ü é x = yº [ª0º,ª1º]),
	([ªÉ x y:Ü é x = yº],ªFº),
	([ª0 = 1º,ªÉ x y:Ü é x = yº],ªFº))];
store_mt_results mt_run [("spec_nth_asm_tac",
	tac_res1 (spec_nth_asm_tac 1 ª0º),
	([ªÉ x é x = 1º],ªFº),
	([ª0 = 1º,ªÉ x é x = 1º],ªFº))];
store_mt_results mt_run [("list_spec_nth_asm_tac",
	tac_res1 (list_spec_nth_asm_tac 1 [ª0º,ª1º]),
	([ªÉ x y :Üé x = yº],ªFº),
	([ª0 = 1º,ªÉ x y :Üé x = yº],ªFº))];
=TEX
We only give one example kind of passed-on error for each function.
=SML
store_mt_results mt_run_fail [("spec_asm_tac 9301",
	tac_fail (spec_asm_tac ªÉ x é x = 1º ª0º),
	([],ªFº),
	gen_fail_msg "GET_ASM_T" 9301 ["ªÉ xé x = 1º"])];
store_mt_results mt_run_fail [("list_spec_asm_tac 9301",
	tac_fail (list_spec_asm_tac ªÉ x y é x = yº [ª0º,ª1º]),
	([],ªFº),
	gen_fail_msg "GET_ASM_T" 9301 ["ªÉ x yé x = yº"])];
store_mt_results mt_run_fail [("spec_nth_asm_tac 9303",
	tac_fail (spec_nth_asm_tac 2 ª0º),
	([ªÉ x é x = 1º],ªFº),
	gen_fail_msg "GET_NTH_ASM_T" 9303 ["2"])];
store_mt_results mt_run_fail [("list_spec_nth_asm_tac 9303",
	tac_fail (list_spec_nth_asm_tac 2 [ª0º,ª1º]),
	([ªÉ x y é x = yº],ªFº),
	gen_fail_msg "GET_NTH_ASM_T" 9303 ["2"])];
=TEX
\section{CONVERSIONS}
=SML
store_mt_results mt_run [
	("å_in_conv 1",
	snd o dest_eq o concl o å_in_conv,
	ªåå Tº,
	ªTº),
	("å_in_conv 2",
	snd o dest_eq o concl o å_in_conv,
	ªå(b Ä a)º,
	ªå b Å å aº),
	("å_in_conv 3",
	snd o dest_eq o concl o å_in_conv,
	ªå(b Å a)º,
	ªå b Ä å aº),
	("å_in_conv 4",
	snd o dest_eq o concl o å_in_conv,
	ªå(a ä b)º,
	ªa Ä å bº),
	("å_in_conv 5",
	snd o dest_eq o concl o å_in_conv,
	ªå(c Ç b)º,
	ª(c Ä åb) Å (b Ä åc)º),
	("å_in_conv 6",
	snd o dest_eq o concl o å_in_conv,
	ªå(if a then b else d)º,
	ªif a then åb else ådº),
	("å_in_conv 7",
	snd o dest_eq o concl o å_in_conv,
	ªå(É(x,y) é x Ä y)º,
	ªÑ(x,y) é å(x Ä y)º),
	("å_in_conv 8",
	snd o dest_eq o concl o å_in_conv,
	ªå(Ñ(x,y) é x Ä y)º,
	ªÉ(x,y) é å(x Ä y)º),
	("å_in_conv 9",
	snd o dest_eq o concl o å_in_conv,
	ªå(Ñ%down%1(x,y) é x Ä y)º,
	ªÉ(x,y) é å((x Ä y) Ä É (x',y')é x' Ä y' ä (x',y') = (x,y))º),
	("å_in_conv 10",
	snd o dest_eq o concl o å_in_conv,
	ªå Tº,
	ªFº),
	("å_in_conv 1",
	snd o dest_eq o concl o å_in_conv,
	ªå Fº,
	ªTº)];
=TEX
=SML
store_mt_results mt_run_fail [("å_in_conv 28131",
	å_in_conv,
	mk_t,
	gen_fail_msg "å_in_conv" 28131 ["ªTº"])];
=TEX
\section{CANONICALISATION}
=SML
store_mt_results mt_run [("å_rewrite_canon 1",
	dest_thm o hd o å_rewrite_canon,
	asm_rule ªå(a Å b)º,
	( [ªå(a Å b)º],ªå a Ä å bº)),
	("å_rewrite_canon 1",
	dest_thm o hd o å_rewrite_canon,
	asm_rule ªå(Ñ (x,y) éx = y)º,
	( [ªå(Ñ (x,y) éx = y)º],ªÉ(x,y)éå(x = y)º)),
	("å_rewrite_canon 3",
	dest_thm o hd o å_rewrite_canon,
	asm_rule ªåaº,
	( [ªåaº],ªa Ç Fº))];
store_mt_results mt_run_fail [("å_rewrite_canon 26201",
	å_rewrite_canon,
	t_thm,
	gen_fail_msg "fail_canon" 26201 [])];
=TEX
=SML
store_mt_results mt_run [("É_rewrite_canon 1",
	dest_thm o hd o É_rewrite_canon,
	asm_rule ªÉ (x,y) é x = yº,
	( [ªÉ (x,y) é x = yº],ªx = yº))];
store_mt_results mt_run_fail [("É_rewrite_canon 26201",
	É_rewrite_canon,
	t_thm,
	gen_fail_msg "fail_canon" 26201 [])];
=TEX
The following does test all four canonicalisations that
make up the compilation, and the composition functions and $REWRITE\_CAN$.
=SML
store_mt_results mt_run [("pair_rw_canon 1",
	dest_thm o hd o pair_rw_canon,
	asm_rule ªå(a Å b)º,
	( [ªå(a Å b)º],ªa Ç Fº)),
	("pair_rw_canon 2",
	dest_thm o hd o pair_rw_canon,
	asm_rule ªå(Ñ (x,y) éx = y)º,
	( [ªå(Ñ (x, y)é x = y)º],ªÉ y x é (x = y) Ç Fº)),
	("pair_rw_canon 3",
	dest_thm o hd o pair_rw_canon,
	asm_rule ªåaº,
	( [ªåaº],ªa Ç Fº)),
	("pair_rw_canon 4",
	dest_thm o hd o pair_rw_canon,
	asm_rule ªÉ (x,y) é x = yº,
	( [ªÉ (x,y) é x = yº],ªÉ y x é x = yº)),
	("pair_rw_canon 5",
	dest_thm o hd o pair_rw_canon,
	asm_rule ªÉ (x,y) é xº,
	( [ªÉ (x,y) é xº],ªÉ x é x Ç Tº))];
=TEX
\section{PROOF CONTEXTS}
\subsection{Stripping Tactics and Tacticals}
We test those areas enhanced by the $epair\_proof\_context$
over $einitial\_strip\_proof\_context$,
after retesting that initial form.
We don't test much of the moving in of negations, as
the tests for $å\_in\_conv$ may be considered adequate.
=SML
store_mt_results mt_run [
	("strip_tac 1",
	tac_res strip_tac,
	ªÉ x é x Ä yº,
	ªx Ä yº),
	("strip_tac 2",
	tac_res strip_tac,
	ªa Ä bº,
	ªa : BOOLº),
	("strip_tac 3",
	tac_res strip_tac,
	ªa Å å bº,
	ªb ä aº),
	("strip_tac 4",
	tac_res strip_tac,
	ªå a Å bº,
	ªa ä bº),
	("strip_tac 5",
	tac_res strip_tac,
	ªa Å bº,
	ªå a ä bº),
	("strip_tac 6",
	tac_res strip_tac,
	ªa Ç bº,
	ª(a ä b) Ä (b ä a)º),
	("strip_tac 7",
	tac_res strip_tac,
	ªif a then (b:BOOL) else cº,
	ª(a ä b) Ä (å a ä c)º),
	("strip_tac 8",
	tac_res strip_tac,
	ªå (a Å b)º,
	ªå a Ä å bº)];
store_mt_results mt_run [
	("strip_tac p1",
	tac_res strip_tac,
	ªÉ (x,y) z é x Ä y Ä zº,
	ªÉ x y z é x Ä y Ä zº),
	("strip_tac p2",
	tac_res strip_tac,
	ªÉ (x,y,z) é x Ä y Ä zº,
	ªÉ x y z é x Ä y Ä zº)];
store_mt_results mt_run [
	("strip_tac a1",
	tac_res1 strip_tac,
	([],ªa ä bº),
	([ªa:BOOLº],ªb:BOOLº)),
	("strip_tac a2",
	tac_res1 strip_tac,
	([ªa:BOOLº],ªa ä bº),
	([ªa:BOOLº],ªb:BOOLº)),
	("strip_tac a3",
	tac_res1 strip_tac,
	([],ª(a Ä b) ä cº),
	([ªb:BOOLº,ªa:BOOLº],ªc:BOOLº)),
	("strip_tac a4",
	tac_res1 strip_tac,
	([],ª(a Å b) ä cº),
	([ªa:BOOLº],ªc:BOOLº)),
	("strip_tac a5",
	tac_res1 strip_tac,
	([],ª(Ñ x é f x) ä aº),
	([ªf x :BOOLº],ªa:BOOLº)),
	("strip_tac a6",
	tac_res1 strip_tac,
	([],ª(a ä b) ä cº),
	([ªå aº],ªc:BOOLº)),
	("strip_tac a7",
	tac_res1 strip_tac,
	([],ª(a Ç b) ä cº),
	([ªå bº,ªå aº],ªc : BOOLº)),
	("strip_tac a8",
	tac_res1 strip_tac,
	([],ª(if a then b else c) ä dº),
	([ªc:BOOLº,ªå aº],ªd:BOOLº)),
	("strip_tac a9",
	tac_res1 strip_tac,
	([],ª(å( a Å b)) ä cº),
	([ªå bº,ªå aº],ªc : BOOLº)),
	("strip_tac a10",
	tac_res1 strip_tac,
	([],ª(Ñ%down%1 x é f x) ä aº),
	([ªÉ x':'a é f x' ä x' = xº,ªf x:BOOLº],ªa:BOOLº))
];
store_mt_results mt_run [
	("strip_tac pa1",
	tac_res1 strip_tac,
	([],ª(Ñ (x,y) é f x y) ä aº),
	([ªf x y:BOOLº],ªa:BOOLº)),
	("strip_tac pa2",
	tac_res1 strip_tac,
	([],ª(Ñ (x,y,z) é f x y z) ä aº),
	([ªf x y z:BOOLº],ªa:BOOLº)),
	("strip_tac pa3",
	tac_res1 strip_tac,
	([],ª(É (x,y) é f x y) ä aº),
	([ªÉ x y é f x yº],ªa:BOOLº)),
	("strip_tac pa4",
	tac_res1 strip_tac,
	([],ª(Ñ%down%1 (x,y) é f x y) ä aº),
	([ªÉ (x':'a) (y':'b) é f x' y' ä (x',y') = (x,y)º,ªf x y:BOOLº],ªa:BOOLº))
];
store_mt_results mt_run [
	("strip_tac tp1",
	tac_solve strip_tac,
	([],ªTº),
	true),
	("strip_tac tp2",
	tac_solve strip_tac,
	([ªa:BOOLº,ªb:BOOLº],ªa:BOOLº),
	true),
	("strip_tac tp3",
	tac_solve strip_tac,
	([],ª(a Ä b) ä aº),
	true),
	("strip_tac tp4",
	tac_solve strip_tac,
	([ªå aº],ª(a Ä b) ä cº),
	true),
	("strip_tac tp4",
	tac_solve strip_tac,
	([ªa:BOOLº],ªå (a Å b) ä cº),
	true)
];
store_mt_results mt_run_fail [("strip_tac",
	tac_fail strip_tac,
	([],ªf x : BOOLº),
	gen_fail_msg "strip_tac" 28003 ["ªf xº"])];
=TEX
The change to $strip\_asm\_tac$ has been tested in testing $strip\_tac$,
but for the record:
=SML
store_mt_results mt_run [("strip_asm_tac 1",
	tac_res1 (strip_asm_tac (asm_rule ªa Ä bº)),
	([ªa Ä bº],ªc:BOOLº),
	([ªb:BOOLº,ªa:BOOLº,ªa Ä bº],ªc:BOOLº)),
	("strip_asm_tac 2",
	tac_res1 (strip_asm_tac t_thm),
	([],ªc:BOOLº),
	([],ªc:BOOLº))];
=TEX
The change to $check\_asm\_tac$ has been tested in testing $strip\_tac$,
but for the record:
=SML
store_mt_results mt_run [("check_asm_tac 1",
	tac_res1 (check_asm_tac (Ä_left_elim(asm_rule ªa Ä bº))),
	([ªa Ä bº],ªc:BOOLº),
	([ªa:BOOLº,ªa Ä bº],ªc:BOOLº)),
	("check_asm_tac 2",
	tac_res1 (check_asm_tac t_thm),
	([],ªc:BOOLº),
	([],ªc:BOOLº))];
=TEX
The change to $STRIP\_THM\_THEN$ has been tested in testing $strip\_tac$,
but for the record:
=SML
store_mt_results mt_run [("STRIP_THM_THEN",
	tac_res1 ((STRIP_THM_THEN strip_asm_tac) (asm_rule ªa Ä bº)),
	([ªa Ä bº],ªc:BOOLº),
	([ªb:BOOLº,ªa:BOOLº,ªa Ä bº],ªc:BOOLº))];
store_mt_results mt_run_fail [("STRIP_THM_THEN 28003",
	STRIP_THM_THEN strip_asm_tac,
	t_thm,
	gen_fail_msg "STRIP_THM_THEN" 28003 ["Ö T"])];
=TEX
The change to $STRIP\_GOAL\_T$ has been tested in testing $strip\_tac$,
but for the record:
=SML
store_mt_results mt_run [("STRIP_GOAL_T",
	tac_res1 (STRIP_GOAL_T asm_tac),
	([],ª(a Ä b) ä cº),
	([ªa Ä bº],ªc : BOOLº))];
store_mt_results mt_run_fail [("STRIP_GOAL_T 28003",
	tac_fail (STRIP_GOAL_T asm_tac),
	([],ªf x: BOOLº),
	gen_fail_msg "STRIP_GOAL_T" 28003 ["ªf xº"])];
=TEX
\section{END OF TESTS}
=SML
set_flag("subgoal_package_quiet",false);
diag_string(summarize_mt_results ());
=TEX
=TEX
\end{document}
=IGN
***********COPY**************
store_mt_results mt_run [("",
	tac_res ,
	ªº,
	ªº)];
store_mt_results mt_run [("",
	tac_res1 ,
	([ªº],ªº),
	([ªº],ªº))];
store_mt_results mt_run [
	("",
	tac_solve ,
	([],ªº),
	true),
];
store_mt_results mt_run_fail [("",
	tac_fail ,
	([],ªº),
	gen_fail_msg ""  [])];

store_mt_results mt_run [("",
	,
	,
	)];
store_mt_results mt_run_fail [("",
	,
	,
	gen_fail_msg ""  [])];
