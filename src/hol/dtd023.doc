=TEX
% TQtemplate.tex
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design for Basic Definitions and Axioms}  %% Mandatory field
\TPPref{DS/FMU/IED/DTD023}  %% Mandatory field
\def\SCCSversion{$Revision$ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}  %% Mandatory field (with sensible default)
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
%\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
\TPPauthors{D.J.~King & WIN01\\K.~Blackburn & WIN01}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{This document contains the detailed design for
the theories $min$, $init$, $log$ and $misc$.
These provide the basic definitions and axioms for ICL HOL.
}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Project Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}

\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'

\begin{description}
\item[Issues 1.1 - 1.2]
Initial versions.
\item[Issue 1.3]
Changed $type\_definition\_def$ to $type\_defn\_def$.
\item[Issue 1.4 (2 September 1991)]
Added words to the document. This version has been
prepared in anticipation of a desk check.
\item[Issue 1.5 (2 September 1991)]
Few minor modifications to the wording.
\item[Issue 1.6 (18 September 1991)]
Added theory design material.
\item[Issue 1.7 (20 September 1991)]
Fixed authors field.
\item[Issue 1.8 (23 September 1991)]
Reacted to issue 1.3 of \cite{DS/FMU/IED/DTD035}.
\item[Issue 1.9 (17 October 1991)]
Added theorems added to ``misc'' by \cite{DS/FMU/IED/IMP037}.
\item[Issue 1.10 (21 October 1991)]
Changes after comments.
\item[Issue 1.11 (31 October 1991)]
Removed mention of $Å\_å\_thm$.
\item[Issue 1.12 (11th November 1991)]
Changes after comments on circulated copy.
\item[Issue 1.13 (22th November 1991)]
Added constant specification material.
\end{description}
\subsection{Changes Forecast}

None.

\pagebreak
\section{GENERAL}

\subsection{Scope}
This document contains the signatures for the basic
definitions and axioms which form part of the ICL HOL
system. It is provided in response to the requirements
stated in \cite{DS/FMU/IED/HLD011} and
\cite{DS/FMU/IED/PLN008}.

\subsection{Introduction}

\subsubsection{Background and Purpose}

The signatures for the basic definitions and axioms
each introduce the interfaces for the structures
of the same names. It is intended that the structures
will create the theories $min$, $log$, $init$ and $misc$,
using the interface to the abstract datatype $THM$,
see \cite{DS/FMU/IED/DTD012}.

The basic definitions and axioms for ICL HOL have
been adapted from those of the ICL HOL prototype
\cite{DS/FMU/IED/SML008}.

\subsubsection{Interface}

This document defines the signatures $MinTheory$,
$LogTheory$ and $InitTheory$ and $MiscTheory$.
All four Standard ML structures corresponding to these
signatures will be open on entry.

\subsubsection{Deficiencies}

Strings are not indexed in ``=THDOC'' sections, but in
``=DESCRIBE'' sections.

\subsubsection{Dependencies}

The theory design section relies on the theory design tools
of \cite{DS/FMU/IED/IMP035}, as well as a HOL parser.
The rest relies on, at least, \cite{DS/FMU/IED/IMP012}.

\section{THEORY ``min''}
The theory ``min'' introduces the primitive
types and constants. 
\subsection{The Design of Theory ``min''}

=THDOC
req_name "min" Nil;
=DESCRIBE
The theory ``‚min·'' introduces the primitive
types and constants. 
=ENDDOC
=THDOC
req_type ("ã",2);
req_infix (100,"ã");
req_terminator "ã";
=DESCRIBE
$‚ã·$ is the HOL function type constructor.
=ENDDOC
=THDOC
req_type ("BOOL",0);
=DESCRIBE
$‚BOOL·$ is the type of booleans, a type with exactly two values.
=ENDDOC
=THDOC
req_type ("IND",0);
=DESCRIBE
$‚IND·$ is a type with a countably infinite number of members.
It is intended for use as a foundation for
building the theory of integers.
=ENDDOC
=THDOC
req_binder "ç";
req_terminator "ç";
=DESCRIBE
$‚ç·$ is parsed as a binder, though it corresponds to a method
of term formation, rather than a constant.
It is used to indicate $ç$-abstractions.
=ENDDOC
=THDOC
req_const("ä",ª:BOOL ã BOOL ã BOOLº);
req_infix (20,"ä");
req_terminator "ä";
=DESCRIBE
$‚ä·$ is the HOL constant for logical implication.
=ENDDOC
=THDOC
req_const("=",ª:'a ã 'a ã BOOLº);
req_infix(200,"=");
req_terminator "=";
=DESCRIBE
$‚=·$ is the HOL constant for equalities.
=ENDDOC
=THDOC
req_const("á",ª:('a ã BOOL) ã 'aº);
req_binder "á";
req_terminator "á";
=DESCRIBE
$‚á·$ is the HOL constant for the choice function.
=ENDDOC
Red tape to end theory design.
=THSML
summarize_td_results ();
val ‚min_success· = theory_check_success ();
initialise_td_results ();
=TEX

\subsection{The Signature $MinTheory$}

There are no interfaces to the structure 
in which ``min'' is implemented
and hence the signature is ``empty''.

The HOL type $BOOL$ is assigned to an ML variable of the same name in \cite{DS/FMU/IED/DTD003}.

=DOC
signature ‚MinTheory· = sig end;
=DESCRIBE
The signature $MinTheory$ contains the definitions for
the theory $min$. This introduces the primitive types and
constants of HOL.
=ENDDOC

\newpage

\section{THE THEORY ``log''}
\subsection{The Design of Theory ``log''}
=THDOC
req_name "log" (Value "min");
=DESCRIBE
The theory ``‚log·'' consists of definitions
for the basic constructors which constitute first
and second
order logic (e.g., $å$, $Ñ$, $É$) as well as definitions
of $true$, $false$, injective functions ($one\_one$), surjections ($onto$),
and a definition of sub-types ($type\_defn$).
=ENDDOC
=THDOC
req_const ("T",ª:BOOLº);
req_defn ("T", ([],ªT = (ç x:BOOLé x) = (ç xé x)º));
=DESCRIBE
$‚T·$ is the HOL constant for logical truth.
Its definition is bound to the ML variable $t\_def$.
=ENDDOC
=THDOC
req_const ("É",ª:('a ã BOOL) ã BOOLº);
req_binder "É";
req_terminator "É";
req_defn ("É", ([],ª$É = (ç Pé P = (ç x:'aé T))º));
=DESCRIBE
$É$ is the HOL constant for universal quantification.
Its definition is bound to the ML variable $É\_def$.
=ENDDOC
=THDOC
req_const ("Ñ",ª:('a ã BOOL) ã BOOLº);
req_binder "Ñ";
req_terminator "Ñ";
req_defn ("Ñ", ([],ª$Ñ = (ç P:'a ã BOOLé P ($á P))º));
=DESCRIBE
$‚Ñ·$ is the HOL constant for existential quantification.
Its definition is bound to the ML variable $Ñ\_def$.
=ENDDOC
=THDOC
req_const ("F",ª:BOOLº);
req_defn ("F", ([],ªF = (É b:BOOLé b)º));
=DESCRIBE
$‚F·$ is the HOL constant for logical falsity.
Its definition is bound to the ML variable $f\_def$.
=ENDDOC
=THDOC
req_const ("å",ª:BOOL ã BOOLº);
req_prefix (50,"å");
req_terminator "å";
req_defn ("å", ([],ª$å = (ç bé b ä F)º));
=DESCRIBE
$‚å·$ is the HOL constant for logical negation.
Its definition is bound to the ML variable $å\_def$.
=ENDDOC
=THDOC
req_const ("Ä",ª:BOOL ã BOOL ã BOOLº);
req_infix (40,"Ä");
req_terminator "Ä";
req_defn ("Ä", ([],ª$Ä = (ç b1 b2é É bé (b1 ä b2 ä b) ä b)º));
=DESCRIBE
$‚Ä·$ is the HOL constant for logical conjunction.
Its definition is bound to the ML variable $Ä\_def$.
=ENDDOC
=THDOC
req_const ("Å",ª:BOOL ã BOOL ã BOOLº);
req_infix (30,"Å");
req_terminator "Å";
req_defn ("Å", ([],ª$Å = (ç b1 b2é É bé (b1 ä b) ä (b2 ä b) ä b)º));
=DESCRIBE
$‚Å·$ is the HOL constant for logical disjunction.
Its definition is bound to the ML variable $Å\_def$.
=ENDDOC
=THDOC
req_const("OneOne",ª:('a ã 'b) ã BOOLº);
req_defn("OneOne",([],
	ªOneOne = (ç f:'a ã 'b é 
	 É x1 x2é f x1 = f x2 ä x1 = x2)º));
=DESCRIBE
$OneOne$ is the HOL constant for ``One-One'' functions,
i.e. injective functions.
Its definition is bound to the ML variable $one\_one\_def$.
=ENDDOC
=THDOC
req_const("Onto",ª:('a ã 'b) ã BOOLº);
req_defn("Onto",([],
	ªOnto = (ç f:'a ã 'bé É yé Ñ xé y = f x)º));
=DESCRIBE
$Onto$ is the HOL constant for ``Onto'' functions,
i.e. surjective functions.
Its definition is bound to the ML variable $onto\_def$.
=ENDDOC
=THDOC
req_const("TypeDefn",ª:('b ã BOOL) ã ('a ã 'b) ã BOOLº);
req_defn("TypeDefn",([],
	ªTypeDefn =
	(ç (P : 'b ã BOOL) (rep: 'a ã 'b)é 
	 OneOne rep Ä (É xé P x = (Ñ yé x = rep y)))º));
=DESCRIBE
$TypeDefn$ is the HOL constant used to express the fact that 
a predicate and a representation function form 
a suitable pair for a valid type definition.
It is used in $new\_type\_defn$(q.v.).
Its definition is bound to the ML variable $type\_defn\_def$.
=ENDDOC
Red tape to end theory design.
=THSML
summarize_td_results ();
val ‚log_success· = theory_check_success ();
initialise_td_results ();
=TEX

\subsection{The Signature $LogTheory$}

=DOC
signature ‚LogTheory· = sig
	val ‚f_def· : THM
	val ‚one_one_def· : THM
	val ‚onto_def· : THM
	val ‚t_def· : THM
	val ‚type_defn_def· : THM
	val ‚Ñ_def· : THM
	val ‚å_def· : THM
	val ‚Ä_def· : THM
	val ‚É_def· : THM
	val ‚Å_def· : THM
end;
=DESCRIBE
The signature $LogTheory$ contains the definitions for
the theory $log$(q.v.). This defines the basic predicate calculus
connectives and other derived notions which are needed
to state the axioms for HOL.
=ENDDOC

\newpage
\section{THE THEORY ``init''}
\subsection{The Design of Theory ``init''}
=THDOC
req_name "init" (Value "log");
=DESCRIBE
The five primitive axioms of ICL HOL are introduced by
the theory ``init''.
=ENDDOC
=THDOC
req_axiom ("bool_cases_axiom", ([],
	ªÉ bé b = T Å b = Fº));
=DESCRIBE
The axiom $‚bool\_cases\_axiom·$ expresses the fact
that booleans are true or false.
It is bound to the ML variable $bool\_cases\_axiom$.
=ENDDOC
=THDOC
req_axiom ("ä_antisym_axiom", ([],
	ªÉ b1 b2é (b1 ä b2) ä (b2 ä b1) ä b1 = b2º));
=DESCRIBE
The axiom $‚ä\_antisym\_axiom·$ expresses the fact
that $ä$ is anti-symmetric.
It is bound to the ML variable $ä\_antisym\_axiom$.
=ENDDOC
=THDOC
req_axiom ("eta_axiom", ([],
	ªÉ f:'a ã 'bé (ç xé f x) = fº));
=DESCRIBE
The axiom $‚eta\_axiom·$ expresses the presence of
eta-reduction in ICL HOL.
It is bound to the ML variable $eta\_axiom$.
=ENDDOC
=THDOC
req_axiom ("á_axiom", ([],
	ªÉ P (x:'a)é P x ä P ($á P)º));
=DESCRIBE
The axiom $‚á\_axiom·$ expresses the fact that
if some value satisfies a predicate, then ``choice''
of that predicate satisfies the predicate.
It is bound to the ML variable $á\_axiom$.
=ENDDOC
=THDOC
req_axiom ("infinity_axiom", ([],
	ªÑ f:IND ã INDé OneOne f Ä å Onto fº));
=DESCRIBE
The axiom $‚infinity\_axiom·$ expresses the fact that
$IND$ is infinite.
It is bound to the ML variable $infinity\_axiom$.
=ENDDOC
Red tape to end theory design.
=THSML
summarize_td_results ();
val ‚init_success· = theory_check_success ();
initialise_td_results ();
=TEX

\subsection{The Signature $InitTheory$}
=DOC
signature ‚InitTheory· = sig
	val ‚bool_cases_axiom· : THM
	val ‚eta_axiom· : THM
	val ‚infinity_axiom· : THM
	val ‚ä_antisym_axiom· : THM
	val ‚á_axiom· : THM
end;
=DESCRIBE
The signature $InitTheory$ contains the definitions for
the theory $init$(q.v). This contains the five primitive
axioms of HOL.
=ENDDOC

\newpage
\section{THE THEORY ``misc''}
\subsection{The Design of Theory ``misc''}
The following design records the total contents of
of ``misc'', rather than the initial
entries of \cite{DS/FMU/IED/IMP023}.
=THDOC
req_name "misc" (Value "init");
=DESCRIBE
The theory ``‚misc·'' contains miscellaneous definitions
and theorems
that are useful in constructing the proof development system.
Note that the theory ``misc'' is extended by the
actions of more than one structure.
=ENDDOC
=THDOC
req_const ("Ñ%down%1",ª:('a ã BOOL) ã BOOLº);
req_binder "Ñ%down%1";
req_terminator "Ñ%down%1";
req_defn("Ñ%down%1",([],
	ª$Ñ%down%1 = (ç P:'a ã BOOLé Ñ té P t Ä (É xé P x ä x = t))º));
=DESCRIBE
$‚Ñ_1·$ is the HOL constant for unique existential quantification.
Its definition is bound to the ML variable $Ñ_1\_def$.
=ENDDOC
=THDOC
req_const ("Let", ª:('a ã 'b) ã 'a ã 'bº);
req_defn ("Let",([],ªLet = (ç (f:'a ã 'b) xé f x)º));
=DESCRIBE
$‚Let·$ is the HOL constant used to implement local definitions.
Its definition is bound to the ML variable $let\_def$.
=ENDDOC
=THDOC
req_const ("Cond", ª:BOOL ã 'a ã 'a ã 'aº);
req_defn ("Cond",([],ªCond =
	(ç b (x1:'a) (x2:'a) é
	 á xé ((b Ç T) ä x = x1) Ä ((b Ç F) ä x = x2))º));
=DESCRIBE
$‚Cond·$ is the HOL constant used to implement conditionals.
Its definition is bound to the ML variable $cond\_def$.
=ENDDOC
=THDOC
req_const("icl'TS",ª:BOOL ã BOOLº);
req_defn("icl'TS",([],ªÉ xé icl'TS x Ç xº));
=DESCRIBE
$‚icl'TS·$ is a HOL constant used to implement the subgoal
package
(see, e.g. $goal\_state\_thm$).
It should only be introduced by the user if they are 
fully conversant with its role in the subgoal package.
=ENDDOC
=THDOC
req_alias ("Ç", ª$= : BOOL ã BOOL ã BOOLº);
req_infix (10,"Ç");
req_terminator "Ç";
=DESCRIBE
The alias $‚Ç·$ represents boolean equality, ``if and only if''.
=ENDDOC
=THDOC
req_thm("t_thm",
	([],ªTº));
req_thm("å_thm",
	([],ªÉ té å t Ç t ä Fº));
req_thm("å_1_thm",
	([],ªÉ té å t Ç t Ç Fº));
req_thm("f_thm",
	([],ªå Fº));
req_thm("å_t_thm",
	([],ªå T Ç Fº));
req_thm("å_å_thm",
	([],ªÉ aé å å a Ç aº));
req_thm("å_Å_thm",
	([],ªÉ a bé å (a Å b) Ç å a Ä å bº));
req_thm("å_ä_thm",
	([],ªÉ a bé å (a ä b) Ç a Ä å bº));
req_thm("å_Ç_thm",
	([],ªÉ a bé å (a Ç b) Ç a Ä å b Å b Ä å aº));
req_thm("å_f_thm",
	([],ªå F Ç Tº));
req_thm("å_if_thm",
	([],ªÉ a b cé å (if a then b else c) Ç (if a then å b else å c)º));
req_thm("å_Ä_thm",
	([],ªÉ a bé å (a Ä b) Ç å a Å å bº));
=DESCRIBE
The theorems ``$‚å\_if\-\_thm·$'', ``$‚å\_f\-\_thm·$'', ``$‚å\_Ç\-\_thm·$'',
``$‚å\_ä\-\_thm·$'', ``$‚å\_Ä\-\_thm·$'',
``$‚å\_Å\-\_thm·$'', ``$‚å\_å\-\_thm·$'',
``$‚å\_1\-\_thm·$'', ``$‚å\_t\-\_thm·$'', ``$‚f\-\_thm·$'', ``$‚å\-\_thm·$'' and
``$‚t\-\_thm·$'' are assorted tautologies.
=ENDDOC
=THDOC
req_thm("Å_thm",
	([],ªÉ t1 t2é t1 Å t2 Ç (É bé (t1 ä b) ä (t2 ä b) ä b)º));
req_thm("Ä_thm",
	([],ªÉ t1 t2é t1 Ä t2 Ç (É bé (t1 ä t2 ä b) ä b)º));
req_thm("cond_thm",
	([],ªÉ aé É t1 t2:'aé (if a then t1 else t2) =
	 (á xé ((a Ç T) ä x = t1) Ä ((a Ç F) ä x = t2))º));
req_thm("Ñ%down%1_thm",
	([],ªÉ P:'a ã BOOLé $Ñ%down%1 P Ç (Ñ té P t Ä (É xé P x ä x = t))º));
req_thm("ä_thm",
	([],ªÉ a bé a ä b Ç å a Å bº));
req_thm("Ç_thm",
	([],ªÉ a bé (a Ç b) Ç (a ä b) Ä (b ä a)º));
req_thm("if_thm",
	([],ªÉ a b cé (if a then b else c) Ç a Ä b Å å a Ä cº));
=DESCRIBE
The theorems ``$‚if\-\_thm·$''
``$‚Ç\-\_thm·$'', ``$‚ä\-\_thm·$'', ``$‚Ñ\_1\-\_thm·$'', ``$‚cond\-\_thm·$'',
``$‚Ä\-\_thm·$'', ``$‚å\-\_thm·$'', and ``$‚Å\-\_thm·$''
should be, as far as the user is concerned,
the defining theorems of their primary operators.
However, early definitions in the system require
a simplest form, so these intermediate theorems are required.
=ENDDOC
\subsubsection{Material for Rewriting}
=THDOC
req_thm("eq_rewrite_thm",
	([],ªÉ x:'aé x = x Ç Tº));
req_thm("Ç_rewrite_thm",
	([],ªÉ té ((T Ç t) Ç t) Ä ((t Ç T) Ç t) Ä ((F Ç t) Ç å t) Ä
	 ((t Ç F) Ç å t)º));
req_thm("å_rewrite_thm",
	([],ªÉ té (å å t Ç t) Ä (å T Ç F) Ä (å F Ç T)º));
req_thm("Ä_rewrite_thm",
	([],ªÉ té (T Ä t Ç t) Ä (t Ä T Ç t) Ä å (F Ä t) Ä å (t Ä F) Ä
	 (t Ä t Ç t)º));
req_thm("Å_rewrite_thm",
	([],ªÉ té (T Å t) Ä (t Å T) Ä (F Å t Ç t) Ä (t Å F Ç t) Ä
	 (t Å t Ç t)º));
req_thm("ä_rewrite_thm",
	([],ªÉ té (T ä t Ç t) Ä (F ä t Ç T) Ä (t ä T Ç T) Ä (t ä t Ç T) Ä
	 (t ä F Ç å t)º));
req_thm("if_rewrite_thm",
	([],ªÉ t1 t2:'aé (if T then t1 else t2) = t1 Ä (if F then t1 else t2)
	 = t2º));
req_thm("É_rewrite_thm",
	([],ªÉ té (É x:'aé t) Ç tº));
req_thm("Ñ_rewrite_thm",
	([],ªÉ té (Ñ x:'aé t) Ç tº));
req_thm("%beta%_rewrite_thm",
	([],ªÉ (t1:'a) (t2:'b)é (ç x:'bé t1) t2 = t1º));
=DESCRIBE
The theorems ``$‚\beta\_rewrite\-\_thm·$'', ``$‚Ñ\_\-rewrite\-\_thm·$'', ``$‚É\_\-rewrite\-\_thm·$'',
``$‚if\_\-rewrite\-\_thm·$'', ``$‚ä\_\-rewrite\-\_thm·$'', ``$‚Å\_\-rewrite\-\_thm·$'',
``$‚Ä\_\-rewrite\-\_thm·$'', ``$‚å\_\-rewrite\-\_thm·$'', ``$‚Ç\_\-rewrite\-\_thm·$'',
and ``$‚eq\_\-rewrite\-\_thm·$''

are the ``standard'' rewriting theorems for
their primary operators.
Added to ``misc'' during the creation of structure $Rewriting$.
=ENDDOC
=THDOC
req_thm("type_lemmas_thm",
	([],ªÉ pred:'b ã BOOL é (Ñ f:'a ã 'bé TypeDefn pred f) ä
  (Ñ abs repé (É a:'aé abs (rep a) = a) Ä (É ré pred r Ç rep (abs r) = r))º));
req_thm("one_one_thm",
	([],ªÉ fé OneOne f Ç (É x yé f x = f y Ç x = y)º));
req_thm("ext_thm",
	([],ªÉ f gé f = g Ç (É xé f x = g x)º));
req_thm("fun_rel_thm",
	([],ªÉ ré (Ñ fé É x yé f x = y Ç r x y) Ç
     (É xé Ñ yé r x y Ä (É zé r x z ä z = y))º));
=DESCRIBE
The theorems ``$‚type\_lemmas\-\_thm·$'', ``$‚one\_one\-\-\_thm·$'', ``$‚ext\-\_thm·$'' and ``$‚fun\_rel\-\-\_thm·$''
are miscellaneous theorems saved in ``misc'' during the
creation of structure $PairTheory$.
=ENDDOC
\subsubsection{Material for Constant Specification}
=THDOC
req_const("Consistent",ª:('a ã BOOL) ã BOOLº);
req_defn("Consistent",([],ªÉ p:'a ã BOOL é Consistent p Ç Ñ x é p xº));
=DESCRIBE
The constant $‚Consistent·$ is used to express the fact that
a predicate is satisfiable.
Added to ``misc'' during the creation of structure $ConstantSpecification$.
=ENDDOC
=THDOC
req_const("ConstSpec",ª:('a ã BOOL) ã 'a ã BOOLº);
req_defn("ConstSpec",([],
	ªÉ (p:'a ã BOOL) (c:'a) é 
	ConstSpec p c Ç (Consistent p ä p c)º);
=DESCRIBE
The constant $‚ConstSpec·$ applied to $p$ and $c$ is used to express the fact that
if the predicate $p$ is consistent (see $Consistent$)
then $c$ satisfies the predicate.
Added to ``misc'' during the creation of structure $ConstantSpecification$.
=ENDDOC
=THDOC
req_thm("const_spec_thm",([],
	ªÉ (p:'a ã BOOL) é Ñ x : 'a é ConstSpec p xº));
=DESCRIBE
The theorem ``$‚const\_spec\_thm·$'' expresses the fact that 
there always exists something that satisfies $ConstSpec$ applied to any predicate (whether consistent or not).
Added to ``misc'' during the creation of structure $ConstantSpecification$.
=ENDDOC

Red tape to end theory design.
=THSML
val ‚misc_success· = theory_check_success ();
=TEX
\subsection{The Signature $MiscTheory$}

The signature $MiscTheory$ contains miscellaneous definitions
which are useful in constructing the proof development system.

=DOC
signature ‚MiscTheory· = sig
	val ‚cond_def· : THM
	val ‚let_def· : THM
	val ‚Ñ%down%1_def· : THM
end;
=DESCRIBE
The signature $MiscTheory$ contains the initial definitions for
the theory $misc$. This contains miscellaneous definitions
and theorems required in constructing the proof development
system.
Further items may be saved in theory ``misc'', and bound
to ML variables in other signatures and structures.
=ENDDOC

\newpage

\section{TEST POLICY}
The tests should follow the standards and guidelines
laid down in \cite{DS/FMU/IED/PLN008}.
The theories declared should be checked using the theory design
tools of \cite{DS/FMU/IED/DTD035}.

\twocolumn[\section{INDEX OF DEFINED TERMS}]
\printindex
\end{document}

