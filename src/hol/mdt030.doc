=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{IED 1563}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Module Tests for the Subgoal Package}  %% Mandatory field
\def\TPPheadtitle{Module Tests for the Subgoal Package}
\TPPref{DS/FMU/IED/MDT030}  %% Mandatory field
\def\SCCSversion{$Revision$ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{ML Literate Script}
\TPPkeywords{}
\TPPauthor{K.Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{K.Blackburn & WIN01\\D.J.~King & WIN01}
\TPPauthorisation{R.D.Arthan & Project Manager}
\TPPabstract{A set of module tests are given for the 
the subgoal package.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{Document control}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history} 
\begin{description}
\item [Issue 1.1]
First draft version, works for \cite{DS/FMU/IED/IMP030} version 1.2.
\item [Issue 1.2]
Fixed a \LaTeX fault and a spelling.
\item [Issue 1.3]
Added renaming check.
\end{description}
\subsection{Changes forecast}
\section{GENERAL}
\subsection{Scope}
This document contains the module testing of the Subgoal Package, required by \cite{DS/FMU/IED/DTD030}.
The design is in \cite{DS/FMU/IED/DTD030}
and it is
implemented in \cite{DS/FMU/IED/IMP030}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains the module testing of the material given a design in \cite{DS/FMU/IED/DTD030},
following the test policy given in that document and the general policy given in \cite{DS/FMU/IED/PLN008}.

Much of the testing uses material from \cite{DS/FMU/IED/DTD013},
though this is incapable of testing that the information outputs of the subgoal package are correct.
In addition, it sometimes only tests that the results are as expected by subsequent testing of the subgoal package state,
rather than the immediate outputs of the function tested.

\subsubsection{Dependencies}
This document is derived from the detailed design in \cite{DS/FMU/IED/DTD030},
and is further influenced by the implementation, in  \cite{DS/FMU/IED/IMP030}.
\subsubsection{Deficiencies}
The coverage of the tests, as called for by the test specification, may currently be incomplete.
Not tested messages 30055, 30056.
\section{INITIALISATION}
Get a new theory to work in:
=SML
val start_theory = get_current_theory_name();
new_theory "test_mdt030";
=TEX
Initialise the test package:
=SML
usefile "dtd013.sml";
usefile "imp013.sml";
init_mt_results();
=TEX
\section{VALUE BINDINGS}
=SML
val goal0 : GOAL = ([],»T¼);
val goal1 : GOAL = ([],»x € (ƒ y Ž y = 0)¼);
val goal2 : GOAL = ([»p € q¼,»r € (ƒ s Ž s)¼],»p € s € (ƒ q Ž q = 0)¼);
val sg1_goal2 : GOAL = ([»p € q¼,»r € (ƒ s Ž s)¼],»p:BOOL¼);
val sg2_goal2 : GOAL = ([»p € q¼,»r € (ƒ s Ž s)¼],»s € (ƒ q Ž q = 0)¼);
val goal3 = ([»p € q¼,»r € (ƒ s Ž s)¼],»Œ T¼);
val sg_goal3 = ([»p € q¼,»r € (ƒ s Ž s)¼],»F¼);
val goal4 = ([»p € q¼,»r € (ƒ s Ž s)¼],»T € p¼);
val sg2_goal4 = ([»p € q¼,»r € (ƒ s Ž s)¼],»p:BOOL¼);
val sg1_goal4 = ([»p € q¼,»r € (ƒ s Ž s)¼],»T¼);
val goal5 = ([»p € q¼,»r € (ƒ s Ž s)¼],»p € p € q¼);
val sg1_goal5 = ([»p € q¼,»r € (ƒ s Ž s)¼],»p:BOOL¼);
val sg3_goal5 = ([»p € q¼,»r € (ƒ s Ž s)¼],»q:BOOL¼);
val goal6 = ([»p : BOOL¼],»p € q¼);
val tf_goal6 = »ƒ p q Ž p Š (icl'TS (p € q))¼;
val stf_goal6 = »ƒ p q Ž p Š (p € q)¼;
val tf_goal6_sg1 = »ƒ p Ž p Š (icl'TS p)¼;
val tf_goal6_sg2 = »ƒ p q Ž p Š (icl'TS q)¼;
val stf_goal6_sg1 = »ƒ p Ž p Š p¼;
val stf_goal6_sg2 = »ƒ p q Ž p Š q¼;
val goal7 = ([»(a : '1) = a¼],»((a : BOOL) = a) € T¼);
val gst1 = asm_rule (mk_Š(»(a : '1) = a¼,»icl'TS(((a : BOOL) = a) € T)¼));
val goal8 = ([»(a : '1) = a¼],»„ b : BOOL Ž b = b¼);
=TEX
The following function repeatedly applies a function to void,
until failure.
$repeat$ $drop\_main\_goal$ empites the main goal stack.
=SML
fun repeat x = (x (); repeat x)handle _ => ();
repeat drop_main_goal;
=TEX
\section{THE TESTS}
\subsection{push\_goal}
We test the correct operation by checking that the 
top main goal, top current goal, and goal labelled ``'' are
the goal pushed.
We cannot test message 30001, except by examination of output.
=SML
push_goal goal1;
store_mt_results mt_run [
	("push_goal 1 a",
	top_main_goal,
	(),
	goal1),
	("push_goal 1 b",
	top_goal,
	(),
	goal1)
	];
store_mt_results mt_run [
	("push_goal 1 c",
	top_labelled_goal,
	"",
	goal1)
	];
=TEX
=SML
push_goal goal2;
store_mt_results mt_run [
	("push_goal 2 a",
	top_main_goal,
	(),
	goal2),
	("push_goal 2 b",
	top_goal,
	(),
	goal2)
	];
store_mt_results mt_run [
	("push_goal 2 c",
	top_labelled_goal,
	"",
	goal2)
	];
=TEX
=SML
store_mt_results mt_run_fail [
	("push_goal 30002",
	push_goal,
	([],»1¼),
	gen_fail_msg "push_goal" 30002 ["»1¼"]),
	("push_goal 30003",
	push_goal,
	([»T¼, »1¼, »F¼],»T¼),
	gen_fail_msg "push_goal" 30003 ["»1¼"]),
	("push_goal 30004 a",
	push_goal,
	([»T¼, »T¼],»T¼),
	gen_fail_msg "push_goal" 30004 ["»T¼", "»T¼"]),
	("push_goal 30004 b",
	push_goal,
	([»ƒ x Ž x¼, »ƒ y Žy¼],»T¼),
	gen_fail_msg "push_goal" 30004 ["»ƒ xŽ x¼", "»ƒ yŽ y¼"])
	];
=TEX
\subsection{push\_goal\_state\_thm}
First get a goal state theorem to test:
=SML
push_goal goal2;
a €_tac;
val gst_thm = top_goal_state_thm ();
=TEX
Now try using it:
=SML
push_goal_state_thm gst_thm;
store_mt_results mt_run [
	("push_goal_state_thm a",
	top_main_goal,
	(),
	goal2),
	("push_goal_state_thm b",
	top_goal,
	(),
	sg1_goal2)
	];
store_mt_results mt_run [
	("push_goal_state_thm c",
	top_labelled_goal,
	"1",
	sg1_goal2),
	("push_goal_state_thm c",
	top_labelled_goal,
	"2",
	sg2_goal2)
	];
=TEX
=SML
store_mt_results mt_run_fail [
	("push_goal_state_thm 30005 a",
	push_goal_state_thm,
	t_thm,
	gen_fail_msg "push_goal_state_thm" 30005 []),
	("push_goal_state_thm 30005 b",
	push_goal_state_thm,
	asm_intro mk_t gst_thm,
	gen_fail_msg "push_goal_state_thm" 30005 [])
	];
=TEX
\subsection{a(pply\_tactic)}
We need to test for the labelling if none, one or many subgoals are produced,
as well as the various special cases (duplicates, etc).
Note that $a$ is the alias for $apply\_tactic$.

No subgoals:
=SML
push_goal goal4;
a €_tac;
a strip_tac;
store_mt_results mt_run [
	("apply_tactic 1",
	top_goal,
	(),
	sg2_goal4)
	];
=TEX
One subgoal:
=SML
push_goal goal3;
a strip_tac;
store_mt_results mt_run [
	("apply_tactic 2",
	top_labelled_goal,
	"",
	sg_goal3)
	];
=TEX
Many subgoals:
=SML
push_goal goal2;
a €_tac;
store_mt_results mt_run [
	("apply_tactic 3",
	top_goal,
	(),
	sg1_goal2)
	];
store_mt_results mt_run [
	("apply_tactic 4",
	top_labelled_goal,
	"1",
	sg1_goal2),
	("apply_tactic 5",
	top_labelled_goal,
	"2",
	sg2_goal2)
	];
=TEX
The following checks that distinct free variables with the same names in a pushed goal
causes a suitable failure.
Earlier versions of \cite{DS/FMU/IED/IMP030} would fail unhelpfully when apply tactics to such goals.
=SML
store_mt_results mt_run_fail [(
	"push_goal 30058",
	push_goal,
	goal7,
	gen_fail_msg "push_goal" 30058 ["a"])];
store_mt_results mt_run_fail [(
	("push_goal_state_thm 30058",
	push_goal_state_thm,
	gst1,
	gen_fail_msg "push_goal_state_thm" 30058 ["a"]))];
=TEX
A similar thing occurring in later subgoals is tested by:
=SML
push_goal goal8;
a (simple_„_tac »a:BOOL¼);
store_mt_results mt_run [(
	"apply_tac 6",
	top_labelled_goal,
	"",
	([»(a : '1) = a¼],»(a : BOOL) = a¼))];
a id_tac;
store_mt_results mt_run [(
	"apply_tac 7",
	top_labelled_goal,
	"",
	([»(a : '1) = a¼],»(a : BOOL) = a¼))];
a strip_tac;
store_mt_results mt_run [(
	"apply_tac 8",
	dest_thm o top_thm,
	(),
	goal8)];
=TEX
The following manifest various information messages,
whose presence must be visually checked for.
Most show the use of message 30037.

Message 30006:
=SML
push_goal goal2;
a (fn (asms,gl) => ([goal2,([»p € q¼],»T¼)],fn [thm1,thm2] => 
	prove_asm_rule thm2 thm1
	| _ => t_thm));
=TEX
=SML
push_goal goal2;
a (rewrite_tac[asm_rule »(ƒ q Ž q = 0) ‚ r¼]);
=TEX
Message 30030:
=SML
push_goal goal5;
a €_tac;
set_labelled_goal "2";
a (rewrite_tac [‚_t_intro(asm_rule »p : BOOL¼)]);
=TEX
Message 30032:
=SML
push_goal goal5;
a €_tac;
set_labelled_goal "2";
a €_tac;
=TEX
Message 30033 and 30036:
=SML
push_goal ([],»Œ F¼);
a (fn (asms,gl) => ([goal0],fn [thm1] => 
	f_thm
	| _ => t_thm));
=TEX
Message 30034:
=SML
push_goal goal2;
a id_tac;
=TEX
Message 30035:
=SML
push_goal goal4;
a €_tac;
a strip_tac;
=TEX
Now the errors:
=SML
push_goal goal0;
a strip_tac;
store_mt_results mt_run_fail [
	("apply_tactic 30007",
	a,
	strip_tac,
	gen_fail_msg "apply_tactic" 30007 [])
	];
=TEX
=SML
push_goal(goal2);
store_mt_results mt_run_fail [
	("apply_tactic 30008",
	a,
	(fn (_:GOAL) => ([],fn (_:THM list) => t_thm)) : TACTIC,
	gen_fail_msg "apply_tactic" 30008 [])
	];
=TEX
\subsection{pop\_thm}
=SML
push_goal goal2;
push_goal goal0;
a strip_tac;
store_mt_results mt_run [
	("pop_thm 1",
	dest_thm o pop_thm,
	(),
	goal0)
	];
store_mt_results mt_run [
	("pop_thm 2",
	top_main_goal,
	(),
	goal2)
	];
=TEX
Errors:
=SML
push_goal goal2;
store_mt_results mt_run_fail [
	("pop_thm 30011",
	pop_thm,
	(),
	gen_fail_msg "pop_thm" 30011 [])
	];

repeat drop_main_goal;
store_mt_results mt_run_fail [
	("pop_thm 30010",
	pop_thm,
	(),
	gen_fail_msg "pop_thm" 30010 [])
	];
=TEX
\subsection{top\_thm}
=SML
push_goal goal2;
push_goal goal0;
a strip_tac;
store_mt_results mt_run [
	("top_thm 1",
	dest_thm o top_thm,
	(),
	goal0)
	];
store_mt_results mt_run [
	("top_thm 2",
	top_main_goal,
	(),
	goal0)
	];
=TEX
Errors:
=SML
push_goal goal2;
store_mt_results mt_run_fail [
	("top_thm 30011",
	top_thm,
	(),
	gen_fail_msg "top_thm" 30011 [])
	];

repeat drop_main_goal;
store_mt_results mt_run_fail [
	("top_thm 30010",
	top_thm,
	(),
	gen_fail_msg "top_thm" 30010 [])
	];
=TEX
\subsection{save\_pop\_thm}
=SML
push_goal goal2;
push_goal goal0;
a strip_tac;
store_mt_results mt_run [
	("save_pop_thm 1",
	dest_thm o save_pop_thm,
	"save_pop_thm 1",
	goal0)
	];
store_mt_results mt_run [
	("save_pop_thm 2",
	top_main_goal,
	(),
	goal2)
	];
store_mt_results mt_run [
	("save_pop_thm 3",
	dest_thm o get_thm "-",
	"save_pop_thm 1",
	goal0)
	];
=TEX
Errors:
=SML
push_goal goal2;
store_mt_results mt_run_fail [
	("save_pop_thm 30011",
	save_pop_thm,
	"save_pop_thm 30011",
	gen_fail_msg "save_pop_thm" 30011 [])
	];

repeat drop_main_goal;
store_mt_results mt_run_fail [
	("save_pop_thm 30010",
	save_pop_thm,
	"save_pop_thm 30010",
	gen_fail_msg "save_pop_thm" 30010 [])
	];

push_goal goal0;
a strip_tac;
store_mt_results mt_run_fail [
	("save_pop_thm 6039",
	save_pop_thm,
	"save_pop_thm 1",
	gen_fail_msg "save_pop_thm" 6039 ["save_pop_thm 1","test_mdt030"])
	];
=TEX
\subsection{top\_goal\_state\_thm}
=SML
push_goal goal6;
store_mt_results mt_run [
	("top_goal_state_thm 1",
	dest_thm o top_goal_state_thm,
	(),
	([tf_goal6],tf_goal6))
	];
a €_tac;
store_mt_results mt_run [
	("top_goal_state_thm 2",
	dest_thm o top_goal_state_thm,
	(),
	([tf_goal6_sg1, tf_goal6_sg2],tf_goal6))
	];
=TEX
Informative Message 30038
=SML
push_goal goal0;
a strip_tac;
top_goal_state_thm ();
=TEX
Errors
=SML
repeat drop_main_goal;
store_mt_results mt_run_fail [
	("top_goal_state_thm 30010",
	top_goal_state_thm,
	(),
	gen_fail_msg "top_goal_state_thm" 30010 [])
	];
=TEX
\subsection{simplify\_goal\_state\_thm}
=SML
push_goal goal0;
a strip_tac;
store_mt_results mt_run [
	("top_goal_state_thm 1",
	dest_thm o simplify_goal_state_thm o top_goal_state_thm ,
	(),
	goal0)
	];
push_goal goal6;
a €_tac;
store_mt_results mt_run [
	("simplify_goal_state_thm 2",
	dest_thm o simplify_goal_state_thm o top_goal_state_thm,
	(),
	([stf_goal6_sg1, stf_goal6_sg2, »p:BOOL¼],»p € q¼))
	];
=TEX
Errors:
=SML
store_mt_results mt_run_fail [
	("simplify_goal_state_thm 30005",
	simplify_goal_state_thm,
	t_thm,
	gen_fail_msg "simplify_goal_state_thm" 30005 [])
	];
=TEX
\subsection{drop\_main\_goal}
=SML
push_goal goal2;
push_goal goal3;
push_goal goal4;
store_mt_results mt_run [
	("drop_main_goal 1",
	drop_main_goal,
	(),
	goal4),
	("drop_main_goal 2",
	drop_main_goal,
	(),
	goal3),
	("drop_main_goal 3",
	top_main_goal,
	(),
	goal2)
	];
=TEX
Errors
=SML
repeat drop_main_goal;
store_mt_results mt_run_fail [
	("drop_main_goal 30010",
	drop_main_goal,
	(),
	gen_fail_msg "drop_main_goal" 30010 [])
	];
=TEX
\subsection{undo and redo}
=SML
store_mt_results mt_run_fail [
	("undo 30010",
	undo,
	1,
	gen_fail_msg "undo" 30010 [])
	];
push_goal goal4;
a €_tac;
a strip_tac;
store_mt_results mt_run [
	("undo 1",
	top_goal,
	(),
	sg2_goal4)
	];
undo 1;
store_mt_results mt_run [
	("undo 2",
	top_goal,
	(),
	sg1_goal4)
	];
redo ();
store_mt_results mt_run [
	("redo",
	top_goal,
	(),
	sg2_goal4)
	];
store_mt_results mt_run_fail [
	("undo 30012 a",
	undo,
	5,
	gen_fail_msg "undo" 30012 ["5","s","2","ies"]),
	("undo 30013",
	undo,
	0,
	gen_fail_msg "undo" 30013 [])
	];
undo 1;
store_mt_results mt_run_fail [
	("undo 30012 b",
	undo,
	2,
	gen_fail_msg "undo" 30012 ["2","s","1","y"])
	];
undo 1;
store_mt_results mt_run_fail [
	("undo 30012 c",
	undo,
	1,
	gen_fail_msg "undo" 30012 ["1","","0","ies"])
	];
push_goal goal4;
a €_tac;
store_mt_results mt_run_fail [
	("redo 30014",
	redo,
	(),
	gen_fail_msg "redo" 30014 [])
	];
=TEX
\subsection{set\_labelled\_goal}
=SML
push_goal goal4;
a €_tac;
set_labelled_goal "2";
store_mt_results mt_run [
	("set_labelled_goal",
	top_goal,
	(),
	sg2_goal4)
	];
set_labelled_goal "1";
a strip_tac;
store_mt_results mt_run_fail [
	("set_labelled_goal 30041",
	set_labelled_goal,
	"",
	gen_fail_msg "set_labelled_goal" 30041 [""]),
	("set_labelled_goal 30043",
	set_labelled_goal,
	"1",
	gen_fail_msg "set_labelled_goal" 30043 ["1"]),
	("set_labelled_goal 30017 a",
	set_labelled_goal,
	"1.2",
	gen_fail_msg "set_labelled_goal" 30017 ["1.2"]),
	("set_labelled_goal 30017 b",
	set_labelled_goal,
	"3.4",
	gen_fail_msg "set_labelled_goal" 30017 ["3.4"])
	];
=TEX
\subsection{top\_goal\_state and push\_goal\_state}
=SML
push_goal goal4;
a €_tac;
a strip_tac;
val tgs = top_goal_state();
push_goal goal0;
a strip_tac;
push_goal_state tgs;

store_mt_results mt_run [
	("top_goal_state/push_goal_state",
	top_goal,
	(),
	sg2_goal4)
	];

repeat drop_main_goal;
store_mt_results mt_run_fail [
	("top_goal_state 30010",
	top_goal_state,
	(),
	gen_fail_msg "top_goal_state" 30010 [])
	];
=TEX
\subsection{print\_goal}
We can only inspect the results of this printing:
=SML
print_goal goal1;
print_goal goal2;
=TEX
\subsection{top\_main\_goal}
Successful uses already tested.
=SML
repeat drop_main_goal;
store_mt_results mt_run_fail [
	("top_main_goal 30025",
	top_main_goal,
	(),
	gen_fail_msg "top_main_goal" 30025 [])
	];
=TEX
\subsection{top\_current\_goal}
Succesful uses already tested.
=SML
repeat drop_main_goal;
store_mt_results mt_run_fail [
	("top_goal 30026 a",
	top_goal,
	(),
	gen_fail_msg "top_goal" 30026 [])
	];
push_goal goal0;
a strip_tac;
store_mt_results mt_run_fail [
	("top_goal 30026 b",
	top_goal,
	(),
	gen_fail_msg "top_goal" 30026 [])
	];
=TEX
\subsection{print\_current\_goal}
Successful use can only be checked by eye.
=SML
push_goal goal4;
print_current_goal();
a €_tac;
print_current_goal();

repeat drop_main_goal;
store_mt_results mt_run_fail [
	("print_current_goal 30026 a",
	print_current_goal,
	(),
	gen_fail_msg "print_current_goal" 30026 [])
	];
push_goal goal0;
a strip_tac;
store_mt_results mt_run_fail [
	("print_current_goal 30026 b",
	print_current_goal,
	(),
	gen_fail_msg "print_current_goal" 30026 [])
	];
=TEX
\subsection{top\_labelled\_goal}
Successful uses already tested, except for multi-digit labels:
=SML
push_goal([],»f 1 € f 2 € f 3 € f 4 € f 5 € f 6 € f 7 € f 8 € f 9 € f 10 € f 11 € f 12¼);
a (REPEAT €_tac);
store_mt_results mt_run [ 
	("top_labelled_goal 1",
	top_labelled_goal,
	"12",
	([],»f 12 : BOOL¼))
	];
=TEX
=SML
push_goal goal4;
a €_tac;
a strip_tac;
store_mt_results mt_run_fail [
	("top_labelled_goal 30041",
	top_labelled_goal,
	"",
	gen_fail_msg "top_labelled_goal" 30041 [""]),
	("top_labelled_goal 30043",
	top_labelled_goal,
	"1",
	gen_fail_msg "top_labelled_goal" 30043 ["1"]),
	("top_labelled_goal 30017 a",
	top_labelled_goal,
	"1.2",
	gen_fail_msg "top_labelled_goal" 30017 ["1.2"]),
	("top_labelled_goal 30017 b",
	top_labelled_goal,
	"3.4",
	gen_fail_msg "top_labelled_goal" 30017 ["3.4"])
	];
=TEX
subsection{get\_asm}
=SML
push_goal goal4;
store_mt_results mt_run [
	("get_asm 1",
	get_asm,
	1,
	»p € q¼),
	("get_asm 2",
	get_asm,
	2,
	»r € (ƒ s Ž s)¼)
	];
store_mt_results mt_run_fail [
	("get_asm 30027 a",
	get_asm,
	0,
	gen_fail_msg "get_asm" 30027 ["0"]),
	("get_asm 30027 b",
	get_asm,
	5,
	gen_fail_msg "get_asm" 30027 ["5"])
	];
repeat drop_main_goal;
store_mt_results mt_run_fail [
	("get_asm 30026",
	get_asm,
	1,
	gen_fail_msg "get_asm" 30026 [])
	];
=TEX
\subsection{top\_goals}
=SML
store_mt_results mt_run_fail [
	("top_goals 30010",
	top_goals,
	(),
	gen_fail_msg "top_goals" 30010 [])
	];

push_goal goal4;
a €_tac;
store_mt_results mt_run [
	("top_goals 1",
	top_goals,
	(),
	[(["1"], sg1_goal4), (["2"], sg2_goal4)])
	];
push_goal goal5;
a (REPEAT strip_tac);
store_mt_results mt_run [
	("top_goals 2",
	top_goals,
	(),
	[(["2", "1"], sg1_goal5),(["3"], sg3_goal5)])
	];
=TEX
\subsection{print\_goal\_state}
Results can only be inspected by eye:
=SML
push_goal goal4;
print_goal_state(top_goal_state());
a €_tac;
print_goal_state(top_goal_state());
=TEX
\subsection{modify\_goal\_state\_thm}
First a null-change:
=SML
push_goal goal5;
a(REPEAT strip_tac);
modify_goal_state_thm (Combinators.I) (top_goals());
store_mt_results mt_run [
	("modify_goal_state_thm 1",
	top_goals,
	(),
	[(["1", "2"], sg1_goal5),(["3"], sg3_goal5)])
	];
=TEX
Now a bit of relabelling:
=SML
modify_goal_state_thm (Combinators.I) [];
store_mt_results mt_run [
	("modify_goal_state_thm 2",
	top_goals,
	(),
	[(["2"], sg1_goal5),(["1"], sg3_goal5)])
	];
=TEX
Now some rearrangement (which gives message 30024):
=SML
val s1 = asm_rule »ƒ p Ž icl'TS (p ‚ T)¼;
val s2 = rewrite_rule[icl'ts_thm] s1;
modify_goal_state_thm (strip_Š_rule o 
	pure_rewrite_rule [simple_all_ƒ_elim s2] o all_Š_intro) [];
store_mt_results mt_run [
	("modify_goal_state_thm 3",
	top_goals,
	(),
	[(["3"], ([], »p ‚ T¼)), 
	 (["2"], ([»T € q¼, »r € (ƒ s Ž s)¼], »T¼)),
	 (["1"], ([»T € q¼, »r € (ƒ s Ž s)¼], »q:BOOL¼))])
	];
=TEX
Errors:
=SML
push_goal goal5;
a(REPEAT strip_tac);
store_mt_results mt_run_fail [
	("modify_goal_state_thm 30039",
	modify_goal_state_thm (Combinators.I),
	[(["1"],sg1_goal5), (["1.2"],sg3_goal5)],
	gen_fail_msg "modify_goal_state_thm" 30039 ["1", "1.2"]),
	("modify_goal_state_thm 30040",
	modify_goal_state_thm (Combinators.I),
	[(["1"],sg1_goal5), (["1"],sg3_goal5)],
	gen_fail_msg "modify_goal_state_thm" 30040 ["1"]),
	("modify_goal_state_thm 30051",
	modify_goal_state_thm (fn x => t_thm),
	[(["1"],sg1_goal5), (["2"],sg3_goal5)],
	gen_fail_msg "modify_goal_state_thm" 30051 [" … »T¼"])
	];
=TEX
\section{END OF TESTS}
=SML
summarize_mt_results();
=TEX
Undo theory creation, etc
=SML
(*
open_theory start_theory;
delete_theory "test_mdt030";
*)
(* PolyML.quit(); *)
=TEX
\section{UNTESTED ERROR MESSAGES}
The following are not tested for various reasons:

\begin{tabular}{| l | p{4.5in} |}\hline
Test & Comment \\ \hline
\hline
\end{tabular}
=TEX
\twocolumn[\section{INDEX}]
\small
\printindex
=TEX
\end{document}
