=IGN
********************************************************************************
int003.doc: this file is part of the PPZed system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST Project}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{{\ProductHOL} Regression Tests}  %% Mandatory field
\TPPref{DS/FMU/IED/INT008}  %% Mandatory field
\def\SCCSversion{$Revision: 1.8 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2006/02/08 12:19:26 $%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{}
\TPPauthor{R.D.Arthan & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.Arthan & Project Manager}
\TPPabstract{This document contains various regression tests that are best run on the completely built system rather than as module tests.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History} 
\begin{description}
\item[Issue 1.1]
First drafts with a regression tests for recent work on the global index tables now used in the kernel interface module.
\end{description}
%\subsection{Changes Forecast}
\section{GENERAL}
\subsection{Scope}\label{Scope}
This document provides regression tests for {\ProductHOL}.
\subsection{Introduction}
\subsubsection{Purpose and Background}
This document provides regression tests for {\ProductHOL}.
The tests are all run automatically be the makefile using the module test harness to report results.

\subsubsection{Dependencies}
The usual test harness of \cite{DS/FMU/IED/DTD013,DS/FMU/IED/IMP013} is used.

\subsubsection{Deficiencies}
None known.
\subsubsection{Changes Forecast}
N/A
\section{TEST CASES}
There are currently the following batches of tests
corresponding to the subsections of section~\ref{THETESTS} below.
The test cases may be further subdivided in those subsections.

\begin{description}
\item[Kernel Interface] This tests the consistency of the kernel interface tables set up during system build.
\end{description}

\section{PRELIMINARIES}
=SML
val Ûorig_thysÝ = get_descendants "min";
val Ûclean_upÝ : unit -> unit = (fn () =>
	let	val to_go = get_descendants "min" diff orig_thys;
		fun kill thy = force_delete_theory thy handle Fail _ => ();
	in	app kill to_go
	end
);
use_file "dtd013.sml";
use_file "imp013.sml";
=SML
fun Ûcheck_failÝ f = (f (); false) handle Fail _ => true;
=TEX
\section{THE TESTS}\label{THETESTS}
\subsection{Kernel Interface Tables}
The tests are run using the kernel interface diagnostic function to extract the values of the tables.
The supplied system does not contain any theories that contain constants that would clash with other theories.
The following test cases are done:
\begin{description}
\item[Block 1] Test consistency of constants and types with tables in supplied system.
\item[Block 2] Test behaviour when new constants and types with clashing names are introduced.
\end{description}

\subsubsection{Block 1}
=SML
clean_up();
new_theory"kit.1";
mapfilter new_parent (get_descendants "min");
fun const_chk1 name = (
	let	val thy = get_const_theory name;
	in	name mem map (fst o dest_const) (get_consts thy)
	end
);
val {const_thys, ...} = kernel_interface_diagnostics false;
val const_dicts = map e_flatten const_thys;
val const_names = flat (map (map fst) const_dicts);
val excess_consts = const_names drop const_chk1;
fun const_chk2 c = (
	not (all (map (e_lookup (fst(dest_const c))) const_thys) is_Nil)
);
val cs = flat (map get_consts (get_descendants"min"));
val missing_consts = map (fst o dest_const) (cs drop const_chk2);
fun type_chk1 name = (
	let	val thy = get_type_theory name;
	in	name mem map (fst o dest_ctype) (get_types thy)
	end
);
val {type_thys, ...} = kernel_interface_diagnostics false;
val type_dicts = map e_flatten type_thys;
val type_names = flat (map (map fst) type_dicts);
val excess_types = type_names drop type_chk1;
fun type_chk2 c = (
	not (all (map (e_lookup (fst(dest_ctype c))) type_thys) is_Nil)
);
val ts = flat (map get_types (get_descendants"min"));
val missing_types = map (fst o dest_ctype) (ts drop type_chk2);
=TEX
=SML
store_mt_results
mt_run [
	("kit.1.1", (fn x => x), excess_consts, []),
	("kit.1.2", (fn x => x), missing_consts, []),
	("kit.1.3", (fn x => x), excess_types, []),
	("kit.1.4", (fn x => x), missing_types, [])
];
=TEX
\section{EPILOGUE}
=SML
val _ = diag_line(summarize_mt_results());
=TEX
\end{document}
