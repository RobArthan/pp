=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Module Tests for Derived Terms}  %% Mandatory field
\def\TPPheadtitle{Module Tests for Derived Terms}
\TPPref{DS/FMU/IED/MDT004}  %% Mandatory field
\def\SCCSversion{$Revision$ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{K.Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.Arthan & Project Manager}
\TPPabstract{A set of module tests are given for the derived term functions.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{Document Control}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History} 
\begin{description}
\item [Issue 1.1]
First draft version.
\item [Issue 1.2]
Changed to reflect changes in  issue 1.5 of \cite{DS/FMU/IED/DTD004}.
\item [Issue 1.3]
Changed to reflect changes in  issue 1.6 of \cite{DS/FMU/IED/DTD004}.
\item [Issue 1.4]
Changed to reflect changes in  issue 1.7 of \cite{DS/FMU/IED/IMP004}.
\item [Issue 1.5]
Changed to reflect changes in  issue 1.8 of \cite{DS/FMU/IED/IMP004}.
\item [Issue 1.6]
Changed to reflect changes in  issue 1.9 of \cite{DS/FMU/IED/IMP004}.
\item [Issue 1.7]
Changed to use material from \cite{DS/FMU/IED/DTD013}.
\item [Issue 1.8,1.9]
Changes in response to inspection IR0017.
\item [Issue 1.10]
Renamings of functions containing the name atom $simple$,
and renaming of $aconv$.

\end{description}
%\subsection{Changes forecast}
\section{GENERAL}
\subsection{Scope}
This document contains the module testing of the derived term functions, required by Release 1 ICL HOL Product Requirement Specification \cite{DS/FMU/IED/DEF004}.
The design is in \cite{DS/FMU/IED/DTD004}
and it is
implemented in \cite{DS/FMU/IED/IMP004}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains the module testing of the material given a design in \cite{DS/FMU/IED/DTD004},
following the test policy given in that document and the general policy given in \cite{DS/FMU/IED/PLN008}.

The tests use the test harness of \cite{DS/FMU/IED/DTD013}.
\subsubsection{Dependencies}
This document is derived from the detailed design in \cite{DS/FMU/IED/DTD004},
and is further influenced by the implementation, in  \cite{DS/FMU/IED/IMP004}.
\subsubsection{Deficiencies}
The coverage of the tests, as called for by the test specification, may currently be incomplete.
\section{INITIALISATION}
Initialise the test package:
=SML
usefile "dtd013.sml";
usefile "imp013.sml";
init_mt_results();
=TEX
\section{VALUE BINDINGS}
=SML
val tv1 = mk_vartype "'tv1";
val tv2 = mk_vartype "'tv2";
val tv3 = mk_vartype "'tv3";
val vb = mk_var("vb", BOOL);
val v1 = mk_var("v1", tv1);
val v2 = mk_var("v2", tv2);
val v3 = mk_var("v3", tv3);
val c1 = mk_const("c1",BOOL);
val c2 = mk_const("c2",mk_ctype("triple",[tv1,tv2,tv3]));
val cv1 = mk_const("cv1",tv1);
val v11 = mk_var("v11",BOOL);
val cp1 = mk_const("cp1",mk_â_type(tv1, BOOL));
val cv2 = mk_const("cv2",tv2);
val f = mk_var("f",mk_ã_type(BOOL,BOOL));
=TEX
\section{THE TESTS}
The $?\_binder$, $?\_binop$, etc, functions will be considered
tested by the functions they are used to implement.
\subsection{Boolean Constants}
=SML
store_mt_results mt_run [ 
	("mk_t",
	Combinators.I,
	mk_t,
	mk_const("T",BOOL)),
	("mk_f",
	Combinators.I,
	mk_f,
	mk_const("F",BOOL))
	];
store_mt_results mt_run [ 
	("is_t 1",
	is_t,
	mk_t,
	true),
	("is_t 2",
	is_t,
	mk_f,
	false),
	("is_f 1",
	is_f,
	mk_t,
	false),
	("is_f 2",
	is_f,
	mk_f,
	true)
	];
=TEX
\subsection{Specific Constructor Functions}
\subsubsection{Pairs}
=SML
store_mt_results mt_run [ 
	("mk_â_type",
	mk_â_type,
	(BOOL, Ü),
	mk_ctype("â",[BOOL, Ü]))
	];
store_mt_results mt_run_fail [ 
	("dest_â_type 4018",
	dest_â_type,
	BOOL,
	gen_fail_msg "dest_â_type" 4018 ["ª:BOOLº"])
	];
store_mt_results mt_run [ 
	("dest_â_type",
	dest_â_type o mk_â_type,
	(BOOL, Ü),
	(BOOL, Ü))
	];
store_mt_results mt_run [ 
	("is_â_type",
	is_â_type,
	mk_â_type(BOOL, Ü),
	true),
	("is_â_type",
	is_â_type,
	BOOL,
	false)
	];

store_mt_results mt_run [ 
	("mk_pair",
	mk_pair,
	(c1, c2),
	list_mk_app(mk_const(",",mk_ã_type(type_of c1,mk_ã_type(type_of c2,
		mk_â_type(type_of c1,type_of c2)))),
		[c1,c2]))
	];
store_mt_results mt_run [ 
	("dest_pair",
	dest_pair,
	mk_pair(c1,c2),
	(c1,c2))
	];
store_mt_results mt_run_fail [
	("dest_pair 4003",
	dest_pair,
	c1,
	gen_fail_msg "dest_pair" 4003 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("is_pair 1",
	is_pair,
	c1,
	false),
	("is_pair 2",
	is_pair,
	mk_pair(c1,c2),
	true)
	];
=TEX
\subsubsection{General Abstractions}
=SML
store_mt_results mt_run [ 
	("mk_ç 1",
	mk_ç,
	(v1, c1),
	mk_simple_ç(v1, c1)),
	("mk_ç 2",
	mk_ç,
	(mk_pair(v1,v2), c1),
	mk_app(mk_const("Uncurry",mk_ã_type(mk_ã_type(tv1,mk_ã_type(tv2,BOOL)),
		mk_ã_type(mk_â_type(tv1,tv2),BOOL))),
		list_mk_simple_ç([v1,v2], c1)))
	];
store_mt_results mt_run_fail [
	("mk_ç 4016",
	mk_ç,
	(c1,c1),
	gen_fail_msg "mk_ç" 4016 ["ªc1º"])
	];

store_mt_results mt_run [ 
	("dest_ç 1",
	dest_ç,
	mk_ç(v1, v1),
	(v1, v1)),
	("dest_ç 2",
	dest_ç,
	mk_ç(mk_pair(v1,v2), v1),
	(mk_pair(v1,v2), v1)),
	("dest_ç 3",
	dest_ç,
	mk_ç(mk_pair(mk_pair(v1,v2), mk_pair(v2,v3)), v2),
	(mk_pair(mk_pair(v1,v2), mk_pair(v2,v3)), v2))
	];

store_mt_results mt_run_fail [
	("dest_ç 4002",
	dest_ç,
	c1,
	gen_fail_msg "dest_ç" 4002 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("list_mk_ç",
	list_mk_ç,
	([mk_pair(v1,v2),v3],c1),
	mk_ç (mk_pair(v1,v2),mk_ç(v3,c1)))
	];
store_mt_results mt_run_fail [
	("list_mk_ç 4016",
	list_mk_ç,
	([c1],c1),
	gen_fail_msg "mk_ç" 4016 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("strip_ç",
	strip_ç,
	list_mk_ç([mk_pair(v1,v2),v3],c1),
	([mk_pair(v1,v2),v3],c1))
	];
store_mt_results mt_run [ 
	("is_ç a",
	is_ç,
	list_mk_ç([mk_pair(v1,v2),v3],c1),
	true),
	("is_ç b",
	is_ç,
	mk_simple_ç(v1,v1),
	true),
	("is_ç c",
	is_ç,
	c1,
	false)
	];
=TEX
\subsubsection{Conjunctions}
=SML
store_mt_results mt_run [ 
	("mk_Ä",
	mk_Ä,
	(mk_t,mk_f),
	list_mk_app(mk_const("Ä",mk_ã_type(BOOL,mk_ã_type(BOOL,BOOL))),[mk_t,mk_f]))
	];
store_mt_results mt_run_fail [
	("mk_Ä 3031",
	mk_Ä,
	(c2,mk_f),
	gen_fail_msg "mk_Ä" 3031 ["ªc2º"]),
	("mk_Ä 3015",
	mk_Ä,
	(mk_f,c2),
	gen_fail_msg "mk_Ä" 3015 ["","ªc2º"])
	];
store_mt_results mt_run [ 
	("dest_Ä",
	dest_Ä,
	mk_Ä(mk_t,mk_f),
	(mk_t,mk_f))
	];
store_mt_results mt_run_fail [
	("dest_Ä 4032",
	dest_Ä,
	c1,
	gen_fail_msg "dest_Ä" 4032 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("is_Ä 1",
	is_Ä,
	c1,
	false),
	("is_Ä 2",
	is_Ä,
	mk_Ä(mk_t,mk_f),
	true)
	];
store_mt_results mt_run_fail [
	("list_mk_Ä 3017",
	list_mk_Ä,
	[],
	gen_fail_msg "list_mk_Ä" 3017 []),
	("list_mk_Ä 3031",
	list_mk_Ä,
	[c2, mk_t],
	gen_fail_msg "list_mk_Ä" 3031 ["ªc2º"])
	];
store_mt_results mt_run [ 
	("list_mk_Ä",
	list_mk_Ä,
	[mk_t,mk_f,c1],
	mk_Ä(mk_t,mk_Ä(mk_f,c1)))
	];
store_mt_results mt_run [ 
	("strip_Ä 1",
	strip_Ä,
	c2,
	[c2]),
	("strip_Ä 2",
	strip_Ä,
	list_mk_Ä[mk_t,mk_f,c1],
	[mk_t,mk_f,c1])
	];
=TEX
\subsubsection{Disjunctions}
=SML
store_mt_results mt_run [ 
	("mk_Å",
	mk_Å,
	(mk_t,mk_f),
	list_mk_app(mk_const("Å",mk_ã_type(BOOL,mk_ã_type(BOOL,BOOL))),[mk_t,mk_f]))
	];
store_mt_results mt_run_fail [
	("mk_Å 3031",
	mk_Å,
	(c2,mk_f),
	gen_fail_msg "mk_Å" 3031 ["ªc2º"]),
	("mk_Å 3015",
	mk_Å,
	(mk_f,c2),
	gen_fail_msg "mk_Å" 3015 ["","ªc2º"])
	];
store_mt_results mt_run [ 
	("dest_Å",
	dest_Å,
	mk_Å(mk_t,mk_f),
	(mk_t,mk_f))
	];
store_mt_results mt_run_fail [
	("dest_Å 4027",
	dest_Å,
	c1,
	gen_fail_msg "dest_Å" 4027 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("is_Å 1",
	is_Å,
	c1,
	false),
	("is_Å 2",
	is_Å,
	mk_Å(mk_t,mk_f),
	true)
	];
store_mt_results mt_run_fail [
	("list_mk_Å 3017",
	list_mk_Å,
	[],
	gen_fail_msg "list_mk_Å" 3017 []),
	("list_mk_Å 3031",
	list_mk_Å,
	[c2, mk_t],
	gen_fail_msg "list_mk_Å" 3031 ["ªc2º"])
	];
store_mt_results mt_run [ 
	("list_mk_Å",
	list_mk_Å,
	[mk_t,mk_f,c1],
	mk_Å(mk_t,mk_Å(mk_f,c1)))
	];
store_mt_results mt_run [ 
	("strip_Å 1",
	strip_Å,
	c2,
	[c2]),
	("strip_Å 2",
	strip_Å,
	list_mk_Å[mk_t,mk_f,c1],
	[mk_t,mk_f,c1])
	];
=TEX
\subsubsection{Negations}
=SML
store_mt_results mt_run [ 
	("mk_å",
	mk_å,
	mk_t,
	mk_app(mk_const("å",mk_ã_type(BOOL,BOOL)),mk_t))
	];
store_mt_results mt_run [ 
	("mk_multi_å",
	mk_multi_å,
	(2,mk_t),
	mk_å(mk_å mk_t))
	];
store_mt_results mt_run [ 
	("dest_multi_å a",
	dest_multi_å,
	mk_multi_å(2,mk_t),
	(2,mk_t)),
	("dest_multi_å b",
	dest_multi_å,
	mk_Ü 0,
	(0,mk_Ü 0))
	];
store_mt_results mt_run_fail [
	("mk_å 3031",
	mk_å,
	c2,
	gen_fail_msg "mk_å" 3031 ["ªc2º"])
	];
store_mt_results mt_run [ 
	("dest_å",
	dest_å,
	mk_å mk_t,
	mk_t)
	];
store_mt_results mt_run_fail [
	("dest_å 4029",
	dest_å,
	c1,
	gen_fail_msg "dest_å" 4029 [])
	];
store_mt_results mt_run [ 
	("is_å 1",
	is_å,
	mk_t,
	false),
	("is_å 2",
	is_å,
	mk_å mk_t,
	true)
	];
=TEX
\subsubsection{Bi-implications}
(Notice how the constant name is ``='')
=SML
store_mt_results mt_run [ 
	("mk_Ç",
	mk_Ç,
	(mk_t,mk_f),
	list_mk_app(mk_const("=",mk_ã_type(BOOL,mk_ã_type(BOOL,BOOL))),[mk_t,mk_f]))
	];
store_mt_results mt_run_fail [
	("mk_Ç 3031",
	mk_Ç,
	(c2,mk_f),
	gen_fail_msg "mk_Ç" 3031 ["ªc2º"]),
	("mk_Ç 3015",
	mk_Ç,
	(mk_f,c2),
	gen_fail_msg "mk_Ç" 3015 ["","ªc2º"])
	];
store_mt_results mt_run [ 
	("dest_Ç",
	dest_Ç,
	mk_Ç(mk_t,mk_f),
	(mk_t,mk_f))
	];
store_mt_results mt_run_fail [
	("dest_Ç 4031",
	dest_Ç,
	c1,
	gen_fail_msg "dest_Ç" 4031 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("is_Ç 1",
	is_Ç,
	c1,
	false),
	("is_Ç 2",
	is_Ç,
	mk_Ç(mk_t,mk_f),
	true)
	];
=TEX
\subsubsection{Conditionals}
=SML
store_mt_results mt_run [ 
	("mk_if",
	mk_if,
	(c1,mk_t,mk_f),
	list_mk_app(mk_const("Cond",mk_ã_type(BOOL,mk_ã_type(BOOL,mk_ã_type(BOOL,BOOL)))),
		[c1,mk_t,mk_f]))
	];
store_mt_results mt_run_fail [
	("mk_if 4004",
	mk_if,
	(c2,mk_t,mk_f),
	gen_fail_msg "mk_if" 4004 []),
	("mk_if 4004",
	mk_if,
	(mk_t,mk_t,c2),
	gen_fail_msg "mk_if" 4005 [])
	];
store_mt_results mt_run [ 
	("dest_if",
	dest_if,
	mk_if(c1,mk_t,mk_f),
	(c1,mk_t,mk_f))
	];
store_mt_results mt_run_fail [
	("dest_if 4006",
	dest_if,
	c1,
	gen_fail_msg "dest_if" 4006 ["ªc1º"])
	];

store_mt_results mt_run [ 
	("is_if 1",
	is_if,
	mk_if(c1,mk_t,mk_f),
	true),
	("is_if 1",
	is_if,
	c1,
	false)
	];
=TEX
\subsubsection{let}
=SML
store_mt_results mt_run [ 
	("mk_let 1",
	mk_let,
	([],mk_t),
	mk_t),
	("mk_let 2",
	mk_let,
	([(v1, cv1)],mk_t),
	list_mk_app(mk_const("Let",mk_ã_type(mk_ã_type(tv1,BOOL),mk_ã_type(tv1,BOOL))),
		[mk_ç(v1,mk_t), cv1])),
	("mk_let 3",
	mk_let,
	([(mk_pair(v1, v11), cp1)],mk_t),
	list_mk_app(mk_const("Let",mk_ã_type(
			mk_ã_type(mk_â_type(tv1, BOOL),BOOL),
			mk_ã_type(mk_â_type(tv1, BOOL),BOOL))),
		[mk_ç(mk_pair(v1, v11),mk_t), cp1])),
	("mk_let 4",
	mk_let,
	([(mk_pair(v1, v11), cp1),(v2,cv2)],mk_t),
	list_mk_app(mk_const("Let",mk_ã_type(mk_ã_type(tv2,BOOL),mk_ã_type(tv2,BOOL))),
		[mk_let([(mk_pair(v1, v11), cp1)],mk_ç(v2,mk_t)), cv2])),
	("mk_let 5",
	mk_let,
	([(mk_app(f,v11), mk_t)],mk_f),
	list_mk_app(mk_const("Let",mk_ã_type(
			mk_ã_type(mk_ã_type(BOOL,BOOL),BOOL),
			mk_ã_type(mk_ã_type(BOOL,BOOL),BOOL))),
		[mk_ç(f,mk_f), mk_ç(v11,mk_t)]))
	];

store_mt_results mt_run_fail [
	("mk_let 4007",
	mk_let,
	([(mk_app(f, c1), mk_t)], mk_t),
	gen_fail_msg "mk_let" 4007 ["ªf c1º"]),
	("mk_let 3012",
	mk_let,
	([(f, mk_t)], mk_t),
	gen_fail_msg "mk_let" 3012 ["ªfº","ªTº"])
	];


store_mt_results mt_run [ 
	("dest_let",
	dest_let o mk_let,
	([(mk_pair(v1, v11), cp1),(v2,cv2)],mk_t),
	([(mk_pair(v1, v11), cp1),(v2,cv2)],mk_t))
	];

store_mt_results mt_run_fail [
	("dest_let 4009",
	dest_let,
	c1,
	gen_fail_msg "dest_let" 4009 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("is_let 1",
	is_let,
	c1,
	false),
	("is_let 2",
	is_let,
	mk_let([(mk_pair(v1, v11), cp1),(v2,cv2)],mk_t),
	true)
	];
store_mt_results mt_run [ 
	("list_mk_let",
	list_mk_let,
	([[(v1, cv1)],[(v2, cv2)]], mk_t),
	mk_let([(v1, cv1)],mk_let([(v2, cv2)],mk_t)))
	];
store_mt_results mt_run [ 
	("strip_let",
	strip_let,
	list_mk_let ([[(v1, cv1)],[(v2, cv2)]], mk_t),
	([[(v1, cv1)],[(v2, cv2)]], mk_t))
	];
=TEX
\subsubsection{Enumerated Sets}
=SML
store_mt_results mt_run [
	("mk_§",
	mk_§,
	Ü,
	mk_const("Empty",mk_ctype("SET",[Ü])))
	];

store_mt_results mt_run [ 
	("mk_enum_set",
	mk_enum_set,
	[mk_t],
	list_mk_app(mk_const("Insert",mk_ã_type(BOOL,mk_ã_type(
			mk_ctype("SET",[BOOL]),mk_ctype("SET",[BOOL])))),
		[mk_t,mk_§ BOOL]))
	];
store_mt_results mt_run_fail [
	("mk_enum_set 3017",
	mk_enum_set,
	[],
	gen_fail_msg "mk_enum_set" 3017 []),
	("mk_enum_set 3012",
	mk_enum_set,
	[mk_t,c2],
	gen_fail_msg "mk_enum_set" 3012 ["ªTº","ªc2º"])
	];
store_mt_results mt_run [ 
	("dest_enum_set",
	dest_enum_set,
	mk_enum_set [mk_t, mk_f, c1],
	[mk_t, mk_f, c1])
	];
store_mt_results mt_run_fail [
	("dest_enum_set 4011 a",
	dest_enum_set,
	c1,
	gen_fail_msg "dest_enum_set" 4011 ["ªc1º"]),
	("dest_enum_set 4011 b",
	dest_enum_set,
	list_mk_app(mk_const("Insert",mk_ã_type(BOOL,mk_ã_type(
			mk_ctype("SET",[BOOL]),mk_ctype("SET",[BOOL])))),
		[mk_t,mk_var("v",mk_ctype("SET",[BOOL]))]),
	gen_fail_msg "dest_enum_set" 4011 ["ªInsert T vº"])
	];

store_mt_results mt_run [ 
	("is_enum_set 1",
	is_enum_set,
	mk_enum_set [mk_t, mk_f, c1],
	true),
	("is_enum_set 2",
	is_enum_set,
	mk_t,
	false)
	];
=TEX
\subsubsection{Sets}
=SML
store_mt_results mt_run [ 
	("mk_set_comp 1",
	mk_set_comp,
	(v1, mk_t),
	mk_app(mk_const("SetComp",mk_ã_type(mk_ã_type(tv1,BOOL),mk_ctype("SET",[tv1]))),
		mk_ç(v1,mk_t))),
	("mk_set_comp 2",
	mk_set_comp,
	(mk_pair(v1,v2), mk_t),
	mk_app(mk_const("SetComp",mk_ã_type(mk_ã_type(
			mk_â_type(tv1,tv2),BOOL),
			mk_ctype("SET",[mk_â_type(tv1,tv2)]))),
		mk_ç(mk_pair(v1,v2),mk_t)))
	];
store_mt_results mt_run_fail [
	("mk_set_comp 3015",
	mk_set_comp,
	(v1,v1),
	gen_fail_msg "mk_set_comp" 3015 ["","ªv1º"])
	];
store_mt_results mt_run [ 
	("dest_set_comp",
	dest_set_comp,
	mk_set_comp(mk_pair(v1,v2), mk_t),
	(mk_pair(v1,v2), mk_t))
	];
store_mt_results mt_run_fail [
	("dest_set_comp 4013 a",
	dest_set_comp,
	c1,
	gen_fail_msg "dest_set_comp" 4013 ["ªc1º"]),
	("dest_set_comp 4013 b",
	dest_set_comp,
	mk_app(mk_const("SetComp",mk_ã_type(mk_ã_type(
			mk_â_type(tv1,tv2),BOOL),
			mk_ctype("SET",[mk_â_type(tv1,tv2)]))),
		mk_var("v",mk_ã_type(mk_â_type(tv1,tv2),BOOL))),
	gen_fail_msg "dest_set_comp" 4013 ["ªSetComp vº"])
	];
store_mt_results mt_run [ 
	("is_set_comp 1",
	is_set_comp,
	mk_t,
	false),
	("is_set_comp 2",
	is_set_comp,
	mk_set_comp(mk_pair(v1,v2), mk_t),
	true)
	];
=TEX
\subsubsection{Lists}
=SML
store_mt_results mt_run [ 
	("mk_empty_list",
	mk_empty_list,
	Ü,
	mk_const("Nil",mk_ctype("LIST",[Ü])))
	];

store_mt_results mt_run [ 
	("mk_list",
	mk_list,
	[mk_t],
	list_mk_app(mk_const("Cons",mk_ã_type(BOOL,mk_ã_type(
			mk_ctype("LIST",[BOOL]),mk_ctype("LIST",[BOOL])))),
		[mk_t,mk_empty_list BOOL]))
	];
store_mt_results mt_run_fail [
	("mk_list 3017",
	mk_list,
	[],
	gen_fail_msg "mk_list" 3017 []),
	("mk_list 3012",
	mk_list,
	[mk_t,c2],
	gen_fail_msg "mk_list" 3012 ["ªTº","ªc2º"])
	];
store_mt_results mt_run [ 
	("dest_list",
	dest_list,
	mk_list [mk_t, mk_f, c1],
	[mk_t, mk_f, c1])
	];
store_mt_results mt_run_fail [
	("dest_list 4015 a",
	dest_list,
	c1,
	gen_fail_msg "dest_list" 4015 ["ªc1º"]),
	("dest_list 4015 b",
	dest_list,
	list_mk_app(mk_const("Cons",mk_ã_type(BOOL,mk_ã_type(
			mk_ctype("LIST",[BOOL]),mk_ctype("LIST",[BOOL])))),
		[mk_t,mk_var("v",mk_ctype("LIST",[BOOL]))]),
	gen_fail_msg "dest_list" 4015 ["ªCons T vº"])
	];

store_mt_results mt_run [ 
	("is_list 1",
	is_list,
	mk_list [mk_t, mk_f, c1],
	true),
	("is_list 2",
	is_list,
	mk_t,
	false)
	];
=TEX
\subsubsection{Full Universals}
=SML
store_mt_results mt_run [ 
	("mk_É 1",
	mk_É,
	(v1, mk_t),
	mk_app(mk_const("É",mk_ã_type(mk_ã_type(tv1,BOOL),BOOL)),
		mk_ç(v1,mk_t))),
	("mk_É 2",
	mk_É,
	(mk_pair(v1,v2), mk_t),
	mk_app(mk_const("É",mk_ã_type(mk_ã_type(
			mk_â_type(tv1,tv2),BOOL),
			BOOL)),
		mk_ç(mk_pair(v1,v2),mk_t)))
	];
store_mt_results mt_run_fail [
	("mk_É 3015",
	mk_É,
	(v1,v1),
	gen_fail_msg "mk_É" 3015 ["","ªv1º"]),
	("mk_É 4016",
	mk_É,
	(c1,v1),
	gen_fail_msg "mk_É" 4016 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("dest_É",
	dest_É,
	mk_É(mk_pair(v1,v2), mk_t),
	(mk_pair(v1,v2), mk_t))
	];
store_mt_results mt_run_fail [
	("dest_É 4017",
	dest_É,
	c1,
	gen_fail_msg "dest_É" 4017 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("is_É 1",
	is_É,
	mk_t,
	false),
	("is_É 2",
	is_É,
	mk_É(mk_pair(v1,v2), mk_t),
	true)
	];
store_mt_results mt_run [ 
	("list_mk_É 1",
	list_mk_É,
	([],mk_t),
	mk_t),
	("list_mk_É 2",
	list_mk_É,
	([v1,v2],mk_t),
	mk_É(v1,mk_É(v2,mk_t)))
	];
store_mt_results mt_run_fail [
	("list_mk_É 3015",
	list_mk_É,
	([v1],c2),
	gen_fail_msg "mk_É" 3015 ["","ªc2º"]),
	("list_mk_É 4016",
	list_mk_É,
	([c1],mk_t),
	gen_fail_msg "mk_É" 4016 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("strip_É 1",
	strip_É,
	mk_t,
	([],mk_t)),
	("strip_É 2",
	strip_É,
	list_mk_É([v1,mk_pair(v2,v11)],mk_t),
	([v1,mk_pair(v2,v11)],mk_t))
	];
store_mt_results mt_run [ 
	("strip_simple_É 1",
	strip_simple_É,
	mk_t,
	([],mk_t)),
	("strip_simple_É 2",
	strip_simple_É,
	list_mk_É([v1,mk_pair(v2,v11)],mk_t),
	([v1],mk_É(mk_pair(v2,v11),mk_t)))
	];
=TEX
\subsubsection{Full Existentials}
=SML
store_mt_results mt_run [ 
	("mk_Ñ 1",
	mk_Ñ,
	(v1, mk_t),
	mk_app(mk_const("Ñ",mk_ã_type(mk_ã_type(tv1,BOOL),BOOL)),
		mk_ç(v1,mk_t))),
	("mk_Ñ 2",
	mk_Ñ,
	(mk_pair(v1,v2), mk_t),
	mk_app(mk_const("Ñ",mk_ã_type(mk_ã_type(
			mk_â_type(tv1,tv2),BOOL),
			BOOL)),
		mk_ç(mk_pair(v1,v2),mk_t)))
	];
store_mt_results mt_run_fail [
	("mk_Ñ 3015",
	mk_Ñ,
	(v1,v1),
	gen_fail_msg "mk_Ñ" 3015 ["","ªv1º"]),
	("mk_Ñ 4016",
	mk_Ñ,
	(c1,v1),
	gen_fail_msg "mk_Ñ" 4016 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("dest_Ñ",
	dest_Ñ,
	mk_Ñ(mk_pair(v1,v2), mk_t),
	(mk_pair(v1,v2), mk_t))
	];
store_mt_results mt_run_fail [
	("dest_Ñ 4020",
	dest_Ñ,
	c1,
	gen_fail_msg "dest_Ñ" 4020 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("is_Ñ 1",
	is_Ñ,
	mk_t,
	false),
	("is_Ñ 2",
	is_Ñ,
	mk_Ñ(mk_pair(v1,v2), mk_t),
	true)
	];
store_mt_results mt_run [ 
	("list_mk_Ñ 1",
	list_mk_Ñ,
	([],mk_t),
	mk_t),
	("list_mk_Ñ 2",
	list_mk_Ñ,
	([v1,v2],mk_t),
	mk_Ñ(v1,mk_Ñ(v2,mk_t)))
	];
store_mt_results mt_run_fail [
	("list_mk_Ñ 3015",
	list_mk_Ñ,
	([v1],c2),
	gen_fail_msg "mk_Ñ" 3015 ["","ªc2º"]),
	("list_mk_Ñ 4016",
	list_mk_Ñ,
	([c1],c2),
	gen_fail_msg "mk_Ñ" 4016 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("strip_Ñ 1",
	strip_Ñ,
	mk_t,
	([],mk_t)),
	("strip_Ñ 2",
	strip_Ñ,
	list_mk_Ñ([v1,mk_pair(v2,v11)],mk_t),
	([v1,mk_pair(v2,v11)],mk_t))
	];
store_mt_results mt_run [ 
	("strip_simple_Ñ 1",
	strip_simple_Ñ,
	mk_t,
	([],mk_t)),
	("strip_simple_Ñ 2",
	strip_simple_Ñ,
	list_mk_Ñ([v1,mk_pair(v2,v11)],mk_t),
	([v1],mk_Ñ(mk_pair(v2,v11),mk_t)))
	];
=TEX
\subsubsection{Full Existentials}
=SML
store_mt_results mt_run [ 
	("mk_Ñ 1",
	mk_Ñ,
	(v1, mk_t),
	mk_app(mk_const("Ñ",mk_ã_type(mk_ã_type(tv1,BOOL),BOOL)),
		mk_ç(v1,mk_t))),
	("mk_Ñ 2",
	mk_Ñ,
	(mk_pair(v1,v2), mk_t),
	mk_app(mk_const("Ñ",mk_ã_type(mk_ã_type(
			mk_â_type(tv1,tv2),BOOL),
			BOOL)),
		mk_ç(mk_pair(v1,v2),mk_t)))
	];
store_mt_results mt_run_fail [
	("mk_Ñ 3015",
	mk_Ñ,
	(v1,v1),
	gen_fail_msg "mk_Ñ" 3015 ["","ªv1º"]),
	("mk_Ñ 4016",
	mk_Ñ,
	(c1,v1),
	gen_fail_msg "mk_Ñ" 4016 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("dest_Ñ",
	dest_Ñ,
	mk_Ñ(mk_pair(v1,v2), mk_t),
	(mk_pair(v1,v2), mk_t))
	];
store_mt_results mt_run_fail [
	("dest_Ñ 4020",
	dest_Ñ,
	c1,
	gen_fail_msg "dest_Ñ" 4020 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("is_Ñ 1",
	is_Ñ,
	mk_t,
	false),
	("is_Ñ 2",
	is_Ñ,
	mk_Ñ(mk_pair(v1,v2), mk_t),
	true)
	];
store_mt_results mt_run [ 
	("list_mk_Ñ 1",
	list_mk_Ñ,
	([],mk_t),
	mk_t),
	("list_mk_Ñ 2",
	list_mk_Ñ,
	([v1,v2],mk_t),
	mk_Ñ(v1,mk_Ñ(v2,mk_t)))
	];
store_mt_results mt_run_fail [
	("list_mk_Ñ 3015",
	list_mk_Ñ,
	([v1],c2),
	gen_fail_msg "mk_Ñ" 3015 ["","ªc2º"]),
	("list_mk_Ñ 4016",
	list_mk_Ñ,
	([c1],c2),
	gen_fail_msg "mk_Ñ" 4016 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("strip_Ñ 1",
	strip_Ñ,
	mk_t,
	([],mk_t)),
	("strip_Ñ 2",
	strip_Ñ,
	list_mk_Ñ([v1,mk_pair(v2,v11)],mk_t),
	([v1,mk_pair(v2,v11)],mk_t))
	];
store_mt_results mt_run [ 
	("strip_simple_Ñ 1",
	strip_simple_Ñ,
	mk_t,
	([],mk_t)),
	("strip_simple_Ñ 2",
	strip_simple_Ñ,
	list_mk_Ñ([v1,mk_pair(v2,v11)],mk_t),
	([v1],mk_Ñ(mk_pair(v2,v11),mk_t)))
	];
=TEX
\subsubsection{Simple Unique Existentials}
=SML
store_mt_results mt_run [ 
	("mk_simple_Ñ%down%1 1",
	mk_simple_Ñ%down%1,
	(v1, mk_t),
	mk_app(mk_const("Ñ%down%1",mk_ã_type(mk_ã_type(tv1,BOOL),BOOL)),
		mk_ç(v1,mk_t)))
	];
store_mt_results mt_run_fail [
	("mk_simple_Ñ%down%1 3015",
	mk_simple_Ñ%down%1,
	(v1,v1),
	gen_fail_msg "mk_simple_Ñ%down%1" 3015 ["","ªv1º"]),
	("mk_simple_Ñ%down%1 3007 a",
	mk_simple_Ñ%down%1,
	(c1,v1),
	gen_fail_msg "mk_simple_Ñ%down%1" 3007 ["ªc1º"]),
	("mk_simple_Ñ%down%1 3007 b",
	mk_simple_Ñ%down%1,
	(mk_pair(v1,v2),mk_t),
	gen_fail_msg "mk_simple_Ñ%down%1" 3007 ["ª(v1, v2)º"])
	];
store_mt_results mt_run [ 
	("dest_simple_Ñ%down%1",
	dest_simple_Ñ%down%1,
	mk_simple_Ñ%down%1(v1, mk_t),
	(v1, mk_t))
	];
store_mt_results mt_run_fail [
	("dest_simple_Ñ%down%1 4019",
	dest_simple_Ñ%down%1,
	c1,
	gen_fail_msg "dest_simple_Ñ%down%1" 4019 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("is_simple_Ñ%down%1 1",
	is_simple_Ñ%down%1,
	mk_t,
	false),
	("is_simple_Ñ%down%1 2",
	is_simple_Ñ%down%1,
	mk_simple_Ñ%down%1(v1, mk_t),
	true)
	];
=TEX
\subsubsection{Full Unique Existentials}
=SML
store_mt_results mt_run [ 
	("mk_Ñ%down%1 1",
	mk_Ñ%down%1,
	(v1, mk_t),
	mk_app(mk_const("Ñ%down%1",mk_ã_type(mk_ã_type(tv1,BOOL),BOOL)),
		mk_ç(v1,mk_t))),
	("mk_Ñ%down%1 2",
	mk_Ñ%down%1,
	(mk_pair(v1,v2), mk_t),
	mk_app(mk_const("Ñ%down%1",mk_ã_type(mk_ã_type(
			mk_â_type(tv1,tv2),BOOL),
			BOOL)),
		mk_ç(mk_pair(v1,v2),mk_t)))
	];
store_mt_results mt_run_fail [
	("mk_Ñ%down%1 3015",
	mk_Ñ%down%1,
	(v1,v1),
	gen_fail_msg "mk_Ñ%down%1" 3015 ["","ªv1º"]),
	("mk_Ñ%down%1 4016",
	mk_Ñ%down%1,
	(c1,v1),
	gen_fail_msg "mk_Ñ%down%1" 4016 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("dest_Ñ%down%1",
	dest_Ñ%down%1,
	mk_Ñ%down%1(mk_pair(v1,v2), mk_t),
	(mk_pair(v1,v2), mk_t))
	];
store_mt_results mt_run_fail [
	("dest_Ñ%down%1 4021",
	dest_Ñ%down%1,
	c1,
	gen_fail_msg "dest_Ñ%down%1" 4021 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("is_Ñ%down%1 1",
	is_Ñ%down%1,
	mk_t,
	false),
	("is_Ñ%down%1 2",
	is_Ñ%down%1,
	mk_Ñ%down%1(mk_pair(v1,v2), mk_t),
	true)
	];
=TEX
\subsubsection{Full Choice}
=SML
store_mt_results mt_run [ 
	("mk_á 1",
	mk_á,
	(v1, mk_t),
	mk_app(mk_const("á",mk_ã_type(mk_ã_type(tv1,BOOL),tv1)),
		mk_ç(v1,mk_t))),
	("mk_á 2",
	mk_á,
	(mk_pair(v1,v2), mk_t),
	mk_app(mk_const("á",mk_ã_type(mk_ã_type(
			mk_â_type(tv1,tv2),BOOL),
			mk_â_type(tv1,tv2))),
		mk_ç(mk_pair(v1,v2),mk_t)))
	];
store_mt_results mt_run_fail [
	("mk_á 3015",
	mk_á,
	(v1,v1),
	gen_fail_msg "mk_á" 3015 ["","ªv1º"]),
	("mk_á 4016",
	mk_á,
	(c1,v1),
	gen_fail_msg "mk_á" 4016 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("dest_á",
	dest_á,
	mk_á(mk_pair(v1,v2), mk_t),
	(mk_pair(v1,v2), mk_t))
	];
store_mt_results mt_run_fail [
	("dest_á 4023",
	dest_á,
	c1,
	gen_fail_msg "dest_á" 4023 ["ªc1º"])
	];
store_mt_results mt_run [ 
	("is_á 1",
	is_á,
	mk_t,
	false),
	("is_á 2",
	is_á,
	mk_á(mk_pair(v1,v2), mk_t),
	true)
	];
store_mt_results mt_run [ 
	("list_mk_á 1",
	list_mk_á,
	([],mk_t),
	mk_t),
	("list_mk_á 2",
	list_mk_á,
	([v1,mk_var("v",BOOL)],mk_t),
	mk_á(v1,mk_á(mk_var("v",BOOL),mk_t)))
	];
store_mt_results mt_run_fail [
	("list_mk_á 3015 a",
	list_mk_á,
	([v1],c2),
	gen_fail_msg "mk_á" 3015 ["","ªc2º"]),
	("list_mk_á 4016",
	list_mk_á,
	([c1],c1),
	gen_fail_msg "mk_á" 4016 ["ªc1º"]),
	("list_mk_á 3015 b",
	list_mk_á,
	([v1,v2],c1),
	gen_fail_msg "mk_á" 3015 ["","ªá v2é c1º"])
	];
store_mt_results mt_run [ 
	("strip_á 1",
	strip_á,
	mk_t,
	([],mk_t)),
	("strip_á 2",
	strip_á,
	list_mk_á([mk_pair(v2,v11),mk_var("v",BOOL)],mk_t),
	([mk_pair(v2,v11),mk_var("v",BOOL)],mk_t))
	];
=TEX
\subsection{Destroyed Terms}
=SML
store_mt_results mt_run [ 
	("dest_term 1",
	dest_term,
	mk_var ("v2",BOOL),
	DVar ("v2",BOOL)),
	("dest_term 2",
	dest_term,
	mk_const ("c2",BOOL),
	DConst ("c2",BOOL)),
	("dest_term 3",
	dest_term,
	mk_app (f,c1),
	DApp (f,c1)),
	("dest_term 4",
	dest_term,
	mk_ç (f,c1),
	Dç (f,c1)),
	("dest_term 5",
	dest_term,
	mk_ç (mk_pair(v1,v2),c1),
	Dç (mk_pair(v1,v2),c1)),
	("dest_term 6",
	dest_term,
	mk_eq (mk_Ü 1,mk_Ü 1),
	DEq(mk_Ü 1,mk_Ü 1)),
	("dest_term 6.1",
	dest_term,
	mk_ä (mk_t,mk_f),
	Dä(mk_t,mk_f)),
	("dest_term 6.2",
	dest_term,
	mk_å mk_t,
	Då mk_t),
	("dest_term 7",
	dest_term,
	mk_pair(v1,v2),
	DPair(v1,v2)),
	("dest_term 8",
	dest_term,
	mk_Ä (mk_t,c1),
	DÄ(mk_t,c1)),
	("dest_term 9",
	dest_term,
	mk_Å (mk_t,c1),
	DÅ(mk_t,c1)),
	("dest_term 10",
	dest_term,
	mk_Ç (mk_t,c1),
	DÇ(mk_t,c1)),
	("dest_term 11",
	dest_term,
	mk_eq (mk_t,c1),
	DÇ(mk_t,c1)),
	("dest_term 12",
	dest_term,
	mk_let([(mk_pair(v1, v11), cp1),(v2,cv2)],mk_t),
	DLet([(mk_pair(v1, v11), cp1),(v2,cv2)],mk_t)),
	("dest_term 13 a",
	dest_term,
	mk_enum_set [mk_t,mk_f,c1],
	DEnumSet [mk_t,mk_f,c1]),
	("dest_term 13 b",
	dest_term,
	mk_§ BOOL,
	D§ BOOL),
	("dest_term 14",
	dest_term,
	mk_set_comp(mk_pair(v1,v2), mk_t),
	DSetComp (mk_pair(v1,v2), mk_t)),
	("dest_term 15",
	dest_term,
	mk_list [mk_t,mk_f,c1],
	DList [mk_t,mk_f,c1]),
	("dest_term 16 a",
	dest_term,
	mk_list [mk_t,mk_f,c1],
	DList [mk_t,mk_f,c1]),
	("dest_term 16 b",
	dest_term,
	mk_empty_list BOOL,
	DEmptyList BOOL),
	("dest_term 17",
	dest_term,
	mk_É (mk_pair(v1,mk_pair(v2,v11)),mk_t),
	DÉ(mk_pair(v1,mk_pair(v2,v11)),mk_t)),
	("dest_term 18",
	dest_term,
	mk_Ñ (mk_pair(v1,mk_pair(v2,v11)),mk_t),
	DÑ(mk_pair(v1,mk_pair(v2,v11)),mk_t)),
	("dest_term 19",
	dest_term,
	mk_á (mk_pair(v1,mk_pair(v2,v11)),mk_t),
	Dá(mk_pair(v1,mk_pair(v2,v11)),mk_t)),
	("dest_term 20",
	dest_term,
	mk_if (mk_t,mk_Ü 1,mk_Ü 2),
	DIf(mk_t,mk_Ü 1,mk_Ü 2)),
	("dest_term 21",
	dest_term,
	list_mk_app (mk_const("g",mk_ã_type(BOOL,mk_ã_type(Ü,mk_ã_type(Ü,BOOL)))),
		[mk_t,mk_Ü 1,mk_Ü 2]),
	DApp(list_mk_app (mk_const("g",mk_ã_type(BOOL,mk_ã_type(Ü,mk_ã_type(Ü,BOOL)))),
		[mk_t,mk_Ü 1]),mk_Ü 2)),
	("dest_term 22",
	dest_term,
	mk_t,
	DT),
	("dest_term 23",
	dest_term,
	mk_f,
	DF),
	("dest_term 25",
	dest_term,
	mk_Ñ%down%1(vb,vb),
	DÑ%down%1(vb,vb))
	];

store_mt_results mt_run [
	("mk_term 1",
	mk_term o dest_term,
	mk_var ("v2",BOOL),
	mk_var ("v2",BOOL)),
	("mk_term 2",
	mk_term o dest_term,
	mk_const ("c2",BOOL),
	mk_const ("c2",BOOL)),
	("mk_term 3",
	mk_term o dest_term,
	mk_app (f,c1),
	mk_app (f,c1)),
	("mk_term 4",
	mk_term o dest_term,
	mk_ç (f,c1),
	mk_ç (f,c1)),
	("mk_term 5",
	mk_term o dest_term,
	mk_ç (mk_pair(v1,v2),c1),
	mk_ç (mk_pair(v1,v2),c1)),
	("mk_term 6",
	mk_term o dest_term,
	mk_eq (mk_Ü 1,mk_Ü 1),
	mk_eq(mk_Ü 1,mk_Ü 1)),
	("mk_term 6.1",
	mk_term o dest_term,
	mk_ä (mk_t,mk_f),
	mk_ä (mk_t,mk_f)),
	("mk_term 6.2",
	mk_term o dest_term,
	mk_å mk_t,
	mk_å mk_t),
	("mk_term 7",
	mk_term o dest_term,
	mk_pair(v1,v2),
	mk_pair(v1,v2)),
	("mk_term 8",
	mk_term o dest_term,
	mk_Ä (mk_t,c1),
	mk_Ä(mk_t,c1)),
	("mk_term 9",
	mk_term o dest_term,
	mk_Å (mk_t,c1),
	mk_Å(mk_t,c1)),
	("mk_term 10",
	mk_term o dest_term,
	mk_Ç (mk_t,c1),
	mk_Ç(mk_t,c1)),
	("mk_term 11",
	mk_term o dest_term,
	mk_eq (mk_t,c1),
	mk_Ç(mk_t,c1)),
	("mk_term 12",
	mk_term o dest_term,
	mk_let([(mk_pair(v1, v11), cp1),(v2,cv2)],mk_t),
	mk_let([(mk_pair(v1, v11), cp1),(v2,cv2)],mk_t)),
	("mk_term 13 a",
	mk_term o dest_term,
	mk_enum_set [mk_t,mk_f,c1],
	mk_enum_set [mk_t,mk_f,c1]),
	("mk_term 13 b",
	mk_term o dest_term,
	mk_§ BOOL,
	mk_§ BOOL),
	("mk_term 14",
	mk_term o dest_term,
	mk_set_comp(mk_pair(v1,v2), mk_t),
	mk_set_comp (mk_pair(v1,v2), mk_t)),
	("mk_term 15",
	mk_term o dest_term,
	mk_list [mk_t,mk_f,c1],
	mk_list [mk_t,mk_f,c1]),
	("mk_term 16 a",
	mk_term o dest_term,
	mk_list [mk_t,mk_f,c1],
	mk_list [mk_t,mk_f,c1]),
	("mk_term 16 b",
	mk_term o dest_term,
	mk_empty_list BOOL,
	mk_empty_list BOOL),
	("mk_term 17",
	mk_term o dest_term,
	mk_É (mk_pair(v1,mk_pair(v2,v11)),mk_t),
	mk_É(mk_pair(v1,mk_pair(v2,v11)),mk_t)),
	("mk_term 18",
	mk_term o dest_term,
	mk_Ñ (mk_pair(v1,mk_pair(v2,v11)),mk_t),
	mk_Ñ(mk_pair(v1,mk_pair(v2,v11)),mk_t)),
	("mk_term 19",
	mk_term o dest_term,
	mk_á (mk_pair(v1,mk_pair(v2,v11)),mk_t),
	mk_á(mk_pair(v1,mk_pair(v2,v11)),mk_t)),
	("mk_term 20",
	mk_term o dest_term,
	mk_if (mk_t,mk_Ü 1,mk_Ü 2),
	mk_if(mk_t,mk_Ü 1,mk_Ü 2)),
	("mk_term 21",
	mk_term o dest_term,
	list_mk_app (mk_const("g",mk_ã_type(BOOL,mk_ã_type(Ü,mk_ã_type(Ü,BOOL)))),
		[mk_t,mk_Ü 1,mk_Ü 2]),
	list_mk_app (mk_const("g",mk_ã_type(BOOL,mk_ã_type(Ü,mk_ã_type(Ü,BOOL)))),
		[mk_t,mk_Ü 1,mk_Ü 2])),
	("mk_term 22",
	mk_term o dest_term,
	mk_t,
	mk_t),
	("mk_term 23",
	mk_term o dest_term,
	mk_f,
	mk_f),
	("mk_term 24",
	mk_term o dest_term,
	mk_Ñ%down%1(vb,vb),
	mk_Ñ%down%1(vb,vb))
	];
=TEX
\subsection{End of Tests}
=SML
summarize_mt_results();
(* PolyML.quit(); *)
=TEX
\end{document}
