e
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design of Computational Conversions}  %% Mandatory field
\TPPref{DS/FMU/IED/DTD057}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}  %% Mandatory field (with sensible default)
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{R.D.~Arthan & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.B.Jones & HAT Team Leader}
\TPPabstract{This document contains the detailed design of conversions
which perform computations on the various sorts of literal.
To assist in coding more advanced routines for handling arithmetic
derived syntax functions are also defined for the arithmetic operators.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item [Issue 1.4\ (\FormatDate{91/10/16%
})]
First drafts.
\item [Issue 1.5 (26th March 1992)]
Changed to use proof context material of issue 1.13 of \cite{DS/FMU/IED/DTD051}.
\item [Issue 1.6 (18th May 1992)]
Changed proof context material.
\end{description}
\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document is the detailed design for part of the ICL HOL system.
It is called for in the high-level design document \cite{DS/FMU/IED/HLD012}.
\subsection{Introduction}
\subsubsection{Purpose and Background}
In order to prove general facts of arithmetic or to prove numerical
properties of objects in applied theories, one frequently need to
prove computational results. Even trivial results like $2 * 3 = 6$
have been quite time-consuming to prove in earlier versions of HOL.

The intention of the material in the present document is to define
conversions which will compute the results of applying the standard
operators to literals. These conversions are all founded on the
built-in conversion $plus\_conv$ which acts as an oracle for theorems
of the form $a + b = c$, where $a$, $b$ and $c$ are numeric literals
and on the built-in conversions $char\_conv$ and $string\_conv$ which
act as definition schemata for the character and string literals.
(Note that for strings and characters the only ``standard operator''
currently provided is equality.)

\subsubsection{Dependencies}
This document depends on the theory and proof procedures defined
in \cite{DS/FMU/IED/DTD038,DS/FMU/IED/IMP038} and on the proof context defined
in \cite{DS/FMU/IED/DTD029,DS/FMU/IED/IMP029}.
\subsubsection{Possible Enhancements}
\subsubsection{Deficiencies}
\section{PROLOGUE}
=DOC
signature	ÛCompConvÝ = sig
=DESCRIBE
This is the signature of the structure $CompConv$ which contains
conversions for performing computations on numeric, string and character
literals and derived syntax functions for the arithmetic operations.

=ENDDOC
\section{NATURAL NUMBERS}
=DOC
	val Û¼_convÝ		: CONV		(* ¼ *)
	val Û¾_convÝ		: CONV		(* ¾ *)
	val Ûdiv_convÝ		: CONV		(* Div *)
	val Ûgreater_convÝ	: CONV		(* > *)
	val Ûless_convÝ		: CONV		(* < *)
	val Ûminus_convÝ	: CONV		(* - *)
	val Ûmod_convÝ	: CONV		(* Mod *)
	val Ûplus_convÝ	: CONV		(* + *)
	val Ûtimes_convÝ	: CONV		(* * *)
=DESCRIBE
These conversions prove theorems of the form:
=GFT
	ô i op j = k
=TEX
Where $¬i®$, $¬j®$ and $¬k®$ are numeric literals and where $op$ is one of
the standard arithmetic operators as indicated in the comments above.

(Note that $plus\_conv$ is the same as the built-in rule
$plus\_conv$ described in \cite{DS/FMU/IED/DTD009}).
=FAILURE
57001	?0 is not of the form: ¬‘mk_î m® ¼ ‘mk_î n®®
57002	?0 is not of the form: ¬‘mk_î m® ¾ ‘mk_î n®®
57003	?0 is not of the form: ¬‘mk_î m® Div ‘mk_î n®®
57004	?0 is not of the form: ¬‘mk_î m® > ‘mk_î n®®
57005	?0 is not of the form: ¬‘mk_î m® < ‘mk_î n®®
57006	?0 is not of the form: ¬‘mk_î m® - ‘mk_î n®®
57007	?0 is not of the form: ¬‘mk_î m® Mod ‘mk_î n®®
6085	?0 is not of the form: ¬‘mk_î m® + ‘mk_î n®®
57009	?0 is not of the form: ¬‘mk_î m® * ‘mk_î n®®
57010	Cannot compute ?0 (¬m - n® is undefined when ¬m < n®)
57011	Cannot compute ?0 (¬m Div n® is undefined when ¬n = 0®)
57012	Cannot compute ?0 (¬m Mod n® is undefined when ¬n = 0®)
=SEEALSO
Proof context $comb$
=ENDDOC
=DOC
	val Ûî_eq_convÝ	: CONV
=DESCRIBE
This conversion proves theorems of the form:
=GFT
	ô i = j ¤ t
=TEX
Where $¬i®$ and $¬j®$ are numeric literals and where $¬t®$ is either
$¬T®$ or $¬F®$.
=FAILURE
57100	?0 is not of the form: ¬‘mk_î m® = ‘mk_î n®®
=SEEALSO
Proof context $comb$
=ENDDOC
\section{CHARACTERS}
=DOC
	val Ûchar_eq_convÝ	: CONV
=DESCRIBE
This conversion proves theorems of the form:
=GFT
	ô b = c ¤ t
=TEX
Where $¬b®$ and $¬c®$ are character literals and where $¬t®$ is either
$¬T®$ or $¬F®$.
=FAILURE
57200	?0 is not of the form: ¬‘mk_char b® = ‘mk_char c®®
=SEEALSO
Proof context $comb$
=ENDDOC
\section{STRINGS}
=DOC
	val Ûstring_eq_convÝ	: CONV
=DESCRIBE
These conversions prove theorems of the form:
=GFT
	ô b = c ¤ t
=TEX
Where $¬b®$ and $¬c®$ are string literals and where $¬t®$ is either
$¬T®$ or $¬F®$.
=FAILURE
57300	?0 is not of the form: ¬‘mk_string b® = ‘mk_string c®®
=ENDDOC
\section{DERIVED SYNTAX FUNCTIONS}
=DOC
	val Ûmk_¼Ý		: TERM*TERM -> TERM
	val Ûmk_¾Ý		: TERM*TERM -> TERM
	val Ûmk_divÝ		: TERM*TERM -> TERM
	val Ûmk_greaterÝ	: TERM*TERM -> TERM
	val Ûmk_lessÝ		: TERM*TERM -> TERM
	val Ûmk_minusÝ	: TERM*TERM -> TERM
	val Ûmk_modÝ	: TERM*TERM -> TERM
	val Ûmk_plusÝ	: TERM*TERM -> TERM
	val Ûmk_timesÝ	: TERM*TERM -> TERM
=DESCRIBE
These are constructor functions for
the arithmetic operations.
=FAILURE
57510	?0 is not of type ”î®
57511	?1 is not of type ”î®
=ENDDOC
=DOC
	val Ûdest_¼Ý		: TERM -> TERM*TERM
	val Ûdest_¾Ý		: TERM -> TERM*TERM
	val Ûdest_divÝ		: TERM -> TERM*TERM
	val Ûdest_greaterÝ	: TERM -> TERM*TERM
	val Ûdest_lessÝ		: TERM -> TERM*TERM
	val Ûdest_minusÝ	: TERM -> TERM*TERM
	val Ûdest_modÝ	: TERM -> TERM*TERM
	val Ûdest_plusÝ	: TERM -> TERM*TERM
	val Ûdest_timesÝ	: TERM -> TERM*TERM
=DESCRIBE
These are destructor functions for
the arithmetic operations.
=FAILURE
57501	?0 is not of the form: ¬x ¼ y®
57502	?0 is not of the form: ¬x ¾ y®
57503	?0 is not of the form: ¬x Div y®
57504	?0 is not of the form: ¬x > y®
57505	?0 is not of the form: ¬x < y®
57506	?0 is not of the form: ¬x - y®
57507	?0 is not of the form: ¬x Mod y®
57508	?0 is not of the form: ¬x + y®
57509	?0 is not of the form: ¬x * y®
=ENDDOC
=DOC
	val Ûis_¼Ý		: TERM -> bool
	val Ûis_¾Ý		: TERM -> bool
	val Ûis_divÝ		: TERM -> bool
	val Ûis_greaterÝ	: TERM -> bool
	val Ûis_lessÝ		: TERM -> bool
	val Ûis_minusÝ	: TERM -> bool
	val Ûis_modÝ	: TERM -> bool
	val Ûis_plusÝ	: TERM -> bool
	val Ûis_timesÝ	: TERM -> bool
=DESCRIBE
These are recogniser functions for
the arithmetic operations.
=ENDDOC
\section{EPILOGUE}
=SML
end; (* of signature CompConv *)
=TEX
\section{TEST POLICY}
The functions and the proof context defined in this document are to
be tested according to the standard criteria in \cite{DS/FMU/IED/PLN008}.
=TEX
\twocolumn[\section{INDEX}]\label{Index}
\printindex
\end{document}


