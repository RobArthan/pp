% mdt025.doc   %Z% $Date$ $Revision$ $RCSfile$

=TEX
% mdt025.doc   %Z% $Date$ $Revision$ $RCSfile$
\documentstyle[hol1,11pt,TQ]{article}

\TPPtitle{Module Tests for Pretty Printer}
\TPPref{DS/FMU/IED/MDT025}
\def\SCCSissue{$Revision$%
}
\TPPissue{\SCCSissue}
\TPPdate{\FormatDate{$Date$%
}}
\TPPproject{FST PROJECT}

=IGN

Commands to process this document in various ways.

doc4errors mdt025
use_file "mdt025.sml";

make -f rel001.mkf mdt025.dvi
doc4tex mdt025
tex4dvi mdt025
bibtex mdt025
doc4tex mdt025 ; tex4dvi mdt025
doc4tex mdt025 ; tex4dvi mdt025 ; bibtex mdt025
dvipage mdt025 &

doc4errors mdt025
use_file "mdt025.sml";

=TEX
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{SML Literate Script}
\TPPkeywords{HOL}
\TPPauthor{A.J. Hammon & WIN01}  %% Mandatory field
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{This document contains the module tests for the ICL~HOL
	Pretty Printer.}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library
}}

\ftlinepenalty=9999
\makeindex

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\catcode`\_=\active
\def\_{\kern.06em\vbox{\hrule height.1ex width.3em}\hskip0.1em\relax}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\makeTPPfrontpage

\vfill
\begin{center}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{DOCUMENT CONTROL}

%********************************************************************

\subsection{Contents List}
\tableofcontents
% \listoftables

%********************************************************************

\subsection{Document Cross References}

\bibliographystyle{fmu}
\bibliography{fmu}

%********************************************************************

\subsection{Changes History}

\begin{description}

\item[Issues 1.1 to 1.7 ] Initial drafts.

\item[\FormatDate{91/09/12}, issue 2.1 ] First approved version.

\item[\FormatDate{91/10/31}, issue 2.2]
Reacted to introduction of "o" as a constant.

\item[Issue 2.3, \FormatDate{92/01/20} ] Updated to use new fonts.

\item[Issue 2.4]
	Fix label of test {\tt 10_010f}.
	Correct tests {\tt cdg_030} and {\tt cdg_040}.
\item [Issue 2.5,2.6 (9th April 1992)]
Changes required by CR0016.
\item [Issue 2.7 (14th April 1992)]
Changes required by CR0017.

\end{description}

%********************************************************************

%\subsection{Changes Forecast} \label{ChangesForecast}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{GENERAL}

%********************************************************************

\subsection{Scope}

This document contains the module tests for the pretty printing
routines for Release~1 of the ICL HOL system which are discussed
in~\cite{DS/FMU/IED/IMP025}.  The tests use the module testing system
of~\cite{DS/FMU/IED/DTD013} and~\cite{DS/FMU/IED/IMP013}.

%********************************************************************

\subsection{Introduction}

Each test, or part of a test, is identified by a string of the form
``$\cal N_M$'' or ``$\cal N_MA$'' where: ``$\cal N$'' indicates the
area of the test; ``$\cal M$'' is the test number; and, ``$\cal A$'' is
ancillary labelling for the test.

The first major group of tests are concerned with getting the correct
layout of the brackets and components of the terms, most of these
tests use a very wide line length to ensure that all the output is
on a single line.

Most of the tests are run twice.  Firstly to see if the expected output
is produced.  Secondly (using function $uft$) to ensure that the text
that is produced can be parsed back in as the same term.

\subsection{Deficiencies}

Function $pp_init$ is not directly tested by this file.  The function
is called in the implementation document~\cite{DS/FMU/IED/IMP025} when
it installs the printing functions.  The success of this function can
only be determined by the integration tests where if terms, types and
theorems are not printed as top level values then the printing
functions have not been installed.

The theorem printing functions are not tested because there are no
readily available values of suitable type and creating such values with
a non-empty set of assumptions is difficult.  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{TEST HARNESS INITIALISATION}

=IGN
Get the test harness files
sccs -d ~ied get dtd013.doc imp013.doc
doc4errors dtd013
doc4errors imp013

doc4errors mdt025
use_file "mdt025.sml";

=TEX

Load and initialise the module test system.

=SML
use_file "dtd013.sml";
use_file "imp013.sml";
init_mt_results ();
open_theory "misc";
new_theory "mdt025_test";
=TEX

Use very long lines for the first tests.

=SML
set_line_length 500;
=TEX

Functions $ft$ and $uft$ are used to invoke the tests.  The first just
formats the term into a single string, the second formats the term into
a single string, parses it back as a term and formats the result of
that.

=SML
fun ft (x:TERM) : string list = PrettyPrinter.format_term false x;

val uft_aux : TERM ref = ref ¬1®;

fun uft (x:TERM) : TERM =
let
	val t1 = implode(ft x);
	val side_effect = use_string
		("(uft_aux := ¬" ^ t1 ^ "®; !uft_aux)");
in
	!uft_aux
end;
=TEX

%********************************************************************

\subsection{HOL Operators, Types and Constants}

Some initialisations required in the absence of the proper
declarations for the operators, types and constants about:
	pairing
and
	sets.

=SML
(	declare_infix (100, "¸")		handle Fail _ => (),	"infix ¸");
(Value	(new_type("¸", 2))			handle Fail _ => Nil,	"new_type ¸");
(	declare_infix (100, ",")			handle Fail _ => (),	"infix ,");
(Value	(new_const(",", type_of¬x:'a­'b­('a¸'b)®))
						handle Fail _ => Nil,	"new_const ,");

(Value	(new_type("SET", 1))			handle Fail _ => Nil,	"new_type SET");
(Value	(new_const("Empty", ¬:'1 SET®))	handle Fail _ => Nil,	"new_const Empty");
(Value	(new_const("Insert", ¬:'1 ­ '1 SET ­ '1 SET®))
						handle Fail _ => Nil,	"new_const Insert");

(Value	(new_const("Uncurry", ¬:('a ­ 'b ­ 'c) ­ ('a ¸ 'b) ­ 'c®))
						handle Fail _ => Nil,	"new_const Uncurry");
(Value	(new_const("SetComp", ¬:(('a ¸ 'b) ­ BOOL) ­ ('a ¸ 'b) SET®))
						handle Fail _ => Nil,	"new_const SetComp");
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{THE TESTS}

\subsection{Simple Constants and Function Applications}

=SML
let
val t1_010 =	¬1®;
val a1_010 =	["1"];
val t1_020 =	¬x 1®;
val a1_020 =	["x 1"];
val t1_030 =	¬x y 1®;
val a1_030 =	["x y 1"];
val t1_040 =	¬x y z 1®;
val a1_040 =	["x y z 1"];
val t1_050 =	¬ax bx cx dx ex fx gx hx ix jx kx lx mx nx ox px qx rx sx tx ux vx wx xx yx zx®;
val a1_050 =	["ax bx cx dx ex fx gx hx ix jx kx lx mx nx ox px qx rx sx tx ux vx wx xx yx zx"];
val t1_060 =	¬x±y®;
val a1_060 =	["x ± y"];

in

store_mt_results_show mt_run [
("1_010", ft, t1_010, a1_010),
("1_020", ft, t1_020, a1_020),
("1_030", ft, t1_030, a1_030),
("1_040", ft, t1_040, a1_040),
("1_050", ft, t1_050, a1_050),
("1_060", ft, t1_060, a1_060)
];

store_mt_results_show (mt_runf (op =$))[
("1_010f", uft, t1_010, t1_010),
("1_020f", uft, t1_020, t1_020),
("1_030f", uft, t1_030, t1_030),
("1_040f", uft, t1_040, t1_040),
("1_050f", uft, t1_050, t1_050),
("1_060f", uft, t1_060, t1_060)
]

end;
=TEX

\subsection{Infix Operators}

=SML
let
val t2_010 =	¬x±y±z®;
val a2_010 =	["x ± y ± z"];
val t2_020 =	¬(x±y)±z®;
val a2_020 =	["(x ± y) ± z"];
val t2_030 =	¬x±(y±z)®;
val a2_030 =	["x ± y ± z"];
val t2_040 =	¬w±x±y±z®;
val a2_040 =	["w ± x ± y ± z"];

in

store_mt_results_show mt_run [
("2_010", ft, t2_010, a2_010),
("2_020", ft, t2_020, a2_020),
("2_030", ft, t2_030, a2_030),
("2_040", ft, t2_040, a2_040)
];

store_mt_results_show (mt_runf (op =$))[
("2_010f", uft, t2_010, t2_010),
("2_020f", uft, t2_020, t2_020),
("2_030f", uft, t2_030, t2_030),
("2_040f", uft, t2_040, t2_040)
]
end;
=TEX

=SML
let
val t2_050 =	¬(w±x)±y±z®;
val a2_050 =	["(w ± x) ± y ± z"];
val t2_060 =	¬w±x±(y±z)®;
val a2_060 =	["w ± x ± y ± z"];
val t2_070 =	¬(w±x)±(y±z)®;
val a2_070 =	["(w ± x) ± y ± z"];
val t2_080 =	¬w±(x±y)±z®;
val a2_080 =	["w ± (x ± y) ± z"];

in

store_mt_results_show mt_run [
("2_050", ft, t2_050, a2_050),
("2_060", ft, t2_060, a2_060),
("2_070", ft, t2_070, a2_070),
("2_080", ft, t2_080, a2_080)
];

store_mt_results_show (mt_runf (op =$))[
("2_050f", uft, t2_050, t2_050),
("2_060f", uft, t2_060, t2_060),
("2_070f", uft, t2_070, t2_070),
("2_080f", uft, t2_080, t2_080)
]
end;
=TEX

=SML
let
val t2_090 =	¬w²x±y²z®;
val a2_090 =	["w ² x ± y ² z"];
val t2_100 =	¬(w²x)±y²z®;
val a2_100 =	["(w ² x) ± y ² z"];
val t2_110 =	¬w²(x±y)²z®;
val a2_110 =	["w ² x ± y ² z"];
val t2_120 =	¬w±(x²y)±z®;
val a2_120 =	["w ± (x ² y) ± z"];
val t2_130 =	¬w²x±(y²z)®;
val a2_130 =	["w ² x ± (y ² z)"];
val t2_140 =	¬(w²x)±(y²z)®;
val a2_140 =	["(w ² x) ± (y ² z)"];

in

store_mt_results_show mt_run [
("2_090", ft, t2_090, a2_090),
("2_100", ft, t2_100, a2_100),
("2_110", ft, t2_110, a2_110),
("2_120", ft, t2_120, a2_120),
("2_130", ft, t2_130, a2_130),
("2_140", ft, t2_140, a2_140)
];

store_mt_results_show (mt_runf (op =$)) [
("2_090f", uft, t2_090, t2_090),
("2_100f", uft, t2_100, t2_100),
("2_110f", uft, t2_110, t2_110),
("2_120f", uft, t2_120, t2_120),
("2_130f", uft, t2_130, t2_130),
("2_140f", uft, t2_140, t2_140)
]
end;
=TEX

=SML
let
val t2_150 =	¬f w²g x±h y²j z®;
val a2_150 =	["f w ² g x ± h y ² j z"];
val t2_160 =	¬(f w²g x)±h y²j z®;
val a2_160 =	["(f w ² g x) ± h y ² j z"];
val t2_170 =	¬f w²(g x±h y)²j z®;
val a2_170 =	["f w ² g x ± h y ² j z"];
val t2_180 =	¬f w²g x±(h y²j z)®;
val a2_180 =	["f w ² g x ± (h y ² j z)"];
val t2_190 =	¬(f w²g x)±(h y²j z)®;
val a2_190 =	["(f w ² g x) ± (h y ² j z)"];

=IGN
val t2_150 =	¬f w²g x±h y²j z®;
val a2_150 =	["(f w) ² (g x) ± (h y) ² (j z)"];
val t2_160 =	¬(f w²g x)±h y²j z®;
val a2_160 =	["((f w) ² (g x)) ± (h y) ² (j z)"];
val t2_170 =	¬f w²(g x±h y)²j z®;
val a2_170 =	["(f w) ² (g x) ± (h y) ² (j z)"];
val t2_180 =	¬f w²g x±(h y²j z)®;
val a2_180 =	["(f w) ² (g x) ± ((h y) ² (j z))"];
val t2_190 =	¬(f w²g x)±(h y²j z)®;
val a2_190 =	["((f w) ² (g x)) ± ((h y) ² (j z))"];
=SML

in

store_mt_results_show mt_run[
("2_150", ft, t2_150, a2_150),
("2_160", ft, t2_160, a2_160),
("2_170", ft, t2_170, a2_170),
("2_180", ft, t2_180, a2_180),
("2_190", ft, t2_190, a2_190)
];

store_mt_results_show (mt_runf (op =$))[
("2_150f", uft, t2_150, t2_150),
("2_160f", uft, t2_160, t2_160),
("2_170f", uft, t2_170, t2_170),
("2_180f", uft, t2_180, t2_180),
("2_190f", uft, t2_190, t2_190)
]
end;
=TEX

=SML
let
val t2_200 =	¬f (w²g) (x±h) (y²j) z®;
val a2_200 =	["f (w ² g) (x ± h) (y ² j) z"];
val t2_210 =	¬(f (w²g) x)±h (y²j) z®;
val a2_210 =	["f (w ² g) x ± h (y ² j) z"];

in

store_mt_results_show mt_run [
("2_200", ft, t2_200, a2_200),
("2_210", ft, t2_210, a2_210)
];

store_mt_results_show (mt_runf (op =$))[
("2_200f", uft, t2_200, t2_200),
("2_210f", uft, t2_210, t2_210)
]
end;
=TEX

\subsection{Conditionals}

=SML
let
val t3_010 =	¬if x = y then 1 else z®;
val a3_010 =	["if x = y then 1 else z"];
val t3_020 =	¬if x = y then if x = yy then 2 else 3 else z®;
val a3_020 =	["if x = y then if x = yy then 2 else 3 else z"];
val t3_030 =	¬if x = y then 1 else if x = yy then 2 else 3®;
val a3_030 =	["if x = y then 1 else if x = yy then 2 else 3"];

in

store_mt_results_show mt_run [
("3_010", ft, t3_010, a3_010),
("3_020", ft, t3_020, a3_020),
("3_030", ft, t3_030, a3_030)
];

store_mt_results_show (mt_runf (op =$))[
("3_010f", uft, t3_010, t3_010),
("3_020f", uft, t3_020, t3_020),
("3_030f", uft, t3_030, t3_030)
]
end;
=TEX

=SML
let
val t3_040 =	¬if x = y then z else w ± z®;
val a3_040 =	["if x = y then z else w ± z"];
val t3_050 =	¬if x = y then if x = yy then w ± z1 else w ± z2 else w ± z3®;
val a3_050 =	["if x = y then if x = yy then w ± z1 else w ± z2 else w ± z3"];
val t3_060 =	¬(if x = y then w ± z1 else if x = yy then w ± z2 else w) ± z3®;
val a3_060 =	["(if x = y then w ± z1 else if x = yy then w ± z2 else w) ± z3"];
val t3_070 =	¬(a ± if x = y then w ± z1 else if x = yy then w ± z2 else w) ± z3®;
val a3_070 =	["(a ± (if x = y then w ± z1 else if x = yy then w ± z2 else w)) ± z3"];
val t3_080 =	¬a ± (if x = y then w ± z1 else if x = yy then w ± z2 else w) ± z3®;
val a3_080 =	["a ± (if x = y then w ± z1 else if x = yy then w ± z2 else w) ± z3"];
val t3_090 =	¬(a ± (if x = y then w ± z1 else if x = yy then w ± z2 else w)) ± z3®;
val a3_090 =	["(a ± (if x = y then w ± z1 else if x = yy then w ± z2 else w)) ± z3"];
val t3_100 =	¬a ± ((if x = y then w ± z1 else if x = yy then w ± z2 else w) ± z3)®;
val a3_100 =	["a ± (if x = y then w ± z1 else if x = yy then w ± z2 else w) ± z3"];

in

store_mt_results_show mt_run [
("3_040", ft, t3_040, a3_040),
("3_050", ft, t3_050, a3_050),
("3_060", ft, t3_060, a3_060),
("3_070", ft, t3_070, a3_070),
("3_080", ft, t3_080, a3_080),
("3_090", ft, t3_090, a3_090),
("3_100", ft, t3_100, a3_100)
];

store_mt_results_show (mt_runf (op =$))[
("3_040f", uft, t3_040, t3_040),
("3_050f", uft, t3_050, t3_050),
("3_060f", uft, t3_060, t3_060),
("3_070f", uft, t3_070, t3_070),
("3_080f", uft, t3_080, t3_080),
("3_090f", uft, t3_090, t3_090),
("3_100f", uft, t3_100, t3_100)
]
end;
=TEX

=SML
let
val t3_110 =	¬(if a then b else c d e f)®;
val a3_110 =	["if a then b else c d e f"];
val t3_120 =	¬(if a then b else c) d e f®;
val a3_120 =	["(if a then b else c) d e f"];
val t3_130 =	¬p q r (if a then b else c d e f)®;
val a3_130 =	["p q r (if a then b else c d e f)"];
val t3_140 =	¬p q r (if a then b else c) d e f®;
val a3_140 =	["p q r (if a then b else c) d e f"];
val t3_150 =	¬p q r (if a then b else c) d e f®;
val a3_150 =	["p q r (if a then b else c) d e f"];
val t3_160 =	¬p q r ((if a then b else c) d e f)®;
val a3_160 =	["p q r ((if a then b else c) d e f)"];

in

store_mt_results_show mt_run[
("3_110", ft, t3_110, a3_110),
("3_120", ft, t3_120, a3_120),
("3_130", ft, t3_130, a3_130),
("3_140", ft, t3_140, a3_140),
("3_150", ft, t3_150, a3_150),
("3_160", ft, t3_160, a3_160)
];

store_mt_results_show (mt_runf (op =$))[
("3_110f", uft, t3_110, t3_110),
("3_120f", uft, t3_120, t3_120),
("3_130f", uft, t3_130, t3_130),
("3_140f", uft, t3_140, t3_140),
("3_150f", uft, t3_150, t3_150),
("3_160f", uft, t3_160, t3_160)
]
end;
=TEX

\subsection{Binder Terms}

=SML
let
val t4_010 =	¬Ì x · x®;
val a4_010 =	["Ì x· x"];
val t4_020 =	¬Ì x · y®;
val a4_020 =	["Ì x· y"];
val t4_030 =	¬Ì x · x y®;
val a4_030 =	["Ì x· x y"];
val t4_040 =	¬(Ì x · x) y®;
val a4_040 =	["(Ì x· x) y"];
val t4_050 =	¬Ì x · (x y)®;
val a4_050 =	["Ì x· x y"];
val t4_060 =	¬w Ì x · x y®;
val a4_060 =	["w (Ì x· x y)"];
val t4_070 =	¬w (Ì x · x) y®;
val a4_070 =	["w (Ì x· x) y"];
val t4_080 =	¬w (Ì x · (x y))®;
val a4_080 =	["w (Ì x· x y)"];
val t4_090 =	¬(w (Ì x · x)) y®;
val a4_090 =	["w (Ì x· x) y"];

in

store_mt_results_show mt_run[
("4_010", ft, t4_010, a4_010),
("4_020", ft, t4_020, a4_020),
("4_030", ft, t4_030, a4_030),
("4_040", ft, t4_040, a4_040),
("4_050", ft, t4_050, a4_050),
("4_060", ft, t4_060, a4_060),
("4_070", ft, t4_070, a4_070),
("4_080", ft, t4_080, a4_080),
("4_090", ft, t4_090, a4_090)
];

store_mt_results_show (mt_runf (op =$))[
("4_010f", uft, t4_010, t4_010),
("4_020f", uft, t4_020, t4_020),
("4_030f", uft, t4_030, t4_030),
("4_040f", uft, t4_040, t4_040),
("4_050f", uft, t4_050, t4_050),
("4_060f", uft, t4_060, t4_060),
("4_070f", uft, t4_070, t4_070),
("4_080f", uft, t4_080, t4_080),
("4_090f", uft, t4_090, t4_090)
]
end;
=TEX

=SML
let
val t4_100 =	¬µ x · x®;
val a4_100 =	["µ x· x"];
val t4_110 =	¬µ x · (x y)®;
val a4_110 =	["µ x· x y"];
val t4_120 =	¬w µ x · x®;
val a4_120 =	["w (µ x· x)"];
val t4_130 =	¬w (µ x · x)®;
val a4_130 =	["w (µ x· x)"];

in

store_mt_results_show (mt_runf (op =$))[
("4_100f", uft, t4_100, t4_100),
("4_110f", uft, t4_110, t4_110),
("4_120f", uft, t4_120, t4_120),
("4_130f", uft, t4_130, t4_130)
];

store_mt_results_show mt_run[
("4_100", ft, t4_100, a4_100),
("4_110", ft, t4_110, a4_110),
("4_120", ft, t4_120, a4_120),
("4_130", ft, t4_130, a4_130)
]
end;
=TEX

=SML
let
val t4_140 =	¬(µ w · w)±(µ x · x)±(µ y · y)±(µ z · z)®;
val a4_140 =	["(µ w· w) ± (µ x· x) ± (µ y· y) ± (µ z· z)"];
val t4_150 =	¬((µ w · w)±(µ x · x))±(µ y · y)±(µ z · z)®;
val a4_150 =	["((µ w· w) ± (µ x· x)) ± (µ y· y) ± (µ z· z)"];
val t4_160 =	¬(µ w · w)±(µ x · x)±((µ y · y)±(µ z · z))®;
val a4_160 =	["(µ w· w) ± (µ x· x) ± (µ y· y) ± (µ z· z)"];
val t4_170 =	¬((µ w · w)±(µ x · x))±((µ y · y)±(µ z · z))®;
val a4_170 =	["((µ w· w) ± (µ x· x)) ± (µ y· y) ± (µ z· z)"];
val t4_180 =	¬(µ w · w)±((µ x · x)±(µ y · y))±(µ z · z)®;
val a4_180 =	["(µ w· w) ± ((µ x· x) ± (µ y· y)) ± (µ z· z)"];

in

store_mt_results_show mt_run[
("4_140", ft, t4_140, a4_140),
("4_150", ft, t4_150, a4_150),
("4_160", ft, t4_160, a4_160),
("4_170", ft, t4_170, a4_170),
("4_180", ft, t4_180, a4_180)
];

store_mt_results_show (mt_runf (op =$))[
("4_140f", uft, t4_140, t4_140),
("4_150f", uft, t4_150, t4_150),
("4_160f", uft, t4_160, t4_160),
("4_170f", uft, t4_170, t4_170),
("4_180f", uft, t4_180, t4_180)
]
end;
=TEX

=SML
let
val t4_190 =	¬Ì x · x±y®;
val a4_190 =	["Ì x· x ± y"];
val t4_200 =	¬Ì x · if x then y else z®;
val a4_200 =	["Ì x· if x then y else z"];

in

store_mt_results_show mt_run[
("4_190", ft, t4_190, a4_190),
("4_200", ft, t4_200, a4_200)
];

store_mt_results_show (mt_runf (op =$))[
("4_190f", uft, t4_190, t4_190),
("4_200f", uft, t4_200, t4_200)
]
end;
=TEX

=SML
let
val t4_210 =	¬µ x · y = if x then 1 else 2®;
val a4_210 =	["µ x· y = (if x then 1 else 2)"];
val t4_220 =	¬(µ x · y) = (if x then p else q)®;
val a4_220 =	["(µ x· y) ¤ (if x then p else q)"];

in

store_mt_results_show mt_run[
("4_210", ft, t4_210, a4_210),
("4_220", ft, t4_220, a4_220)
];

store_mt_results_show (mt_runf (op =$))[
("4_210f", uft, t4_210, t4_210),
("4_220f", uft, t4_220, t4_220)
]
end;
=TEX

=SML
let
val t4_230 =	¬µx·µy·µz·x±y±z®;
val a4_230 =	["µ x y z· x ± y ± z"];
val t4_240 =	¬¶x·µy·¶z·x±y±z®;
val a4_240 =	["¶ x· µ y· ¶ z· x ± y ± z"];

in

store_mt_results_show mt_run[
("4_230", ft, t4_230, a4_230),
("4_240", ft, t4_240, a4_240)
];

store_mt_results_show (mt_runf (op =$))[
("4_230f", uft, t4_230, t4_230),
("4_240f", uft, t4_240, t4_240)
]
end;
=TEX

=SML
let
val t4_250 =	¬f = Ì x · Ì y · x±y®;
val a4_250 =	["f = (Ì x y· x ± y)"];
val t4_260 =	¬f = Ì (x,y) · x±y®;
val a4_260 =	["f = (Ì (x, y)· x ± y)"];


in

store_mt_results_show mt_run[
("4_250", ft, t4_250, a4_250),
("4_260", ft, t4_260, a4_260)
];

store_mt_results_show (mt_runf (op =$))[
("4_250f", uft, t4_250, t4_250),
("4_260f", uft, t4_260, t4_260)
]
end;
=TEX

Binders with varstructs.

=SML
let
val t4_265 =	¬µ a · x®;
val a4_265 =	["µ a· x"];
val t4_270 =	¬Ì a · x®;
val a4_270 =	["Ì a· x"];

in

store_mt_results_show mt_run[
("4_265", ft, t4_265, a4_265),
("4_270", ft, t4_270, a4_270)
];

store_mt_results_show (mt_runf (op =$))[
("4_265f", uft, t4_265, t4_265),
("4_270f", uft, t4_270, t4_270)
]
end;
=TEX

=SML
let

val t4_280 =	¬µ (a,b) · x®;
val a4_280 =	["µ (a, b)· x"];
val t4_290 =	¬µ (a,b,c) · x®;
val a4_290 =	["µ (a, b, c)· x"];
val t4_300 =	¬µ (a,b,c,d) · x®;
val a4_300 =	["µ (a, b, c, d)· x"];
val t4_310 =	¬Ì (a,b) · x®;
val a4_310 =	["Ì (a, b)· x"];
val t4_320 =	¬Ì (a,b,c) · x®;
val a4_320 =	["Ì (a, b, c)· x"];
val t4_330 =	¬Ì (a,b,c,d) · x®;
val a4_330 =	["Ì (a, b, c, d)· x"];

in

store_mt_results_show mt_run[
("4_280", ft, t4_280, a4_280),
("4_290", ft, t4_290, a4_290),
("4_300", ft, t4_300, a4_300),
("4_310", ft, t4_310, a4_310),
("4_320", ft, t4_320, a4_320),
("4_330", ft, t4_330, a4_330)
];

store_mt_results_show (mt_runf (op =$))[
("4_280f", uft, t4_280, t4_280),
("4_290f", uft, t4_290, t4_290),
("4_300f", uft, t4_300, t4_300),
("4_310f", uft, t4_310, t4_310),
("4_320f", uft, t4_320, t4_320),
("4_330f", uft, t4_330, t4_330)
]
end;
=TEX

=SML
let

val t4_340 =	¬µ a b c · d®;
val a4_340 =	["µ a b c· d"];
val t4_350 =	¬µ a · µ b · µ c · d®;
val a4_350 =	["µ a b c· d"];
val t4_360 =	¬Ì a b c · d®;
val a4_360 =	["Ì a b c· d"];
val t4_370 =	¬Ì a · Ì b · Ì c · d®;
val a4_370 =	["Ì a b c· d"];

in

store_mt_results_show mt_run[
("4_340", ft, t4_340, a4_340),
("4_350", ft, t4_350, a4_350),
("4_360", ft, t4_360, a4_360),
("4_370", ft, t4_370, a4_370)
];

store_mt_results_show (mt_runf (op =$))[
("4_340f", uft, t4_340, t4_340),
("4_350f", uft, t4_350, t4_350),
("4_360f", uft, t4_360, t4_360),
("4_370f", uft, t4_370, t4_370)
]
end;
=TEX

=SML
let

val t4_380 =	¬µ (((a,b),c),d) · x®;
val a4_380 =	["µ (((a, b), c), d)· x"];
val t4_390 =	¬µ ((a,b),(c,d)) · x®;
val a4_390 =	["µ ((a, b), c, d)· x"];
val t4_400 =	¬Ì (((a,b),c),d) · x®;
val a4_400 =	["Ì (((a, b), c), d)· x"];
val t4_410 =	¬Ì ((a,b),(c,d)) · x®;
val a4_410 =	["Ì ((a, b), c, d)· x"];

in

store_mt_results_show mt_run[
("4_380", ft, t4_380, a4_380),
("4_390", ft, t4_390, a4_390),
("4_400", ft, t4_400, a4_400),
("4_410", ft, t4_410, a4_410)
];

store_mt_results_show (mt_runf (op =$))[
("4_380f", uft, t4_380, t4_380),
("4_390f", uft, t4_390, t4_390),
("4_400f", uft, t4_400, t4_400),
("4_410f", uft, t4_410, t4_410)
]
end;
=TEX

=SML
let

val t4_420 =	¬µ ((a,((b,(c,(d,((e,f),(g,h)),i,(j,k,l),m),n)),o)),p) · x®;
val a4_420 =	["µ ((a, (b, c, (d, ((e, f), g, h), i, (j, k, l), m), n), o), p)· x"];
val t4_430 =	¬Ì (a,b,(c,(d,e,f),g),((h,i),j),(k,(l,(m,n))),o,p) · x®;
val a4_430 =	["Ì (a, b, (c, (d, e, f), g), ((h, i), j), (k, l, m, n), o, p)· x"];

in

store_mt_results_show mt_run[
("4_420", ft, t4_420, a4_420),
("4_430", ft, t4_430, a4_430)
];

store_mt_results_show (mt_runf (op =$))[
("4_420f", uft, t4_420, t4_420),
("4_430f", uft, t4_430, t4_430)
]
end;
=TEX

Some binders where types are to be shown.

=SML
let

val t4_440 =	¬µ a b c d · a = b ± a = c ± a = d®;
val a4_440 =	["µ a b c d· a = b ± a = c ± a = d"];
val l4_440 =	["µ a b c d: 'a· a = b ± a = c ± a = d"];

val t4_450 =	¬µ a b c d · a = b ± c = d®;
val a4_450 =	["µ a b c d· a = b ± c = d"];
val l4_450 =	["µ a b: 'a; c d: 'b· a = b ± c = d"];

val t4_460 =	¬Ì a b c d · a = b ± a = c ± a = d®;
val a4_460 =	["Ì a b c d· a = b ± a = c ± a = d"];
val l4_460 =	["Ì a b c d: 'a· a = b ± a = c ± a = d"];

val t4_470 =	¬Ì a b c d · a = b ± c = d®;
val a4_470 =	["Ì a b c d· a = b ± c = d"];
val l4_470 =	["Ì a b: 'a; c d: 'b· a = b ± c = d"];

val t4_480 =	¬µ (a1, a2) (b1, b2) ((c1, c2), c3) ((d1, d2), d3)
		· (a1, a2) = (b1, b2)
		± ((c1, c2), c3) = ((d1, d2), d3)®;
val a4_480 =	["µ (a1, a2) (b1, b2) ((c1, c2), c3) ((d1, d2), d3)"
		^"· (a1, a2) = (b1, b2)"
		^" ± ((c1, c2), c3) = ((d1, d2), d3)"];
val l4_480 =	["µ (a1, a2) (b1, b2): 'a ¸ 'b;"
		^" ((c1, c2), c3) ((d1, d2), d3): ('c ¸ 'd) ¸ 'e"
		^"· (a1, a2) = (b1, b2)"
		^" ± ((c1, c2), c3) = ((d1, d2), d3)"];

val t4_490 =	¬µ (a1, (a2, a3)) (b1, (b2, b3)) ((c1, c2), c3) ((d1, d2), d3) · x®;
val a4_490 =	["µ (a1, a2, a3) (b1, b2, b3) ((c1, c2), c3) ((d1, d2), d3)· x"];
val l4_490 =	["µ (a1, a2, a3): 'a ¸ 'b ¸ 'c;"
		^" (b1, b2, b3): 'd ¸ 'e ¸ 'f;"
		^" ((c1, c2), c3):"
		^" ('g ¸ 'h) ¸ 'i;"
		^" ((d1, d2), d3): ('j ¸ 'k) ¸ 'l· x"];

val t4_500 =	¬µ (a1, (a2, a3)) (b1, (b2, b3)) ((c1, c2), c3) ((d1, d2), d3)
		· (a1, (a2, a3)) = (b1, (b2, b3))
		± ((c1, c2), c3) = ((d1, d2), d3)®;
val a4_500 =	["µ (a1, a2, a3) (b1, b2, b3) ((c1, c2), c3) ((d1, d2), d3)"
		^"· (a1, a2, a3) = (b1, b2, b3)"
		^" ± ((c1, c2), c3) = ((d1, d2), d3)"];
val l4_500 =	["µ (a1, a2, a3) (b1, b2, b3): 'a ¸ 'b ¸ 'c;"
		^" ((c1, c2), c3) ((d1, d2), d3):"
		^" ('d ¸ 'e) ¸ 'f"
		^"· (a1, a2, a3) = (b1, b2, b3)"
		^" ± ((c1, c2), c3) = ((d1, d2), d3)"];

val t4_510 =	¬µ (a1, (a2, a3)) (b1, (b2, b3)) ((c1, c2), c3) ((d1, d2), d3)
		· a1 = b1 ± a2 = b2 ± a3 = b3
		± a1 = c1 ± a2 = c2 ± a3 = c3
		± a1 = d1 ± a2 = d2 ± a3 = d3®;
val a4_510 =	["µ (a1, a2, a3) (b1, b2, b3) ((c1, c2), c3) ((d1, d2), d3)"
		^"· a1 = b1 ± a2 = b2 ± a3 = b3"
		^" ± a1 = c1 ± a2 = c2 ± a3 = c3"
		^" ± a1 = d1 ± a2 = d2 ± a3 = d3"];
val l4_510 =	["µ (a1, a2, a3) (b1, b2, b3): 'a ¸ 'b ¸ 'c;"
		^" ((c1, c2), c3) ((d1, d2), d3): ('a ¸ 'b) ¸ 'c"
		^"· a1 = b1 ± a2 = b2 ± a3 = b3"
		^" ± a1 = c1 ± a2 = c2 ± a3 = c3"
		^" ± a1 = d1 ± a2 = d2 ± a3 = d3"];

val t4_520 =	¬µ (a1, (a2, a3)) (b1, (b2, b3)) (c1, (c2, c3)) (d1, (d2, d3))
		· a1 = b1 ± a2 = b2 ± a3 = b3
		± a1 = c1 ± a2 = c2 ± a3 = c3
		± a1 = d1 ± a2 = d2 ± a3 = d3®;
val a4_520 =	["µ (a1, a2, a3) (b1, b2, b3) (c1, c2, c3) (d1, d2, d3)"
		^"· a1 = b1 ± a2 = b2 ± a3 = b3"
		^" ± a1 = c1 ± a2 = c2 ± a3 = c3"
		^" ± a1 = d1 ± a2 = d2 ± a3 = d3"];
val l4_520 =	["µ (a1, a2, a3) (b1, b2, b3)"
		^" (c1, c2, c3) (d1, d2, d3): 'a ¸ 'b ¸ 'c"
		^"· a1 = b1 ± a2 = b2 ± a3 = b3"
		^" ± a1 = c1 ± a2 = c2 ± a3 = c3"
		^" ± a1 = d1 ± a2 = d2 ± a3 = d3"];

in

store_mt_results_show mt_run[
("4_440", ft, t4_440, a4_440),
("4_450", ft, t4_450, a4_450),
("4_460", ft, t4_460, a4_460),
("4_470", ft, t4_470, a4_470),
("4_480", ft, t4_480, a4_480),
("4_490", ft, t4_490, a4_490),
("4_500", ft, t4_500, a4_500),
("4_510", ft, t4_510, a4_510),
("4_520", ft, t4_520, a4_520)
];

store_mt_results_show (mt_runf (op =$))[
("4_440f", uft, t4_440, t4_440),
("4_450f", uft, t4_450, t4_450),
("4_460f", uft, t4_460, t4_460),
("4_470f", uft, t4_470, t4_470),
("4_480f", uft, t4_480, t4_480),
("4_490f", uft, t4_490, t4_490),
("4_500f", uft, t4_500, t4_500),
("4_510f", uft, t4_510, t4_510),
("4_520f", uft, t4_520, t4_520)
];

set_flag("pp_types_on_binders", true);

store_mt_results_show mt_run[
("4_440b", ft, t4_440, l4_440),
("4_450b", ft, t4_450, l4_450),
("4_460b", ft, t4_460, l4_460),
("4_470b", ft, t4_470, l4_470),
("4_480b", ft, t4_480, l4_480),
("4_490b", ft, t4_490, l4_490),
("4_500b", ft, t4_500, l4_500),
("4_510b", ft, t4_510, l4_510),
("4_520b", ft, t4_520, l4_520)
];

store_mt_results_show (mt_runf (op =$))[
("4_440fb", uft, t4_440, t4_440),
("4_450fb", uft, t4_450, t4_450),
("4_460fb", uft, t4_460, t4_460),
("4_470fb", uft, t4_470, t4_470),
("4_480fb", uft, t4_480, t4_480),
("4_490fb", uft, t4_490, t4_490),
("4_500fb", uft, t4_500, t4_500),
("4_510fb", uft, t4_510, t4_510),
("4_520fb", uft, t4_520, t4_520)
];

set_flag("pp_types_on_binders", false)

end;
=TEX

\subsection{Local Definitions}

There are two forms of output for local definitions, so all of the
tests here occur twice.  Tests with suffix `$l$' denote the showing of
let definitions in their lambda form, without the suffix  denotes the
(default) functional form.  Most of the tests of let terms do not have
any local definitions so the results are the same.

=SML
let
val t5_010 =	¬let a = 1 in a = 2®;
val a5_010 =	["let a = 1 in a = 2"];
val t5_020 =	¬let a = 1 and b = 2 in a = b®;
val a5_020 =	["let a = 1 and b = 2 in a = b"];
val t5_030 =	¬let a = 1 and b = 2 and c = 3 and d = 4 in a = b ± c = d®;
val a5_030 =	["let a = 1 and b = 2 and c = 3 and d = 4 in a = b ± c = d"];

in

store_mt_results_show mt_run[
("5_010", ft, t5_010, a5_010),
("5_020", ft, t5_020, a5_020),
("5_030", ft, t5_030, a5_030)
];

store_mt_results_show (mt_runf (op =$))[
("5_010f", uft, t5_010, t5_010),
("5_020f", uft, t5_020, t5_020),
("5_030f", uft, t5_030, t5_030)
];

set_flag("pp_let_as_lambda", true);

store_mt_results_show mt_run[
("5_010l", ft, t5_010, a5_010),
("5_020l", ft, t5_020, a5_020),
("5_030l", ft, t5_030, a5_030)
];

store_mt_results_show (mt_runf (op =$))[
("5_010fl", uft, t5_010, t5_010),
("5_020fl", uft, t5_020, t5_020),
("5_030fl", uft, t5_030, t5_030)
];

set_flag("pp_let_as_lambda", false)

end;
=TEX

=SML
let
val t5_040 =	¬c = let a = 1 in let b = 2 in a = b®;
val a5_040 =	["c ¤ (let a = 1 in let b = 2 in a = b)"];
val t5_050 =	¬let a = 1 in let b = 2 in a = b ¤ c®;
val a5_050 =	["let a = 1 in let b = 2 in a = b ¤ c"];
val t5_060 =	¬(let a = 1 in let b = 2 in a = b) = c®;
val a5_060 =	["(let a = 1 in let b = 2 in a = b) ¤ c"];
val t5_070 =	¬(let a = 1 in let b = Ì x · x in a = b d) = c®;
val a5_070 =	["(let a = 1 in let b x = x in a = b d) ¤ c"];
val l5_070 =	["(let a = 1 in let b = (Ì x· x) in a = b d) ¤ c"];
val t5_080 =	¬(let a = 1 in let b = 2 in a = b) ¤ if x then p else q®;
val a5_080 =	["(let a = 1 in let b = 2 in a = b) ¤ (if x then p else q)"];
val t5_090 =	¬(let a = if x then 1 else 2 in let b = 2 in a = b) = c®;
val a5_090 =	["(let a = (if x then 1 else 2) in let b = 2 in a = b) ¤ c"];

in

store_mt_results_show mt_run[
("5_040", ft, t5_040, a5_040),
("5_050", ft, t5_050, a5_050),
("5_060", ft, t5_060, a5_060),
("5_070", ft, t5_070, a5_070),
("5_080", ft, t5_080, a5_080),
("5_090", ft, t5_090, a5_090)
];

store_mt_results_show (mt_runf (op =$))[
("5_040f", uft, t5_040, t5_040),
("5_050f", uft, t5_050, t5_050),
("5_060f", uft, t5_060, t5_060),
("5_070f", uft, t5_070, t5_070),
("5_080f", uft, t5_080, t5_080),
("5_090f", uft, t5_090, t5_090)
];

set_flag("pp_let_as_lambda", true);

store_mt_results_show mt_run[
("5_040l", ft, t5_040, a5_040),
("5_050l", ft, t5_050, a5_050),
("5_060l", ft, t5_060, a5_060),
("5_070l", ft, t5_070, l5_070),
("5_080l", ft, t5_080, a5_080),
("5_090l", ft, t5_090, a5_090)
];

store_mt_results_show (mt_runf (op =$))[
("5_040fl", uft, t5_040, t5_040),
("5_050fl", uft, t5_050, t5_050),
("5_060fl", uft, t5_060, t5_060),
("5_070fl", uft, t5_070, t5_070),
("5_080fl", uft, t5_080, t5_080),
("5_090fl", uft, t5_090, t5_090)
];

set_flag("pp_let_as_lambda", false)

end;
=TEX

Let with pairs.

=SML
let
val t5_100 =	¬let (a,b) = x in a = b®;
val a5_100 =	["let (a, b) = x in a = b"];
val t5_110 =	¬let (a,b,c,d,e) = x in a = b®;
val a5_110 =	["let (a, b, c, d, e) = x in a = b"];
val t5_120 =	¬let ((a,((b,c),d)),e) = x in a = b®;
val a5_120 =	["let ((a, (b, c), d), e) = x in a = b"];

in

store_mt_results_show mt_run[
("5_100", ft, t5_100, a5_100),
("5_110", ft, t5_110, a5_110),
("5_120", ft, t5_120, a5_120)
];

store_mt_results_show (mt_runf (op =$))[
("5_100f", uft, t5_100, t5_100),
("5_110f", uft, t5_110, t5_110),
("5_120f", uft, t5_120, t5_120)
];

set_flag("pp_let_as_lambda", true);

store_mt_results_show mt_run[
("5_100l", ft, t5_100, a5_100),
("5_110l", ft, t5_110, a5_110),
("5_120l", ft, t5_120, a5_120)
];

store_mt_results_show (mt_runf (op =$))[
("5_100fl", uft, t5_100, t5_100),
("5_110fl", uft, t5_110, t5_110),
("5_120fl", uft, t5_120, t5_120)
];

set_flag("pp_let_as_lambda", false)

end;
=TEX

Local functions.

=SML
let
val t5_130 =	¬let f a = x in y®;
val a5_130 =	["let f a = x in y"];
val l5_130 =	["let f = (Ì a· x) in y"];

val t5_140 =	¬let f (a,b) = x in y®;
val a5_140 =	["let f (a, b) = x in y"];
val l5_140 =	["let f = (Ì (a, b)· x) in y"];

val t5_150 =	¬let f (a,b,c,d,e) = x in y®;
val a5_150 =	["let f (a, b, c, d, e) = x in y"];
val l5_150 =	["let f = (Ì (a, b, c, d, e)· x) in y"];

val t5_160 =	¬let f ((a,((b,c),d)),e) = x in y®;
val a5_160 =	["let f ((a, (b, c), d), e) = x in y"];
val l5_160 =	["let f = (Ì ((a, (b, c), d), e)· x) in y"];

in

store_mt_results_show mt_run[
("5_130", ft, t5_130, a5_130),
("5_140", ft, t5_140, a5_140),
("5_150", ft, t5_150, a5_150),
("5_160", ft, t5_160, a5_160)
];

store_mt_results_show (mt_runf (op =$))[
("5_130f", uft, t5_130, t5_130),
("5_140f", uft, t5_140, t5_140),
("5_150f", uft, t5_150, t5_150),
("5_160f", uft, t5_160, t5_160)
];

set_flag("pp_let_as_lambda", true);

store_mt_results_show mt_run[
("5_130l", ft, t5_130, l5_130),
("5_140l", ft, t5_140, l5_140),
("5_150l", ft, t5_150, l5_150),
("5_160l", ft, t5_160, l5_160)
];

store_mt_results_show (mt_runf (op =$))[
("5_130fl", uft, t5_130, t5_130),
("5_140fl", uft, t5_140, t5_140),
("5_150fl", uft, t5_150, t5_150),
("5_160fl", uft, t5_160, t5_160)
];

set_flag("pp_let_as_lambda", false)

end;
=TEX

=SML
let
val t5_170 =	¬let f a b c d e = x in y®;
val a5_170 =	["let f a b c d e = x in y"];
val l5_170 =	["let f = (Ì a b c d e· x) in y"];

val t5_180 =	¬let f (a1, a2) (b1, b2) (c1, c2) (d1, d2) (e1, e2) = x in y®;
val a5_180 =	["let f (a1, a2) (b1, b2) (c1, c2) (d1, d2) (e1, e2) = x in y"];
val l5_180 =	["let f = (Ì (a1, a2) (b1, b2) (c1, c2) (d1, d2) (e1, e2)· x) in y"];

in
store_mt_results_show mt_run[
("5_170", ft, t5_170, a5_170),
("5_180", ft, t5_180, a5_180)
];

store_mt_results_show (mt_runf (op =$))[
("5_170f", uft, t5_170, t5_170),
("5_180f", uft, t5_180, t5_180)
];

set_flag("pp_let_as_lambda", true);

store_mt_results_show mt_run[
("5_170l", ft, t5_170, l5_170),
("5_180l", ft, t5_180, l5_180)
];

store_mt_results_show (mt_runf (op =$))[
("5_170fl", uft, t5_170, t5_170),
("5_180fl", uft, t5_180, t5_180)
];

set_flag("pp_let_as_lambda", false)

end;
=TEX

Local operators and binders.
Tests 5_190--5_210 are of well formed uses.
Tests 5_230--5_250 have extra arguments and need brackets.
Tests 5_260--5_290 have insufficient arguments and need dollar signs.

=SML
let
val t5_190 =	¬let f_pre a = b in f_pre e®;
val a5_190 =	["let f_pre a = b in f_pre e"];
val t5_200 =	¬let f_post a = b in f_post e®;
val a5_200 =	["let a f_post = b in e f_post"];
val t5_210 =	¬let f_inf a b = c in f_inf d e®;
val a5_210 =	["let a f_inf b = c in d f_inf e"];

val t5_230 =	¬let f_pre a c = b in f_pre e f®;
val a5_230 =	["let (f_pre a) c = b in (f_pre e) f"];
val t5_240 =	¬let f_post a c = b in f_post f e®;
val a5_240 =	["let (a f_post) c = b in (f f_post) e"];
val t5_250 =	¬let f_inf a b d = c in f_inf d e g®;
val a5_250 =	["let (a f_inf b) d = c in (d f_inf e) g"];

val t5_260 =	¬let f_pre = b in f_pre e®;
val a5_260 =	["let $f_pre = b in f_pre e"];
val t5_270 =	¬let f_post = b in f_post e®;
val a5_270 =	["let $f_post = b in e f_post"];
val t5_280 =	¬let f_inf a = c in f_inf d e®;
val a5_280 =	["let $f_inf a = c in d f_inf e"];
val t5_290 =	¬let f_inf = c in f_inf d e®;
val a5_290 =	["let $f_inf = c in d f_inf e"];

in

declare_prefix(300, "f_pre");
declare_postfix(300, "f_post");
declare_infix(300, "f_inf");

store_mt_results_show mt_run[
("5_190", ft, t5_190, a5_190),
("5_200", ft, t5_200, a5_200),
("5_210", ft, t5_210, a5_210),
("5_230", ft, t5_230, a5_230),
("5_240", ft, t5_240, a5_240),
("5_250", ft, t5_250, a5_250),
("5_260", ft, t5_260, a5_260),
("5_270", ft, t5_270, a5_270),
("5_280", ft, t5_280, a5_280),
("5_290", ft, t5_290, a5_290)
];

store_mt_results_show (mt_runf (op =$))[
("5_190f", uft, t5_190, t5_190),
("5_200f", uft, t5_200, t5_200),
("5_210f", uft, t5_210, t5_210),
("5_230f", uft, t5_230, t5_230),
("5_240f", uft, t5_240, t5_240),
("5_250f", uft, t5_250, t5_250),
("5_260f", uft, t5_260, t5_260),
("5_270f", uft, t5_270, t5_270),
("5_280f", uft, t5_280, t5_280),
("5_290f", uft, t5_290, t5_290)
];

declare_nonfix "f_pre";
declare_nonfix "f_post";
declare_nonfix "f_inf"

end;
=TEX

The local binder cannot be fully tested until the parser
accepts aliases for equality in the definitional part of
a let term. 

=SML
let
val t5_220 =	¬let (f_bind:('a ­ 'b) ­ BOOL) a = b in f_bind (Ì c · d)®;
val a5_220 =	["let $f_bind a ¤ b in f_bind c· d"];

in

declare_binder "f_bind";

store_mt_results_show mt_run[
("5_220", ft, t5_220, a5_220)
];

(*
store_mt_results_show (mt_runf (op =$))[
("5_220f", uft, t5_220, t5_220)
];
*)

declare_nonfix "f_bind"

end;
=TEX

\subsection{More `if' `let' and Binder Terms}

These cases gave problems at one stage in the development.

=SML
let
val t6_010 =	¬a±(µb·b)±c®;
val a6_010 =	["a ± (µ b· b) ± c"];
val t6_020 =	¬(a±(µb·b))±c®;
val a6_020 =	["(a ± (µ b· b)) ± c"];
val t6_030 =	¬a±((µb·b)±c)®;
val a6_030 =	["a ± (µ b· b) ± c"];
val t6_040 =	¬a±b±c±d±e±f±g±h±i®;
val a6_040 =	["a ± b ± c ± d ± e ± f ± g ± h ± i"];
val t6_050 =	¬(((((((a±b)±c)±d)±e)±f)±g)±h)±i®;
val a6_050 =	["(((((((a ± b) ± c) ± d) ± e) ± f) ± g) ± h) ± i"];
val t6_060 =	¬a±(b±(c±(d±(e±(f±(g±(h±i)))))))®;
val a6_060 =	["a ± b ± c ± d ± e ± f ± g ± h ± i"];
val t6_070 =	¬(((((((a±b)±c)±(µ x · x))±e)±f)±g)±h)±i®;
val a6_070 =	["(((((((a ± b) ± c) ± (µ x· x)) ± e) ± f) ± g) ± h) ± i"];
val t6_080 =	¬a±(b±(c±((µ x · x)±(e±(f±(g±(h±i)))))))®;
val a6_080 =	["a ± b ± c ± (µ x· x) ± e ± f ± g ± h ± i"];
val t6_090 =	¬((((((((µa·a)±(µb·b))±(µc·c))±(µd·d))±(µe·e))
			±(µf·f))±(µg·g))±(µh·h))±(µi·i)®;
val a6_090 =	["((((((((µ a· a) ± (µ b· b)) ± (µ c· c)) ± (µ d· d)) ±"
		^ " (µ e· e)) ± (µ f· f)) ± (µ g· g)) ± (µ h· h)) ± (µ i· i)"];
val t6_100 =	¬(µa·a)±((µb·b)±((µc·c)±((µd·d)±((µe·e)±
		((µf·f)±((µg·g)±((µh·h)±(µi·i))))))))®;
val a6_100 =	["(µ a· a) ± (µ b· b) ± (µ c· c) ± (µ d· d) ± (µ e· e) ±"
		^ " (µ f· f) ± (µ g· g) ± (µ h· h) ± (µ i· i)"];

in

store_mt_results_show mt_run[
("6_010", ft, t6_010, a6_010),
("6_020", ft, t6_020, a6_020),
("6_030", ft, t6_030, a6_030),
("6_040", ft, t6_040, a6_040),
("6_050", ft, t6_050, a6_050),
("6_060", ft, t6_060, a6_060),
("6_070", ft, t6_070, a6_070),
("6_080", ft, t6_080, a6_080),
("6_090", ft, t6_090, a6_090),
("6_100", ft, t6_100, a6_100)
];

store_mt_results_show (mt_runf (op =$))[
("6_010f", uft, t6_010, t6_010),
("6_020f", uft, t6_020, t6_020),
("6_030f", uft, t6_030, t6_030),
("6_040f", uft, t6_040, t6_040),
("6_050f", uft, t6_050, t6_050),
("6_060f", uft, t6_060, t6_060),
("6_070f", uft, t6_070, t6_070),
("6_080f", uft, t6_080, t6_080),
("6_090f", uft, t6_090, t6_090),
("6_100f", uft, t6_100, t6_100)
]
end;
=TEX

=SML
let
val t6_110 =	¬ff (if a then b else c)®;
val a6_110 =	["ff (if a then b else c)"];
val t6_120 =	¬ff (if a then b else c) (if d then e else f) (if g then h else i)®;
val a6_120 =	["ff (if a then b else c) (if d then e else f) (if g then h else i)"];
val t6_130 =	¬((ff (if a then b else c)) (if d then e else f)) (if g then h else i)®;
val a6_130 =	["ff (if a then b else c) (if d then e else f) (if g then h else i)"];
val t6_140 =	¬ff ((if a then b else c) ((if d then e else f) (if g then h else i)))®;
val a6_140 =	["ff ((if a then b else c) ((if d then e else f) (if g then h else i)))"];

in

store_mt_results_show mt_run[
("6_110", ft, t6_110, a6_110),
("6_120", ft, t6_120, a6_120),
("6_130", ft, t6_130, a6_130),
("6_140", ft, t6_140, a6_140)
];

store_mt_results_show (mt_runf (op =$))[
("6_110f", uft, t6_110, t6_110),
("6_120f", uft, t6_120, t6_120),
("6_130f", uft, t6_130, t6_130),
("6_140f", uft, t6_140, t6_140)
]
end;
=TEX

=SML
let
val t6_150 =	¬ff (Ì a · b)®;
val a6_150 =	["ff (Ì a· b)"];
val t6_160 =	¬ff (Ì a · b) (Ì c · d) (Ì e · f)®;
val a6_160 =	["ff (Ì a· b) (Ì c· d) (Ì e· f)"];
val t6_170 =	¬((ff (Ì a · b)) (Ì c · d)) (Ì e · f)®;
val a6_170 =	["ff (Ì a· b) (Ì c· d) (Ì e· f)"];
val t6_180 =	¬ff ((Ì a · b) ((Ì c · d) (Ì e · f)))®;
val a6_180 =	["ff ((Ì a· b) ((Ì c· d) (Ì e· f)))"];

in

store_mt_results_show mt_run[
("6_150", ft, t6_150, a6_150),
("6_160", ft, t6_160, a6_160),
("6_170", ft, t6_170, a6_170),
("6_180", ft, t6_180, a6_180)
];

store_mt_results_show (mt_runf (op =$))[
("6_150f", uft, t6_150, t6_150),
("6_160f", uft, t6_160, t6_160),
("6_170f", uft, t6_170, t6_170),
("6_180f", uft, t6_180, t6_180)
]
end;
=TEX

=SML
let
val t6_190 =	¬ff (let a = b in c)®;
val a6_190 =	["ff (let a = b in c)"];
val t6_200 =	¬ff (let a = b in c) (let d = e in f) (let g = h in i)®;
val a6_200 =	["ff (let a = b in c) (let d = e in f) (let g = h in i)"];
val t6_210 =	¬((ff (let a = b in c)) (let d = e in f)) (let g = h in i)®;
val a6_210 =	["ff (let a = b in c) (let d = e in f) (let g = h in i)"];
val t6_220 =	¬ff ((let a = b in c) ((let d = e in f) (let g = h in i)))®;
val a6_220 =	["ff ((let a = b in c) ((let d = e in f) (let g = h in i)))"];

in

store_mt_results_show mt_run[
("6_190", ft, t6_190, a6_190),
("6_200", ft, t6_200, a6_200),
("6_210", ft, t6_210, a6_210),
("6_220", ft, t6_220, a6_220)
];

store_mt_results_show (mt_runf (op =$))[
("6_190f", uft, t6_190, t6_190),
("6_200f", uft, t6_200, t6_200),
("6_210f", uft, t6_210, t6_210),
("6_220f", uft, t6_220, t6_220)
]
end;
=TEX

\subsection{Lists and Sets}

Set Comprehension.

=SML
let
val t7_010 =	¬{a|b}®;
val a7_010 =	["{a|b}"];
val t7_020 =	¬{(a,b,c)|a±(µb·b)±c}®;
val a7_020 =	["{(a, b, c)|a ± (µ b· b) ± c}"];

in

store_mt_results_show mt_run[
("7_010", ft, t7_010, a7_010),
("7_020", ft, t7_020, a7_020)
];

store_mt_results_show (mt_runf (op =$))[
("7_010f", uft, t7_010, t7_010),
("7_020f", uft, t7_020, t7_020)
]
end;
=TEX

=SML
let
val t7_030 =	¬{}®;
val a7_030 =	["{}"];
val t7_040 =	¬{a; b; c; d; e}®;
val a7_040 =	["{a; b; c; d; e}"];
val t7_041 =	¬{a b}®;
val a7_041 =	["{a b}"];
val t7_042 =	¬{a}®;
val a7_042 =	["{a}"];

in

store_mt_results_show mt_run[
("7_030", ft, t7_030, a7_030),
("7_040", ft, t7_040, a7_040),
("7_041", ft, t7_041, a7_041),
("7_042", ft, t7_042, a7_042)
];

store_mt_results_show (mt_runf (op =$))[
("7_030f", uft, t7_030, t7_030),
("7_040f", uft, t7_040, t7_040),
("7_041f", uft, t7_041, t7_041),
("7_042f", uft, t7_042, t7_042)
]
end;
=TEX

=SML
let
val t7_050 =	¬[]®;
val a7_050 =	["[]"];
val t7_060 =	¬[a; b; c; d; e]®;
val a7_060 =	["[a; b; c; d; e]"];
val t7_070 =	¬[a]®;
val a7_070 =	["[a]"];
val t7_080 =	¬f []®;
val a7_080 =	["f []"];
val t7_090 =	¬g [a]®;
val a7_090 =	["g [a]"];

in

store_mt_results_show mt_run[
("7_050", ft, t7_050, a7_050),
("7_060", ft, t7_060, a7_060),
("7_070", ft, t7_070, a7_070),
("7_080", ft, t7_080, a7_080),
("7_090", ft, t7_090, a7_090)
];

store_mt_results_show (mt_runf (op =$))[
("7_050f", uft, t7_050, t7_050),
("7_060f", uft, t7_060, t7_060),
("7_070f", uft, t7_070, t7_070),
("7_080f", uft, t7_080, t7_080),
("7_090f", uft, t7_090, t7_090)
]
end;
=TEX

\subsection{Strings and Characters}

We cannot fully test strings with the standard pattern of tests used in
this document.  In particular, newline characters cannot tested via
$uft$ because the text that is generated holds a string containing a
newline, this is then passed to $use\-\_string$ which passes it on to the
compiler.  Thus the compiler reads a string containing a newline
character which is not valid Standard~ML.  Test $8_010$ gives a good
test of various strings, test $8_030$ tests the handling of
back-slashes in strings, including newlines.  Test $8_030$ cannot use
function $uft$.

=SML
let
val t8_010 =	
¬f "" T "a" T "a b c d e f g h i j k l m n o p q r s t u v w x y z" T®;
val a8_010 =	
["f \"\" T \"a\" T \"a b c d e f g h i j k l m n o p q r s t u v w x y z\" T"];
val t8_020 =	¬`a`®;
val a8_020 =	["`a`"];
val t8_030 =	¬f "\t\n\234" a®;
val a8_030 =	["f \"\t\n\234\" a"];

in

store_mt_results_show mt_run[
("8_010", ft, t8_010, a8_010),
("8_020", ft, t8_020, a8_020),
("8_030", ft, t8_030, a8_030)
];

store_mt_results_show (mt_runf (op =$))[
("8_010f", uft, t8_010, t8_010),
("8_020f", uft, t8_020, t8_020)
(* No test of 8_030 with $uft$ *)
]
end;
=TEX

\subsection{Incomplete Uses of HOL Constants}

Examples of HOL constants used for concrete syntax items but which are
insufficiently parameterised and so must be printed in their function
application form.

=SML
let
val t9_010 =	¬Uncurry f®;
val a9_010 =	["Uncurry f"];
val t9_020 =	¬Uncurry f a®;
val a9_020 =	["Uncurry f a"];
val t9_030 =	¬Uncurry f a b®;
val a9_030 =	["Uncurry f a b"];
val t9_040 =	¬Uncurry f a b c®;
val a9_040 =	["Uncurry f a b c"];
in
store_mt_results_show mt_run[
("9_010", ft, t9_010, a9_010),
("9_020", ft, t9_020, a9_020),
("9_030", ft, t9_030, a9_030),
("9_040", ft, t9_040, a9_040)
];

store_mt_results_show (mt_runf (op =$))[
("9_010f", uft, t9_010, t9_010),
("9_020f", uft, t9_020, t9_020),
("9_030f", uft, t9_030, t9_030),
("9_040f", uft, t9_040, t9_040)
]
end;
=TEX

=SML
let
val App(t9_050, _) = dest_simple_term ¬if a then b else c®;
val a9_050 =	["Cond a b"];
val App(t9_060, _) = dest_simple_term t9_050;
val a9_060 =	["Cond a"];
val App(t9_070, _) = dest_simple_term t9_060;
val a9_070 =	["Cond"];
in
store_mt_results_show mt_run [
("9_050", ft, t9_050, a9_050),
("9_060", ft, t9_060, a9_060),
("9_070", ft, t9_070, a9_070)
];

store_mt_results_show (mt_runf (op =$))[
("9_050f", uft, t9_050, t9_050),
("9_060f", uft, t9_060, t9_060),
("9_070f", uft, t9_070, t9_070)
]
end;
=TEX

=SML
let
val App(t9_080, _) =	dest_simple_term ¬let a (b, c) = d in e®;
val a9_080 =	["Let (Ì a· e)"];
val App(t9_090, _) =	dest_simple_term ¬let a (b, c) = d and (e, f) = g in h®;
val a9_090 =	["Let (let a (b, c) = d in Ì (e, f)· h)"];
in
store_mt_results_show mt_run [
("9_080", ft, t9_080, a9_080),
("9_090", ft, t9_090, a9_090)
];

set_flag("pp_show_HOL_types", true);

store_mt_results_show (mt_runf (op =$))[
("9_080f", uft, t9_080, t9_080),
("9_090f", uft, t9_090, t9_090)
];

set_flag("pp_show_HOL_types", false)

end;
=TEX

Set comprehensions.
In the short term expect test $9_100f$ to fail, this is because
in $t9_100$ we use $mk_const$ but at the call of $uft$ the name
$SetComp$ is not declared and so is set up as a variable.

=SML
let
val tv1 = mk_vartype "'tv1";
val tv2 = mk_vartype "'tv2";
val v1 = mk_var("v1", tv1);
val v2 = mk_var("v2", tv2);
val t9_100 = mk_app(mk_const("SetComp",mk_­_type(mk_­_type(
			mk_¸_type(tv1,tv2),BOOL),
			mk_ctype("SET",[mk_¸_type(tv1,tv2)]))),
		mk_var("v",mk_­_type(mk_¸_type(tv1,tv2),BOOL)));
val a9_100 = ["SetComp v"];
in
store_mt_results_show mt_run [
("9_100", ft, t9_100, a9_100)
];

set_flag("pp_show_HOL_types", true);

store_mt_results_show (mt_runf (op =$))[
("9_100f", uft, t9_100, t9_100)
];

set_flag("pp_show_HOL_types", false)

end;
=TEX

\subsection{Other Formatting Routines}

The preceding tests have exercised the internals of all of the
formatting routines.  This group of tests exercises the various
interfaces.

=SML
let
val t10_tm =	¬x±y®;
val t10_ty =	¬: 'a ­ 'b®;

in

store_mt_results_show mt_run [
("10_010t", PrettyPrinter.format_term true,			t10_tm, ["¬x ± y®"]),
("10_010f", PrettyPrinter.format_term false,			t10_tm, ["x ± y"]),
("10_020t", PrettyPrinter.format_term1 true		80,	t10_tm, ["¬x ± y®"]),
("10_020f", PrettyPrinter.format_term1 false	80,	t10_tm, ["x ± y"])];

store_mt_results_show mt_run [
("10_030t", PrettyPrinter.format_type1 true		80,	t10_ty, ["¬:'a ­ 'b®"]),
("10_030f", PrettyPrinter.format_type1 false		80,	t10_ty, ["'a ­ 'b"])
]

end;
=TEX

\subsection{Coup de Gr\^ace}

An attempt to get all of the productions in the grammar
of~\cite{DS/FMU/IED/DEF001} into one HOL term.

=SML
open_theory "list";
open_theory "sets";
Value	(new_type("TRIPLE", 3))				handle Fail _ => Nil;
	declare_postfix (100, "+++")				handle Fail _ => ();

Value	(new_type("XX", 1))				handle Fail _ => Nil;

=TEX

=SML
val t_cdg = ¬	¶ ka : ( '8 ­ '9 ­ '10 ) · kb
		let ha = ( hb : '4 ) in ( hc : BOOL ­ '11 )
		µ (ga : '12, gb : '12) (gc : '12, gd : '12, ge : '12) ; gf gg : '2 ­ '3 · gh
		let ia ((ib, ic), (id, ie)) = (ig : ('5, '6, '7) TRIPLE, [ib : '1; ic; id; ie])
			and ja jb jc jd = [fa = ³ fb; ³ fc ; (³ fd) +++ ; jb ; jc ; jd ]
		in { (la, lb) | lc (³ (la : '14 LIST ­ BOOL) []) (lb : '15)
			if ma then {} else ( { mb ; mc ; md } : ('1 SET) ) }
	®;

val a_cdg = ["¶ ka· kb " ^
		"(let ha = hb in hc " ^
		"(µ (ga, gb) (gc, gd, ge) gf gg· gh " ^
		"(let ia ((ib, ic), id, ie) = (ig, [ib; ic; id; ie]) " ^
		"and ja jb jc jd = [fa ¤ ³ fb; ³ fc; (³ fd) +++; jb; jc; jd] " ^
		"in {(la, lb)|lc (³ la []) lb " ^
		"(if ma then {} else {mb; mc; md})})))"];

val a_cdg_br = ["¶ ka· (kb " ^
	"(let ha = hb in " ^
	"(hc " ^
	"(µ (ga, gb) (gc, (gd, ge)) gf gg· " ^
	"(gh " ^
	"(let (ia ((ib, ic), (id, ie))) = (ig, [ib; ic; id; ie]) and (ja jb jc jd) = " ^
	"[fa ¤ (³ fb); ³ fc; (³ fd) +++; jb; jc; jd] in " ^
	"{(la, lb)|lc (³ (la [])) lb (if ma then {} else {mb; mc; md})})))" ^
	")))"];

val a_cdg_br_ty = ["¶ (ka : ('8 ­ ('9 ­ '10)))· ((kb : ('11 ­ BOOL)) " ^
	"(let (ha : '4) = (hb : '4) in " ^
	"((hc : (BOOL ­ '11)) " ^
	"(µ ((ga : '12), (gb : '12)) ((gc : '12), ((gd : '12), (ge : '12))) " ^
	"(gf : ('2 ­ '3)) (gg : ('2 ­ '3))· " ^
	"((gh : ((('14 LIST ­ BOOL) ¸ '15) SET ­ BOOL)) " ^
	"(let " ^
	"((ia : ((('1 ¸ '1) ¸ ('1 ¸ '1)) ­ (('5, '6, '7) TRIPLE ¸ '1 LIST))) " ^
	"(((ib : '1), (ic : '1)), ((id : '1), (ie : '1)))) = " ^
	"((ig : ('5, '6, '7) TRIPLE), [(ib : '1); (ic : '1); (id : '1); (ie : '1)]) and " ^
	"((ja : (BOOL ­ (BOOL ­ (BOOL ­ BOOL LIST)))) " ^
	"(jb : BOOL) " ^
	"(jc : BOOL) " ^
	"(jd : BOOL)) = " ^
	"[(fa : BOOL) ¤ (³ (fb : BOOL)); ³ (fc : BOOL); (³ (fd : BOOL)) +++; " ^
	"(jb : BOOL); (jc : BOOL); (jd : BOOL)] in " ^
	"{((la : ('14 LIST ­ BOOL)), (lb : '15))" ^
	"|(lc : (BOOL ­ ('15 ­ ('1 SET ­ BOOL)))) " ^
	"(³ ((la : ('14 LIST ­ BOOL)) [])) (lb : '15) " ^
	"(if (ma : BOOL) " ^
	"then {} " ^
	"else {(mb : '1); (mc : '1); (md : '1)}" ^
	")}))))))"];

val a_cdg_ty = ["¶ (ka : ('8 ­ '9 ­ '10))· (kb : ('11 ­ BOOL)) " ^
	"(let (ha : '4) = (hb : '4) in " ^
	"(hc : (BOOL ­ '11)) " ^
	"(µ ((ga : '12), (gb : '12)) ((gc : '12), (gd : '12), (ge : '12)) " ^
	"(gf : ('2 ­ '3)) (gg : ('2 ­ '3))· " ^
	"(gh : ((('14 LIST ­ BOOL) ¸ '15) SET ­ BOOL)) " ^
	"(let " ^
	"(ia : (('1 ¸ '1) ¸ '1 ¸ '1 ­ ('5, '6, '7) TRIPLE ¸ '1 LIST)) " ^
	"(((ib : '1), (ic : '1)), (id : '1), (ie : '1)) = " ^
	"((ig : ('5, '6, '7) TRIPLE), [(ib : '1); (ic : '1); (id : '1); (ie : '1)]) and " ^
	"(ja : (BOOL ­ BOOL ­ BOOL ­ BOOL LIST)) (jb : BOOL) (jc : BOOL) (jd : BOOL) = " ^
	"[(fa : BOOL) ¤ ³ (fb : BOOL); ³ (fc : BOOL); (³ (fd : BOOL)) +++; " ^
	"(jb : BOOL); (jc : BOOL); (jd : BOOL)] in " ^
	"{((la : ('14 LIST ­ BOOL)), (lb : '15))" ^
	"|(lc : (BOOL ­ '15 ­ '1 SET ­ BOOL)) " ^
	"(³ (la : ('14 LIST ­ BOOL)) []) (lb : '15) " ^
	"(if (ma : BOOL) then {} else {(mb : '1); (mc : '1); (md : '1)})}))" ^
	")"];

set_line_length 5000;
set_flag("pp_add_brackets", false);
set_flag("pp_show_HOL_types", false);
store_mt_results_show mt_run [("cdg_010", ft, t_cdg, a_cdg)];

set_flag("pp_add_brackets", true);
store_mt_results_show mt_run [("cdg_020", ft, t_cdg, a_cdg_br)];

set_flag("pp_show_HOL_types", true);
store_mt_results_show mt_run [("cdg_030", ft, t_cdg, a_cdg_br_ty)];

set_flag("pp_add_brackets", false);
store_mt_results_show mt_run [("cdg_040", ft, t_cdg, a_cdg_ty)];

set_flag("pp_show_HOL_types", false);
=TEX

\section{SUMMARY OF RESULTS}

=SML
set_line_length 80;

diag_string(summarize_mt_results());
=TEX

\end{document}


