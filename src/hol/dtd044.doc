=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST Project}  %% Mandatory field
\TPPtitle{Detailed Design for the Theory of Sets}  %% Mandatory field
\def\TPPheadtitle{Detailed Design for the \cr
Theory of Sets}
\TPPref{DS/FMU/IED/DTD044}  %% Mandatory field
\def\SCCSversion{$Revision$ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}  %% Mandatory field
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{K. Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{R.D. Arthan & WIN01\\K. Blackburn & WIN01}
\TPPauthorisation{R.D. Arthan & FST Team Leader}
\TPPabstract{This document gives a detailed design for the 
theory ``set''.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item [Issue 1.1]
First issue.
\end{description}
\subsection{Changes Forecast}
Populating theory with more theorems.

\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains a detailed design
for the theory ``set'',
called for in \cite{DS/FMU/IED/HLD011}.
The design is implemented in \cite{DS/FMU/IED/IMP044}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains the detailed design for the theor``sum''.
This defines the type $SET$, and the operators upon it.

\subsubsection{Dependencies}
This document depends on \cite{DS/FMU/IED/IMP037},
and the theory design tools of \cite{DS/FMU/IED/DTD035}.
\subsubsection{Deficiencies}
None.
\subsubsection{Possible Enhancements}
The theory is missing some already obvious theorem
members, and it may be appropriate to add others 
as development and application work progresses.
There should also be some tactics and inference rules.
\section{THE THEORY ``set''}
\subsection{Design of the theory ``set''}
=THDOC
req_name "set" (Value "pair");
=DESCRIBE
The theory ``‚set·'' defines a type of sets, operators upon the type,
and some assocaietd theories.
=ENDDOC
=THDOC
req_const("IsSetRep",ª:('a ã BOOL) ã BOOLº);
req_defn("IsSetRep",([],ªÑ (mem:'a ã ('a ã BOOL) ã BOOL)
		(setcomp:('a ã BOOL) ã ('a ã BOOL)) é 
	É (x : 'a) (p:'a ã BOOL) (S1: 'a ã BOOL) (S2 : 'a ã BOOL)é
	IsSetRep (setcomp S1) Ä
	(mem x (setcomp(ç v ép v)) Ç p x) Ä
	(IsSetRep S1 Ä IsSetRep S2 ä
	 ((S1 = S2) Ç (É x:'aé mem x S1 Ç mem x S2)))º));
=DESCRIBE
The representation type of sets, as given by
$‚IsSetRep·$ is just any function from
the type of objects of the set to ª:BOOLº.
Its definition is saved under the key ``‚IsSetRep·''.
=ENDDOC
=THDOC
req_type("SET",1);
req_defn("SET",([],ªÑ fé TypeDefn IsSetRep fº));
=DESCRIBE
The type of sets, $‚SET·$ is given by the representation
function $IsSetRep$.
=ENDDOC
=THDOC
req_const("SetComp",ª:('a ã BOOL) ã 'a SETº);
req_binder "SetComp";
req_const("ù",ª:'a ã 'a SET ã BOOLº);
req_infix(160,"ù");
list_req_defn(["SetComp","ù"],
	([],ªÉ (x : 'a) (p:'a ã BOOL) (S1: 'a SET) (S2 : 'a SET)é
	(x ù {v | p v} Ç p x) Ä
	((S1 = S2) Ç (É x:'aé x ù S1 Ç x ù S2))
	º));
=DESCRIBE
The HOL constant $‚SetComp·$ is a binder for forming set comprehensions.
The HOL constant $‚ù·$ is set membership.
=ENDDOC
=THDOC
req_const("Empty",ª:'a SETº);
req_const("Insert",ª:'a ã 'a SET ã 'a SETº);
list_req_defn(["Empty","Insert"],
	([],ªÉ (x : 'a) (y : 'a) (S: 'a SET) é
	å(x ù {}) Ä
	(x ù Insert y S Ç (x = y Å x ù S))º));
=DESCRIBE
The HOL constant $‚Empty·$ is the empty set.
The HOL constant $‚Insert·$ inserts a object into a set.
=ENDDOC
=THDOC
req_thm("set_clauses",([], ª
	É (x : 'a) (y : 'a) (p:'a ã BOOL) (S1: 'a SET) (S2 : 'a SET)é
	å(x ù {}) Ä
	({v | F} = {}) Ä
	(x ù {v | T}) Ä 
	(x ù {v | p v} Ç p x) Ä
	(x ù {v | v = y} Ç (x = y)) Ä
	((S1 = S2) Ç (É x:'aé x ù S1 Ç x ù S2))º));
=DESCRIBE
``$‚set\_clauses·$'' is a miscellaneous collection of theorems about sets, all appropriate
for rewriting, and some drawn from the definitions.
Note that we do note need a direct rule for $ª{v | y = v}º$,
as other clauses will give it indirectly.
The definition of $Insert$ is excluded as there will sometimes
be good reasons why its form of rewriting won't be desired.
=ENDDOC

\subsection{Signature of the theory ``set''}
=DOC
signature ‚SetTheory· = sig
	val ‚set_clauses· : THM;
	val ‚insert_def· : THM;
end;
=DESCRIBE
This is the signature in which we declare theory ``set''.
$set\_clauses$ is bound the the theorem saved with the same name as
key,
$insert\_def$ is bound to the definition of $Insert$, saved with key $Insert$.
=ENDDOC
=TEX
\section{TEST POLICY}
Any functions given in this document should be tested according to the
general criteria set out in \cite{DS/FMU/IED/PLN008}, using the
tests in \cite{DS/FMU/IED/MDT044}.
The theories produced should be checked by the theory design tools
of \cite{DS/FMU/IED/DTD035}, against the theory design provided.
=TEX
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}
