=IGN
********************************************************************************
dtd044.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
%  %Z% 2002/10/17 16:20:01 1.19 dtd044.doc,v
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST Project}  %% Mandatory field
\TPPtitle{Detailed Design for the Theory of Sets}  %% Mandatory field
\def\TPPheadtitle{Detailed Design for the \cr
Theory of Sets}
\TPPref{DS/FMU/IED/DTD044}  %% Mandatory field
\def\SCCSversion{1.19 %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\def\SCCSdate{\FormatDate{2002/10/17 16:20:01 %
}}
\TPPdate{\SCCSdate}  %% Mandatory field
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{K. Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{R.D. Arthan & WIN01\\K. Blackburn & WIN01}
\TPPauthorisation{R.D. Arthan & FST Team Leader}
\TPPabstract{This document gives a detailed design for the
theory ``sets''.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item [Issue 1.1,1.2]
First drafts.
\item [Issue 1.3]
Correcting typos.
\item [Issue 1.4]
Changed to match \cite{DS/FMU/IED/HLD011}.
\item [Issue 1.5]
Changes following comments.
\item [Issue 1.6]
Simplified requirement on $IsSetRep$.

\item[Issue 1.7, \FormatDate{92/01/20} ] Updated to use new fonts.
\item[Issue 1.8 (23rd January 1992)]
Definitional mechanisms have
been changed to take lists of keys, rather than single ones.
\item[Issue 1.9 (7th February 1992)]
Made $basic\_hol$ a parent.
\item[Issue 1.10 to 1.13]

The main purpose of the changes at this issue is to introduce new proof contexts.
The contexts introduced are $sets\_ext$ and $sets\_alg$.
$sets\_ext$ is a proof context suitable for automatic proof of results in this theory using extensionality of sets and elementary reasoning.
$sets\_alg$ is a proof context suitable for automatic simplification when conducting proofs which involve but are not primarily concerned with set theory.

In order to be able to introduce these proof contexts we have also included the definitions of the conversions which they use (after renaming these are $ç\_comp\_conv$ and $ç\_enum\_set\_conv$), and various additional theorems which are used by the proof contexts.

Use of correct quotation symbols.
\item[Issue 1.14 (18th May 1992)]
Moved mention of proof contexts out of document.
\item [Issue 1.15 (27th May 1992)]
Added $sets\_simple\_∂\_conv$.

\item[\FormatDate{92/08/24}, issue 1.16~]
	Add indexing characters.

%\item[\FormatDate{2002/10/17 16:20:01%
%}, issue \SCCSversion~]
	Added conversions for equality and inclusion.
\item[Issue 1.18] Copyright and banner updates for open source release.
\item[Issue 1.19] PPHol-specific updates for open source release
\item[Issue 1.20] HOL now supports left-associative operators.
\item[Issue 1.21] Added symmetric difference operator.
\end{description}
\subsection{Changes Forecast}
The proof contexts should perhaps be built from $basic\_hol$ proof contexts rather than $pair$.
An existence prover should be included.

\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains a detailed design
for the theory ``sets'',
called for in \cite{DS/FMU/IED/HLD011}.
The design is implemented in \cite{DS/FMU/IED/IMP044}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains the detailed design for the theory ``sets''.
This defines the type $SET$, and the operators upon it.

\subsubsection{Dependencies}
This document depends on \cite{DS/FMU/IED/IMP040},
and the theory design tools of \cite{DS/FMU/IED/DTD035}.
\subsubsection{Deficiencies}
None known.
\subsubsection{Possible Enhancements}
The theory is missing some already obvious theorem
members, and it may be appropriate to add others
as development and application work progresses.
There should also be some tactics and inference rules.
However, when considering further theorems one should be aware of the power of just rewriting with definitions, $sets\_clauses$, and placing $(simple\_)ç\_comp\_conv$ in the list of basic conversions (see $sets\_rewrite\_convs$).
Many ``obvious'' theorems, such as $Ù\ µ\ a\ ∑a\ Ä\ a$,
can be proved, and therefore bypassed with such an approach.
The approach only fails if one wishes to keep the derived
set operators ``present'' in the goal.
\section{THE THEORY ``sets''}
\subsection{Design of the theory ``sets''}
=THDOC
req_name "sets" (Value "basic_hol");
=DESCRIBE
The theory ``€sets›'' defines a type of sets, operators upon the type,
and some associated theories.
=ENDDOC
=THDOC
req_const(€"IsSetRep"›,î('a ≠ BOOL) ≠ BOOLÆ);
req_defn(["IsSetRep","is_set_rep_def"],([],¨IsSetRep = Ã x:'a ≠ BOOL∑ TÆ));
=DESCRIBE
The representation type of sets, as given by
$IsSetRep$ is just any function from
the type of objects of the set to îBOOLÆ.
Its definition is saved under the key ``IsSetRep''.
=ENDDOC
=THDOC
req_type(€"SET"›,1);
req_defn(["SET","set_def"],([],¨∂ f:'a SET ≠ 'a ≠ BOOL∑ TypeDefn IsSetRep fÆ));
=DESCRIBE
The type of sets, $SET$ is given by the representation
function $IsSetRep$.
=ENDDOC
=THDOC
req_const(€"SetComp"›,î('a ≠ BOOL) ≠ 'a SETÆ);
req_binder "SetComp";
req_const(€"ç"›,î'a ≠ 'a SET ≠ BOOLÆ);
req_infix(230,"ç");
req_defn([€"SetComp"›,"ç","set_comp_def"],
	([],¨µ (x : 'a) (p:'a ≠ BOOL) (a: 'a SET) (b : 'a SET)∑
	(x ç {v | p v} § p x) ±
	((a = b) § (µ x:'a∑ x ç a § x ç b))
	Æ));
=DESCRIBE
The HOL constant $SetComp$ is a binder for forming set comprehensions.
The HOL constant $ç$ is set membership.
=ENDDOC
=THDOC
req_const(€"Empty"›,î'a SETÆ);
req_const(€"Universe"›,î'a SETÆ);
req_const(€"Insert"›,î'a ≠ 'a SET ≠ 'a SETÆ);
req_defn(["Empty","Universe","Insert","insert_def"],
	([],¨µ (x : 'a) (y : 'a) (a: 'a SET) ∑
		≥(x ç {})
	±	(x ç Universe)
	±	(x ç Insert y a § (x = y ≤ x ç a))Æ));
=DESCRIBE
The HOL constant $Empty$ is the empty set.
The HOL constant $Universe$ is the set of all values of a type.
The HOL constant $Insert$ inserts an object into a set.
=ENDDOC
=THDOC
req_thm(€"sets_clauses"›,([], ¨
	µ (x : 'a) (y : 'a) (p:'a ≠ BOOL) (q : BOOL)∑
		(x ç {} § F)
	±	(x ç Universe § T)
	±	((x ç {v | q}) § q)
	±	(x ç {v | p v} § p x)
	±	(x ç {v | v = y} § (x = y))
	±	(x ç {y} § (x = y))Æ));
=DESCRIBE
``$sets\_clauses$'' is a miscellaneous collection of theorems about sets, all appropriate for rewriting, and some drawn from the definitions.
Note that we do not need a direct rule for $¨\{v | y = v\}Æ$,
as other clauses will give it indirectly:
we provide the clause in the first place as a way of rewriting one form of expressing a singleton set.
The definition of $Insert$ is excluded as there will sometimes
be good reasons why its form of rewriting won't be desired.
=ENDDOC
=THDOC
req_const("€~›",î'a SET ≠ 'a SETÆ);
req_defn(["~","complement_def"],
	([],¨µ (x : 'a) (a: 'a SET) ∑
	(x ç ~ a § ≥ x ç a)Æ));
=DESCRIBE
The HOL constant $\verb+~+$ forms the complement of a set.
=ENDDOC
=THDOC
req_thm("complement_clauses",([], ¨
	(µ (x : 'a) (a: 'a SET) ∑(x ç ~ a § ≥ x ç a)) ±
		(~ Universe = {})
	±	(~ {} = Universe)Æ));
=DESCRIBE
``$€complement\_clauses›$'' provides simplifying clauses arising the fact that the ``$Empty$'' set and the ``$Universe$'' set are complementary.
=ENDDOC
=THDOC
req_const("¿",î'a SET ≠ 'a SET ≠ 'a SETÆ);
req_infix(260, "¿");
req_defn(["¿","¿_def"],([],¨µ (x:'a) (a : 'a SET) (b : 'a SET) ∑
	(x ç a ¿ b) § (x ç a ≤ x ç b)Æ));
=DESCRIBE
The HOL constant $€¿›$ represents set union.
=ENDDOC
=THDOC
req_thm("¿_clauses",([], ¨
	µ (a: 'a SET)∑
		(a ¿ {} = a)
	±	({} ¿ a = a)
	±	(a ¿ Universe = Universe)
	±	(Universe ¿ a = Universe)
	±	(a ¿ a = a)Æ));
=DESCRIBE
``$€¿\_clauses›$'' provides simplifying clauses associated with ``$\$¿$''.
=ENDDOC
=THDOC
req_const("°",î'a SET ≠ 'a SET ≠ 'a SETÆ);
req_infix(270, "°");
req_defn(["°","°_def"],([],¨µ (x:'a) (a : 'a SET) (b : 'a SET) ∑
	(x ç a ° b) § (x ç a ± x ç b)Æ));
=DESCRIBE
The HOL constant $€°›$ represents set union.
=ENDDOC
=THDOC
req_thm(€"°_clauses"›,([], ¨
	µ (a: 'a SET)∑
		(a ° {} = {})
	±	({} ° a = {})
	±	(a ° Universe = a)
	±	(Universe ° a = a)
	±	(a ° a = a)Æ));
=DESCRIBE
``$°\_clauses$'' provides simplifying clauses associated with ``$\$°$''.
=ENDDOC
=THDOC
req_const(€"\\"›,î'a SET ≠ 'a SET ≠ 'a SETÆ);
	(* €\› *)
req_left_infix(265, "\\");
req_defn(["\\","set_dif_def"],([],¨µ (x:'a) (a : 'a SET) (b : 'a SET) ∑
	(x ç a \ b) § (x ç a ± ≥ (x ç b))Æ));
=DESCRIBE
The HOL constant ``$\verb+\+$'' represents set difference.
=ENDDOC
=THDOC
req_thm("set_dif_clauses",([], ¨
	µ (a: 'a SET)∑
		(a \ {} = a)
	±	({} \ a = {})
	±	(a \ Universe = {})
	±	(Universe \ a = ~ a)
	±	(a \ a = {})Æ));
=DESCRIBE
``$€set\_dif\_clauses›$'' provides simplifying clauses associated with ``$\$\verb+\+$''.
=ENDDOC
=THDOC
req_const("£",î'a SET ≠ 'a SET ≠ 'a SETÆ);
req_infix(250, "£");
req_defn(["£","£_def"],([],¨µ (x:'a) (a : 'a SET) (b : 'a SET) ∑
	(x ç a £ b) § ≥(x ç a § x ç b)Æ));
=DESCRIBE
The HOL constant $€£›$ represents symmetric difference of sets.
=ENDDOC
=THDOC
req_thm(€"£_clauses"›,([], ¨
	µ (a: 'a SET)∑
		(a £ {} = a)
	±	({} £ a = a)
	±	(a £ Universe = ~a)
	±	(Universe £ a = ~a)
	±	(a £ a = {})Æ));
=DESCRIBE
``$£\_clauses$'' provides simplifying clauses associated with ``$\$£$''.
=ENDDOC
=THDOC
req_const("Ä",î'a SET ≠ 'a SET ≠ BOOLÆ);
req_const("†",î'a SET ≠ 'a SET ≠ BOOLÆ);
req_infix(230, "Ä");
req_infix(230, "†");
req_defn(["Ä","Ä_def"],([],¨µ a b : 'a SET ∑
	(a Ä b) § µ x ∑ x ç a ¥ x ç bÆ));
req_defn(["†","†_def"],([],¨µ a b : 'a SET ∑
	(a † b) § ((a Ä b) ± (∂ x ∑ ≥(x ç a) ± (x ç b)))Æ));
=DESCRIBE
The HOL constant $€Ä›$ represents set inclusion.
The HOL constant $€†›$ represents proper set inclusion.
=ENDDOC
=THDOC
req_thm("Ä_clauses",([], ¨
	µ (a: 'a SET)∑
		(a Ä a)
	±	({} Ä a)
	±	(a Ä Universe)Æ));
=DESCRIBE
``$€Ä\_clauses›$'' provides simplifying clauses associated with ``$\$Ä$''.
=ENDDOC
=THDOC
req_thm("†_clauses",([], ¨
	µ (a: 'a SET)∑
		≥ (a † a)
	±	≥ (a † {})
	±	({} † Universe)Æ));
=DESCRIBE
``$€†\_clauses›$'' provides simplifying clauses associated with ``$\$†$''.
=ENDDOC
=THDOC
req_const("ﬁ",î('a SET) SET ≠ 'a SETÆ);
req_const("•",î('a SET) SET ≠ 'a SETÆ);
req_defn(["ﬁ","ﬁ_def"],([],¨µ (x: 'a) (a: ('a SET) SET) ∑
	(x ç ﬁ a) § ∂ s ∑ x ç s ± s ç aÆ));
req_defn(["•","•_def"],([],¨µ (x: 'a) (a: ('a SET) SET) ∑
	(x ç • a) § µ s ∑ s ç a ¥ x ç sÆ));
=DESCRIBE
The HOL constant $€ﬁ›$ represents generalised union.
The HOL constant $€•›$ represents generalised intersection.
=ENDDOC
=THDOC
req_thm("ﬁ_clauses",([], ¨
		(ﬁ ({}: 'a SET SET) = {})
	±	(ﬁ (Universe: 'a SET SET) = Universe)Æ));
=DESCRIBE
``$€ﬁ\_clauses›$'' provides simplifying clauses associated with ``$\$ﬁ$''.
=ENDDOC
=THDOC
req_thm("•_clauses",([], ¨
		(• ({}: 'a SET SET) = Universe)
	±	(• Universe = ({}: 'a SET SET))Æ));
=DESCRIBE
``$€•\_clauses›$'' provides simplifying clauses associated with ``$\$•$''.
=ENDDOC
=THDOC
req_const("",î'a SET ≠ ('a SET) SETÆ);
req_defn(["","_def"],([],¨µ (x : 'a SET) (a: 'a SET) ∑
	(x ç  a) § x Ä aÆ));
=DESCRIBE
The HOL constant $€›$ represents the power set constructor.
=ENDDOC
=THDOC
req_thm("_clauses",([], ¨
	µ (a:'a SET)∑
		( {} = {{}})
	±	( Universe = Universe)
	±	a ç  a
	±	{} ç  aÆ));
=DESCRIBE
``$€\_clauses›$'' provides simplifying clauses associated with ``$\$$''.
=ENDDOC
=THDOC
req_thm("ö_clauses",([], ¨µ (x : 'a) (a:'a SET) ∑
	{x | F} = {} ±
	≥ x ç {} ±
	{} ¿ a = a ±
	a ¿ {} = a ±
	{} ° a = {} ±
	a ° {} = {} ±
	a \ {} = a ±
	{} \ a = {} ±
	a £ {} = a ±
	{} £ a = a ±
	{} Ä a ±
	(a Ä {} § a = {}) ±
	({} † a § ≥ a = {}) ±
	≥ a † {} ±
	≥ x ç ﬁ {} ±
	x ç • {} ±
	{} ç  a ±
	( {} = {{}})Æ));
=DESCRIBE
The theorem ``$€ö\_clauses›$'' gives all the interactions of the empty set with the operators given in the theory ``sets''.
This will probably be dropped because the results are mostly in the other `clauses'.
=ENDDOC
=THDOC
req_thm("ç_in_clauses",([], ¨
	(µ (x : 'a) (y : 'a) (a: 'a SET) ∑
		(x ç Universe § T)
	±	(x ç {} § F)
	±	(x ç Insert y a § (x = y ≤ x ç a)))
±	(µ (x:'a) (a : 'a SET) (b : 'a SET) ∑
		(x ç a ¿ b § x ç a ≤ x ç b)
	±	(x ç a ° b § x ç a ± x ç b)
	±	(x ç a \ b § x ç a ± ≥ x ç b)
	±	(x ç a £ b § ≥(x ç a § x ç b)))
±	(µ (x:'a) (a : 'a SET SET) ∑
		(x ç ﬁ a § ∂ s ∑ x ç s ± s ç a)
	±	((x ç • a) § µ s ∑ s ç a ¥ x ç s)
±	(µ (x : 'a SET) (a : 'a SET) ∑(x ç  a § x Ä a)))Æ));
=DESCRIBE
The theorem ``$€ç\_in\_clauses›$'' gives theorems which ``push in'' membership assertions.
=ENDDOC
=THDOC
req_thm("sets_ext_clauses",([], ¨µ(a : 'a SET) (b : 'a SET) ∑
	((a † b) § ((µ x ∑ x ç a ¥ x ç b) ± (∂ x ∑ ≥(x ç a) ± (x ç b))))
±	((a Ä b) § µ x ∑ x ç a ¥ x ç b)
±	((a = b) § (µ x:'a∑ x ç a § x ç b))Æ));
=DESCRIBE
The theorem ``$€sets\_ext\_clauses›$'' gives theorems which express extensionality of sets and closely related results.
They are for use when set theoretic results are to be obtained by reasoning about membership rather than by more algebraic means.
=ENDDOC
\subsection{Signature of the theory ``sets''}
=DOC
signature €SetsTheory› = sig
	val €set_def› : THM;
	val €sets_clauses› : THM;
	val €ö_clauses› : THM;
	val €ç_in_clauses› : THM;
	val €sets_ext_clauses› : THM;
	val €complement_clauses› : THM;
	val €¿_clauses› : THM;
	val €°_clauses› : THM;
	val €set_dif_clauses› : THM;
	val €£_clauses› : THM;
	val €Ä_clauses› : THM;
	val €†_clauses› : THM;
	val €ﬁ_clauses› : THM;
	val €•_clauses› : THM;
	val €_clauses› : THM;
	val €is_set_rep_def› : THM;
	val €set_comp_def› : THM;
	val €insert_def› : THM;
	val €complement_def› : THM;
	val €¿_def› : THM;
	val €°_def› : THM;
	val €set_dif_def› : THM;
	val €£_def› : THM;
	val €Ä_def› : THM;
	val €†_def› : THM;
	val €ﬁ_def› : THM;
	val €•_def› : THM;
	val €_def› : THM;
=DESCRIBE
This is the signature in which we declare theory ``sets''.
$sets\_clauses$ is bound the the theorem saved with the same name as
key,
$insert\_def$ is bound to the definition of $Insert$, saved with key $Insert$, and the other $\_def$ follow the same pattern.
=ENDDOC
=DOC
val €simple_ç_comp_conv› : CONV;
=DESCRIBE
A conversion for set membership.
It cannot handle variable structures bound by the set comprehension.
=FRULE 1 Conversion
simple_ç_comp_conv
¨x ç {v | p[v]}Æ
˜
˜
Ù x ç {v | p[v]} § p[x]
=TEX
=SEEALSO
$ç\_comp\_conv$
=FAILURE
44001	?0 is not of the form:¨x ç {v | p[v]}Æ
=ENDDOC
=DOC
val €ç_comp_conv› : CONV;
=DESCRIBE
A conversion for set membership.
It can handle variable structures bound by the set comprehension.
=FRULE 1 Conversion
ç_comp_conv
¨t ç {v[x,y,...] | p[x,y,...]}Æ
˜
˜
Ù t ç {vs[x,y,...] | p[x,y,...]}
§ p[x1,y1,...]
=TEX
where $x1$, $y1$, etc, are the appropriate components of
$t$, extracted via $Fst$ and $Snd$.
=SEEALSO
$simple\_ç\_comp\_conv$
=FAILURE
27002	?0 is not of form:¨x ç {v | p[v]}Æ
=ENDDOC
=DOC
val €ç_enum_set_rule› : TERM -> TERM list -> THM;
=DESCRIBE
Give that something within an enumerated set is a member of that set.
=FRULE 1 Rule
ç_enum_set_rule
¨tiÆ
[¨t1Æ,...¨tnÆ]
˜
˜
Ù ti ç {t1,...,tn}
=TEX
where $ti$ is $¡$-convertible to one of $t1,\ldots,tn$.
=FAILURE
3012	?0 and ?1 do not have the same types
27001	?0 not a member of list of terms
=FAILUREC
Message 3012 occurs when the term list cannot be made into
an enumerated set because of differing types.
=ENDDOC
=DOC
val €ç_enum_set_conv› : CONV;
=DESCRIBE
Give that something within an enumerated set is a member of that set.
=FRULE 1 Conversion
ç_enum_set_conv
¨ti ç {t1,...,tn}Æ
˜
˜
Ù ti ç {t1,...,tn} § T
=TEX
where $ti$ is $¡$-convertible to one of $t1,\ldots,tn$.
=FAILURE
27005	?0 not a member of the enumerated set ?1
27006	?0 is not of the form: ¨x ç {t1, ..., tn}Æ
=FAILUREC
Message 3012 occurs when the term list cannot be made into
an enumerated set because of differing types.
=ENDDOC
=DOC
val €sets_simple_∂_conv› : CONV;
=DESCRIBE
This conversion changes an existentially quantified term
in a (perhaps nullary) function whose range is a set to
an existentially quantified term
in a function whose range is a function from the type
of the set element to $¨:BOOLÆ$.
It is only applicable if all instances of the bound function
 in the body of the term are applied to sufficent arguments and then tested
for set membership by $ç$.
=FRULE 2 Conversion
sets_simple_∂_conv
¨∂ f : ... ≠ ty SET ∑
   P[ t1 ç f ...,
      t2 ç f ... , ...]Æ
˜
˜
Ù ∂ f : ... ≠ ty SET ∑
   P[ t1 ç f, t2 ç f ...,  ...]
§
∂ f' : ... ≠ ty SET ∑
   P[ f' ... t1, f' ... t2, ...]Æ
=TEX
where the $t_i$ are arbitrary terms.
=EXAMPLE
sets_simple_∂_conv ¨∂ S ∑ µ x y ∑ x ç S y § ≥(x = y)Æ --->
 Ù (∂ S ∑ µ x y ∑ x ç S y § ≥(x = y)) §
   (∂ S' ∑ µ x y ∑ S' y x § ≥(x = y))
=TEX
=USES
This function is used to implement a automated existence proof preprocessor
for the ``sets'' proof context.
=FAILURE
44010	?0 is not of the form: ¨∂ x : ... ≠ ty SET ∑ ...Æ
44011	?0 is not of the form: ¨∂ x ∑ ... x ...Æ
44012	?0 has instances of ?1 not embedded in subterms of the
	form: ¨t ç ?1 ...Æ
44013	Unable to prove ?0
=ENDDOC
=DOC
val €sets_eq_conv› : CONV;
val €Ä_conv› : CONV;
val €†_conv› : CONV;
=DESCRIBE
These conversions use the extensional property of sets to transform
terms of the form
=INLINEFT
¨a = bÆ
=TEX
,
=INLINEFT
¨a Ä bÆ
=TEX
\ or
=INLINEFT
¨a † bÆ
=TEX
\ (where $a$ and $b$ are sets) into assertions about membership of $a$
and $b$. The conversions introduce variable structures in the membership
assertions if the elements of $a$ and $b$ are pairs (i.e. have types
of the form:
=INLINEFT
” ∏ ‘
=TEX
).

If the elements are not pairs, the conversions behave as follows:
=FRULE 1 Conversion
sets_eq_conv
¨a = bÆ
˜
˜
Ù (a = b) § (µ x ∑ x ç a § x ç b)
=TEX
=FRULE 1 Conversion
Ä_conv
¨a Ä bÆ
˜
˜
Ù (a Ä b) § (µ x ∑ x ç a ¥ x ç b)
=TEX
=FRULE 1 Conversion
†_conv
¨a † bÆ
˜
˜
Ù (a † b) § (µ x ∑ x ç a ¥ x ç b)
		± (∂ x∑ ≥ x ç a ± x ç b)
=TEX
where $x$ represents a variable whose name is ``$x$'' decorated to
avoid clashing with the free variables of $a$ or $b$.

If the elements of $a$ and $b$ are pairs, then a variable structure
(whose free variables have names chosen from the sequence ``$x1$'', ``$x2$'',
\ldots\ so as not to clash with any of the variables in $a$ or $b$)
is used instead of $x$ on the left hand side of each $ç$,
and the quantification is over the free variables of the variable structure.
For example:
=FRULE 1 Example
Ä_conv
¨{(1,2),3} Ä x2Æ
˜
˜
Ù {((1, 2), 3)} Ä x2
§ µ x1 x3 x4∑
((x1, x3), x4) ç {((1, 2), 3)}
¥ ((x1, x3), x4) ç x2
=TEX
Here, $x2$ has not been used in the variable structure
since it occurs in the input term.

(The distinction between the variable naming rules followed in the
simple case and the paired case has some mnemonic value
and makes the conversions compatible
with rewriting with the theorem $sets\_ext\_clauses$ as done, for example,
in the proof context $sets\_ext$.)
=SEEALSO
=FAILURE
44021	?0 is not of the form: ¨a = bÆ where ¨aÆ and ¨bÆ are sets
44022	?0 is not of the form: ¨a Ä bÆ
44023	?0 is not of the form: ¨a † bÆ
=ENDDOC

=SML
end;(* of signature SetsTheory *)
=TEX
\section{TEST POLICY}
Any functions given in this document should be tested according to the
general criteria set out in \cite{DS/FMU/IED/PLN008}, using the
tests in \cite{DS/FMU/IED/MDT044}.
In \cite{DS/FMU/IED/MDT044} the theory produced is checked by the theory design tools
of \cite{DS/FMU/IED/DTD035}, against the theory design provided.

The module tests should include automatic proof of all the ``rules'' in \cite{Spivey89} expressible in this part of set theory.
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}


