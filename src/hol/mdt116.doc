=TEX
\documentclass[a4paper,12pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{epsf}
\makeindex

\def\Title{ Module Test: Theory of Real Numbers }

\def\Abstract{\begin{center}
{\bf Abstract}\par\parbox{0.7\hsize}
{\small This document gives the module tests for the theory of real numbers in \ProductHOL.}
\end{center}}

\def\Reference{LEMMA1/HOL/MDT114}

\def\Author{R.D. Arthan}

\def\EMail{{\tt rda@lemma-one.com}}

\def\Phone{+44 118 958 4409}

\def\Fax{+44 118 956 1920}

%%%%% YOU MAY WANT TO CHANGE THE FOLLOWING TO GET A NICE FRONT PAGE:
\def\FrontPageTitle{ {\huge \Title } }
\def\FrontPageHeader{\raisebox{16ex}{\begin{tabular}[t]{c}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year\\\strut\\
\end{tabular}}}
\begin{centering}



\end{centering}

%%%%% THE FOLLOWING DEFAULTS WILL GENERALLY BE RIGHT:

\def\Version{$Revision: 1.3 $%
}
\def\Date{\FormatDate{$Date: 2001/06/29 15:33:29 $%
}}

%%%%% NOW BEGIN THE DOCUMENT AND MAKE THE FRONT PAGE

\begin{document}
\headsep=0mm
\FrontPage
\headsep=10mm

%%%%% STANDARD RED-TAPE SECTIONS (MAY WANT TO INTERLEAVE SOME \newpage COMMANDS IN THESE)

%%%%% CONTENTS:

\subsection{Contents}

\tableofcontents

%%%%% REFERENCES:

\newpage
\subsection{References}

\bibliographystyle{fmu}

%%%%% CHANGE THE FOLLOWING AS NECESSARY (E.G., TO PICK UP daz.bib):
{\raggedright
\bibliography{fmu}
}
%%%%% CHANGES HISTORY:
\subsection{Changes History}
\begin{description}
\item[Issue 1.1] First draft.
\item[Issues 1.2--1.5] Added more comprehensive tests for the ML code.
\end{description}

%%%%%  CHANGES FORECAST:

\subsection{Changes Forecast}

None.

%%%%% DISTRIBUTION LIST

\subsection{Distribution}

Lemma 1 build system.

\newpage

\section{INTRODUCTION}
\subsection{Scope}
This document contains the module tests associated with the 
theory of real numbers
required by \cite{DS/FMU/IED/DTD116} and
implemented in \cite{DS/FMU/IED/IMP116}.
\subsection{Introduction}
\subsubsection{Purpose and Background}
See \cite{DS/FMU/IED/DTD040}.
\subsubsection{Dependencies}
The test material depends on \cite{DS/FMU/IED/DTD013},
\cite{DS/FMU/IED/DTD035} and \cite{DS/FMU/IED/IMP114}.

\subsubsection{Deficiencies}
None known.
\section{INITIALISATION}
Initialise the test package:
=SML
use_file "dtd013.sml";
use_file "imp013.sml";
init_mt_results ();
=TEX
\section{TEST CASES}
The organisation of the test cases is as follows:

\begin{enumerate}
\item Check the theory design
\item Test the syntax functions
\item Test the induction tactic
\item Test the computational conversions
\item Test the arithmetic normalisation conversion
\item Test the general purpose proof context
\item Test the linear arithmetic decision procedure
\end{enumerate}

\section{CHECK THE THEORY DESIGN}
=SML
use_file "dtd116.tch";
store_mt_results mt_run[("theory design for theory of reals",
	theory_check_success,
	(),
	true)];
=TEX
\section{SYNTAX FUNCTIONS}
Dyadic constructor functions:
=SML
store_mt_results
(mt_runf (op =$))
[
	("2.1.1", mk_¯_less, (¬î¯ 0®, ¬î¯ 1®), ¬î¯ 0 <‰R î¯ 1®),
	("2.1.2", mk_¯_¼, (¬î¯ 0®, ¬î¯ 1®), ¬î¯ 0 ¼‰R î¯ 1®),
	("2.1.3", mk_¯_greater, (¬î¯ 0®, ¬î¯ 1®), ¬î¯ 0 >‰R î¯ 1®),
	("2.1.4", mk_¯_¾, (¬î¯ 0®, ¬î¯ 1®), ¬î¯ 0 ¾‰R î¯ 1®),
	("2.1.5", mk_¯_plus, (¬î¯ 0®, ¬î¯ 1®), ¬î¯ 0 +‰R î¯ 1®),
	("2.1.6", mk_¯_subtract, (¬î¯ 0®, ¬î¯ 1®), ¬î¯ 0 -‰R î¯ 1®),
	("2.1.7", mk_¯_times, (¬î¯ 0®, ¬î¯ 1®), ¬î¯ 0 *‰R î¯ 1®),
	("2.1.8", mk_¯_over, (¬î¯ 0®, ¬î¯ 1®), ¬î¯ 0 /‰R î¯ 1®),
	("2.1.9", mk_¯_frac, (¬0®, ¬1®), ¬0 /‰N 1®),
	("2.1.10", mk_¯_î_exp, (¬î¯ 0®, ¬1®), ¬î¯ 0 ^‰N 1®)
];
=TEX
Monadic constructor functions:
=SML
store_mt_results
(mt_runf (op =$))
[
	("2.2.1", mk_¯_minus, ¬2/3®, ¬~‰R (2/3)®),
	("2.2.2", mk_¯_abs, ¬2/3®, ¬Abs‰R (2/3)®),
	("2.2.3", mk_¯_recip, ¬2/3®, ¬(2/3)›-›1®),
	("2.2.4", mk_î¯, ¬2®, ¬î¯ 2®)
];
=TEX
Dyadic destructor functions:
=SML
store_mt_results
(mt_runf (fn ((a, b), (c, d)) => a =$ c andalso b =$ d))
[
	("2.3.1", dest_¯_less, ¬î¯ 0 <‰R î¯ 1®, (¬î¯ 0®, ¬î¯ 1®)),
	("2.3.2", dest_¯_¼, ¬î¯ 0 ¼‰R î¯ 1®, (¬î¯ 0®, ¬î¯ 1®)),
	("2.3.3", dest_¯_greater, ¬î¯ 0 >‰R î¯ 1®, (¬î¯ 0®, ¬î¯ 1®)),
	("2.3.4", dest_¯_¾, ¬î¯ 0 ¾‰R î¯ 1®, (¬î¯ 0®, ¬î¯ 1®)),
	("2.3.5", dest_¯_plus, ¬î¯ 0 +‰R î¯ 1®, (¬î¯ 0®, ¬î¯ 1®)),
	("2.3.6", dest_¯_subtract, ¬î¯ 0 -‰R î¯ 1®, (¬î¯ 0®, ¬î¯ 1®)),
	("2.3.7", dest_¯_times, ¬î¯ 0 *‰R î¯ 1®, (¬î¯ 0®, ¬î¯ 1®)),
	("2.3.8", dest_¯_over, ¬î¯ 0 /‰R î¯ 1®, (¬î¯ 0®, ¬î¯ 1®)),
	("2.3.9", dest_¯_frac, ¬0 /‰N 1®, (¬0®, ¬1®)),
	("2.3.10", dest_¯_î_exp, ¬î¯ 0 ^‰N 1®, (¬î¯ 0®, ¬1®))
];
=TEX
Monadic destructor functions:
=SML
store_mt_results
(mt_runf (op =$))
[
	("2.4.1", dest_¯_minus, ¬~‰R (2/3)®, ¬2/3®),
	("2.4.2", dest_¯_abs, ¬Abs‰R (2/3)®, ¬2/3®),
	("2.4.3", dest_¯_recip, ¬(2/3)›-›1®, ¬2/3®),
	("2.4.4", dest_î¯, ¬î¯ 2®, ¬2®)
];
=TEX
Discriminator functions:
=SML
store_mt_results
mt_run
[
	("2.5.1", is_¯_less, ¬î¯ 0 <‰R î¯ 1®, true),
	("2.5.2", is_¯_¼, ¬î¯ 0 ¼‰R î¯ 1®, true),
	("2.5.3", is_¯_greater, ¬î¯ 0 >‰R î¯ 1®, true),
	("2.5.4", is_¯_¾, ¬î¯ 0 ¾‰R î¯ 1®, true),
	("2.5.5", is_¯_plus, ¬î¯ 0 +‰R î¯ 1®, true),
	("2.5.6", is_¯_subtract, ¬î¯ 0 -‰R î¯ 1®, true),
	("2.5.7", is_¯_times, ¬î¯ 0 *‰R î¯ 1®, true),
	("2.5.8", is_¯_over, ¬î¯ 0 /‰R î¯ 1®, true),
	("2.5.9", is_¯_frac, ¬0 /‰N 1®, true),
	("2.5.10", is_¯_î_exp, ¬î¯ 0 ^‰N 1®, true),
	("2.5.11", is_¯_minus, ¬~‰R (2/3)®, true),
	("2.5.12", is_¯_abs, ¬Abs‰R (2/3)®, true),
	("2.5.13", is_¯_recip, ¬(2/3)›-›1®, true),
	("2.5.14", is_î¯, ¬î¯ 2®, true)
];
=TEX
\section{INDUCTION TACTIC}
=TEX
This function tests that a tactic proves a goal:
=SML
fun Ûtac_solveÝ tac (seqasms, goal) = (
	dest_thm (tac_proof ((seqasms,goal),tac))
	=#
	(seqasms, goal)
);
=SML
set_merge_pcs["basic_hol", "'¯"];
store_mt_results
mt_run [
	("3.1.1",
	tac_solve (
		¯_delta_induction_tac ¬y:¯®
		THEN ¶_tac¬î¯ 2®
		THEN REPEAT strip_tac
		THEN_LIST [
			¶_tac¬î¯ 3® THEN REPEAT strip_tac
			THEN bc_thm_tac ¯_less_trans_thm
			THEN ¶_tac¬î¯ 1® THEN REPEAT strip_tac,

			bc_thm_tac ¯_less_trans_thm
			THEN ¶_tac¬s:¯® THEN REPEAT strip_tac]),
	([¬î¯ 1 < y®], ¬î¯ 0 < y®), true)];
=TEX
\section{COMPUTATIONAL CONVERSIONS}
=TEX
Dyadic predicates (one of each):
=SML
store_mt_results
(mt_runf (fn (thm, tm) => snd(dest_eq(concl thm)) =$ tm))
[
	("4.1.1", ¯_less_conv, ¬î¯ 99 <‰R î¯ 100®, ¬T®),
	("4.1.2", ¯_¼_conv, ¬1/2 ¼‰R 1/2®, ¬T®),
	("4.1.3", ¯_greater_conv THEN_C ¯_less_conv, ¬~(4/5) >‰R ~(4/3)®, ¬T®),
	("4.1.4", ¯_¾_conv THEN_C ¯_¼_conv, ¬7/8 ¾‰R 6/8®, ¬T®),
	("4.1.5", ¯_less_conv, ¬î¯ 99 <‰R î¯ 10®, ¬F®),
	("4.1.6", ¯_¼_conv, ¬(1/2) ¼‰R 1/4®, ¬F®),
	("4.1.7", ¯_greater_conv THEN_C ¯_less_conv, ¬~(4/3) >‰R ~(4/5)®, ¬F®),
	("4.1.8", ¯_¾_conv THEN_C ¯_¼_conv, ¬6/8 ¾‰R 7/8®, ¬F®)
];
=TEX
Dyadic arithmetic operators (one of each):
=SML
store_mt_results
(mt_runf (fn (thm, tm) => snd(dest_eq(concl thm)) =$ tm))
[
	("4.2.1", ¯_plus_conv, ¬2/6 +‰R 1/6®, ¬1/2®),
	("4.2.2", ¯_subtract_conv THEN_C ¯_plus_conv, ¬1/3 -‰R 1/6®, ¬1/6®),
	("4.2.3", ¯_times_conv, ¬î¯ 0 *‰R î¯ 1®, ¬î¯ 0®),
	("4.2.4", ¯_over_conv, ¬î¯ 0 /‰R î¯ 1®, ¬î¯ 0®),
	("4.2.5", ¯_frac_norm_conv, ¬1 /‰N 1®, ¬î¯ 1®),
	("4.2.6", ¯_î_exp_conv, ¬î¯ 0 ^‰N 1®, ¬î¯ 0®)
];
=TEX
Monadic arithmetic operators (a few of each):
=SML
store_mt_results
(mt_runf (fn (thm, tm) => snd(dest_eq(concl thm)) =$ tm))
[
	("4.3.1", ¯_abs_conv, ¬Abs‰R (~(2/3))®, ¬2/3®),
	("4.3.2", ¯_abs_conv, ¬Abs‰R ((2/3))®, ¬2/3®),
	("4.3.3", ¯_recip_conv, ¬(2/3)›-›1®, ¬3/2®),
	("4.3.4", ¯_recip_conv, ¬(~(2/3))›-›1®, ¬~(3/2)®),
	("4.3.5", ¯_minus_conv, ¬~(~(2/3))®, ¬2/3®),
	("4.3.6", ¯_minus_conv, ¬~(~(~(2/3)))®, ¬~(2/3)®),
	("4.3.7", ¯_minus_conv, ¬~(~(~(~(4/6))))®, ¬2/3®),
	("4.3.8", ¯_minus_conv, ¬~(~(~(~(î¯ 0))))®, ¬î¯ 0®),
	("4.3.9", ¯_minus_conv, ¬~(~(~(î¯ 0)))®, ¬î¯ 0®)
];
=TEX
Now some more extensive tests for main computational conversions.
First of all we need some ML to check that signed literal results
are in the approved normal form:
=SML
fun ÛgcdÝ (m : INTEGER) (n : INTEGER) = (
	if	m @<= zero
	then	n
	else if	m @< n
	then	gcd (n imod m) m
	else if	m = n
	then	m
	else	gcd (m imod n) n
);
fun is_ok_lit (tm : TERM) : bool = (
	let	val (tm1, pos) = (dest_¯_minus tm, false) handle Fail _ => (tm, true);
	in	let	val i = dest_î(dest_î¯ tm1);
		in	pos orelse i <> zero
		end	handle Fail _ =>
		let	val (num, den) = (dest_î ** dest_î) (dest_¯_frac tm1);
		in	num <> zero andalso den <> one andalso gcd num den = one
		end	handle Fail _ => false
	end
);
=TEX
Now some glue so that we can check the results of a whole list of
conversion runs.
=SML
fun arith_conv_check (tm : TERM, th : THM) : bool = (
	let	val (lhs, rhs) = dest_eq(concl th);
	in	is_nil (asms th) andalso tm =$ lhs andalso is_ok_lit rhs
	end	handle Fail _ => false
);
fun chk_c (c : CONV) : TERM list -> (TERM * THM) list = (
	map (fn t => (t, c t))
);
fun arith_batch (tag : string) (c : CONV) (tms : TERM list) : (string * bool) list = (
	let	val labs = interval 1 (length tms);
		fun mk_tag i = tag ^ "." ^ string_of_int i;
	in	combine (map mk_tag labs) (map arith_conv_check (chk_c c tms))
	end
);
fun pred_conv_check (tm : TERM, th : THM) : bool = (
	let	val (lhs, rhs) = dest_eq(concl th);
	in	is_nil (asms th) andalso tm =$ lhs andalso (is_t rhs orelse is_f rhs)
	end	handle Fail _ => false
);
fun pred_batch (tag : string) (c : CONV) (tms : TERM list) : (string * bool) list = (
	let	val labs = interval 1 (length tms);
		fun mk_tag i = tag ^ "." ^ string_of_int i;
	in	combine (map mk_tag labs) (map pred_conv_check (chk_c c tms))
	end
);
=TEX
Now we can do batches of tests:
=SML
store_mt_results
(arith_batch "4.5.1" ¯_plus_conv)
[
¬î¯ 0 + î¯ 0®, ¬î¯ 0 + ~(î¯ 0)®, ¬~(î¯ 0) + î¯ 0®, ¬~(î¯ 0) + ~(î¯ 0)®,
¬î¯ 1 + î¯ 0®, ¬î¯ 1 + ~(î¯ 0)®, ¬~(î¯ 1) + î¯ 0®, ¬~(î¯ 1) + ~(î¯ 0)®,
¬î¯ 0 + î¯ 1®, ¬î¯ 0 + ~(î¯ 1)®, ¬~(î¯ 0) + î¯ 1®, ¬~(î¯ 0) + ~(î¯ 1)®,
¬î¯ 1 + î¯ 1®, ¬î¯ 1 + ~(î¯ 1)®, ¬~(î¯ 1) + î¯ 1®, ¬~(î¯ 1) + ~(î¯ 1)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.5.2"  ¯_plus_conv)
[
¬0/1 + 0/1®, ¬0/1 + ~(0/1)®, ¬~(0/1) + 0/1®, ¬~(0/1) + ~(0/1)®,
¬1/1 + 0/1®, ¬1/1 + ~(0/1)®, ¬~(1/1) + 0/1®, ¬~(1/1) + ~(0/1)®,
¬0/1 + 1/1®, ¬0/1 + ~(1/1)®, ¬~(0/1) + 1/1®, ¬~(0/1) + ~(1/1)®,
¬1/1 + 1/1®, ¬1/1 + ~(1/1)®, ¬~(1/1) + 1/1®, ¬~(1/1) + ~(1/1)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.5.3" ¯_plus_conv)
[
¬(1/2) + î¯ 0®, ¬(1/2) + ~(î¯ 0)®, ¬~(1/2) + î¯ 0®, ¬~(1/2) + ~(î¯ 0)®,
¬î¯ 0 + (1/2)®, ¬î¯ 0 + ~(1/2)®, ¬~(î¯ 0) + 1/2®, ¬~(î¯ 0) + ~(1/2)®,
¬(1/2) + î¯ 1®, ¬(1/2) + ~(î¯ 1)®, ¬~(1/2) + î¯ 1®, ¬~(1/2) + ~(î¯ 1)®,
¬î¯ 1 + (1/2)®, ¬î¯ 1 + ~(1/2)®, ¬~(î¯ 1) + 1/2®, ¬~(î¯ 1) + ~(1/2)®,
¬(1/2) + î¯ 2®, ¬(1/2) + ~(î¯ 2)®, ¬~(1/2) + î¯ 2®, ¬~(1/2) + ~(î¯ 2)®,
¬î¯ 2 + (1/2)®, ¬î¯ 2 + ~(1/2)®, ¬~(î¯ 2) + 1/2®, ¬~(î¯ 2) + ~(1/2)®,
¬(1/2) + î¯ 45®, ¬(1/2) + ~(î¯ 45)®, ¬~(1/2) + î¯ 45®, ¬~(1/2) + ~(î¯ 45)®,
¬î¯ 45 + (1/2)®, ¬î¯ 45 + ~(1/2)®, ¬~(î¯ 45) + 1/2®, ¬~(î¯ 45) + ~(1/2)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.5.4" ¯_plus_conv)
[
¬(44/14) + î¯ 0®, ¬(44/14) + ~(î¯ 0)®, ¬~(44/14) + î¯ 0®, ¬~(44/14) + ~(î¯ 0)®,
¬î¯ 0 + (44/14)®, ¬î¯ 0 + ~(44/14)®, ¬~(î¯ 0) + 44/14®, ¬~(î¯ 0) + ~(44/14)®,
¬(44/14) + î¯ 1®, ¬(44/14) + ~(î¯ 1)®, ¬~(44/14) + î¯ 1®, ¬~(44/14) + ~(î¯ 1)®,
¬î¯ 1 + (44/14)®, ¬î¯ 1 + ~(44/14)®, ¬~(î¯ 1) + 44/14®, ¬~(î¯ 1) + ~(44/14)®,
¬(44/14) + î¯ 2®, ¬(44/14) + ~(î¯ 2)®, ¬~(44/14) + î¯ 2®, ¬~(44/14) + ~(î¯ 2)®,
¬î¯ 2 + (44/14)®, ¬î¯ 2 + ~(44/14)®, ¬~(î¯ 2) + 44/14®, ¬~(î¯ 2) + ~(44/14)®,
¬(44/14) + î¯ 101®, ¬(44/14) + ~(î¯ 101)®, ¬~(44/14) + î¯ 101®, ¬~(44/14) + ~(î¯ 101)®,
¬î¯ 101 + (44/14)®, ¬î¯ 101 + ~(44/14)®, ¬~(î¯ 101) + 44/14®, ¬~(î¯ 101) + ~(44/14)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.5.5" ¯_plus_conv)
[
¬(22/7) + (1/3)®, ¬(22/7) + ~(1/3)®, ¬~(22/7) + (1/3)®, ¬~(22/7) + ~(1/3)®,
¬(44/14) + (1/3)®, ¬(44/14) + ~(1/3)®, ¬~(44/14) + (1/3)®, ¬~(44/14) + ~(1/3)®,
¬(22/7) + (15/45)®, ¬(22/7) + ~(15/45)®, ¬~(22/7) + (15/45)®, ¬~(22/7) + ~(15/45)®,
¬(44/14) + (15/45)®, ¬(44/14) + ~(15/45)®, ¬~(44/14) + (15/45)®, ¬~(44/14) + ~(15/45)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.6.1" ¯_times_conv)
[
¬î¯ 0 * î¯ 0®, ¬î¯ 0 * ~(î¯ 0)®, ¬~(î¯ 0) * î¯ 0®, ¬~(î¯ 0) * ~(î¯ 0)®,
¬î¯ 1 * î¯ 0®, ¬î¯ 1 * ~(î¯ 0)®, ¬~(î¯ 1) * î¯ 0®, ¬~(î¯ 1) * ~(î¯ 0)®,
¬î¯ 0 * î¯ 1®, ¬î¯ 0 * ~(î¯ 1)®, ¬~(î¯ 0) * î¯ 1®, ¬~(î¯ 0) * ~(î¯ 1)®,
¬î¯ 1 * î¯ 1®, ¬î¯ 1 * ~(î¯ 1)®, ¬~(î¯ 1) * î¯ 1®, ¬~(î¯ 1) * ~(î¯ 1)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.6.2" ¯_times_conv)
[
¬0/1 * 0/1®, ¬0/1 * ~(0/1)®, ¬~(0/1) * 0/1®, ¬~(0/1) * ~(0/1)®,
¬1/1 * 0/1®, ¬1/1 * ~(0/1)®, ¬~(1/1) * 0/1®, ¬~(1/1) * ~(0/1)®,
¬0/1 * 1/1®, ¬0/1 * ~(1/1)®, ¬~(0/1) * 1/1®, ¬~(0/1) * ~(1/1)®,
¬1/1 * 1/1®, ¬1/1 * ~(1/1)®, ¬~(1/1) * 1/1®, ¬~(1/1) * ~(1/1)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.6.3" ¯_times_conv)
[
¬(1/2) * î¯ 0®, ¬(1/2) * ~(î¯ 0)®, ¬~(1/2) * î¯ 0®, ¬~(1/2) * ~(î¯ 0)®,
¬î¯ 0 * (1/2)®, ¬î¯ 0 * ~(1/2)®, ¬~(î¯ 0) * 1/2®, ¬~(î¯ 0) * ~(1/2)®,
¬(1/2) * î¯ 1®, ¬(1/2) * ~(î¯ 1)®, ¬~(1/2) * î¯ 1®, ¬~(1/2) * ~(î¯ 1)®,
¬î¯ 1 * (1/2)®, ¬î¯ 1 * ~(1/2)®, ¬~(î¯ 1) * 1/2®, ¬~(î¯ 1) * ~(1/2)®,
¬(1/2) * î¯ 2®, ¬(1/2) * ~(î¯ 2)®, ¬~(1/2) * î¯ 2®, ¬~(1/2) * ~(î¯ 2)®,
¬î¯ 2 * (1/2)®, ¬î¯ 2 * ~(1/2)®, ¬~(î¯ 2) * 1/2®, ¬~(î¯ 2) * ~(1/2)®,
¬(1/2) * î¯ 45®, ¬(1/2) * ~(î¯ 45)®, ¬~(1/2) * î¯ 45®, ¬~(1/2) * ~(î¯ 45)®,
¬î¯ 45 * (1/2)®, ¬î¯ 45 * ~(1/2)®, ¬~(î¯ 45) * 1/2®, ¬~(î¯ 45) * ~(1/2)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.6.4" ¯_times_conv)
[
¬(44/14) * î¯ 0®, ¬(44/14) * ~(î¯ 0)®, ¬~(44/14) * î¯ 0®, ¬~(44/14) * ~(î¯ 0)®,
¬î¯ 0 * (44/14)®, ¬î¯ 0 * ~(44/14)®, ¬~(î¯ 0) * 44/14®, ¬~(î¯ 0) * ~(44/14)®,
¬(44/14) * î¯ 1®, ¬(44/14) * ~(î¯ 1)®, ¬~(44/14) * î¯ 1®, ¬~(44/14) * ~(î¯ 1)®,
¬î¯ 1 * (44/14)®, ¬î¯ 1 * ~(44/14)®, ¬~(î¯ 1) * 44/14®, ¬~(î¯ 1) * ~(44/14)®,
¬(44/14) * î¯ 2®, ¬(44/14) * ~(î¯ 2)®, ¬~(44/14) * î¯ 2®, ¬~(44/14) * ~(î¯ 2)®,
¬î¯ 2 * (44/14)®, ¬î¯ 2 * ~(44/14)®, ¬~(î¯ 2) * 44/14®, ¬~(î¯ 2) * ~(44/14)®,
¬(44/14) * î¯ 101®, ¬(44/14) * ~(î¯ 101)®, ¬~(44/14) * î¯ 101®, ¬~(44/14) * ~(î¯ 101)®,
¬î¯ 101 * (44/14)®, ¬î¯ 101 * ~(44/14)®, ¬~(î¯ 101) * 44/14®, ¬~(î¯ 101) * ~(44/14)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.6.5" ¯_times_conv)
[
¬(22/7) * (1/3)®, ¬(22/7) * ~(1/3)®, ¬~(22/7) * (1/3)®, ¬~(22/7) * ~(1/3)®,
¬(44/14) * (1/3)®, ¬(44/14) * ~(1/3)®, ¬~(44/14) * (1/3)®, ¬~(44/14) * ~(1/3)®,
¬(22/7) * (15/45)®, ¬(22/7) * ~(15/45)®, ¬~(22/7) * (15/45)®, ¬~(22/7) * ~(15/45)®,
¬(44/14) * (15/45)®, ¬(44/14) * ~(15/45)®, ¬~(44/14) * (15/45)®, ¬~(44/14) * ~(15/45)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.7.1" ¯_over_conv)
[
¬(1/2) / î¯ 5®, ¬(1/2) / ~(î¯ 5)®, ¬~(1/2) / î¯ 5®, ¬~(1/2) / ~(î¯ 5)®,
¬î¯ 5 / (1/2)®, ¬î¯ 5 / ~(1/2)®, ¬~(î¯ 5) / 1/2®, ¬~(î¯ 5) / ~(1/2)®,
¬(1/2) / î¯ 1®, ¬(1/2) / ~(î¯ 1)®, ¬~(1/2) / î¯ 1®, ¬~(1/2) / ~(î¯ 1)®,
¬î¯ 1 / (1/2)®, ¬î¯ 1 / ~(1/2)®, ¬~(î¯ 1) / 1/2®, ¬~(î¯ 1) / ~(1/2)®,
¬(1/2) / î¯ 2®, ¬(1/2) / ~(î¯ 2)®, ¬~(1/2) / î¯ 2®, ¬~(1/2) / ~(î¯ 2)®,
¬î¯ 2 / (1/2)®, ¬î¯ 2 / ~(1/2)®, ¬~(î¯ 2) / 1/2®, ¬~(î¯ 2) / ~(1/2)®,
¬(1/2) / î¯ 45®, ¬(1/2) / ~(î¯ 45)®, ¬~(1/2) / î¯ 45®, ¬~(1/2) / ~(î¯ 45)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.7.2" ¯_over_conv)
[
¬(44/14) / î¯ 5®, ¬(44/14) / ~(î¯ 5)®, ¬~(44/14) / î¯ 5®, ¬~(44/14) / ~(î¯ 5)®,
¬î¯ 5 / (44/14)®, ¬î¯ 5 / ~(44/14)®, ¬~(î¯ 5) / 44/14®, ¬~(î¯ 5) / ~(44/14)®,
¬(44/14) / î¯ 1®, ¬(44/14) / ~(î¯ 1)®, ¬~(44/14) / î¯ 1®, ¬~(44/14) / ~(î¯ 1)®,
¬î¯ 1 / (44/14)®, ¬î¯ 1 / ~(44/14)®, ¬~(î¯ 1) / 44/14®, ¬~(î¯ 1) / ~(44/14)®,
¬(44/14) / î¯ 2®, ¬(44/14) / ~(î¯ 2)®, ¬~(44/14) / î¯ 2®, ¬~(44/14) / ~(î¯ 2)®,
¬î¯ 2 / (44/14)®, ¬î¯ 2 / ~(44/14)®, ¬~(î¯ 2) / 44/14®, ¬~(î¯ 2) / ~(44/14)®,
¬(44/14) / î¯ 151®, ¬(44/14) / ~(î¯ 151)®, ¬~(44/14) / î¯ 151®, ¬~(44/14) / ~(î¯ 151)®,
¬î¯ 151 / (44/14)®, ¬î¯ 151 / ~(44/14)®, ¬~(î¯ 151) / 44/14®, ¬~(î¯ 151) / ~(44/14)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.7.3" ¯_over_conv)
[
¬(22/7) / (1/3)®, ¬(22/7) / ~(1/3)®, ¬~(22/7) / (1/3)®, ¬~(22/7) / ~(1/3)®,
¬(44/14) / (1/3)®, ¬(44/14) / ~(1/3)®, ¬~(44/14) / (1/3)®, ¬~(44/14) / ~(1/3)®,
¬(22/7) / (15/45)®, ¬(22/7) / ~(15/45)®, ¬~(22/7) / (15/45)®, ¬~(22/7) / ~(15/45)®,
¬(44/14) / (15/45)®, ¬(44/14) / ~(15/45)®, ¬~(44/14) / (15/45)®, ¬~(44/14) / ~(15/45)®,
¬(44/14) / (44/14)®, ¬~(44/14) / ~(44/14)®, ¬~(î¯ 3) / ~(9/6)®, ¬(9/6) / (î¯ 3)®,
¬(0/14) / (44/14)®, ¬~(0/14) / ~(44/14)®, ¬~(î¯ 0) / ~(9/6)®, ¬(0/6) / (î¯ 3)®,
¬~(0/14) / (44/14)®, ¬(0/14) / ~(44/14)®, ¬~(î¯ 0) / (9/6)®, ¬(0/6) / (î¯ 3)®
];
=TEX
We also need to test division when the numerator is not a literal:
=SML
store_mt_results
(mt_runf (fn (thm, tm) => snd(dest_eq(concl thm)) =$ tm))
[
	("4.7.4.1", ¯_over_conv, ¬Z / (1/2)®, ¬Z * î¯ 2®),
	("4.7.4.2", ¯_over_conv, ¬Z / ~(1/2)®, ¬Z * ~(î¯ 2)®),
	("4.7.4.3", ¯_over_conv, ¬~Z / 1/2®, ¬Z * ~(î¯ 2)®),
	("4.7.4.4", ¯_over_conv, ¬~Z / ~(1/2)®, ¬Z * î¯ 2®)
];
=TEX
=SML
store_mt_results
(arith_batch "4.8.1" ¯_recip_conv)
[
¬î¯ 1 ›-›1®, ¬î¯ 99 ›-›1®, ¬(22/7) ›-›1®,  ¬(22/11) ›-›1®,  ¬(6/10) ›-›1®,
¬~(î¯ 1) ›-›1®, ¬~(î¯ 99) ›-›1®, ¬~(22/7) ›-›1®,  ¬~(22/11) ›-›1®, ¬~(6/10) ›-›1®
];
=TEX
=SML
store_mt_results
(arith_batch "4.9.1" ¯_î_exp_conv)
[
¬î¯ 0 ^ 0®, ¬~(î¯ 0) ^ 0®, ¬(0/1) ^ 0®, ¬ ~(0/1) ^ 0®,
¬î¯ 0 ^ 1®, ¬~(î¯ 0) ^ 1®, ¬(0/1) ^ 1®, ¬ ~(0/1) ^ 1®,
¬î¯ 0 ^ 7®, ¬~(î¯ 0) ^ 7®, ¬(0/1) ^ 7®, ¬ ~(0/1) ^ 7®,
¬î¯ 1 ^ 0®, ¬~(î¯ 1) ^ 0®, ¬(1/1) ^ 0®, ¬ ~(1/1) ^ 0®,
¬î¯ 1 ^ 1®, ¬~(î¯ 1) ^ 1®, ¬(1/1) ^ 1®, ¬ ~(1/1) ^ 1®,
¬î¯ 1 ^ 7®, ¬~(î¯ 1) ^ 7®, ¬(1/1) ^ 7®, ¬ ~(1/1) ^ 7®,
¬î¯ 2 ^ 0®, ¬~(î¯ 2) ^ 0®, ¬(2/1) ^ 0®, ¬ ~(2/1) ^ 0®,
¬î¯ 2 ^ 0®, ¬î¯ 2 ^ 1®, ¬î¯ 2 ^ 2®, ¬î¯ 2 ^ 3®,
¬(3/4) ^ 5®, ¬~(99/17) ^ 2®, ¬(1001/13) ^ 3®, ¬(2/3) ^ 7®
];
=TEX
=SML
store_mt_results
(pred_batch "4.10.1" ¯_less_conv)
[
¬(1/2) < î¯ 0®, ¬(1/2) < ~(î¯ 0)®, ¬~(1/2) < î¯ 0®, ¬~(1/2) < ~(î¯ 0)®,
¬î¯ 0 < (1/2)®, ¬î¯ 0 < ~(1/2)®, ¬~(î¯ 0) < 1/2®, ¬~(î¯ 0) < ~(1/2)®,
¬(1/2) < î¯ 1®, ¬(1/2) < ~(î¯ 1)®, ¬~(1/2) < î¯ 1®, ¬~(1/2) < ~(î¯ 1)®,
¬î¯ 1 < (1/2)®, ¬î¯ 1 < ~(1/2)®, ¬~(î¯ 1) < 1/2®, ¬~(î¯ 1) < ~(1/2)®,
¬(1/2) < î¯ 2®, ¬(1/2) < ~(î¯ 2)®, ¬~(1/2) < î¯ 2®, ¬~(1/2) < ~(î¯ 2)®,
¬î¯ 2 < (1/2)®, ¬î¯ 2 < ~(1/2)®, ¬~(î¯ 2) < 1/2®, ¬~(î¯ 2) < ~(1/2)®,
¬(1/2) < î¯ 45®, ¬(1/2) < ~(î¯ 45)®, ¬~(1/2) < î¯ 45®, ¬~(1/2) < ~(î¯ 45)®,
¬î¯ 45 < (1/2)®, ¬î¯ 45 < ~(1/2)®, ¬~(î¯ 45) < 1/2®, ¬~(î¯ 45) < ~(1/2)®
];
=TEX
=SML
store_mt_results
(pred_batch "4.10.2" ¯_less_conv)
[
¬(44/14) < î¯ 0®, ¬(44/14) < ~(î¯ 0)®, ¬~(44/14) < î¯ 0®, ¬~(44/14) < ~(î¯ 0)®,
¬î¯ 0 < (44/14)®, ¬î¯ 0 < ~(44/14)®, ¬~(î¯ 0) < 44/14®, ¬~(î¯ 0) < ~(44/14)®,
¬(44/14) < î¯ 1®, ¬(44/14) < ~(î¯ 1)®, ¬~(44/14) < î¯ 1®, ¬~(44/14) < ~(î¯ 1)®,
¬î¯ 1 < (44/14)®, ¬î¯ 1 < ~(44/14)®, ¬~(î¯ 1) < 44/14®, ¬~(î¯ 1) < ~(44/14)®,
¬(44/14) < î¯ 2®, ¬(44/14) < ~(î¯ 2)®, ¬~(44/14) < î¯ 2®, ¬~(44/14) < ~(î¯ 2)®,
¬î¯ 2 < (44/14)®, ¬î¯ 2 < ~(44/14)®, ¬~(î¯ 2) < 44/14®, ¬~(î¯ 2) < ~(44/14)®,
¬(44/14) < î¯ 101®, ¬(44/14) < ~(î¯ 101)®, ¬~(44/14) < î¯ 101®, ¬~(44/14) < ~(î¯ 101)®,
¬î¯ 101 < (44/14)®, ¬î¯ 101 < ~(44/14)®, ¬~(î¯ 101) < 44/14®, ¬~(î¯ 101) < ~(44/14)®
];
=TEX
=SML
store_mt_results
(pred_batch "4.10.3" ¯_less_conv)
[
¬(22/7) < (1/3)®, ¬(22/7) < ~(1/3)®, ¬~(22/7) < (1/3)®, ¬~(22/7) < ~(1/3)®,
¬(44/14) < (1/3)®, ¬(44/14) < ~(1/3)®, ¬~(44/14) < (1/3)®, ¬~(44/14) < ~(1/3)®,
¬(22/7) < (15/45)®, ¬(22/7) < ~(15/45)®, ¬~(22/7) < (15/45)®, ¬~(22/7) < ~(15/45)®,
¬(44/14) < (15/45)®, ¬(44/14) < ~(15/45)®, ¬~(44/14) < (15/45)®, ¬~(44/14) < ~(15/45)®
];
=TEX
=SML
store_mt_results
(pred_batch "4.11.1" ¯_¼_conv)
[
¬(1/2) ¼ î¯ 0®, ¬(1/2) ¼ ~(î¯ 0)®, ¬~(1/2) ¼ î¯ 0®, ¬~(1/2) ¼ ~(î¯ 0)®,
¬î¯ 0 ¼ (1/2)®, ¬î¯ 0 ¼ ~(1/2)®, ¬~(î¯ 0) ¼ 1/2®, ¬~(î¯ 0) ¼ ~(1/2)®,
¬(1/2) ¼ î¯ 1®, ¬(1/2) ¼ ~(î¯ 1)®, ¬~(1/2) ¼ î¯ 1®, ¬~(1/2) ¼ ~(î¯ 1)®,
¬î¯ 1 ¼ (1/2)®, ¬î¯ 1 ¼ ~(1/2)®, ¬~(î¯ 1) ¼ 1/2®, ¬~(î¯ 1) ¼ ~(1/2)®,
¬(1/2) ¼ î¯ 2®, ¬(1/2) ¼ ~(î¯ 2)®, ¬~(1/2) ¼ î¯ 2®, ¬~(1/2) ¼ ~(î¯ 2)®,
¬î¯ 2 ¼ (1/2)®, ¬î¯ 2 ¼ ~(1/2)®, ¬~(î¯ 2) ¼ 1/2®, ¬~(î¯ 2) ¼ ~(1/2)®,
¬(1/2) ¼ î¯ 45®, ¬(1/2) ¼ ~(î¯ 45)®, ¬~(1/2) ¼ î¯ 45®, ¬~(1/2) ¼ ~(î¯ 45)®,
¬î¯ 45 ¼ (1/2)®, ¬î¯ 45 ¼ ~(1/2)®, ¬~(î¯ 45) ¼ 1/2®, ¬~(î¯ 45) ¼ ~(1/2)®
];
=TEX
=SML
store_mt_results
(pred_batch "4.11.2" ¯_¼_conv)
[
¬(44/14) ¼ î¯ 0®, ¬(44/14) ¼ ~(î¯ 0)®, ¬~(44/14) ¼ î¯ 0®, ¬~(44/14) ¼ ~(î¯ 0)®,
¬î¯ 0 ¼ (44/14)®, ¬î¯ 0 ¼ ~(44/14)®, ¬~(î¯ 0) ¼ 44/14®, ¬~(î¯ 0) ¼ ~(44/14)®,
¬(44/14) ¼ î¯ 1®, ¬(44/14) ¼ ~(î¯ 1)®, ¬~(44/14) ¼ î¯ 1®, ¬~(44/14) ¼ ~(î¯ 1)®,
¬î¯ 1 ¼ (44/14)®, ¬î¯ 1 ¼ ~(44/14)®, ¬~(î¯ 1) ¼ 44/14®, ¬~(î¯ 1) ¼ ~(44/14)®,
¬(44/14) ¼ î¯ 2®, ¬(44/14) ¼ ~(î¯ 2)®, ¬~(44/14) ¼ î¯ 2®, ¬~(44/14) ¼ ~(î¯ 2)®,
¬î¯ 2 ¼ (44/14)®, ¬î¯ 2 ¼ ~(44/14)®, ¬~(î¯ 2) ¼ 44/14®, ¬~(î¯ 2) ¼ ~(44/14)®,
¬(44/14) ¼ î¯ 101®, ¬(44/14) ¼ ~(î¯ 101)®, ¬~(44/14) ¼ î¯ 101®, ¬~(44/14) ¼ ~(î¯ 101)®,
¬î¯ 101 ¼ (44/14)®, ¬î¯ 101 ¼ ~(44/14)®, ¬~(î¯ 101) ¼ 44/14®, ¬~(î¯ 101) ¼ ~(44/14)®
];
=TEX
=SML
store_mt_results
(pred_batch "4.11.3" ¯_¼_conv)
[
¬(22/7) ¼ (1/3)®, ¬(22/7) ¼ ~(1/3)®, ¬~(22/7) ¼ (1/3)®, ¬~(22/7) ¼ ~(1/3)®,
¬(44/14) ¼ (1/3)®, ¬(44/14) ¼ ~(1/3)®, ¬~(44/14) ¼ (1/3)®, ¬~(44/14) ¼ ~(1/3)®,
¬(22/7) ¼ (15/45)®, ¬(22/7) ¼ ~(15/45)®, ¬~(22/7) ¼ (15/45)®, ¬~(22/7) ¼ ~(15/45)®,
¬(44/14) ¼ (15/45)®, ¬(44/14) ¼ ~(15/45)®, ¬~(44/14) ¼ (15/45)®, ¬~(44/14) ¼ ~(15/45)®,
¬(44/14) ¼ (44/14)®, ¬~(44/14) ¼ ~(44/14)®, ¬~(î¯ 3) ¼ ~(9/6)®, ¬(9/6) ¼ (î¯ 3)®
];
=TEX
=SML
store_mt_results
(pred_batch "4.12.1" ¯_eq_conv)
[
¬(î¯ 0) = (î¯ 0)®, ¬~(î¯ 0) = (î¯ 0)®,  ¬(î¯ 0) = ~(î¯ 0)®, ¬~(î¯ 0) = ~ (î¯ 0)®, 
¬(î¯ 0) = (î¯ 1)®, ¬~(î¯ 0) = (î¯ 1)®,  ¬(î¯ 0) = ~(î¯ 1)®, ¬~(î¯ 0) = ~ (î¯ 1)®
];
=TEX
=SML
store_mt_results
(pred_batch "4.12.2" ¯_eq_conv)
[
¬(î¯ 0) = (0/1)®, ¬~(î¯ 0) = (0/1)®,  ¬(î¯ 0) = ~(0/1)®, ¬~(î¯ 0) = ~ (0/1)®, 
¬(î¯ 0) = (1/1)®, ¬~(î¯ 0) = (1/1)®,  ¬(î¯ 0) = ~(1/1)®, ¬~(î¯ 0) = ~ (1/1)®
];
=TEX
=SML
store_mt_results
(pred_batch "4.12.3" ¯_eq_conv)
[
¬(1/2) = (1/2)®, ¬~(1/2) = (1/2)®,¬(1/2) = ~(1/2)®,  ¬~(1/2) = ~(1/2)®, 
¬(1/2) = (2/3)®, ¬~(1/2) = (2/3)®,¬(1/2) = ~(2/3)®,  ¬~(1/2) = ~(2/3)®,
¬(17/34) = (3/6)®, ¬~(17/34) = (3/6)®, ¬(17/34) = ~(3/6)®, ¬~(17/34) = ~(3/6)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.13.1" ¯_eval_conv)
[
	¬î¯ 0 + î¯ 0®, ¬î¯ 0 + ~(î¯ 0)®, ¬~(î¯ 0) + î¯ 0®, ¬~(î¯ 0) + ~(î¯ 0)®,
	¬î¯ 1 + î¯ 0®, ¬î¯ 1 + ~(î¯ 0)®, ¬~(î¯ 1) + î¯ 0®, ¬~(î¯ 1) + ~(î¯ 0)®,
	¬î¯ 1 + î¯ 1®, ¬î¯ 1 + ~(î¯ 1)®, ¬~(î¯ 1) + î¯ 1®, ¬~(î¯ 1) + ~(î¯ 1)®,
	¬0/1 + î¯ 1®, ¬0/1 + ~(î¯ 1)®, ¬~(0/1) + î¯ 1®, ¬~(0/1) + ~(î¯ 1)®,
	¬î¯ 1 + 0/1®, ¬î¯ 1 + ~(0/1)®, ¬~(î¯ 1) + 0/1®, ¬~(î¯ 1) + ~(0/1)®,
	¬0/1 + î¯ 1®, ¬0/1 + ~(î¯ 1)®, ¬~(0/1) + î¯ 1®, ¬~(0/1) + ~(î¯ 1)®,
	¬0/1 + 0/1®, ¬0/1 + ~(0/1)®, ¬~(0/1) + 0/1®, ¬~(0/1) + ~(0/1)®,
	¬1/1 + 1/1®, ¬1/1 + ~(1/1)®, ¬~(1/1) + 1/1®, ¬~(1/1) + ~(1/1)®,
	¬2/3 + 3/4®, ¬2/3 + ~(3/4)®, ¬~(2/3) + 3/4®, ¬~(2/3) + ~(3/4)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.13.2" ¯_eval_conv)
[
	¬1/1 + 1/2 + 1/4 + 1/8®, ¬1/1 - 1/2 + 1/4 - 1/8®,
	¬î¯ 1 + 1/2 + 1/4 + 1/8®, ¬î¯ 1 - 1/2 + 1/4 - 1/8®,
	¬î¯ 1 + î¯ 1 / î¯ 2 + î¯ 1 / î¯ 4 + î¯ 1 / î¯ 8®,
	¬î¯ 1 - î¯ 1 / î¯ 2 + î¯ 1 / î¯ 4 - î¯ 1 / î¯ 8®
];
=TEX
=SML
store_mt_results
(arith_batch "4.13.3" ¯_eval_conv)
[
	¬î¯ 0 * î¯ 0®, ¬î¯ 0 * ~(î¯ 0)®, ¬~(î¯ 0) * î¯ 0®, ¬~(î¯ 0) * ~(î¯ 0)®,
	¬î¯ 1 * î¯ 0®, ¬î¯ 1 * ~(î¯ 0)®, ¬~(î¯ 1) * î¯ 0®, ¬~(î¯ 1) * ~(î¯ 0)®,
	¬î¯ 1 * î¯ 1®, ¬î¯ 1 * ~(î¯ 1)®, ¬~(î¯ 1) * î¯ 1®, ¬~(î¯ 1) * ~(î¯ 1)®,
	¬0/1 * î¯ 1®, ¬0/1 * ~(î¯ 1)®, ¬~(0/1) * î¯ 1®, ¬~(0/1) * ~(î¯ 1)®,
	¬î¯ 1 * 0/1®, ¬î¯ 1 * ~(0/1)®, ¬~(î¯ 1) * 0/1®, ¬~(î¯ 1) * ~(0/1)®,
	¬0/1 * î¯ 1®, ¬0/1 * ~(î¯ 1)®, ¬~(0/1) * î¯ 1®, ¬~(0/1) * ~(î¯ 1)®,
	¬0/1 * 0/1®, ¬0/1 * ~(0/1)®, ¬~(0/1) * 0/1®, ¬~(0/1) * ~(0/1)®,
	¬1/1 * 1/1®, ¬1/1 * ~(1/1)®, ¬~(1/1) * 1/1®, ¬~(1/1) * ~(1/1)®,
	¬2/3 * 3/4®, ¬2/3 * ~(3/4)®, ¬~(2/3) * 3/4®, ¬~(2/3) * ~(3/4)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.13.4" ¯_eval_conv)
[
	¬î¯ 1 / î¯ 1®, ¬î¯ 1 / ~(î¯ 1)®, ¬~(î¯ 1) / î¯ 1®, ¬~(î¯ 1) / ~(î¯ 1)®,
	¬î¯ 1 / î¯ 7®, ¬î¯ 1 / ~(î¯ 7)®, ¬~(î¯ 1) / î¯ 7®, ¬~(î¯ 1) / ~(î¯ 7)®,
	¬î¯ 3 / î¯ 7®, ¬î¯ 3 / ~(î¯ 7)®, ¬~(î¯ 3) / î¯ 7®, ¬~(î¯ 3) / ~(î¯ 7)®,
	¬(0/1) / î¯ 1®, ¬(0/1) / ~(î¯ 1)®, ¬~(0/1) / î¯ 1®, ¬~(0/1) / ~(î¯ 1)®,
	¬(1/1) / (1/1)®, ¬(1/1) / ~(1/1)®, ¬~(1/1) / (1/1)®, ¬~(1/1) / ~(1/1)®,
	¬(2/3) / (3/4)®, ¬(2/3) / ~(3/4)®, ¬~(2/3) / (3/4)®, ¬~(2/3) / ~(3/4)®
];
=TEX
=SML
store_mt_results
(arith_batch "4.13.5" ¯_eval_conv)
[
	¬î¯ 1 + î¯ 2 * (1/4 - î¯ 99 / î¯2) ›-›1 + Abs (1/2) / î¯ 27®,
	¬î¯ 1 / î¯ 2 * (1/4 - î¯ 99 / î¯2) ›-›1 + ~(~(~ (1/2))) / î¯ 27®
];
=TEX
=TEX
=SML
store_mt_results
(arith_batch "4.13.6" ¯_eval_conv)
[
	¬1/1 * 1/2 * 1/4 * 1/8®, ¬(1/1) / (1/2) * (1/4) / (1/8)®,
	¬î¯ 1 * 1/2 * 1/4 * 1/8®, ¬î¯ 1 / (1/2) * (1/4) / (1/8)®,
	¬î¯ 1 * î¯ 1 / î¯ 2 * î¯ 1 / î¯ 4 * î¯ 1 / î¯ 8®,
	¬î¯ 1 / î¯ 1 / î¯ 2 * î¯ 1 / î¯ 4 / î¯ 1 / î¯ 8®
];
=TEX
\section{ARITHMETIC NORMALISATION CONVERSION}
=SML
store_mt_results
(arith_batch "5.1" ¯_anf_conv)
[
	¬î¯ 0 + î¯ 0®, ¬î¯ 0 + ~(î¯ 0)®, ¬~(î¯ 0) + î¯ 0®, ¬~(î¯ 0) + ~(î¯ 0)®,
	¬î¯ 1 + î¯ 0®, ¬î¯ 1 + ~(î¯ 0)®, ¬~(î¯ 1) + î¯ 0®, ¬~(î¯ 1) + ~(î¯ 0)®,
	¬î¯ 1 + î¯ 1®, ¬î¯ 1 + ~(î¯ 1)®, ¬~(î¯ 1) + î¯ 1®, ¬~(î¯ 1) + ~(î¯ 1)®,
	¬0/1 + î¯ 1®, ¬0/1 + ~(î¯ 1)®, ¬~(0/1) + î¯ 1®, ¬~(0/1) + ~(î¯ 1)®,
	¬î¯ 1 + 0/1®, ¬î¯ 1 + ~(0/1)®, ¬~(î¯ 1) + 0/1®, ¬~(î¯ 1) + ~(0/1)®,
	¬0/1 + î¯ 1®, ¬0/1 + ~(î¯ 1)®, ¬~(0/1) + î¯ 1®, ¬~(0/1) + ~(î¯ 1)®,
	¬0/1 + 0/1®, ¬0/1 + ~(0/1)®, ¬~(0/1) + 0/1®, ¬~(0/1) + ~(0/1)®,
	¬1/1 + 1/1®, ¬1/1 + ~(1/1)®, ¬~(1/1) + 1/1®, ¬~(1/1) + ~(1/1)®,
	¬2/3 + 3/4®, ¬2/3 + ~(3/4)®, ¬~(2/3) + 3/4®, ¬~(2/3) + ~(3/4)®
];
=TEX
=SML
store_mt_results
(arith_batch "5.2" ¯_anf_conv)
[
	¬1/1 + 1/2 + 1/4 + 1/8®, ¬1/1 - 1/2 + 1/4 - 1/8®,
	¬î¯ 1 + 1/2 + 1/4 + 1/8®, ¬î¯ 1 - 1/2 + 1/4 - 1/8®,
	¬î¯ 1 + î¯ 1 / î¯ 2 + î¯ 1 / î¯ 4 + î¯ 1 / î¯ 8®,
	¬î¯ 1 - î¯ 1 / î¯ 2 + î¯ 1 / î¯ 4 - î¯ 1 / î¯ 8®
];
=TEX
=SML
store_mt_results
(arith_batch "5.3" ¯_anf_conv)
[
	¬î¯ 0 * î¯ 0®, ¬î¯ 0 * ~(î¯ 0)®, ¬~(î¯ 0) * î¯ 0®, ¬~(î¯ 0) * ~(î¯ 0)®,
	¬î¯ 1 * î¯ 0®, ¬î¯ 1 * ~(î¯ 0)®, ¬~(î¯ 1) * î¯ 0®, ¬~(î¯ 1) * ~(î¯ 0)®,
	¬î¯ 1 * î¯ 1®, ¬î¯ 1 * ~(î¯ 1)®, ¬~(î¯ 1) * î¯ 1®, ¬~(î¯ 1) * ~(î¯ 1)®,
	¬0/1 * î¯ 1®, ¬0/1 * ~(î¯ 1)®, ¬~(0/1) * î¯ 1®, ¬~(0/1) * ~(î¯ 1)®,
	¬î¯ 1 * 0/1®, ¬î¯ 1 * ~(0/1)®, ¬~(î¯ 1) * 0/1®, ¬~(î¯ 1) * ~(0/1)®,
	¬0/1 * î¯ 1®, ¬0/1 * ~(î¯ 1)®, ¬~(0/1) * î¯ 1®, ¬~(0/1) * ~(î¯ 1)®,
	¬0/1 * 0/1®, ¬0/1 * ~(0/1)®, ¬~(0/1) * 0/1®, ¬~(0/1) * ~(0/1)®,
	¬1/1 * 1/1®, ¬1/1 * ~(1/1)®, ¬~(1/1) * 1/1®, ¬~(1/1) * ~(1/1)®,
	¬2/3 * 3/4®, ¬2/3 * ~(3/4)®, ¬~(2/3) * 3/4®, ¬~(2/3) * ~(3/4)®
];
=TEX
=SML
store_mt_results
(arith_batch "5.4" ¯_anf_conv)
[
	¬î¯ 1 / î¯ 1®, ¬î¯ 1 / ~(î¯ 1)®, ¬~(î¯ 1) / î¯ 1®, ¬~(î¯ 1) / ~(î¯ 1)®,
	¬î¯ 1 / î¯ 7®, ¬î¯ 1 / ~(î¯ 7)®, ¬~(î¯ 1) / î¯ 7®, ¬~(î¯ 1) / ~(î¯ 7)®,
	¬î¯ 3 / î¯ 7®, ¬î¯ 3 / ~(î¯ 7)®, ¬~(î¯ 3) / î¯ 7®, ¬~(î¯ 3) / ~(î¯ 7)®,
	¬(0/1) / î¯ 1®, ¬(0/1) / ~(î¯ 1)®, ¬~(0/1) / î¯ 1®, ¬~(0/1) / ~(î¯ 1)®,
	¬(1/1) / (1/1)®, ¬(1/1) / ~(1/1)®, ¬~(1/1) / (1/1)®, ¬~(1/1) / ~(1/1)®,
	¬(2/3) / (3/4)®, ¬(2/3) / ~(3/4)®, ¬~(2/3) / (3/4)®, ¬~(2/3) / ~(3/4)®
];
=TEX
=SML
store_mt_results
(arith_batch "5.5" ¯_anf_conv)
[
	¬1/1 * 1/2 * 1/4 * 1/8®, ¬(1/1) / (1/2) * (1/4) / (1/8)®,
	¬î¯ 1 * 1/2 * 1/4 * 1/8®, ¬î¯ 1 / (1/2) * (1/4) / (1/8)®,
	¬î¯ 1 * î¯ 1 / î¯ 2 * î¯ 1 / î¯ 4 * î¯ 1 / î¯ 8®,
	¬î¯ 1 / î¯ 1 / î¯ 2 * î¯ 1 / î¯ 4 / î¯ 1 / î¯ 8®
];
=TEX
=SML
store_mt_results
(mt_runf (fn (thm, tm) => snd(dest_eq(concl thm)) =$ tm))
[
	("5.6.1", ¯_anf_conv, ¬î¯ 1 / (î¯ 2 + î¯ 3)®, ¬1/5®),
	("5.6.2", ¯_anf_conv, ¬(x + y:¯) * (x - y)®, ¬x * x + ~ y * y : ¯®),
	("5.6.3", ¯_anf_conv, ¬(x + y:¯) * (x + y)®, ¬x * x + î¯ 2 * x * y + y * y®),
	("5.6.4", ¯_anf_conv,
		 ¬(î¯ 1 - x) * (î¯ 1 + x + x*x + x*x*x)®,
		¬î¯ 1 + ~ x * x * x * x®),
	("5.6.5", ¯_anf_conv,
		 ¬(î¯ 1 + x) - y * ((î¯ 1 + x) - y)®,
		¬î¯ 1 + x + ~ y + ~ x * y + y * y®)
];

=TEX
\section{PROOF CONTEXT}
=SML
set_merge_pcs["basic_hol", "'¯"];
=TEX
=SML
store_mt_results
(arith_batch "6.1" (rewrite_conv[]))
[
	¬1/2 + 3/4®, ¬~(1/2) + 3/4®, ¬1/2 + ~(3/4)®, ¬~(1/2) + ~(3/4)®,
	¬î¯ 2 + 3/4®, ¬~(î¯ 2) + 3/4®, ¬î¯ 2 + ~(3/4)®, ¬~(î¯ 2) + ~(3/4)®,
	¬Abs(î¯ 2) + 3/4®, ¬Abs(~(î¯ 2)) + 3/4®,
		¬î¯ 2 + Abs(~(3/4))®, ¬~(î¯ 2) + Abs(~(3/4))®,
	¬Abs(î¯ 2) * 3/4®, ¬Abs(~(î¯ 2)) * 3/4®,
		¬î¯ 2 * Abs(~(3/4))®, ¬~(î¯ 2) * Abs(~(3/4))®,
	¬Abs(î¯ 2) / 3/4®, ¬Abs(~(î¯ 2)) / 3/4®,
		¬î¯ 2 / Abs(~(3/4))®, ¬~(î¯ 2) / Abs(~(3/4))®
];
=TEX
=SML
store_mt_results
(pred_batch "6.2" (rewrite_conv[]))
[
	¬1/2 + 3/4 > 3/4®, ¬~(1/2) < ~(1/2) + 3/4®, ¬x + y = y + x :¯®,
	¬x ¼ x :¯®, ¬a + b ¾ b + a :¯®, ¬Abs(1/2) = (2/1)›-›1®,
	¬x > x :¯®, ¬a + b > b + a :¯®, ¬Abs(1/2) < (2/1)›-›1®
];
=TEX
\section{LINEAR ARITHMETIC DECISION PROCEDURE}

=SML
set_merge_pcs["¯_lin_arith"];
store_mt_results
mt_run [
	("7.1.1",
	tac_solve (prove_tac[]),
	([], ¬î¯ 0 < y ´ (1/2)*y < (3/2)*y®), true),
	("7.1.2",
	tac_solve (prove_tac[]),
	([], ¬x < y ´ x < (x+y) / î¯ 2 ± (x+y) / î¯ 2 < y®), true)
];
val tms1 = [
	¬a ¼ î¯ 0®,
	¬~a ¼ ~(î¯ 1)®,
	¬T®
];
val tms2 = [
	¬a + b = î¯ 0®,
	¬î¯ 2*a = î¯ 1®,
	¬î¯ 2*b = î¯ 1®
];
val tms3 = [
	¬a ¼ î¯ 0®,
	¬~b ¼ ~(î¯ 1)®,
	¬T®,
	¬~a + b ¼ ~(î¯ 2)®,
	¬T®
];
val tms4 = [
	¬(1/2)*a ¼ î¯ 0®,
	¬~(4/5)*a ¼ ~(5/6)®,
	¬T®
];
val tms5 = [
	¬(1/2)*a = î¯ 1®,
	¬~(2/5)*b ¼ ~(7/6)®,
	¬~a + b ¼ (1/100)®,
	¬T®
];
val tms6 = [¬a ¼ 1 / 2®,¬~ a ¼ ~ (3 / 4)®,¬T®];
val tms7 = [
	¬a + ~b ¼ ~(î¯ 1)®,
	¬(1/2)*b + ~ (1/2)*c ¼ î¯ 0®,
	¬(7/6)*c + ~ (7/6)*d ¼ î¯ 0®,
	¬d + ~ a ¼ î¯ 0®,
	¬T®
];
val tms7 = [
	¬a + ~b < ~(î¯ 1)®,
	¬(1/2)*b + ~ (1/2)*c ¼ î¯ 0®,
	¬(7/6)*c + ~ (7/6)*d ¼ î¯ 0®,
	¬d + ~ a ¼ î¯ 0®,
	¬T®
];
val tms8 = [
	¬a + ~b < ~(î¯ 1)®,
	¬(1/2)*b + ~ (1/2)*c ¼ î¯ 0®,
	¬(7/6)*c + ~ (7/6)*d = î¯ 0®,
	¬(î¯ 99)*d + ~ (î¯ 99)*e < î¯ 0®,
	¬e + ~ a = î¯ 0®,
	¬T®
];
val tms9 = [
	¬~ a * a ¼ î¯ 0®,
	¬~ b * b ¼ î¯ 0®,
	¬a * a + b * b < î¯ 0®,
	¬T®
];
fun check_lin_arith_rule (thm, tms) = (
	is_f (concl thm) andalso is_nil (asms thm term_diff tms)
);
store_mt_results
(mt_runf check_lin_arith_rule)
(map (fn (tag, ths) => (tag, ¯_lin_arith_rule, ths, ths)) [
	("7.2.1", tms1),
	("7.2.2", tms2),
	("7.2.3", tms3),
	("7.2.4", tms4),
	("7.2.5", tms5),
	("7.2.6", tms6),
	("7.2.7", tms7),
	("7.2.8", tms8),
	("7.2.9", tms9)
]);
=TEX
=SML
store_mt_results
(mt_runf (fn (th, tm) => snd(dest_eq(concl th)) =$ tm))
[
	("7.3.1", ¯_eq_cancel_conv, ¬x + ~(~(1/2 )) = y®, ¬x + ~ y = ~ (1 / 2)®),
	("7.3.2", ¯_¼_cancel_conv, ¬x + î¯ 2 ›-›1 ¼ y®, ¬x + ~ y ¼ ~ (1 / 2)®),
	("7.3.3", ¯_less_cancel_conv, ¬x + 3/6 < y®, ¬x + ~ y < ~ (1 / 2)®)
];
=TEX
\section{END OF TESTS}
=SML
diag_string(summarize_mt_results());
=TEX
\end{document}







