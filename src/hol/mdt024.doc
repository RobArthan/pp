% mdt024.doc   %Z% $Date$ $Revision$ $RCSfile$

=TEX
% mdt024.doc   %Z% $Date$ $Revision$ $RCSfile$
\documentstyle[hol,11pt,TQ]{article}

\TPPtitle{Module Tests of `Oppen' Formatting Routines}
\TPPref{DS/FMU/IED/MDT024}
\def\SCCSissue{$Revision$%
}
\TPPissue{\SCCSissue}
\TPPdate{\FormatDate{$Date$%
}}
\TPPproject{FST PROJECT}

=IGN

Commands to process this document in various ways.

doc4errors mdt024
usefile "mdt024.sml";

make -f rel001.mkf mdt024.dvi
doc4tex mdt024
tex4dvi mdt024
bibtex mdt024
doc4tex mdt024 ; tex4dvi mdt024
dvipage mdt024 &

doc4errors mdt024
usefile "mdt024.sml";

=TEX
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{HOL}
\TPPauthor{A.J. Hammon & WIN01}  %% Mandatory field
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{This document contains the module tests for the
	Oppen-style formatting routines for Release~1 of ICL~HOL.}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library
}}

\ftlinepenalty=9999
\makeindex

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\catcode`\_=\active
\def\_{\kern.06em\vbox{\hrule height.1ex width.3em}\hskip0.1em\relax}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\makeTPPfrontpage

\vfill
\begin{center}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{DOCUMENT CONTROL}

%********************************************************************

\subsection{Contents List}
\tableofcontents
% \listoftables

%********************************************************************

\subsection{Document Cross References}

\bibliographystyle{fmu}
\bibliography{fmu}

%********************************************************************

\subsection{Changes History}

\begin{description}

\item[\FormatDate{91/08/15}, issue 1.3~] First issue.

\item[\FormatDate{91/09/11}, issue 1.4~] Changes for ID0055.

%\item[\FormatDate{$Date$%
%}, issue \SCCSissue~]

\end{description}

%********************************************************************

%\subsection{Changes Forecast} \label{ChangesForecast}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{GENERAL}

%********************************************************************

\subsection{Scope}

This document contains the module tests for the Oppen-style formatting
routines for Release~1 of the ICL HOL system which are discussed
in~\cite{DS/FMU/IED/IMP024}.  The tests use the module testing system
of~\cite{DS/FMU/IED/DTD013} and~\cite{DS/FMU/IED/IMP013}.

%********************************************************************

\subsection{Introduction}

Each test, or part of a test, is identified by a string of the form
``$\cal N.M.A$'' or ``$\cal N.M$'' or ``$\cal N$'' where ``$\cal N$''
is the test number, ``$\cal N$'' is the line length for the test, and,
``$\cal A$'' is ancilliary labelling for the test.

\section{TEST HARNESS INITIALISATION}

=IGN
Get the test harness files
sccs -d ~ied get dtd013.doc imp013.doc
doc4errors dtd013
doc4errors imp013

doc4errors mdtoppen5
usefile "mdtoppen5.sml";

=TEX

Load and initialise the module test system.

=SML
usefile "dtd013.sml";
usefile "imp013.sml";
init_mt_results ();
=TEX

Function $fs$ is used to invoke the tests.
It calls both main interfaces writing text to standard output for the
$oppen_print$ routine.  This text must be checked by inspection of the
output.

=SML
fun fs width opf v = (
	OppenFormatting.oppen_print (fn () => width) opf v ;
	OppenFormatting.oppen_format (fn () => width) opf v 
);
=TEX

=SML
fun say s = (output(std_out, s); output(std_out, "\n"));

fun sayl l = (map say l; ());
=TEX

\section{THE TESTS}

\subsection{Basic Confidence Tests}

=SML
let

fun t1 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) () = (
	addstring "1"
);

val rt1 = ["1"];

fun t2 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) () = (
	beginb(0, false);
		addstring "2";
	endb()
);

val rt2 = ["2"];

fun t3 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) () = (
	beginb(0, false);
		addstring "3";
		space(1,0);
		addstring "3aaaa";
		space(1,0);
		addstring "3bbbbbb";
	endb()
);

val rt3 = ["3 3aaaa 3bbbbbb"];

fun t4 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) () = (
	addstring "4";
	space(1,0);
	addstring "4aaaa";
	space(1,0);
	addstring "4bbbbbb"
);

val rt4 = ["4 4aaaa 4bbbbbb"];

in

sayl rt1;
sayl rt2;
sayl rt3;
sayl rt4;

store_mt_results_show mt_run[
	("1", fs 30 t1, (), rt1),
	("2", fs 30 t2, (), rt2),
	("3", fs 30 t3, (), rt3),
	("4", fs 30 t4, (), rt4)
]

end;
=TEX

\subsection{Tests of nesting}

First with no extra indentation.

=SML
let

fun t5 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) () = (
	beginb(0, false);
		addstring "50";
		beginb(0, false);
			beginb(0, false);
				addstring "51";
				space(1,0);
				addstring "52aaaa";
				space(1,0);
				addstring "53bbbbbb";
			endb();
			addstring "54";
			space(1,0);
			addstring "55aaaa";
			space(1,0);
			addstring "56bbbbbb";
		endb();
		beginb(0, false);
			addstring "57";
			space(1,0);
			addstring "58aaaa";
			space(1,0);
			addstring "59bbbbbb";
		endb();
		space(1,0);
		addstring "510aaaa";
		space(1,0);
		addstring "511bbbbbb";
	endb()
);

val rt5_80 = ["5051 52aaaa 53bbbbbb54 55aaaa 56bbbbbb57 58aaaa 59bbbbbb 510aaaa 511bbbbbb"];
val rt5_30 = [	"5051 52aaaa 53bbbbbb54 55aaaa",
		"56bbbbbb57 58aaaa 59bbbbbb",
		"510aaaa 511bbbbbb"];

in

sayl rt5_30;
sayl rt5_80;

store_mt_results_show mt_run[
	("5.30", fs 30 t5, (), rt5_30),
	("5.80", fs 80 t5, (), rt5_80)
]

end;
=TEX

Second with various indentation and spacing values

=SML
let

fun t6 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) () = (
	beginb(1, false);
		addstring "60";
		beginb(2, false);
			beginb(3, false);
				addstring "61";
				space(1,0);
				addstring "62aaaa";
				space(1,0);
				addstring "63bbbbbb";
			endb();
			addstring "64";
			space(1,0);
			addstring "65aaaa";
			space(1,0);
			addstring "66bbbbbb";
		endb();
		beginb(4, false);
			addstring "67";
			space(1,0);
			addstring "68aaaa";
			space(1,0);
			addstring "69bbbbbb";
		endb();
		space(1,0);
		addstring "610aaaa";
		space(1,0);
		addstring "611bbbbbb";
	endb()
);

val rt6_100 = ["6061 62aaaa 63bbbbbb64 65aaaa 66bbbbbb67 68aaaa 69bbbbbb 610aaaa 611bbbbbb"];

val rt6_30 = [	"6061 62aaaa 63bbbbbb64 65aaaa",
		"   66bbbbbb67 68aaaa 69bbbbbb",
		" 610aaaa 611bbbbbb"
];


in

sayl rt6_100;
sayl rt6_30;

store_mt_results_show mt_run[
	("6.100", fs 100 t6, (), rt6_100),
	("6.30", fs 30 t6, (), rt6_30)
]

end;
=TEX

\subsection{Tests of Line Breaking}

Consistent line breaking.  Note the final ``$space(1,0);$'' causes a line of
spaces.  This is expected, the call of $space$ demands that some spacing be
issued.  Test~8 is identical to test~7 apart from the final space.

=SML
let

fun t7 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) () = (
	beginb(1, true);
	addstring "7000"; space(1,0);
	addstring "7100"; space(1,0);
	addstring "7200"; space(1,0);
	addstring "7300"; space(1,0);
	addstring "7400"; space(1,0);
	addstring "7500"; space(1,0);
	addstring "7600"; space(1,0);
	addstring "7700"; space(1,0);
	addstring "7800"; space(1,0);
	addstring "7900"; space(1,0);
	endb()
);

val rt7_80 = ["7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 "];
val rt7_30 = ["7000", " 7100", " 7200", " 7300", " 7400", " 7500",
	" 7600", " 7700", " 7800", " 7900", " "];

in

sayl rt7_80;
sayl rt7_30;

store_mt_results_show mt_run[
	("7.80", fs 80 t7, (), rt7_80),
	("7.30", fs 30 t7, (), rt7_30)
]

end;
=TEX

=SML
let

fun t8 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) () = (
	beginb(1, true);
	addstring "8000"; space(1,0);
	addstring "8100"; space(1,0);
	addstring "8200"; space(1,0);
	addstring "8300"; space(1,0);
	addstring "8400"; space(1,0);
	addstring "8500"; space(1,0);
	addstring "8600"; space(1,0);
	addstring "8700"; space(1,0);
	addstring "8800"; space(1,0);
	addstring "8900";
	endb()
);

val rt8_80 = ["8000 8100 8200 8300 8400 8500 8600 8700 8800 8900"];
val rt8_30 = ["8000", " 8100", " 8200", " 8300", " 8400", " 8500",
		" 8600", " 8700", " 8800", " 8900"];

in

sayl rt8_80;
sayl rt8_30;

store_mt_results_show mt_run[
	("8.80", fs 80 t8, (), rt8_80),
	("8.30", fs 30 t8, (), rt8_30)
]

end;
=TEX

Tests~9 and~10 are similar to tests~7 and~8 except that the extra space
after a line break is non-zero.  Note the line of spaces at the end of
test~9, compare with test~7.

=SML
let

fun t9 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) () = (
	beginb(1, true);
	addstring "9000"; space(1,2);
	addstring "9100"; space(1,2);
	addstring "9200"; space(1,2);
	addstring "9300"; space(1,2);
	addstring "9400"; space(1,2);
	addstring "9500"; space(1,2);
	addstring "9600"; space(1,2);
	addstring "9700"; space(1,2);
	addstring "9800"; space(1,2);
	addstring "9900"; space(1,2);
	endb()
);

val rt9_90 = ["9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 "];
val rt9_30 = ["9000", "   9100", "   9200", "   9300", "   9400",
	"   9500", "   9600", "   9700", "   9800", "   9900", "   "];

in

sayl rt9_90;
sayl rt9_30;

store_mt_results_show mt_run[
	("9.80", fs 80 t9, (), rt9_90),
	("9.30", fs 30 t9, (), rt9_30)
]

end;
=TEX

=SML
let

fun t10 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) () = (
	beginb(1, true);
	addstring "10000"; space(1,2);
	addstring "10100"; space(1,2);
	addstring "10200"; space(1,2);
	addstring "10300"; space(1,2);
	addstring "10400"; space(1,2);
	addstring "10500"; space(1,2);
	addstring "10600"; space(1,2);
	addstring "10700"; space(1,2);
	addstring "10800"; space(1,2);
	addstring "10900";
	endb()
);

val rt10_90 = ["10000 10100 10200 10300 10400 10500 10600 10700 10800 10900"];
val rt10_30 = ["10000", "   10100", "   10200", "   10300", "   10400",
	"   10500", "   10600", "   10700", "   10800", "   10900"];

in

sayl rt10_90;
sayl rt10_30;

store_mt_results_show mt_run[
	("10.90", fs 90 t10, (), rt10_90),
	("10.30", fs 30 t10, (), rt10_30)
]

end;
=TEX

\subsection{Tests of Nesting and Line Breaking}

Nested consistent and inconsistent spacing.  These tests use the same
basic data, but the $flag$ argument of function $t11$ controls the
consistency required of the line breaks.

=SML
let

fun t11 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) flag = (
	beginb(1, flag);
		addstring "1101";
		space(1,2);
		beginb(1, not flag);
			addstring "1102";
			space(1,2);
			beginb(1, flag);
				addstring "1103";
				space(1,2);
				beginb(1, not flag);
					addstring "1104";
					space(1,2);
					addstring "1105";
					space(1,2);
					addstring "1105";
				endb();
				space(1,2);
				addstring "1106";
			endb();
			space(1,2);
			addstring "1107";
			space(1,2);
			beginb(1, flag);
				addstring "1108";
				space(1,2);
				beginb(1, not flag);
					addstring "1109";
					space(1,2);
					addstring "1110";
					space(1,2);
					addstring "1110";
				endb();
				space(1,2);
				addstring "1111";
			endb();
			space(1,2);
			addstring "1112";
		endb();
		space(1,2);
		addstring "1113";
	endb()
);

val rt11tf_100 =
	["1101 1102 1103 1104 1105 1105 1106 1107 1108 1109 1110 1110 1111 1112 1113"];

val rt11t_30 = [	"1101",
			"   1102",
			"    1103 1104 1105 1105 1106",
			"    1107",
			"    1108 1109 1110 1110 1111",
			"    1112",
			"   1113"];

val rt11f_30 = [	"1101",
			"   1102",
			"    1103 1104 1105 1105 1106",
			"    1107",
			"    1108 1109 1110 1110 1111",
			"    1112 1113"];

val rt11f_20 = [	"1101",
			"   1102",
			"    1103",
			"     1104 1105 1105",
			"     1106",
			"    1107",
			"    1108",
			"     1109 1110 1110",
			"     1111",
			"    1112 1113"];

val rt11t_20 = [	"1101",
			"   1102",
			"    1103",
			"     1104 1105 1105",
			"     1106 1107",
			"    1108",
			"     1109 1110 1110",
			"     1111 1112",
			"   1113"];

in

sayl rt11tf_100;
sayl rt11tf_100;
sayl rt11f_30;
sayl rt11t_30;
sayl rt11f_20;
sayl rt11t_20;

store_mt_results_show mt_run[
	("11.100f", fs 100 t11, false, rt11tf_100),
	("11.100t", fs 100 t11, true, rt11tf_100),
	("11.30f", fs 30 t11, false, rt11f_30),
	("11.30t", fs 30 t11, true, rt11t_30),
	("11.20f", fs 20 t11, false, rt11f_20),
	("11.20t", fs 20 t11, true, rt11t_20)
]

end;
=TEX

\subsection{Tests of Long strings}

These strings cause output of larger than the desired line lengths.

=SML
let

fun t12 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) flag = (
	beginb(1, flag);
		addstring "1201-123456789-123456789";
		space(1,2);
		addstring "1202-123456789-123456789-123456789";
		space(1,2);
		addstring "1202-123456789-123456789";
		space(1,2);
		addstring "1202-123456789-123456789-123456789";
		space(1,2);
		addstring "1202-123456789-123456789-123456789-123456789-123456789";
	endb()
);


val rt12tf_200 = ["1201-123456789-123456789 1202-123456789-123456789-123456789 \
	\1202-123456789-123456789 1202-123456789-123456789-123456789 \
	\1202-123456789-123456789-123456789-123456789-123456789"];

val rt12f_80 = [
	"1201-123456789-123456789 1202-123456789-123456789-123456789",
	"   1202-123456789-123456789 1202-123456789-123456789-123456789",
	"   1202-123456789-123456789-123456789-123456789-123456789"];

val rt12t_80 = [
	"1201-123456789-123456789",
	"   1202-123456789-123456789-123456789",
	"   1202-123456789-123456789",
	"   1202-123456789-123456789-123456789",
	"   1202-123456789-123456789-123456789-123456789-123456789"];

val rt12f_50 = [
	"1201-123456789-123456789",
	"   1202-123456789-123456789-123456789",
	"   1202-123456789-123456789",
	"   1202-123456789-123456789-123456789",
	"   1202-123456789-123456789-123456789-123456789-123456789"];

val rt12t_50 = [
	"1201-123456789-123456789",
	"   1202-123456789-123456789-123456789",
	"   1202-123456789-123456789",
	"   1202-123456789-123456789-123456789",
	"   1202-123456789-123456789-123456789-123456789-123456789"];

val rt12f_30 = [
	"1201-123456789-123456789",
	"   1202-123456789-123456789-123456789",
	"   1202-123456789-123456789",
	"   1202-123456789-123456789-123456789",
	"   1202-123456789-123456789-123456789-123456789-123456789"];

val rt12t_30 = [
	"1201-123456789-123456789",
	"   1202-123456789-123456789-123456789",
	"   1202-123456789-123456789",
	"   1202-123456789-123456789-123456789",
	"   1202-123456789-123456789-123456789-123456789-123456789"];

in

sayl rt12tf_200;
sayl rt12tf_200;
sayl rt12f_80;
sayl rt12t_80;
sayl rt12f_50;
sayl rt12t_50;
sayl rt12f_30;
sayl rt12t_30;


store_mt_results_show mt_run[
	("12.200f", fs 200 t12, false, rt12tf_200),
	("12.200t", fs 200 t12, true, rt12tf_200),

	("12.80f", fs 80 t12, false, rt12f_80),
	("12.80t", fs 80 t12, true, rt12t_80),

	("12.50f", fs 50 t12, false, rt12f_50),
	("12.50t", fs 50 t12, true, rt12t_50),

	("12.30f", fs 30 t12, false, rt12f_30),
	("12.30t", fs 30 t12, true, rt12t_30)
]

end;
=TEX

\subsection{Too much nesting}

Causes the indentation margin to be forcibly adjusted.

=SML
let

fun t13 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) () = (
	beginb(10, false);
		addstring "130";
		beginb(10, false);
			beginb(10, false);
				addstring "131";
				space(5,0);
				addstring "132aaaa";
				space(5,0);
				addstring "133bbbbbb";
			endb();
			addstring "134";
			space(5,0);
			addstring "135aaaa";
			space(5,0);
			addstring "136bbbbbb";
		endb();
		beginb(10, false);
			addstring "137";
			space(5,0);
			addstring "138aaaa";
			space(5,0);
			addstring "139bbbbbb";
		endb();
		space(5,0);
		addstring "1310aaaa";
		space(5,0);
		addstring "1311bbbbbb";
	endb()
);

val rt13_200 = ["130131     132aaaa     133bbbbbb134     135aaaa     136bbb\
	\bbb137     138aaaa     139bbbbbb     1310aaaa     1311bbbbbb"];

val rt13_30 = [
	"130131     132aaaa",
	"133bbbbbb134     135aaaa",
	"                    136bbbbbb137",
	"                    138aaaa",
	"                    139bbbbbb",
	"          1310aaaa",
	"          1311bbbbbb"];
val rt13_20 = [
	"130131     132aaaa",
	"          133bbbbbb134",
	"135aaaa",
	"136bbbbbb137",
	"138aaaa",
	"139bbbbbb",
	"          1310aaaa",
	"          1311bbbbbb"];

in

sayl rt13_200;
sayl rt13_30;
sayl rt13_20;


store_mt_results_show mt_run[
	("13.200", fs 200 t13, (), rt13_200),
	("13.30", fs 30 t13, (), rt13_30),
	("13.20", fs 20 t13, (), rt13_20)
]

end;
=TEX

\subsection{Tests of Forced Line Breaks}

Large numbers of spaces, to force a line break.  Note that these tests
would fail if a strings with large numbers of spaces were included
anywhere in the output.

=SML
let

fun t14 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) flag = (
	beginb(1, flag);
	addstring "1401";
	space(1,0);
	addstring "1402";
	space(10000,0);
	addstring "1403";
	space(1,0);
	addstring "1404";
	endb()
);

val rt14t_200 = ["1401", " 1402", " 1403", " 1404"];
val rt14f_200 = ["1401 1402", " 1403 1404"];

in

sayl rt14t_200;
sayl rt14f_200;

store_mt_results_show mt_run[
	("14.200t", fs 200 t14, true, rt14t_200),
	("14.200f", fs 200 t14, false, rt14f_200)
]

end;
=TEX

=SML
let

fun t15 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) flag = (
	beginb(1, flag);
	addstring "1501";
	space(10000,0);
	addstring "1502";
	space(10000,0);
	addstring "1503";
	space(10000,0);
	addstring "1504";
	space(10000,0);
	addstring "1505";
	space(10000,0);
	addstring "1506";
	endb()
);

val rt15t_200 = ["1501", " 1502", " 1503", " 1504", " 1505", " 1506"];
val rt15f_200 = ["1501", " 1502", " 1503", " 1504", " 1505", " 1506"];

in

sayl rt15t_200;
sayl rt15f_200;

store_mt_results_show mt_run[
	("15.200t", fs 200 t15, true, rt15t_200),
	("15.200f", fs 200 t15, false, rt15f_200)
]

end;
=TEX

\subsection{Fault Cases}

=SML
let
fun t16 (o_funs as (addstring, beginb, space, endb):OppenFormatting.OPPEN_FUNS) () = (
	addstring "16"
);

fun fp n = OppenFormatting.oppen_print (fn () => n) t16;
fun fs n = OppenFormatting.oppen_format (fn () => n) t16;

val rt16 = ["16"];

in

sayl rt16;

store_mt_results_show mt_run_fail[
	("16p.5", fp 5, (), gen_fail_msg "oppen_printer" 24001 ["5", "20"]),
	("16p.19", fp 19, (), gen_fail_msg "oppen_printer" 24001 ["19", "20"])
];

store_mt_results_show mt_run_fail[
	("16s.5", fs 5, (), gen_fail_msg "oppen_printer" 24001 ["5", "20"]),
	("16s.19", fs 19, (), gen_fail_msg "oppen_printer" 24001 ["19", "20"])
];

store_mt_results_show mt_run[
	("16p.20", (fn () => true) o (fp 20), (), true)
];

store_mt_results_show mt_run[
	("16s.20", fs 20, (), rt16)
]

end;
=TEX

\section{SUMMARY OF RESULTS}

=SML
diag_string(summarize_mt_results());
=TEX

\end{document}
