=IGN
********************************************************************************
wrk043.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
% 199.doc   %Z% $Revision: 2.10 $ $RCSfile: wrk043.doc,v $ $Date: 2010/01/31 15:31:20 $
% COPYRIGHT (c) Lemma 1 Ltd.
=IGN
%
% The material in this document is dependent on the theorems proved in
% wrk044.doc, It may therefore be loaded into the ProofPower-HOL system
% using the following UNIX commands:
docsml wrk044			# strip the proof script out of wrk044.doc
docsml wrk043			# strip the proof script out of wrk043.doc
hol				# run ProofPower-HOL
use_file"wrk044";		(* load file wrk044.sml into ProofPower-HOL *)
use_file"wrk043";		(* load file wrk043.sml into ProofPower-HOL *)
%
% Useful ProofPower-HOL commands:
%	
open_theory"ramsey";		(* open the theory built by this file *)
print_theory"ramsey";		(* list the theory on the screen *)
output_theory{theory="ramsey", out_file="wrk043.thl.doc"};
				(* list the theory into a file in .doc format *)
%
% Useful UNIX commands:
doctex wrk043		# convert the document into LaTeX format (in wrk043.tex)
doctex wrk043.thl	# convert the theory listing into LaTeX \input format
texdvi wrk043		# run LaTeX on the document (giving wrk043.dvi)
docsml wrk043		# strip the proof script out into wrk043.sml
=TEX
%
\documentclass[a4paper,11pt]{article}
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{latexsym}
\makeindex

\def\Title{ Ramsey's Theorem in ProofPower \\ (Draft) }
\def\Author{\begin{tabular}[t]{@{}l@{}} Roger Bishop Jones \\ Rob Arthan \end{tabular}}
\def\EMail{\begin{tabular}[t]{@{}l@{}} {\tt rbjones@rbjones.com} \\ {\tt rda@lemma-one.com} \end{tabular}}

\def\Reference{ PPDOC/WRK043 }
\def\RCSversion{ $Revision: 2.10 $ }
\def\Version{\VCVersion}
\def\Date{\FormatDate{\VCDate}}
\def\Abstract{\centering{\bf Abstract}\par
This paper is concerned with a ProofPower-HOL proof of the finite exponent 2 version
of Ramsey's Theorem.
A listing of the HOL theory in which the theorem has been proved is
given together with a brief discussion of the proof in comparison
with the proofs using NQTHM and Nuprl discussed in a CLI technical
report by David Basin and Matt Kaufmann, \cite{Basin90}.}


\begin{document}
\FrontPage
\tableofcontents
\newpage
\section{INTRODUCTION}
The CLI technical report, \cite{Basin90}, uses the finite exponent 2 version
of Ramsey's Theorem as a bench-mark to compare the NQTHM (Boyer-Moore)
and Nuprl theorem provers. In order to compare ICL's ProofPower-HOL
theorem prover with NQTHM and Nuprl, this theorem has been
formulated and proved using ProofPower-HOL. As \cite{Basin90} shows of
NQTHM and Nuprl, the comparison indicates
that ProofPower-HOL has its own particular advantages and disadvantages
arising from the philosophies behind its design.

\section{THE HOL LOGIC}

Like NQTHM and Nuprl, if not more so, the ProofPower-HOL prover uses a well-defined and well-understood logic, namely a polymorphic variant of
Church's simple type theory originally due to M.J.C. Gordon.

The logic is classical and may be viewed as polymorphically typed formulation
of a set theory with the axiom of choice (but not the axiom
of replacement). The language is at heart just the simply-typed Ã-calculus
with a polymorphic type system similar in spirit to that of Standard ML.
On top of this core language, derived syntactic constructions, such
as $let$-expressions and set comprehensions, are defined giving a surface
syntax which is very like that of conventional formal mathematics.

The logic provides conservative extension mechanisms for introducing
new types and constants. These mechanisms take as parameters theorems
which justify the conservativeness of the extension.
For example, on the basis of a theorem of the form
=INLINEFT
Ù ∂x∑p[x/x]
=TEX
\ we may conservatively introduce a new constant $c$
satisfying the defining axiom
=INLINEFT
Ù p[c/x]
=TEX
. The HOL theorem prover carefully distinguishes the conservative
defining axioms from other axioms in the database of theories which
it manages.
The axiomatic basis for the theory described in the present document
comprises only the agreed axioms for HOL as defined in \cite{DS/FMU/IED/SPC003}
(which is based on the formulation of HOL used in the Cambridge HOL
system described in \cite{SRI89a}).

The logic supports the polymorphism in that it allows polymorphic theorems
to be instantiated to particular types as required. For example, the
polymorphic theorem:

=GFT
	Ù µ x:'a∑ Size {x} = 1
=TEX
giving the size of a singleton set
may be used as a rewrite rule to prove any of the following theorems:

=GFT
	Ù Size {1} = 1
	Ù Size {(1,2)} = 1
	Ù Size {Cons 1 []} = 1
=TEX

in which the type variable $'a$ has been instantiated to natural
numbers, pairs of natural numbers and lists of natural numbers respectively.

\section{THE THEOREM PROVER}
The ProofPower-HOL theorem prover actually provides support both for developing
specifications in HOL as well as carrying out proofs.
The definitions in terms of which we formulate Ramsey's theorem
constitute such a specification and are given in section \ref{Specification}
below.

The system is normally used to develop specifications or proofs interactively,
an off-the-shelf windowing system and editor supplying the user-interface.
The command language (or metalanguage) with which the user controls
the system is an extension of the strongly-typed functional
programming language, Standard ML. Like Nuprl, the system is constructed following
the LCF paradigm, \cite{Gordon79}, which affords a good degree of
assurance in the integrity of the implementation of the logic.
The ML type discipline is used to guarantee that all inference
is ultimately channelled through one of a small number of primitive
inference rules implemented as ML functions computing values of
an abstract datatype, $THM$, of theorems.

The extensions to ML essentially comprise a macro-processing front-end which
allow convenient entry of object language constructs such as specification
paragraphs or terms needed as parameters to proof rules.

While the primitive inference system is defined solely using forward
inference rules, it is possible to construct powerful proof procedures
which work either forwards or backwards. Most proof development work
is carried out using the so-called subgoal package which provides
an interactive environment for developing proofs in a goal-oriented
(i.e. backwards) style. At the detailed level, both forwards and backwards
steps may be taken within the subgoal package.
=TEX

\section{THE SPECIFICATION}\label{Specification}
In order to state the Ramsey theorem, the graph-theoretic notions
involved in its statement
are required. ProofPower-HOL comes supplied with a library of theories\footnote{%
In ProofPower a ``theory'', is analogous to a module in programming language terms.
A theory comprises sets of axioms, definitions, and theorems, together
with additional information, e.g., the fixity of operators.
As with the theory developed in this document, the set of axioms is typically
empty, indicating that the theory is a conservative extension of its ancestors.
The ProofPower system manages a database of theories organised
as a directed acyclic graph.
}%
including a theory of relations viewed as sets of pairs.
There is also a theory of finiteness, which has the theory of relations as
an ancestor.The theory in which we work is therefore set up as a
child of the theory of finiteness using the following metalanguage
commands:
=SML
open_theory"fin_thms";
new_theory€"ramsey"›;
=TEX

First we define the notion of a symmetric graph. The following specification
paragraph introduces a new constant $symg$ which is the (polymorphic) set
of all pairs $(V, E)$ in which $V$ is a set and $E$ is a binary
relation in $V$.
Note that the set type constructor  is written as a post-fix operator and
that the polymorphic type
=INLINEFT
'a 
=TEX
\ comprises the set of all subsets of $'a$ finite or infinite.
™ is defined in the theory of relations as an infix operator which
assigns to two sets, $A$ and $B$ say, the set $A ™ B$ of binary relations
between $A$ and $B$.
πHOLCONST
‹ €symg› : ('a  ∏ ('a ™ 'a))
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	µ (V,E)∑ (V,E) ç symg
‹
‹	§ E ç (V™V) ± µ x y∑ (x,y) ç E § (y,x) ç E
‹
∞
Now we define an infix operator
=INLINEFT
clique_of
=TEX
\ such that
=INLINEFT
C clique_of (V, E)
=TEX
\ is true iff. $C$ is a clique in the graph $(V, E)$.
The term
=INLINEFT
(C ∏ C)\(Id C)
=TEX
\ is the set-theoretic difference of the
complete relation
=INLINEFT
(C ∏ C)
=TEX
\ on $C$
and the identity relation
=INLINEFT
Id C
=TEX
\ on $C$. Thus the second conjunct asserts that any pair of distinct elements
of $C$ are related by $E$.
=SML
declare_infix(300, "clique_of");
πHOLCONST
‹ $€clique_of›  :  'a  ≠ ('a  ∏ ('a ™ 'a)) ≠ BOOL
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	µ C (V,E)∑ C clique_of (V,E)
‹
‹	§ C Ä V ± (C ∏ C)\(Id C) Ä E
∞
In a similar way we define an infix operator
=INLINEFT
indep_of
=TEX
\ such that
=INLINEFT
C indep_of (V, E)
=TEX
\ is true iff. $C$ is an independent subset in the graph $(V, E)$:

=SML
declare_infix(300, "indep_of");
πHOLCONST
‹ $€indep_of›  :  'a  ≠ ('a  ∏ ('a ™ 'a)) ≠ BOOL
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	µ C (V,E)∑ C indep_of (V,E)
‹
‹	§ C Ä V ± (C ∏ C) ° E Ä Id C
∞
That completes the specification. A listing of the theory introduced
by this specification (together with the theorems which have been proved
about it) may be found in Appendix A. The listing is incorporated using
a simple interface between the ProofPower tool and the \LaTeX\ document
preparation system.
=TEX
\section{PROOF STRATEGY}\label{Conjecture}
Ramsey's theorem, in the finite exponent 2 case we are interested in,
is the following conjecture:
=GFT
	µ a b ∑ ∂n ∑
	µ (V,E) ∑
	(V,E) ç symg ± V ç Finite ± #V æ n ¥
		(∂ C ∑ C clique_of (V,E) ± #C = a
		≤ C indep_of (V,E) ± #C = b)
=TEX
That is to say, for any natural numbers, $a$ and $b$ there is an $n$ such
that any finite symmetric graph with at least $n$ vertices contains
either a clique with $a$ vertices or an independent set with
$b$ vertices.

An informal proof of this conjecture is given in \cite{Basin90}, and
the proof strategy we take is essentially to follow that proof, with
the slight difference that it turns out to be valid and easier to
start the induction at $0$ rather than at $2$. The proof consists of
13 lemmas of which one is a simple generality about finite sets
which was not available in the desired form in the theory of
finite sets (which was under development during the production of the present
proof). 7 of the other lemmas are trivialities about cliques
and independent subsets etc. which are needed in several places in the proof.
The other 5 lemmas are essentially dedicated to reducing the
complexity of the proof of the conjecture by breaking it into manageable
pieces. The theory listing in appendix A shows the 13 lemmas and
the Ramsey theorem itself.


In more detail, what was done was to analyse the inductive step in \cite{Basin90}
to get an understanding of the constructions it makes.
The main content of the inductive step is captured in lemma 12.
This is itself broken down into an argument about the size of a set
given as the union of three subsets one of which is a singleton (lemma 11) and
into the construction of two subgraphs one or other of which either
contains or can be extended by one element to contain the desired clique
or independent set (lemmas 9 and 10 justify the construction).
Lemma 13 gives the base case of the induction.

=TEX
\section{THE PROOF}\label{Proof}
Space does not permit the inclusion of the full proof here.
We just show the preamble and the proof of the first lemma.

We prepare for the proof by assigning ML names to the specifications and setting the proof context\footnote{%
A {\em proof context} in ProofPower is a named collection of settings for global parameters
which affect the operation of many of the more commonly used proof procedures.
It allows domain-specific information to be made available to these proof
procedures in a way which is uniform for the implementer and convenient for
the user.%
}:
=SML
val symg_def = get_spec¨symgÆ;
val clique_of_def = get_spec¨$clique_ofÆ;
val indep_of_def = get_spec¨$indep_ofÆ;
set_pc"hol";
=TEX
We invoke the subgoal package to begin the proof of the first lemma as follows.
=SML
set_goal([], ¨
	µ(V, E); U∑
	(V, E) ç symg ± U Ä V ¥ (U, (U ∏ U) ° E) ç symg
Æ);
=TEX
We first rewrite with
definitions to reduce an assertion about symmetric graphs into a set-theoretic
assertion:
=SML
a(rewrite_tac[symg_def, ∏_def, ™_def]);
=TEX
This gives the following output:
=GFT ProofPower Output
Tactic produced 1 subgoal:

(* *** Goal "" *** *)

(* ?Ù *)  ¨µ (V, E) U
           ∑ (E ç  {(v, w)|v ç V ± w ç V} ± (µ x y∑ (x, y) ç E § (y, x) ç E))
                 ± U Ä V
               ¥ {(v, w)|v ç U ± w ç U} ° E ç  {(v, w)|v ç U ± w ç U}
                 ± (µ x y
                 ∑ (x, y) ç {(v, w)|v ç U ± w ç U} ° E
                     § (y, x) ç {(v, w)|v ç U ± w ç U} ° E)Æ
=TEX
We now attack this with a standard tactic for breaking down a goal
using a proof context $hol1$ which is good for proving set-theoretic
results by element level reasoning.
=SML
a(REPEAT(PC_T "hol1" strip_tac));
=TEX
This gives the following output\footnote{%
In fact the output in this case contains a little more than what is shown.
There are actually two subgoals which turn out to be the same modulo renaming
of variables. The subgoal package informs us of this, but only requires
us to prove one of the subgoals. This phenomenon is not very common
but it is a useful labour-saver when it occurs.
} which indicates that we have 6 assumptions
on the basis of which we must prove
=INLINEFT
(y, x) ç E
=TEX
.
=GFT ProofPower Output
(* *** Goal "1" *** *)

(*  6 *)  ¨µ x∑ x ç E ¥ x ç {(v, w)|v ç V ± w ç V}Æ
(*  5 *)  ¨µ x y∑ (x, y) ç E § (y, x) ç EÆ
(*  4 *)  ¨µ x∑ x ç U ¥ x ç VÆ
(*  3 *)  ¨x ç UÆ
(*  2 *)  ¨y ç UÆ
(*  1 *)  ¨(x, y) ç EÆ

(* ?Ù *)  ¨(y, x) ç EÆ
=TEX
We now use a tactic which works by forward chaining using
the assumptions to complete the proof:
=SML
a(asm_fc_tac[]);
=TEX
Resulting in the following output:
=GFT ProofPower Output
Tactic produced 0 subgoals:
Current and main goal achieved
=TEX
We save the theorem in the theory for future reference as follows:
=SML
val lemma1 = save_pop_thm"lemma1";
=TEX
This results in the following output from the metalanguage compiler indicating
that we have succeeded in computing a theorem and assigning it to
the metalanguage variable $lemma1$.
=GFT ProofPower Output
val lemma1 = Ù µ(V, E) U∑ (V, E) ç symg ± U Ä V ¥ (U, (U ∏ U) ° E) ç symg : THM
=TEX
In fact the above proof has been broken down into smaller steps than
an experienced user of the system would typically use. In particular the
first two steps would commonly be entered on one line using a tactic
combinator to compose the tactics to avoid seeing the
unstripped form of the rewritten goal.
\section{STATISTICS}
The total specification and proof effort was about 10 hours.
The first author prepared and debugged the specification (by attempting
various parts of the proof) in about
an hour and the second author proved the result in about 9 hours,
of which at least one was spent proving conjectures which turned out
to be irrelevant to the main proof.

The proof script contains 225 tactic applications and  about 2,600 tokens.
The replay time for the script is 8.0 minutes\footnote{%
The timing was taken using a Sun SPARCStation 1+ with 12 megabytes of
memory.
} and the script causes 47,489
primitive inference steps to be invoked.

We give the above token count for comparison with \cite{Basin90}. It is however
felt that the simple time taken to type the script in is not a big inhibitor.
Also several parts of the script were rapidly generated by cut-and-paste
methods, since the symmetries in the problem mean that many proofs are
rather similar (e.g. the proof of lemma 10 took about 5 minutes to
find once the proof of lemma 9 was available).

=IGN
set_flag("profiling", true);
init_stats();
use_file"ramsey";
fold op + (map snd (get_stats())) 0;
Answer was: 47489
=IGN
(* Put this in a file called l say *)
fun quse file = (
	let	val osgp = set_flag("subgoal_package_quiet", true);
	in	use_file file;
		set_flag("subgoal_package_quiet", osgp)
	end
);
quse"ramsey";
(* then use: time hol -d play < l >ramsey.run.log *)
(* Answer was: 459.7u+57.2s		 = 8.6 minutes *)
(* With new version of pp'frees, get: *)
(* Answer was: 427.9u 51.7s		 = 8.0 minutes *)

=TEX

=TEX
\onecolumn
\appendix
\input{wrk043.thl.tex}
\newpage
\section{INDEX}
\printindex
\section{REFERENCES}
\bibliographystyle{fmu}
\bibliography{fmu}
\end{document}
=SML
set_goal([],¨
	µ (V:'a ,E) U C∑
	U Ä V ± C clique_of (U, (U ∏ U) ° E)
¥	C clique_of (V, E)
Æ);
a(rewrite_tac[clique_of_def, ∏_def, ™_def, id_def]
	THEN PC_T "hol1" (REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
a(spec_nth_asm_tac 4 ¨xÆ);
val lemma2 = save_pop_thm"lemma2";
=TEX
=SML
set_goal([],¨
	µ (V:'a ,E) U C∑
	U Ä V ± C indep_of (U, (U ∏ U) ° E)
¥	C indep_of (V, E)
Æ);
a(rewrite_tac[indep_of_def, ∏_def, ™_def, id_def]
	THEN PC_T "hol1" (REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
a(asm_fc_tac[] THEN asm_fc_tac[]);
val lemma3 = save_pop_thm"lemma3";

=TEX
=SML
push_goal([],¨
	µ (V:'a ,E) U C∑
	C Ä U ± C indep_of (V, E)
¥	C indep_of (U, E)
Æ);
a(rewrite_tac[indep_of_def, ∏_def, ™_def, id_def]
	THEN PC_T "hol1" (REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
a(spec_nth_asm_tac 4 ¨xÆ);
val lemma4 = save_pop_thm"lemma4";
=TEX
=SML
push_goal([],¨
	µ (V:'a ,E) U C∑
	U Ä V ± C clique_of (U, E)
¥	C clique_of (V, E)
Æ);
a(rewrite_tac[clique_of_def, ∏_def, ™_def, id_def]
	THEN PC_T "hol1" (REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
a(spec_nth_asm_tac 4 ¨xÆ);
val lemma5 = save_pop_thm"lemma5";
=TEX
=SML
push_goal([],¨
	µ (V:'a ,E) U C∑
	U Ä V ± C indep_of (U, E)
¥	C indep_of (V, E)
Æ);
a(rewrite_tac[indep_of_def, ∏_def, ™_def, id_def]
	THEN PC_T "hol1" (REPEAT strip_tac));
a(asm_fc_tac[] THEN asm_fc_tac[]);
a(spec_nth_asm_tac 4 ¨xÆ);
val lemma6 = save_pop_thm"lemma6";
=TEX
=SML
set_goal([], ¨({}, {}) ç symgÆ);
a(rewrite_tac[symg_def, ∏_def, ™_def] THEN REPEAT(PC_T "hol1" strip_tac)
 THEN asm_fc_tac[]);
val lemma7 = save_pop_thm"lemma7";
=TEX
=SML
set_goal([], ¨µa∑a ç Finite ¥ (#a = 0 § a = {})Æ);
a(REPEAT strip_tac);
(* *** Goal "1" *** *)
a(REPEAT(POP_ASM_T ante_tac));
a(fin_set_induction_tac THEN1 rewrite_tac[]);
(* *** Goal "1.1" *** *)
a (strip_asm_tac (list_µ_elim [¨aÆ,¨xÆ] size_thm5));
a (asm_rewrite_tac[]);
(* *** Goal "1.2" *** *)
a (strip_asm_tac (list_µ_elim [¨aÆ,¨xÆ] size_thm5));
a (asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a (asm_rewrite_tac[size_thm1]);
val lemma8 = save_pop_thm"lemma8";
=TEX
The following pair of lemmas justify the constructions used in the inductive step:
=SML
set_goal([],¨
	µ (V:'a ,E); v; S; i j∑
	let R = {x | x ç V \ {v} ± (v, x) ç E}
	in
		(V, E) ç symg
	±	V ç Finite
	±	v ç V
	±	S Ä R
	±	(S clique_of (V, (R ∏ R) ° E) ± #S = i
		≤ S indep_of (V, (R ∏ R) ° E) ± #S = j)
	¥	∂S'∑
		S' clique_of (V, E) ± #S' = i+1
		≤ S' indep_of (V, E) ± #S' = j
Æ);
a(rewrite_tac[let_def] THEN REPEAT strip_tac);
(* Two subgoals. The one in which S is a clique comes first: *)
(* *** Goal "1" *** *)
a(∂_tac ¨{v} ¿ SÆ THEN ≤_left_tac THEN strip_tac);
(* Two subgoals. First that S' is a clique *)
(* *** Goal "1.1" *** *)
a(DROP_NTH_ASM_T 2 ante_tac
	THEN rewrite_tac[clique_of_def, ∏_def, ™_def]
	THEN PC_T"hol1" (REPEAT strip_tac));
(* 6 subgoals *)
(* *** Goal "1.1.1" *** *)
a(asm_rewrite_tac[]);
(* *** Goal "1.1.2" *** *)
a(asm_prove_tac[]);
(* *** Goal "1.1.3" *** *)
a(POP_ASM_T (PC_T1 "hol1" (strip_asm_tac o rewrite_rule[id_def])));
a(POP_ASM_T ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "1.1.4" *** *)
a(DROP_NTH_ASM_T 7 ante_tac THEN PC_T"hol1" (REPEAT strip_tac));
a(asm_fc_tac[]);
a(swap_asm_concl_tac ¨(v, Snd x) ç EÆ THEN
	GET_ASM_T¨Fst x = vÆ(rewrite_thm_tac o eq_sym_rule) THEN strip_tac);
(* *** Goal "1.1.5" *** *)
a(DROP_NTH_ASM_T 10 ante_tac THEN rewrite_tac[symg_def] THEN REPEAT strip_tac);
a(POP_ASM_T (fn th => LEMMA_T ¨(Snd x, Fst x) ç EÆ asm_tac THEN fc_tac[th]));
(* *** Goal "1.1.5.1" *** *)
a(GET_ASM_T¨Snd x = vÆ rewrite_thm_tac);
a(DROP_NTH_ASM_T 8 ante_tac THEN PC_T"hol1" (REPEAT strip_tac));
a(spec_nth_asm_tac 1 ¨Fst xÆ);
(* *** Goal "1.1.5.2" *** *)
a(TOP_ASM_T ante_tac THEN rewrite_tac[]);
(* *** Goal "1.1.6" *** *)
a(lemma_tac¨x ç {(v, w)|v ç S ± w ç S} \ Id SÆ);
(* *** Goal "1.1.6.1" *** *)
a(POP_ASM_T ante_tac THEN rewrite_tac[id_def] THEN REPEAT strip_tac);
(* *** Goal "1.1.6.2" *** *)
a(spec_nth_asm_tac 5 ¨xÆ);
(* That completes the proof that S' is a clique. Now want #S' = i + 1 *)
(* *** Goal "1.2" *** *)
a(lemma_tac ¨S Ä VÆ);
(* *** Goal "1.2.1" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN PC_T"hol1" (REPEAT strip_tac));
a(PC_T "hol1"(spec_nth_asm_tac 2 ¨xÆ));
(* *** Goal "1.2.2" *** *)
a(fc_tac[size_thm4]);
a(asm_fc_tac[]);
a(fc_tac[size_thm5]);
a(POP_ASM_T (strip_asm_tac o µ_elim¨vÆ));
a(asm_rewrite_tac[]);
a(LEMMA_T¨≥v ç SÆ rewrite_thm_tac);
a(DROP_NTH_ASM_T 8 ante_tac THEN PC_T"hol1" (REPEAT strip_tac));
a(POP_ASM_T (strip_asm_tac o µ_elim¨vÆ));
(* That does the case where S was a clique. Now do the case when S is independent *)
(* *** Goal "2" *** *)
a(∂_tac ¨SÆ THEN ≤_right_tac THEN strip_tac);
(* Two subgoals. First that S is independent: *)
(* *** Goal "2.1" *** *)
a(bc_tac[lemma3]);
a(∂_tac ¨{x|x ç V \ {v} ± (v, x) ç E}Æ);
a strip_tac;
(* *** Goal "2.1.1" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN PC_T"hol1" (REPEAT strip_tac));
(* *** Goal "2.1.2" *** *)
a(bc_tac[lemma4] THEN ∂_tac ¨VÆ THEN REPEAT strip_tac);
(* That does that S is independent. Now Size s = j *)
(* *** Goal "2.2" *** *)
a(strip_tac);
val lemma9 = save_pop_thm"lemma9";

=TEX
The second of the pair of lemmas to justify the constructions
used in the inductive step is the part which is described
as ``analogous'' in the informal proof in \cite{Basin90}
=SML
set_goal([],¨
	µ (V:'a ,E); v; S; i j∑
	let R = {x | x ç V \ {v} ± ≥(v, x) ç E}
	in
		(V, E) ç symg
	±	V ç Finite
	±	v ç V
	±	S Ä R
	±	(S clique_of (V, (R ∏ R) ° E) ± #S = i
		≤ S indep_of (V, (R ∏ R) ° E) ± #S = j)
	¥	∂S'∑
		S' clique_of (V, E) ± #S' = i
		≤ S' indep_of (V, E) ± #S' = j+1
Æ);
a(rewrite_tac[let_def] THEN REPEAT strip_tac);
(* Two subgoals. The one in which S is a clique comes first: *)
(* *** Goal "1" *** *)
a(∂_tac ¨SÆ THEN ≤_left_tac THEN strip_tac);
(* Two subgoals. First that S' is a clique *)
(* *** Goal "1.1" *** *)
a(DROP_NTH_ASM_T 2 ante_tac
	THEN rewrite_tac[clique_of_def, ∏_def, ™_def]
	THEN PC_T"hol1" (REPEAT strip_tac));
(* *** Goal "1.1.1" *** *)
a(DROP_NTH_ASM_T 5 ante_tac THEN (PC_T "hol1" (REPEAT strip_tac)));
a(asm_fc_tac[]);
(* *** Goal "1.1.2" *** *)
a(spec_nth_asm_tac 4 ¨xÆ);
(* *** Goal "1.2" *** *)
a(strip_tac);
(* That does the case where S was a clique. Now do the case when S is independent *)
(* *** Goal "2" *** *)
a(∂_tac ¨{v} ¿ SÆ THEN ≤_right_tac THEN strip_tac);
(* Two subgoals. First that S' is independent: *)
(* *** Goal "2.1" *** *)
a(DROP_NTH_ASM_T 2 ante_tac
	THEN rewrite_tac[indep_of_def, ∏_def, ™_def]
	THEN PC_T"hol1" (REPEAT strip_tac));
(* 3 subgoals. *)
(* *** Goal "2.1.1" *** *)
a(asm_rewrite_tac[]);
(* *** Goal "2.1.2" *** *)
a(DROP_NTH_ASM_T 5 ante_tac THEN (PC_T "hol1" (REPEAT strip_tac)));
a(spec_nth_asm_tac 4 ¨xÆ);
(* *** Goal "2.1.3" *** *)
a(rewrite_tac[id_def] THEN REPEAT strip_tac);
a(asm_rewrite_tac[]);
(* *** Goal "2.1.4" *** *)
a(DROP_NTH_ASM_T 7 ante_tac THEN (PC_T "hol1" (REPEAT strip_tac)));
a(spec_nth_asm_tac 1 ¨Snd xÆ);
a(swap_asm_concl_tac ¨≥ (v, Snd x) ç EÆ);
a(GET_NTH_ASM_T 7 (rewrite_thm_tac o eq_sym_rule) THEN strip_tac);
(* *** Goal "2.1.5" *** *)
a(GET_NTH_ASM_T 10(strip_asm_tac o rewrite_rule[symg_def]));
a(POP_ASM_T (fn th => strip_asm_tac(rewrite_rule[pair_clauses](list_µ_elim[¨Fst xÆ, ¨Snd xÆ]th))));
a(swap_asm_concl_tac ¨(Snd x, Fst x) ç EÆ THEN asm_rewrite_tac[]);
a(DROP_NTH_ASM_T 9 ante_tac THEN (PC_T "hol1" (REPEAT strip_tac)));
a(spec_nth_asm_tac 1 ¨Fst xÆ);
(* *** Goal "2.1.6" *** *)
a(DROP_NTH_ASM_T 4 ante_tac THEN
	rewrite_tac[id_def] THEN PC_T"hol1" (REPEAT strip_tac));
a(DROP_NTH_ASM_T 7 ante_tac THEN (PC_T "hol1" (REPEAT strip_tac)));
a(asm_fc_tac[]);
(* That shows that S' is independent. Now need #S' = j + 1 *)
(* *** Goal "2.2" *** *)
a(lemma_tac ¨S Ä VÆ);
(* *** Goal "2.2.1" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN PC_T"hol1" (REPEAT strip_tac));
a(PC_T "hol1"(spec_nth_asm_tac 2 ¨xÆ));
(* *** Goal "2.2.2" *** *)
a(fc_tac[size_thm4]);
a(asm_fc_tac[]);
a(fc_tac[size_thm5]);
a(POP_ASM_T (strip_asm_tac o µ_elim¨vÆ));
a(asm_rewrite_tac[]);
a(LEMMA_T¨≥v ç SÆ rewrite_thm_tac);
a(DROP_NTH_ASM_T 8 ante_tac THEN PC_T"hol1" (REPEAT strip_tac));
a(POP_ASM_T (strip_asm_tac o µ_elim¨vÆ));
val lemma10 = save_pop_thm"lemma10";
=TEX
=SML
set_goal([], ¨µa b c; x; m n∑
	a ç Finite
±	#a æ m + n
±	a = {x} ¿ b ¿ c
¥	#b æ m ≤ #c æ n
Æ);
a(rewrite_tac[pc_rule"hol1"(prove_rule[])¨{x} ¿ b ¿ c = ({x} ¿ b) ¿ cÆ]);
a(REPEAT strip_tac);
a(lemma_tac¨b Ä a ± ({x} ¿ b) Ä a ± c Ä aÆ);
(* *** Goal "1" *** *)
a(GET_ASM_T¨a = ({x} ¿ b) ¿ cÆ ante_tac THEN (PC_T"hol1" (REPEAT strip_tac THEN asm_prove_tac[])));
(* *** Goal "2" *** *)
a(lemma_tac¨#a + #(({x} ¿ b) ° c) = #({x} ¿ b) + #cÆ);
(* *** Goal "2.1" *** *)
a(fc_tac[size_thm4] THEN asm_fc_tac[]);
a(DROP_ASM_T ¨a = ({x} ¿ b) ¿ cÆ rewrite_thm_tac);
a(bc_tac[size_thm7] THEN REPEAT strip_tac);
(* *** Goal "2.2" *** *)
a(swap_asm_concl_tac¨#a + #(({x} ¿ b) ° c) = #({x} ¿ b) + #cÆ);
a(DROP_ASM_T ¨m + n º #aÆ (strip_asm_tac o rewrite_rule[º_def]));
a(DROP_ASM_T ¨(m + n) + i = #aÆ (rewrite_thm_tac o eq_sym_rule));
a(LIST_GET_NTH_ASM_T[1,5] (MAP_EVERY (strip_asm_tac o rewrite_rule[≥_º_thm])));
a(lemma_tac¨#({x} ¿ b) º mÆ);
(* *** Goal "2.2.1" *** *)
a(fc_tac[size_thm4] THEN asm_fc_tac[] THEN asm_fc_tac[size_thm5]);
a(DROP_NTH_ASM_T 3 (rewrite_thm_tac o µ_elim¨xÆ));
a(DROP_NTH_ASM_T 8 ante_tac);
a(rewrite_tac[less_def, º_def] THEN REPEAT strip_tac);
a(CASES_T¨x ç bÆ (fn th => rewrite_tac[th] THEN asm_tac th));
(* *** Goal "2.2.1.1" *** *)
a(∂_tac ¨1+iÆ THEN DROP_NTH_ASM_T 2 (rewrite_thm_tac o rewrite_rule[plus_assoc_thm]));
(* *** Goal "2.2.1.2" *** *)
a(∂_tac ¨iÆ THEN DROP_NTH_ASM_T 2 rewrite_thm_tac);
(* *** Goal "2.2.2" *** *)
a(LIST_GET_NTH_ASM_T[1,2,3](MAP_EVERY (strip_asm_tac o rewrite_rule[less_def, º_def])));
a(LIST_GET_NTH_ASM_T[1,3] (rewrite_tac o map eq_sym_rule));
a(rewrite_tac[µ_elim¨#({x} ¿ b)Æplus_order_thm]);
a(rewrite_tac[µ_elim¨#cÆplus_order_thm]);
val lemma11 = save_pop_thm"lemma11";
=TEX
The inductive step may be derived from the following theorem:
=SML
set_goal([],¨
	µ a b m n∑
	0 < m
±	0 < n
±	(µ (V:'a ,E) ∑
	(V,E) ç symg ± V ç Finite ± #V æ m ¥
		(∂ C ∑ C clique_of (V,E) ± #C = a
		≤ C indep_of (V,E) ± #C = b+1))
±	(µ (V:'a ,E) ∑
	(V,E) ç symg ± V ç Finite ± #V æ n ¥
		(∂ C ∑ C clique_of (V,E) ± #C = a+1
		≤ C indep_of (V,E) ± #C = b))
¥	(µ (V:'a ,E) ∑
	(V,E) ç symg ± V ç Finite ± #V æ m + n ¥
		(∂ C ∑ C clique_of (V,E) ± #C = a+1
		≤ C indep_of (V,E) ± #C = b+1))
Æ);
a(REPEAT strip_tac);
(* First want to prove ≥ V = {} *)
a(FC_T1 id_canon
	(fn ths =>LEMMA_T ¨≥ #V = 0Æ (strip_asm_tac o rewrite_rule ths))[lemma8]);
(* *** Goal "1" *** *)
a(MAP_EVERY (fn t => DROP_ASM_T t
		(strip_asm_tac o rewrite_rule[less_def, º_def]))
	[¨m + n º # VÆ, ¨0 < nÆ]);
a(DROP_ASM_T ¨(m + n) + i = #VÆ (rewrite_thm_tac o eq_sym_rule));
a(DROP_ASM_T¨1 + i' = nÆ(rewrite_thm_tac o eq_sym_rule));
(* Completes proof of ≥ V = {} *)
(* *** Goal "2" *** *)
(* Now use ≥ V = {} to give an element of V *)
a(PC_T "hol1" (POP_ASM_T strip_asm_tac));
(* Gives us x ç V; Easier to read with v ç V: *)
a(rename_tac[(¨xÆ, "v")]);
a(lemma_tac
¨V = {v} ¿ {x | x ç V \ {v} ± (v, x) ç E} ¿ {x | x ç V \ {v} ± ≥(v, x) ç E}Æ);
(* *** Goal "2.1" *** *)
a(PC_T "hol1" (REPEAT strip_tac) THEN asm_rewrite_tac[]);
(* *** Goal "2.2" *** *)
a(lemma_tac
¨#{x | x ç V \ {v} ± (v, x) ç E} æ m ≤ #{x | x ç V \ {v} ± ≥(v, x) ç E} æ nÆ);
(* *** Goal "2.2.1" *** *)
a(bc_tac[lemma11]);
a(∂_tac ¨vÆ THEN ∂_tac¨VÆ THEN REPEAT strip_tac);
(* *** Goal "2.2.2" *** *)
a(lemma_tac¨{x|x ç V \ {v} ± (v, x) ç E} ç FiniteÆ);
(* *** Goal "2.2.2.1" *** *)
a(bc_tac[size_thm4] THEN ∂_tac¨VÆ THEN PC_T "hol1" (REPEAT strip_tac));
(* *** Goal "2.2.2.2" *** *)
a(lemma_tac¨
({x|x ç V \ {v} ± (v, x) ç E},
 ({x|x ç V \ {v} ± (v, x) ç E} ∏ {x|x ç V \ {v} ± (v, x) ç E}) ° E) ç symgÆ);
(* *** Goal "2.2.2.2.1" *** *)
a(bc_tac[lemma1] THEN ∂_tac ¨VÆ THEN PC_T "hol1" (REPEAT strip_tac));
(* *** Goal "2.2.2.2.2" *** *)
a(list_spec_nth_asm_tac 10 [
	¨{x|x ç V \ {v} ± (v, x) ç E}Æ,
	¨({x|x ç V \ {v} ± (v, x) ç E} ∏ {x|x ç V \ {v} ± (v, x) ç E}) ° EÆ]);
(* *** Goal "2.2.2.2.2.1" *** *)
a(bc_tac[rewrite_rule[let_def] lemma9]);
a(∂_tac¨CÆ THEN ∂_tac ¨vÆ THEN PC_T "hol1" (REPEAT strip_tac));
(* *** Goal "2.2.2.2.2.1.1" *** *)
a(GET_NTH_ASM_T 3 (PC_T1"hol1"(strip_asm_tac o rewrite_rule[clique_of_def])));
a(spec_nth_asm_tac 2 ¨xÆ);
(* *** Goal "2.2.2.2.2.1.2" *** *)
a(GET_NTH_ASM_T 3 (PC_T1"hol1"(strip_asm_tac o rewrite_rule[clique_of_def])));
a(spec_nth_asm_tac 2 ¨xÆ);
(* *** Goal "2.2.2.2.2.1.3" *** *)
a(GET_NTH_ASM_T 3 (PC_T1"hol1"(strip_asm_tac o rewrite_rule[clique_of_def])));
a(spec_nth_asm_tac 2 ¨xÆ);
(* *** Goal "2.2.2.2.2.1.4" *** *)
a(swap_nth_asm_concl_tac 1 THEN bc_tac [lemma5]);
a(∂_tac¨{x|x ç V \ {v} ± (v, x) ç E}Æ THEN REPEAT strip_tac);
a(PC_T"hol1" (REPEAT strip_tac));
(* *** Goal "2.2.2.2.2.1.5" *** *)
a(swap_nth_asm_concl_tac 1 THEN bc_tac [lemma5]);
a(∂_tac¨{x|x ç V \ {v} ± (v, x) ç E}Æ THEN REPEAT strip_tac);
a(PC_T"hol1" (REPEAT strip_tac));
(* *** Goal "2.2.2.2.2.2" *** *)
(* This is the easy second quarter of the main construction *)
a(∂_tac¨CÆ THEN ≤_right_tac THEN REPEAT strip_tac);
a(bc_tac[lemma3]);
a(∂_tac¨{x|x ç V \ {v} ± (v, x) ç E}Æ THEN REPEAT strip_tac);
a(PC_T"hol1" (REPEAT strip_tac));
(* Completes the second quarter *)
(* *** Goal "2.2.3" *** *)
a(lemma_tac¨{x|x ç V \ {v} ± ≥(v, x) ç E} ç FiniteÆ);
(* *** Goal "2.2.3.1" *** *)
a(bc_tac[size_thm4] THEN ∂_tac¨VÆ THEN PC_T "hol1" (REPEAT strip_tac));
(* *** Goal "2.2.3.2" *** *)
a(lemma_tac¨
({x|x ç V \ {v} ± ≥(v, x) ç E},
 ({x|x ç V \ {v} ± ≥(v, x) ç E} ∏ {x|x ç V \ {v} ± ≥(v, x) ç E}) ° E) ç symgÆ);
(* *** Goal "2.2.3.2.1" *** *)
a(bc_tac[lemma1] THEN ∂_tac¨VÆ THEN PC_T "hol1" (REPEAT strip_tac));
(* *** Goal "2.2.3.2.2" *** *)
a(list_spec_nth_asm_tac 9 [
	¨{x|x ç V \ {v} ± ≥(v, x) ç E}Æ,
	¨({x|x ç V \ {v} ± ≥(v, x) ç E} ∏ {x|x ç V \ {v} ± ≥(v, x) ç E}) ° EÆ]);
(* *** Goal "2.2.3.2.2.1" *** *)
(* Now the easy third quarter: *)
a(∂_tac¨CÆ THEN ≤_left_tac THEN REPEAT strip_tac);
a(bc_tac[lemma2]);
a(∂_tac¨{x|x ç V \ {v} ± ≥(v, x) ç E}Æ THEN REPEAT strip_tac);
a(PC_T"hol1" (REPEAT strip_tac));
(* Now the final hard quarter: *)
(* *** Goal "2.2.3.2.2.2" *** *)
a(bc_tac[rewrite_rule[let_def] lemma10]);
a(∂_tac¨CÆ THEN ∂_tac ¨vÆ THEN PC_T "hol1" (REPEAT strip_tac));
(* *** Goal "2.2.3.2.2.2.1" *** *)
a(GET_NTH_ASM_T 3 (PC_T1"hol1"(strip_asm_tac o rewrite_rule[indep_of_def])));
a(spec_nth_asm_tac 2 ¨xÆ);
(* *** Goal "2.2.3.2.2.2.2" *** *)
a(GET_NTH_ASM_T 3 (PC_T1"hol1"(strip_asm_tac o rewrite_rule[indep_of_def])));
a(spec_nth_asm_tac 2 ¨xÆ);
(* *** Goal "2.2.3.2.2.2.3" *** *)
a(GET_NTH_ASM_T 3 (PC_T1"hol1"(strip_asm_tac o rewrite_rule[indep_of_def])));
a(spec_nth_asm_tac 2 ¨xÆ);
(* *** Goal "2.2.3.2.2.2.4" *** *)
a(bc_tac [lemma6]);
a(∂_tac¨{x|x ç V \ {v} ± ≥(v, x) ç E}Æ THEN PC_T"hol1" (REPEAT strip_tac));
(* *** Goal "2.2.3.2.2.2.5" *** *)
a(bc_tac [lemma6]);
a(∂_tac¨{x|x ç V \ {v} ± ≥(v, x) ç E}Æ THEN PC_T"hol1" (REPEAT strip_tac));
val lemma12 = save_pop_thm"lemma12";
=TEX
The base case may be derived from the following theorems:
=SML
set_goal([],¨
	µ (V, E)∑
		{} clique_of (V, E)
	±	{} indep_of (V, E)
Æ);
a(rewrite_tac[clique_of_def, indep_of_def, ∏_def, ™_def, id_def]
	THEN PC_T"hol1" (REPEAT strip_tac));
val lemma13  = save_pop_thm"lemma13";
=TEX
=SML
set_goal([],¨
	µ a b ∑ ∂n ∑
	µ (V:'a ,E) ∑
	(V,E) ç symg ± V ç Finite ± #V æ n ¥
		(∂ C ∑ C clique_of (V,E) ± #C = a
		≤ C indep_of (V,E) ± #C = b)
Æ);
a(REPEAT µ_tac);
(* Prepare for induction on an upper bound for a + b: *)
a(lemma_tac¨∂m∑a + b º mÆ
	THEN_LIST[∂_tac¨a + bÆ THEN rewrite_tac[], POP_ASM_T ante_tac]);
a(intro_µ_tac(¨bÆ, ¨bÆ) THEN intro_µ_tac(¨aÆ, ¨aÆ));
a(INDUCTION_T ¨mÆ strip_asm_tac);
(* Base case: *)
(* *** Goal "1" *** *)
a(REPEAT strip_tac);
a(∂_tac¨0Æ THEN REPEAT strip_tac);
a(∂_tac¨{}Æ THEN REPEAT strip_tac THEN
	fc_tac[lemma8] THEN asm_rewrite_tac[lemma13, size_thm1]);
(* *** Goal "2" *** *)
a(REPEAT strip_tac THEN fc_tac[º_plus1_thm]);
(* 2 subgoals. One is trivial; the hard one comes first: *)
(* *** Goal "2.1" *** *)
(* Case analysis ( a > 0 / b > 0 ): *)
a(strip_asm_tac (µ_elim¨aÆ Ó_cases_thm) THEN
	strip_asm_tac (µ_elim¨bÆ Ó_cases_thm));
(* 4 cases *)
(* *** Goal "2.1.1" *** *)
a(∂_tac¨0Æ THEN REPEAT strip_tac);
a(∂_tac¨{}Æ THEN REPEAT strip_tac THEN
	fc_tac[lemma8] THEN asm_rewrite_tac[lemma13, size_thm1]);
(* *** Goal "2.1.2" *** *)
a(∂_tac¨0Æ THEN REPEAT strip_tac);
a(∂_tac¨{}Æ THEN asm_rewrite_tac[lemma13, size_thm1]);
(* *** Goal "2.1.3" *** *)
a(∂_tac¨0Æ THEN REPEAT strip_tac);
a(∂_tac¨{}Æ THEN asm_rewrite_tac[lemma13, size_thm1]);
(* *** Goal "2.1.4" *** *)
a(lemma_tac¨(i+1) + i' º m ± i + (i'+1) º mÆ);
(* *** Goal "2.1.4.1" *** *)
a(strip_tac);
(* *** Goal "2.1.4.1.1" *** *)
a(GET_ASM_T¨a = i + 1Æ(rewrite_thm_tac o eq_sym_rule));
a(GET_ASM_T ¨a + b = m + 1Æ ante_tac THEN GET_ASM_T ¨b = i' + 1Ærewrite_thm_tac);
a(rewrite_tac[µ_elim¨1Æplus_order_thm]);
a(¥_T rewrite_thm_tac);
(* *** Goal "2.1.4.1.2" *** *)
a(GET_ASM_T¨b = i' + 1Æ(rewrite_thm_tac o eq_sym_rule));
a(GET_ASM_T ¨a + b = m + 1Æ ante_tac THEN GET_ASM_T ¨a = i + 1Ærewrite_thm_tac);
a(rewrite_tac[µ_elim¨1Æplus_order_thm]);
a(¥_T rewrite_thm_tac);
(* *** Goal "2.1.4.2" *** *)
a(list_spec_nth_asm_tac 7[¨i+1Æ, ¨i'Æ]);
a(DROP_NTH_ASM_T 8 (strip_asm_tac o list_µ_elim[¨iÆ, ¨i'+1Æ]));
(* Now introduce the witness: *)
a(∂_tac¨(if 0 < n' then n' else 1) + (if 0 < n then n else 1) Æ);
a(LIST_GET_NTH_ASM_T [5,6] rewrite_tac THEN bc_tac [rewrite_rule[]lemma12]);
(* 4 subgoals: *)
(* *** Goal "2.1.4.2.1" *** *)
a(CASES_T¨0 < n'Æ rewrite_thm_tac);
(* *** Goal "2.1.4.2.2" *** *)
a(CASES_T¨0 < nÆ rewrite_thm_tac);
(* *** Goal "2.1.4.2.3" *** *)
a(REPEAT strip_tac);
a(DROP_NTH_ASM_T 4 bc_thm_tac);
a(rewrite_tac [] THEN REPEAT strip_tac);
a(POP_ASM_T ante_tac THEN cases_tac¨0 < n'Æ THEN1 asm_rewrite_tac[]);
a(TOP_ASM_T rewrite_thm_tac THEN TOP_ASM_T ante_tac);
a(rewrite_tac[≥_less_thm]);
a(¥_T rewrite_thm_tac);
(* *** Goal "2.1.4.2.4" *** *)
a(REPEAT strip_tac);
a(DROP_NTH_ASM_T 5 bc_thm_tac);
a(rewrite_tac [] THEN REPEAT strip_tac);
a(POP_ASM_T ante_tac THEN cases_tac¨0 < nÆ THEN1 asm_rewrite_tac[]);
a(TOP_ASM_T rewrite_thm_tac THEN TOP_ASM_T ante_tac);
a(rewrite_tac[≥_less_thm]);
a(¥_T rewrite_thm_tac);
(* That does the hard bit *)
(* *** Goal "2.2" *** *)
a(asm_fc_tac[]);
a(∂_tac ¨nÆ THEN REPEAT µ_tac THEN TOP_ASM_T rewrite_thm_tac);
val fin_exp_2_ramsey_thm = save_pop_thm"fin_exp_2_ramsey_thm";
=TEX
%\bibliographystyle{fmu}
%\bibliography{fmu}
\section*{Index of Formal Names}
%\newbox\COLC
%\newbox\COLB
%\newbox\COLA
%\setbox\COLC=\vbox{{\footnotesize\printindex}}
%\newdimen\H
%\H=\ht\COLC
%\divide\H by 3\advance\H by\ht\strutbox
%\splittopskip=\ht\strutbox\vbadness=10000
%\setbox\COLA=\vsplit\COLC to \H
%\setbox\COLB=\vsplit\COLC to \H
%\valign{#\vfil\cr\box\COLA\cr\noalign{\hfill}\box\COLB\cr
%  \noalign{\hfill}\box\COLC\cr}




