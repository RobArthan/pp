=IGN
********************************************************************************
dtd045.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
%  dtd045.doc  %Z% $Date: 2002/10/17 16:20:01 $ $Revision: 1.20 $ $RCSfile: dtd045.doc,v $
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST Project}  %% Mandatory field
\TPPtitle{Detailed Design for the General Purpose Theories}  %% Mandatory field
\def\TPPheadtitle{Detailed Design for the \cr
General Purpose Theories}
\TPPref{DS/FMU/IED/DTD045}  %% Mandatory field
\def\SCCSversion{$Revision: 1.20 $ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2002/10/17 16:20:01 $ %
}}  %% Mandatory field
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{K. Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{R.D. Arthan & WIN01\\K. Blackburn & WIN01}
\TPPauthorisation{R.D. Arthan & FST Team Leader}
\TPPabstract{This document gives a detailed design for the
general purpose theories ``basic\_hol'', ``sum'', ``one'', ``combin'' and ``hol''.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item [Issue 1.1 (1991/09/20)]
First issue.
\item [Issue 1.2 (1991/09/23)]
Changes after RDA comments.
\item [Issue 1.3 (1991/09/24)]
Changes during implementation.
\item [Issue 1.4 (1991/09/25)]
Fixing typos, corrected test policy.
\item [Issue 1.5 (1991/10/07)]
Made ``set'' the parent.
\item [Issue 1.6 (1991/10/16)]
Made ``sets'' the parent.
\item [Issue 1.7 (1991/10/21),1.8 (1991/10/21)]
Changes after comments.
Renamed constants $S$, $K$ and $I$ to $CombS$, $CombK$ and $CombI$.
Added $Arbitrary$.
\item [Issue 1.9 (1991/11/07)]
Changed precedence of ``+''.

\item[Issue 1.10 (1992/01/20), \FormatDate{92/01/20} ] Updated to use new fonts.
\item[Issue 1.11 (1992/01/27) (23rd January 1992)]
$new\_axiom$, $simple\-\_new\-\_type\-\_defn$, $new\-\_type\-\_defn$
all changed to take lists of keys, rather than single ones.
\item[Issue 1.12 (1992/02/07) (7th February 1992)]
Added theories $basic\_hol$ and $hol$,
moved $Arbitrary$ to theory ``misc''.
\item[Issue 1.13 (1992/02/10) (10th February 1992)]
Correcting errors introduced in previous issue.
\item[Issue 1.14 (1992/05/14) (14 May 1992)] Use correct quotation symbols.
\item [Issue 1.15 (1992/06/03) (3rd June 1992)]
Gained constant specification material.
\item [Issue 1.16 (1992/07/07) (7th July 1992)]
Greater support for reasoning about sum types.
\item[Issue 1.19 (2002/10/17)] Copyright and banner updates for open source release.
\item[Issue 1.20 (2002/10/17)] PPHol-specific updates for open source release
\item[Issue 1.31] Added $prenex\_clauses$.
\item[2014/07/23]
Augmented old RCS version numbers in the changes history with dates.
Dates will be used in place of version numbers in future.

%%%% END OF CHANGES HISTORY %%%%
\end{description}
\subsection{Changes Forecast}
Populating theories with more theorems.

\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains detailed designs
for the theories ``sum'', ``one'' and ``combin'',
called for in \cite{DS/FMU/IED/HLD011}.
The design is implemented in \cite{DS/FMU/IED/IMP045}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains the detailed design for the theories ``basic$\_$hol'', ``sum'', ``one'', ``combin'', ``hol''.

These respectively:
\begin{description}
\item [basic$\_$hol]
This theory is the minimum theory in which consistency can be
guaranteed, due to primitive inference rules requiring
the presence of certain types and constants that are
not all present until this point.
The theory itself contains a small quantity of utility material.
\item [sum]
Define the sum type (i.e. binary disjoint union).
\item [one]
Defines a one-point type.
\item [combin]
Defines the combinators $CombS$, $CombK$ and $CombI$
and the functional composition operator $o$.
\item [hol]
This theory will be the starting theory for a user that wants access to
all the ICL supplied theories.
The theory itself is empty.
\end{description}

\subsubsection{Dependencies}
This document depends on \cite{DS/FMU/IED/IMP040}, which is the theory of characters,
and the theory design tools of \cite{DS/FMU/IED/DTD035}.
\subsubsection{Deficiencies}
None known.
\subsubsection{Possible Enhancements}
The three inhabited theories are missing some already obvious theorem
members, and it may be appropriate to add others
as development and application work progresses.

\section{THE THEORY ``basic$\_$hol''}
\subsection{Design of the theory ``basic$\_$hol''}
=THDOC
req_name "basic_hol" (Value "char");
=DESCRIBE
The theory ``€basic\_hol›'' is the minimum theory in which consistency can be
guaranteed, due to primitive inference rules requiring
the presence of certain types and constants that are
not all present until this point.
The theory itself contains only some utility material.
=ENDDOC
\subsubsection{Material for Constant Specification}
=THDOC
req_const("Consistent",î('a ≠ BOOL) ≠ BOOLÆ);
req_defn(["Consistent","consistent_def"],([],¨µ p:'a ≠ BOOL ∑ Consistent p § ∂ x ∑ p xÆ));
=DESCRIBE
The constant $€Consistent›$ is used to express the fact that
a predicate is satisfiable.
Added to ``misc'' during the creation of structure $ConstantSpecification$.
It is bound to the ML variant $consistent\_def$.
=ENDDOC
=THDOC
req_const("ConstSpec",î('a ≠ BOOL) ≠ 'a ≠ BOOLÆ);
req_defn(["ConstSpec","const_spec_def"],([],
	¨µ (p:'a ≠ BOOL) (c:'a) ∑
	ConstSpec p c § (Consistent p ¥ p c)Æ));
=DESCRIBE
The constant $€ConstSpec›$ applied to $p$ and $c$ is used to express the fact that
if the predicate $p$ is consistent (see $Consistent$)
then $c$ satisfies the predicate.
Added to ``misc'' during the creation of structure $ConstantSpecification$.
It is bound to the ML variant $const\_spec\_def$.
=ENDDOC
=THDOC
req_thm("€const_spec_thm›",([],
	¨µ (p:'a ≠ BOOL) ∑ ∂ x : 'a ∑ ConstSpec p xÆ));
=DESCRIBE
The theorem expresses the fact that
there always exists something that satisfies $ConstSpec$ applied to any predicate (whether consistent or not).
Added to ``misc'' during the creation of structure $ConstantSpecification$.
=ENDDOC
=THDOC
req_thm("€prenex_clauses›",
	([], ¨µ P Q : 'a ≠ BOOL; p q : BOOL∑
		((µ x∑ P x) ± q § (µ x∑ P x ± q))
	±	(p ± (µ x∑ Q x) § (µ x∑ p ± Q x))
	±	((∂ x∑ P x) ± q § (∂ x∑ P x ± q))
	±	(p ± (∂ x∑ Q x) § (∂ x∑ p ± Q x))
	±	((µ x∑ P x) ≤ q § (µ x∑ P x ≤ q))
	±	(p ≤ (µ x∑ Q x) § (µ x∑ p ≤ Q x))
	±	((∂ x∑ P x) ≤ q § (∂ x∑ P x ≤ q))
	±	(p ≤ (∂ x∑ Q x) § (∂ x∑ p ≤ Q x))
	±	((µ x∑ P x) ¥ q § (∂ x∑ P x ¥ q))
	±	(p ¥ (µ x∑ Q x) § (µ x∑ p ¥ Q x))
	±	((∂ x∑ P x) ¥ q § (µ x∑ P x ¥ q))
	±	(p ¥ (∂ x∑ Q x) § (∂ x∑ p ¥ Q x))
	±	(((µ x∑ P x) § q)
 § ((µ x∑ P x) ¥ q) ± (q ¥ (µ x∑ P x)))
	±	((p § (µ x∑ Q x))
 § (p ¥ (µ x∑ Q x)) ± ((µ x∑ Q x) ¥ p))
	±	(((∂ x∑ P x) § q)
 § ((∂ x∑ P x) ¥ q) ± (q ¥ (∂ x∑ P x)))
	±	((p § (∂ x∑ Q x))
 § (p ¥ (∂ x∑ Q x)) ± ((∂ x∑ Q x) ¥ p))
	±	((∂â1 x∑ P x) § (∂ x∑ P x ± (µ y∑ P y ¥ y = x))) Æ));
=DESCRIBE
This theorem captures the logical principles that justify reduction
to prenex normal form. Higher-order rewriting with the theorem will
put a term in prenex normal form.
=ENDDOC

Red tape to end theory design:
=THSML
summarize_td_results ();
val basic_hol_success = theory_check_success ();
initialise_td_results ();
=TEX
=DOC
signature €BasicHolTheory› = sig
end;
=DESCRIBE
This is the signature in which we declare theory ``basic$\_$hol''.
The theory itself is empty.
=ENDDOC

\section{THE THEORY ``one''}
\subsection{Design of the theory ``one''}
=THDOC
req_name "one" (Value "basic_hol");
=DESCRIBE
The theory ``€one›'' defines a one-point type, $îONEÆ$.
=ENDDOC
=THDOC
req_const ("IsOneRep",îBOOL ≠ BOOLÆ);
req_defn (["IsOneRep","is_one_rep_def"],([],¨∂ one: BOOL∑
	µ x: BOOL∑ IsOneRep x § (x § one)Æ));
=DESCRIBE
We represent the type $ONE$ by a single member of type $îBOOLÆ$, expressed
by the predicate HOL constant $¨€IsOneRep›Æ$.
=ENDDOC
=THDOC
req_type ("ONE",0);
req_defn(["ONE","one_def1"],([],¨∂ f: ONE ≠ BOOL ∑ TypeDefn IsOneRep fÆ));
req_const("One",îONEÆ);
req_defn(["One","one_def"],([],¨µ x: ONE∑ x = OneÆ));
=DESCRIBE
The type $€ONE›$ has only one member,$¨€One›Æ$, demonstrated by its definition ``$€One›$''
(which is bound to the ML value $one\_def$).
The definition of the type is saved with key ``€ONE›''.
=ENDDOC
=THDOC
req_thm("one_fns_thm",([],¨µ f: 'a ≠ ONE ∑ f = Ã x ∑ OneÆ));
=DESCRIBE
The theorem ``$€one\_fns\_thm›$'' states that there is only one
function of any given domain whose range is $îONEÆ$.
=ENDDOC
Red tape to end theory design:
=THSML
summarize_td_results ();
val one_success = theory_check_success ();
initialise_td_results ();
=TEX
\subsection{Signature of the theory ``one''}
=DOC
signature €OneTheory› = sig
	val €is_one_rep_def› : THM;
	val €one_def› : THM;
	val €one_def1› : THM;
	val €one_fns_thm› : THM;
end;
=DESCRIBE
This is the signature in which we declare theory ``one''.
$one\_def$ is the definition of $One$, saved with the key ``One'',$one\_def1$ is the type definition of $ONE$, saved with the key ``ONE''.
.
$one\_fns\_thm$ is the theorem saved with key ``$one\_fns\_thm$''.
=ENDDOC
\section{THE THEORY ``combin''}
\subsection{Design of the theory ``combin''}
=THDOC
req_name "combin" (Value "basic_hol");
=DESCRIBE
The theory ``€combin›'' defines the combinators $CombS$, $CombK$ and $CombI$
and the functional composition operator $o$.
=ENDDOC
If a user intends to make significant use of the combinators
they may wish to alias $Comb$ to $S$, etc.
The combinators are not given their usual one letter names to preserve
these for use as variable names.
=THDOC
req_const ("o",î('b ≠ 'c) ≠ ('a ≠ 'b) ≠ ('a  ≠ 'c)Æ);
req_infix (300, "o");
req_defn(["o","o_def"],([],¨µ (f:'b ≠ 'c) (g:'a ≠ 'b) (x: 'a) ∑
	(f o g) x = f(g x)Æ));
=DESCRIBE
The HOL constant ``$€o›$'' represents functional composition,
and is given a definition saved under key ``€o›''.
=ENDDOC
Note that ``o'' is lower case, following literature conventions.
=THDOC
req_const ("CombS",î('a ≠ 'b ≠ 'c) ≠ ('a ≠ 'b) ≠ 'a ≠ 'cÆ);
req_const ("CombK",î'a ≠ 'b ≠ 'aÆ);
req_const ("CombI",î'a ≠ 'aÆ);
req_defn(["CombS","comb_s_def"],([],¨µ (f:'a ≠ 'b ≠ 'c) (g:'a ≠ 'b) (x:'a) ∑
	CombS f g x = f x (g x)Æ));
req_defn(["CombK","comb_k_def"],([],¨µ (x : 'a) (y : 'b) ∑ CombK x y = xÆ));
req_defn(["CombI","comb_i_def"],([],¨µ (x : 'a) ∑ CombI x = xÆ));
=DESCRIBE
The HOL constant $¨€CombS›Æ$ is the duplication combinator,
$¨€CombK›Æ$ is the deletion combinator,
and $¨€CombI›Æ$ is the identity combinator.
Their definitions are saved under the keys ``€CombS›'', ``€CombK›'' and ``€CombI›''.
=ENDDOC
=THDOC
req_thm("s_k_thm",([],¨µ x ∑
	(CombS:('a ≠ 'b ≠ 'a) ≠ ('a ≠ 'b) ≠ 'a ≠ 'a) CombK x = CombIÆ));
req_thm("o_assoc_thm",([],¨µ (f:'a ≠ 'b) (g:'c ≠ 'a) (h :'d ≠ 'c)∑
	f o (g o h) = (f o g) o hÆ));
req_thm("o_i_thm",([],¨µ f : 'a ≠ 'b∑
	((CombI o f) = f) ± ((f o CombI) = f)Æ));
=DESCRIBE
The theorem ``$€s\_k\_thm›$'' expresses the relationship between $S$, $K$ and $I$.
The theorem ``$€o\_assoc\_thm›$'' expresses the associativity of
functional composition.
The theorem ``$€o\_i\_thm›$'' expresses the fact that $I$ is the left and right identity of $o$.
=ENDDOC
Red tape to end theory design:
=THSML
summarize_td_results ();
val combin_success = theory_check_success ();
initialise_td_results ();
=TEX
\subsection{Signature of the theory ``combin''}
=DOC
signature €CombinTheory› = sig
	val €comb_s_def› : THM;
	val €comb_k_def› : THM;
	val €comb_i_def› : THM;
	val €o_def› : THM;
	val €o_assoc_thm› : THM;
	val €o_i_thm› : THM;
end;
=DESCRIBE
In the signature of $CombinTheory$ in which we declare theory ``combin'' we bind the definitions of $CombS$, $CombK$, $CombI$ and $o$ to
$comb\_s\_def$, $comb\_k\_def$, $comb\_i\_def$ and $o\_def$ respectively.
The theorem  saved with key ``$o\_assoc\_thm$'' is bound to
the ML value of the same name, as is ``$o\_i\_thm$''.
=ENDDOC
We do not bind the other theorems of ``combin'' to ML values
because they won't be in common use.
\section{THE THEORY ``sum''}
\subsection{Design of the theory ``sum''}
=THDOC
req_name "sum" (Value "combin");
=DESCRIBE
The theory ``€sum›'' defines the sum type (i.e. binary disjoint union).
=ENDDOC
=THDOC
req_const("IsSumRep",î ('a ∏ 'b ∏ BOOL) ≠ BOOLÆ);
req_defn(["IsSumRep","is_sum_rep_def"],([],¨
∂ (inl:'a ≠  'a ∏ 'b ∏ BOOL) (inr:'b ≠  'a ∏ 'b ∏ BOOL)
  (outl:'a ∏ 'b ∏ BOOL ≠ 'a) (outr:'a ∏ 'b ∏ BOOL ≠ 'b)
  (isl:'a ∏ 'b ∏ BOOL ≠ BOOL) (isr:'a ∏ 'b ∏ BOOL ≠ BOOL) ∑
µ (x1:'a) (x2:'a) (y1:'b) (y2:'b) (z: 'a ∏ 'b ∏ BOOL) ∑
	IsSumRep(inl x1) ±
	IsSumRep(inr y1) ±
	(IsSumRep z ¥ (inl(outl z) = z ≤ inr(outr z) = z)) ±
	(inl x1 = inl x2 § x1 = x2) ±
	(inr y1 = inr y2 § y1 = y2) ±
	≥(inl x1 = inr y1) ±
	≥(inr y1 = inl x1) ±
	outl(inl x1) = x1 ±
	outr(inr y1) = y1 ±
	(IsSumRep z ¥ (isl z § inl(outl z) = z)) ±
	(IsSumRep z ¥ (isr z § inr(outr z) = z))
	Æ));
=DESCRIBE
The representation of a value of type $î'a\ +\ 'bÆ$ is
by a triple, where in the implementation the third member indicates whether
the first or second member is the ``real'' value of the type.
This is expressed by the constant $€IsSumRep›$ whose definition
is saved with key ``€IsSumRep›''.
=ENDDOC
=THDOC
req_type ("+",2);
req_infix (300,"+");
req_defn(["+","sum_def"],([],¨∂ f: 'a + 'b ≠ ('a ∏ 'b ∏ BOOL) ∑ TypeDefn IsSumRep fÆ));
=DESCRIBE
The HOL type constructor ``$€+›$'' creates sum types (i.e. binary disjoint union).
Its definition is saved under the key ``$€+›$''.
=ENDDOC
=THDOC
req_const("InL",î'a ≠ 'a + 'bÆ);
req_const("InR",î'b ≠ 'a + 'bÆ);
req_const("OutL",î'a + 'b ≠ 'aÆ);
req_const("OutR",î'a + 'b ≠ 'bÆ);
req_const("IsL",î'a + 'b ≠ BOOLÆ);
req_const("IsR",î'a + 'b ≠ BOOLÆ);
req_defn(["InL", "InR", "OutL", "OutR", "IsL", "IsR","sum_clauses"],
	([],¨µ (x1:'a) (x2:'a) (y1:'b) (y2:'b) (z: 'a + 'b) ∑
	(InL(OutL z) = z ≤ InR(OutR z) = z) ±
	((InL x1 : 'a + 'b) = InL x2 § x1 = x2) ±
	((InR y1 : 'a + 'b) = InR y2 § y1 = y2) ±
	≥(InL x1 = InR y1) ±
	≥(InR y1 = InL x1) ±
	OutL(InL x1:'a + 'b) = x1 ±
	OutR(InR y1:'a + 'b) = y1 ±
	(IsL z § InL(OutL z) = z) ±
	(IsR z § InR(OutR z) = z)
	Æ));
=DESCRIBE
The HOL constants $€InL›$ and $€InR›$ are the left and right injection
functions for sum types,
$€OutL›$ and $€OutR›$ are the left and right destructor
functions for sum types, and
$€IsL›$ and $€IsR›$ are the left and right discriminator
functions.
The resulting definition is also the
primary rewrite rule for these functions,
and is bound to the ML variable $sum\_clauses$(q.v).
=ENDDOC
=THDOC
req_thm("sum_cases_thm",([],
	¨µ x:'a + 'b ∑ (∂ y ∑ x = InL y) ≤
		(∂ z ∑ x = InR z)Æ));
=DESCRIBE
This theorem expresses how an object  that has a sum type
must be built from an object of one of the two constituent
types.
This is used in conjunction with, e.g., $≤\-\_THEN$,
or, if specialised, with $strip\-\_asm\-\_tac$.
=ENDDOC
=THDOC
req_thm("sum_fns_thm",([],
	¨µ (f: 'a ≠ 'c) (g: 'b ≠ 'c) ∑
	∂â1 h: 'a + 'b ≠ 'c ∑
	h o InL = f ± h o InR = gÆ));
=DESCRIBE
The theorem ``$€sum\_fns\_thm›$'' may be used for providing
meta-results over $InL$ and $InR$,
and is bound to the ML value $sum\_fns\_thm$.
=ENDDOC
Red tape to end theory design:
=THSML
summarize_td_results ();
val sum_success = theory_check_success ();
initialise_td_results ();
=TEX
\subsection{Signature of the theory ``sum''}
=DOC
signature €SumTheory› = sig
	val €is_sum_rep_def› : THM;
	val €sum_def› : THM;
	val €sum_clauses› : THM;
	val €sum_cases_thm› : THM;
	val €sum_fns_thm› : THM;
=DESCRIBE
$sum\_clauses$ is bound to the definition of $InL$.
$sum\-\_cases\-\_thm$ and $sum\-\_fns\-\_thm$ are bound to the theorems with those names
as their key.
=ENDDOC
=DOC
val €µ_sum_conv› : CONV;
=DESCRIBE
A conversion to break a term that is universally quantified by a sum type variable
into
two terms universally quantified by variables of the
constituent types.
=FRULE 1 Conversion
µ_sum_conv
¨µ x : ty1 + ty2 ∑ P[x]Æ
˜
˜
Ù (µ x : ty1 + ty2 ∑ P[x]) §
 (µ x' : ty1 ∑ P[InL x']) ±
 (µ x'' : ty2 ∑ P[InR x''])
=TEX
where $x'$ and $x''$ are variables whose names are variants of $x$, and types are $ty1$ and $ty2$ respectively.
=FAILURE
45001	?0 is not of the form ¨µ x : ty1 + ty2 ∑ P[x]Æ
=ENDDOC
=DOC
val €sum_cases_tac› : TERM -> TACTIC;
=DESCRIBE
This tactic implements case splitting over sum types:
to prove $t[x]$ it suffices to prove $t[InL y]$ and to prove $t[InR z]$
(for newly introduced variable $y$ and $z$).
The term argument must be a variable of type
îty1 + ty2Æ  and must appear free in the conclusion of the
goal but not in its assumptions.
=FRULE 1 Tactic
sum_cases_tac
¨x : ty1 + ty2Æ
˜
á Ù P [x]
˜
á Ù P [InL x'],
á Ù P [InR x'']
=TEX
where $x'$ and $x''$ are variables whose names are variants of $x$, and types are $ty1$ and $ty2$ respectively.
=FAILURE
45002	?0 is not a variable of type îty1 + ty2Æ
38002	?0 does not appear free in the conclusion of the goal
38003	?0 appears free in the assumptions of the goal
=ENDDOC
Tidying up:
=SML
end; (* of signature SumTheory *)
=TEX
\section{THE THEORY ``hol''}
\subsection{Design of the theory ``hol''}
=THDOC
req_name "hol" (Value "one");
req_parent "sum";
req_parent "sets";
=DESCRIBE
The theory ``€hol›'' is the ``top'' theory of the
supplied ICL HOL system,
in which all supplied theories are ancestors.
The theory itself is empty, apart from cache theorems.  Hence
the theory check checks all but the theorems.
=ENDDOC
Theories created after the introduction of this document
and its implementation into the build will be inserted
``below'' this theory using $new\_parent$.

Red tape to end theory design:
=THSML
set_flag ("tc_not_thms", true);
summarize_td_results ();
val hol_success = theory_check_success ();
=TEX
=DOC
signature €HolTheory› = sig
end;
=DESCRIBE
This is the signature in which we declare theory ``hol''.
The theory itself is empty.
=ENDDOC

\section{TEST POLICY}
The theories produced should be checked by the theory design tools
of \cite{DS/FMU/IED/DTD035}, against the theory design provided.
This is done in \cite{DS/FMU/IED/MDT045}.
There are no functions to be checked.
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}


