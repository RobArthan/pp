=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design of Integer Arithmetic Proof Procedure}  %% Mandatory field
\TPPref{DS/FMU/IED/DTD105}  %% Mandatory field
\def\SCCSversion{$Revision$
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{R.D.~Arthan & WIN01}
\TPPauthorisation{R.B.~Jones & FMU Manager}
\TPPabstract{This document contains the detailed design of proof
procedures for integer arithmetic.
The main proof procedures provided are arithmetic normalisation and a linear arithmetic prover.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{Document control}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history} 
\begin{description}
\item[\SCCSversion~(\FormatDate{$Date$%
})] First draft.
\end{description}
\subsection{Changes forecast}
As determined by comments and use.
\newpage
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design of part of the \ProductHOL\ system.
The document responds to \cite{DS/FMU/IED/HLD012}.
\subsection{Introduction}
\subsubsection{Purpose and Background}
The documents \cite{DS/FMU/IED/DTD081,DS/FMU/IED/DTD082} provide automated support for the HOL natural numbers, in the shape of:
a conversion which puts an arithmetic expression in a normal form (``multiplying out and cancelling like terms'');
and rules a tactic and a proof context implementing a decision procedure for zero-order linear arithmetic.
The purpose of this document is to provide the analogue for the integers in HOL as constructed in \cite{DS/FMU/IED/DTD093}.

\subsubsection{Dependencies}
This document depends on the theory $ú$ defined in
\cite{DS/FMU/IED/DTD093}, on the conversions in
\cite{DS/FMU/IED/DTD081}, and on the generic support for the linear arithmetic decision procedure in \cite{DS/FMU/IED/DTD082}

\subsubsection{Algorithms}
The algorithms are very similar to, and reuse much of what is provided in \cite{DS/FMU/IED/DTD081,DS/FMU/IED/DTD082}.

\subsubsection{Known Deficiencies}
A possible deficiency is that no analogue of the scaling rules of \cite{DS/FMU/IED/DTD082} is provided.
These would necessarily have a more complex interface for the integers, since multiplication by an integer need not preserve the sense of the ordering relation.
Using easy-to-prove theorems to do the samethings  is probably no more complicated than it would be to use custom scaling rules.
\newpage
\newpage
\section{SIGNATURE}
=DOC 
signature ÛúArithmeticToolsÝ = sig
=DESCRIBE
This is the signature of a structure containing arithmetic and an automatic linear
arithmetic prover for the HOL integers (as defined in the theory ú).
=ENDDOC
\subsection{Arithmetic Normalisation}

=DOC 
	val Ûú_term_orderÝ : TERM -> TERM -> int;
=DESCRIBE
=INLINEFT
ú_term_order
=TEX
\ gives an ordering relation on HOL terms analogous to that given by $term\_order$, q.v., but which takes special arrangements for certain terms of type ú.
In particular it ensures that a `monomial' (formed using integer multiplication) without a sign immediately precedes the same monomial with a sign, which in turn precedes the same monomial with a signed literal multiplier, e.g.:

=GFT
	a*b < ~a * b < 0 * a * b < ~1 * a * b < 1 * a * b < ....
=TEX
.
=ENDDOC

=DOC 
	val Ûú_anf_convÝ : CONV;
	val Ûú_ANF_CÝ : CONV -> CONV;
=DESCRIBE
=INLINEFT
ú_anf_conv
=TEX
\ is a conversion which proves theorems of the form
=INLINEFT
ô t1 = t2
=TEX
\ where $t1$ is a term formed from atoms of type ú and
$t2$ is in what we may call additive normal form, i.e. it has the form:
=INLINEFT
t‰1 + t‰2 + ...
=TEX
, where the 
=INLINEFT
t‰i
=TEX
\ have the form
=INLINEFT
s‰1 * s‰2 * ...
=TEX
where the
=INLINEFT
s‰i
=TEX
\ are atoms.
Here, by atom
we mean a term which is not of the form
=INLINEFT
t‰1 + t‰2 + ...
=TEX
or
=INLINEFT
s‰1 * s‰2 * ...
=TEX
.

The summands
=INLINEFT
t‰i
=TEX
\ and,
within them,
the factors
=INLINEFT
s‰j
=TEX
\ are given in increasing order with respect to the ordering
on terms given by the function 
=INLINEFT
ú_term_order
=TEX
, q.v. Arithmetic computation is carried out on atoms to ensure
that at most one of the summands is a numeric literal and that, within
each summand, at most one factor is a numeric literal. Any literal appears
at the beginning of its factor or summand and addition of $0$
or multiplication by $1$ is simplified out.

=INLINEFT
ú_ANF_C conv
=TEX
\ is a conversion which acts like
=INLINEFT
ú_anf_conv
=TEX
\ but which applies
=INLINEFT
conv
=TEX
\ to each atom as it is encountered (and normalises the result recursively).
The argument conversion  may signal that it does not
wish to change a subterm, $t$ say, either by failing or by returning $t = t$,
the former approach is more efficient.

The conversions fail with error number 105032 if there are no changes to be
made to the term.

=FAILURE
105032	?0 is not of type ”ú® or is already in additive normal form
=ENDDOC

\subsection{Linear Arithmetic Proof Procedure}
Some messages form \cite{DS/FMU/IED/DTD082} are used behind the scenes by the decision
procedure to format its main diagnostic print-out when it cannot find
a contradiction.
As in \cite{DS/FMU/IED/DTD082} care must be taken not to evaluate the diagnostic print-out until the error has propagated to the ML top-level.


=FAILURE
82100	Cannot derive a contradiction from the following assumptions
	using the linear arithmetic proof procedure:
82101	Assigning variables to terms as follows:
82102	Gives the satisfiable system:
=TEX
=DOC
	val Ûú_lin_arith_ruleÝ : TERM list -> THM;
=DESCRIBE

Given a system,
=INLINEFT
‡ = [r‰1, r‰2, ...]
=TEX
, of numeric constraints,
=INLINEFT
r‰i
=TEX
, of the form
=INLINEFT
(s‰i:ú) = t‰i
=TEX
or
=INLINEFT
s‰i ¼ t‰i
=TEX
\ these rules attempt to prove a theorem of the form
=INLINEFT
‡ ô F
=TEX
\ (terms in ‡ which are not of either of these forms are ignored and
do not appear in the assumptions of the result theorem).
The usual interface to these rules is via the decision procedures in the
proof context $ú\_lin\_arith$, q.v., e.g. as invoked by
=INLINEFT
PC_T1"ú_lin_arith"prove_tac[]
=TEX

The algorithm for the decision procedure is very similar to the one used in $lin\_arith\_rule$, q.v.
The only significant difference is that there is no opportunity with the integers to add in assumptions that all atoms are non-negative.

=FAILURE
82110	System is satisfiable
82111	A system with no constraints is satisfiable
105112	No constraints of the form ô (t1:ú) ¼ t2 or ô (t1:ú) = t2 could
	be derived from the assumptions
=TEX
=ENDDOC
\subsection{Conversions}
=DOC
	val Ûú_eq_cancel_convÝ : CONV
	val Ûú_¼_cancel_convÝ : CONV

=DESCRIBE
=INLINEFT
î_eq_cancel_conv
=TEX
\ (resp.
=INLINEFT
¼_cancel_conv
=TEX
) puts arithmetic equations (resp. inequalities formed with $¼$) in
a normal form in which the right-hand side is a signed literal and
the left-hand side is in additive normal form, in the
sense of
=INLINEFT
ú_anf_conv
=TEX
, q.v.

For example, the calls:
=GFT ProofPower Input
ú_eq_cancel_conv¬(x:ú) + 2*y + 5*z + 3 = 1 +6*y + z®;
ú_¼_cancel_conv¬(x:ú) + 2*y + x + 3 ¼ y + 2 + 2*x + y®;
=TEX
produce the following output
=GFT ProofPower Output
????
=TEX

Note that if the left-hand side reduces to $0$ the truth value is not evaluated.
However,
=INLINEFT
ú_eq_conv
=TEX
\ or
=INLINEFT
ú_¼_conv
=TEX
\ may be used to perform the evaluation, where required.

=USES
The conversions are intended for use in tactic and conversion programming.
The normal interactive interface is via rewriting or stripping in the proof context
=INLINEFT
ú_lin_arith
=TEX
, which performs other useful simplifications.
=FAILURE
105120	?0 is not of the form (t1:ú) = t2 or is already in normal form
105121	?0 is not of the form (t1:ú) ¼ t2 or is already in normal form
=SEEALSO
=INLINEFT
lin_arith, ú_lin_arith, ú_eq_conv, ú_¼_conv
=TEX
=ENDDOC
\section{TACTICS}
=DOC
	val Ûú_lin_arith_tacÝ : TACTIC;
=DESCRIBE
These tactics are primarily intended for use in conjunction with
the integer linear arithmetic proof contexts
=INLINEFT
ú_lin_arith
=TEX
\ and
=INLINEFT
'ú_lin_arith
=TEX
, q.v.
The normal interface to the tactics is via the decision
procedures in these proof contexts, as in for example:
=INLINEFT
PC_T1"ú_lin_arith"prove_tac[]
=TEX
.

The tactics do however, have possible applications in specialised
tactic programming, in which circumstances their
behaviour may be understood
from their definition, in terms of
=INLINEFT
ú_lin_arith_rule
=TEX
\ and
=INLINEFT
ú_lin_arith_rule
=TEX
, q.v., essentially as:
=GFT
val Ûú_lin_arith_tacÝ = GET_ASMS_T (f_thm_tac o ú_lin_arith_rule o map concl);
=USES
The most likely application is in specialised tactic programming in
situations where it is known that the assumptions are already in
the normal form produced by the proof context
=INLINEFT
lin_arith
=TEX
\ and it is important for performance not to restrip them.
=ENDDOC

\section{PROOF CONTEXTS}
=DOC
(* Proof Context: Ûú_lin_arithÝ *)
=DESCRIBE
This is a proof context whose main purpose is to supply a decision procedure
for problems in linear arithmetic over the HOL integers.
\paragraph{Contents}
The rewriting, theorem stripping and conclusion stripping components are
as for the proof context $predicates$, q.v, each augmented with conversions
effecting the following transformations, where $a$ and $b$ stand for
numeric literals.
=GFT
a = b		­	ú_eq_conv¬a = b®
a ¼ b		­	ú_¼_conv¬a ¼ b®
t1 = t2		­	ú_eq_cancel_conv¬t1 = t2®
t1 ¼ t2		­	ú_¼_cancel_conv¬t1 ¼ t2®
³ t1 = t2	­	t1 < t2 ² t2 < t1
³ t1 ¼ t2	­	t2 < t1
t1 < t2	­	t1 + 1 ¼ t2
t1 ¾ t2	­	t2 ¼ t1
t1 > t2	­	t2 < t
³ t1 < t2	­	t2 ¼ t1
³ t1 ¾ t2	­	³ t2 ¼ t1
³ t1 > t2	­	t1 ¼ t2
t1 = t2	­	t1 = t2
t1 ¼ t2	­	t1 ¼ t2
=TEX
(where all variables are of type ú).

The automatic proof tactic works by {\em(i)} restripping all the
assumptions of the goal, {\em(ii)} adding the argument theorems
to the stock of assumptions using $strip\_asm\_tac$, {\em(iii)} applying
$contr\_tac$, and {\em(iv)} searching for a linear combination of
the assumptions which will reduce, by multiplying out and cancelling like terms,
to a contradiction of the form $a = b$ or
$a ¼ b$ with $a$ and $b$ numeric literals.
The automatic proof conversion just tries to prove its argument, $t$ say, using
the automatic proof tactic and returns $t = T$ if it succeeds.

Other components of the proof context are as for $predicates$.

For example, 
=INLINEFT
PC_T1"ú_lin_arith"prove_tac[]
=TEX
\ will prove any of the following goals:
=GFT
	([], ¬µa b c:ú·a ¼ b ± (a + b < c + a) ´ a < c®)
	([], ¬µa b c:ú·a ¾ b ± ³ b < c ´ a ¾ c®)
	([], ¬µa b c:ú·a + îú 2*b < îú 2*a ´ b + b < a®)
	([], ¬µ x y:ú· ³ (îú 2*x + y = îú 4 ± îú 4*x + îú 2*y = îú 7)®)
=TEX
=SEEALSO
=INLINEFT
'ú_lin_arith
=ENDDOC
=DOC
(* Proof Context: Û'ú_lin_arithÝ *)
=DESCRIBE
This is a component
proof context whose main purpose is to supply a decision procedure
for problems in linear arithmetic for the HOL integers.
\paragraph{Contents}
The rewriting, theorem stripping and conclusion stripping components
are as for the proof context $ú\_lin\_arith$ but without any of the
material from the proof context $predicates$.
The automatic proof components are as for $lin\_arith$.
Other components are blank.

A typical use of the proof context would be to solve problems containing
a mixture of (linear) arithmetic and set theory.
=FAILURE
82200	Could not prove theorem with conclusion ?1 (?0)
=ENDDOC
\section{EPILOGUE}
=SML
end (* of signature úArithmeticTools *);
=TEX
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}

