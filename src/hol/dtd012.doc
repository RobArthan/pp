=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST Project}  %% Mandatory field
\TPPtitle{Detailed Design for the Interface to the Abstract Data Type $THM$}  %% Mandatory field
\def\TPPheadtitle{Detailed Design for the \cr
Interface to the Abstract Data Type $THM$}
\TPPref{DS/FMU/IED/DTD012}  %% Mandatory field
\def\SCCSversion{$Revision$
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}  %% Mandatory field
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{K.~Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.Arthan & FST Team Leader}
\TPPabstract{This document gives a detailed design for the 
interface to the
abstract data type $THM$.
This includes all those functions that the kernel of ICL HOL
will need to interface to the abstract data type, but do not 
need to be present within the abstract data type.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Project Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{Document control}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history}
\begin{description}
\item [Issue 1.1]
First version.
\end{description}
\subsection{Changes forecast}
There may be debate about which functions should be named $icl'\ldots$.
Some of the text outside of the documentation boxes is phrased as
questions of design or implementation, and later issues should
have these questions resolved.
\section{GENERAL}
\subsection{Scope}
This document contains a detailed design for the interface to the
abstract data type $THM$.
The interface functions complete the set of functiosn called 
for in section 4 of \cite{DS/FMU/IED/HLD007}.
The high-level specification for the code is
given in \cite{DS/FMU/IED/SPC003}, \cite{DS/FMU/IED/SPC004} and \cite{DS/FMU/IED/SPC005}.
The design is
implemented in \cite{DS/FMU/IED/IMP012}.
\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains a detailed design for the interface
functions to the
abstract data type $THM$.
This includes all those functions that the kernel of ICL HOL
will need to interface to the abstract data type, but do not 
need to be present within the abstract data type.

All functions require all their arguments to begin evaluation,
unless otherwise noted.
\subsubsection{Dependencies}
Loading this document is dependent on those
files indicated as preceding it in the ICL HOL release 001 makefile.
\subsubsection{Deficiencies}

\subsubsection{Possible Enhancements}
\section{INFIX DIRECTIVES}

\section{THE INTERFACE TO THE ABSTRACT DATA TYPE $THM$}
=DOC
signature âicl'InterfaceToTheoremsá = sig
=DESCRIBE
This provides some interface functions to the abstract
data type $THM$.
=ENDDOC
\subsection{Theory Access Functions}
=DOC
val âget_definitioná : string -> string -> THM;
=DESCRIBE
$get\_definition$ $theory$ $key$ returns the definition with key $key$,
found in theory $theory$.
=FAILURE
12001	Theory ?0 is not present in the current hierarchy
12002	Theory ?0 has been deleted from the current hierarchy
12003	Theory ?0 is not in scope
12004	Theory ?0 does not have a definition with key ?1
=ENDDOC
=DOC
val âget_axiomá : string -> string -> THM;
=DESCRIBE
$get\_axiom$ $theory$ $key$ returns the axiom with key $key$,
found in theory $theory$.
=FAILURE
12001	Theory ?0 is not present in the current hierarchy
12002	Theory ?0 has been deleted from the current hierarchy
12003	Theory ?0 is not in scope
12005	Theory ?0 does not have an axiom with key ?1
=ENDDOC
=DOC
val âget_theoremá : string -> string -> THM;
=DESCRIBE
$get\_theorem$ $theory$ $key$ returns the theorem with key $key$,
found in theory $theory$.
=FAILURE
12001	Theory ?0 is not present in the current hierarchy
12002	Theory ?0 has been deleted from the current hierarchy
12003	Theory ?0 is not in scope
12006	Theory ?0 does not have a theorem with key ?1
=ENDDOC
=DOC
val âget_typeá : string -> string -> TYPE;
=DESCRIBE
$get\_type$ $theory$ $name$ returns the type with name $name$,
found in theory $theory$.
Its type parameters are taken from the sequence $:'1, :'2, \ldots$.
=SEEALSO
$get\_type\_arity$
=FAILURE
12001	Theory ?0 is not present in the current hierarchy
12002	Theory ?0 has been deleted from the current hierarchy
12003	Theory ?0 is not in scope
12007	Theory ?0 does not have a type with name ?1
=ENDDOC
=DOC
val âget_type_arityá : string -> string -> int;
=DESCRIBE
$get\_type\_arity$ $theory$ $name$ returns the arity of the type with name $name$,
found in theory $theory$.
=SEEALSO
$get\_type$
=FAILURE
12001	Theory ?0 is not present in the current hierarchy
12002	Theory ?0 has been deleted from the current hierarchy
12003	Theory ?0 is not in scope
12007	Theory ?0 does not have a type with name ?1
=ENDDOC
=DOC
val âget_constantá : string -> string -> TERM;
=DESCRIBE
$get\_constant$ $theory$ $name$ returns the constant with name $name$
found in theory $theory$.
The term returned has the most general type originally given for the constant.
=FAILURE
12001	Theory ?0 is not present in the current hierarchy
12002	Theory ?0 has been deleted from the current hierarchy
12003	Theory ?0 is not in scope
12007	Theory ?0 does not have a type with name ?1
=ENDDOC
=DOC
val âtheory_namesá : unit -> string list;
=DESCRIBE
This returns the list of undeleted theories in the current hierarchy,
whether in scope or not.
=ENDDOC
I think this is worth making visible.
=DOC
val âget_ancestorsá : string -> string list;
=DESCRIBE
This returns all the ancestors of the named theory, including
the theory itself.
=FAILURE
12001	Theory ?0 is not present in the current hierarchy
12002	Theory ?0 has been deleted from the current hierarchy
=ENDDOC
This will be needed to implement other features in the abstract data type,
and could be useful to the user, though it has the feels of a 
derived function.
=DOC
val âget_descendantsá : string -> string list;
=DESCRIBE
This returns all the descendants of the named theory, including
itself.
=FAILURE
12001	Theory ?0 is not present in the current hierarchy
12002	Theory ?0 has been deleted from the current hierarchy
=ENDDOC
=SML
end(* signature of icl'InterfaceToTheorems *);
=TEX
\section{TEST POLICY}
The functions in this document should be tested as described in
\cite{DS/FMU/IED/PLN008},
using the tests in \cite{DS/FMU/IED/MDT012}.

=TEX
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}
