=IGN
********************************************************************************
dtd015.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
%  dtd015.doc  %Z% $Date: 2002/10/17 15:10:58 $ $Revision: 2.4 $ $RCSfile: dtd015.doc,v $
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{HOL PDS Lexical Analyser Detailed Design}  %% Mandatory field
\TPPref{DS/FMU/IED/DTD015}  %% Mandatory field
\def\SCCSversion{$Revision: 2.4 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2002/10/17 15:10:58 $%
}}
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{R.D.~Arthan & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{The detailed design of the lexical analyser for ICL HOL.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issues 1.1 to 1.9 ] Initial drafts.

\item[Issue 2.1, 5 September 1991 ] First approved version.

\item[Issue 2.2, \FormatDate{92/01/20} ] Updated to use new fonts.

\item[Issue \SCCSversion, \FormatDate{92/02/06} ] Added the constructor $Separator$ to the type $INPUT$.

%\item[Issue \SCCSversion, \FormatDate{$Date: 2002/10/17 15:10:58 $%
%} ]

\item[Issue 2.4] Copyright and banner updates for open source release.
\item[Issue 2.5] PPHol-specific updates for open source release
\end{description}
\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design
of the lexical analyser for ICL HOL.
The high level design for this material is given in \cite{DS/FMU/IED/HLD008}.
\subsection{Introduction}
The lexical analyser maps input from the reader/writer,
\cite{DS/FMU/IED/DTD005}, onto a data type $HOL\_TOKEN$, defined
in this document, and suitable for use by the parser, \cite{DS/FMU/IED/DTD019}.

For the convenience of others, e.g., programmers writing lexical analysers
for other languages, the character classification functions used in lexical
analysis are made visible.

\subsection{Purpose and Background}
See \cite{DS/FMU/IED/HLD008}.
\subsection{Dependencies}
This document depends on the implementation of HOL types and terms,
\cite{DS/FMU/IED/IMP003}.
\subsection{Possible Enhancements}
Performance improvements are doubtless possible in various places.
\subsection{Deficiencies}
None known.
\section{PREAMBLE}
=DOC
signature Lex = sig
=DESCRIBE
This is the signature of the structure which contains the lexical analyser
for ICL HOL.
=USES
For use by those who wish to extend the system to handle languages other
than HOL which have a similar lexical structure.
=ENDDOC
\section{DATA TYPES}
\subsection{Interface with Reader/Writer}

The reader/writer~\cite{DS/FMU/IED/DTD005} converts source text in the
HOL language into list of items of the following datatype.  The
conversion is a `macro processing' of the source text where the
reader/writer generates Standard~ML text that is compiled.  Since the
reader/writer is just generating text it does not use this declaration,
rather it has the names of these constructors as fixed strings that it
produces.  Thus changes to this datatype may require corresponding changes
to the reader/writer but the need for such changes would not be detected
during the compilation of the reader/writer.

=DOC
datatype ÛINPUTÝ	=	ÛTextÝ		of string
			|	ÛStringÝ		of string
			|	ÛCharÝ		of string
			|	ÛTypeÝ		of TYPE
			|	ÛTermÝ		of TERM
			|	ÛSeparatorÝ	of string
			|	ÛErrorÝ		of int;
=DESCRIBE
This is the data type of the input to the HOL lexical analyser.
=USES
For use by those who wish to extend the system to handle languages other
than HOL which have a similar lexical structure.
=ENDDOC
\subsection{Interface with Parser}

The following type is used to communicate syntactic status information.
=DOC
datatype ÛFIXITYÝ	=	ÛNonfixÝ
			|	ÛBinderÝ
			|	ÛInfixÝ		of int
			|	ÛPrefixÝ		of int
			|	ÛPostfixÝ	of int;
=DESCRIBE
This data type is used in the symbol table and elsewhere to give the
syntactic status of a name. $Nonfix$ means no special status.
The integer components are the precedences
for infix, prefix or postfix status.
=ENDDOC

\newpage

The following type, $HOL\_TOKEN$, represents all of the lexical elements
that make up the concrete syntax of the ICL~HOL language
of~\cite{DS/FMU/IED/DEF001} plus an end of input $HTEos$ element.

=DOC
datatype ÛHOL_TOKENÝ	=	ÛHTAqTmÝ	of TERM
				|	ÛHTAqTyÝ	of TYPE
				|	ÛHTNameÝ	of string
				|	ÛHTStringÝ	of string
				|	ÛHTCharÝ	of string
				|	ÛHTBinderÝ	of string
				|	ÛHTInOpÝ	of {name:string, is_type_op:bool,
								is_term_op:bool, prec : int}
				|	ÛHTPostOpÝ	of {name:string, prec : int}
				|	ÛHTPreOpÝ	of {name:string, prec : int}
				|	ÛHTAndÝ 
				|	ÛHTBlobÝ
				|	ÛHTColonÝ
				|	ÛHTElseÝ
				|	ÛHTIfÝ
				|	ÛHTInÝ
				|	ÛHTLbraceÝ
				|	ÛHTLbrackÝ
				|	ÛHTLetÝ
				|	ÛHTLsqbrackÝ
				|	ÛHTRbraceÝ
				|	ÛHTRbrackÝ
				|	ÛHTRsqbrackÝ
				|	ÛHTSemiÝ
				|	ÛHTThenÝ
				|	ÛHTVertÝ
				|	ÛHTEosÝ;
=DESCRIBE
This is the data type of the output from the HOL lexical analyser.
=USES
For use by those who wish to extend the system to handle languages other
than HOL which have a similar lexical structure.
=ENDDOC
\section{THE LEXICAL ANALYSER}
=TEX
=DOC
	val ÛlexÝ : (string list list) -> (string -> FIXITY) ->
				INPUT list -> HOL_TOKEN list
=DESCRIBE
This is the HOL lexical analyser.

The first parameter is the list of (exploded) strings which are to be
taken as terminator symbols.
Terminators are recognised by looking for the first match in the list, so
that if one terminator is a leading substring of another the longer one
must come first.
No punctuation symbol should appear in a terminator.
For HOL this parameter is always obtained by calling
the symbol table function $get\_terminators$, which maintains the list of
terminators sorted in order of decreasing length.

The second parameter is used to classify names as binder, infix, prefix, postfix or
nonfix.

The third parameter is the input to be lexically analysed.
=USES
For use by those who wish to extend the system to handle languages other
than HOL which have a similar lexical structure.
=FAILURE
15001	antiquotation not allowed after `$`
15002	`$` not allowed at end of quotation
15003	lexical analyser or reader/writer error detected (?0)
15004	ill-formed keyword symbol
15005	?0 is not a valid character literal (must contain exactly one character)
15006	error code ?0 reported by reader/writer
=FAILUREC
The last of these error messages occurs, e.g.,
when a keyword symbol has been entered incorrectly
and is preceded by a more comprehensive error
message from the reader/writer.
=ENDDOC
\section{CHARACTER CLASSIFICATION FUNCTIONS}
=DOC
	val is_alnum : string -> bool
	val is_copula : string -> bool
	val is_digit : string -> bool
	val is_macro : string -> bool
	val is_punctuation : string -> bool
	val is_space : string -> bool
	val is_symbolic : string -> bool
=DESCRIBE
These functions classify character strings according to their first character.
They all return false if the argument is an empty string. The characters
for which the various functions return true are shown in the following table.

\begin{center}
\begin{tabular}{|l|l|}\hline
is\_alnum & a letter or a number or the prime character `\verb"'"'\\\hline
is\_copula & an underscore or the subscription, or superscription characters \\\hline
is\_digit & a decimal digit \\\hline
is\_macro & the character `\verb"%"' which introduces preprocessor macros \\\hline
is\_punctuation & `\verb"("', `\verb")"', `\verb"{"', \verb"}"',
`\verb"["', `\verb"]"', `\verb":"', `\verb";"', `\verb","', `\verb"|"', `·' or `\verb"$"'\\\hline
is\_space & a formatting character, i.e., space, tab, newline etc.\\\hline
is\_symbolic & any character which is not does not fall into
any of the above classes \\\hline
\end{tabular}
\end{center}

=ENDDOC
=SML
end; (* of structure Lex *)
=TEX

\section{TEST POLICY}
The module tests for this module are to follow the guidelines
laid down in the quality plan~\cite{DS/FMU/IED/PLN008}.

\twocolumn[\section{INDEX}]
\small
\printindex

\end{document}


