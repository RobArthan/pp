%  dtd015.doc  %Z% $Date$ $Revision$ $RCSfile$
=TEX
% TQtemplate.tex
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{HOL PDS Lexical Analyser Detailed Design}  %% Mandatory field
\TPPref{DS/FMU/IED/DTD015}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{R.D.~Arthan & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{The detailed design of the lexical analyser for ICL HOL.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history}  % to get section number `0.3'
\begin{description}

\item[Issue 1.7 (10 July 1991)] First draft for comment.

\item[Issue \SCCSversion (\FormatDate{$Date$%
})]
	Add declaration of type $FIXITY$ and alter $lex$ to use it for token classification.

\end{description}
\subsection{Changes forecast}
The lexical analyser currently has as arguments
list of terminators and a classification function
which are dummies for symbol table interfaces. These will be removed
when the symbol table is in place.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design
of the lexical analyser for ICL HOL.
The high level design for this material is given in \cite{DS/FMU/IED/HLD008}.
\subsection{Introduction}
The lexical analyser maps input from the reader/writer,
\cite{DS/FMU/IED/DTD006}, onto a data type $HOL\_TOKEN$, defined
in this document, and suitable for use by the parser, \cite{DS/FMU/IED/DTD019}.

For the convenience of others, e.g., programmers writing lexical analysers
for other languages, the character classification functions used in lexical
analysis are made visible.

\subsection{Purpose and Background}
See \cite{DS/FMU/IED/HLD008}.
\subsection{Dependencies}
This document depends on the implementation of HOL types and terms,
\cite{DS/FMU/IED/IMP003}.
\subsection{Possible Enhancements}
Performance improvements are doubtless possible in various places.
\subsection{Deficiencies}
None known.
=TEX
\section{PREAMBLE}
=DOC
signature Lex = sig
=DESCRIBE
This is the signature of the structure which contains the lexical analyser
for ICL HOL.
=USES
For use by those who wish to extend the system to handle languages other
than HOL which have a similar lexical structure.
=ENDDOC
\section{DATA TYPES}
\subsection{Interface with Reader/Writer}
=SML
=DOC
datatype âINPUTá	= âTextá	of string
			| âStringá	of string
			| âChará	of string
			| âTypeá	of TYPE
			| âTermá	of TERM
			| âErrorá	of int;
=DESCRIBE
This is the data type of the input to the HOL lexical analyser.
=USES
For use by those who wish to extend the system to handle languages other
than HOL which have a similar lexical structure.
=ENDDOC
\subsection{Interface with Parser}

The following type is used to communicate syntactic status information.
=DOC
datatype FIXITY	=	Nonfix
			|	Binder
			|	Infix of int
			|	Prefix of int
			|	Postfix of int;
=DESCRIBE
This data type is used in the symbol table and elsewhere to give the
syntactic status of a name. $Nonfix$ means no special status.
The integer components are the precedences
for infix, prefix or postfix status.
=ENDDOC

=DOC
datatype âHOL_TOKENá	=	âHTAqTmá	of TERM
				|	âHTAqTyá of TYPE
				|	âHTNameá of string
				|	âHTStringá of string
				|	âHTChará of string
				|	âHTBinderá of string
				|	âHTInOpá of {name:string, is_type_op:bool,
							is_term_op:bool, prec : int}
				|	âHTPostOpá of {name:string, prec : int}
				|	âHTPreOpá of {name:string, prec : int}
				|	âHTAndá 
				|	âHTBlobá
				|	âHTColoná
				|	âHTElseá
				|	âHTIfá
				|	âHTIná
				|	âHTLbraceá
				|	âHTLbracká
				|	âHTLetá
				|	âHTLsqbracká
				|	âHTRbraceá
				|	âHTRbracká
				|	âHTRsqbracká
				|	âHTSemiá
				|	âHTThená
				|	âHTVertá
				|	âHTEosá;
=DESCRIBE
This is the data type of the output from the HOL lexical analyser.
=USES
For use by those who wish to extend the system to handle languages other
than HOL which have a similar lexical structure.
=ENDDOC
\section{THE LEXICAL ANALYSER}
=TEX
=DOC
	val âlexá : (string list list) -> (string -> FIXITY) ->
				INPUT list -> HOL_TOKEN list
=DESCRIBE
This is the HOL lexical analyser.

The first parameter is the list of (exploded) strings which are to be
taken as terminator symbols.
Terminators are recognised by looking for the first match in the list, so
that if one terminator is a leading substring of another the longer one
must come first.
No punctuation symbol should appear in a terminator.
For HOL this parameter is always obtained by calling
the symbol table function $get\_terminators$, which maintains the list of
terminators sorted in order of decreasing length.

The second parameter is used to classify names as binder, infix, prefix, postfix or
nonfix.

The third parameter is the input to be lexically analysed.
=USES
For use by those who wish to extend the system to handle languages other
than HOL which have a similar lexical structure.
=FAILURE
15001	antiquotation not allowed after `$`
15002	`$` not allowed at end of quotation
15003	lexical analyser or reader/writer error detected (?0)
15004	ill-formed keyword symbol
15005	?0 is not a valid character literal (must contain exactly one character)
15006	Error code ?0 reported by reader/writer
=FAILUREC
The last of these error messages occurs, e.g.,
when a keyword symbol has been entered incorrectly
and is preceded by a more comprehensive error
message from the reader/writer.
=ENDDOC
\section{CHARACTER CLASSIFICATION FUNCTIONS}
=DOC
	val is_alnum : string -> bool
	val is_copula : string -> bool
	val is_digit : string -> bool
	val is_macro : string -> bool
	val is_punctuation : string -> bool
	val is_space : string -> bool
	val is_symbolic : string -> bool
==DESCRIBE
These functions classify character strings according to their first character.
They all return false if the argument is an empty string. The characters
for which the various functions return true are shown in the following table.

\begin{tabular}
is_alnum & a letter or a number or the prime character `\verb"'"'\\\hline
is_copula & an underscore or the subscription, or superscription characters \\\hline
is_digit & a decimal digit \\\hline
is_macro & the character `\verb"%"' which introduces preprocessor macros \\\hline
is_punctuation & `\verb"("', `\verb")"', `\verb"{"', \verb"}"',
`\verb"["', `\verb"]"', `\verb":"', `\verb";"', `\verb","', `\verb"|"', `Ž' or `\verb"$"'\\\hline
is_space & a formatting character, i.e., space, tab, newline etc.\\\hline
is_symbolic & any character which is not does not fall into
any of the above classes \\hline
=ENDDOC
=SML
end; (* of structure Lex *)
=TEX
\twocolumn[\section{INDEX}]
\small
\printindex

\end{document}
