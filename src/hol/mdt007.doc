=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{IED 1563}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Module Tests for the Derived Rules of Inference}  %% Mandatory field
\def\TPPheadtitle{Module Tests for the erived Rules of Inference}
\TPPref{DS/FMU/IED/MDT007}  %% Mandatory field
\def\SCCSversion{$Revision$ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{ML Literate Script}
\TPPkeywords{}
%\TPPauthor{K.Blackburn & WIN01}  %% Mandatory field
\TPPauthors{K.Blackburn & WIN01\\D.J.~King & WIN01}
\TPPauthorisation{R.D.Arthan & Project Manager}
\TPPabstract{A set of module tests are given for the 
the abstract data type $THM$.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{Document control}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history} 
\begin{description}
\item [Issue 1.1]
First draft version.
Primitive and built-in inference rules, and conversionals
all module tested.
\item [Issue 1.2]
Corrected test ``simple$\_$abs$\_$rule 6025'',
removed printing utilities (as unused),
and changed test theory names used.
\item [Issue 1.3]
Added a test for $simple\_list\_É\_elim$ with duplicate quantifiers.
\item [1.4, 1.5, 1.6]
Corrected some tests.
Issue 1.6 provides full coverage of functions and errors
noted in issue 1.13 of \cite{DS/FMU/IED/DTD007}.
\item [1.7]
Reacted to errors 6036, 6065, 6066 now coming from $error$.
Changed $\_TRAVERSE\_C$ to $\_MAP\_C$.
Changed error tests of $?\_MAP\_C$.
The prefix $simple$ is moved to being the first prefix, bar $icl'$.
Order of $all\_É\_intro$ quantifiers checked.
\end{description}
\subsection{Changes forecast}
\section{GENERAL}
\subsection{Scope}
This document contains the module testing of the Derived Rules of Inference, required by ???.
The design is in \cite{DS/FMU/IED/DTD007}
and it is
implemented in \cite{DS/FMU/IED/IMP007}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains the module testing of the material given a design in \cite{DS/FMU/IED/DTD007},
following the test policy given in that document and the general policy given in \cite{DS/FMU/IED/PLN008}.

\subsubsection{Dependencies}
This document is derived from the detailed design in \cite{DS/FMU/IED/DTD007},
and is further influenced by the implementation, in  \cite{DS/FMU/IED/IMP007}.
\subsubsection{Deficiencies}
The coverage of the tests, as called for by the test specification, may currently be incomplete.
\section{INITIALISATION}
Get a new theory to work in:
=SML
val start_theory = get_current_theory_name();
new_theory "test_mdt007";
=TEX
Initialise the test package:
=SML
usefile "dtd013.sml";
usefile "imp013.sml";
init_mt_results();
=TEX
\section{VALUE BINDINGS}
=SML
val v1 = mk_var("v1", BOOL);
val v2 = mk_var("v2", BOOL);
val tv1 = mk_vartype "'1";
val tv2 = mk_vartype "'2";
val tva = mk_vartype "'a";
val N0 = mk_Ü 0;
val N1 = mk_Ü 1;
val N2 = mk_Ü 2;
=TEX
Test scopes:
=SML
val Deleted = new_const ("Deleted",BOOL);
val const_deleted_thm = asm_rule ªp = qº;
val ignore_warnings = set_flag("ignore_warnings",true); 
val side_effect = delete_const Deleted;
val side_effect = set_flag("ignore_warnings",ignore_warnings); 
val side_effect = new_theory "out_of_scope_mdt007";
val out_of_scope_thm = asm_rule ªp = qº;
val side_effect = open_theory "test_mdt007";
val side_effect = new_theory "deleted_theory_mdt007";
val del_theory_index = (string_of_int (icl'Kernel.icl'get_current_theory_name()));

val deleted_thm = asm_rule ªp = qº;
val side_effect = open_theory "test_mdt007";
val side_effect = delete_theory "deleted_theory_mdt007";

val p_eq_q_thm = asm_rule ªp = qº;
val pq_thm = asm_rule ªÑ p é qº;
val pq_ax = new_axiom("pq_ax", ªÑ p é qº);
val t_eq_f = asm_rule ªT = Fº;
val q_eq_F = new_axiom("q_eq_F",ªq = Fº);
val T = ªTº;
val F = ªFº;
val so_isso_axiom = new_axiom("so_isso_axiom", ªÑ So IsSo é So ä IsSoº);
val so_isso_def = new_specification(["So","IsSo"],2,so_isso_axiom);
val so_axiom = new_axiom("so_axiom",ªSoº);
val Ü = new_type("Ü",0) handle _ => Ü;
val tDiv = mk_const("Div",mk_fun(Ü,mk_fun(Ü,Ü)));
val tMod = mk_const("Mod",mk_fun(Ü,mk_fun(Ü,Ü)));
val Suc = new_const("Suc",mk_fun(Ü, Ü))
	handle _ => mk_const("Suc",mk_fun(Ü, Ü));

val strip_Ä_T_conv: CONV = ( fn (tm : TERM) =>
	if is_Ä tm
	then let val (p,q) = dest_Ä tm
		in
		if q = T
		then asm_rule(mk_eq (tm, p))
		else fail_with_conv "strip_Ä_T_conv" tm
	end
	else fail_with_conv "strip_Ä_T_conv" tm
);

val sample = ª(ç f x y é (f x Ä y) Ä (ç p é p) q)(ç x é å x) T ((ç p é p) q)º;
=TEX
\section{THE TESTS - PRIMITVES AND BUILT-IN}
The tests proper:
\subsection{subst\_rule}
=SML
store_mt_results mt_run_fail[
	("subst_rule 6001 1",
	subst_rule [] ªÑ p é q1º,
	pq_thm,
	gen_fail_msg "subst_rule" 6001 []),
	("subst_rule 6001 2",
	subst_rule [(t_eq_f, ªq:BOOLº)] ªT = qº,
	t_eq_f,
	gen_fail_msg "subst_rule" 6001 [])
	];
store_mt_results mt_run_error [
	("subst_rule 6036 1",
	subst_rule [] ªÑ p é qº,
	deleted_thm,
	gen_fail_msg "icl'subst_rule" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("subst_rule 6065 1",
	subst_rule [] ªÑ p é qº,
	const_deleted_thm,
	gen_fail_msg "icl'subst_rule" 6065 ["test_mdt007"]),
	("subst_rule 6066 1",
	subst_rule [] ªÑ p é qº,
	out_of_scope_thm,
	gen_fail_msg "icl'subst_rule" 6066 ["out_of_scope_mdt007"]),
	("subst_rule 6036 2",
	subst_rule [(deleted_thm,ªq :'aº)] ªT = Fº,
	t_eq_f,
	gen_fail_msg "icl'subst_rule" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("subst_rule 6065 2",
	subst_rule [(const_deleted_thm,ªq :'aº)] ªT = Fº,
	t_eq_f,
	gen_fail_msg "icl'subst_rule" 6065 ["test_mdt007"]),
	("subst_rule 6066 2",
	subst_rule [(out_of_scope_thm,ªq :'aº)] ªT = Fº,
	t_eq_f,
	gen_fail_msg "icl'subst_rule" 6066 ["out_of_scope_mdt007"])
	];

store_mt_results mt_run_fail [
	("subst_rule 6002",
	subst_rule,
	[(asm_rule T, ªp:BOOLº)],
	gen_fail_msg "subst_rule" 6002 []),
	("subst_rule 6003",
	subst_rule,
	[(t_def, ªTº)],
	gen_fail_msg "subst_rule" 6003 []),
	("subst_rule 6029",
	subst_rule,
	[(t_def, ªq : Üº)],
	gen_fail_msg "subst_rule" 6029 ["q"])
	];

store_mt_results mt_run [("subst_rule_1",
	dest_thm o subst_rule [] ªÑ p é qº,
	pq_thm,
	dest_thm pq_thm),
	("subst_rule_2",
	dest_thm o subst_rule [] ªÑ p1 é qº,
	pq_thm,
	([ªÑ p é qº],ªÑ p1 é qº)),
	("subst_rule_3",
	dest_thm o subst_rule [(t_eq_f, ªq : BOOLº)] ªq = Fº,
	t_eq_f,
	([ªT = Fº],ªF = Fº)),
	("subst_rule_4",
	dest_thm o subst_rule [(t_def, ªq : BOOLº)] ªq = Fº,
	t_eq_f,
	([ªT = Fº],ª((ç x:BOOLéx)=(ç x éx)) = Fº))];

=TEX
\subsection{simple\_abs\_rule}
=SML
store_mt_results mt_run [("simple_abs_rule",
	dest_thm o simple_abs_rule ªq : BOOLº,
	q_eq_F,
	([],ª(ç q:BOOL é q) = (ç q é F)º))
	];

store_mt_results mt_run_fail[
	("simple_abs_rule 6004",
	simple_abs_rule T,
	q_eq_F,
	gen_fail_msg "simple_abs_rule" 6004 []),
	("simple_abs_rule 6005",
	simple_abs_rule ªq : BOOLº,
	asm_rule ªq = Fº,
	gen_fail_msg "simple_abs_rule" 6005 ["q"]),
	("simple_abs_rule 6025",
	simple_abs_rule ªq : BOOLº,
	pq_ax,
	gen_fail_msg "simple_abs_rule" 6025 [])
	];
store_mt_results mt_run_error [
	("simple_abs_rule 6036",
	simple_abs_rule ªq : BOOLº,
	deleted_thm,
	gen_fail_msg "icl'simple_abs_rule" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("simple_abs_rule 6065",
	simple_abs_rule ªq : BOOLº,
	const_deleted_thm,
	gen_fail_msg "icl'simple_abs_rule" 6065 ["test_mdt007"]),
	("simple_abs_rule 6066",
	simple_abs_rule ªq : BOOLº,
	out_of_scope_thm,
	gen_fail_msg "icl'simple_abs_rule" 6066 ["out_of_scope_mdt007"])
	];
=TEX
\subsection{inst\_type\_rule}
So far unconverted tests:
=SML
store_mt_results mt_run [("inst_type_rule_1",
	dest_thm o inst_type_rule [(BOOL, tva)],
	pq_ax,
	([],ªÑ p : BOOL é qº)),
	("inst_type_rule_2",
	dest_thm o inst_type_rule [(BOOL, tv1)],
	pq_ax,
	([],ªÑ p : 'a é qº))
	];

store_mt_results mt_run_fail [
	("inst_type_rule 6006",
	inst_type_rule [(BOOL, tva)],
	(asm_rule ªv = vº),
	gen_fail_msg "inst_type_rule" 6006 ["'a"]),
	("inst_type_rule 6007",
	inst_type_rule [(BOOL, BOOL)],
	pq_ax,
	gen_fail_msg "inst_type_rule" 6007 [])
	];
store_mt_results mt_run_error [
	("inst_type_rule 6036",
	inst_type_rule [(BOOL, tva)],
	deleted_thm,
	gen_fail_msg "icl'inst_type_rule" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("inst_type_rule 6065",
	inst_type_rule [(BOOL, tva)],
	const_deleted_thm,
	gen_fail_msg "icl'inst_type_rule" 6065 ["test_mdt007"]),
	("inst_type_rule 6066",
	inst_type_rule [(BOOL, tva)],
	out_of_scope_thm,
	gen_fail_msg "icl'inst_type_rule" 6066 ["out_of_scope_mdt007"])
];
=TEX
\subsection{ä\_intro}
=SML
store_mt_results mt_run [
	("ä_intro 1",
	dest_thm o ä_intro v1,
	pq_ax,
	([],ªv1 ä Ñ p é qº)),
	("ä_intro 2",
	dest_thm o ä_intro v1,
	asm_rule v1,
	([],ªv1 ä v1º))
	];

store_mt_results mt_run_fail [
	("ä_intro 6009",
	ä_intro N1,
	pq_ax,
	gen_fail_msg "ä_intro" 6009 [])
	];
store_mt_results mt_run_error [
	("ä_intro 6036",
	ä_intro v1,
	deleted_thm,
	gen_fail_msg "icl'ä_intro" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("ä_intro 6065",
	ä_intro v1,
	const_deleted_thm,
	gen_fail_msg "icl'ä_intro" 6065 ["test_mdt007"]),
	("ä_intro 6066",
	ä_intro v1,
	out_of_scope_thm,
	gen_fail_msg "icl'ä_intro" 6066 ["out_of_scope_mdt007"])
	];
=TEX
\subsection{ä\_elim}
=SML
store_mt_results mt_run [("ä_elim_1",
	dest_thm o ä_elim  so_isso_def,
	so_axiom,
	([],ªIsSoº))
	];

store_mt_results mt_run [("ä_mp_rule",
	dest_thm o ä_mp_rule  so_isso_def,
	so_axiom,
	([],ªIsSoº))
	];

store_mt_results mt_run_fail [
	("ä_elim 6010",
	ä_elim so_isso_axiom,
	so_axiom,
	gen_fail_msg "ä_elim" 6010 []),
	("ä_elim 6011",
	ä_elim so_isso_def,
	so_isso_def,
	gen_fail_msg "ä_elim" 6011 [])
	];
store_mt_results mt_run_error [
	("ä_elim 6036 1",
	ä_elim so_isso_def,
	deleted_thm,
	gen_fail_msg "icl'ä_elim" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("ä_elim 6065 1",
	ä_elim so_isso_def,
	const_deleted_thm,
	gen_fail_msg "icl'ä_elim" 6065 ["test_mdt007"]),
	("ä_elim 6066 1",
	ä_elim so_isso_def,
	out_of_scope_thm,
	gen_fail_msg "icl'ä_elim" 6066 ["out_of_scope_mdt007"]),
	("ä_elim 6036 2",
	ä_elim deleted_thm,
	so_axiom,
	gen_fail_msg "icl'ä_elim" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("ä_elim 6065 2",
	ä_elim const_deleted_thm,
	so_axiom,
	gen_fail_msg "icl'ä_elim" 6065 ["test_mdt007"]),
	("ä_elim 6066 2",
	ä_elim out_of_scope_thm,
	so_axiom,
	gen_fail_msg "icl'ä_elim" 6066 ["out_of_scope_mdt007"])
	];
=TEX
\subsection{asm\_rule}
=SML
store_mt_results mt_run [
	("asm_rule 1",
	dest_thm o asm_rule,
	mk_const("rubbish",BOOL),
	([mk_const("rubbish",BOOL)],mk_const("rubbish",BOOL)))
	];

store_mt_results mt_run_fail [
	("asm_rule 6009",
	asm_rule,
	N0,
	gen_fail_msg "asm_rule" 6009 [])
	];
=TEX
\subsection{refl\_conv}
=SML
store_mt_results mt_run [
	("refl_conv 1",
	dest_thm o refl_conv,
	mk_const("rubbish",BOOL),
	([],mk_eq(mk_const("rubbish",BOOL), mk_const("rubbish",BOOL)))),
	("refl_conv 2",
	dest_thm o refl_conv,
	mk_const("rubbish",Ü),
	([],mk_eq(mk_const("rubbish",Ü), mk_const("rubbish",Ü))))
	];
=TEX
\subsection{simple\_$\beta$\_conv}
=SML
store_mt_results mt_run [
	("simple_%beta%_conv 1",
	dest_thm o simple_%beta%_conv,
	ª(ç p : 'a é f p) qº,
	([],ª((ç p : 'a é f p) q) = f qº)),
	("simple_%beta%_conv 2",
	dest_thm o simple_%beta%_conv,
	ª(ç p q: '1 é f p q) qº,
	([],ª((ç p q: '1 é f p q) q) = (ç q': '1 é f q q')º))
	];

store_mt_results mt_run_fail [
	("simple_%beta%_conv 6012",
	simple_%beta%_conv,
	ª(ç p q: '1 é f p q)º,
	gen_fail_msg "simple_%beta%_conv" 6012 [])
	];
=TEX
\subsection{suc\_conv}
=SML
store_mt_results mt_run [
	("suc_conv 1",
	dest_thm o suc_conv,
	ª3º,
	([],ª3 = Suc 2º))
	];

store_mt_results mt_run_fail [
	("suc_conv 6013",
	suc_conv,
	mk_const("Number",Ü),
	gen_fail_msg "suc_conv" 6013 []),
	("suc_conv 7100",
	suc_conv,
	ª0º,
	gen_fail_msg "suc_conv" 7100 [])
	];
=TEX
\subsection{string\_conv}
=SML
store_mt_results mt_run [
	("string_conv_1",
	dest_thm o string_conv,
	ª"abc"º,
	([],ª"abc" = ª%down%SML mk_const("Cons",
		mk_fun(CHAR,mk_fun(STRING,STRING)))º 
		ª%down%SML mk_char "a"º "bc"º)),
	("string_conv_2",
	dest_thm o string_conv,
	ª""º,
	([],ª"" = ª%down%SML mk_const("Nil",STRING)ºº))
	];

store_mt_results mt_run_fail [
	("string_conv 6014",
	string_conv,
	ª0º,
	gen_fail_msg "string_conv" 6014 [])
	];
=TEX
\subsection{char\_conv}
=SML
store_mt_results mt_run [
	("char_conv_1",
	dest_thm o char_conv,
	ª'aº,
	([],ª'a = ª%down%SML mk_const("AbsChar",mk_fun(Ü,CHAR))º 97º)),
	("char_conv_2",
	dest_thm o char_conv,
	mk_char "Ü",
	([],ªª%down%SML mk_char "Ü"º = 
		ª%down%SML mk_const("AbsChar",mk_fun(Ü,CHAR))º 134º))
	];

store_mt_results mt_run_fail [
	("char_conv 6015",
	char_conv,
	mk_const("he",CHAR),
	gen_fail_msg "char_conv" 6015 [])
	];

=TEX
\subsection{eq\_sym\_rule}
=SML
store_mt_results mt_run[
	("eq_sym_rule_1",
	dest_thm o eq_sym_rule,
	asm_ruleª0=1º,
	([ª0=1º],ª1=0º)),
	("eq_sym_rule_2",
	dest_thm o eq_sym_rule,
	asm_ruleªT=Fº,
	([ªT=Fº],ªF=Tº))
	];

store_mt_results mt_run_fail[
	("eq_sym_rule 6025",
	eq_sym_rule,
	pq_ax,
	gen_fail_msg "eq_sym_rule" 6025 [])
	];
store_mt_results mt_run_error [
	("eq_sym_rule 6036",
	eq_sym_rule,
	deleted_thm,
	gen_fail_msg "icl'eq_sym_rule" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("eq_sym_rule 6065",
	eq_sym_rule,
	const_deleted_thm,
	gen_fail_msg "icl'eq_sym_rule" 6065 ["test_mdt007"]),
	("eq_sym_rule 6066",
	eq_sym_rule,
	out_of_scope_thm,
	gen_fail_msg "icl'eq_sym_rule" 6066 ["out_of_scope_mdt007"])
	];
=TEX
\subsection{simple\_list\_É\_elim}
=SML
store_mt_results mt_run[
	("simple_list_É_elim_1",
	dest_thm o simple_list_É_elim [F],
	asm_rule ªÉ v1 é v1 ä Tº,
	([ªÉ v1 é v1 ä Tº],ªF ä Tº)),
	("simple_list_É_elim_2",
	dest_thm o simple_list_É_elim [ªv2 : BOOLº],
	asm_ruleªÉ v1 é (ç v2: BOOL é v1) Tº,
	([ªÉ v1 é (ç v2: BOOL é v1) Tº],ª(ç v2': BOOL é v2) T : BOOLº)),
	("simple_list_É_elim_3",
	dest_thm o simple_list_É_elim [ªv2 : BOOLº,ªv2 : BOOLº],
	asm_ruleªÉ v1 v2 é v1 Ä v2º,
	([ªÉ v1 v2 é v1 Ä v2º],ªv2 Ä v2º)),
	("simple_list_É_elim_4",
	dest_thm o simple_list_É_elim [ªv1 : BOOLº,ªv1 : BOOLº],
	asm_ruleªÉ v1 v2 é v1 Ä v2º,
	([ªÉ v1 v2 é v1 Ä v2º],ªv1 Ä v1º)),
	("simple_list_É_elim_5",
	dest_thm o simple_list_É_elim [mk_t,mk_f],
	asm_ruleªÉ x x : BOOL é xº,
	([ªÉ x x : BOOL é xº],ªFº))
	];

store_mt_results mt_run_fail[
	("simple_list_É_elim 6018",
	simple_list_É_elim [T],
	pq_ax,
	gen_fail_msg "simple_list_É_elim" 6018 ["1"]),
	("simple_list_É_elim 6019",
	simple_list_É_elim [N0],
	asm_ruleªÉ v1 é v1 ä Tº,
	gen_fail_msg "simple_list_É_elim" 6019 ["v1 "])
	];
store_mt_results mt_run_error [
	("simple_list_É_elim 6036",
	simple_list_É_elim [v1],
	deleted_thm,
	gen_fail_msg "icl'simple_list_É_elim" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("simple_list_É_elim 6065",
	simple_list_É_elim [v1],
	const_deleted_thm,
	gen_fail_msg "icl'simple_list_É_elim" 6065 ["test_mdt007"]),
	("simple_list_É_elim 6066",
	simple_list_É_elim [v1],
	out_of_scope_thm,
	gen_fail_msg "icl'simple_list_É_elim" 6066 ["out_of_scope_mdt007"])
	];
=TEX
\subsection{simple\_É\_elim}
=SML
store_mt_results mt_run[
	("simple_É_elim_1",
	dest_thm o simple_É_elim F,
	asm_rule ªÉ v1 é v1 ä Tº,
	([ªÉ v1 é v1 ä Tº],ªF ä Tº)),
	("simple_É_elim_2",
	dest_thm o simple_É_elim ªv2 : BOOLº,
	asm_ruleªÉ v1 é (ç v2: BOOL é v1) Tº,
	([ªÉ v1 é (ç v2: BOOL é v1) Tº],ª(ç v2': BOOL é v2) T : BOOLº))
	];

store_mt_results mt_run_fail[
	("simple_É_elim 7039",
	simple_É_elim T,
	pq_ax,
	gen_fail_msg "simple_É_elim" 7039 []),
	("simple_É_elim 7046",
	simple_É_elim N0,
	asm_ruleªÉ v1 é v1 ä Tº,
	gen_fail_msg "simple_É_elim" 7046 ["v1"])
	];
=TEX
\subsection{eq\_trans\_rule}
=SML
store_mt_results mt_run[
	("eq_trans_rule_1",
	dest_thm o eq_trans_rule (asm_rule ª0=1º),
	asm_rule ª1 = 2º,
	([ª0=1º, ª1 = 2º],ª0 = 2º))
	];

store_mt_results mt_run_fail[
	("eq_trans_rule 6020",
	eq_trans_rule pq_ax,
	asm_ruleª1=2º,
	gen_fail_msg "eq_trans_rule" 6020 []),
	("eq_trans_rule 6021",
	eq_trans_rule (asm_ruleª1=2º),
	pq_ax,
	gen_fail_msg "eq_trans_rule" 6021 []),
	("eq_trans_rule 6022 a",
	eq_trans_rule (asm_rule ª0=1º),
	p_eq_q_thm,
	gen_fail_msg "eq_trans_rule" 6022 []),
	("eq_trans_rule 6022 b",
	eq_trans_rule (asm_rule ª0=1º),
	asm_rule ª0 = 2º,
	gen_fail_msg "eq_trans_rule" 6022 [])
	];
store_mt_results mt_run_error [
	("eq_trans_rule 6036 a",
	eq_trans_rule so_isso_axiom,
	deleted_thm,
	gen_fail_msg "icl'eq_trans_rule" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("eq_trans_rule 6065 a",
	eq_trans_rule so_isso_axiom,
	const_deleted_thm,
	gen_fail_msg "icl'eq_trans_rule" 6065 ["test_mdt007"]),
	("eq_trans_rule 6066 a",
	eq_trans_rule so_isso_axiom,
	out_of_scope_thm,
	gen_fail_msg "icl'eq_trans_rule" 6066 ["out_of_scope_mdt007"]),
	("eq_trans_rule 6036 b",
	eq_trans_rule deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'eq_trans_rule" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("eq_trans_rule 6065 b",
	eq_trans_rule const_deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'eq_trans_rule" 6065 ["test_mdt007"]),
	("eq_trans_rule 6066 b",
	eq_trans_rule out_of_scope_thm,
	so_isso_axiom,
	gen_fail_msg "icl'eq_trans_rule" 6066 ["out_of_scope_mdt007"])
	];
=TEX
\subsection{mk\_comb\_rule}
=SML
store_mt_results mt_run[
	("mk_comb_rule_1",
	dest_thm o mk_comb_rule (asm_ruleª(f : Ü ã Ü) = gº),
	asm_rule ª1 = 2º,
	([ª(f : Ü ã Ü) = gº,ª1 = 2º],ª(f 1 : Ü) = g 2º))
	];

store_mt_results mt_run_fail[
	("mk_comb_rule 6020",
	mk_comb_rule pq_ax,
	asm_rule ª1 = 2º,
	gen_fail_msg "mk_comb_rule" 6020 []),
	("mk_comb_rule 6021",
	mk_comb_rule (asm_rule ª1=2º),
	pq_ax,
	gen_fail_msg "mk_comb_rule" 6021 []),
	("mk_comb_rule 6023 a",
	mk_comb_rule (refl_conv T ),
	(asm_rule ª1=2º),
	gen_fail_msg "mk_comb_rule" 6023 []),
	("mk_comb_rule 6023 b",
	mk_comb_rule (asm_rule ª0=1º),
	(asm_rule ª1=2º),
	gen_fail_msg "mk_comb_rule" 6023 [])
	];
store_mt_results mt_run_error [
	("mk_comb_rule 6036 a",
	mk_comb_rule so_isso_axiom,
	deleted_thm,
	gen_fail_msg "icl'mk_comb_rule" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("mk_comb_rule 6065 a",
	mk_comb_rule so_isso_axiom,
	const_deleted_thm,
	gen_fail_msg "icl'mk_comb_rule" 6065 ["test_mdt007"]),
	("mk_comb_rule 6066 a",
	mk_comb_rule so_isso_axiom,
	out_of_scope_thm,
	gen_fail_msg "icl'mk_comb_rule" 6066 ["out_of_scope_mdt007"]),
	("mk_comb_rule 6036 b",
	mk_comb_rule deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'mk_comb_rule" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("mk_comb_rule 6065 b",
	mk_comb_rule const_deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'mk_comb_rule" 6065 ["test_mdt007"]),
	("mk_comb_rule 6066 b",
	mk_comb_rule out_of_scope_thm,
	so_isso_axiom,
	gen_fail_msg "icl'mk_comb_rule" 6066 ["out_of_scope_mdt007"])
	];
=TEX
\subsection{Ç\_mp\_rule}
=SML
store_mt_results mt_run[
	("Ç_mp_rule_1",
	dest_thm o Ç_mp_rule t_eq_f,
	asm_rule ªTº,
	([ªT = Fº,ªTº],ªFº))
	];

store_mt_results mt_run_fail[
	("Ç_mp_rule 6024",
	Ç_mp_rule t_eq_f,
	(asm_rule ªFº),
	gen_fail_msg "Ç_mp_rule" 6024 []),
	("Ç_mp_rule 6030",
	Ç_mp_rule (asm_rule ªTº),
	t_eq_f,
	gen_fail_msg "Ç_mp_rule" 6030 [])
	];
store_mt_results mt_run_error [
	("Ç_mp_rule 6036 a",
	Ç_mp_rule so_isso_axiom,
	deleted_thm,
	gen_fail_msg "icl'Ç_mp_rule" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("Ç_mp_rule 6065 a",
	Ç_mp_rule so_isso_axiom,
	const_deleted_thm,
	gen_fail_msg "icl'Ç_mp_rule" 6065 ["test_mdt007"]),
	("Ç_mp_rule 6066 a",
	Ç_mp_rule so_isso_axiom,
	out_of_scope_thm,
	gen_fail_msg "icl'Ç_mp_rule" 6066 ["out_of_scope_mdt007"]),
	("Ç_mp_rule 6036 b",
	Ç_mp_rule deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'Ç_mp_rule" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("Ç_mp_rule 6065 b",
	Ç_mp_rule const_deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'Ç_mp_rule" 6065 ["test_mdt007"]),
	("Ç_mp_rule 6066 b",
	Ç_mp_rule out_of_scope_thm,
	so_isso_axiom,
	gen_fail_msg "icl'Ç_mp_rule" 6066 ["out_of_scope_mdt007"])
	];

=TEX
\subsection{simple\_É\_intro}
=SML
store_mt_results mt_run[
	("simple_É_intro_1",
	dest_thm o simple_É_intro v1,
	t_eq_f,
	([ªT = Fº],ªÉ v1 : BOOL é T = Fº)),
	("simple_É_intro_1",
	dest_thm o simple_É_intro ªq : BOOLº,
	pq_ax,
	([],ªÉ q : BOOL é Ñ p : 'a é qº))
	];

store_mt_results mt_run_fail[
	("simple_É_intro 6004",
	simple_É_intro T,
	t_eq_f,
	gen_fail_msg "simple_É_intro" 6004 []),
	("simple_É_intro 6005",
	simple_É_intro v1,
	(asm_rule v1),
	gen_fail_msg "simple_É_intro" 6005 ["v1"])
	];
store_mt_results mt_run_error [
	("simple_É_intro 6036",
	simple_É_intro v1,
	deleted_thm,
	gen_fail_msg "icl'simple_É_intro" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("simple_É_intro 6065",
	simple_É_intro v1,
	const_deleted_thm,
	gen_fail_msg "icl'simple_É_intro" 6065 ["test_mdt007"]),
	("simple_É_intro 6066",
	simple_É_intro v1,
	out_of_scope_thm,
	gen_fail_msg "icl'simple_É_intro" 6066 ["out_of_scope_mdt007"])	];

=TEX
\subsection{inst\_term\_rule}
=SML
store_mt_results mt_run[
	("inst_term_rule_1",
	dest_thm o inst_term_rule [(T,v1),(F,v2)],
	simple_É_elim v2 
		(simple_É_elim v1 (
		(asm_rule ªÉ v1 v2 : BOOL é v1 = v2º))),
	([ªÉ v1 v2 : BOOL é v1 = v2º],ªT = Fº)),
	("inst_term_rule_2",
	dest_thm o inst_term_rule [(v2,v1),(v1,v2)],
	simple_É_elim v2 
		(simple_É_elim v1 (
		(asm_rule ªÉ v1 v2 : BOOL é v1 = v2º))),
	([ªÉ v1 v2 : BOOL é v1 = v2º],ª(v2:BOOL) = v1º)),
	("inst_term_rule_3",
	dest_thm o inst_term_rule [],
	simple_É_elim v2 
		(simple_É_elim v1 (
		(asm_rule ªÉ v1 v2 : BOOL é v1 = v2º))),
	([ªÉ v1 v2 : BOOL é v1 = v2º],ª(v1:BOOL) = v2º))
	];

store_mt_results mt_run_fail[
	("inst_term_rule 6026",
	inst_term_rule [(v2,T)],
	(asm_rule v1),
	gen_fail_msg "inst_term_rule" 6026 []),
	("inst_term_rule 6027",
	inst_term_rule [(N0,v1)],
	(asm_rule v1),
	gen_fail_msg "inst_term_rule" 6027 ["v1"]),
	("inst_term_rule 6028",
	inst_term_rule [(v2,v1)],
	(asm_rule v1),
	gen_fail_msg "inst_term_rule" 6028 ["v1"])
	];
store_mt_results mt_run_error [
	("inst_term_rule 6036",
	inst_term_rule [],
	deleted_thm,
	gen_fail_msg "icl'inst_term_rule" 6036 ["deleted_theory_mdt007",del_theory_index]),
	("inst_term_rule 6065",
	inst_term_rule [],
	const_deleted_thm,
	gen_fail_msg "icl'inst_term_rule" 6065 ["test_mdt007"]),
	("inst_term_rule 6066",
	inst_term_rule [],
	out_of_scope_thm,
	gen_fail_msg "icl'inst_term_rule" 6066 ["out_of_scope_mdt007"])	];
=TEX
\subsection{div2\_conv}
=SML
store_mt_results mt_run [
	("div2_conv 1",
	dest_thm o div2_conv,
	list_mk_comb(tDiv,[ª7º,ª2º]),
	([],mk_eq(list_mk_comb(tDiv,[ª7º,ª2º]),ª3º))),
	("div2_conv 2",
	dest_thm o div2_conv,
	list_mk_comb(tDiv,[ª0º,ª2º]),
	([],mk_eq(list_mk_comb(tDiv,[ª0º,ª2º]),ª0º)))
	];

store_mt_results mt_run_fail [
	("div2_conv 6085 a",
	div2_conv,
	list_mk_comb(tDiv,[N0,N1]),
	gen_fail_msg "div2_conv" 6085 []),
	("div2_conv 6085 b",
	div2_conv,
	list_mk_comb(tDiv,[ªn : Üº,N2]),
	gen_fail_msg "div2_conv" 6085 [])
	];
=TEX
\subsection{mod2\_conv}
=SML
store_mt_results mt_run [
	("mod2_conv 1",
	dest_thm o mod2_conv,
	list_mk_comb(tMod,[ª7º,ª2º]),
	([],mk_eq(list_mk_comb(tMod,[ª7º,ª2º]),ª1º))),
	("mod2_conv 2",
	dest_thm o mod2_conv,
	list_mk_comb(tMod,[ª0º,ª2º]),
	([],mk_eq(list_mk_comb(tMod,[ª0º,ª2º]),ª0º)))
	];

store_mt_results mt_run_fail [
	("mod2_conv 6086 a",
	mod2_conv,
	list_mk_comb(tMod,[N0,N1]),
	gen_fail_msg "mod2_conv" 6086 []),
	("mod2_conv 6086 b",
	mod2_conv,
	list_mk_comb(tMod,[ªn : Üº,N2]),
	gen_fail_msg "mod2_conv" 6086 [])
	];
=TEX
\section{DERIVED INFERENCE RULES}
We will from now on assume that out of scope or invalid
theorems will have been properly handled, by being
caught by the interfaces to the primitive and built-in inference rules.
\subsection{ap\_fun\_rule}
=SML
store_mt_results mt_run [
	("ap_fun_rule",
	dest_thm o ap_fun_rule ªf : Ü ã Üº,
	asm_rule ª 0 = 1 º,
	([ª 0 = 1 º], ª (f 0 : Ü) = f 1 º))
	];

store_mt_results mt_run_fail [
	("ap_fun_rule 7023",
	ap_fun_rule  ªf : Ü ã Üº,
	pq_ax,
	gen_fail_msg "ap_fun_rule" 7023 []),
	("ap_fun_rule 7024",
	ap_fun_rule  ªf : Ü ã Üº,
	t_eq_f,
	gen_fail_msg "ap_fun_rule" 7024 [])
	];

=TEX
\subsection{ap\_arg\_rule}
=SML
store_mt_results mt_run [
	("ap_arg_rule",
	dest_thm o ap_arg_rule ª2º,
	asm_rule ª (f : Ü ã Ü)  = gº,
	([ª (f : Ü ã Ü)  = gº], ª (f 2 : Ü) = g 2 º))
	];

store_mt_results mt_run_fail [
	("ap_arg_rule 7023",
	ap_arg_rule  ª2º,
	pq_ax,
	gen_fail_msg "ap_arg_rule" 7023 []),
	("ap_arg_rule 7025",
	ap_arg_rule  ªf : Ü ã Üº,
	t_eq_f,
	gen_fail_msg "ap_arg_rule" 7025 [])
	];

=TEX
\subsection{Ç\_t\_intro}
=SML
store_mt_results mt_run [
	("Ç_t_intro",
	dest_thm o Ç_t_intro,
	f_thm,
	([],ªå F Ç Tº))
	];
=TEX
\subsection{Ç\_t\_elim}
=SML
store_mt_results mt_run [
	("Ç_t_elim",
	dest_thm o Ç_t_elim,
	(Ç_t_intro f_thm),
	([],ªå Fº))
	];

store_mt_results mt_run_fail [
	("contr_rule 7106",
	Ç_t_elim,
	t_thm,
	gen_fail_msg "Ç_t_elim" 7106 [])
	];
=TEX
\subsection{contr\_rule}
=SML
store_mt_results mt_run [
	("contr_rule",
	dest_thm o contr_rule ª0 = 1º,
	(asm_rule mk_f),
	([mk_f],ª0 = 1º))
	];

store_mt_results mt_run_fail [
	("contr_rule 7001",
	contr_rule mk_t,
	t_thm,
	gen_fail_msg "contr_rule" 7001 []),
	("contr_rule 7002",
	contr_rule ª0º,
	(asm_rule mk_f),
	gen_fail_msg "contr_rule" 7002 [])
	];
=TEX
\subsection{c\_contr\_rule}
=SML
store_mt_results mt_run [
	("c_contr_rule 1",
	dest_thm o c_contr_rule ª0 = 1º,
	undisch_rule(ä_intro ªå(0 = 1)º(asm_rule mk_f)),
	([mk_f],ª0 = 1º)),
	("c_contr_rule 2",
	dest_thm o c_contr_rule ª(ç x : BOOL é x) xº,
	undisch_rule(ä_intro ªå((ç y:BOOL é y)x)º(asm_rule mk_f)),
	([mk_f],ª(ç x é x) x : BOOLº))
	];

store_mt_results mt_run_fail [
	("c_contr_rule 7001",
	c_contr_rule ª0 = 1º,
	undisch_rule(ä_intro ªå(0 = 1)º t_thm),
	gen_fail_msg "c_contr_rule" 7001  []),
	("c_contr_rule 7002",
	c_contr_rule ª0º,
	asm_rule mk_f,
	gen_fail_msg "c_contr_rule" 7002  []),
	("c_contr_rule 7003",
	c_contr_rule ª0 = 1º,
	asm_rule mk_f,
	gen_fail_msg "c_contr_rule" 7003  [])
	];
=TEX
\subsection{å\_intro}
=SML
store_mt_results mt_run [
	("å_intro 1",
	dest_thm o å_intro ª0 = 1º (asm_rule mk_f),
	f_thm,
	([mk_f],ªå(0 = 1)º)),
	("å_intro 2",
	dest_thm o å_intro ª0 = 1º f_thm,
	(asm_rule mk_f),
	([mk_f],ªå(0 = 1)º)),
	("å_intro 3",
	dest_thm o å_intro ªå(0 = 1)º (asm_rule ª0 = 1º),
	(asm_rule  ªå(0 = 1)º),
	([ª0 = 1º],ªå(å(0 = 1))º)),
	("å_intro 4",
	dest_thm o å_intro ª(ç z : BOOL é z) xº (asm_rule ª(ç x : BOOL é x) xº),
	(asm_rule  ªå(ç y : BOOL é y) xº),
	([ªå(ç y : BOOL é y) xº],ªå(ç z : BOOL é z) xº))
	];

store_mt_results mt_run_fail [
	("å_intro 7002",
	å_intro ª0º (asm_rule mk_f),
	f_thm,
	gen_fail_msg "å_intro" 7002 []),
	("å_intro 7004",
	å_intro mk_f f_thm,
	f_thm,
	gen_fail_msg "å_intro" 7004 [])
	];
=TEX
\subsection{å\_elim}
=SML
store_mt_results mt_run [
	("å_elim 1",
	dest_thm o å_elim ª0 = 1º (asm_rule mk_f),
	f_thm,
	([mk_f],ª(0 = 1)º)),
	("å_elim 2",
	dest_thm o å_elim ª0 = 1º f_thm,
	(asm_rule mk_f),
	([mk_f],ª(0 = 1)º)),
	("å_elim 3",
	dest_thm o å_elim ªå(0 = 1)º (asm_rule ª0 = 1º),
	(asm_rule  ªå(0 = 1)º),
	([ªå(0 = 1)º,ª0 = 1º],ªå(0 = 1)º)),
	("å_elim 4",
	dest_thm o å_elim mk_f (asm_rule ª(ç x : BOOL é x) xº),
	(asm_rule  ªå(ç y : BOOL é y) xº),
	([ªå(ç y : BOOL é y) xº,ª(ç x : BOOL é x) xº],mk_f))
	];

store_mt_results mt_run_fail [
	("å_elim 7002",
	å_elim ª0º (asm_rule mk_f),
	f_thm,
	gen_fail_msg "å_elim" 7002 []),
	("å_elim 7004",
	å_elim mk_f f_thm,
	f_thm,
	gen_fail_msg "å_elim" 7004 [])
	];
=TEX
\subsection{å\_å\_intro}
=SML
store_mt_results mt_run [
	("å_å_intro",
	dest_thm o å_å_intro,
	t_thm,
	([],ªå(å T)º))
	];
=TEX
\subsection{å\_å\_elim}
=SML
store_mt_results mt_run [
	("å_å_elim",
	dest_thm o å_å_elim,
	(asm_rule ªå(å T)º),
	([ ªå(å T)º],mk_t))
	];

store_mt_results mt_run_fail [
	("å_å_elim 7006",
	å_å_elim,
	t_thm,
	gen_fail_msg "å_å_elim" 7006 [])
	];
=TEX
\subsection{å\_å\_conv}
=SML
store_mt_results mt_run [
	("å_å_conv",
	dest_thm o å_å_conv,
	ªå(å T)º,
	([],ªå(å T) Ç Tº))
	];

store_mt_results mt_run_fail [
	("å_å_conv 7022",
	å_å_conv,
	mk_t,
	gen_fail_msg "å_å_conv" 7022 [])
	];
=TEX
\subsection{Ä\_intro}
=SML
store_mt_results mt_run [
	("Ä_intro 1",
	dest_thm o Ä_intro t_thm,
	f_thm,
	([],ªT Ä å Fº)),
	("Ä_intro 2",
	dest_thm o Ä_intro (asm_rule ªx : BOOLº),
	 (asm_rule ªx : BOOLº),
	([ªx : BOOLº],ªx Ä xº))
	];
=TEX
\subsection{Ä\_left\_elim}
=SML
store_mt_results mt_run [
	("Ä_left_elim",
	dest_thm o Ä_left_elim,
	asm_ruleªT Ä Fº,
	([ªT Ä Fº],mk_t))
	];

store_mt_results mt_run_fail [
	("Ä_left_elim 7007",
	Ä_left_elim,
	t_thm,
	gen_fail_msg "Ä_left_elim" 7007 [])
	];
=TEX
\subsection{Ä\_right\_elim}
=SML
store_mt_results mt_run [
	("Ä_right_elim",
	dest_thm o Ä_right_elim,
	asm_ruleªT Ä Fº,
	([ªT Ä Fº],mk_f))
	];

store_mt_results mt_run_fail [
	("Ä_right_elim 7007",
	Ä_right_elim,
	t_thm,
	gen_fail_msg "Ä_right_elim" 7007 [])
	];
=TEX
\subsection{list\_Ä\_intro}
=SML
store_mt_results mt_run [
	("list_Ä_intro",
	dest_thm o list_Ä_intro,
	[t_thm,f_thm,t_thm],
	([],ªT Ä åF Ä Tº))
	];

store_mt_results mt_run_fail [
	("list_Ä_intro 7107",
	list_Ä_intro,
	[],
	gen_fail_msg "list_Ä_intro" 7107 [])
	];
=TEX
\subsection{strip\_Ä\_rule}
=SML
store_mt_results mt_run [
	("strip_Ä_rule 1",
	map dest_thm o strip_Ä_rule,
	asm_rule ª(T Ä F) Ä (F Ä T)º,
	[([ª(T Ä F) Ä (F Ä T)º],mk_t),
	([ª(T Ä F) Ä (F Ä T)º],mk_f),
	([ª(T Ä F) Ä (F Ä T)º],mk_f),
	([ª(T Ä F) Ä (F Ä T)º],mk_t)]
),
	("strip_Ä_rule 2",
	map dest_thm o strip_Ä_rule,
	t_thm,
	[([],mk_t)])
	];
=TEX
\subsection{ä\_Ä\_rule}
=SML
store_mt_results mt_run [
	("ä_Ä_rule",
	dest_thm o ä_Ä_rule,
	asm_rule ªa ä b ä cº,
	([ªa ä b ä cº],ª(a Ä b) ä cº))
	];

store_mt_results mt_run_fail [
	("ä_Ä_rule 7008",
	ä_Ä_rule,
	t_thm,
	gen_fail_msg "ä_Ä_rule" 7008 [])
	];
=TEX
\subsection{Ä\_ä\_rule}
=SML
store_mt_results mt_run [
	("Ä_ä_rule",
	dest_thm o Ä_ä_rule,
	asm_rule ª(a Ä b) ä cº,
	([ª(a Ä b) ä cº],ªa ä b ä cº))
	];

store_mt_results mt_run_fail [
	("Ä_ä_rule 7009",
	Ä_ä_rule,
	t_thm,
	gen_fail_msg "Ä_ä_rule" 7009 [])
	];
=TEX
\subsection{Å\_left\_intro}
=SML
store_mt_results mt_run [
	("Å_left_intro",
	dest_thm o Å_left_intro mk_f,
	t_thm,
	([],ªF Å Tº))
	];

store_mt_results mt_run_fail [
	("Å_left_intro 7002",
	Å_left_intro ª0º,
	t_thm,
	gen_fail_msg "Å_left_intro" 7002 [])
	];
=TEX
\subsection{Å\_right\_intro}
=SML
store_mt_results mt_run [
	("Å_right_intro",
	dest_thm o Å_right_intro mk_f,
	t_thm,
	([],ªT Å Fº))
	];

store_mt_results mt_run_fail [
	("Å_right_intro 7002",
	Å_right_intro ª0º,
	t_thm,
	gen_fail_msg "Å_right_intro" 7002 [])
	];
=TEX
\subsection{Å\_elim}
=SML
store_mt_results mt_run [
	("Å_elim",
	dest_thm o Å_elim (asm_rule ªx Å yº) (asm_rule ªx:BOOLº),
	undisch_rule(asm_ruleªy ä xº),
	([ªx Å yº, ªy ä xº],ªx : BOOLº))
	];

store_mt_results mt_run_fail [
	("Å_elim 7010",
	Å_elim t_thm (asm_rule ªx:BOOLº),
	undisch_rule(asm_ruleªy ä xº),
	gen_fail_msg "Å_elim" 7010 []),
	("Å_elim 7083",
	Å_elim (asm_rule ªx Å yº) (asm_rule ªx :BOOLº),
	(asm_ruleªy : BOOLº),
	gen_fail_msg "Å_elim" 7083 [])
	];
=TEX
\subsection{Å\_cancel\_rule}
=SML
store_mt_results mt_run [
	("Å_cancel_rule 1",
	dest_thm o Å_cancel_rule (asm_rule ªT Å Fº),
	f_thm,
	([ªT Å Fº],mk_t)),
	("Å_cancel_rule 2",
	dest_thm o Å_cancel_rule (asm_rule ªF Å Tº),
	f_thm,
	([ªF Å Tº],mk_t)),
	("Å_cancel_rule 3",
	dest_thm o Å_cancel_rule (asm_rule ª(ç x:BOOL é x)p Å (ç y:BOOL é y)pº),
	asm_rule ªå((ç z:BOOL é z)p)º,
	([ª(ç x:BOOL é x)p Å (ç y:BOOL é y)pº, ªå((ç z:BOOL é z)p)º],ª(ç x:BOOL é x)pº))
	];

store_mt_results mt_run_fail [
	("Å_cancel_rule 7010",
	Å_cancel_rule t_thm,
	t_thm,
	gen_fail_msg "Å_cancel_rule" 7010 []),
	("Å_cancel_rule 7050",
	Å_cancel_rule (asm_ruleªx Å yº),
	t_thm,
	gen_fail_msg "Å_cancel_rule" 7050 [])
	];
=TEX
\subsection{disch\_rule}
=SML
store_mt_results mt_run [
	("disch_rule",
	dest_thm o disch_ruleªx : BOOLº,
	asm_ruleªx : BOOLº,
	([],ªx ä xº))
	];

store_mt_results mt_run_fail [
	("disch_rule 7031",
	disch_ruleªx : BOOLº,
	t_thm,
	gen_fail_msg "disch_rule" 7031 [])
	];
=TEX
\subsection{simple\_ä\_match\_mp\_rule}
=SML
let
val x1 = ªx : 'aº;
val x2 = ªx : 'bº;
val tm1 = simple_list_mk_É([x1,x2],
	mk_ä(
	list_mk_comb(mk_var("f",mk_fun(tva,
		mk_fun(mk_vartype"'b",BOOL))),
		[x1,x2]),
	ªb:BOOLº));
val tm2 = mk_ä(
	list_mk_comb(mk_var("f",mk_fun(tva,
		mk_fun(mk_vartype"'b",BOOL))),
		[x1,x2]),
	ªb:BOOLº);
in
store_mt_results mt_run [
	("simple_ä_match_mp_rule 1",
	dest_thm o simple_ä_match_mp_rule 
		(simple_É_elim ªx : 'aº (asm_rule ªÉ x y é f x y ä bº)),
	asm_rule ªf 1 2 : BOOLº,
	([ªÉ x y: Ü é f x y ä bº, ªf 1 2 : BOOLº],ªb : BOOLº)),
	("simple_ä_match_mp_rule 2",
	dest_thm o simple_ä_match_mp_rule 
		(simple_É_elim ªx : 'aº (asm_rule ªÉ x y é f x y ä b ä cº)),
	asm_rule ªf 1 2 : BOOLº,
	([ªÉ x y: Ü é f x y ä b ä cº, ªf 1 2 : BOOLº],ªb ä cº)),
	("simple_ä_match_mp_rule 3",
	dest_thm o simple_ä_match_mp_rule 
		(asm_rule tm1),
	asm_rule ªf 1 2 : BOOLº,
	([ªÉ x x' :Ü é f x x' ä bº, ªf 1 2 : BOOLº],ªb : BOOLº)),
	("simple_ä_match_mp_rule 4",
	dest_thm o simple_ä_match_mp_rule 
		(asm_rule tm2),
	asm_rule ªf 1 2 : BOOLº,
	([ªf 1 2 ä bº, ªf 1 2 : BOOLº],ªb : BOOLº))

	]
end;
store_mt_results mt_run_fail [
	("simple_ä_match_mp_rule 7044",
	simple_ä_match_mp_rule t_thm,
	t_thm,
	gen_fail_msg "simple_ä_match_mp_rule" 7044 []),
	("simple_ä_match_mp_rule 7044",
	simple_ä_match_mp_rule (asm_ruleª(1 = 1) ä xº),
	t_thm,
	gen_fail_msg "simple_ä_match_mp_rule" 7044 [])
	];
=TEX
\subsection{undisch\_rule}
=SML
store_mt_results mt_run [
	("undisch_rule",
	dest_thm o undisch_rule,
	asm_rule ªx ä yº,
	([ªx ä yº,ªx : BOOLº],ªy : BOOLº))
	];

store_mt_results mt_run_fail [
	("undisch_rule 7011",
	undisch_rule,
	t_thm,
	gen_fail_msg "undisch_rule" 7011 [])
	];
=TEX
\subsection{strip\_ä\_rule}
=SML
store_mt_results mt_run [
	("strip_ä_rule 1",
	dest_thm o strip_ä_rule,
	asm_ruleªT ä F ä T ä Fº,
	([ªT ä F ä T ä Fº,mk_f,mk_t],mk_f)),
	("strip_ä_rule 2",
	dest_thm o strip_ä_rule,
	asm_ruleªT ä F ä xº,
	([ªT ä F ä xº,mk_t,mk_f],ªx : BOOLº)),
	("strip_ä_rule 3",
	dest_thm o strip_ä_rule,
	t_thm,
	([],mk_t))
	];
=TEX
\subsection{all\_ä\_intro}
=SML
store_mt_results mt_run [
	("all_ä_intro 1",
	dest_thm o all_ä_intro,
	Ä_intro (asm_rule mk_t)(asm_rule mk_f),
	([],ªT ä F ä (T Ä F)º)),
	("all_ä_intro 1",
	dest_thm o all_ä_intro,
	t_thm,
	([],mk_t))
	];
=TEX
\subsection{ä\_trans\_rule}
=SML
store_mt_results mt_run [
	("ä_trans_rule 1",
	dest_thm o ä_trans_rule (asm_ruleªx ä yº),
	(asm_ruleªy ä zº),
	([ªx ä yº, ªy ä zº],ªx ä zº)),
	("ä_trans_rule 2",
	dest_thm o ä_trans_rule (asm_ruleªx ä (ç p é p)yº),
	(asm_ruleª(ç q é q)y ä zº),
	([ªx ä (ç p é p)yº, ª(ç q é q)y ä zº],ªx ä zº))
	];

store_mt_results mt_run_fail [
	("ä_trans_rule 7040",
	ä_trans_rule t_thm,
	t_thm,
	gen_fail_msg "ä_trans_rule" 7040 []),
	("ä_trans_rule 7041",
	ä_trans_rule (asm_ruleªx ä yº),
	t_thm,
	gen_fail_msg "ä_trans_rule" 7041 []),
	("ä_trans_rule 7042",
	ä_trans_rule (asm_ruleªx ä yº),
	(asm_ruleªx ä yº),
	gen_fail_msg "ä_trans_rule" 7042 [])
	];
=TEX
\subsection{modus\_tollens\_rule}
=SML
store_mt_results mt_run [
	("modus_tollens_rule",
	dest_thm o modus_tollens_rule (asm_rule ªx ä yº),
	(asm_rule ªå yº),
	([ªx ä yº, ªå yº],ªå xº))
	];

store_mt_results mt_run_fail [
	("modus_tollens_rule 7040",
	modus_tollens_rule t_thm,
	t_thm,
	gen_fail_msg "modus_tollens_rule" 7040 []),
	("modus_tollens_rule 7051",
	modus_tollens_rule  (asm_rule ªx ä yº),
	f_thm,
	gen_fail_msg "modus_tollens_rule" 7051 [])
	];
=TEX
\subsection{Ç\_intro}
=SML
store_mt_results mt_run [
	("Ç_intro",
	dest_thm o Ç_intro (asm_ruleªx ä yº),
	(asm_ruleªy ä xº),
	([ªx ä yº, ªy ä xº],ªx Ç yº))
	];

store_mt_results mt_run_fail [
	("Ç_intro 7040",
	Ç_intro t_thm,
	t_thm,
	gen_fail_msg "Ç_intro" 7040 []),
	("Ç_intro 7041",
	Ç_intro (asm_ruleªx ä yº),
	t_thm,
	gen_fail_msg "Ç_intro" 7041 []),
	("Ç_intro 7064",
	Ç_intro (asm_ruleªx ä yº),
	(asm_ruleªx ä yº),
	gen_fail_msg "Ç_intro" 7064 [])
	];
=TEX
\subsection{Ç\_elim}
=SML
store_mt_results mt_run [
	("Ç_elim",
	(dest_thm ** dest_thm) o Ç_elim,
	asm_rule ªx Ç yº,
	(([ªx Ç yº],ªx ä yº),([ªx Ç yº],ªy ä xº)))
	];

store_mt_results mt_run_fail [
	("Ç_elim 7062",
	Ç_elim,
	t_thm,
	gen_fail_msg "Ç_elim" 7062 [])
	];
=TEX
\subsection{simple\_Ç\_match\_mp\_rule}
=SML
let
val x1 = ªx : 'aº;
val x2 = ªx : 'bº;
val tm1 = simple_list_mk_É([x1,x2],
	mk_Ç(
	list_mk_comb(mk_var("f",mk_fun(tva,
		mk_fun(mk_vartype"'b",BOOL))),
		[x1,x2]),
	ªb:BOOLº));
val tm2 = mk_Ç(
	list_mk_comb(mk_var("f",mk_fun(tva,
		mk_fun(mk_vartype"'b",BOOL))),
		[x1,x2]),
	ªb:BOOLº);
in
store_mt_results mt_run [
	("simple_Ç_match_mp_rule 1",
	dest_thm o simple_Ç_match_mp_rule 
		(simple_É_elim ªx : 'aº (asm_rule ªÉ x y é f x y Ç bº)),
	asm_rule ªf 1 2 : BOOLº,
	([ªÉ x y: Ü é f x y Ç bº, ªf 1 2 : BOOLº],ªb : BOOLº)),
	("simple_Ç_match_mp_rule 2",
	dest_thm o simple_Ç_match_mp_rule 
		(simple_É_elim ªx : 'aº (asm_rule ªÉ x y é f x y Ç b ä cº)),
	asm_rule ªf 1 2 : BOOLº,
	([ªÉ x y: Ü é f x y Ç b ä cº, ªf 1 2 : BOOLº],ªb ä cº)),
	("simple_Ç_match_mp_rule 3",
	dest_thm o simple_Ç_match_mp_rule 
		(asm_rule tm1),
	asm_rule ªf 1 2 : BOOLº,
	([ªÉ x x' :Ü é f x x' Ç bº, ªf 1 2 : BOOLº],ªb : BOOLº)),
	("simple_Ç_match_mp_rule 4",
	dest_thm o simple_Ç_match_mp_rule 
		(asm_rule tm2),
	asm_rule ªf 1 2 : BOOLº,
	([ªf 1 2 Ç bº, ªf 1 2 : BOOLº],ªb : BOOLº))
	]
end;
store_mt_results mt_run_fail [
	("simple_Ç_match_mp_rule 7044",
	simple_Ç_match_mp_rule t_thm,
	t_thm,
	gen_fail_msg "simple_Ç_match_mp_rule" 7044 []),
	("simple_Ç_match_mp_rule 7044",
	simple_Ç_match_mp_rule (asm_ruleª(1 = 1) Ç xº),
	t_thm,
	gen_fail_msg "simple_Ç_match_mp_rule" 7044 [])
	];
=TEX
\subsection{subst\_conv}
=SML
store_mt_results mt_run_fail[
	("subst_conv 6001 1",
	subst_conv [] ªÑ p é q1º,
	ªÑ p é qº,
	gen_fail_msg "subst_conv" 6001 []),
	("subst_conv 6001 2",
	subst_conv [(t_eq_f, ªq:BOOLº)] ªT Ç qº,
	ªT Ç Fº,
	gen_fail_msg "subst_conv" 6001 []),
	("subst_conv 7084",
	subst_conv [(t_eq_f, ªq:BOOLº)] ª1º,
	ªT Ç Fº,
	gen_fail_msg "subst_conv" 7084 [])
	];

store_mt_results mt_run_fail [
	("subst_conv 6002",
	subst_conv,
	[(t_thm, ªp:BOOLº)],
	gen_fail_msg "subst_conv" 6002 []),
	("subst_conv 6003",
	subst_conv,
	[(t_def, ªTº)],
	gen_fail_msg "subst_conv" 6003 []),
	("subst_conv 6029",
	subst_conv,
	[(t_def, ªq : Üº)],
	gen_fail_msg "subst_conv" 6029 ["q"])
	];

store_mt_results mt_run [("subst_conv_1",
	dest_thm o subst_conv [] ªÑ p é qº,
	ªÑ p é qº,
	([],mk_eq(ªÑ p é qº,ªÑ p é qº))),
	("subst_conv_2",
	dest_thm o subst_conv [] ªÑ p1 é qº,
	ªÑ p é qº,
	([],mk_eq(ªÑ p é qº,ªÑ p1 é qº))),
	("subst_conv_3",
	dest_thm o subst_conv [(t_eq_f, ªq : BOOLº)] ªq = Fº,
	ªT = Fº,
	([ªT = Fº],mk_Ç(ª(T = F)º,ª(F = F)º))),
	("subst_conv_4",
	dest_thm o subst_conv [(t_def, ªq : BOOLº)] ªq = Fº,
	ªT = Fº,
	([],mk_eq(ªT = Fº,ª((ç x:BOOLéx)=(ç x éx)) = Fº)))
	];
=TEX
\subsection{eq\_sym\_conv}
=SML
store_mt_results mt_run [
	("eq_sym_conv",
	dest_thm o eq_sym_conv,
	ªx = yº,
	([],ª(x = y) = (y = x)º)),
	("eq_sym_conv",
	dest_thm o eq_sym_conv,
	ªT Ç Fº,
	([],ª(T Ç F) = (F Ç T)º))
	];

store_mt_results mt_run_fail [
	("eq_sym_conv 7090",
	eq_sym_conv,
	mk_t,
	gen_fail_msg "eq_sym_conv" 7090 [])
	];
=TEX
\subsection{å\_eq\_sym\_rule}
=SML
store_mt_results mt_run [
	("å_eq_sym_rule",
	dest_thm o å_eq_sym_rule,
	(asm_ruleªå((x:'a) = y)º),
	([ªå((x:'a) = y)º],ªå((y:'a) = x)º))
	];

store_mt_results mt_run_fail [
	("å_eq_sym_rule 7091",
	å_eq_sym_rule,
	t_thm,
	gen_fail_msg "å_eq_sym_rule" 7091 [])
	];
=TEX
\subsection{simple\_Ç\_match\_mp\_rule}
=SML
let
val x1 = ªx : 'aº;
val x2 = ªx : 'bº;
val tm1 = simple_list_mk_É([x1,x2],
	mk_eq(
	list_mk_comb(mk_var("f",mk_fun(tva,
		mk_fun(mk_vartype"'b",mk_vartype"'c"))),
		[x1,x2]),
	ªb:'cº));
val tm2 = mk_eq(
	list_mk_comb(mk_var("f",mk_fun(tva,
		mk_fun(mk_vartype"'b",mk_vartype"'c"))),
		[x1,x2]),
	ªb:'cº);
in
store_mt_results mt_run [
	("simple_eq_match_conv 1",
	dest_thm o simple_eq_match_conv 
		(simple_É_elim ªx : 'aº (asm_rule ªÉ x y é f x y = bº)),
	ªf 1 2 : BOOLº,
	([ªÉ x y: Ü é f x y Ç bº],ªf 1 2 Ç bº)),
	("simple_eq_match_conv 2",
	dest_thm o simple_eq_match_conv 
		(asm_rule tm1),
	ªf 1 2 : BOOLº,
	([ªÉ x x' :Ü é f x x' Ç bº],ªf 1 2 Ç bº)),
	("simple_eq_match_conv 3",
	dest_thm o simple_eq_match_conv 
		(asm_rule tm2),
	ªf 1 2 : BOOLº,
	([ªf 1 2 Ç bº],ªf 1 2 Ç bº))
	]
end;
store_mt_results mt_run_fail [
	("simple_eq_match_conv 7044",
	simple_eq_match_conv t_thm,
	mk_t,
	gen_fail_msg "simple_eq_match_conv" 7044 []),
	("simple_eq_match_conv 7044",
	simple_eq_match_conv (asm_ruleª(1 = 1) = xº),
	mk_t,
	gen_fail_msg "simple_eq_match_conv" 7044 [])
	];
=TEX
\subsection{simple\_eq\_match\_1\_conv}
=SML
store_mt_results mt_run [
	("simple_eq_match_1_conv 1",
	dest_thm o simple_eq_match_1_conv 
		(simple_É_elim ªx : Üº (asm_rule ªÉ x y :Ü é f x y Ç bº)),
	ªf (x:Ü) 2 : BOOLº,
	([ªÉ x y :Ü é f x y Ç bº],ª(f (x:Ü) 2) Ç bº)),
	("simple_eq_match_1_conv 2",
	dest_thm o simple_eq_match_1_conv 
		(asm_rule ªÉ x y :Ü é f x y Ç bº),
	ªf (x:Ü) 2 : BOOLº,
	([ªÉ x y :Ü é f x y Ç bº],ª(f (x:Ü) 2) Ç bº)),
	("simple_eq_match_1_conv 3",
	dest_thm o simple_eq_match_1_conv 
		(simple_É_elim ªx : Üº (asm_rule ªÉ x y :Ü é f x y Ç bº)),
	ªf (x:Ü) (y:Ü) : BOOLº,
	([ªÉ x y :Ü é f x y Ç bº],ªf (x:Ü) (y:Ü) Ç bº)),
	("simple_eq_match_1_conv 4",
	dest_thm o simple_eq_match_1_conv 
		(asm_rule ªÉ x y :Ü é f x y Ç bº),
	ªf 1 2 : BOOLº,
	([ªÉ x y :Ü é f x y Ç bº],ª(f 1 2) Ç bº)),
	("simple_eq_match_1_conv 5",
	dest_thm o simple_eq_match_1_conv 
		(asm_rule ªÉ x y :Ü é ((ç f éf)f) x y Ç bº),
	ª(ç g ég)f 1 2 : BOOLº,
	([ªÉ x y :Ü é (ç f éf)f x y Ç bº],ª((ç g ég)f 1 2) Ç bº)),
	("simple_eq_match_1_conv 6",
	dest_thm o simple_eq_match_1_conv 
		(simple_É_introªf : BOOL ã 'aº
		 (ap_fun_rule ªf : BOOL ã 'aº
		 (asm_rule ª(x:BOOL) = yº))),
	ªp (x:BOOL) : Üº,
	([ª(x:BOOL) = yº],ª(p (x:BOOL):Ü) = p yº))
	];

store_mt_results mt_run_fail [
	("simple_eq_match_1_conv 7095",
	simple_eq_match_1_conv,
	t_thm,
	gen_fail_msg "simple_eq_match_1_conv" 7095 [])
	];

store_mt_results mt_run_fail [
	("simple_eq_match_1_conv 7076 a",
	simple_eq_match_1_conv 
		(simple_É_elim ªx : 'aº (asm_rule ªÉ x y é f x y Ç bº)),
	ªf 1 2 : BOOLº,
	gen_fail_msg "simple_eq_match_1_conv" 7076 []),
	("simple_eq_match_1_conv 7076 b",
	simple_eq_match_1_conv 
		(simple_É_elim ªx : Üº (asm_rule ªÉ x y: Ü é f x y Ç bº)),
	ªf 1 2 : BOOLº,
	gen_fail_msg "simple_eq_match_1_conv" 7076 [])
	];
=TEX
\subsection{if\_intro}
=SML
store_mt_results mt_run [
	("if_intro 1",
	dest_thm o if_intro ªa : BOOLº (asm_rule ªx  = p1º),
	(asm_rule ªx = p2º),
	([ªx  = p1º,ªx = p2º],ª(if a then (x = p1) else (x = p2))º)),
	("if_intro 2",
	dest_thm o if_intro ªb : BOOLº (undisch_rule(asm_rule ªb ä p1º)),
	(undisch_rule (asm_rule ªå b ä p2º)),
	([ªb ä p1º,ªå b ä p2º],ª(if b then (p1:BOOL) else p2)º))
	];

store_mt_results mt_run_fail [
	("if_intro 7002",
	if_intro (mk_Ü 1) t_thm,
	t_thm,
	gen_fail_msg "if_intro" 7002 [])
	];

=TEX
\subsection{if\_then\_elim}
=SML
store_mt_results mt_run [
	("if_then_elim",
	dest_thm o if_then_elim,
	asm_rule ªif a then (tt : BOOL) else teº,
	([ªif a then (tt : BOOL) else teº],ªa ä ttº))
	];

store_mt_results mt_run_fail [
	("if_then_elim 7012",
	if_then_elim,
	t_thm,
	gen_fail_msg "if_then_elim" 7012 [])
	];
=TEX
\subsection{if\_else\_elim}
=SML
store_mt_results mt_run [
	("if_else_elim",
	dest_thm o if_else_elim,
	asm_rule ªif a then (tt : BOOL) else teº,
	([ªif a then (tt : BOOL) else teº],ªå a ä teº))
	];

store_mt_results mt_run_fail [
	("if_else_elim 7012",
	if_else_elim,
	t_thm,
	gen_fail_msg "if_else_elim" 7012 [])
	];
=TEX
\subsection{if\_fun\_conv}
=SML
store_mt_results mt_run [
	("if_fun_conv",
	dest_thm o if_fun_conv,
	ª(if T then (ç x é x = 1)3 else (ç y é y = 1)4)º,
	([],ª(if T then (ç x é x = 1)3 else (ç y é y = 1)4) =
		((ç x é x = 1)(if T then 3 else 4))º))
	];

store_mt_results mt_run_fail [
	("if_fun_conv 7037",
	if_fun_conv,
	mk_t,
	gen_fail_msg "if_fun_conv" 7037 []),
	("if_fun_conv 7038",
	if_fun_conv,
	ª(if T then (ç x é x = 1)3 else (ç y é y = 2)4)º,
	gen_fail_msg "if_fun_conv" 7038 [])
	];
=TEX
\subsection{fun\_if\_conv}
=SML
store_mt_results mt_run [
	("fun_if_conv",
	dest_thm o fun_if_conv,
	ªf(if T then 3 else 4)º,
	([],ª(f(if T then 3 else 4)) = if T then f 3 else f 4º))
	];

store_mt_results mt_run_fail [
	("fun_if_conv 7098",
	fun_if_conv,
	mk_t,
	gen_fail_msg "fun_if_conv" 7098 [])
	];
=TEX
\subsection{ç\_rule}
=SML
store_mt_results mt_run [
	("ç_rule",
	dest_thm o ç_rule ª1º,
	asm_ruleª1 = 2º,
	([ª1 = 2º],ª(ç @_1 é @_1 = 2) 1º))
	];
=TEX
\subsection{simple\_all\_%beta%\_conv}
=SML
store_mt_results mt_run [
	("simple_all_%beta%_conv 1",
	dest_thm o simple_all_%beta%_conv,
	ª (ç x é (plus x y)) 1:Üº,
	([],ª(ç x é (plus x y)) 1 = (plus 1 y:Ü)º)),
	("simple_all_%beta%_conv 2",
	dest_thm o simple_all_%beta%_conv,
	ª (ç x é (plus x x)) 1º,
	([],ª(ç x é (plus x x)) 1 = plus 1 1º)),
	("simple_all_%beta%_conv 3",
	dest_thm o simple_all_%beta%_conv,
	sample,
	([],mk_eq(sample, ª(å T Ä q) Ä qº))),
	("simple_all_%beta%_conv 4",
	dest_thm o simple_all_%beta%_conv,
	ª (ç y x : BOOL é x  Ä y)(plus(x :Ü) 1 ) º,
	([],mk_eq(ª (ç y x : BOOL é x  Ä y)(plus(x :Ü) 1 ) º, 
		ª(ç x' é x' Ä (plus (x:Ü) 1))º)))
	];

store_mt_results mt_run_fail [
	("simple_all_%beta%_conv 7020",
	simple_all_%beta%_conv,
	ª 1 º,
	gen_fail_msg "simple_all_%beta%_conv" 7020 [])
	];
=TEX
\subsection{simple\_all\_%beta%\_conv}
=SML
store_mt_results mt_run [
	("simple_all_%beta%_rule 1",
	dest_thm o simple_all_%beta%_rule,
	asm_ruleª (ç x é (plus x y)) 1:BOOLº,
	([ª (ç x é (plus x y)) 1:BOOLº],ª(plus 1 y:BOOL)º)),
	("simple_all_%beta%_rule 2",
	dest_thm o simple_all_%beta%_rule,
	asm_rule ª (ç x é (plus x x)) 1:BOOLº,
	([ ª (ç x é (plus x x)) 1:BOOLº],ªplus 1 1 :BOOLº)),
	("simple_all_%beta%_rule 3",
	dest_thm o simple_all_%beta%_rule,
	asm_rule sample,
	([sample],ª(å T Ä q) Ä qº)),
	("simple_all_%beta%_rule 4",
	dest_thm o simple_all_%beta%_rule,
	asm_rule ª f = (ç y x : BOOL é x  Ä y)(plus(x :Ü) 1 ) º,
	([ª f = (ç y x : BOOL é x  Ä y)(plus(x :Ü) 1 ) º], 
		ªf = (ç x' é x' Ä (plus (x:Ü) 1))º))
	];

store_mt_results mt_run_fail [
	("simple_all_%beta%_rule 7021",
	simple_all_%beta%_rule,
	t_thm,
	gen_fail_msg "simple_all_%beta%_rule" 7021 [])
	];
=TEX
\subsection{simple\_list\_É\_intro}
=SML
store_mt_results mt_run [
	("simple_list_É_intro 1",
	dest_thm o simple_list_É_intro [],
	t_thm,
	([],ªTº)),
	("simple_list_É_intro 1",
	dest_thm o simple_list_É_intro [ªx : BOOLº, ªy : BOOLº],
	Ä_intro(refl_conv ªx : BOOLº)(refl_conv ªy : BOOLº),
	([],ªÉ x y é (x Ç x) Ä (y Ç y)º))
	];

store_mt_results mt_run_fail [
	("simple_list_É_intro 6004",
	simple_list_É_intro [mk_t],
	t_thm,
	gen_fail_msg "simple_list_É_intro" 6004 []),
	("simple_list_É_intro 6005",
	simple_list_É_intro [ªx : BOOLº],
	asm_rule ªx : BOOLº,
	gen_fail_msg "simple_list_É_intro" 6005 ["x"])
	];
=TEX
\subsection{all\_É\_intro}
=SML
store_mt_results mt_run [
	("all_É_intro",
	dest_thm o all_É_intro,
	Ä_intro(Ä_intro(refl_conv ªx:Üº)(asm_rule ªy:BOOLº))
		(refl_conv ªz:BOOLº),
	([ªy:BOOLº],ªÉ (x : Ü) (z : BOOL) é ((x = x) Ä y) Ä (z Ç z)º))
	];
=TEX
\subsection{simple\_all\_É\_elim}
=SML
store_mt_results mt_run [
	("simple_all_É_elim",
	dest_thm o simple_all_É_elim,
	undisch_rule(ä_intro ªy : BOOLº
		(asm_rule ªÉ x y z: Ü é plus x y zº)),
	([ªÉ x y z: Ü é plus x y zº, ªy : BOOLº],
		ªplus (x:Ü) (y':Ü)(z:Ü):BOOLº))
	];
=TEX
\subsection{simple\_å\_É\_conv}
=SML
store_mt_results mt_run [
	("simple_å_É_conv",
	dest_thm o simple_å_É_conv,
	ªå (É x :'aé T)º,
	([],ª(å (É x:'a é T)) Ç Ñ x:'a é å Tº))
	];

store_mt_results mt_run_fail [
	("simple_å_É_conv 7036",
	simple_å_É_conv,
	mk_t,
	gen_fail_msg "simple_å_É_conv" 7036 [])
	];
=TEX
\subsection{simple\_Ñ\_intro}
=SML
store_mt_results mt_run [
	("simple_Ñ_intro",
	dest_thm o simple_Ñ_intro ªÑ p:BOOL é p Ç ((ç x:BOOL é x) = (ç x:BOOL é x))º,
	t_def,
	([],ªÑ p:BOOL é p Ç ((ç x:BOOL é x) = (ç x:BOOL é x))º))
	];

store_mt_results mt_run_fail [
	("simple_Ñ_intro 7094",
	simple_Ñ_intro mk_t,
	t_thm,
	gen_fail_msg "simple_Ñ_intro" 7094 []),
	("simple_Ñ_intro 7047",
	simple_Ñ_intro ªÑ x é Fº,
	t_thm,
	gen_fail_msg "simple_Ñ_intro" 7047 [])
	];
=TEX
\subsection{simple\_Ñ\_elim}
=SML
store_mt_results mt_run [
	("simple_Ñ_elim",
	dest_thm o simple_Ñ_elim ªx Å Fº (asm_rule ªÑ r é r Å Fº),
	(undisch_rule(simple_É_elim ªx:BOOLº (asm_rule
		ªÉ x : BOOL é x Å F ä rubbishº))),
	([ªÉ x : BOOL é x Å F ä rubbishº,ªÑ r é r Å Fº],ªrubbish : BOOLº))
	];

store_mt_results mt_run_fail [
	("simple_Ñ_elim 7013 a",
	simple_Ñ_elim ª0º (asm_rule ªÑ r é r Å Fº),
	(undisch_rule(simple_É_elim ªx:BOOLº (asm_rule
		ªÉ x : BOOL é x Å F ä rubbishº))),
	gen_fail_msg "simple_Ñ_elim" 7013 []),
	("simple_Ñ_elim 7013",
	simple_Ñ_elim ªx Å Fº (asm_rule ªÑ r é r Å Fº),
	(undisch_rule(simple_É_elim ªx:BOOLº (asm_rule
		ªÉ x : BOOL é x Å T ä rubbishº))),
	gen_fail_msg "simple_Ñ_elim" 7013 []),
	("simple_Ñ_elim 7014",
	simple_Ñ_elim ªx Å Fº (asm_rule ªÑ r é F Å rº),
	(undisch_rule(simple_É_elim ªx:BOOLº (asm_rule
		ªÉ x : BOOL é x Å F ä rubbishº))),
	gen_fail_msg "simple_Ñ_elim" 7014 []),
	("simple_Ñ_elim 7109",
	simple_Ñ_elim ªx Å Fº (asm_rule ªÉ r é r Å Fº),
	(undisch_rule(simple_É_elim ªx:BOOLº (asm_rule
		ªÉ x : BOOL é x Å F ä rubbishº))),
	gen_fail_msg "simple_Ñ_elim" 7109 [])
	];
=TEX
\subsection{simple\_å\_Ñ\_conv}
=SML
store_mt_results mt_run [
	("simple_å_Ñ_conv",
	dest_thm o simple_å_Ñ_conv,
	ªå (Ñ x :'aé T)º,
	([],ª(å (Ñ x:'a é T)) Ç É x:'a é å Tº))
	];

store_mt_results mt_run_fail [
	("simple_å_Ñ_conv 7058",
	simple_å_Ñ_conv,
	mk_t,
	gen_fail_msg "simple_å_Ñ_conv" 7058 [])
	];
=TEX
\subsection{simple\_Ñ%down%1\_intro}
=SML
store_mt_results mt_run [
	("simple_Ñ%down%1_intro 1",
	dest_thm o simple_Ñ%down%1_intro (%alpha%_conv ª(ç x : Ü é x)º ª(ç y : Ü é y)º),
	asm_rule ªÉ tt é (tt = (ç y : Ü é y)) ä (tt = (ç z : Ü é z))º,
	([ªÉ tt é (tt = (ç y : Ü é y)) ä (tt = (ç z : Ü é z))º],
		ªÑ%down%1 tt é tt = (ç y:Ü é y)º)),
	("simple_Ñ%down%1_intro 2",
	dest_thm o simple_Ñ%down%1_intro (asm_rule ªq 3 (y:'a) :BOOLº),
	asm_rule ªÉ tt : Ü é q tt (y : 'a) ä tt = 3º,
	([ªq 3 (y:'a) :BOOLº,ªÉ tt : Ü é q tt (y : 'a) ä tt = 3º],ªÑ%down%1 tt : Ü é q tt (y:'a)º))
	];

store_mt_results mt_run_fail [
	("simple_Ñ%down%1_intro 7067",
	simple_Ñ%down%1_intro t_thm,
	asm_rule ªÉ tt : Ü é q tt (y : 'a) ä tt = 3º,
	gen_fail_msg "simple_Ñ%down%1_intro" 7067 []),
	("simple_Ñ%down%1_intro 7066",
	simple_Ñ%down%1_intro t_thm,
	t_thm,
	gen_fail_msg "simple_Ñ%down%1_intro" 7066 [])
	];
=TEX
\subsection{simple\_Ñ%down%1\_elim}
=SML
store_mt_results mt_run [
	("simple_Ñ%down%1_elim",
	dest_thm o simple_Ñ%down%1_elim,
	asm_rule ªÑ%down%1 tt é tt = (ç y:Ü é y)º,
	([ ªÑ%down%1 tt é tt = (ç y:Ü é y)º],
		ªÑ tt é tt = (ç y :Üé y) Ä (É x é x = (ç y é y) ä x = tt)º))
	];

store_mt_results mt_run_fail [
	("simple_Ñ%down%1_elim 7015",
	simple_Ñ%down%1_elim,
	t_thm,
	gen_fail_msg "simple_Ñ%down%1_elim" 7015 [])
	];
=TEX
\subsection{á\_intro\_rule}
=SML
store_mt_results mt_run [
	("á_intro_rule",
	dest_thm o á_intro_rule,
	f_thm,
	([],ªå($á $å)º))
	];

store_mt_results mt_run_fail [
	("á_intro_rule 7016",
	á_intro_rule,
	t_thm,
	gen_fail_msg "á_intro_rule" 7016 [])
	];
=TEX
\subsection{á\_elim\_rule}
=SML
store_mt_results mt_run [
	("á_elim_rule",
	dest_thm o á_elim_rule ªx : BOOL ã BOOLº (asm_rule ª(ç f é f T)(á f é f T)º),
	(undisch_rule(simple_É_elim ªx:BOOL ã BOOLº (asm_rule
		ªÉ x : BOOL ã BOOL é  (ç f é f T) x ä rubbishº))),
	([ªÉ x : BOOL ã BOOL é  (ç f é f T) x ä rubbishº,ª(ç f é f T)(á f é f T)º],
		ªrubbish : BOOLº))
	];

store_mt_results mt_run_fail [
	("á_elim_rule 7017",
	á_elim_rule ªf x : BOOL ã BOOLº (asm_rule ª(ç f é f T)(á f é f T)º),
	(undisch_rule(simple_É_elim ªx:BOOL ã BOOLº (asm_rule
		ªÉ x : BOOL ã BOOL é  (ç f é f T) x ä rubbishº))),
	gen_fail_msg "á_elim_rule" 7017 []),
	("á_elim_rule 7018",
	á_elim_rule ªx : BOOL ã BOOLº (asm_rule ª(ç f é f T)(á f é f T)º),
	(undisch_rule(asm_rule
		ª(ç f é f T) x ä rubbishº)),
	gen_fail_msg "á_elim_rule" 7018 ["x"]),
	("á_elim_rule 7019",
	á_elim_rule ªx : BOOL ã BOOLº t_thm,
	(undisch_rule(simple_É_elim ªx:BOOL ã BOOLº (asm_rule
		ªÉ x : BOOL ã BOOL é  (ç f é f T) x ä rubbishº))),
	gen_fail_msg "á_elim_rule" 7019 []),
	("á_elim_rule 7054",
	á_elim_rule ªx : BOOLº (asm_rule ª(ç f é f T)(á f é f T)º),
	(undisch_rule(simple_É_elim ªx:BOOL ã BOOLº (asm_rule
		ªÉ x : BOOL ã BOOL é  (ç f é f T) x ä rubbishº))),
	gen_fail_msg "á_elim_rule" 7054 []),
	("á_elim_rule 7108",
	á_elim_rule ªy : BOOL ã BOOLº (asm_rule ª(ç f é f T)(á f é f T)º),
	(undisch_rule(simple_É_elim ªx:BOOL ã BOOLº (asm_rule
		ªÉ x : BOOL ã BOOL é  (ç f é f T) x ä rubbishº))),
	gen_fail_msg "á_elim_rule" 7108 ["y"])
	];
=TEX
\subsection{simple\_Ñ\_á\_rule}
=SML
store_mt_results mt_run [
	("simple_Ñ_á_rule",
	dest_thm o simple_Ñ_á_rule,
	asm_rule ªÑ x é f x yº,
	([ªÑ x é f x yº],ªf(á x é f x y) yº))
	];

store_mt_results mt_run_fail [
	("simple_Ñ_á_rule 7092",
	simple_Ñ_á_rule,
	t_thm,
	gen_fail_msg "simple_Ñ_á_rule" 7092 [])
	];
=TEX
\subsection{simple\_Ñ\_á\_conv}
=SML
store_mt_results mt_run [
	("simple_Ñ_á_conv",
	dest_thm o simple_Ñ_á_conv,
	ªÑ x é f x yº,
	([],mk_eq(ªÑ x é f x yº,ªf(á x é f x y) yº)))
	];

store_mt_results mt_run_fail [
	("simple_Ñ_á_conv 7093",
	simple_Ñ_á_conv,
	mk_t,
	gen_fail_msg "simple_Ñ_á_conv" 7093 [])
	];
=TEX
\subsection{ext\_rule}
=SML
store_mt_results mt_run [
	("ext_rule",
	dest_thm o ext_rule,
	asm_rule ª(f : 'a ã 'b) = gº,
	([ª(f : 'a ã 'b) = gº],ªÉ @_1 : 'a é (f @_1 : 'b) = g @_1º))
	];

store_mt_results mt_run_fail [
	("ext_rule 7023",
	ext_rule,
	t_thm,
	gen_fail_msg "ext_rule" 7023 []),
	("ext_rule 7026",
	ext_rule,
	refl_conv mk_t,
	gen_fail_msg "ext_rule" 7026[])
	];
=TEX
\subsection{asm\_intro}
=SML
store_mt_results mt_run [
	("asm_intro 1",
	dest_thm o asm_intro mk_t,
	t_thm,
	([mk_t],ªTº)),
	("asm_intro 2",
	dest_thm o asm_intro mk_t,
	(asm_rule mk_t),
	([mk_t],ªTº))
	];

store_mt_results mt_run_fail [
	("asm_intro 7002",
	asm_intro ª0º,
	t_thm,
	gen_fail_msg "asm_intro" 7002 [])
	];
=TEX
\subsection{asm\_elim}
=SML
store_mt_results mt_run [
	("asm_elim",
	dest_thm o asm_elimªa : BOOLº(undisch_rule (asm_rule ªa ä bº)),
	(undisch_rule (asm_rule ªåa ä bº)),
	([ªa ä bº,ªåa ä bº],ªb:BOOLº))
	];

store_mt_results mt_run_fail [
	("asm_elim 7002",
	asm_elim ª0º t_thm,
	t_thm,
	gen_fail_msg "asm_elim" 7002 []),
	("asm_elim 7029",
	asm_elim ªa:BOOLº t_thm,
	f_thm,
	gen_fail_msg "asm_elim" 7029 [])
	];
=TEX
\subsection{prove\_asm\_rule}
=SML
store_mt_results mt_run [
	("prove_asm_rule",
	dest_thm o prove_asm_rule t_thm,
	asm_rule mk_t,
	([],ªTº))
	];
=TEX
\subsection{asm\_inst\_type\_rule}
=SML
store_mt_results mt_run [("asm_inst_type_rule 1",
	dest_thm o asm_inst_type_rule [(BOOL, tva)],
	pq_ax,
	([],ªÑ p : BOOL é qº)),
	("inst_type_rule 2",
	dest_thm o asm_inst_type_rule [(BOOL, tv1)],
	pq_ax,
	([],ªÑ p : 'a é qº)),
	("inst_type_rule 3",
	dest_thm o asm_inst_type_rule [(BOOL, tva)],
	(asm_rule ªv = vº),
	([ª(v:BOOL) = vº],ª(v:BOOL) = vº))
	];

store_mt_results mt_run_fail [
	("asm_inst_type_rule 6007",
	asm_inst_type_rule [(BOOL, BOOL)],
	pq_ax,
	gen_fail_msg "asm_inst_type_rule" 6007 [])
];
=TEX
\subsection{%alpha%\_conv}
=SML
store_mt_results mt_run [
	("%alpha%_conv 1",
	dest_thm o %alpha%_conv ªplus 1 2º,
	ªplus 1 2º,
	([],ª(plus 1 2) = plus 1 2º)),
	("%alpha%_conv 2",
	dest_thm o %alpha%_conv ª(ç x é f x)º,
	ª(ç y é f y)º,
	([],ª(ç y é f y) = ç x é f xº))
	];

store_mt_results mt_run_fail [
	("%alpha%_conv 7033",
	%alpha%_conv ª1º,
	mk_t,
	gen_fail_msg "%alpha%_conv" 7033 []),
	("%alpha%_conv 7034",
	%alpha%_conv mk_f,
	mk_t,
	gen_fail_msg "%alpha%_conv" 7034 [])
	];
=TEX
\subsection{simple\_%alpha%\_conv}
=SML
store_mt_results mt_run [
	("simple_%alpha%_conv",
	dest_thm o simple_%alpha%_conv "new",
	ªç x éxº,
	([],ª(ç x :'aéx) = (ç new :'a é new)º)),
	("simple_%alpha%_conv",
	dest_thm o simple_%alpha%_conv "new",
	ªç x new : 'aé xº,
	([],ª(ç x new :'aéx) = (ç new new' :'a é new)º))
	];

store_mt_results mt_run_fail [
	("simple_%alpha%_conv 7030",
	simple_%alpha%_conv "new",
	mk_t,
	gen_fail_msg "simple_%alpha%_conv" 7030 []),
	("simple_%alpha%_conv 7035",
	simple_%alpha%_conv "new",
	ªç x : 'aé x = newº,
	gen_fail_msg "simple_%alpha%_conv" 7035 ["new"])
	];
=TEX
\section{CONVERSIONS AND CONVERSIONALS}
\subsection{fail\_conv}
=SML
store_mt_results mt_run_fail [
	("fail_conv",
	fail_conv,
	T,
	gen_fail_msg "fail_conv" 7061 [])
	];

=TEX
\subsection{fail\_with\_conv}
=SML
store_mt_results mt_run_fail [
	("fail_with_conv",
	fail_with_conv "testing",
	T,
	gen_fail_msg "fail_with_conv" 7075 ["testing"])
	];
=TEX
\subsection{THEN\_C}
=SML
store_mt_results mt_run [
	("THEN_C",
	dest_thm o suc_conv THEN_C (RAND_C suc_conv),
	ª3º,
	([],ª3 = Suc(Suc 1)º))
	];

store_mt_results mt_run_fail [
	("THEN_C 7101",
	(fn x => pq_ax) THEN_C suc_conv,
	ª3º,
	gen_fail_msg "THEN_C" 7101 []),
	("THEN_C 7102",
	suc_conv THEN_C (fn x => pq_ax),
	ª3º,
	gen_fail_msg "THEN_C" 7102 []),
	("THEN_C 1st fails",
	(fail_with_conv "testing THEN_C") THEN_C suc_conv,
	ª3º,
	gen_fail_msg "fail_with_conv" 7075 ["testing THEN_C"]),
	("THEN_C 2nd fails",
	suc_conv THEN_C (fail_with_conv "testing THEN_C"),
	ª3º,
	gen_fail_msg "fail_with_conv" 7075 ["testing THEN_C"])
	];

=TEX
\subsection{COMB\_C}
=SML
store_mt_results mt_run [
	("COMB_C 1",
	dest_thm o COMB_C (simple_%beta%_conv, suc_conv),
	ª(ç f é f) p 2º,
	([],ª((ç f é f) p 2) = p (Suc 1)º))
	];

store_mt_results mt_run_fail [
	("COMB_C f1",
	COMB_C (simple_%beta%_conv, suc_conv),
	ªp 2º,
	gen_fail_msg "simple_%beta%_conv" 6012 []),
	("COMB_C f2",
	COMB_C (simple_%beta%_conv, suc_conv),
	ª(ç f é f) p 0º,
	gen_fail_msg "suc_conv" 7100 []),
	("COMB_C f3",
	COMB_C (simple_%beta%_conv, suc_conv),
	ªp 0º,
	gen_fail_msg "simple_%beta%_conv" 6012 []),
	("COMB_C f3",
	COMB_C (simple_%beta%_conv, suc_conv),
	ª0º,
	gen_fail_msg "COMB_C" 7045 []),
	("COMB_C 7104",
	COMB_C ((fn x => t_thm), suc_conv),
	ªp 1º,
	gen_fail_msg "COMB_C" 7104 [])
	];


=TEX
\subsection{FURTHER\_C}
=SML
store_mt_results mt_run [
	("FURTHER_C a",
	dest_thm o suc_conv FURTHER_C (RAND_C suc_conv),
	ª3º,
	([],ª3 = Suc(Suc 1)º)),
	("FURTHER_C b",
	dest_thm o suc_conv FURTHER_C (fail_with_conv "testing FURTHER_C"),
	ª3º,
	([],ª3 = Suc 2º)),
	("FURTHER_C c",
	dest_thm o suc_conv FURTHER_C (fn x => pq_ax),
	ª3º,
	([],ª3 = Suc 2º)),
	("FURTHER_C d",
	dest_thm o (fn x => pq_ax) FURTHER_C suc_conv,
	ª3º,
	([],ªÑ p : 'a é qº))
	];

store_mt_results mt_run_fail [
	("FURTHER_C 1st fails",
	(fail_with_conv "testing FURTHER_C") FURTHER_C suc_conv,
	ª3º,
	gen_fail_msg "fail_with_conv" 7075 ["testing FURTHER_C"])
	];

=TEX
\subsection{ORELSE\_C}
=SML
store_mt_results mt_run [
	("ORELSE_C a",
	dest_thm o suc_conv ORELSE_C refl_conv,
	ª3º,
	([],ª3 = Suc 2º)),
	("ORELSE_C b",
	dest_thm o (fail_with_conv "testing ORELSE_C") ORELSE_C suc_conv,
	ª3º,
	([],ª3 = Suc 2º))
	];

store_mt_results mt_run_fail [
	("ORELSE_C both fail",
	(fail_with_conv "testing ORELSE_C a") ORELSE_C 
		(fail_with_conv "testing ORELSE_C b"),
	ª3º,
	gen_fail_msg "fail_with_conv" 7075 ["testing ORELSE_C b"])
	];

=TEX
\subsection{EITHER\_C}
=SML
store_mt_results mt_run [
	("EITHER_C a",
	dest_thm o suc_conv EITHER_C (RAND_C suc_conv),
	ª3º,
	([],ª3 = Suc(Suc 1)º)),
	("EITHER_C b",
	dest_thm o suc_conv EITHER_C (fail_with_conv "testing EITHER_C"),
	ª3º,
	([],ª3 = Suc 2º)),
	("EITHER_C c",
	dest_thm o suc_conv EITHER_C (fn x => pq_ax),
	ª3º,
	([],ª3 = Suc 2º)),
	("EITHER_C d",
	dest_thm o (fn x => pq_ax) EITHER_C suc_conv,
	ª3º,
	([],ªÑ p : 'a é qº)),
	("EITHER_C e",
	dest_thm o (fail_with_conv "testing EITHER_C") EITHER_C suc_conv,
	ª3º,
	([],ª3 = Suc 2º))
	];

store_mt_results mt_run_fail [
	("EITHER_C both fail",
	(fail_with_conv "testing EITHER_C a") EITHER_C 
		(fail_with_conv "testing EITHER_C b"),
	ª3º,
	gen_fail_msg "fail_with_conv" 7075 ["testing EITHER_C b"])
	];

=TEX
\subsection{REPEAT\_C}
=SML
store_mt_results mt_run [
	("REPEAT_C a",
	dest_thm o REPEAT_C strip_Ä_T_conv,
	ª((a Ä T) Ä T) Ä Tº,
	([ª(((a Ä T) Ä T) Ä T) = ((a Ä T) Ä T)º,
		ª((a Ä T) Ä T) = (a Ä T)º,
		ª(a Ä T) = aº],
	ª(((a Ä T) Ä T) Ä T) = aº)),
	("REPEAT_C b",
	dest_thm o REPEAT_C strip_Ä_T_conv,
	ªa: BOOLº,
	([],ª(a:BOOL) = aº))	
	];

=TEX
\subsection{REPEAT1\_C}
=SML
store_mt_results mt_run [
	("REPEAT1_C",
	dest_thm o REPEAT1_C strip_Ä_T_conv,
	ª((a Ä T) Ä T) Ä Tº,
	([ª(((a Ä T) Ä T) Ä T) = ((a Ä T) Ä T)º,
		ª((a Ä T) Ä T) = (a Ä T)º,
		ª(a Ä T) = aº],
	ª(((a Ä T) Ä T) Ä T) = aº))
	];

store_mt_results mt_run_fail [
	("REPEAT1_C 7075",
	REPEAT1_C strip_Ä_T_conv,
	ªa : BOOLº,
	gen_fail_msg "fail_with_conv" 7075 ["strip_Ä_T_conv"])
	];

=TEX
\subsection{LIST\_THEN\_C}
=SML
store_mt_results mt_run [
	("EVERY_C a",
	dest_thm o EVERY_C [strip_Ä_T_conv],
	ª((a Ä T) Ä T) Ä Tº,
	([ª(((a Ä T) Ä T) Ä T) = ((a Ä T) Ä T)º],
	ª(((a Ä T) Ä T) Ä T) = ((a Ä T) Ä T)º)),
	("EVERY_C b",
	dest_thm o EVERY_C [strip_Ä_T_conv, strip_Ä_T_conv, strip_Ä_T_conv],
	ª((a Ä T) Ä T) Ä Tº,
	([ª(((a Ä T) Ä T) Ä T) = ((a Ä T) Ä T)º,
		ª((a Ä T) Ä T) = (a Ä T)º,
		ª(a Ä T) = aº],
	ª(((a Ä T) Ä T) Ä T) = aº))
	];

store_mt_results mt_run_fail [
	("EVERY_C too many",
	EVERY_C [strip_Ä_T_conv, strip_Ä_T_conv, 
		strip_Ä_T_conv, strip_Ä_T_conv],
	ª((a Ä T) Ä T) Ä Tº,
	gen_fail_msg "fail_with_conv" 7075 ["strip_Ä_T_conv"]),
	("EVERY_C one fails",
	EVERY_C [strip_Ä_T_conv, strip_Ä_T_conv, 
		fail_with_conv "testing EVERY_C", strip_Ä_T_conv],
	ª((a Ä T) Ä T) Ä Tº,
	gen_fail_msg "fail_with_conv" 7075 ["testing EVERY_C"])
	];

store_mt_results mt_run_fail[
	("EVERY_C 7103",
	EVERY_C,
	[],
	gen_fail_msg "EVERY_C" 7103 [])
	];
=TEX
\subsection{LIST\_ORELSE\_C}
=SML
store_mt_results mt_run [
	("FIRST_C a",
	dest_thm o FIRST_C [strip_Ä_T_conv],
	ª((a Ä T) Ä T) Ä Tº,
	([ª(((a Ä T) Ä T) Ä T) = ((a Ä T) Ä T)º],
	ª(((a Ä T) Ä T) Ä T) = ((a Ä T) Ä T)º)),
	("FIRST_C b",
	dest_thm o FIRST_C [strip_Ä_T_conv, strip_Ä_T_conv, strip_Ä_T_conv],
	ª((a Ä T) Ä T) Ä Tº,
	([ª(((a Ä T) Ä T) Ä T) = ((a Ä T) Ä T)º],
	ª(((a Ä T) Ä T) Ä T) = ((a Ä T) Ä T)º)),
	("FIRST_C c",
	dest_thm o FIRST_C [strip_Ä_T_conv,
		fail_with_conv "testing FIRST_C"],
	ª((a Ä T) Ä T) Ä Tº,
	([ª(((a Ä T) Ä T) Ä T) = ((a Ä T) Ä T)º],
	ª(((a Ä T) Ä T) Ä T) = ((a Ä T) Ä T)º))
	];

store_mt_results mt_run_fail[
	("FIRST_C 7103",
	FIRST_C,
	[],
	gen_fail_msg "FIRST_C" 7103 [])
	];
=TEX
\subsection{CHANGED\_C}
=SML
store_mt_results mt_run [
	("CHANGED_C",
	dest_thm o CHANGED_C suc_conv,
	ª3º,
	([],ª3 = Suc 2º))
	];

store_mt_results mt_run_fail [
	("CHANGED_C 7032",
	CHANGED_C refl_conv,
	ª3º,
	gen_fail_msg "CHANGED_C" 7032 []),
	("CHANGED_C 7104",
	CHANGED_C (fn x => pq_ax),
	ª3º,
	gen_fail_msg "CHANGED_C" 7104 [])
	];

=TEX
\subsection{TRY\_C}
=SML
store_mt_results mt_run [
	("TRY_C a",
	dest_thm o TRY_C suc_conv,
	ª3º,
	([],ª3 = Suc 2º)),
	("TRY_C a",
	dest_thm o TRY_C fail_conv,
	ª3º,
	([],ª3 = 3º))
	];

=TEX
\subsection{RAND\_C}
=SML
store_mt_results mt_run [
	("RAND_C",
	dest_thm o RAND_C suc_conv,
	ªSuc 3º,
	([],ªSuc 3 = Suc(Suc 2)º))
	];

store_mt_results mt_run_fail [
	("RAND_C conv fails",
	RAND_C (fail_with_conv "testing RAND_C"),
	ªSuc 3º,
	gen_fail_msg "fail_with_conv" 7075 ["testing RAND_C"]),
	("RAND_C conv 7045",
	RAND_C suc_conv,
	ª3º,
	gen_fail_msg "RAND_C" 7045 []),
	("RAND_C conv 7104",
	RAND_C (fn x => pq_ax),
	ªSuc 3º,
	gen_fail_msg "RAND_C" 7104 [])
	];
	
=TEX
\subsection{RATOR\_C}
=SML
store_mt_results mt_run [
	("RATOR_C",
	dest_thm o RATOR_C simple_%beta%_conv,
	ª(ç x y : Ü é plus x y) 3 4 : Üº,
	([],ª(ç x y : Ü é plus x y) 3 4  = ((ç y : Ü é plus 3 y) 4 : Ü)º))
	];

store_mt_results mt_run_fail [
	("RATOR_C conv fails",
	RATOR_C (fail_with_conv "testing RATOR_C"),
	ªSuc 3º,
	gen_fail_msg "fail_with_conv" 7075 ["testing RATOR_C"]),
	("RATOR_C conv 7045",
	RATOR_C suc_conv,
	ª3º,
	gen_fail_msg "RATOR_C" 7045 []),
	("RATOR_C conv 7104",
	RATOR_C (fn x => pq_ax),
	ªSuc 3º,
	gen_fail_msg "RATOR_C" 7104 [])
	];
	
=TEX
\subsection{ABS\_C}
=SML
store_mt_results mt_run [
	("ABS_C",
	dest_thm o ABS_C suc_conv,
	ªç x é 3º,
	([],ª(ç x é 3) = (ç x é Suc 2)º))
	];

store_mt_results mt_run_fail [
	("ABS_C conv fails",
	ABS_C (fail_with_conv "testing ABS_C"),
	ªç x é Suc 3º,
	gen_fail_msg "fail_with_conv" 7075 ["testing ABS_C"]),
	("ABS_C conv 7030",
	ABS_C suc_conv,
	ª3º,
	gen_fail_msg "ABS_C" 7030 []),
	("ABS_C conv 7104",
	ABS_C (fn x => pq_ax),
	ªç x é Suc 3º,
	gen_fail_msg "ABS_C" 7104 [])
	];

=TEX
\subsection{BINDER\_C}
=SML
store_mt_results mt_run [
	("BINDER_C",
	dest_thm o BINDER_C (RAND_C suc_conv),
	ªÉ x é x = 3º ,
	([],ª(É x é x = 3) = (É x é x = Suc 2)º))
	];

store_mt_results mt_run_fail [
	("BINDER_C conv fails",
	BINDER_C (fail_with_conv "testing BINDER_C"),
	ªÉ x é x = 3º,
	gen_fail_msg "fail_with_conv" 7075 ["testing BINDER_C"]),
	("BINDER_C conv 7059",
	BINDER_C suc_conv,
	ª3º,
	gen_fail_msg "BINDER_C" 7059 []),
	("BINDER_C conv 7104",
	BINDER_C (fn x => pq_ax),
	ªÉ x é x = 3º,
	gen_fail_msg "BINDER_C" 7104 [])
	];

=TEX
\subsection{SUB\_C}
=SML
store_mt_results mt_run [
	("SUB_C a",
	dest_thm o SUB_C suc_conv,
	v1,
	([],ª(v1:BOOL) = v1º)),
	("SUB_C b",
	dest_thm o SUB_C suc_conv,
	T,
	([],ªT = Tº)),
	("SUB_C c",
	dest_thm o SUB_C suc_conv,
	ªf 3º,
	([],ªf 3 = f (Suc 2)º)),
	("SUB_C d",
	dest_thm o SUB_C (RAND_C suc_conv),
	ªf 3 4º,
	([],ªf 3 4 = f (Suc 2) 4º)),
	("SUB_C e",
	dest_thm o SUB_C (RAND_C suc_conv ORELSE_C suc_conv),
	ªf 3 4º,
	([],ªf 3 4 = f (Suc 2) (Suc 3)º)),
	("SUB_C f",
	dest_thm o SUB_C suc_conv,
	ªç x é 3º,
	([],ª(ç x é 3) = (ç x é (Suc 2))º)),
	("SUB_C g",
	dest_thm o SUB_C (fail_with_conv "testing SUB_C"),
	ªf x : BOOLº,
	([],ª(f x : BOOL) = (f x)º)),
	("SUB_C h",
	dest_thm o SUB_C (fn x => pq_ax),
	ªf x : BOOLº,
	([],ª(f x : BOOL) = (f x)º))
	];
=TEX
\subsection{SUB1\_C}
=SML
store_mt_results mt_run [
	("SUB1_C a",
	dest_thm o SUB1_C suc_conv,
	ªf 3º,
	([],ªf 3 = f (Suc 2)º)),
	("SUB1_C b",
	dest_thm o SUB1_C (RAND_C suc_conv),
	ªf 3 4º,
	([],ªf 3 4 = f (Suc 2) 4º)),
	("SUB1_C c",
	dest_thm o SUB1_C (RAND_C suc_conv ORELSE_C suc_conv),
	ªf 3 4º,
	([],ªf 3 4 = f (Suc 2) (Suc 3)º)),
	("SUB1_C d",
	dest_thm o SUB1_C suc_conv,
	ªç x é 3º,
	([],ª(ç x é 3) = (ç x é (Suc 2))º)),
	("SUB1_C e",
	dest_thm o SUB1_C (fn x => if is_comb x
		then pq_ax
		else suc_conv x),
	ªf 3 4º,
	([],ªf 3 4 = f 3 (Suc 3)º))
	];

store_mt_results mt_run_fail [
	("SUB1_C 7104 a",
	SUB1_C (fn x => pq_ax),
	ªf 3º,
	gen_fail_msg "SUB1_C" 7104 []),
	("SUB1_C 7104 b",
	SUB1_C (RAND_C (fn x => pq_ax) ORELSE_C (fn x => pq_ax)),
	ªf 3 4º,
	gen_fail_msg "SUB1_C" 7104 []),
	("SUB1_C 7104 c",
	SUB1_C (fn x => pq_ax),
	ªç x é 3º,
	gen_fail_msg "SUB1_C" 7104 []),
	("SUB1_C 7105 a",
	SUB1_C suc_conv,
	v1,
	gen_fail_msg "SUB1_C" 7105 []),
	("SUB1_C 7105 b",
	SUB1_C suc_conv,
	T,
	gen_fail_msg "SUB1_C" 7105 []),
	("SUB1_C conv fails",
	SUB1_C (fail_with_conv "testing SUB1_C"),
	ªf xº,
	gen_fail_msg "fail_with_conv" 7075 ["testing SUB1_C"])
	];
=TEX
\subsection{ONCE\_MAP\_C}
=SML
store_mt_results mt_run [
	("ONCE_MAP_C",
	dest_thm o ONCE_MAP_C simple_%beta%_conv,
	sample,
	([],mk_eq(sample,
	ª(ç x y é ((ç x é å x) x Ä y) Ä (ç p é p) q) T qº)))
	];
=TEX
The failure message if a conversion applies nowhere is
a bit non-deterministic.
=SML
store_mt_results mt_run_fail [
	("ONCE_MAP_C cnv fails everywhere",
	ONCE_MAP_C (fail_with_conv "testing ONCE_MAP_C"),
	sample,
	gen_fail_msg "ONCE_MAP_C" 7005 [])
	];
=TEX
\subsection{MAP\_C}
=SML
store_mt_results mt_run [
	("MAP_C",
	dest_thm o MAP_C simple_%beta%_conv,
	sample,
	([],mk_eq(sample,
	ª((ç x é å x) T Ä q) Ä qº)))
	];
=TEX
The failure message if a conversion applies nowhere is
a bit non-deterministic.
=SML
store_mt_results mt_run_fail [
	("MAP_C cnv fails everywhere",
	MAP_C (fail_with_conv "testing MAP_C"),
	sample,
	gen_fail_msg "MAP_C" 7005 [])
	];
=TEX
\subsection{REPEAT\_MAP\_C}
=SML
store_mt_results mt_run [
	("REPEAT_MAP_C",
	dest_thm o REPEAT_MAP_C simple_%beta%_conv,
	sample,
	([],mk_eq(sample,
	ª((å T) Ä q) Ä qº)))
	];
=TEX
The failure message if a conversion applies nowhere is
a bit non-deterministic.
=SML
store_mt_results mt_run_fail [
	("REPEAT_MAP_C cnv fails everywhere",
	REPEAT_MAP_C (fail_with_conv "testing REPEAT_MAP_C"),
	sample,
	gen_fail_msg "REPEAT_MAP_C" 7005 [])
	];
=TEX
\subsection{TOP\_MAP\_C}
This will recieve much heavier testing in the rewriting inference rules tests in \cite{DS/FMU/IED/MDT026}.
=SML
store_mt_results mt_run [
	("TOP_MAP_C",
	dest_thm o TOP_MAP_C simple_%beta%_conv,
	sample,
	([],mk_eq(sample,
	ª((å T) Ä q) Ä qº)))
	];
=TEX
The failure message if a conversion applies nowhere is
a bit non-deterministic.
=SML
store_mt_results mt_run_fail [
	("TOP_MAP_C cnv fails everywhere",
	TOP_MAP_C (fail_with_conv "testing TOP_MAP_C"),
	sample,
	gen_fail_msg "TOP_MAP_C" 7005 [])
	];
=TEX
\subsection{conv\_rule}
=SML
store_mt_results mt_run [
	("conv_rule",
	dest_thm o conv_rule (REPEAT_MAP_C suc_conv),
	div2_conv (list_mk_comb(tDiv,[ª3º,ª2º])),
	([],mk_eq(list_mk_comb(tDiv,[ªSuc(Suc(Suc 0))º,ª(Suc(Suc 0))º]),
		ªSuc 0º)))
	];

store_mt_results mt_run_fail [
	("conv_rule 7104",
	conv_rule (fn x => pq_ax),
	asm_rule T,
	gen_fail_msg "conv_rule" 7104 []),
	("conv_rule cnv fails",
	conv_rule (fail_with_conv "testing conv_rule"),
	asm_rule T,
	gen_fail_msg "fail_with_conv" 7075 ["testing conv_rule"])
	];

=TEX
\section{END OF TESTS}
=SML
summarize_mt_results();
=TEX
Undo theory creation, etc
=SML
(*
open_theory start_theory;
delete_theory "out_of_scope_mdt007";
delete_theory "test_mdt007";
*)
(* PolyML.quit(); *)
=TEX
\section{UNTESTED ERROR MESSAGES}
The following are not tested for various reasons:

\begin{tabular}{| l | p{4.5in} |}\hline
Test & Comment \\ \hline
\hline
\end{tabular}
=TEX
\twocolumn[\section{INDEX}]
\small
\printindex
=TEX
\end{document}
