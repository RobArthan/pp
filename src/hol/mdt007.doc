=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Module Tests for the Derived Rules of Inference}  %% Mandatory field
\def\TPPheadtitle{Module Tests for the Derived Rules of Inference}
\TPPref{DS/FMU/IED/MDT007}  %% Mandatory field
\def\SCCSversion{$Revision$ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{ML Literate Script}
\TPPkeywords{}
\TPPauthor{K.Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{K.Blackburn & WIN01\\D.J.~King & WIN01}
\TPPauthorisation{R.D.Arthan & Project Manager}
\TPPabstract{A set of module tests are given for the 
the derived inference rules.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History} 
\begin{description}
\item [Issue 1.1]
First draft version.
Primitive and built-in inference rules, and conversionals
all module tested.
\item [Issue 1.2]
Corrected the test ``simple$\-\_$abs$\-\_$rule 6025'',
removed printing utilities (as unused),
and changed the test theory names used.
\item [Issue 1.3]
Added a test for $list\_simple\_µ\_elim$ with duplicate quantifiers.
\item [1.4, 1.5, 1.6]
Corrected some tests.
Issue 1.6 provides full coverage of functions and errors
noted in issue 1.13 of \cite{DS/FMU/IED/DTD007}.
\item [1.7]
Reacted to errors 6036, 6065, 6066 now coming from $error$.
Changed $\_TRAVERSE\_C$ to $\_MAP\_C$.
Changed error tests of $?\_MAP\_C$.
The prefix $simple$ is moved to being the first prefix, bar $icl'$.
Order of $all\_µ\_intro$ quantifiers checked.
\item[Issue 1.8]
$simple\_¶\_elim$ changed in accord with issue 1.15 detailed design change.
\item[Issue 1.9]
Added $id\_conv$.
\item [Issue 1.10]
Reacted to change in representation of character literals.
\item [Issue 1.11,1.12]
Changes due to changes from ID0016.
\item [Issue 1.13]
Reacting to issue 1.18 of \cite{DS/FMU/IED/DTD006}.
\item [Issue 1.14]
Renamings of functions containing the name atom $simple$,
and renaming of $aconv$.
\item [Issue 1.15]
Tidying up prior to a desk check.
\item [Issue 1.16]
Reacting to changes in issue 1.25 of \cite{DS/FMU/IED/DTD007}.
\item [Issue 1.17]
Reacting to issue 1.27 of \cite{DS/FMU/IED/DTD007}.
\item [Issue 1.18]
Corrected for fixity of $Div$ and $Mod$.
\item [Issue 1.19]
Added $plus\_conv$, removed $div2\_conv$ and $mod2\_conv$,
following change request CR007.
\item [Issue 1.20]
Added infix call for "+",
reacted to changes in $simple\_¶\_elim/intro$,
removed duplicate label $TRY\_C\ a$.

\item[Issue 1.21, \FormatDate{92/01/20} ] Updated to use new fonts.
\item[Issue 1.22 (23rd January 1992)]
$new\_axiom$, $simple\_new\-\_type\-\_defn$, $new\-\_type\-\_defn$
all changed to take lists of keys, rather than single ones.

\end{description}
\subsection{Changes Forecast}
None.
\section{GENERAL}
\subsection{Scope}
This document contains the module testing of the Derived Rules of Inference, required by \cite{DS/FMU/IED/HLD009}.
The design is in \cite{DS/FMU/IED/DTD007}
and it is
implemented in \cite{DS/FMU/IED/IMP007}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains the module testing of the material given a design in \cite{DS/FMU/IED/DTD007},
following the test policy given in that document and the general policy given in \cite{DS/FMU/IED/PLN008}.

\subsubsection{Dependencies}
This document is derived from the detailed design in \cite{DS/FMU/IED/DTD007},
and is further influenced by the implementation, in  \cite{DS/FMU/IED/IMP007}.
\subsubsection{Deficiencies}
The coverage of the tests, as called for by the test specification, may currently be incomplete.
\section{INITIALISATION}
Get a new theory to work in:
=SML
val start_theory = get_current_theory_name();
new_theory "test_mdt007";
=TEX
Initialise the test package:
=SML
usefile "dtd013.sml";
usefile "imp013.sml";
init_mt_results();
=TEX
\section{VALUE BINDINGS}
=SML
val v1 = mk_var("v1", BOOL);
val v2 = mk_var("v2", BOOL);
val tv1 = mk_vartype "'1";
val tv2 = mk_vartype "'2";
val tva = mk_vartype "'a";
val N0 = mk_î 0;
val N1 = mk_î 1;
val N2 = mk_î 2;
=TEX
Test scopes:
=SML
val Deleted = new_const ("Deleted",BOOL);
val const_deleted_thm = asm_rule ¬p = q®;
val ignore_warnings = set_flag("ignore_warnings",true); 
val side_effect = delete_const Deleted;
val side_effect = set_flag("ignore_warnings",ignore_warnings); 
val side_effect = new_theory "out_of_scope_mdt007";
val out_of_scope_thm = asm_rule ¬p = q®;
val side_effect = open_theory "test_mdt007";
val side_effect = new_theory "deleted_theory_mdt007";
val del_theory_index = (string_of_int (icl'Kernel.icl'get_current_theory_name()));

val deleted_thm = asm_rule ¬p = q®;
val side_effect = open_theory "test_mdt007";
val side_effect = delete_theory "deleted_theory_mdt007";

val p_eq_q_thm = asm_rule ¬p = q®;
val pq_thm = asm_rule ¬¶ p · q®;
val pq_ax = new_axiom(["pq_ax"], ¬¶ p · q®);
val t_eq_f = asm_rule ¬T = F®;
val q_eq_F = new_axiom(["q_eq_F"],¬q = F®);
val T = ¬T®;
val F = ¬F®;
val so_isso_axiom = new_axiom(["so_isso_axiom"], ¬¶ So IsSo · So ´ IsSo®);
val so_isso_def = new_specification(["So","IsSo"],2,so_isso_axiom);
val so_axiom = new_axiom(["so_axiom"],¬So®);
val î = new_type("î",0) handle _ => î;
val tplus = mk_const("+",mk_­_type(î,mk_­_type(î,î)));
declare_infix (300,"+");
val Suc = new_const("Suc",mk_­_type(î, î))
	handle _ => mk_const("Suc",mk_­_type(î, î));

val strip_±_T_conv: CONV = ( fn (tm : TERM) =>
	if is_± tm
	then let val (p,q) = dest_± tm
		in
		if q = T
		then asm_rule(mk_eq (tm, p))
		else fail_with_conv "strip_±_T_conv" tm
	end
	else fail_with_conv "strip_±_T_conv" tm
);

val sample = ¬(Ì f x y · (f x ± y) ± (Ì p · p) q)(Ì x · ³ x) T ((Ì p · p) q)®;
=TEX
\section{THE TESTS - PRIMITVES AND BUILT-IN}
The tests proper:
\subsection{subst\_rule}
=SML
store_mt_results mt_run_fail[
	("subst_rule 6001 1",
	subst_rule [] ¬¶ p · q1®,
	pq_thm,
	gen_fail_msg "subst_rule" 6001 ["¬¶ p· q1®","¬¶ p· q®"]),
	("subst_rule 6001 2",
	subst_rule [(t_eq_f, ¬q:BOOL®)] ¬T ¤ q®,
	t_eq_f,
	gen_fail_msg "subst_rule" 6001 ["¬T ¤ T®","¬T ¤ F®"])];
store_mt_results mt_run_error [("subst_rule 6036 1",
	subst_rule [] ¬¶ p · q®,
	deleted_thm,
	gen_fail_msg "icl'subst_rule" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("subst_rule 6065 1",
	subst_rule [] ¬¶ p · q®,
	const_deleted_thm,
	gen_fail_msg "icl'subst_rule" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("subst_rule 6066 1",
	subst_rule [] ¬¶ p · q®,
	out_of_scope_thm,
	gen_fail_msg "icl'subst_rule" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"]),
	("subst_rule 6036 2",
	subst_rule [(deleted_thm,¬q :'a®)] ¬T = F®,
	t_eq_f,
	gen_fail_msg "icl'subst_rule" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("subst_rule 6065 2",
	subst_rule [(const_deleted_thm,¬q :'a®)] ¬T = F®,
	t_eq_f,
	gen_fail_msg "icl'subst_rule" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("subst_rule 6066 2",
	subst_rule [(out_of_scope_thm,¬q :'a®)] ¬T = F®,
	t_eq_f,
	gen_fail_msg "icl'subst_rule" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"])];

store_mt_results mt_run_fail [("subst_rule 6002",
	subst_rule,
	[(asm_rule T, ¬p:BOOL®)],
	gen_fail_msg "subst_rule" 6002 ["T ô T"]),
	("subst_rule 3007",
	subst_rule,
	[(t_def, ¬T®)],
	gen_fail_msg "subst_rule" 3007 ["¬T®"]),
	("subst_rule 6029",
	subst_rule,
	[(t_def, ¬q : î®)],
	gen_fail_msg "subst_rule" 6029 ["ô T ¤ (Ì x· x) = (Ì x· x)","¬q®"])];

store_mt_results mt_run [("subst_rule_1",
	dest_thm o subst_rule [] ¬¶ p · q®,
	pq_thm,
	dest_thm pq_thm),
	("subst_rule_2",
	dest_thm o subst_rule [] ¬¶ p1 · q®,
	pq_thm,
	([¬¶ p · q®],¬¶ p1 · q®)),
	("subst_rule_3",
	dest_thm o subst_rule [(t_eq_f, ¬q : BOOL®)] ¬q = F®,
	t_eq_f,
	([¬T = F®],¬F = F®)),
	("subst_rule_4",
	dest_thm o subst_rule [(t_def, ¬q : BOOL®)] ¬q = F®,
	t_eq_f,
	([¬T = F®],¬((Ì x:BOOL·x)=(Ì x ·x)) = F®))];

=TEX
\subsection{simple\_Ì\_eq\_rule}
=SML
store_mt_results mt_run [("simple_Ì_eq_rule",
	dest_thm o simple_Ì_eq_rule ¬q : BOOL®,
	q_eq_F,
	([],¬(Ì q:BOOL · q) = (Ì q · F)®))];

store_mt_results mt_run_fail[
	("simple_Ì_eq_rule 3007",
	simple_Ì_eq_rule T,
	q_eq_F,
	gen_fail_msg "simple_Ì_eq_rule" 3007 ["¬T®"]),
	("simple_Ì_eq_rule 6005",
	simple_Ì_eq_rule ¬q : BOOL®,
	asm_rule ¬q = F®,
	gen_fail_msg "simple_Ì_eq_rule" 6005 ["¬q®"]),
	("simple_Ì_eq_rule 6020",
	simple_Ì_eq_rule ¬q : BOOL®,
	pq_ax,
	gen_fail_msg "simple_Ì_eq_rule" 6020 ["ô ¶ p· q"])];
store_mt_results mt_run_error [("simple_Ì_eq_rule 6036",
	simple_Ì_eq_rule ¬q : BOOL®,
	deleted_thm,
	gen_fail_msg "icl'simple_Ì_eq_rule" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("simple_Ì_eq_rule 6065",
	simple_Ì_eq_rule ¬q : BOOL®,
	const_deleted_thm,
	gen_fail_msg "icl'simple_Ì_eq_rule" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("simple_Ì_eq_rule 6066",
	simple_Ì_eq_rule ¬q : BOOL®,
	out_of_scope_thm,
	gen_fail_msg "icl'simple_Ì_eq_rule" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"])];
=TEX
\subsection{inst\_type\_rule}
So far unconverted tests:
=SML
store_mt_results mt_run [("inst_type_rule_1",
	dest_thm o inst_type_rule [(BOOL, tva)],
	pq_ax,
	([],¬¶ p : BOOL · q®)),
	("inst_type_rule_2",
	dest_thm o inst_type_rule [(BOOL, tv1)],
	pq_ax,
	([],¬¶ p : 'a · q®))];

store_mt_results mt_run_fail [("inst_type_rule 6006",
	inst_type_rule [(BOOL, tva)],
	(asm_rule ¬v = v®),
	gen_fail_msg "inst_type_rule" 6006 ["'a"]),
	("inst_type_rule 3019",
	inst_type_rule [(BOOL, BOOL)],
	pq_ax,
	gen_fail_msg "inst_type_rule" 3019 ["¬:BOOL®"])];
store_mt_results mt_run_error [("inst_type_rule 6036",
	inst_type_rule [(BOOL, tva)],
	deleted_thm,
	gen_fail_msg "icl'inst_type_rule" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("inst_type_rule 6065",
	inst_type_rule [(BOOL, tva)],
	const_deleted_thm,
	gen_fail_msg "icl'inst_type_rule" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("inst_type_rule 6066",
	inst_type_rule [(BOOL, tva)],
	out_of_scope_thm,
	gen_fail_msg "icl'inst_type_rule" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"])
];
=TEX
\subsection{´\_intro}
=SML
store_mt_results mt_run [("´_intro 1",
	dest_thm o ´_intro v1,
	pq_ax,
	([],¬v1 ´ ¶ p · q®)),
	("´_intro 2",
	dest_thm o ´_intro v1,
	asm_rule v1,
	([],¬v1 ´ v1®))];

store_mt_results mt_run_fail [("´_intro 3031",
	´_intro N1,
	pq_ax,
	gen_fail_msg "´_intro" 3031 ["¬1®"])];
store_mt_results mt_run_error [("´_intro 6036",
	´_intro v1,
	deleted_thm,
	gen_fail_msg "icl'´_intro" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("´_intro 6065",
	´_intro v1,
	const_deleted_thm,
	gen_fail_msg "icl'´_intro" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("´_intro 6066",
	´_intro v1,
	out_of_scope_thm,
	gen_fail_msg "icl'´_intro" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"])];
=TEX
\subsection{´\_elim}
=SML
store_mt_results mt_run [("´_elim_1",
	dest_thm o ´_elim  so_isso_def,
	so_axiom,
	([],¬IsSo®))];

store_mt_results mt_run [("´_mp_rule",
	dest_thm o ´_mp_rule  so_isso_def,
	so_axiom,
	([],¬IsSo®))];

store_mt_results mt_run_fail [("´_elim 6010",
	´_elim so_isso_axiom,
	so_axiom,
	gen_fail_msg "´_elim" 6010 ["ô ¶ So IsSo· So ´ IsSo"]),
	("´_elim 6011",
	´_elim so_isso_def,
	t_thm,
	gen_fail_msg "´_elim" 6011 ["ô So ´ IsSo","ô T"])];
store_mt_results mt_run_error [("´_elim 6036 1",
	´_elim so_isso_def,
	deleted_thm,
	gen_fail_msg "icl'´_elim" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("´_elim 6065 1",
	´_elim so_isso_def,
	const_deleted_thm,
	gen_fail_msg "icl'´_elim" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("´_elim 6066 1",
	´_elim so_isso_def,
	out_of_scope_thm,
	gen_fail_msg "icl'´_elim" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"]),
	("´_elim 6036 2",
	´_elim deleted_thm,
	so_axiom,
	gen_fail_msg "icl'´_elim" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("´_elim 6065 2",
	´_elim const_deleted_thm,
	so_axiom,
	gen_fail_msg "icl'´_elim" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("´_elim 6066 2",
	´_elim out_of_scope_thm,
	so_axiom,
	gen_fail_msg "icl'´_elim" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"])];
=TEX
\subsection{asm\_rule}
=SML
store_mt_results mt_run [("asm_rule 1",
	dest_thm o asm_rule,
	mk_const("rubbish",BOOL),
	([mk_const("rubbish",BOOL)],mk_const("rubbish",BOOL)))];

store_mt_results mt_run_fail [("asm_rule 3031",
	asm_rule,
	N0,
	gen_fail_msg "asm_rule" 3031 ["¬0®"])];
=TEX
\subsection{refl\_conv}
=SML
store_mt_results mt_run [("refl_conv 1",
	dest_thm o refl_conv,
	mk_const("rubbish",BOOL),
	([],mk_eq(mk_const("rubbish",BOOL), mk_const("rubbish",BOOL)))),
	("refl_conv 2",
	dest_thm o refl_conv,
	mk_const("rubbish",î),
	([],mk_eq(mk_const("rubbish",î), mk_const("rubbish",î))))];
=TEX
\subsection{simple\_$\beta$\_conv}
=SML
store_mt_results mt_run [("simple_%beta%_conv 1",
	dest_thm o simple_%beta%_conv,
	¬(Ì p : 'a · f p) q®,
	([],¬((Ì p : 'a · f p) q) = f q®)),
	("simple_%beta%_conv 2",
	dest_thm o simple_%beta%_conv,
	¬(Ì p q: '1 · f p q) q®,
	([],¬((Ì p q: '1 · f p q) q) = (Ì q': '1 · f q q')®))];

store_mt_results mt_run_fail [("simple_%beta%_conv 6012",
	simple_%beta%_conv,
	¬(Ì p q: '1 · f p q)®,
	gen_fail_msg "simple_%beta%_conv" 6012 ["¬Ì p q· f p q®"])];
=TEX
\subsection{suc\_conv}
=SML
store_mt_results mt_run [("suc_conv 1",
	dest_thm o suc_conv,
	¬3®,
	([],¬3 = Suc 2®))];

store_mt_results mt_run_fail [("suc_conv 3026",
	suc_conv,
	mk_const("Number",î),
	gen_fail_msg "suc_conv" 3026 ["¬Number®"]),
	("suc_conv 7100",
	suc_conv,
	¬0®,
	gen_fail_msg "suc_conv" 7100 ["¬0®"])];
=TEX
\subsection{string\_conv}
=SML
store_mt_results mt_run [("string_conv_1",
	dest_thm o string_conv,
	¬"abc"®,
	([],¬"abc" = mk_const("Cons",
		mk_­_type(CHAR,mk_­_type(STRING,STRING)))® 
		mk_char "a"® "bc"®)),
	("string_conv_2",
	dest_thm o string_conv,
	¬""®,
	([],¬"" = mk_const("Nil",STRING)®®))];

store_mt_results mt_run_fail [("string_conv 3025",
	string_conv,
	N0,
	gen_fail_msg "string_conv" 3025 ["¬0®"])];
=TEX
\subsection{char\_conv}
=SML
store_mt_results mt_run [("char_conv_1",
	dest_thm o char_conv,
	mk_char "a",
	([],¬mk_char "a"® = mk_const("AbsChar",
		mk_­_type(î,CHAR))® 97®)),
	("char_conv_2",
	dest_thm o char_conv,
	mk_char "î",
	([],¬mk_char "î"® = 
		mk_const("AbsChar",mk_­_type(î,CHAR))® 238®))];

store_mt_results mt_run_fail [("char_conv 3024",
	char_conv,
	mk_const("he",CHAR),
	gen_fail_msg "char_conv" 3024 ["¬he®"])];

=TEX
\subsection{eq\_sym\_rule}
=SML
store_mt_results mt_run[
	("eq_sym_rule_1",
	dest_thm o eq_sym_rule,
	asm_rule¬0=1®,
	([¬0=1®],¬1=0®)),
	("eq_sym_rule_2",
	dest_thm o eq_sym_rule,
	asm_rule¬T=F®,
	([¬T=F®],¬F=T®))];

store_mt_results mt_run_fail[
	("eq_sym_rule 6020",
	eq_sym_rule,
	pq_ax,
	gen_fail_msg "eq_sym_rule" 6020 ["ô ¶ p· q"])];
store_mt_results mt_run_error [("eq_sym_rule 6036",
	eq_sym_rule,
	deleted_thm,
	gen_fail_msg "icl'eq_sym_rule" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("eq_sym_rule 6065",
	eq_sym_rule,
	const_deleted_thm,
	gen_fail_msg "icl'eq_sym_rule" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("eq_sym_rule 6066",
	eq_sym_rule,
	out_of_scope_thm,
	gen_fail_msg "icl'eq_sym_rule" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"])];
=TEX
\subsection{list\_simple\_µ\_elim}
=SML
store_mt_results mt_run[
	("list_simple_µ_elim_1",
	dest_thm o list_simple_µ_elim [F],
	asm_rule ¬µ v1 · v1 ´ T®,
	([¬µ v1 · v1 ´ T®],¬F ´ T®)),
	("list_simple_µ_elim_2",
	dest_thm o list_simple_µ_elim [¬v2 : BOOL®],
	asm_rule¬µ v1 · (Ì v2: BOOL · v1) T®,
	([¬µ v1 · (Ì v2: BOOL · v1) T®],¬(Ì v2': BOOL · v2) T : BOOL®)),
	("list_simple_µ_elim_3",
	dest_thm o list_simple_µ_elim [¬v2 : BOOL®,¬v2 : BOOL®],
	asm_rule¬µ v1 v2 · v1 ± v2®,
	([¬µ v1 v2 · v1 ± v2®],¬v2 ± v2®)),
	("list_simple_µ_elim_4",
	dest_thm o list_simple_µ_elim [¬v1 : BOOL®,¬v1 : BOOL®],
	asm_rule¬µ v1 v2 · v1 ± v2®,
	([¬µ v1 v2 · v1 ± v2®],¬v1 ± v1®)),
	("list_simple_µ_elim_5",
	dest_thm o list_simple_µ_elim [mk_t,mk_f],
	asm_rule¬µ x x : BOOL · x®,
	([¬µ x x : BOOL · x®],¬F®))];

store_mt_results mt_run_fail[
	("list_simple_µ_elim 6018",
	list_simple_µ_elim [T],
	pq_ax,
	gen_fail_msg "list_simple_µ_elim" 6018 ["ô ¶ p· q","1"]),
	("list_simple_µ_elim 3012",
	list_simple_µ_elim [N0],
	asm_rule¬µ v1 · v1 ´ T®,
	gen_fail_msg "list_simple_µ_elim" 3012 ["¬0®","¬v1®"])];
store_mt_results mt_run_error [("list_simple_µ_elim 6036",
	list_simple_µ_elim [v1],
	deleted_thm,
	gen_fail_msg "icl'list_simple_µ_elim" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("list_simple_µ_elim 6065",
	list_simple_µ_elim [v1],
	const_deleted_thm,
	gen_fail_msg "icl'list_simple_µ_elim" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("list_simple_µ_elim 6066",
	list_simple_µ_elim [v1],
	out_of_scope_thm,
	gen_fail_msg "icl'list_simple_µ_elim" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"])];
=TEX
\subsection{simple\_µ\_elim}
=SML
store_mt_results mt_run[
	("simple_µ_elim_1",
	dest_thm o simple_µ_elim F,
	asm_rule ¬µ v1 · v1 ´ T®,
	([¬µ v1 · v1 ´ T®],¬F ´ T®)),
	("simple_µ_elim_2",
	dest_thm o simple_µ_elim ¬v2 : BOOL®,
	asm_rule¬µ v1 · (Ì v2: BOOL · v1) T®,
	([¬µ v1 · (Ì v2: BOOL · v1) T®],¬(Ì v2': BOOL · v2) T : BOOL®))];

store_mt_results mt_run_fail[
	("simple_µ_elim 7039",
	simple_µ_elim T,
	pq_ax,
	gen_fail_msg "simple_µ_elim" 7039 ["ô ¶ p· q"]),
	("simple_µ_elim 3012",
	simple_µ_elim N0,
	asm_rule¬µ v1 · v1 ´ T®,
	gen_fail_msg "simple_µ_elim" 3012 ["¬v1®","¬0®"])];
=TEX
\subsection{eq\_trans\_rule}
=SML
store_mt_results mt_run[
	("eq_trans_rule_1",
	dest_thm o eq_trans_rule (asm_rule ¬0=1®),
	asm_rule ¬1 = 2®,
	([¬0=1®, ¬1 = 2®],¬0 = 2®))];

store_mt_results mt_run_fail[
	("eq_trans_rule 6020 a",
	eq_trans_rule pq_ax,
	asm_rule¬1=2®,
	gen_fail_msg "eq_trans_rule" 6020 ["ô ¶ p· q"]),
	("eq_trans_rule 6020 b",
	eq_trans_rule (asm_rule¬1=2®),
	pq_ax,
	gen_fail_msg "eq_trans_rule" 6020 ["ô ¶ p· q"]),
	("eq_trans_rule 6022 a",
	eq_trans_rule (asm_rule ¬0=1®),
	p_eq_q_thm,
	gen_fail_msg "eq_trans_rule" 6022 ["0 = 1 ô 0 = 1", "p = q ô p = q"]),
	("eq_trans_rule 6022 b",
	eq_trans_rule (asm_rule ¬0=1®),
	asm_rule ¬0 = 2®,
	gen_fail_msg "eq_trans_rule" 6022 ["0 = 1 ô 0 = 1", "0 = 2 ô 0 = 2"])];
store_mt_results mt_run_error [("eq_trans_rule 6036 a",
	eq_trans_rule so_isso_axiom,
	deleted_thm,
	gen_fail_msg "icl'eq_trans_rule" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("eq_trans_rule 6065 a",
	eq_trans_rule so_isso_axiom,
	const_deleted_thm,
	gen_fail_msg "icl'eq_trans_rule" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("eq_trans_rule 6066 a",
	eq_trans_rule so_isso_axiom,
	out_of_scope_thm,
	gen_fail_msg "icl'eq_trans_rule" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"]),
	("eq_trans_rule 6036 b",
	eq_trans_rule deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'eq_trans_rule" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("eq_trans_rule 6065 b",
	eq_trans_rule const_deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'eq_trans_rule" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("eq_trans_rule 6066 b",
	eq_trans_rule out_of_scope_thm,
	so_isso_axiom,
	gen_fail_msg "icl'eq_trans_rule" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"])];
=TEX
\subsection{mk\_app\_rule}
=SML
store_mt_results mt_run[
	("mk_app_rule_1",
	dest_thm o mk_app_rule (asm_rule¬(f : î ­ î) = g®),
	asm_rule ¬1 = 2®,
	([¬(f : î ­ î) = g®,¬1 = 2®],¬(f 1 : î) = g 2®))];

store_mt_results mt_run_fail[
	("mk_app_rule 6020 a",
	mk_app_rule pq_ax,
	asm_rule ¬1 = 2®,
	gen_fail_msg "mk_app_rule" 6020 ["ô ¶ p· q"]),
	("mk_app_rule 6020 b",
	mk_app_rule (asm_rule ¬1=2®),
	pq_ax,
	gen_fail_msg "mk_app_rule" 6020 ["ô ¶ p· q"]),
	("mk_app_rule 6023 a",
	mk_app_rule (refl_conv T ),
	(asm_rule ¬1=2®),
	gen_fail_msg "mk_app_rule" 6023 ["ô T ¤ T", "1 = 2 ô 1 = 2"]),
	("mk_app_rule 6023 b",
	mk_app_rule (asm_rule ¬0=1®),
	(asm_rule ¬0=2®),
	gen_fail_msg "mk_app_rule" 6023 ["0 = 1 ô 0 = 1", "0 = 2 ô 0 = 2"])];
store_mt_results mt_run_error [("mk_app_rule 6036 a",
	mk_app_rule so_isso_axiom,
	deleted_thm,
	gen_fail_msg "icl'mk_app_rule" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("mk_app_rule 6065 a",
	mk_app_rule so_isso_axiom,
	const_deleted_thm,
	gen_fail_msg "icl'mk_app_rule" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("mk_app_rule 6066 a",
	mk_app_rule so_isso_axiom,
	out_of_scope_thm,
	gen_fail_msg "icl'mk_app_rule" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"]),
	("mk_app_rule 6036 b",
	mk_app_rule deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'mk_app_rule" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("mk_app_rule 6065 b",
	mk_app_rule const_deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'mk_app_rule" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("mk_app_rule 6066 b",
	mk_app_rule out_of_scope_thm,
	so_isso_axiom,
	gen_fail_msg "icl'mk_app_rule" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"])];
=TEX
\subsection{¤\_mp\_rule}
=SML
store_mt_results mt_run[
	("¤_mp_rule_1",
	dest_thm o ¤_mp_rule t_eq_f,
	asm_rule ¬T®,
	([¬T = F®,¬T®],¬F®))];

store_mt_results mt_run_fail[
	("¤_mp_rule 6024",
	¤_mp_rule t_eq_f,
	(asm_rule ¬F®),
	gen_fail_msg "¤_mp_rule" 6024 ["T ¤ F ô T ¤ F", "F ô F"]),
	("¤_mp_rule 6030",
	¤_mp_rule (asm_rule ¬T®),
	t_eq_f,
	gen_fail_msg "¤_mp_rule" 6030 ["T ô T"])];
store_mt_results mt_run_error [("¤_mp_rule 6036 a",
	¤_mp_rule so_isso_axiom,
	deleted_thm,
	gen_fail_msg "icl'¤_mp_rule" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("¤_mp_rule 6065 a",
	¤_mp_rule so_isso_axiom,
	const_deleted_thm,
	gen_fail_msg "icl'¤_mp_rule" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("¤_mp_rule 6066 a",
	¤_mp_rule so_isso_axiom,
	out_of_scope_thm,
	gen_fail_msg "icl'¤_mp_rule" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"]),
	("¤_mp_rule 6036 b",
	¤_mp_rule deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'¤_mp_rule" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("¤_mp_rule 6065 b",
	¤_mp_rule const_deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'¤_mp_rule" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("¤_mp_rule 6066 b",
	¤_mp_rule out_of_scope_thm,
	so_isso_axiom,
	gen_fail_msg "icl'¤_mp_rule" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"])];

=TEX
\subsection{simple\_µ\_intro}
=SML
store_mt_results mt_run[
	("simple_µ_intro_1",
	dest_thm o simple_µ_intro v1,
	t_eq_f,
	([¬T = F®],¬µ v1 : BOOL · T = F®)),
	("simple_µ_intro_2",
	dest_thm o simple_µ_intro ¬q : BOOL®,
	pq_ax,
	([],¬µ q : BOOL · ¶ p : 'a · q®))];

store_mt_results mt_run_fail[
	("simple_µ_intro 3007",
	simple_µ_intro T,
	t_eq_f,
	gen_fail_msg "simple_µ_intro" 3007 ["¬T®"]),
	("simple_µ_intro 6005",
	simple_µ_intro v1,
	(asm_rule v1),
	gen_fail_msg "simple_µ_intro" 6005 ["¬v1®"])];
store_mt_results mt_run_error [("simple_µ_intro 6036",
	simple_µ_intro v1,
	deleted_thm,
	gen_fail_msg "icl'simple_µ_intro" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("simple_µ_intro 6065",
	simple_µ_intro v1,
	const_deleted_thm,
	gen_fail_msg "icl'simple_µ_intro" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("simple_µ_intro 6066",
	simple_µ_intro v1,
	out_of_scope_thm,
	gen_fail_msg "icl'simple_µ_intro" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"])	];

=TEX
\subsection{inst\_term\_rule}
=SML
store_mt_results mt_run[
	("inst_term_rule_1",
	dest_thm o inst_term_rule [(T,v1),(F,v2)],
	simple_µ_elim v2 
		(simple_µ_elim v1 (
		(asm_rule ¬µ v1 v2 : BOOL · v1 = v2®))),
	([¬µ v1 v2 : BOOL · v1 = v2®],¬T = F®)),
	("inst_term_rule_2",
	dest_thm o inst_term_rule [(v2,v1),(v1,v2)],
	simple_µ_elim v2 
		(simple_µ_elim v1 (
		(asm_rule ¬µ v1 v2 : BOOL · v1 = v2®))),
	([¬µ v1 v2 : BOOL · v1 = v2®],¬(v2:BOOL) = v1®)),
	("inst_term_rule_3",
	dest_thm o inst_term_rule [],
	simple_µ_elim v2 
		(simple_µ_elim v1 (
		(asm_rule ¬µ v1 v2 : BOOL · v1 = v2®))),
	([¬µ v1 v2 : BOOL · v1 = v2®],¬(v1:BOOL) = v2®))];

store_mt_results mt_run_fail[
	("inst_term_rule 3007",
	inst_term_rule [(v2,T)],
	(asm_rule v1),
	gen_fail_msg "inst_term_rule" 3007 ["¬T®"]),
	("inst_term_rule 6027",
	inst_term_rule [(N0,v1)],
	(asm_rule v1),
	gen_fail_msg "inst_term_rule" 6027 ["¬0®","¬v1®"]),
	("inst_term_rule 6028",
	inst_term_rule [(v2,v1)],
	(asm_rule v1),
	gen_fail_msg "inst_term_rule" 6028 ["¬v1®"])];
store_mt_results mt_run_error [("inst_term_rule 6036",
	inst_term_rule [],
	deleted_thm,
	gen_fail_msg "icl'inst_term_rule" 6036 ["p = q ô p = q",
		"deleted_theory_mdt007",del_theory_index]),
	("inst_term_rule 6065",
	inst_term_rule [],
	const_deleted_thm,
	gen_fail_msg "icl'inst_term_rule" 6065 ["p = q ô p = q",
		"test_mdt007"]),
	("inst_term_rule 6066",
	inst_term_rule [],
	out_of_scope_thm,
	gen_fail_msg "icl'inst_term_rule" 6066 ["p = q ô p = q",
		"out_of_scope_mdt007"])	];
=TEX
\subsection{plus\_conv}
=SML
store_mt_results mt_run [("plus_conv 1",
	dest_thm o plus_conv,
	list_mk_app(tplus,[¬7®,¬2®]),
	([],mk_eq(list_mk_app(tplus,[¬7®,¬2®]),¬9®))),
	("plus_conv 2",
	dest_thm o plus_conv,
	list_mk_app(tplus,[¬0®,¬2®]),
	([],mk_eq(list_mk_app(tplus,[¬0®,¬2®]),¬2®)))];
=TEX
The following assumes that $+$ has been declared infix.
=SML
store_mt_results mt_run_fail [("plus_conv 6085 a",
	plus_conv,
	list_mk_app(tplus,[mk_var("n",î),N1]),
	gen_fail_msg "plus_conv" 6085 ["¬n + 1®"]),
	("plus_conv 6085 b",
	plus_conv,
	mk_var("n",î),
	gen_fail_msg "plus_conv" 6085 ["¬n®"])];
=TEX
\section{DERIVED INFERENCE RULES}
We will from now on assume that out of scope or invalid
theorems will have been properly handled, by being
caught by the interfaces to the primitive and built-in inference rules.
\subsection{ap\_fun\_rule}
=SML
store_mt_results mt_run [("ap_fun_rule",
	dest_thm o ap_fun_rule ¬f : î ­ î®,
	asm_rule ¬ 0 = 1 ®,
	([¬ 0 = 1 ®], ¬ (f 0 : î) = f 1 ®))];

store_mt_results mt_run_fail [("ap_fun_rule 6020",
	ap_fun_rule  ¬f : î ­ î®,
	pq_ax,
	gen_fail_msg "ap_fun_rule" 6020 ["ô ¶ p· q"]),
	("ap_fun_rule 7024",
	ap_fun_rule  ¬f : î ­ î®,
	t_eq_f,
	gen_fail_msg "ap_fun_rule" 7024 ["¬f®"])];

=TEX
\subsection{ap\_arg\_rule}
=SML
store_mt_results mt_run [("ap_arg_rule",
	dest_thm o ap_arg_rule ¬2®,
	asm_rule ¬ (f : î ­ î)  = g®,
	([¬ (f : î ­ î)  = g®], ¬ (f 2 : î) = g 2 ®))];

store_mt_results mt_run_fail [("ap_arg_rule 6020",
	ap_arg_rule  ¬2®,
	pq_ax,
	gen_fail_msg "ap_arg_rule" 6020 ["ô ¶ p· q"]),
	("ap_arg_rule 7025",
	ap_arg_rule  ¬f : î ­ î®,
	t_eq_f,
	gen_fail_msg "ap_arg_rule" 7025 ["¬f®"])];

=TEX
\subsection{¤\_t\_intro}
=SML
store_mt_results mt_run [("¤_t_intro",
	dest_thm o ¤_t_intro,
	f_thm,
	([],¬³ F ¤ T®))];
=TEX
\subsection{¤\_t\_elim}
=SML
store_mt_results mt_run [("¤_t_elim",
	dest_thm o ¤_t_elim,
	(¤_t_intro f_thm),
	([],¬³ F®))];

store_mt_results mt_run_fail [("¤_t_elim 7106",
	¤_t_elim,
	t_thm,
	gen_fail_msg "¤_t_elim" 7106 ["ô T"])];
=TEX
\subsection{contr\_rule}
=SML
store_mt_results mt_run [("contr_rule",
	dest_thm o contr_rule ¬0 = 1®,
	(asm_rule mk_f),
	([mk_f],¬0 = 1®))];

store_mt_results mt_run_fail [("contr_rule 7001",
	contr_rule mk_t,
	t_thm,
	gen_fail_msg "contr_rule" 7001 ["ô T"]),
	("contr_rule 3031",
	contr_rule ¬0®,
	(asm_rule mk_f),
	gen_fail_msg "contr_rule" 3031 ["¬0®"])];
=TEX
\subsection{c\_contr\_rule}
=SML
store_mt_results mt_run [("c_contr_rule 1",
	dest_thm o c_contr_rule ¬0 = 1®,
	undisch_rule(´_intro ¬³(0 = 1)®(asm_rule mk_f)),
	([mk_f],¬0 = 1®)),
	("c_contr_rule 2",
	dest_thm o c_contr_rule ¬(Ì x : BOOL · x) x®,
	undisch_rule(´_intro ¬³((Ì y:BOOL · y)x)®(asm_rule mk_f)),
	([mk_f],¬(Ì x · x) x : BOOL®))];

store_mt_results mt_run_fail [("c_contr_rule 7001",
	c_contr_rule ¬0 = 1®,
	undisch_rule(´_intro ¬³(0 = 1)® t_thm),
	gen_fail_msg "c_contr_rule" 7001  ["³ 0 = 1 ô T"]),
	("c_contr_rule 3031",
	c_contr_rule ¬0®,
	asm_rule mk_f,
	gen_fail_msg "c_contr_rule" 3031  ["¬0®"]),
	("c_contr_rule 7003",
	c_contr_rule ¬0 = 1®,
	asm_rule mk_f,
	gen_fail_msg "c_contr_rule" 7003  ["¬0 = 1®"])];
=TEX
\subsection{³\_intro}
=SML
store_mt_results mt_run [("³_intro 1",
	dest_thm o ³_intro ¬0 = 1® (asm_rule mk_f),
	f_thm,
	([mk_f],¬³(0 = 1)®)),
	("³_intro 2",
	dest_thm o ³_intro ¬0 = 1® f_thm,
	(asm_rule mk_f),
	([mk_f],¬³(0 = 1)®)),
	("³_intro 3",
	dest_thm o ³_intro ¬³(0 = 1)® (asm_rule ¬0 = 1®),
	(asm_rule  ¬³(0 = 1)®),
	([¬0 = 1®],¬³(³(0 = 1))®)),
	("³_intro 4",
	dest_thm o ³_intro ¬(Ì z : BOOL · z) x® (asm_rule ¬(Ì x : BOOL · x) x®),
	(asm_rule  ¬³(Ì y : BOOL · y) x®),
	([¬³(Ì y : BOOL · y) x®],¬³(Ì z : BOOL · z) x®))];

store_mt_results mt_run_fail [("³_intro 3031",
	³_intro ¬0® (asm_rule mk_f),
	f_thm,
	gen_fail_msg "³_intro" 3031 ["¬0®"]),
	("³_intro 7004",
	³_intro mk_f f_thm,
	t_thm,
	gen_fail_msg "³_intro" 7004 ["ô ³ F", "ô T"])];
=TEX
\subsection{³\_elim}
=SML
store_mt_results mt_run [("³_elim 1",
	dest_thm o ³_elim ¬0 = 1® (asm_rule mk_f),
	f_thm,
	([mk_f],¬(0 = 1)®)),
	("³_elim 2",
	dest_thm o ³_elim ¬0 = 1® f_thm,
	(asm_rule mk_f),
	([mk_f],¬(0 = 1)®)),
	("³_elim 3",
	dest_thm o ³_elim ¬³(0 = 1)® (asm_rule ¬0 = 1®),
	(asm_rule  ¬³(0 = 1)®),
	([¬³(0 = 1)®,¬0 = 1®],¬³(0 = 1)®)),
	("³_elim 4",
	dest_thm o ³_elim mk_f (asm_rule ¬(Ì x : BOOL · x) x®),
	(asm_rule  ¬³(Ì y : BOOL · y) x®),
	([¬³(Ì y : BOOL · y) x®,¬(Ì x : BOOL · x) x®],mk_f))];

store_mt_results mt_run_fail [("³_elim 3031",
	³_elim ¬0® (asm_rule mk_f),
	f_thm,
	gen_fail_msg "³_elim" 3031 ["¬0®"]),
	("³_elim 7004",
	³_elim mk_f f_thm,
	t_thm,
	gen_fail_msg "³_elim" 7004 ["ô ³ F", "ô T"])];
=TEX
\subsection{³\_³\_intro}
=SML
store_mt_results mt_run [("³_³_intro",
	dest_thm o ³_³_intro,
	t_thm,
	([],¬³(³ T)®))];
=TEX
\subsection{³\_³\_elim}
=SML
store_mt_results mt_run [("³_³_elim",
	dest_thm o ³_³_elim,
	(asm_rule ¬³(³ T)®),
	([ ¬³(³ T)®],mk_t))];

store_mt_results mt_run_fail [("³_³_elim 7006",
	³_³_elim,
	t_thm,
	gen_fail_msg "³_³_elim" 7006 ["ô T"])];
=TEX
\subsection{³\_³\_conv}
=SML
store_mt_results mt_run [("³_³_conv",
	dest_thm o ³_³_conv,
	¬³(³ T)®,
	([],¬³(³ T) ¤ T®))];

store_mt_results mt_run_fail [("³_³_conv 7022",
	³_³_conv,
	mk_t,
	gen_fail_msg "³_³_conv" 7022 ["¬T®"])];
=TEX
\subsection{±\_intro}
=SML
store_mt_results mt_run [("±_intro 1",
	dest_thm o ±_intro t_thm,
	f_thm,
	([],¬T ± ³ F®)),
	("±_intro 2",
	dest_thm o ±_intro (asm_rule ¬x : BOOL®),
	 (asm_rule ¬x : BOOL®),
	([¬x : BOOL®],¬x ± x®))];
=TEX
\subsection{±\_left\_elim}
=SML
store_mt_results mt_run [("±_left_elim",
	dest_thm o ±_left_elim,
	asm_rule¬T ± F®,
	([¬T ± F®],mk_t))];

store_mt_results mt_run_fail [("±_left_elim 7007",
	±_left_elim,
	t_thm,
	gen_fail_msg "±_left_elim" 7007 ["ô T"])];
=TEX
\subsection{±\_right\_elim}
=SML
store_mt_results mt_run [("±_right_elim",
	dest_thm o ±_right_elim,
	asm_rule¬T ± F®,
	([¬T ± F®],mk_f))];

store_mt_results mt_run_fail [("±_right_elim 7007",
	±_right_elim,
	t_thm,
	gen_fail_msg "±_right_elim" 7007 ["ô T"])];
=TEX
\subsection{list\_±\_intro}
=SML
store_mt_results mt_run [("list_±_intro",
	dest_thm o list_±_intro,
	[t_thm,f_thm,t_thm],
	([],¬T ± ³F ± T®))];

store_mt_results mt_run_fail [("list_±_intro 7107",
	list_±_intro,
	[],
	gen_fail_msg "list_±_intro" 7107 [])];
=TEX
\subsection{strip\_±\_rule}
=SML
store_mt_results mt_run [("strip_±_rule 1",
	map dest_thm o strip_±_rule,
	asm_rule ¬(T ± F) ± (F ± T)®,
	[([¬(T ± F) ± (F ± T)®],mk_t),
	([¬(T ± F) ± (F ± T)®],mk_f),
	([¬(T ± F) ± (F ± T)®],mk_f),
	([¬(T ± F) ± (F ± T)®],mk_t)]
),
	("strip_±_rule 2",
	map dest_thm o strip_±_rule,
	t_thm,
	[([],mk_t)])];
=TEX
\subsection{´\_±\_rule}
=SML
store_mt_results mt_run [("´_±_rule",
	dest_thm o ´_±_rule,
	asm_rule ¬a ´ b ´ c®,
	([¬a ´ b ´ c®],¬(a ± b) ´ c®))];

store_mt_results mt_run_fail [("´_±_rule 7008",
	´_±_rule,
	t_thm,
	gen_fail_msg "´_±_rule" 7008 ["ô T"])];
=TEX
\subsection{±\_´\_rule}
=SML
store_mt_results mt_run [("±_´_rule",
	dest_thm o ±_´_rule,
	asm_rule ¬(a ± b) ´ c®,
	([¬(a ± b) ´ c®],¬a ´ b ´ c®))];

store_mt_results mt_run_fail [("±_´_rule 7009",
	±_´_rule,
	t_thm,
	gen_fail_msg "±_´_rule" 7009 ["ô T"])];
=TEX
\subsection{²\_left\_intro}
=SML
store_mt_results mt_run [("²_left_intro",
	dest_thm o ²_left_intro mk_f,
	t_thm,
	([],¬F ² T®))];

store_mt_results mt_run_fail [("²_left_intro 3031",
	²_left_intro ¬0®,
	t_thm,
	gen_fail_msg "²_left_intro" 3031 ["¬0®"])];
=TEX
\subsection{²\_right\_intro}
=SML
store_mt_results mt_run [("²_right_intro",
	dest_thm o ²_right_intro mk_f,
	t_thm,
	([],¬T ² F®))];

store_mt_results mt_run_fail [("²_right_intro 3031",
	²_right_intro ¬0®,
	t_thm,
	gen_fail_msg "²_right_intro" 3031 ["¬0®"])];
=TEX
\subsection{²\_elim}
=SML
store_mt_results mt_run [("²_elim",
	dest_thm o ²_elim (asm_rule ¬x ² y®) (asm_rule ¬x:BOOL®),
	undisch_rule(asm_rule¬y ´ x®),
	([¬x ² y®, ¬y ´ x®],¬x : BOOL®))];

store_mt_results mt_run_fail [("²_elim 7010",
	²_elim t_thm (asm_rule ¬x:BOOL®),
	undisch_rule(asm_rule¬y ´ x®),
	gen_fail_msg "²_elim" 7010 ["ô T"]),
	("²_elim 7083",
	²_elim (asm_rule ¬x ² y®) (asm_rule ¬x :BOOL®),
	(asm_rule¬y : BOOL®),
	gen_fail_msg "²_elim" 7083 ["x ² y ô x ² y",
		"x ô x", "y ô y"])];
=TEX
\subsection{²\_cancel\_rule}
=SML
store_mt_results mt_run [("²_cancel_rule 1",
	dest_thm o ²_cancel_rule (asm_rule ¬T ² F®),
	f_thm,
	([¬T ² F®],mk_t)),
	("²_cancel_rule 2",
	dest_thm o ²_cancel_rule (asm_rule ¬F ² T®),
	f_thm,
	([¬F ² T®],mk_t)),
	("²_cancel_rule 3",
	dest_thm o ²_cancel_rule (asm_rule ¬(Ì x:BOOL · x)p ² (Ì y:BOOL · y)p®),
	asm_rule ¬³((Ì z:BOOL · z)p)®,
	([¬(Ì x:BOOL · x)p ² (Ì y:BOOL · y)p®, ¬³((Ì z:BOOL · z)p)®],¬(Ì x:BOOL · x)p®))];

store_mt_results mt_run_fail [("²_cancel_rule 7010",
	²_cancel_rule t_thm,
	t_thm,
	gen_fail_msg "²_cancel_rule" 7010 ["ô T"]),
	("²_cancel_rule 7050",
	²_cancel_rule (asm_rule¬x ² y®),
	t_thm,
	gen_fail_msg "²_cancel_rule" 7050 ["x ² y ô x ² y", "ô T"])];
=TEX
\subsection{disch\_rule}
=SML
store_mt_results mt_run [("disch_rule",
	dest_thm o disch_rule¬x : BOOL®,
	asm_rule¬x : BOOL®,
	([],¬x ´ x®))];

store_mt_results mt_run_fail [("disch_rule 7031",
	disch_rule¬x : BOOL®,
	t_thm,
	gen_fail_msg "disch_rule" 7031 ["¬x®"])];
=TEX
\subsection{simple\_´\_match\_mp\_rule}
=SML
let
val x1 = ¬x : 'a®;
val x2 = ¬x : 'b®;
val tm1 = list_mk_simple_µ([x1,x2],
	mk_´(
	list_mk_app(mk_var("f",mk_­_type(tva,
		mk_­_type(mk_vartype"'b",BOOL))),
		[x1,x2]),
	¬b:BOOL®));
val tm2 = mk_´(
	list_mk_app(mk_var("f",mk_­_type(tva,
		mk_­_type(mk_vartype"'b",BOOL))),
		[x1,x2]),
	¬b:BOOL®);
in
(store_mt_results mt_run [("simple_´_match_mp_rule 1",
	dest_thm o simple_´_match_mp_rule 
		(simple_µ_elim ¬x : 'a® (asm_rule ¬µ x y · f x y ´ b®)),
	asm_rule ¬f 1 2 : BOOL®,
	([¬µ x y: î · f x y ´ b®, ¬f 1 2 : BOOL®],¬b : BOOL®)),
	("simple_´_match_mp_rule 2",
	dest_thm o simple_´_match_mp_rule 
		(simple_µ_elim ¬x : 'a® (asm_rule ¬µ x y · f x y ´ b ´ c®)),
	asm_rule ¬f 1 2 : BOOL®,
	([¬µ x y: î · f x y ´ b ´ c®, ¬f 1 2 : BOOL®],¬b ´ c®)),
	("simple_´_match_mp_rule 3",
	dest_thm o simple_´_match_mp_rule 
		(asm_rule tm1),
	asm_rule ¬f 1 2 : BOOL®,
	([¬µ x x' :î · f x x' ´ b®, ¬f 1 2 : BOOL®],¬b : BOOL®)),
	("simple_´_match_mp_rule 4",
	dest_thm o simple_´_match_mp_rule 
		(asm_rule tm2),
	asm_rule ¬f 1 2 : BOOL®,
	([¬f 1 2 ´ b®, ¬f 1 2 : BOOL®],¬b : BOOL®))

	])
end;
store_mt_results mt_run [("simple_´_match_mp_rule1 1",
	dest_thm o simple_´_match_mp_rule1
		(all_´_intro
		(asm_intro (¬x : 'a = x®) (refl_conv ¬f (x : 'a)®))),
	refl_conv ¬1®,
	([],¬f 1:'b = f 1®)),
	("simple_´_match_mp_rule1 2",
	dest_thm o simple_´_match_mp_rule1
		(all_µ_intro
		(all_´_intro
		(asm_intro (¬x : 'a = x®) (refl_conv ¬f (x : 'a)®)))),
	refl_conv ¬1®,
	([],¬f 1:'b = f 1®))
	];

store_mt_results mt_run_fail [("simple_´_match_mp_rule 7044 a",
	simple_´_match_mp_rule t_thm,
	t_thm,
	gen_fail_msg "simple_´_match_mp_rule" 7044 ["¬T®", "ô T"]),
	("simple_´_match_mp_rule 7044 b",
	simple_´_match_mp_rule (asm_rule¬(1 = 1) ´ x®),
	t_thm,
	gen_fail_msg "simple_´_match_mp_rule" 7044 ["¬T®","1 = 1 ´ x ô 1 = 1 ´ x"])];
store_mt_results mt_run_fail [("simple_´_match_mp_rule1 7044 a",
	simple_´_match_mp_rule1 t_thm,
	t_thm,
	gen_fail_msg "simple_´_match_mp_rule1" 7044 ["¬T®", "ô T"]),
	("simple_´_match_mp_rule1 7044 b",
	simple_´_match_mp_rule1 (asm_rule¬(1 = 1) ´ x®),
	(asm_rule ¬(x:'a) =x®),
	gen_fail_msg "simple_´_match_mp_rule1" 7044 
	["¬x = x®","1 = 1 ´ x ô 1 = 1 ´ x"])];
=TEX
\subsection{undisch\_rule}
=SML
store_mt_results mt_run [("undisch_rule",
	dest_thm o undisch_rule,
	asm_rule ¬x ´ y®,
	([¬x ´ y®,¬x : BOOL®],¬y : BOOL®))];

store_mt_results mt_run_fail [("undisch_rule 7011",
	undisch_rule,
	t_thm,
	gen_fail_msg "undisch_rule" 7011 ["ô T"])];
=TEX
\subsection{strip\_´\_rule}
=SML
store_mt_results mt_run [("strip_´_rule 1",
	dest_thm o strip_´_rule,
	asm_rule¬T ´ F ´ T ´ F®,
	([¬T ´ F ´ T ´ F®,mk_f,mk_t],mk_f)),
	("strip_´_rule 2",
	dest_thm o strip_´_rule,
	asm_rule¬T ´ F ´ x®,
	([¬T ´ F ´ x®,mk_t,mk_f],¬x : BOOL®)),
	("strip_´_rule 3",
	dest_thm o strip_´_rule,
	t_thm,
	([],mk_t))];
=TEX
\subsection{all\_´\_intro}
=SML
store_mt_results mt_run [("all_´_intro 1",
	dest_thm o all_´_intro,
	±_intro (asm_rule mk_t)(asm_rule mk_f),
	([],¬T ´ F ´ (T ± F)®)),
	("all_´_intro 2",
	dest_thm o all_´_intro,
	t_thm,
	([],mk_t))];
=TEX
\subsection{´\_trans\_rule}
=SML
store_mt_results mt_run [("´_trans_rule 1",
	dest_thm o ´_trans_rule (asm_rule¬x ´ y®),
	(asm_rule¬y ´ z®),
	([¬x ´ y®, ¬y ´ z®],¬x ´ z®)),
	("´_trans_rule 2",
	dest_thm o ´_trans_rule (asm_rule¬x ´ (Ì p · p)y®),
	(asm_rule¬(Ì q · q)y ´ z®),
	([¬x ´ (Ì p · p)y®, ¬(Ì q · q)y ´ z®],¬x ´ z®))];

store_mt_results mt_run_fail [("´_trans_rule 7040 a",
	´_trans_rule t_thm,
	t_thm,
	gen_fail_msg "´_trans_rule" 7040 ["ô T"]),
	("´_trans_rule 7040 b",
	´_trans_rule (asm_rule¬x ´ y®),
	t_thm,
	gen_fail_msg "´_trans_rule" 7040 ["ô T"]),
	("´_trans_rule 7042",
	´_trans_rule (asm_rule¬x ´ y®),
	(asm_rule¬x ´ z®),
	gen_fail_msg "´_trans_rule" 7042 ["x ´ y ô x ´ y",
		"x ´ z ô x ´ z"])];
=TEX
\subsection{modus\_tollens\_rule}
=SML
store_mt_results mt_run [("modus_tollens_rule",
	dest_thm o modus_tollens_rule (asm_rule ¬x ´ y®),
	(asm_rule ¬³ y®),
	([¬x ´ y®, ¬³ y®],¬³ x®))];

store_mt_results mt_run_fail [("modus_tollens_rule 7040",
	modus_tollens_rule t_thm,
	t_thm,
	gen_fail_msg "modus_tollens_rule" 7040 ["ô T"]),
	("modus_tollens_rule 7051",
	modus_tollens_rule  (asm_rule ¬x ´ y®),
	f_thm,
	gen_fail_msg "modus_tollens_rule" 7051 ["x ´ y ô x ´ y","ô ³ F"])];
=TEX
\subsection{¤\_intro}
=SML
store_mt_results mt_run [("¤_intro",
	dest_thm o ¤_intro (asm_rule¬x ´ y®),
	(asm_rule¬y ´ x®),
	([¬x ´ y®, ¬y ´ x®],¬x ¤ y®))];

store_mt_results mt_run_fail [("¤_intro 7040 a",
	¤_intro t_thm,
	f_thm,
	gen_fail_msg "¤_intro" 7040 ["ô T"]),
	("¤_intro 7040 b",
	¤_intro (asm_rule¬x ´ y®),
	t_thm,
	gen_fail_msg "¤_intro" 7040 ["ô T"]),
	("¤_intro 7064",
	¤_intro (asm_rule¬x ´ y®),
	(asm_rule¬x ´ z®),
	gen_fail_msg "¤_intro" 7064 ["x ´ y ô x ´ y",
		"x ´ z ô x ´ z"])];
=TEX
\subsection{¤\_elim}
=SML
store_mt_results mt_run [("¤_elim",
	(dest_thm ** dest_thm) o ¤_elim,
	asm_rule ¬x ¤ y®,
	(([¬x ¤ y®],¬x ´ y®),([¬x ¤ y®],¬y ´ x®)))];

store_mt_results mt_run_fail [("¤_elim 7062",
	¤_elim,
	t_thm,
	gen_fail_msg "¤_elim" 7062 ["ô T"])];
=TEX
\subsection{simple\_¤\_match\_mp\_rule}
=SML
let
val x1 = ¬x : 'a®;
val x2 = ¬x : 'b®;
val tm1 = list_mk_simple_µ([x1,x2],
	mk_¤(
	list_mk_app(mk_var("f",mk_­_type(tva,
		mk_­_type(mk_vartype"'b",BOOL))),
		[x1,x2]),
	¬b:BOOL®));
val tm2 = mk_¤(
	list_mk_app(mk_var("f",mk_­_type(tva,
		mk_­_type(mk_vartype"'b",BOOL))),
		[x1,x2]),
	¬b:BOOL®);
in
store_mt_results mt_run [("simple_¤_match_mp_rule 1",
	dest_thm o simple_¤_match_mp_rule 
		(simple_µ_elim ¬x : 'a® (asm_rule ¬µ x y · f x y ¤ b®)),
	asm_rule ¬f 1 2 : BOOL®,
	([¬µ x y: î · f x y ¤ b®, ¬f 1 2 : BOOL®],¬b : BOOL®)),
	("simple_¤_match_mp_rule 2",
	dest_thm o simple_¤_match_mp_rule 
		(simple_µ_elim ¬x : 'a® (asm_rule ¬µ x y · f x y ¤ b ´ c®)),
	asm_rule ¬f 1 2 : BOOL®,
	([¬µ x y: î · f x y ¤ b ´ c®, ¬f 1 2 : BOOL®],¬b ´ c®)),
	("simple_¤_match_mp_rule 3",
	dest_thm o simple_¤_match_mp_rule 
		(asm_rule tm1),
	asm_rule ¬f 1 2 : BOOL®,
	([¬µ x x' :î · f x x' ¤ b®, ¬f 1 2 : BOOL®],¬b : BOOL®)),
	("simple_¤_match_mp_rule 4",
	dest_thm o simple_¤_match_mp_rule 
		(asm_rule tm2),
	asm_rule ¬f 1 2 : BOOL®,
	([¬f 1 2 ¤ b®, ¬f 1 2 : BOOL®],¬b : BOOL®))
	]
end;
store_mt_results mt_run_fail [("simple_¤_match_mp_rule 7044 a",
	simple_¤_match_mp_rule t_thm,
	f_thm,
	gen_fail_msg "simple_¤_match_mp_rule" 7044 ["¬³ F®","ô T"]),
	("simple_¤_match_mp_rule 7044 b",
	simple_¤_match_mp_rule (asm_rule¬(1 = 1) ¤ x®),
	t_thm,
	gen_fail_msg "simple_¤_match_mp_rule" 7044 ["¬T®","1 = 1 ¤ x ô 1 = 1 ¤ x"])];
store_mt_results mt_run [("simple_¤_match_mp_rule1",
	dest_thm o simple_¤_match_mp_rule1 (refl_conv ¬f x:BOOL®),
	asm_rule ¬f 1:BOOL®,
	([¬f 1:BOOL®],¬f 1:BOOL®))];
store_mt_results mt_run_fail [("simple_¤_match_mp_rule1 7044 a",
	simple_¤_match_mp_rule1 t_thm,
	f_thm,
	gen_fail_msg "simple_¤_match_mp_rule1" 7044 ["¬³ F®","ô T"]),
	("simple_¤_match_mp_rule1 7044 b",
	simple_¤_match_mp_rule1 (asm_rule¬(1 = 1) ¤ x®),
	t_thm,
	gen_fail_msg "simple_¤_match_mp_rule1" 7044 ["¬T®","1 = 1 ¤ x ô 1 = 1 ¤ x"]),
	("simple_¤_match_mp_rule1 7044 c",
	simple_¤_match_mp_rule1 (asm_rule¬f x ¤ g x®),
	asm_rule¬f y:BOOL®,
	gen_fail_msg "simple_¤_match_mp_rule1" 7044 ["¬f y®","f x ¤ g x ô f x ¤ g x"])];
=TEX
\subsection{subst\_conv}
=SML
store_mt_results mt_run_fail[
	("subst_conv 6001 1",
	subst_conv [] ¬¶ p · q1®,
	¬¶ p · q®,
	gen_fail_msg "subst_conv" 6001 ["¬(¶ p· q) ¤ (¶ p· q1)®","¬(¶ p· q) ¤ (¶ p· q)®"]),
	("subst_conv 6001 2",
	subst_conv [(t_eq_f, ¬q:BOOL®)] ¬T ¤ q®,
	¬T ¤ F®,
	gen_fail_msg "subst_conv" 6001 ["¬(T ¤ F) ¤ T ¤ T®","¬(T ¤ F) ¤ T ¤ F®"]),
	("subst_conv 3012",
	subst_conv [(t_eq_f, ¬q:BOOL®)] ¬1®,
	¬T ¤ F®,
	gen_fail_msg "subst_conv" 3012 ["¬T ¤ F®","¬1®"])];

store_mt_results mt_run_fail [("subst_conv 6002",
	subst_conv,
	[(t_thm, ¬p:BOOL®)],
	gen_fail_msg "subst_conv" 6002 ["ô T"]),
	("subst_conv 3007",
	subst_conv,
	[(t_def, ¬T®)],
	gen_fail_msg "subst_conv" 3007 ["¬T®"]),
	("subst_conv 6029",
	subst_conv,
	[(t_def, ¬q : î®)],
	gen_fail_msg "subst_conv" 6029 ["ô T ¤ (Ì x· x) = (Ì x· x)","¬q®"])];

store_mt_results mt_run [("subst_conv_1",
	dest_thm o subst_conv [] ¬¶ p · q®,
	¬¶ p · q®,
	([],mk_eq(¬¶ p · q®,¬¶ p · q®))),
	("subst_conv_2",
	dest_thm o subst_conv [] ¬¶ p1 · q®,
	¬¶ p · q®,
	([],mk_eq(¬¶ p · q®,¬¶ p1 · q®))),
	("subst_conv_3",
	dest_thm o subst_conv [(t_eq_f, ¬q : BOOL®)] ¬q = F®,
	¬T = F®,
	([¬T = F®],mk_¤(¬(T = F)®,¬(F = F)®))),
	("subst_conv_4",
	dest_thm o subst_conv [(t_def, ¬q : BOOL®)] ¬q = F®,
	¬T = F®,
	([],mk_eq(¬T = F®,¬((Ì x:BOOL·x)=(Ì x ·x)) = F®)))];
=TEX
\subsection{eq\_sym\_conv}
=SML
store_mt_results mt_run [("eq_sym_conv a",
	dest_thm o eq_sym_conv,
	¬x = y®,
	([],¬(x = y) = (y = x)®)),
	("eq_sym_conv b",
	dest_thm o eq_sym_conv,
	¬T ¤ F®,
	([],¬(T ¤ F) = (F ¤ T)®))];

store_mt_results mt_run_fail [("eq_sym_conv 3014",
	eq_sym_conv,
	mk_t,
	gen_fail_msg "eq_sym_conv" 3014 ["¬T®"])];
=TEX
\subsection{³\_eq\_sym\_rule}
=SML
store_mt_results mt_run [("³_eq_sym_rule",
	dest_thm o ³_eq_sym_rule,
	(asm_rule¬³((x:'a) = y)®),
	([¬³((x:'a) = y)®],¬³((y:'a) = x)®))];

store_mt_results mt_run_fail [("³_eq_sym_rule 7091",
	³_eq_sym_rule,
	t_thm,
	gen_fail_msg "³_eq_sym_rule" 7091 ["ô T"])];
=TEX
\subsection{simple\_¤\_match\_mp\_rule}
=SML
let
val x1 = ¬x : 'a®;
val x2 = ¬x : 'b®;
val tm1 = list_mk_simple_µ([x1,x2],
	mk_eq(
	list_mk_app(mk_var("f",mk_­_type(tva,
		mk_­_type(mk_vartype"'b",mk_vartype"'c"))),
		[x1,x2]),
	¬b:'c®));
val tm2 = mk_eq(
	list_mk_app(mk_var("f",mk_­_type(tva,
		mk_­_type(mk_vartype"'b",mk_vartype"'c"))),
		[x1,x2]),
	¬b:'c®);
in
store_mt_results mt_run [("simple_eq_match_conv 1",
	dest_thm o simple_eq_match_conv 
		(simple_µ_elim ¬x : 'a® (asm_rule ¬µ x y · f x y = b®)),
	¬f 1 2 : BOOL®,
	([¬µ x y: î · f x y ¤ b®],¬f 1 2 ¤ b®)),
	("simple_eq_match_conv 2",
	dest_thm o simple_eq_match_conv 
		(asm_rule tm1),
	¬f 1 2 : BOOL®,
	([¬µ x x' :î · f x x' ¤ b®],¬f 1 2 ¤ b®)),
	("simple_eq_match_conv 3",
	dest_thm o simple_eq_match_conv 
		(asm_rule tm2),
	¬f 1 2 : BOOL®,
	([¬f 1 2 ¤ b®],¬f 1 2 ¤ b®))
	]
end;
store_mt_results mt_run_fail [("simple_eq_match_conv 7044 a",
	simple_eq_match_conv t_thm,
	mk_f,
	gen_fail_msg "simple_eq_match_conv" 7044 ["¬F®","ô T"]),
	("simple_eq_match_conv 7044 b",
	simple_eq_match_conv (asm_rule¬(1 = 1) ¤ x®),
	mk_t,
	gen_fail_msg "simple_eq_match_conv" 7044 ["¬T®","1 = 1 ¤ x ô 1 = 1 ¤ x"])];
=TEX
\subsection{simple\_eq\_match\_1\_conv}
=SML
store_mt_results mt_run [("simple_eq_match_1_conv 1",
	dest_thm o simple_eq_match_1_conv 
		(simple_µ_elim ¬x : î® (asm_rule ¬µ x y :î · f x y ¤ b®)),
	¬f (x:î) 2 : BOOL®,
	([¬µ x y :î · f x y ¤ b®],¬(f (x:î) 2) ¤ b®)),
	("simple_eq_match_1_conv 2",
	dest_thm o simple_eq_match_1_conv 
		(asm_rule ¬µ x y :î · f x y ¤ b®),
	¬f (x:î) 2 : BOOL®,
	([¬µ x y :î · f x y ¤ b®],¬(f (x:î) 2) ¤ b®)),
	("simple_eq_match_1_conv 3",
	dest_thm o simple_eq_match_1_conv 
		(simple_µ_elim ¬x : î® (asm_rule ¬µ x y :î · f x y ¤ b®)),
	¬f (x:î) (y:î) : BOOL®,
	([¬µ x y :î · f x y ¤ b®],¬f (x:î) (y:î) ¤ b®)),
	("simple_eq_match_1_conv 4",
	dest_thm o simple_eq_match_1_conv 
		(asm_rule ¬µ x y :î · f x y ¤ b®),
	¬f 1 2 : BOOL®,
	([¬µ x y :î · f x y ¤ b®],¬(f 1 2) ¤ b®)),
	("simple_eq_match_1_conv 5",
	dest_thm o simple_eq_match_1_conv 
		(asm_rule ¬µ x y :î · ((Ì f ·f)f) x y ¤ b®),
	¬(Ì g ·g)f 1 2 : BOOL®,
	([¬µ x y :î · (Ì f ·f)f x y ¤ b®],¬((Ì g ·g)f 1 2) ¤ b®)),
	("simple_eq_match_1_conv 6",
	dest_thm o simple_eq_match_1_conv 
		(simple_µ_intro¬f : BOOL ­ 'a®
		 (ap_fun_rule ¬f : BOOL ­ 'a®
		 (asm_rule ¬(x:BOOL) = y®))),
	¬p (x:BOOL) : î®,
	([¬(x:BOOL) = y®],¬(p (x:BOOL):î) = p y®))];

store_mt_results mt_run_fail [("simple_eq_match_1_conv 7095",
	simple_eq_match_1_conv,
	t_thm,
	gen_fail_msg "simple_eq_match_1_conv" 7095 ["ô T"])];

store_mt_results mt_run_fail [("simple_eq_match_1_conv 7076 a",
	simple_eq_match_1_conv 
		(simple_µ_elim ¬x : 'a® (asm_rule ¬µ x y · f x y ¤ b®)),
	¬f 1 2 : BOOL®,
	gen_fail_msg "simple_eq_match_1_conv" 7076 ["¬f 1 2®", 
		"µ x y· f x y ¤ b ô µ y· f x y ¤ b"]),
	("simple_eq_match_1_conv 7076 b",
	simple_eq_match_1_conv 
		(simple_µ_elim ¬x : î® (asm_rule ¬µ x y: î · f x y ¤ b®)),
	¬f 1 2 : BOOL®,
	gen_fail_msg "simple_eq_match_1_conv" 7076 ["¬f 1 2®", 
		"µ x y· f x y ¤ b ô µ y· f x y ¤ b"])];
=TEX
\subsection{if\_intro}
=SML
store_mt_results mt_run [("if_intro 1",
	dest_thm o if_intro ¬a : BOOL® (asm_rule ¬x  = p1®),
	(asm_rule ¬x = p2®),
	([¬x  = p1®,¬x = p2®],¬(if a then (x = p1) else (x = p2))®)),
	("if_intro 2",
	dest_thm o if_intro ¬b : BOOL® (undisch_rule(asm_rule ¬b ´ p1®)),
	(undisch_rule (asm_rule ¬³ b ´ p2®)),
	([¬b ´ p1®,¬³ b ´ p2®],¬(if b then (p1:BOOL) else p2)®))];

store_mt_results mt_run_fail [("if_intro 3031",
	if_intro N1 t_thm,
	t_thm,
	gen_fail_msg "if_intro" 3031 ["¬1®"])];

=TEX
\subsection{if\_then\_elim}
=SML
store_mt_results mt_run [("if_then_elim",
	dest_thm o if_then_elim,
	asm_rule ¬if a then (tt : BOOL) else te®,
	([¬if a then (tt : BOOL) else te®],¬a ´ tt®))];

store_mt_results mt_run_fail [("if_then_elim 7012",
	if_then_elim,
	t_thm,
	gen_fail_msg "if_then_elim" 7012 ["ô T"])];
=TEX
\subsection{if\_else\_elim}
=SML
store_mt_results mt_run [("if_else_elim",
	dest_thm o if_else_elim,
	asm_rule ¬if a then (tt : BOOL) else te®,
	([¬if a then (tt : BOOL) else te®],¬³ a ´ te®))];

store_mt_results mt_run_fail [("if_else_elim 7012",
	if_else_elim,
	t_thm,
	gen_fail_msg "if_else_elim" 7012 ["ô T"])];
=TEX
\subsection{if\_fun\_conv}
=SML
store_mt_results mt_run [("if_fun_conv",
	dest_thm o if_fun_conv,
	¬(if T then (Ì x · x = 1)3 else (Ì y · y = 1)4)®,
	([],¬(if T then (Ì x · x = 1)3 else (Ì y · y = 1)4) =
		((Ì x · x = 1)(if T then 3 else 4))®))];

store_mt_results mt_run_fail [("if_fun_conv 7037",
	if_fun_conv,
	mk_t,
	gen_fail_msg "if_fun_conv" 7037 ["¬T®"]),
	("if_fun_conv 7038",
	if_fun_conv,
	¬(if T then (Ì x · x = 1)3 else (Ì y · y = 2)4)®,
	gen_fail_msg "if_fun_conv" 7038 [
		"¬if T then (Ì x· x = 1) 3 else (Ì y· y = 2) 4®"])];
=TEX
\subsection{fun\_if\_conv}
=SML
store_mt_results mt_run [("fun_if_conv",
	dest_thm o fun_if_conv,
	¬f(if T then 3 else 4)®,
	([],¬(f(if T then 3 else 4)) = if T then f 3 else f 4®))];

store_mt_results mt_run_fail [("fun_if_conv 7098",
	fun_if_conv,
	mk_t,
	gen_fail_msg "fun_if_conv" 7098 ["¬T®"])];
=TEX
\subsection{Ì\_rule}
=SML
store_mt_results mt_run [("Ì_rule",
	dest_thm o Ì_rule ¬1®,
	asm_rule¬1 = 2®,
	([¬1 = 2®],¬(Ì @_1 · @_1 = 2) 1®))];
=TEX
\subsection{all\_simple\_$\beta$\_conv}
=SML
store_mt_results mt_run [("all_simple_%beta%_conv 1",
	dest_thm o all_simple_%beta%_conv,
	¬ (Ì x · (plus x y)) 1:î®,
	([],¬(Ì x · (plus x y)) 1 = (plus 1 y:î)®)),
	("all_simple_%beta%_conv 2",
	dest_thm o all_simple_%beta%_conv,
	¬ (Ì x · (plus x x)) 1®,
	([],¬(Ì x · (plus x x)) 1 = plus 1 1®)),
	("all_simple_%beta%_conv 3",
	dest_thm o all_simple_%beta%_conv,
	sample,
	([],mk_eq(sample, ¬(³ T ± q) ± q®))),
	("all_simple_%beta%_conv 4",
	dest_thm o all_simple_%beta%_conv,
	¬ (Ì y x : BOOL · x  ± y)(plus(x :î) 1 ) ®,
	([],mk_eq(¬ (Ì y x : BOOL · x  ± y)(plus(x :î) 1 ) ®, 
		¬(Ì x' · x' ± (plus (x:î) 1))®)))];

store_mt_results mt_run_fail [("all_simple_%beta%_conv 7020",
	all_simple_%beta%_conv,
	¬1®,
	gen_fail_msg "all_simple_%beta%_conv" 7020 ["¬1®"])];
=TEX
\subsection{all\_simple\_$\beta$\_conv}
=SML
store_mt_results mt_run [("all_simple_%beta%_rule 1",
	dest_thm o all_simple_%beta%_rule,
	asm_rule¬ (Ì x · (plus x y)) 1:BOOL®,
	([¬ (Ì x · (plus x y)) 1:BOOL®],¬(plus 1 y:BOOL)®)),
	("all_simple_%beta%_rule 2",
	dest_thm o all_simple_%beta%_rule,
	asm_rule ¬ (Ì x · (plus x x)) 1:BOOL®,
	([ ¬ (Ì x · (plus x x)) 1:BOOL®],¬plus 1 1 :BOOL®)),
	("all_simple_%beta%_rule 3",
	dest_thm o all_simple_%beta%_rule,
	asm_rule sample,
	([sample],¬(³ T ± q) ± q®)),
	("all_simple_%beta%_rule 4",
	dest_thm o all_simple_%beta%_rule,
	asm_rule ¬ f = (Ì y x : BOOL · x  ± y)(plus(x :î) 1 ) ®,
	([¬ f = (Ì y x : BOOL · x  ± y)(plus(x :î) 1 ) ®], 
		¬f = (Ì x' · x' ± (plus (x:î) 1))®))];

store_mt_results mt_run_fail [("all_simple_%beta%_rule 7020",
	all_simple_%beta%_rule,
	t_thm,
	gen_fail_msg "all_simple_%beta%_rule" 7020 ["ô T"])];
=TEX
\subsection{list\_simple\_µ\_intro}
=SML
store_mt_results mt_run [("list_simple_µ_intro 1",
	dest_thm o list_simple_µ_intro [],
	t_thm,
	([],¬T®)),
	("list_simple_µ_intro 2",
	dest_thm o list_simple_µ_intro [¬x : BOOL®, ¬y : BOOL®],
	±_intro(refl_conv ¬x : BOOL®)(refl_conv ¬y : BOOL®),
	([],¬µ x y · (x ¤ x) ± (y ¤ y)®))];

store_mt_results mt_run_fail [("list_simple_µ_intro 3007",
	list_simple_µ_intro [mk_t],
	t_thm,
	gen_fail_msg "list_simple_µ_intro" 3007 ["¬T®"]),
	("list_simple_µ_intro 6005",
	list_simple_µ_intro [¬x : BOOL®],
	asm_rule ¬x : BOOL®,
	gen_fail_msg "list_simple_µ_intro" 6005 ["¬x®"])];
=TEX
\subsection{all\_µ\_intro}
=SML
store_mt_results mt_run [("all_µ_intro",
	dest_thm o all_µ_intro,
	±_intro(±_intro(refl_conv ¬x:î®)(asm_rule ¬y:BOOL®))
		(refl_conv ¬z:BOOL®),
	([¬y:BOOL®],¬µ (x : î) (z : BOOL) · ((x = x) ± y) ± (z ¤ z)®))];
=TEX
\subsection{all\_simple\_µ\_elim}
=SML
store_mt_results mt_run [("all_simple_µ_elim",
	dest_thm o all_simple_µ_elim,
	undisch_rule(´_intro ¬y : BOOL®
		(asm_rule ¬µ x y z: î · plus x y z®)),
	([¬µ x y z: î · plus x y z®, ¬y : BOOL®],
		¬plus (x:î) (y':î)(z:î):BOOL®))];
=TEX
\subsection{simple\_³\_µ\_conv}
=SML
store_mt_results mt_run [("simple_³_µ_conv",
	dest_thm o simple_³_µ_conv,
	¬³ (µ x :'a· T)®,
	([],¬(³ (µ x:'a · T)) ¤ ¶ x:'a · ³ T®))];

store_mt_results mt_run_fail [("simple_³_µ_conv 7036",
	simple_³_µ_conv,
	mk_t,
	gen_fail_msg "simple_³_µ_conv" 7036 ["¬T®"])];
=TEX
\subsection{simple\_¶\_intro}
=SML
store_mt_results mt_run [("simple_¶_intro",
	dest_thm o simple_¶_intro ¬¶ p:BOOL · p ¤ ((Ì x:BOOL · x) = (Ì x:BOOL · x))®,
	t_def,
	([],¬¶ p:BOOL · p ¤ ((Ì x:BOOL · x) = (Ì x:BOOL · x))®))];

store_mt_results mt_run_fail [("simple_¶_intro 3034",
	simple_¶_intro mk_t,
	t_thm,
	gen_fail_msg "simple_¶_intro" 3034 ["¬T®"]),
	("simple_¶_intro 7047",
	simple_¶_intro ¬¶ x · F®,
	t_thm,
	gen_fail_msg "simple_¶_intro" 7047 ["¬¶ x· F®","ô T"])];
=TEX
\subsection{simple\_¶\_elim}
=SML
store_mt_results mt_run [("simple_¶_elim a",
	dest_thm o simple_¶_elim ¬x:BOOL® (asm_rule ¬¶ r · r ² F®),
	(undisch_rule(simple_µ_elim ¬x:BOOL® (asm_rule
		¬µ x : BOOL · x ² F ´ rubbish®))),
	([¬¶ r · r ² F®,¬µ x : BOOL · x ² F ´ rubbish®],¬rubbish : BOOL®)),
	("simple_¶_elim b",
	dest_thm o simple_¶_elim ¬y:BOOL® (asm_rule ¬¶ r · r ² F®),
	(undisch_rule(simple_µ_elim ¬x:BOOL® (asm_rule
		¬µ x : BOOL · x ² T ´ rubbish®))),
	([¬¶ r · r ² F®,¬µ x : BOOL · x ² T ´ rubbish®,¬x ² T®],¬rubbish : BOOL®))];

store_mt_results mt_run_fail [("simple_¶_elim 3007",
	simple_¶_elim ¬x ² F® (asm_rule ¬¶ r · F ² r®),
	(undisch_rule(simple_µ_elim ¬x:BOOL® (asm_rule
		¬µ x : BOOL · x ² F ´ rubbish®))),
	gen_fail_msg "simple_¶_elim" 3007 ["¬x ² F®"]),
	("simple_¶_elim 7014",
	simple_¶_elim ¬x:BOOL­BOOL® (asm_rule ¬¶ r · r ² F®),
	(undisch_rule(simple_µ_elim ¬x:BOOL® (asm_rule
		¬µ x : BOOL · x ² F ´ rubbish®))),
	gen_fail_msg "simple_¶_elim" 7014 ["¬x®"]),
	("simple_¶_elim 7109",
	simple_¶_elim ¬x:BOOL® (asm_rule ¬µ r · r ² F®),
	(undisch_rule(simple_µ_elim ¬x:BOOL® (asm_rule
		¬µ x : BOOL · x ² F ´ rubbish®))),
	gen_fail_msg "simple_¶_elim" 7109 ["µ r· r ² F ô µ r· r ² F"]),
	("simple_¶_elim 7120 a",
	simple_¶_elim ¬x:BOOL® (asm_rule ¬¶ r · r ² x®),
	(undisch_rule(simple_µ_elim ¬x:BOOL® (asm_rule
		¬µ x : BOOL · x ² F ´ rubbish®))),
	gen_fail_msg "simple_¶_elim" 7120 ["¬x®",
		"¶ r· r ² x ô ¶ r· r ² x"]),
	("simple_¶_elim 7120 b",
	simple_¶_elim ¬x:BOOL® (asm_rule ¬¶ r · r ² F®),
	(undisch_rule(simple_µ_elim ¬x:BOOL® (asm_rule
		¬µ x : BOOL · x ² F ´ rubbish x®))),
	gen_fail_msg "simple_¶_elim" 7120 ["¬x®",
		"µ x· x ² F ´ rubbish x, x ² F ô rubbish x"]),
	("simple_¶_elim 7121",
	simple_¶_elim ¬x:BOOL® (asm_rule ¬¶ r · r ² F®),
	(asm_intro ¬x:BOOL®(undisch_rule(simple_µ_elim ¬x:BOOL® (asm_rule
		¬µ x : BOOL · x ² F ´ rubbish®)))),
	gen_fail_msg "simple_¶_elim" 7121 ["¬x®",
		"µ x· x ² F ´ rubbish, x ² F, x ô rubbish",
		"¬x ² F®"])
	];
=TEX
\subsection{simple\_³\_¶\_conv}
=SML
store_mt_results mt_run [("simple_³_¶_conv",
	dest_thm o simple_³_¶_conv,
	¬³ (¶ x :'a· T)®,
	([],¬(³ (¶ x:'a · T)) ¤ µ x:'a · ³ T®))];

store_mt_results mt_run_fail [("simple_³_¶_conv 7058",
	simple_³_¶_conv,
	mk_t,
	gen_fail_msg "simple_³_¶_conv" 7058 ["¬T®"])];
=TEX
\subsection{simple\_¶$_1$\_intro}
=SML
store_mt_results mt_run [("simple_¶%down%1_intro 1",
	dest_thm o simple_¶%down%1_intro (%alpha%_conv ¬(Ì x : î · x)® ¬(Ì y : î · y)®),
	asm_rule ¬µ tt · (tt = (Ì y : î · y)) ´ (tt = (Ì z : î · z))®,
	([¬µ tt · (tt = (Ì y : î · y)) ´ (tt = (Ì z : î · z))®],
		¬¶%down%1 tt · tt = (Ì y:î · y)®)),
	("simple_¶%down%1_intro 2",
	dest_thm o simple_¶%down%1_intro (asm_rule ¬q 3 (y:'a) :BOOL®),
	asm_rule ¬µ tt : î · q tt (y : 'a) ´ tt = 3®,
	([¬q 3 (y:'a) :BOOL®,¬µ tt : î · q tt (y : 'a) ´ tt = 3®],¬¶%down%1 tt : î · q tt (y:'a)®))];

store_mt_results mt_run_fail [("simple_¶%down%1_intro 7067",
	simple_¶%down%1_intro t_thm,
	asm_rule ¬µ tt : î · q tt (y : 'a) ´ tt = 3®,
	gen_fail_msg "simple_¶%down%1_intro" 7067 ["ô T", 
		"µ tt· q tt y ´ tt = 3 ô µ tt· q tt y ´ tt = 3"]),
	("simple_¶%down%1_intro 7066",
	simple_¶%down%1_intro f_thm,
	t_thm,
	gen_fail_msg "simple_¶%down%1_intro" 7066 ["ô T"])];
=TEX
\subsection{simple\_¶$_1$1\_elim}
=SML
store_mt_results mt_run [("simple_¶%down%1_elim",
	dest_thm o simple_¶%down%1_elim,
	asm_rule ¬¶%down%1 tt · tt = (Ì y:î · y)®,
	([ ¬¶%down%1 tt · tt = (Ì y:î · y)®],
		¬¶ tt · tt = (Ì y :î· y) ± (µ x · x = (Ì y · y) ´ x = tt)®))];

store_mt_results mt_run_fail [("simple_¶%down%1_elim 7015",
	simple_¶%down%1_elim,
	t_thm,
	gen_fail_msg "simple_¶%down%1_elim" 7015 ["ô T"])];
=TEX
\subsection{Í\_intro\_rule}
=SML
store_mt_results mt_run [("Í_intro_rule",
	dest_thm o Í_intro_rule,
	f_thm,
	([],¬³($Í $³)®))];

store_mt_results mt_run_fail [("Í_intro_rule 7016",
	Í_intro_rule,
	t_thm,
	gen_fail_msg "Í_intro_rule" 7016 ["ô T"])];
=TEX
\subsection{Í\_elim\_rule}
=SML
store_mt_results mt_run [("Í_elim_rule",
	dest_thm o Í_elim_rule ¬x : BOOL ­ BOOL® (asm_rule ¬(Ì f · f T)(Í f · f T)®),
	(undisch_rule(simple_µ_elim ¬x:BOOL ­ BOOL® (asm_rule
		¬µ x : BOOL ­ BOOL ·  (Ì f · f T) x ´ rubbish®))),
	([¬µ x : BOOL ­ BOOL ·  (Ì f · f T) x ´ rubbish®,¬(Ì f · f T)(Í f · f T)®],
		¬rubbish : BOOL®))];

store_mt_results mt_run_fail [("Í_elim_rule 3007",
	Í_elim_rule ¬f x : BOOL ­ BOOL® (asm_rule ¬(Ì f · f T)(Í f · f T)®),
	(undisch_rule(simple_µ_elim ¬x:BOOL ­ BOOL® (asm_rule
		¬µ x : BOOL ­ BOOL ·  (Ì f · f T) x ´ rubbish®))),
	gen_fail_msg "Í_elim_rule" 3007 ["¬f x®"]),
	("Í_elim_rule 7019",
	Í_elim_rule ¬x : BOOL ­ BOOL® t_thm,
	(undisch_rule(simple_µ_elim ¬x:BOOL ­ BOOL® (asm_rule
		¬µ x : BOOL ­ BOOL ·  (Ì f · f T) x ´ rubbish®))),
	gen_fail_msg "Í_elim_rule" 7019 ["ô T"]),
	("Í_elim_rule 7054",
	Í_elim_rule ¬x : BOOL® (asm_rule ¬(Ì f · f T)(Í f · f T)®),
	(undisch_rule(simple_µ_elim ¬x:BOOL ­ BOOL® (asm_rule
		¬µ x : BOOL ­ BOOL ·  (Ì f · f T) x ´ rubbish®))),
	gen_fail_msg "Í_elim_rule" 7054 ["¬x®"]),
	("Í_elim_rule 7108",
	Í_elim_rule ¬y : BOOL ­ BOOL® (asm_rule ¬(Ì f · f T)(Í f · f T)®),
	(undisch_rule(simple_µ_elim ¬x:BOOL ­ BOOL® (asm_rule
		¬µ x : BOOL ­ BOOL ·  (Ì f · f T) x ´ rubbish®))),
	gen_fail_msg "Í_elim_rule" 7108 ["y"]),
	("Í_elim_rule 7120",
	Í_elim_rule ¬x : BOOL ­ BOOL® (asm_rule ¬(Ì f · f T)(Í f · f T)®),
	(undisch_rule(all_simple_µ_elim(asm_rule
		¬µ x · (Ì f · f T) x ´ rubbish x®))),
	gen_fail_msg "Í_elim_rule" 7120 ["¬x®",
		"µ x· (Ì f· f T) x ´ rubbish x, (Ì f· f T) x ô rubbish x"]),
	("Í_elim_rule 7121",
	Í_elim_rule ¬x : BOOL ­ BOOL® (asm_rule ¬(Ì f · f T)(Í f · f T)®),
	(undisch_rule(asm_rule
		¬(Ì f · f T) x ´ rubbish®)),
	gen_fail_msg "Í_elim_rule" 7121 ["¬x®",
		"(Ì f· f T) x ´ rubbish, (Ì f· f T) x ô rubbish",
		"¬(Ì f· f T) x®"]),
	("Í_elim_rule 7122",
	Í_elim_rule ¬x : BOOL ­ BOOL® (asm_rule ¬(Ì f · x T:BOOL)(Í f · f T)®),
	(undisch_rule(all_simple_µ_elim(asm_rule
		¬µ x · (Ì f · f T) x ´ rubbish®))),
	gen_fail_msg "Í_elim_rule" 7122 ["¬x®",
		"(Ì f· x T) (Í f· f T) ô (Ì f· x T) (Í f· f T)"])
	];
=TEX
\subsection{simple\_¶\_Í\_rule}
=SML
store_mt_results mt_run [("simple_¶_Í_rule",
	dest_thm o simple_¶_Í_rule,
	asm_rule ¬¶ x · f x y®,
	([¬¶ x · f x y®],¬f(Í x · f x y) y®))];

store_mt_results mt_run_fail [("simple_¶_Í_rule 7092",
	simple_¶_Í_rule,
	t_thm,
	gen_fail_msg "simple_¶_Í_rule" 7092 ["ô T"])];
=TEX
\subsection{simple\_¶\_Í\_conv}
=SML
store_mt_results mt_run [("simple_¶_Í_conv",
	dest_thm o simple_¶_Í_conv,
	¬¶ x · f x y®,
	([],mk_eq(¬¶ x · f x y®,¬f(Í x · f x y) y®)))];

store_mt_results mt_run_fail [("simple_¶_Í_conv 3034",
	simple_¶_Í_conv,
	mk_t,
	gen_fail_msg "simple_¶_Í_conv" 3034 ["¬T®"])];
=TEX
\subsection{ext\_rule}
=SML
store_mt_results mt_run [("ext_rule",
	dest_thm o ext_rule,
	asm_rule ¬(f : 'a ­ 'b) = g®,
	([¬(f : 'a ­ 'b) = g®],¬µ @_1 : 'a · (f @_1 : 'b) = g @_1®))];

store_mt_results mt_run_fail [("ext_rule 6020",
	ext_rule,
	t_thm,
	gen_fail_msg "ext_rule" 6020 ["ô T"]),
	("ext_rule 7026",
	ext_rule,
	refl_conv mk_t,
	gen_fail_msg "ext_rule" 7026["ô T ¤ T"])];
=TEX
\subsection{asm\_intro}
=SML
store_mt_results mt_run [("asm_intro 1",
	dest_thm o asm_intro mk_t,
	t_thm,
	([mk_t],¬T®)),
	("asm_intro 2",
	dest_thm o asm_intro mk_t,
	(asm_rule mk_t),
	([mk_t],¬T®))];

store_mt_results mt_run_fail [("asm_intro 3031",
	asm_intro ¬0®,
	t_thm,
	gen_fail_msg "asm_intro" 3031 ["¬0®"])];
=TEX
\subsection{asm\_elim}
=SML
store_mt_results mt_run [("asm_elim",
	dest_thm o asm_elim¬a : BOOL®(undisch_rule (asm_rule ¬a ´ b®)),
	(undisch_rule (asm_rule ¬³a ´ b®)),
	([¬a ´ b®,¬³a ´ b®],¬b:BOOL®))];

store_mt_results mt_run_fail [("asm_elim 3031",
	asm_elim ¬0® t_thm,
	t_thm,
	gen_fail_msg "asm_elim" 3031 ["¬0®"]),
	("asm_elim 7029",
	asm_elim ¬a:BOOL® t_thm,
	f_thm,
	gen_fail_msg "asm_elim" 7029 ["ô T", "ô ³ F"])];
=TEX
\subsection{prove\_asm\_rule}
=SML
store_mt_results mt_run [("prove_asm_rule",
	dest_thm o prove_asm_rule t_thm,
	asm_rule mk_t,
	([],¬T®))];
=TEX
\subsection{asm\_inst\_term\_rule}
=SML
store_mt_results mt_run[
	("asm_inst_term_rule_1",
	dest_thm o asm_inst_term_rule [(T,v1),(F,v2)],
	simple_µ_elim v2 
		(simple_µ_elim v1 (
		(asm_rule ¬µ v1 v2 : BOOL · v1 = v2®))),
	([¬µ v1 v2 : BOOL · v1 = v2®],¬T = F®)),
	("asm_inst_term_rule_2",
	dest_thm o asm_inst_term_rule [(v2,v1),(v1,v2)],
	simple_µ_elim v2 
		(simple_µ_elim v1 (
		(asm_rule ¬µ v1 v2 : BOOL · v1 = v2®))),
	([¬µ v1 v2 : BOOL · v1 = v2®],¬(v2:BOOL) = v1®)),
	("asm_inst_term_rule_3",
	dest_thm o asm_inst_term_rule [],
	simple_µ_elim v2 
		(simple_µ_elim v1 (
		(asm_rule ¬µ v1 v2 : BOOL · v1 = v2®))),
	([¬µ v1 v2 : BOOL · v1 = v2®],¬(v1:BOOL) = v2®)),
	("asm_inst_term_rule_4",
	dest_thm o asm_inst_term_rule [(v2,v1)],
	(asm_rule v1),
	([v2],v2))
	];

store_mt_results mt_run_fail[
	("asm_inst_term_rule 3007",
	asm_inst_term_rule [(v2,T)],
	(asm_rule v1),
	gen_fail_msg "asm_inst_term_rule" 3007 ["¬T®"]),
	("asm_inst_term_rule 6027",
	asm_inst_term_rule [(N0,v1)],
	(asm_rule v1),
	gen_fail_msg "asm_inst_term_rule" 6027 ["¬0®","¬v1®"])];
=TEX
\subsection{asm\_inst\_type\_rule}
=SML
store_mt_results mt_run [("asm_inst_type_rule 1",
	dest_thm o asm_inst_type_rule [(BOOL, tva)],
	pq_ax,
	([],¬¶ p : BOOL · q®)),
	("asm_inst_type_rule 2",
	dest_thm o asm_inst_type_rule [(BOOL, tv1)],
	pq_ax,
	([],¬¶ p : 'a · q®)),
	("asm_inst_type_rule 3",
	dest_thm o asm_inst_type_rule [(BOOL, tva)],
	(asm_rule ¬v = v®),
	([¬(v:BOOL) = v®],¬(v:BOOL) = v®))];

store_mt_results mt_run_fail [("asm_inst_type_rule 3019",
	asm_inst_type_rule [(BOOL, BOOL)],
	pq_ax,
	gen_fail_msg "asm_inst_type_rule" 3019 ["¬:BOOL®"])
];
=TEX
\subsection{$\alpha$\_conv}
=SML
store_mt_results mt_run [("%alpha%_conv 1",
	dest_thm o %alpha%_conv ¬plus 1 2®,
	¬plus 1 2®,
	([],¬(plus 1 2) = plus 1 2®)),
	("%alpha%_conv 2",
	dest_thm o %alpha%_conv ¬(Ì x · f x)®,
	¬(Ì y · f y)®,
	([],¬(Ì y · f y) = Ì x · f x®))];

store_mt_results mt_run_fail [("%alpha%_conv 3012",
	%alpha%_conv ¬1®,
	mk_t,
	gen_fail_msg "%alpha%_conv" 3012 ["¬T®","¬1®"]),
	("%alpha%_conv 7034",
	%alpha%_conv mk_f,
	mk_t,
	gen_fail_msg "%alpha%_conv" 7034 ["¬F®","¬T®"])];
=TEX
\subsection{simple\_$\alpha$\_conv}
=SML
store_mt_results mt_run [("simple_%alpha%_conv a",
	dest_thm o simple_%alpha%_conv "new",
	¬Ì x ·x®,
	([],¬(Ì x :'a·x) = (Ì new :'a · new)®)),
	("simple_%alpha%_conv b",
	dest_thm o simple_%alpha%_conv "new",
	¬Ì x new : 'a· x®,
	([],¬(Ì x new :'a·x) = (Ì new new' :'a · new)®))];

store_mt_results mt_run_fail [("simple_%alpha%_conv 3011",
	simple_%alpha%_conv "new",
	mk_t,
	gen_fail_msg "simple_%alpha%_conv" 3011 ["¬T®"]),
	("simple_%alpha%_conv 7035",
	simple_%alpha%_conv "new",
	¬Ì x : 'a· x = new®,
	gen_fail_msg "simple_%alpha%_conv" 7035 ["¬x®","new"])];
=TEX
\section{CONVERSIONS AND CONVERSIONALS}
\subsection{id\_conv}
=SML
store_mt_results mt_run [("id_conv a",
	dest_thm o id_conv,
	¬3®,
	([],¬3 = 3®))];
=TEX
\subsection{fail\_conv}
=SML
store_mt_results mt_run_fail [("fail_conv",
	fail_conv,
	T,
	gen_fail_msg "fail_conv" 7061 [])];

=TEX
\subsection{fail\_with\_conv}
=SML
store_mt_results mt_run_fail [("fail_with_conv",
	fail_with_conv "testing",
	T,
	gen_fail_msg "fail_with_conv" 7075 ["testing"])];
=TEX
\subsection{THEN\_C}
=SML
store_mt_results mt_run [("THEN_C",
	dest_thm o suc_conv THEN_C (RAND_C suc_conv),
	¬3®,
	([],¬3 = Suc(Suc 1)®))];

store_mt_results mt_run_fail [("THEN_C 7101",
	(fn x => pq_ax) THEN_C suc_conv,
	¬3®,
	gen_fail_msg "THEN_C" 7101 ["ô ¶ p· q"]),
	("THEN_C 7102",
	suc_conv THEN_C (fn x => pq_ax),
	¬3®,
	gen_fail_msg "THEN_C" 7102 ["ô ¶ p· q", "ô 3 = Suc 2"]),
	("THEN_C 1st fails",
	(fail_with_conv "testing THEN_C") THEN_C suc_conv,
	¬3®,
	gen_fail_msg "fail_with_conv" 7075 ["testing THEN_C"]),
	("THEN_C 2nd fails",
	suc_conv THEN_C (fail_with_conv "testing THEN_C"),
	¬3®,
	gen_fail_msg "fail_with_conv" 7075 ["testing THEN_C"])];

=TEX
\subsection{APP\_C}
=SML
store_mt_results mt_run [("APP_C 1",
	dest_thm o APP_C (simple_%beta%_conv, suc_conv),
	¬(Ì f · f) p 2®,
	([],¬((Ì f · f) p 2) = p (Suc 1)®))];

store_mt_results mt_run_fail [("APP_C f1",
	APP_C (simple_%beta%_conv, suc_conv),
	¬p 2®,
	gen_fail_msg "simple_%beta%_conv" 6012 ["¬p®"]),
	("APP_C f2",
	APP_C (simple_%beta%_conv, suc_conv),
	¬(Ì f · f) p 0®,
	gen_fail_msg "suc_conv" 7100 ["¬0®"]),
	("APP_C f3",
	APP_C (simple_%beta%_conv, suc_conv),
	¬p 0®,
	gen_fail_msg "simple_%beta%_conv" 6012 ["¬p®"]),
	("APP_C f4",
	APP_C (simple_%beta%_conv, suc_conv),
	¬0®,
	gen_fail_msg "APP_C" 3010 ["¬0®"]),
	("APP_C 7110 a",
	APP_C ((fn x => t_thm), suc_conv),
	¬p 1®,
	gen_fail_msg "APP_C" 7110 ["ô T","ô 1 = Suc 0"]),
	("APP_C 7110 b",
	APP_C (refl_conv, (fn x => t_thm)),
	¬p 1®,
	gen_fail_msg "APP_C" 7110 ["ô p = p","ô T"])];


=TEX
\subsection{FURTHER\_C}
=SML
store_mt_results mt_run [("FURTHER_C a",
	dest_thm o suc_conv FURTHER_C (RAND_C suc_conv),
	¬3®,
	([],¬3 = Suc(Suc 1)®)),
	("FURTHER_C b",
	dest_thm o suc_conv FURTHER_C (fail_with_conv "testing FURTHER_C"),
	¬3®,
	([],¬3 = Suc 2®)),
	("FURTHER_C c",
	dest_thm o suc_conv FURTHER_C (fn x => pq_ax),
	¬3®,
	([],¬3 = Suc 2®)),
	("FURTHER_C d",
	dest_thm o (fn x => pq_ax) FURTHER_C suc_conv,
	¬3®,
	([],¬¶ p : 'a · q®))];

store_mt_results mt_run_fail [("FURTHER_C 1st fails",
	(fail_with_conv "testing FURTHER_C") FURTHER_C suc_conv,
	¬3®,
	gen_fail_msg "fail_with_conv" 7075 ["testing FURTHER_C"])];

=TEX
\subsection{ORELSE\_C}
=SML
store_mt_results mt_run [("ORELSE_C a",
	dest_thm o suc_conv ORELSE_C refl_conv,
	¬3®,
	([],¬3 = Suc 2®)),
	("ORELSE_C b",
	dest_thm o (fail_with_conv "testing ORELSE_C") ORELSE_C suc_conv,
	¬3®,
	([],¬3 = Suc 2®))];

store_mt_results mt_run_fail [("ORELSE_C both fail",
	(fail_with_conv "testing ORELSE_C a") ORELSE_C 
		(fail_with_conv "testing ORELSE_C b"),
	¬3®,
	gen_fail_msg "fail_with_conv" 7075 ["testing ORELSE_C b"])];

=TEX
\subsection{EITHER\_C}
=SML
store_mt_results mt_run [("EITHER_C a",
	dest_thm o suc_conv EITHER_C (RAND_C suc_conv),
	¬3®,
	([],¬3 = Suc(Suc 1)®)),
	("EITHER_C b",
	dest_thm o suc_conv EITHER_C (fail_with_conv "testing EITHER_C"),
	¬3®,
	([],¬3 = Suc 2®)),
	("EITHER_C c",
	dest_thm o suc_conv EITHER_C (fn x => pq_ax),
	¬3®,
	([],¬3 = Suc 2®)),
	("EITHER_C d",
	dest_thm o (fn x => pq_ax) EITHER_C suc_conv,
	¬3®,
	([],¬¶ p : 'a · q®)),
	("EITHER_C e",
	dest_thm o (fail_with_conv "testing EITHER_C") EITHER_C suc_conv,
	¬3®,
	([],¬3 = Suc 2®))];

store_mt_results mt_run_fail [("EITHER_C both fail",
	(fail_with_conv "testing EITHER_C a") EITHER_C 
		(fail_with_conv "testing EITHER_C b"),
	¬3®,
	gen_fail_msg "fail_with_conv" 7075 ["testing EITHER_C b"])];

=TEX
\subsection{REPEAT\_C}
=SML
store_mt_results mt_run [("REPEAT_C a",
	dest_thm o REPEAT_C strip_±_T_conv,
	¬((a ± T) ± T) ± T®,
	([¬(((a ± T) ± T) ± T) = ((a ± T) ± T)®,
		¬((a ± T) ± T) = (a ± T)®,
		¬(a ± T) = a®],
	¬(((a ± T) ± T) ± T) = a®)),
	("REPEAT_C b",
	dest_thm o REPEAT_C strip_±_T_conv,
	¬a: BOOL®,
	([],¬(a:BOOL) = a®))	];

=TEX
\subsection{REPEAT1\_C}
=SML
store_mt_results mt_run [("REPEAT1_C",
	dest_thm o REPEAT1_C strip_±_T_conv,
	¬((a ± T) ± T) ± T®,
	([¬(((a ± T) ± T) ± T) = ((a ± T) ± T)®,
		¬((a ± T) ± T) = (a ± T)®,
		¬(a ± T) = a®],
	¬(((a ± T) ± T) ± T) = a®))];

store_mt_results mt_run_fail [("REPEAT1_C 7075",
	REPEAT1_C strip_±_T_conv,
	¬a : BOOL®,
	gen_fail_msg "fail_with_conv" 7075 ["strip_±_T_conv"])];

=TEX
\subsection{LIST\_THEN\_C}
=SML
store_mt_results mt_run [("EVERY_C a",
	dest_thm o EVERY_C [strip_±_T_conv],
	¬((a ± T) ± T) ± T®,
	([¬(((a ± T) ± T) ± T) = ((a ± T) ± T)®],
	¬(((a ± T) ± T) ± T) = ((a ± T) ± T)®)),
	("EVERY_C b",
	dest_thm o EVERY_C [strip_±_T_conv, strip_±_T_conv, strip_±_T_conv],
	¬((a ± T) ± T) ± T®,
	([¬(((a ± T) ± T) ± T) = ((a ± T) ± T)®,
		¬((a ± T) ± T) = (a ± T)®,
		¬(a ± T) = a®],
	¬(((a ± T) ± T) ± T) = a®))];

store_mt_results mt_run_fail [("EVERY_C too many",
	EVERY_C [strip_±_T_conv, strip_±_T_conv, 
		strip_±_T_conv, strip_±_T_conv],
	¬((a ± T) ± T) ± T®,
	gen_fail_msg "fail_with_conv" 7075 ["strip_±_T_conv"]),
	("EVERY_C one fails",
	EVERY_C [strip_±_T_conv, strip_±_T_conv, 
		fail_with_conv "testing EVERY_C", strip_±_T_conv],
	¬((a ± T) ± T) ± T®,
	gen_fail_msg "fail_with_conv" 7075 ["testing EVERY_C"])];

store_mt_results mt_run_fail[
	("EVERY_C 7103",
	EVERY_C,
	[],
	gen_fail_msg "EVERY_C" 7103 [])];
=TEX
\subsection{LIST\_ORELSE\_C}
=SML
store_mt_results mt_run [("FIRST_C a",
	dest_thm o FIRST_C [strip_±_T_conv],
	¬((a ± T) ± T) ± T®,
	([¬(((a ± T) ± T) ± T) = ((a ± T) ± T)®],
	¬(((a ± T) ± T) ± T) = ((a ± T) ± T)®)),
	("FIRST_C b",
	dest_thm o FIRST_C [strip_±_T_conv, strip_±_T_conv, strip_±_T_conv],
	¬((a ± T) ± T) ± T®,
	([¬(((a ± T) ± T) ± T) = ((a ± T) ± T)®],
	¬(((a ± T) ± T) ± T) = ((a ± T) ± T)®)),
	("FIRST_C c",
	dest_thm o FIRST_C [strip_±_T_conv,
		fail_with_conv "testing FIRST_C"],
	¬((a ± T) ± T) ± T®,
	([¬(((a ± T) ± T) ± T) = ((a ± T) ± T)®],
	¬(((a ± T) ± T) ± T) = ((a ± T) ± T)®))];

store_mt_results mt_run_fail[
	("FIRST_C 7103",
	FIRST_C,
	[],
	gen_fail_msg "FIRST_C" 7103 [])];
=TEX
\subsection{CHANGED\_C}
=SML
store_mt_results mt_run [("CHANGED_C",
	dest_thm o CHANGED_C suc_conv,
	¬3®,
	([],¬3 = Suc 2®))];

store_mt_results mt_run_fail [("CHANGED_C 7032",
	CHANGED_C refl_conv,
	¬3®,
	gen_fail_msg "CHANGED_C" 7032 []),
	("CHANGED_C 7104",
	CHANGED_C (fn x => t_thm),
	¬3®,
	gen_fail_msg "CHANGED_C" 7104 ["ô T"])];

=TEX
\subsection{TRY\_C}
=SML
store_mt_results mt_run [("TRY_C a",
	dest_thm o TRY_C suc_conv,
	¬3®,
	([],¬3 = Suc 2®)),
	("TRY_C b",
	dest_thm o TRY_C fail_conv,
	¬3®,
	([],¬3 = 3®))];

=TEX
\subsection{COND\_C}
=SML
store_mt_results mt_run [("COND_C a",
	dest_thm o COND_C (fn x=> type_of x = ¬:î®)
		suc_conv id_conv,
	¬3®,
	([],¬3 = Suc 2®)),
	("COND_C b",
	dest_thm o COND_C (fn x=> type_of x = ¬:î®)
		suc_conv id_conv,
	¬T®,
	([],¬T = T®))];

=TEX
\subsection{RAND\_C}
=SML
store_mt_results mt_run [("RAND_C",
	dest_thm o RAND_C suc_conv,
	¬Suc 3®,
	([],¬Suc 3 = Suc(Suc 2)®))];

store_mt_results mt_run_fail [("RAND_C conv fails",
	RAND_C (fail_with_conv "testing RAND_C"),
	¬Suc 3®,
	gen_fail_msg "fail_with_conv" 7075 ["testing RAND_C"]),
	("RAND_C conv 3010",
	RAND_C suc_conv,
	¬3®,
	gen_fail_msg "RAND_C" 3010 ["¬3®"]),
	("RAND_C conv 7104",
	RAND_C (fn x => t_thm),
	¬Suc 3®,
	gen_fail_msg "RAND_C" 7104 ["ô T"])];
=TEX
\subsection{RIGHT\_C}
=SML
store_mt_results mt_run [("RIGHT_C 1",
	dest_thm o RIGHT_C suc_conv,
	¬1 + 3®,
	([],¬(1 + 3) = 1 + (Suc 2)®)),
	("RIGHT_C 2",
	dest_thm o RIGHT_C suc_conv,
	¬f 1 2 3®,
	([],¬(f 1 2 3) = f 1 2 (Suc 2)®))];

store_mt_results mt_run_fail [("RIGHT_C conv fails",
	RIGHT_C (fail_with_conv "testing RIGHT_C"),
	¬1 + 2®,
	gen_fail_msg "fail_with_conv" 7075 ["testing RIGHT_C"]),
	("RIGHT_C conv 3013 a",
	RIGHT_C suc_conv,
	¬3®,
	gen_fail_msg "RIGHT_C" 3013 ["¬3®"]),
	("RIGHT_C conv 3013 b",
	RIGHT_C suc_conv,
	¬f 3®,
	gen_fail_msg "RIGHT_C" 3013 ["¬f 3®"]),
	("RIGHT_C conv 7104",
	RIGHT_C (fn x => t_thm),
	¬1 + 3®,
	gen_fail_msg "RIGHT_C" 7104 ["ô T"])];
=TEX
\subsection{RATOR\_C}
=SML
store_mt_results mt_run [("RATOR_C",
	dest_thm o RATOR_C simple_%beta%_conv,
	¬(Ì x y : î · plus x y) 3 4 : î®,
	([],¬(Ì x y : î · plus x y) 3 4  = ((Ì y : î · plus 3 y) 4 : î)®))];

store_mt_results mt_run_fail [("RATOR_C conv fails",
	RATOR_C (fail_with_conv "testing RATOR_C"),
	¬Suc 3®,
	gen_fail_msg "fail_with_conv" 7075 ["testing RATOR_C"]),
	("RATOR_C conv 3010",
	RATOR_C suc_conv,
	¬3®,
	gen_fail_msg "RATOR_C" 3010 ["¬3®"]),
	("RATOR_C conv 7104",
	RATOR_C (fn x => t_thm),
	¬Suc 3®,
	gen_fail_msg "RATOR_C" 7104 ["ô T"])];
	
=TEX
\subsection{LEFT\_C}
=SML
store_mt_results mt_run [("LEFT_C 1",
	dest_thm o LEFT_C suc_conv,
	¬1 + 3®,
	([],¬(1 + 3) = (Suc 0) + 3®)),
	("LEFT_C 2",
	dest_thm o LEFT_C suc_conv,
	¬f 1 2 3®,
	([],¬(f 1 2 3) = f 1 (Suc 1) 3®))];

store_mt_results mt_run_fail [("LEFT_C conv fails",
	LEFT_C (fail_with_conv "testing LEFT_C"),
	¬1 + 2®,
	gen_fail_msg "fail_with_conv" 7075 ["testing LEFT_C"]),
	("LEFT_C conv 3013 a",
	LEFT_C suc_conv,
	¬3®,
	gen_fail_msg "LEFT_C" 3013 ["¬3®"]),
	("LEFT_C conv 3013 b",
	LEFT_C suc_conv,
	¬f 3®,
	gen_fail_msg "LEFT_C" 3013 ["¬f 3®"]),
	("LEFT_C conv 7104",
	LEFT_C (fn x => t_thm),
	¬1 + 3®,
	gen_fail_msg "LEFT_C" 7104 ["ô T"])];
=TEX
\subsection{RANDS\_C}
=SML
store_mt_results mt_run [("RANDS_C 1",
	dest_thm o RANDS_C suc_conv,
	¬1 + 3®,
	([],¬(1 + 3) = (Suc 0) + (Suc 2)®)),
	("RANDS_C 2",
	dest_thm o RANDS_C suc_conv,
	¬f 1 2 3®,
	([],¬(f 1 2 3) = f (Suc 0) (Suc 1) (Suc 2)®)),
	("RANDS_C 3",
	dest_thm o RANDS_C suc_conv,
	¬f 1®,
	([],¬(f 1) = f (Suc 0)®)),
	("RANDS_C 4",
	dest_thm o RANDS_C suc_conv,
	¬f®,
	([],¬f = f®))];

store_mt_results mt_run_fail [("RANDS_C conv fails",
	RANDS_C (fail_with_conv "testing RANDS_C"),
	¬1 + 2®,
	gen_fail_msg "fail_with_conv" 7075 ["testing RANDS_C"]),
	("RANDS_C conv 7104 a",
	RANDS_C (fn x => t_thm),
	¬1 + 3®,
	gen_fail_msg "RANDS_C" 7104 ["ô T"]),
	("RANDS_C conv 7104 b",
	RANDS_C (fn x => refl_conv ¬1®),
	¬f 1 a®,
	gen_fail_msg "RANDS_C" 7104 ["ô 1 = 1"])];
=TEX

\subsection{SIMPLE\_Ì\_C}
=SML
store_mt_results mt_run [("SIMPLE_Ì_C",
	dest_thm o SIMPLE_Ì_C suc_conv,
	¬Ì x · 3®,
	([],¬(Ì x · 3) = (Ì x · Suc 2)®))];

store_mt_results mt_run_fail [("SIMPLE_Ì_C conv fails",
	SIMPLE_Ì_C (fail_with_conv "testing SIMPLE_Ì_C"),
	¬Ì x · Suc 3®,
	gen_fail_msg "fail_with_conv" 7075 ["testing SIMPLE_Ì_C"]),
	("SIMPLE_Ì_C conv 3011",
	SIMPLE_Ì_C suc_conv,
	¬3®,
	gen_fail_msg "SIMPLE_Ì_C" 3011 ["¬3®"]),
	("SIMPLE_Ì_C conv 7104",
	SIMPLE_Ì_C (fn x => t_thm),
	¬Ì x · Suc 3®,
	gen_fail_msg "SIMPLE_Ì_C" 7104 ["ô T"])];

=TEX
\subsection{BINDER\_C}
=SML
store_mt_results mt_run [("BINDER_C",
	dest_thm o BINDER_C (RAND_C suc_conv),
	¬µ x · x = 3® ,
	([],¬(µ x · x = 3) = (µ x · x = Suc 2)®))];

store_mt_results mt_run_fail [("BINDER_C conv fails",
	BINDER_C (fail_with_conv "testing BINDER_C"),
	¬µ x · x = 3®,
	gen_fail_msg "fail_with_conv" 7075 ["testing BINDER_C"]),
	("BINDER_C conv 7059",
	BINDER_C suc_conv,
	¬3®,
	gen_fail_msg "BINDER_C" 7059 ["¬3®"]),
	("BINDER_C conv 7104",
	BINDER_C (fn x => t_thm),
	¬µ x · x = 3®,
	gen_fail_msg "BINDER_C" 7104 ["ô T"])];

=TEX
\subsection{SUB\_C}
=SML
store_mt_results mt_run [("SUB_C a",
	dest_thm o SUB_C suc_conv,
	v1,
	([],¬(v1:BOOL) = v1®)),
	("SUB_C b",
	dest_thm o SUB_C suc_conv,
	T,
	([],¬T = T®)),
	("SUB_C c",
	dest_thm o SUB_C suc_conv,
	¬f 3®,
	([],¬f 3 = f (Suc 2)®)),
	("SUB_C d",
	dest_thm o SUB_C (RAND_C suc_conv),
	¬f 3 4®,
	([],¬f 3 4 = f (Suc 2) 4®)),
	("SUB_C e",
	dest_thm o SUB_C (RAND_C suc_conv ORELSE_C suc_conv),
	¬f 3 4®,
	([],¬f 3 4 = f (Suc 2) (Suc 3)®)),
	("SUB_C f",
	dest_thm o SUB_C suc_conv,
	¬Ì x · 3®,
	([],¬(Ì x · 3) = (Ì x · (Suc 2))®)),
	("SUB_C g",
	dest_thm o SUB_C (fail_with_conv "testing SUB_C"),
	¬f x : BOOL®,
	([],¬(f x : BOOL) = (f x)®)),
	("SUB_C h",
	dest_thm o SUB_C (fn x => pq_ax),
	¬f x : BOOL®,
	([],¬(f x : BOOL) = (f x)®))];
=TEX
\subsection{SUB1\_C}
=SML
store_mt_results mt_run [("SUB1_C a",
	dest_thm o SUB1_C suc_conv,
	¬f 3®,
	([],¬f 3 = f (Suc 2)®)),
	("SUB1_C b",
	dest_thm o SUB1_C (RAND_C suc_conv),
	¬f 3 4®,
	([],¬f 3 4 = f (Suc 2) 4®)),
	("SUB1_C c",
	dest_thm o SUB1_C (RAND_C suc_conv ORELSE_C suc_conv),
	¬f 3 4®,
	([],¬f 3 4 = f (Suc 2) (Suc 3)®)),
	("SUB1_C d",
	dest_thm o SUB1_C suc_conv,
	¬Ì x · 3®,
	([],¬(Ì x · 3) = (Ì x · (Suc 2))®)),
	("SUB1_C e",
	dest_thm o SUB1_C (fn x => if is_app x
		then pq_ax
		else suc_conv x),
	¬f 3 4®,
	([],¬f 3 4 = f 3 (Suc 3)®))];

store_mt_results mt_run_fail [("SUB1_C 7104 a",
	SUB1_C (fn x => t_thm),
	¬f 3®,
	gen_fail_msg "SUB1_C" 7104 ["ô T"]),
	("SUB1_C 7104 b",
	SUB1_C (RAND_C (fn x => pq_ax) ORELSE_C (fn x => pq_ax)),
	¬f 3 4®,
	gen_fail_msg "SUB1_C" 7104 ["ô ¶ p· q"]),
	("SUB1_C 7104 c",
	SUB1_C (fn x => t_thm),
	¬Ì x · 3®,
	gen_fail_msg "SUB1_C" 7104 ["ô T"]),
	("SUB1_C 7105 a",
	SUB1_C suc_conv,
	v1,
	gen_fail_msg "SUB1_C" 7105 ["¬v1®"]),
	("SUB1_C 7105 b",
	SUB1_C suc_conv,
	T,
	gen_fail_msg "SUB1_C" 7105 ["¬T®"]),
	("SUB1_C conv fails",
	SUB1_C (fail_with_conv "testing SUB1_C"),
	¬f x®,
	gen_fail_msg "fail_with_conv" 7075 ["testing SUB1_C"])];
=TEX
\subsection{ONCE\_MAP\_C}
=SML
store_mt_results mt_run [("ONCE_MAP_C",
	dest_thm o ONCE_MAP_C simple_%beta%_conv,
	sample,
	([],mk_eq(sample,
	¬(Ì x y · ((Ì x · ³ x) x ± y) ± (Ì p · p) q) T q®)))];
=TEX
=SML
store_mt_results mt_run_fail [("ONCE_MAP_C cnv fails everywhere",
	ONCE_MAP_C (fail_with_conv "testing ONCE_MAP_C"),
	sample,
	gen_fail_msg "ONCE_MAP_C" 7005 [])];
=TEX
\subsection{MAP\_C}
=SML
store_mt_results mt_run [("MAP_C",
	dest_thm o MAP_C simple_%beta%_conv,
	sample,
	([],mk_eq(sample,
	¬((Ì x · ³ x) T ± q) ± q®)))];
=TEX
=SML
store_mt_results mt_run_fail [("MAP_C cnv fails everywhere",
	MAP_C (fail_with_conv "testing MAP_C"),
	sample,
	gen_fail_msg "MAP_C" 7005 [])];
=TEX
\subsection{REPEAT\_MAP\_C}
=SML
store_mt_results mt_run [("REPEAT_MAP_C",
	dest_thm o REPEAT_MAP_C simple_%beta%_conv,
	sample,
	([],mk_eq(sample,
	¬((³ T) ± q) ± q®)))];
=TEX
=SML
store_mt_results mt_run_fail [("REPEAT_MAP_C cnv fails everywhere",
	REPEAT_MAP_C (fail_with_conv "testing REPEAT_MAP_C"),
	sample,
	gen_fail_msg "REPEAT_MAP_C" 7005 [])];
=TEX
\subsection{TOP\_MAP\_C}
This will receive much heavier testing in the rewriting inference rules tests in \cite{DS/FMU/IED/MDT026}.
=SML
store_mt_results mt_run [("TOP_MAP_C",
	dest_thm o TOP_MAP_C simple_%beta%_conv,
	sample,
	([],mk_eq(sample,
	¬((³ T) ± q) ± q®)))];
=TEX
=SML
store_mt_results mt_run_fail [("TOP_MAP_C cnv fails everywhere",
	TOP_MAP_C (fail_with_conv "testing TOP_MAP_C"),
	sample,
	gen_fail_msg "TOP_MAP_C" 7005 [])];
=TEX
\subsection{conv\_rule}
=SML
store_mt_results mt_run [("conv_rule",
	dest_thm o conv_rule (REPEAT_MAP_C suc_conv),
	plus_conv (list_mk_app(tplus,[¬3®,¬2®])),
	([],mk_eq(list_mk_app(tplus,[¬Suc(Suc(Suc 0))®,¬(Suc(Suc 0))®]),
		¬Suc(Suc(Suc(Suc(Suc 0))))®)))];

store_mt_results mt_run_fail [("conv_rule 7104",
	conv_rule (fn x => t_thm),
	asm_rule T,
	gen_fail_msg "conv_rule" 7104 ["ô T"]),
	("conv_rule cnv fails",
	conv_rule (fail_with_conv "testing conv_rule"),
	asm_rule T,
	gen_fail_msg "fail_with_conv" 7075 ["testing conv_rule"])];

=TEX
\section{END OF TESTS}
=SML
diag_string(summarize_mt_results());
=IGN
To undo theory creation, etc:

open_theory start_theory;
delete_theory "out_of_scope_mdt007";
delete_theory "test_mdt007";
=TEX
=IGN
\section{UNTESTED ERROR MESSAGES}
The following are not tested for various reasons:

\begin{tabular}{| l | p{4.5in} |}\hline
Test & Comment \\ \hline
\hline
\end{tabular}
=TEX
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}


