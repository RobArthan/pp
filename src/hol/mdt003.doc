=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Module Tests for Types and Terms}  %% Mandatory field
\def\TPPheadtitle{Module Tests for Types and Terms}
\TPPref{DS/FMU/IED/MDT003}  %% Mandatory field
\def\SCCSversion{$Revision$ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{ML Literate Script}
\TPPkeywords{}
\TPPauthor{K.Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.Arthan & Project Manager}
\TPPabstract{A set of module tests are given for the 
the types of HOL terms and types, namely $TERM$ and $TYPE$,
and then upon some utility functions about these.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{Document control}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history} 
\begin{description}
\item [Issue 1.1]
First draft version.
\item [Issue 1.2]
Modified in line with version 1.5 of \cite{DS/FMU/IED/DTD003}.
\item [Issue 1.3]
Modified in line with version 1.8 of \cite{DS/FMU/IED/DTD003}.
Made all tests give ``printable results'', apart from assignment statements.
\item [Issue 1.4]
Modified in line with version 1.9 of \cite{DS/FMU/IED/DTD003}.
\item [Issue 1.5]
Addition of functions :$?\_Ü$, $?\_char$ and $?\_string$;
and the types $Ü$, $CHAR$ and $STRING$.
 imp006.doc dtd003.doc 
\item [Issue 1.6]
An additional rtest for $aconv$.
\item [Issue 1.7]
Changed to using test harness of \cite{DS/FMU/IED/DTD013}.
\item [Issue 1.8]
Reacted to issue 1.12 of \cite{DS/FMU/IED/DTD003}.
\item [Issue 1.9]
Reacted to issue 1.13 of \cite{DS/FMU/IED/DTD003}.
\item [Issue 1.10]
Corrected $term\_fail$ and $type\_fail$ tests.
\item [Issue 1.11]
Added $inst\_type$ tests.
Reacted to issue 1.15 of \cite{DS/FMU/IED/DTD003}.
\item [Issue 1.12,1.13,1.14,1.15]
Changes in response to inspection IR0016.
\end{description}
%\subsection{Changes forecast}
\section{GENERAL}
\subsection{Scope}
This document contains the module testing of the types and terms of ICL HOL, and utilities to handle them, required by Release 1 ICL HOL Product Requirement Specification \cite{DS/FMU/IED/DEF004}.
The design is in \cite{DS/FMU/IED/DTD003}
and it is
implemented in \cite{DS/FMU/IED/IMP003}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains the module testing of the material given a design in \cite{DS/FMU/IED/DTD003},
following the test policy given in that document and the general policy given in \cite{DS/FMU/IED/PLN008}.

\subsubsection{Dependencies}
This document is derived from the detailed design in \cite{DS/FMU/IED/DTD003},
and is further influenced by the implementation, in  \cite{DS/FMU/IED/IMP003}.
It relies on a term pretty-printer being present to format
the results of error messages.
\subsubsection{Deficiencies}
The coverage of the tests, as called for by the test specification, may currently be incomplete.

\section{TEST HARNESS MATERIAL}
=SML
usefile "dtd013.sml";
usefile "imp013.sml";
init_mt_results ();
=TEX
\section{INFIX DECLARATIONS}
=SML
infix 6 cross;
infix 6 comma;
=TEX
\section{TEST DATA}
This section contains data used in the test, that
in themselves are not part of the tests.
However, they may fail if the functions tested are ill-formed.
=SML
val I = Combinators.I;
declare_infix (80,"â");
fun (t1 :TYPE) cross (t2: TYPE) : TYPE = mk_ctype("â",[t1,t2]);
val BN = BOOL cross Ü;
val BtoN = mk_ã_type(BOOL, Ü);
val tv1 = mk_vartype "'tv1";
val tv2 = mk_vartype "'tv2";
val tv3 = mk_vartype "'tv3";
fun t1 comma t2 = mk_const(",", (mk_ã_type(t1,mk_ã_type(t2,(t1 cross t2)))));
val Comma = tv1 comma tv2;
val vtv1 = mk_var("vtv1",tv1);
val vtv2 = mk_var("vtv2",tv2);
val vtv3 = mk_var("vtv3",tv3);
val v1 = mk_var("v1",BOOL);
val av1 = mk_var("av1",BOOL);
val v2 = mk_var("v2",mk_ctype("triple",[tv1,tv2,tv3]));
val v3 = mk_var("v2",mk_ctype("triple",[tv3,BOOL,tv1]));
val iv1 = mk_var(" a b c = F",tv1);
val iv2 = mk_var(" a b c = T",BOOL);
val c1 = mk_const("c1",BOOL);
val c2 = mk_const("c2",mk_ctype("triple",[tv1,tv2,tv3]));
val c3 = mk_const("c3",mk_ctype("triple",[tv3,BOOL,tv1]));
val c4 = mk_const("c4",mk_ã_type(BOOL,mk_ã_type(tv2,tv3)));
val c5 = mk_const("c5",mk_ã_type(tv1,mk_ã_type(tv2,BOOL)));
val c6 = mk_const("c6",mk_ã_type(tv1,mk_ã_type(tv2,mk_ã_type(tv3,
	mk_ctype("triple",[tv1,tv2,tv3])))));
val c7 = mk_const(" starts with space",BOOL);
val cm1 = mk_app(c6,vtv1);
val cm2 = mk_app(cm1,vtv2);
val cm3 = mk_app(cm2,vtv3);
val a1 = simple_mk_ç(v1, cm3);
val a2 = simple_mk_ç(v2,v2);
val a3 = simple_mk_ç(hd(gen_vars [tv1][]), c2);
val a4 = simple_mk_ç(iv1, c2);
val eq1 = mk_eq(c1,v1);
val BeqB = equality BOOL BOOL; 
val T = mk_const("T",BOOL);
val F = mk_const("F",BOOL);
val mk_t = T;
val mk_f = F;
val ä = mk_const("ä",mk_ã_type(BOOL,mk_ã_type(BOOL,BOOL)));
val N0 = mk_Ü 0;
val N2 = mk_Ü 2;
val cca = mk_char "a";
val ccc = mk_char "c";
val sc_abc = mk_string "abc";
fun replace_with_const l x = (
	let val (n,ty) = dest_var x
	in mk_const("rwc_" ^ n, ty) end);
=TEX
\section{THE TESTS}
\subsection{Tests on Types}
\subsubsection{simple\_dest\_type}
=SML
store_mt_results mt_run[(
	"simple_dest_type 1",
	simple_dest_type,
	BtoN,
	Ctype("ã",[BOOL,Ü])),
	("simple_dest_type 2",
	simple_dest_type,
	tv1,
	Vartype "'tv1")];
=TEX
\subsubsection{simple\_mk\_type}
=SML
store_mt_results mt_run[(
	"simple_mk_type 1",
	simple_mk_type,
	Ctype("ã",[BOOL,Ü]),
	BtoN),
	("simple_mk_type 2",
	simple_mk_type,
	Vartype "'tv1",
	tv1)];
=TEX
\subsubsection{dest\_ctype}
=SML
store_mt_results mt_run[("dest_ctype 1",
	dest_ctype,
	Ü,
	("Ü",[])),
	("dest_ctype 2",
	dest_ctype,
	Ü,
	("Ü",[])),
	("dest_ctype 3",
	dest_ctype,
	mk_ã_type(BOOL,Ü),
	("ã",[BOOL,Ü])),
	("dest_ctype 4",
	dest_ctype,
	BOOL cross Ü,
	("â",[BOOL,Ü]))
	];

store_mt_results mt_run_fail[("dest_ctype 3001",
	dest_ctype,
	tv1,
	gen_fail_msg "dest_ctype" 3001 ["ª:'tv1º"])];
=TEX
\subsubsection{mk\_ctype}
=SML
store_mt_results mt_run [
	("mk_ctype 1",
	dest_ctype o mk_ctype,
	("UNIT",[]),
	("UNIT",[])),
	("mk_ctype 2",
	dest_ctype o mk_ctype,
	("THREE",[BOOL,Ü,BN]),
	("THREE",[BOOL,Ü,BN])),
	("mk_ctype 3",
	dest_ctype o mk_ctype,
	("",[BOOL,Ü,BN]),
	("",[BOOL,Ü,BN]))
	];
=TEX
\subsubsection{is\_ctype}
=SML
store_mt_results mt_run [
	("is_ctype 1",
	is_ctype,
	BN,
	true),
	("is_ctype 2",
	is_ctype,
	BtoN,
	true),
	("is_ctype 3",
	is_ctype,
	tv1,
	false)
	];
=TEX
\subsubsection{dest\_vartype}	
=SML
store_mt_results mt_run [
	("dest_vartype 1",
	dest_vartype,
	tv1,
	"'tv1"),
	("dest_vartype 2",
	dest_vartype,
	mk_vartype "",
	"")
	];

store_mt_results mt_run_fail [
	("dest_vartype 3019 a",
	dest_vartype,
	BOOL,
	gen_fail_msg "dest_vartype" 3019 ["ª:BOOLº"]),
	("dest_vartype 3019 b",
	dest_vartype,
	BtoN,
	gen_fail_msg "dest_vartype" 3019 ["ª:BOOL ã Üº"])
	];
=TEX
\subsubsection{mk\_vartype}
=SML
store_mt_results mt_run[
	("mk_vartype 1",
	dest_vartype o mk_vartype,
	"'tv1",
	"'tv1"),
	("mk_vartype 2",
	dest_vartype o mk_vartype,
	"",
	""),
	("mk_vartype 3",
	dest_vartype o mk_vartype,
	"BOOL",
	"BOOL")
	];
=TEX
\subsubsection{is\_vartype}
=SML
store_mt_results mt_run [
	("is_vartype 1",
	is_vartype,
	BN,
	false),
	("is_vartype 2",
	is_vartype,
	BtoN,
	false),
	("is_vartype 3",
	is_vartype,
	tv1,
	true)
	];
=TEX
\subsubsection{dest\_ã\_type}
=SML
store_mt_results mt_run [
	("dest_ã_type 1",
	dest_ã_type o mk_ã_type,
	(BOOL,Ü),
	(BOOL,Ü)),
	("dest_ã_type 2",
	dest_ã_type o mk_ã_type,
	(BOOL,tv1),
	(BOOL,tv1))
	];

store_mt_results mt_run_fail [
	("dest_ã_type 3022 a",
	dest_ã_type,
	tv1,
	gen_fail_msg "dest_ã_type" 3022 ["ª:'tv1º"]),
	("dest_ã_type 3022 b",
	dest_ã_type,
	BN,
	gen_fail_msg "dest_ã_type" 3022 ["ª:BOOL â Üº"])
	];
=TEX
\subsubsection{mk\_fun}
=SML
store_mt_results mt_run [
	("mk_ã_type 1",
	mk_ã_type,
	(BOOL,Ü),
	mk_ctype("ã",[BOOL,Ü])),
	("mk_ã_type 2",
	mk_ã_type,
	(BOOL,tv1),
	mk_ctype("ã",[BOOL,tv1]))
	];
=TEX
\subsubsection{is\_ã\_type}
=SML
store_mt_results mt_run [
	("is_ã_type 1",
	is_ã_type,
	BN,
	false),
	("is_ã_type 2",
	is_ã_type,
	BtoN,
	true),
	("is_ã_type 3",
	is_ã_type,
	tv1,
	false)
	];
=TEX
\subsubsection{inst\_type}
=SML
store_mt_results mt_run [
	("inst_type 1",
	uncurry inst_type,
	([(BOOL, tv1),(BN,tv3)], mk_ã_type(tv1,BOOL)),
	mk_ã_type(BOOL,BOOL)),
	("inst_type 2",
	uncurry inst_type,
	([(BOOL, tv1),(BN,tv3)], mk_ã_type(BOOL,tv2)),
	mk_ã_type(BOOL,tv2)),
	("inst_type 3",
	uncurry inst_type,
	([(BOOL, tv1),(BN,tv3)], tv3 cross BOOL),
	BN cross BOOL),
	("inst_type 4",
	uncurry inst_type,
	([(BOOL, tv1),(BN,tv1)], tv1),
	BOOL),
	("inst_type 5",
	uncurry inst_type,
	([(tv3, tv1),(BN,tv3)], tv1),
	tv3),
	("inst_type 6",
	uncurry inst_type,
	([(BtoN, tv1),(BN,tv3)], tv3 cross tv1),
	BN cross BtoN),
	("inst_type 7",
	uncurry inst_type,
	([(BtoN, tv1),(BN,tv3)], tv2 cross tv1),
	tv2 cross BtoN)
	];
store_mt_results mt_run_fail [
	("inst_type 3019",
	inst_type [(BOOL,BOOL)],
	tv1,
	gen_fail_msg "inst_type" 3019 ["ª:BOOLº"])
	];
=TEX
\subsubsection{type\_tycons}
Notice the ordering of test 4's results.
=SML
store_mt_results mt_run [
	("type_tycons 1",
	type_tycons,
	tv1,
	[]),
	("type_tycons 2",
	type_tycons,
	BOOL,
	[("BOOL",0)]),
	("type_tycons 3",
	type_tycons,
	BtoN,
	[("ã",2),("BOOL",0),("Ü",0)]),
	("type_tycons 4",
	type_tycons,
	BtoN cross (mk_ã_type(Ü,BOOL)),
	[("â",2),("ã",2),("Ü",0),("BOOL",0)]),
	("type_tycons 5",
	type_tycons,
	tv1 cross BtoN,
	[("â",2),("ã",2),("BOOL",0),("Ü",0)])
	];
=TEX
\subsubsection{type\_tyvars}
Notice the ordering of test 5's results.
=SML
store_mt_results mt_run [
	("type_tyvars 1",
	type_tyvars,
	tv1,
	["'tv1"]),
	("type_tyvars 2",
	type_tyvars,
	BOOL,
	[]),
	("type_tyvars 3",
	type_tyvars,
	BtoN,
	[]),
	("type_tyvars 4",
	type_tyvars,
	tv1 cross BtoN,
	["'tv1"]),
	("type_tyvars 5",
	type_tyvars,
	tv1 cross (tv2 cross tv1),
	["'tv2","'tv1"])
	];
=TEX
\subsubsection{type\_any}
=SML
store_mt_results mt_run [
	("type_any 1",
	type_any (fn x => is_vartype x andalso ord(dest_vartype x) = ord "T"),
	(tv1 cross tv2),
	false),
	("type_any 2",
	type_any (fn x => is_vartype x andalso ord(dest_vartype x) = ord "T"),
	(mk_vartype "TV1" cross tv2),
	true)
	];
=TEX
=TEX
\subsubsection{type\_map}
=SML
store_mt_results mt_run [
	];
=TEX
\subsection{Tests on Terms}
\subsubsection{simple\_dest\_term}
=SML
store_mt_results mt_run [
	("simple_dest_term 1",
	simple_dest_term,
	vtv2,
	(Var("vtv2",tv2))),
	("simple_dest_term 2",
	simple_dest_term,
	c1,
	(Const("c1",BOOL))),
	("simple_dest_term 3",
	simple_dest_term,
	cm1,
	(App(c6,vtv1))),
	("simple_dest_term 4",
	simple_dest_term,
	a1,
	(Simpleç(v1,cm3)))
	];
=TEX
\subsubsection{simple\_mk\_term}
=SML
store_mt_results mt_run [
	("simple_mk_term 1",
	simple_mk_term,
	(Var("vtv2",tv2)),
	vtv2),
	("simple_mk_term 2",
	simple_mk_term,
	(Const("c1",BOOL)),
	c1),
	("simple_mk_term 3",
	simple_mk_term,
	(App(c6,vtv1)),
	cm1),
	("simple_mk_term 4",
	simple_mk_term,
	(Simpleç(v1,cm3)),
	a1)
	];

store_mt_results mt_run_fail [
	("simple_mk_term 3005",
	simple_mk_term,
	App(c6, c6),
	gen_fail_msg "simple_mk_term" 3005 ["ªc6º","ªc6º"]),
	("simple_mk_term 3006",
	simple_mk_term,
	App(c1, c1),
	gen_fail_msg "simple_mk_term" 3006 ["ªc1º"]),
	("simple_mk_term 3007 a",
	simple_mk_term,
	Simpleç(c1, c1),
	gen_fail_msg "simple_mk_term" 3007 ["ªc1º"]),
	("simple_mk_term 3007 b",
	simple_mk_term,
	Simpleç(cm1, c1),
	gen_fail_msg "simple_mk_term" 3007 ["ªc6 vtv1º"]),
	("simple_mk_term 3007 c",
	simple_mk_term,
	Simpleç(a1, c1),
	gen_fail_msg "simple_mk_term" 3007 ["ªç v1é c6 vtv1 vtv2 vtv3º"])
	];


=SML
=TEX
\subsubsection{type\_of}
=SML
store_mt_results mt_run [
	("type_of 1",
	type_of,
	c1,
	BOOL),
	("type_of 2",
	type_of,
	vtv1,
	tv1),
	("type_of 3",
	type_of,
	cm3,
	mk_ctype("triple",[tv1,tv2,tv3])),
	("type_of 4",
	type_of,
	a1,
	mk_ã_type(BOOL,mk_ctype("triple",[tv1,tv2,tv3])))
	];
=TEX
\subsubsection{dest\_var}
=SML
store_mt_results mt_run [
	("dest_var 1",
	dest_var,
	vtv1,
	("vtv1",tv1)),
	("dest_var 2",
	dest_var,
	mk_var("",BOOL),
	("",BOOL))
	];

store_mt_results mt_run_fail [
	("dest_var 3007 a",
	dest_var,
	c1,
	gen_fail_msg "dest_var" 3007 ["ªc1º"]),
	("dest_var 3007 b",
	dest_var,
	a1,
	gen_fail_msg "dest_var" 3007 ["ªç v1é c6 vtv1 vtv2 vtv3º"]),
	("dest_var 3007 c",
	dest_var,
	cm1,
	gen_fail_msg "dest_var" 3007 ["ªc6 vtv1º"])
	];
=TEX
\subsubsection{mk\_var}
=SML
store_mt_results mt_run [
	("mk_var 1",
	dest_var o mk_var,
	("vtv1",tv1),
	("vtv1",tv1)),
	("mk_var 2",
	dest_var o mk_var,
	(" vtv1",BOOL),
	(" vtv1",BOOL)),
	("mk_var 3",
	dest_var o mk_var,
	("",BtoN),
	("",BtoN))
	];
=TEX
\subsubsection{is\_var}
=SML
store_mt_results mt_run [
	("is_var 1",
	is_var,
	v1,
	true),
	("is_var 2",
	is_var,
	c1,
	false),
	("is_var 3",
	is_var,
	cm1,
	false),
	("is_var 4",
	is_var,
	a1,
	false)
	];
=TEX
\subsubsection{dest\_const}
=SML
store_mt_results mt_run [
	("dest_const 1",
	dest_const,
	c1,
	("c1",BOOL)),
	("dest_const 2",
	dest_const,
	mk_const("",BOOL),
	("",BOOL))
	];

store_mt_results mt_run_fail [
	("dest_const 3009 a",
	dest_const,
	v1,
	gen_fail_msg "dest_const" 3009 ["ªv1º"]),
	("dest_const 3009 b",
	dest_const,
	a1,
	gen_fail_msg "dest_const" 3009 ["ªç v1é c6 vtv1 vtv2 vtv3º"]),
	("dest_const 3009 c",
	dest_const,
	cm1,
	gen_fail_msg "dest_const" 3009 ["ªc6 vtv1º"])
	];
=TEX
\subsubsection{mk\_const}
=SML
store_mt_results mt_run [
	("mk_const 1",
	dest_const o mk_const,
	("cn1",tv1),
	("cn1",tv1)),
	("mk_const 2",
	dest_const o mk_const,
	(" cn1",BOOL),
	(" cn1",BOOL)),
	("mk_const 3",
	dest_const o mk_const,
	("",BtoN),
	("",BtoN))
	];
store_mt_results mt_run_fail [
	("mk_const 3002",
	mk_const,
	("=",BOOL),
	gen_fail_msg "mk_const" 3002 []),
	("mk_const 3002",
	mk_const,
	("ä",BOOL),
	gen_fail_msg "mk_const" 3003 []),
	("mk_const 3004",
	mk_const,
	("É",BOOL),
	gen_fail_msg "mk_const" 3004 ["É"]),
	("mk_const 3004",
	mk_const,
	("Ñ",BOOL),
	gen_fail_msg "mk_const" 3004 ["Ñ"])];

=TEX
\subsubsection{is\_const}
=SML
store_mt_results mt_run [
	("is_const 1",
	is_const,
	v1,
	false),
	("is_const 2",
	is_const,
	c1,
	true),
	("is_const 3",
	is_const,
	cm1,
	false),
	("is_const 4",
	is_const,
	a1,
	false)
	];
=TEX
\subsubsection{dest\_app}
=SML
store_mt_results mt_run [
	("dest_app 1",
	dest_app,
	cm1,
	(c6,vtv1)),
	("dest_app 2",
	dest_app,
	cm3,
	(cm2,vtv3))
	];

store_mt_results mt_run_fail [
	("dest_app 3010 a",
	dest_app,
	v1,
	gen_fail_msg "dest_app" 3010 ["ªv1º"]),
	("dest_app 3010 b",
	dest_app,
	a1,
	gen_fail_msg "dest_app" 3010 ["ªç v1é c6 vtv1 vtv2 vtv3º"]),
	("dest_app 3010 c",
	dest_app,
	c1,
	gen_fail_msg "dest_app" 3010 ["ªc1º"])
	];
=TEX
\subsubsection{mk\_app}
=SML
store_mt_results mt_run [
	("mk_app 1",
	dest_app o mk_app,
	(c6,vtv1),
	(c6,vtv1)),
	("mk_app 2",
	dest_app o mk_app,
	(cm2,vtv3),
	(cm2,vtv3))
	];

store_mt_results mt_run_fail [
	("mk_app 3005",
	mk_app,
	(c6,c1),
	gen_fail_msg "mk_app" 3005 ["ªc6º","ªc1º"]),
	("mk_app 3006",
	mk_app,
	(c1,c1),
	gen_fail_msg "mk_app" 3006 ["ªc1º"])
	];

=TEX
\subsubsection{is\_app}
=SML
store_mt_results mt_run [
	("is_app 1",
	is_app,
	v1,
	false),
	("is_app 2",
	is_app,
	c1,
	false),
	("is_app 3",
	is_app,
	cm1,
	true),
	("is_app 4",
	is_app,
	a1,
	false)
	];
=TEX
\subsubsection{list\_mk\_app}
=SML
store_mt_results mt_run [
	("list_mk_app 1",
	list_mk_app,
	(c6, [vtv1, vtv2, vtv3]),
	cm3),
	("list_mk_app 2",
	list_mk_app,
	(c6, []),
	c6),
	("list_mk_app 3",
	list_mk_app,
	(c1, []),
	c1)
	];

store_mt_results mt_run_fail [
	("list_mk_app 3005",
	list_mk_app,
	(c6,[vtv1, c6,vtv3]),
	gen_fail_msg "mk_app" 3005 ["ªc6 vtv1º","ªc6º"]),
	("list_mk_app 3006",
	list_mk_app,
	(c6,[vtv1, vtv2, vtv3, c1]),
	gen_fail_msg "mk_app" 3006 ["ªc6 vtv1 vtv2 vtv3º"])
	];
=TEX
\subsubsection{strip\_app}
=SML
store_mt_results mt_run [
	("strip_app 1",
	strip_app,
	cm3,
	(c6, [vtv1, vtv2, vtv3])),
	("strip_app 2",
	strip_app,
	c1,
	(c1, []))
	];
=TEX
\subsubsection{simple\_dest\_ç}
=SML
store_mt_results mt_run [
	("simple_dest_ç 1",
	simple_dest_ç,
	a1,
	(v1,cm3)),
	("simple_dest_ç 2",
	simple_dest_ç,
	a4,
	(iv1,c2))
	];

store_mt_results mt_run_fail [
	("simple_dest_ç 3011 a",
	simple_dest_ç,
	v1,
	gen_fail_msg "simple_dest_ç" 3011 ["ªv1º"]),
	("simple_dest_ç 3011 b",
	simple_dest_ç,
	cm1,
	gen_fail_msg "simple_dest_ç" 3011 ["ªc6 vtv1º"]),
	("simple_dest_ç 3011 c",
	simple_dest_ç,
	c1,
	gen_fail_msg "simple_dest_ç" 3011 ["ªc1º"])
	];
=TEX
\subsubsection{simple\_mk\_ç}
=SML
store_mt_results mt_run [
	("simple_mk_ç 1",
	simple_dest_ç o simple_mk_ç,
	(v1, cm3),
	(v1, cm3)),
	("mk_ç 2",
	simple_dest_ç o simple_mk_ç,
	(iv1, c2),
	(iv1, c2))
	];

store_mt_results mt_run_fail [
	("simple_mk_ç 3007 a",
	simple_mk_ç,
	(c6,c6),
	gen_fail_msg "simple_mk_ç" 3007 ["ªc6º"]),
	("simple_mk_ç 3007 b",
	simple_mk_ç,
	(a1,c6),
	gen_fail_msg "simple_mk_ç" 3007 ["ªç v1é c6 vtv1 vtv2 vtv3º"]),
	("simple_mk_ç 3007 c",
	simple_mk_ç,
	(cm1,c6),
	gen_fail_msg "simple_mk_ç" 3007 ["ªc6 vtv1º"])
	];

=TEX
\subsubsection{simple\_is\_ç}
=SML
store_mt_results mt_run [
	("simple_is_ç 1",
	simple_is_ç,
	v1,
	false),
	("simple_is_ç 2",
	simple_is_ç,
	c1,
	false),
	("simple_is_ç 3",
	simple_is_ç,
	cm1,
	false),
	("simple_is_ç 4",
	simple_is_ç,
	a1,
	true)
	];
=TEX
\subsubsection{simple\_list\_mk\_ç}
=SML
store_mt_results mt_run [
	("simple_list_mk_ç 1",
	simple_list_mk_ç,
	([vtv1, vtv2, vtv3], c6),
	simple_mk_ç(vtv1,simple_mk_ç(vtv2,simple_mk_ç(vtv3,c6)))),
	("simple_list_mk_ç 2",
	simple_list_mk_ç,
	([], c6),
	c6)
	];

store_mt_results mt_run_fail [
	("simple_list_mk_ç 3007",
	simple_list_mk_ç,
	([vtv1, c6,vtv3],c6),
	gen_fail_msg "simple_mk_ç" 3007 ["ªc6º"])
	];
=TEX
\subsubsection{is\_free\_var\_in}
Test 2 fails for issue 1.7 of \cite{DS/FMU/IED/IMP003} due to a bug in the implementation,
but correct thereafter.
=SML
store_mt_results mt_run [
	("is_free_var_in 1",
	is_free_var_in (dest_var vtv2),
	cm3,
	true),
	("is_free_var_in 2",
	is_free_var_in (dest_var vtv2),
	simple_mk_ç(vtv2,cm3),
	false),
	("is_free_var_in 3",
	is_free_var_in (dest_var vtv2),
	mk_app(simple_mk_ç(vtv2,cm3), vtv2),
	true),
	("is_free_var_in 3",
	is_free_var_in (dest_var vtv2),
	mk_eq(vtv2,vtv2),
	true)
	];
=TEX
We leave the testing of $mk\_bin\_op$, $equality$, $quantifier$ and their like to the testing
of the functions that use them in their implementation.
\subsubsection{Concerning Equality}
=SML
store_mt_results mt_run [
	("mk_eq 1",
	mk_eq,
	(c1,v1),
	list_mk_app (BeqB, [c1,v1])),
	("mk_eq 2",
	mk_eq,
	(c1,c1),
	list_mk_app (BeqB, [c1,c1]))
	];

store_mt_results mt_run_fail [
	("mk_eq 3012",
	mk_eq,
	(c1, c2),
	gen_fail_msg "mk_eq" 3012 ["ªc1º","ªc2º"])
	];

store_mt_results mt_run [
	("dest_eq 1",
	dest_eq o mk_eq,
	(c1,v1),
	(c1,v1)),
	("dest_eq 2",
	dest_eq o mk_eq,
	(c1,c1),
	(c1,c1))
	];

store_mt_results mt_run_fail [
	("dest_eq 3014",
	dest_eq,
	c1,
	gen_fail_msg "dest_eq" 3014 ["ªc1º"])
	];

store_mt_results mt_run [
	("is_eq 1",
	is_eq,
	eq1,
	true),
	("is_eq 1",
	is_eq,
	c1,
	false)
	];
=TEX
\subsubsection{Concerning ä}
=SML
store_mt_results mt_run [
	("mk_ä",
	mk_ä,
	(T,F),
	list_mk_app(ä,[T,F]))
	];

store_mt_results mt_run_fail [
	("mk_ä 3015",
	mk_ä,
	(mk_t,c3),
	gen_fail_msg "mk_ä" 3015 ["","ªc3º"]),
	("mk_ä 3031",
	mk_ä,
	(c3,mk_t),
	gen_fail_msg "mk_ä" 3031 ["ªc3º"])
	];

store_mt_results mt_run [
	("dest_ä",
	dest_ä o mk_ä,
	(T,F),
	(T,F))
	];

store_mt_results mt_run_fail [
	("dest_ä 3016",
	dest_ä,
	c1,
	gen_fail_msg "dest_ä" 3016 ["ªc1º"])
	];

store_mt_results mt_run [
	("is_ä 1",
	is_ä,
	mk_ä(T,F),
	true),
	("is_ä 2",
	is_ä,
	c1,
	false)
	];

store_mt_results mt_run [
	("list_mk_ä 1",
	list_mk_ä,
	[T],
	T),
	("list_mk_ä 2",
	list_mk_ä,
	[T,F],
	mk_ä(T,F)),
	("list_mk_ä 3",
	list_mk_ä,
	[T,F,c1],
	mk_ä(T,mk_ä(F,c1)))
	];

store_mt_results mt_run_fail [
	("list_mk_ä 3017",
	list_mk_ä,
	[],
	gen_fail_msg "list_mk_ä" 3017 []),
	("list_mk_ä 3031",
	list_mk_ä,
	[vtv1, mk_t],
	gen_fail_msg "list_mk_ä" 3031 ["ªvtv1º"]),
	("list_mk_ä 3015",
	list_mk_ä,
	[mk_t, vtv1],
	gen_fail_msg "list_mk_ä" 3015 ["","ªvtv1º"])
	];
=TEX
\subsubsection{Concerning É}
=SML
store_mt_results mt_run [
	("simple_mk_É",
	simple_mk_É,
	(vtv1, c1),
	mk_app(quantifier "É" tv1 BOOL,
		simple_mk_ç(vtv1, c1)))
	];

store_mt_results mt_run_fail [
	("simple_mk_É 3007",
	simple_mk_É,
	(c1,c1),
	gen_fail_msg "simple_mk_É" 3007 ["ªc1º"]),
	("simple_mk_É 3015",
	simple_mk_É,
	(v1,c2),
	gen_fail_msg "simple_mk_É" 3015 ["","ªc2º"])
	];

store_mt_results mt_run [
	("simple_dest_É",
	simple_dest_É o simple_mk_É,
	(vtv1, c1),
	(vtv1, c1))
	];

store_mt_results mt_run_fail [
	("simple_dest_É 3032",
	simple_dest_É,
	c1,
	gen_fail_msg "simple_dest_É" 3032 ["ªc1º"])
	];

store_mt_results mt_run [
	("simple_is_É 1",
	simple_is_É,
	simple_mk_É (v1,F),
	true),
	("simple_is_É 1",
	simple_is_É,
	c1,
	false)
	];

store_mt_results mt_run [
	("simple_list_mk_É 1",
	simple_list_mk_É,
	([vtv1, vtv2], c1),
	simple_mk_É(vtv1,simple_mk_É(vtv2,c1))),
	("simple_list_mk_É 2",
	simple_list_mk_É,
	([], c1),
	c1)
	];

store_mt_results mt_run_fail [
	("simple_list_mk_É 3007",
	simple_list_mk_É,
	([v1,c1],c1),
	gen_fail_msg "simple_mk_É" 3007 ["ªc1º"]),
	("simple_list_mk_É 3015",
	simple_list_mk_É,
	([v1],c2),
	gen_fail_msg "simple_mk_É" 3015 ["","ªc2º"])
	];

=TEX
\subsubsection{Concerning Ñ}
=SML
store_mt_results mt_run [
	("simple_mk_Ñ",
	simple_mk_Ñ,
	(vtv1, c1),
	mk_app(quantifier "Ñ" tv1 BOOL,
		simple_mk_ç(vtv1, c1)))
	];

store_mt_results mt_run_fail [
	("simple_mk_Ñ 3007",
	simple_mk_Ñ,
	(c1,c1),
	gen_fail_msg "simple_mk_Ñ" 3007 ["ªc1º"]),
	("simple_mk_Ñ 3015",
	simple_mk_Ñ,
	(v1,c2),
	gen_fail_msg "simple_mk_Ñ" 3015 ["","ªc2º"])
	];

store_mt_results mt_run [
	("simple_dest_Ñ",
	simple_dest_Ñ o simple_mk_Ñ,
	(vtv1, c1),
	(vtv1, c1))
	];

store_mt_results mt_run_fail [
	("simple_dest_Ñ 3034",
	simple_dest_Ñ,
	c1,
	gen_fail_msg "simple_dest_Ñ" 3034 ["ªc1º"])
	];

store_mt_results mt_run [
	("simple_is_Ñ 1",
	simple_is_Ñ,
	simple_mk_Ñ (v1,F),
	true),
	("simple_is_Ñ 1",
	simple_is_Ñ,
	c1,
	false)
	];

store_mt_results mt_run [
	("simple_list_mk_Ñ 1",
	simple_list_mk_Ñ,
	([vtv1, vtv2], c1),
	simple_mk_Ñ(vtv1,simple_mk_Ñ(vtv2,c1))),
	("simple_list_mk_Ñ 2",
	simple_list_mk_Ñ,
	([], c1),
	c1)
	];

store_mt_results mt_run_fail [
	("simple_list_mk_Ñ 3007",
	simple_list_mk_Ñ,
	([v1,c1],c1),
	gen_fail_msg "simple_mk_Ñ" 3007 ["ªc1º"]),
	("simple_list_mk_Ñ 3015",
	simple_list_mk_Ñ,
	([v1],c2),
	gen_fail_msg "simple_mk_Ñ" 3015 ["ªc2º"])
	];

=TEX
\subsubsection{Concerning Numbers}
=SML
store_mt_results mt_run [
	("mk_Ü 2",
	mk_Ü,
	2,
	mk_const("2",Ü))
	];

store_mt_results mt_run_fail [
	("mk_Ü 3021",
	mk_Ü,
	~3,
	gen_fail_msg "mk_Ü" 3021 [string_of_int ~3])
	];

store_mt_results mt_run [
	("is_Ü 1",
	is_Ü,
	N0,
	true),
	("is_Ü 2",
	is_Ü,
	mk_const("N0",Ü),
	false)
	];

store_mt_results mt_run [
	("dest_Ü 1",
	dest_Ü,
	N2,
	2)
	];

store_mt_results mt_run_fail [
	("dest_Ü 3026",
	dest_Ü,
	mk_const("N0",Ü),
	gen_fail_msg "dest_Ü" 3026 ["ªN0º"]),
	("dest_Ü 3026",
	dest_Ü,
	v1,
	gen_fail_msg "dest_Ü" 3026 ["ªv1º"])
	];

=TEX
\subsubsection{Concerning Characters}
=SML
store_mt_results mt_run [
	("mk_char 1",
	mk_char,
	"a",
	mk_const("`a",CHAR))
	];

store_mt_results mt_run_fail [
	("mk_char 3023 a",
	mk_char,
	"abc",
	gen_fail_msg "mk_char" 3023 ["abc"]),
	("mk_char 3023 b",
	mk_char,
	"",
	gen_fail_msg "mk_char" 3023 [""])
	];

store_mt_results mt_run [
	("is_char 1",
	is_char,
	ccc,
	true),
	("is_char 2",
	is_char,
	mk_const("ab",CHAR),
	false),
	("is_char 3",
	is_char,
	mk_const("'ab",CHAR),
	false),
	("is_char 4",
	is_char,
	mk_const("`ab",CHAR),
	false)
	];

store_mt_results mt_run [
	("dest_char 1",
	dest_char,
	ccc,
	"c")
	];

store_mt_results mt_run_fail [
	("dest_char 3024 a",
	dest_char,
	mk_const("N0",CHAR),
	gen_fail_msg "dest_char" 3024 ["ªN0º"]),
	("dest_char 3024 b",
	dest_char,
	mk_const("'ab",CHAR),
	gen_fail_msg "dest_char" 3024 ["ª'abº"]),
	("dest_char 3024 c",
	dest_char,
	v1,
	gen_fail_msg "dest_char" 3024 ["ªv1º"])
	];

=TEX
\subsubsection{Concerning Strings}
Note that tests for $dest\_string$ fail for issue 1.7
of \cite{DS/FMU/IED/IMP003}, due to a bug in the implementation, fixed in later verisons.
=SML
store_mt_results mt_run [
	("mk_string 1",
	mk_string,
	"abc",
	mk_const("\"abc",STRING)),
	("mk_string 2",
	mk_string,
	"",
	mk_const("\"",STRING))
	];

store_mt_results mt_run [
	("is_string 1",
	is_string,
	sc_abc,
	true),
	("is_string 2",
	is_string,
	mk_const("ab",STRING),
	false)
	];

store_mt_results mt_run [
	("dest_string 1",
	dest_string,
	sc_abc,
	"abc")
	];

store_mt_results mt_run_fail [
	("dest_string 3025",
	dest_string,
	mk_const("N0",STRING),
	gen_fail_msg "dest_string" 3025 ["ªN0º"]),
	("dest_string 3025",
	dest_string,
	v1,
	gen_fail_msg "dest_string" 3025 ["ªv1º"])
	];


=TEX
\subsubsection{aconv}
Note that test 7 fails for issue 1.7
of \cite{DS/FMU/IED/IMP003}, due to a bug in the implementation, fixed in later verisons.
=SML
store_mt_results mt_run [
	("aconv 1",
	uncurry aconv,
	(vtv1, c1),
	false),
	("aconv 2",
	uncurry aconv,
	(vtv1, vtv1),
	true),
	("aconv 3",
	uncurry aconv,
	(simple_mk_ç(v1,c1), simple_mk_ç(av1,c1)),
	true),
	("aconv 4",
	uncurry aconv,
	(simple_mk_ç(v1,v1), simple_mk_ç(av1,av1)),
	true),
	("aconv 5",
	uncurry aconv,
	(simple_mk_ç(v1,v1), simple_mk_ç(av1,v1)),
	false),
	("aconv 6",
	uncurry aconv,
	(simple_mk_ç(v1,v1), simple_mk_ç(v1,av1)),
	false),
	("aconv 7",
	uncurry aconv,
	(simple_mk_ç(v1,v1), simple_mk_ç(vtv1,vtv1)),
	false)
	];

=TEX
\subsubsection{term\_mem}
=SML
store_mt_results mt_run [
	("term_mem 1",
	(curry(op term_mem)) v1,
	[v2,v1],
	true),
	("term_mem 2",
	(curry(op term_mem)) (simple_mk_ç(v1,v1)),
	[simple_mk_ç(av1,av1),v2],
	true),
	("term_mem 3",
	(curry(op term_mem)) v1,
	[simple_mk_ç(av1,av1),v2],
	false)
	];
=TEX
\subsubsection{term\_less}
=SML
store_mt_results mt_run [
	("term_less 1",
	(curry(op term_less)) [v2,v1],
	v1,
	[v2]),
	("term_less 2",
	(curry(op term_less)) [simple_mk_ç(av1,av1),v2],
	(simple_mk_ç(v1,v1)),
	[v2]),
	("term_less 3",
	(curry(op term_less)) [simple_mk_ç(av1,av1),v2],
	v1,
	[simple_mk_ç(av1,av1),v2])
	];
=TEX
\subsubsection{term\_grab}
=SML
store_mt_results mt_run [
	("term_grab 1",
	(curry(op term_grab)) [v2,v1],
	v1,
	[v2,v1]),
	("term_grab 2",
	(curry(op term_grab)) [simple_mk_ç(av1,av1),v2],
	(simple_mk_ç(v1,v1)),
	[simple_mk_ç(av1,av1),v2]),
	("term_grab 3",
	(curry(op term_grab)) [simple_mk_ç(av1,av1),v2],
	v1,
	[v1,simple_mk_ç(av1,av1),v2])
	];

=TEX
\subsubsection{term\_union}
=SML
store_mt_results mt_run [
	("term_union 1",
	(curry(op term_union)) [v2,v1],
	[v1],
	[v2,v1]),
	("term_union 2",
	(curry(op term_union)) [simple_mk_ç(av1,av1),v2],
	[(simple_mk_ç(v1,v1))],
	[v2,simple_mk_ç(v1,v1)]),
	("term_union 3",
	(curry(op term_union)) [simple_mk_ç(av1,av1),v2],
	[v1],
	[simple_mk_ç(av1,av1),v2,v1]),
	("term_union 4",
	(curry(op term_union)) [F,simple_mk_ç(av1,av1),v2],
	[v1,T,v2],
	[F,simple_mk_ç(av1,av1),v1,T,v2])
	];

=TEX
\subsubsection{list\_term\_union}
=SML
store_mt_results mt_run [
	("list_term_union 1",
	list_term_union,
	[[v2,v1],[v1]],
	[v2,v1]),
	("list_term_union 2",
	list_term_union,
	[[simple_mk_ç(av1,av1),v2],[(simple_mk_ç(v1,v1))]],
	[v2,simple_mk_ç(v1,v1)]),
	("list_term_union 3",
	list_term_union,
	[[simple_mk_ç(av1,av1),v2],[v1]],
	[simple_mk_ç(av1,av1),v2,v1]),
	("list_term_union 4",
	list_term_union,
	[[F,simple_mk_ç(av1,av1),v2],[v1,T,v2]],
	[F,simple_mk_ç(av1,av1),v1,T,v2]),
	("list_term_union 5",
	list_term_union,
	[],
	[]),
	("list_term_union 6",
	list_term_union,
	[[T],[F,v2],[v1,F]],
	[T,v2,v1,F])
	];
=TEX
\subsubsection{string\_variant}
=SML
store_mt_results mt_run [
	("string_variant 1",
	string_variant [],
	"s1",
	"s1"),
	("string_variant 2",
	string_variant ["s1","s2","s3"],
	"s2",
	"s2'"),
	("string_variant 3",
	string_variant ["s2'","s1","s2","s3"],
	"s2",
	"s2''")	];

store_mt_results mt_run [
	("get_variant_suffix 1",
	get_variant_suffix,
	(),
	"'")];

store_mt_results mt_run [
	("set_variant_suffix 1",
	set_variant_suffix,
	"_var",
	"'")];

store_mt_results mt_run [
	("get_variant_suffix 2",
	get_variant_suffix,
	(),
	"_var")];

store_mt_results mt_run_fail [
	("set_variant_suffix 3028",
	set_variant_suffix,
	"",
	gen_fail_msg "variant_suffix" 3028 [])
	];

store_mt_results mt_run [
	("string_variant 4",
	string_variant ["s1","s2","s3","s2'"],
	"s2",
	"s2_var"),
	("string_variant 5",
	string_variant ["s1","s2","s3","s2_var"],
	"s2",
	"s2_var_var")
	];

store_mt_results mt_run [
	("set_variant_suffix 2",
	set_variant_suffix,
	"'",
	"_var")
	];

=TEX
\subsubsection{rename}
=SML
store_mt_results mt_run [
	("rename 1",
	rename ("v1",BOOL) "renamed_v1",
	simple_mk_Ñ(v1, av1),
	simple_mk_Ñ(v1, av1)),
	("rename 2",
	rename ("v1",BOOL) "renamed_v1",
	simple_mk_Ñ(v1, v1),
	simple_mk_Ñ(v1, v1)),
	("rename 3",
	rename ("v1",BOOL) "renamed_v1",
	simple_mk_Ñ(av1, v1),
	simple_mk_Ñ(av1, (mk_var("renamed_v1",BOOL))))
	];
=TEX
\subsubsection{term\_types}
=SML
store_mt_results mt_run [
	("term_types 1",
	term_types,
	cm3,
	[type_of c6, tv1, tv2, tv3]),
	("term_types 2",
	term_types,
	a1,
	[BOOL, type_of c6, tv1, tv2, tv3])
	];
=TEX
\subsubsection{term\_any}
=SML
store_mt_results mt_run [
	("term_any 1",
	term_any (fn x => is_const x andalso fst(dest_const x) = "T"),
	cm3,
	false),
	("term_any 2",
	term_any (fn x => is_const x andalso fst(dest_const x) = "c6"),
	cm3,
	true)
	];
=TEX
\subsubsection{term\_any}
=SML
store_mt_results mt_run [
	("term_tyvars 1",
	term_tyvars,
	cm3,
	["'tv1", "'tv2", "'tv3"])
	];
=TEX
\subsubsection{term\_any}
=SML
store_mt_results mt_run [
	("term_tycons 1",
	term_tycons,
	cm3,
	[("ã", 2), ("triple", 3)]),
	("term_tycons 2",
	term_tycons,
	vtv1,
	[])
	];
=TEX
\subsubsection{term\_consts}
=SML
store_mt_results mt_run [
	("term_consts 1",
	term_consts,
	cm3,
	[dest_const c6]),
	("term_consts 2",
	term_consts,
	mk_eq(T,T),
	[("=",mk_ã_type(BOOL,mk_ã_type(BOOL,BOOL))), ("T",BOOL)])
	];
=TEX
\subsubsection{term\_consts}
=SML
store_mt_results mt_run [
	("term_vars 1",
	term_vars,
	cm3,
	map dest_var [vtv1,vtv2,vtv3]),
	("term_vars 2",
	term_vars,
	mk_eq(T,T),
	[])
	];
=TEX
\subsubsection{type\_match}
=SML
store_mt_results mt_run [
	("type_match 1",
	type_match BOOL,
	tv1,
	[(BOOL,tv1)]),
	("type_match 2",
	type_match BtoN,
	mk_ã_type(tv1,tv2),
	[(Ü,tv2),(BOOL,tv1)]),
	("type_match 3",
	type_match (mk_ã_type(tv1,tv2)),
	mk_ã_type(tv2,tv1),
	[(tv2,tv1),(tv1,tv2)]),
	("type_match 4",
	type_match (mk_ã_type(tv1,mk_ã_type(tv2,tv1))),
	mk_ã_type(tv2,mk_ã_type(tv1,tv2)),
	[(tv2,tv1),(tv1,tv2)]),
	("type_match 5",
	type_match (mk_ã_type(tv2,mk_ã_type(tv2,tv2))),
	mk_ã_type(tv2,mk_ã_type(tv1,tv2)),
	[(tv2,tv1)])
	];

store_mt_results mt_run_fail [
	("type_match 3053 a",
	type_match BOOL,
	BN,
	gen_fail_msg "type_match" 3053 ["ª:BOOLº","ª:BOOL â Üº"]),
	("type_match 3053 b",
	type_match BtoN,
	(mk_ã_type(tv1,tv1)),
	gen_fail_msg "type_match" 3053 ["ª:BOOL ã Üº","ª:'tv1 ã 'tv1º"]),
	("type_match 3053 c",
	type_match (mk_ã_type(BOOL,mk_ã_type(tv2,BN))),
	(mk_ã_type(tv1,mk_ã_type(tv2,tv1))),
	gen_fail_msg "type_match" 3053 ["ª:BOOL ã 'tv2 ã (BOOL â Ü)º",
		"ª:'tv1 ã 'tv2 ã 'tv1º"])
	];
=TEX
\subsubsection{term\_match}
=SML
store_mt_results mt_run [
	("term_match 1",
	term_match v1,
	v1,
	([],[])),
	("term_match 2",
	term_match v2,
	vtv1,
	([(mk_ctype("triple",[tv1,tv2,tv3]),tv1)],[(v2,
		mk_var("vtv1",mk_ctype("triple",[tv1,tv2,tv3])))])),
	("term_match 3",
	term_match (list_mk_app (mk_const("trio",mk_ã_type(BOOL,mk_ã_type(tv2,
		mk_ã_type(tv3, (BOOL cross tv2))))),[v1, vtv2,vtv3])),
	list_mk_app ((mk_const("trio",mk_ã_type(tv1,mk_ã_type(tv2,mk_ã_type(tv3, 
	(tv1 cross tv2)))))),
	[vtv1, vtv2,vtv3]),	
	([(BOOL, tv1)],[(v1, mk_var("vtv1",BOOL))])),
	("term_match 4",
	term_match (mk_eq(T,F)),
	mk_eq(v1,av1),
	([],[(F,av1),(T,v1)])),
	("term_match 5",
	term_match (mk_var("v",tv2)),
	mk_var("v",tv1),
	([(tv2,tv1)],[]))
	];

store_mt_results mt_run_fail [
	("term_match 3054 a",
	term_match mk_t,
	mk_f,
	gen_fail_msg "term_match" 3054 ["ªTº","ªFº"]),
	("term_match 3054 b",
	term_match a1,
	a2,
	gen_fail_msg "term_match" 3054 ["ªç v1é c6 vtv1 vtv2 vtv3º", 
		"ªç v2é v2º"]),
	("term_match 3054 b",
	term_match (mk_eq(T,F)),
	mk_eq(v1,v1),
	gen_fail_msg "term_match" 3054 ["ªT Ç Fº", "ªv1 Ç v1º"])
	];
=TEX
\subsubsection{is\_type\_instance}
=SML
store_mt_results mt_run [
	("is_type_instance 1",
	is_type_instance tv1,
	BOOL,
	false),
	("is_type_instance 2",
	is_type_instance BOOL,
	tv1,
	true)
	];
=TEX
\subsubsection{mg\_variables}
=SML
store_mt_results mt_run [
	("gen_vars",
	gen_vars [BOOL, mk_ã_type(BOOL,tv1),tv1,BOOL],
	[mk_var("@_2",tv1), mk_var("@_1",mk_ã_type(tv1,BOOL)), 
	(list_mk_app ((mk_const("@trio",mk_ã_type(tv1,mk_ã_type(tv2,mk_ã_type(tv3, 
	(tv1 cross tv2)))))),
	[vtv1, mk_var("@_4",tv2),vtv3])),
	mk_const("@_3",BOOL)],
	[mk_var("@_3",BOOL), mk_var("@_5",mk_ã_type(BOOL,tv1)),
		mk_var("@_6",tv1),mk_var("@_7",BOOL)])
	];
=TEX
\subsubsection{variant}
=SML
store_mt_results mt_run [
	("variant 1",
	variant [],
	vtv1,
	vtv1),
	("variant 2",
	variant [vtv1],
	vtv1,
	mk_var("vtv1'",tv1)),
	("variant 3",
	variant [(vtv1),(mk_var("vtv1'",tv1))],
	vtv1,
	mk_var("vtv1''",tv1)),
	("variant 4",
	variant [mk_var("vtv1",tv2)],
	vtv1,
	mk_var("vtv1'",tv1))
	];

store_mt_results mt_run_fail [
	("variant 3007",
	variant[],
	c1,
	gen_fail_msg "variant" 3007 ["ªc1º"]),
	("variant 3007",
	variant[c1],
	vtv1,
	gen_fail_msg "variant" 3007 ["ªc1º"])
	];
=TEX
\subsubsection{list$\_$variant}
=SML
store_mt_results mt_run [
	("list_variant 1",
	list_variant [],
	[vtv1],
	[vtv1]),
	("list_variant 2",
	list_variant [vtv1],
	[vtv1,vtv1],
	[mk_var("vtv1'",tv1), mk_var("vtv1''",tv1)]),
	("list_variant 3",
	list_variant [(vtv1),(mk_var("vtv1'",tv1))],
	[vtv1],
	[mk_var("vtv1''",tv1)]),
	("list_variant 4",
	list_variant [mk_var("vtv1",tv2)],
	[vtv1],
	[mk_var("vtv1'",tv1)])
	];

store_mt_results mt_run_fail [
	("list_variant 3007",
	list_variant[],
	[c1],
	gen_fail_msg "list_variant" 3007 ["ªc1º"]),
	("list_variant 3007",
	list_variant[c1],
	[vtv1],
	gen_fail_msg "list_variant" 3007 ["ªc1º"])
	];
=TEX
\subsubsection{is\_free\_in}
=SML
store_mt_results mt_run [
	("is_free_in 1",
	is_free_in vtv2,
	cm3,
	true),
	("is_free_in 2",
	is_free_in vtv2,
	simple_mk_ç(vtv2,cm3),
	false),
	("is_free_in 3",
	is_free_in vtv2,
	mk_app(simple_mk_ç(vtv2,cm3), vtv2),
	true),
	("is_free_in 3",
	is_free_in vtv2,
	mk_eq(vtv2,vtv2),
	true)
	];

store_mt_results mt_run_fail [
	("is_free_in 3007",
	is_free_in c1,
	c1,
	gen_fail_msg "is_free_in" 3007 ["ªc1º"])
	];

=TEX
\subsubsection{frees}
=SML
store_mt_results mt_run [
	("frees 1",
	frees,
	cm3,
	[vtv3, vtv2, vtv1]),
	("frees 2",
	frees,
	simple_mk_ç(vtv2,cm3),
	[vtv3, vtv1]),
	("frees 3",
	frees,
	mk_eq(vtv1,vtv1),
	[vtv1])
	];
=TEX
\subsubsection{var\_subst}
=SML
store_mt_results mt_run [
	("var_subst 1",
	var_subst [(T,v1)],
	c1,
	c1),
	("var_subst 2",
	var_subst [(T,v1)],
	v1,
	T),
	("var_subst 3",
	var_subst [(T,v1),(F,av1)],
	mk_eq(v1,av1),
	mk_eq(T,F)),
	("var_subst 4",
	var_subst [(T,v1),(F,v1)],
	mk_eq(v1,av1),
	mk_eq(T,av1)),
	("var_subst 5",
	var_subst [(T,v1),(F,av1)],
	simple_mk_Ñ(v1,av1),
	simple_mk_Ñ(v1,F)),
	("var_subst 6",
	var_subst [(T,v1),(F,av1)],
	simple_mk_Ñ(v1,v1),
	simple_mk_Ñ(v1,v1)),
	("var_subst 7",
	var_subst [(T,v1),(F,av1)],
	simple_mk_Ñ(mk_var("v1",Ü),v1),
	simple_mk_Ñ(mk_var("v1",Ü),T)),
	("var_subst 8",
	var_subst [(av1,v1)],
	simple_mk_Ñ(mk_var("av1",Ü),v1),
	simple_mk_Ñ(mk_var("av1'",Ü),av1))

	];

store_mt_results mt_run_fail [
	("var_subst 3012",
	var_subst [(T,vtv1)],
	c1,
	gen_fail_msg "var_subst" 3012 ["ªTº","ªvtv1º"]),
	("var_subst 3007",
	var_subst [(T,c1)],
	c1,
	gen_fail_msg "var_subst" 3007 ["ªc1º"])
	];
=TEX
\subsubsection{subst}
=SML
store_mt_results mt_run [
	("subst 1",
	subst [(T,v1)],
	c1,
	c1),
	("subst 2",
	subst [(T,v1)],
	v1,
	T),
	("subst 3",
	subst [(T,v1),(F,av1)],
	mk_eq(v1,av1),
	mk_eq(T,F)),
	("subst 4",
	subst [(T,v1),(F,v1)],
	mk_eq(v1,av1),
	mk_eq(T,av1)),
	("subst 5",
	subst [(T,v1),(F,av1)],
	simple_mk_Ñ(v1,av1),
	simple_mk_Ñ(v1,F)),
	("subst 6",
	subst [(T,v1),(F,av1)],
	simple_mk_Ñ(v1,v1),
	simple_mk_Ñ(v1,v1)),
	("subst 7",
	subst [(T,v1),(F,av1)],
	simple_mk_Ñ(mk_var("v1",Ü),v1),
	simple_mk_Ñ(mk_var("v1",Ü),T)),
	("subst 8",
	subst [(v1,mk_ä(T,F))],
	(list_mk_ä[T,F,T,F]),
	(list_mk_ä[T,F,v1])),
	("subst 9",
	subst [(v1,mk_ä(T,F))],
	simple_mk_ç(v1,list_mk_ä[T,F,T,F]),
	(simple_mk_ç(mk_var("v1'",BOOL),list_mk_ä[T,F,v1])))
	];

store_mt_results mt_run_fail [
	("subst 3012",
	subst [(T,vtv1)],
	c1,
	gen_fail_msg "subst" 3012 ["ªTº","ªvtv1º"])
	];
=TEX
\subsubsection{term\_map}
=SML
store_mt_results mt_run[
	("term_map",
	term_map replace_with_const,
	cm3,
	list_mk_app(c6,[mk_const("rwc_vtv1",tv1),
		mk_const("rwc_vtv2",tv2),
		mk_const("rwc_vtv3",tv3)]))
	];
=TEX
\subsubsection{inst}
=SML
store_mt_results mt_run [
	("inst 1",
	inst [mk_var("av1",tv1),mk_var("av2",tv2)] [(BOOL,tv1),(tv1,tv2)],
	cm3,
	list_mk_app(mk_const("c6", mk_ã_type(BOOL,mk_ã_type(tv1,
		mk_ã_type(tv3,mk_ctype("triple",[BOOL,tv1,tv3]))))),
		[mk_var("vtv1",BOOL),
		 mk_var("vtv2",tv1),
		vtv3])),
	("inst 2",
	inst [mk_var("vtv2",tv1),mk_var("av2",tv2)] [(BOOL,tv1),(tv1,tv2)],
	cm3,
	list_mk_app(mk_const("c6", mk_ã_type(BOOL,mk_ã_type(tv1,
		mk_ã_type(tv3,mk_ctype("triple",[BOOL,tv1,tv3]))))),
		[mk_var("vtv1",BOOL),
		 mk_var("vtv2'",tv1),
		vtv3]))
	];

store_mt_results mt_run_fail [
	("inst 3007",
	inst [c1],
	[],
	gen_fail_msg "inst" 3007 ["ªc1º"]),
	("inst 3019",
	inst [],
	[(BOOL,BOOL)],
	gen_fail_msg "inst" 3019 ["ª:BOOLº"])
	];
=TEX
\subsection{term$\_$fail}
This will fail if the pretty-printer is not yet installed.
=SML
store_mt_results mt_run_fail [
	("term_fail",
	term_fail "term_fail" 3001,
	[mk_eq(T,F)],
	gen_fail_msg "term_fail" 3001 ["ªT Ç Fº"])
	];

=TEX
\subsection{type$\_$fail}
This will fail if the pretty-printer is not yet installed.
=SML
store_mt_results mt_run_fail [
	("type_fail",
	type_fail "type_fail" 3001,
	[BtoN],
	gen_fail_msg "type_fail" 3001 ["ª:BOOL ã Üº"])
	];

=TEX
\subsection{End of Tests}
=SML
summarize_mt_results ();
(* PolyML.quit(); *)
=TEX
\end{document}
