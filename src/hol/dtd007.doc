=IGN
********************************************************************************
dtd007.doc: this file is part of the ProofPower system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
%  dtd007.doc  %Z% $Date: 1992/09/10 09:45:10 $ $Revision: 1.42 $ $RCSfile: dtd007.doc,v $
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
\TPPtitle{Detailed Design for the Derived Rules of Inference}  %% Mandatory field
\def\TPPheadtitle{Detailed Design for the Derived Rules of Inference}
\TPPref{DS/FMU/IED/DTD007}  %% Mandatory field
\def\SCCSversion{$Revision: 1.42 $
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 1992/09/10 09:45:10 $ %
}}  %% Mandatory field
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{K.~Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.Arthan & FST Team Leader}
\TPPabstract{This document gives a detailed design for the
derived rules of inference in ICL HOL.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Project Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item [Issue 1.1]
First version.
\item [Issue 1.2]
Changes after RDA comments.
\item [Issue 1.3,1.4]
Moved statements about Cambridge HOL outside of documentation
boxes.
Added some conversions paralleling the functionality of some of the rules given in \cite{DS/FMU/IED/DTD006} and this document.
\item [Issue 1.5]
Put in designs for primitive and built-in rules,
derived from \cite{DS/FMU/IED/DTD006}.
Some tidying up.
\item [Issue 1.6]
Changed $suc\_conv$ to fail if given $0$, as in proto-type.
Various changes to error messages, introduced a few new
conversionals.
Primitive and built-in inference rules, and conversionals
all module tested to these designs.
\item [Issue 1.7]
Corrected minor errors.
\item [Issue 1.8]
Split contents between this document,
\cite{DS/FMU/IED/DTD026} and \cite{DS/FMU/IED/DTD027}.
\item [Issue 1.9]
Corrected $if$ rules, added $disch\_rule$, placed set material in \cite{DS/FMU/IED/DTD027},
removed $µ\_t\_thm$, added $³\_thm1$.
\item [Issue 1.11]
Renamed $LIST\_THEN\_C$ to $EVERY\_C$ and $LIST\_ORELSE\_C$ to $FIRST\_C$.
Added $COMB\_C$.
\item [Issue 1.12]
Bought $TOP\_TRAVERSE\_C$ into line with the prototype
$TOP\-\_DEPTH\-\_CONV$, and
$prove\-\_asm\-\_rule$ now ignores missing assumptions.
\item [Issue 1.13]
Results of tests.
Corrected error messages.
Reworked $if$ rules.
\item [Issue 1.14]
Corrected a 6029 error message.
Noted that errors 6036, 6065, 6066 and 6072 are raised by $error$ not $fail$.
Changed $?\_TRAVERSE\_C$ to $?\_MAP\_C$.
$?\_MAP\_C$ all have failure 7005 added.
The prefix $simple$ is moved to being the first prefix, bar $icl'$.
\item[Issue 1.15]
$simple\_¶\_elim$ now does not complain if the assumption in the side-theorem.
Corrected duplicate error messages.
\item[Issue 1.16]
Added $id\_conv$.
\item [Issue 1.17]
Corrected \LaTeX\ errors, and formatting faults:
no code changes.
\item [Issue 1.18,1.19]
Changed as result of changes caused by IR0016.
\item [Issue 1.18,1.19,1.20]
Reacting to issue 1.18 of \cite{DS/FMU/IED/DTD006}.
\item [Issue 1.21]
Removed message 7041 and 7030.
Corrected message 7066.
\item [Issue 1.22]
Dealt with trivial mismatches in message 3014.
\item [Issue 1.23]
Renamings of functions containing the name atom $simple$,
and renaming of $aconv$.
\item [Issue 1.24]
Replaced error message 7045 with 3010.
\item [Issue 1.25]
Added $asm\_inst\_term\_rule$, $simple\_´\_match\_mp\_rule1$, $simple\_¤\_match\_mp\_rule1$,
and $COND\_C$.
Improved error messages.
\item [Issue 1.26]
Tidying up presentation.
\item [Issue 1.27]
Corrected statements of side conditions in $simple\-\_Å\-\_elim\-\_rule$
and $¶\_elim\_rule$.
Tidied so error messages.
\item [Issue 1.28]
Changed description of $all\_simple\_µ\_elim$ to match reality.
\item[Issue 1.29]
Padded out a ``='' that started the line in a display.
\item [Issue 1.30]
Added $plus\_conv$, removed $div2\_conv$ and $mod2\_conv$,
following change request CR007.
\item [Issue 1.31]
Tidying up \LaTeX.

\item[Issue 1.32, \FormatDate{92/01/20} ] Updated to use new fonts.
\item[Issue 1.33]
Corrected message 6085, using new font for percent keywords.
\item [Issue 1.34 (12th March 1992)] Various minor additions and extensions.
\item [Issue 1.35 (13th April 1992)]
Changes due to CR0017.
\item[Issue 1.36 (14 May 1992)] Use correct quotation symbols.
\item [Issue 1.37 (22nd May 1992)]
Clarifying descriptions.
\item [Issue 1.38(26th May 1992)]
Renamings from version 1.5 of DS/FMU/IED/WRK038.
\item [Issue 1.39]
Changed the $match\_mp\_rule$s to be more uniform with
the $eq\_match\_conv$s.
\item [Issue 1.40(20th August 1992)]
Clarifying text.
\item [Issue 1.42(10th September 1992)]
Fixed a single typo.
\item[Issue 1.43] Copyright and banner updates for open source release.
\end{description}
\subsection{Changes Forecast}
None.
\section{GENERAL}
\subsection{Scope}
This document contains a detailed design for the
derived rules of inference.
This is called for in \cite{DS/FMU/IED/HLD009}.
The design is
implemented in \cite{DS/FMU/IED/IMP007}.
\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains a detailed design for some
derived rules of inference in Release 001 of ICL HOL.
Though other rules of inference will be introduced, this
document should provide a core set, at least covering the rules
of natural deduction, and providing at least easy access to the functionality
of the rules of inference for the prototype ICL HOL
(other than rewriting)
Studies of this coverage may be found in \cite{DS/FMU/IED/WRK013} and
\cite{DS/FMU/IED/WRK014}.
Rewriting rules are covered by \cite{DS/FMU/IED/DTD026}
and rules of inference concerning paired abstractions
(rather than simple quantifiers) in \cite{DS/FMU/IED/DTD027}.

The document provides groups of rules of inference, related by their core operator.
Certain inference rules are noted as primitive, or built-in.
This means that their implementation will just be ``sugar'' surrounding a call to an inference rule from \cite{DS/FMU/IED/DTD006}, the new name being formed by stripping off the prefix $icl'$ from the name in \cite{DS/FMU/IED/DTD006}.

All functions require all their arguments before they can be evaluated,
unless otherwise noted.
All functions require all their arguments to begin evaluation,
unless otherwise noted.

Note also that the order of declaration given in this document will
not necessarily reflect the order of implementation in
\cite{DS/FMU/IED/IMP007}.

All successful calls of inference rules given in this document,
other than the conversionals, are profiled
(i.e. a call to $prof$ will be made).
\subsubsection{Dependencies}
Loading this document is dependent on those
files indicated as preceding it in the ICL HOL release 001 makefile.

This document places requirements upon the constants handled by the
inference rules discussed.
In summary, the requirements are that the definitions of the constants must be such that the designs of the rules are satisfiable.
\subsubsection{Deficiencies}
Some of the inference rules given may never be useful.
\subsubsection{Possible Enhancements}
As the choice of coverage is not rigidly defined, it is possible
some appropriate functions are not given.
\subsubsection{Terminology}
The following supplements the terminology used in those documents
upon which this one depends.
\begin{tabular}{p{1.3in} p{4.9in}}
existentially quantified theorem & a theorem whose conclusion is a $¶$-term \\
uniquely existentially quantified theorem & a theorem whose conclusion is a $¶‰1$-term \\
\end{tabular}
\section{INFIX DIRECTIVES}
A Standard ML $infix$ command must be given at the ``top level''.
Thus we give the commands here for those functions declared in the following signatures.
=SML
infix 4 THEN_C;
infix 4 ORELSE_C;
infix 4 THEN_TRY_C;
infix 4 AND_OR_C;
=TEX
(The priorities given are probably not appropriate)
\section{THE DERIVED RULES OF REASONING}
=DOC
signature ÛDerivedRules1Ý = sig
=DESCRIBE
This provides the derived rules of inference in Release 001 of ICL HOL.
Though other rules of inference may be introduced, this
document's signature should provide a core set, at least covering the common rules
of natural deduction.
It subsumes the inference rules of the abstract data type $THM$.
=ENDDOC
Note that unusable theorems (e.g. out of scope) will cause the functions underlying
this interface to raise, using $error$, messages 6036, 6065, 6066 and 6072.
These cannot, by convention be caught by the interface functions.
\subsection{Concerning Instantiation}
=DOC
val Ûinst_term_ruleÝ : (TERM * TERM) list -> THM -> THM;
=DESCRIBE
Parallel instantiation of term variables within a theorem's conclusion to some other values.
=FRULE 1 Rule
inst_term_rule
[..., (¬ti®, ¬xi®), ...]
÷
‡ ô t[x1, ..., xn]
÷
‡ ô t[t1, ..., tn]
=TEX
A built-in inference rule.
=SEEALSO
$asm\_inst\_term\_rule$
=FAILURE
3007	?0 is not a term variable
6027	Types of element (?0, ?1) in term association list differ
6028	Instantiation variable ?0 free in assumption list
=ENDDOC
($INST$ in Cambridge HOL)
=DOC
val Ûinst_type_ruleÝ : (TYPE * TYPE) list -> THM -> THM;
=DESCRIBE
Parallel instantiation of some of the type variables of the conclusion of a theorem.
=FRULE 1 Rule
inst_type_rule
[(Ó1, tyv1), ..., (Ón,tyvn)]
÷
‡ ô t[tyv1,...tyvn]
÷
‡ ô t[Ó1,...Ón]
=TEX
$inst\_type\_rule$ $talist$ $thm$ will instantiate each type variable in
$talist$ with its associated type.
It will decorate free variables that would become identified with
other variables (both in conclusion and assumptions)
by their types becoming the same and the names originally being the same.
To instantiate types in the assumption list, see $asm\_inst\_type\_rule$.

A primitive inference rule.
=SEEALSO
$asm\_inst\_type\_rule$ for something that also works
on type variables in the assumption list.
=FAILURE
3019	?0 is not a type variable
6006	Trying to instantiate type variable ?0, which occurs in assumption list
=ENDDOC
($INST\_TYPE$ in Cambridge HOL)

\subsection{Concerning $T$}
$t\_thm$ is declared in section \ref{theorems}.
=DOC
val Û¤_t_introÝ :  THM -> THM;
=DESCRIBE
The conclusion of a theorem is equal to $T$.
=FRULE 1 Rule
¤_t_intro
÷
‡ ô t
÷
‡ ô t ¤ T
=TEX
=ENDDOC
($EQT\_INTRO$ in Cambridge HOL)
An informal justification may be found in \cite{DS/FMU/IED/DTD006}.
=DOC
val Û¤_t_elimÝ :  THM -> THM;
=DESCRIBE
We can always eliminate $\ldots ¤ T$.
=FRULE 1 Rule
¤_t_elim
÷
‡ ô t ¤ T
÷
‡ ô t
=TEX
=FAILURE
7106	?0 not of the form `‡ ô t ¤ T`
=ENDDOC
($EQT\_ELIM$ in Cambridge HOL)
An informal justification may be found in \cite{DS/FMU/IED/DTD006}.
\subsection{Concerning $F$}
$f\_thm$ is declared in section \ref{theorems}.
=DOC
val Ûcontr_ruleÝ : TERM -> THM -> THM;
=DESCRIBE
Intuitionistic contradiction rule:
=FRULE 1 Rule
contr_rule
¬t®
÷
‡ ô F
÷
‡ ô t
=TEX
=FAILURE
7001	?0 is not of form: `‡ ô F`
3031	?0 is not of type ”BOOL®
=ENDDOC
($CONTR$ in Cambridge HOL)
=DOC
val Ûc_contr_ruleÝ : TERM -> THM -> THM;
=DESCRIBE
Classical contradiction rule:
=FRULE 1 Rule
c_contr_rule
¬t®
÷
‡, ³t' ô F
÷
‡ ô t
=TEX
Note that the argument is the unnegated form of what must be present
in the assumption list for success.
Works up to $\alpha$-conversion.
=FAILURE
7001	?0 is not of form: `‡ ô F`
3031	?0 is not of type ”BOOL®
7003	Negation of ?0 is not in assumption list
=ENDDOC
($CCONTR$ in Cambridge HOL)
\subsection{Concerning Negation}
=DOC
val Û³_introÝ : TERM -> THM -> THM -> THM;
=DESCRIBE
Given two theorems with contradictory conclusions
(up to $\alpha$-convertibility), their assumptions must be inconsistent, and thus any member of the lists
(or indeed, anything else)
may be proven false on the assumption of the remainder
(reductio ad absurdum).
=FRULE 1 Rule
³_intro
¬a®
÷
‡1 ô b ; ‡2 ô ³ b
÷
(‡1 À ‡2) \ {a} ô ³ a
=TEX
Works up to $\alpha$-conversion, and input theorems may be
in either order.
=FAILURE
3031	?0 is not of type ”BOOL®
7004	?0 and ?1 are not of the form: `‡1 ô a` and `‡2 ô ³ a`
=ENDDOC
=DOC
val Û³_elimÝ : TERM -> THM -> THM -> THM;
=DESCRIBE
Given two contradictory theorems with the same assumptions,
conclude any other fact from the assumptions:
input theorems may be
in either order.

=FRULE 1 Rule
³_elim
¬b®
÷
‡1 ô a ; ‡2 ô ³ a
÷
‡1 À ‡2 ô b
=TEX
=FAILURE
3031	?0 is not of type ”BOOL®
7004	?0 and ?1 are not of the form: `‡1 ô a` and `‡2 ô ³ a`
=ENDDOC
=DOC
val Û³_³_introÝ : THM -> THM;
=DESCRIBE
We may always introduce a double negation.
=FRULE 1 Rule
³_³_intro
÷
‡ ô t
÷
‡ ô ³ (³ t)
=TEX
=ENDDOC
=DOC
val Û³_³_elimÝ : THM -> THM;
=DESCRIBE
A double negation is redundant.
=FRULE 1 Rule
³_³_elim
÷
‡ ô ³ (³ t)
÷
‡ ô t
=TEX
=FAILURE
7006	?0 is not of the form: `‡ ô ³ (³ t)`
=ENDDOC
=DOC
val Û³_³_convÝ : CONV;
=DESCRIBE
A double negation is redundant.
=FRULE 1 Conversion
³_³_conv
¬³ (³ t)®
÷
÷
‡ ô ³ (³ t) ¤ t
=TEX
=FAILURE
7022	?0 is not of the form:¬³ (³ t)®
=ENDDOC

\subsection{Concerning ±}
=DOC
val Û±_introÝ : THM -> THM -> THM;
=DESCRIBE
Conjoin two theorems.
=FRULE 1 Rule
±_intro
÷
‡1 ô t1; ‡2 ô t2
÷
‡1 À ‡2 ô t1 ± t2
=TEX
=ENDDOC
($CONJ$ in Cambridge HOL)
If we choose eager renaming, we might want to do a check here for
the identification of distinct free variables in the two theorems.
=DOC
val Û±_left_elimÝ : THM -> THM;
=DESCRIBE
Give the left conjunct of a conjunction.
=FRULE 1 Rule
±_left_elim
÷
‡ ô t1 ± t2
÷
‡ ô t1
=TEX
=FAILURE
7007	?0 is not of the form: `‡ ô t1 ± t2`
=ENDDOC
($CONJUNCT1$ in Cambridge HOL)
=DOC
val Û±_right_elimÝ : THM -> THM;
=DESCRIBE
Give the right conjunct of a conjunction.
=FRULE 1 Rule
±_right_elim
÷
‡ ô t1 ± t2
÷
‡ ô t2
=TEX
=FAILURE
7007	?0 is not of the form: `‡ ô t1 ± t2`
=ENDDOC
($CONJUNCT2$ in Cambridge HOL)
Cambridge HOL has $CONJ\_PAIR$, that returns the pair of theorems
resulting individually from the above two elimination rules.
We choose not to provide this.
=DOC
val Ûlist_±_introÝ : THM list -> THM;
=DESCRIBE
Conjoin a list of theorems.
=FRULE 1 Rule
list_±_intro
÷
[‡1 ô t1, ..., ‡n ô tn]
÷
‡1 À ... ‡n ô t1 ± ... tn
=TEX
=FAILURE
7107	List may not be empty
=ENDDOC
($LIST\_CONJ$ in Cambridge HOL)
=DOC
val Ûstrip_±_ruleÝ : THM -> THM list;
=DESCRIBE
Break a theorem into conjuncts as far as possible.
=FRULE 1 Rule
strip_±_rule
÷
‡ ô t
÷
[‡ ô t1, ..., ‡ ô tn]
=TEX
where $t$ can be formed from the $t_i$ by $±\_intro$ alone, with
no duplication, exception or reordering.
=EXAMPLE
strip_±_rule `ô (a ± b) ± (a ± c ± d)`
 =
[`ô a`, `ô b`, `ô a`, `ô c`, `ô d`]
=ENDDOC
($CONJUNCTS$ in Cambridge HOL)
=DOC
val Û´_±_ruleÝ : THM -> THM;
=DESCRIBE
A theorem whose conclusion is an implication of an implication is equivalent to one whose conclusion is a conjunction and an
implication.
=FRULE 1 Rule
´_±_rule
÷
‡ ô a ´ b ´ c
÷
‡ ô (a ± b) ´ c
=TEX
=FAILURE
7008	?0 is not of the form: `‡ ô a ´ b ´ c`
=ENDDOC
=DOC
val Û±_´_ruleÝ : THM -> THM;
=DESCRIBE
A theorem whose conclusion is an implication from a conjunction is an equivalent to one whose conclusion is an implication of an implication.
=FRULE 1 Rule
±_´_rule
÷
‡ ô (a ± b) ´ c
÷
‡ ô a ´ b ´ c
=TEX
=FAILURE
7009	?0 is not of the form: `‡ ô (a ± b) ´ c`
=ENDDOC
The above two are from \cite{Manna74}, as derived rules
of inference.

\subsection{Concerning ²}
=DOC
val Û²_left_introÝ : TERM -> THM -> THM;
=DESCRIBE
Introduce a disjunct to the left of a theorem's conclusion.
=FRULE 1 Rule
²_left_intro
¬a®
÷
‡ ô b
÷
‡ ô a ² b
=TEX
=FAILURE
3031	?0 is not of type ”BOOL®
=ENDDOC
($DISJ2$ in Cambridge HOL)
=DOC
val Û²_right_introÝ : TERM -> THM -> THM;
=DESCRIBE
Introduce a disjunct to the right of a theorem's conclusion.
=FRULE 1 Rule
²_right_intro
¬a®
÷
‡ ô b
÷
‡ ô b ² a
=TEX
=FAILURE
3031	?0 is not of type ”BOOL®
=ENDDOC
($DISJ1$ in Cambridge HOL)

=DOC
val Û²_elimÝ : THM -> THM -> THM -> THM;
=DESCRIBE
Given a disjunctive theorem, and two further theorems, each
containing one of the disjuncts in their assumptions, but
with the same conclusion, we may eliminate the disjunct assumption
from the second of the theorems.
=FRULE 1 Rule
²_elim
÷
‡1 ô t1 ² t2
‡2, t1' ô t
‡3, t2' ô t'
÷
‡1 À ‡2 À ‡3 ô t
=TEX
where $t1$ and $t1'$ are $\alpha$-convertible, as are
$t2$ and $t2'$, and $t$ and $t'$.
Actually, $t1'$ and $t2'$ do not have to be present in the
assumption lists for this function to work.
=FAILURE
7010	?0 is not of the form: `‡ ô t1 ² t2`
7083	?0, ?1 and ?2 are not of the form: `‡1 ô t1 ² t2`, `‡2, t1a ô t3`
	and `‡3, t2a ô t3a`, where ¬t1® and ¬t1a®, ¬t2® and ¬t2a®,
	¬t3® and ¬t3a® are each Á-convertible
=ENDDOC
($DISJ\_CASES$ in Cambridge HOL)

=DOC
val Û²_cancel_ruleÝ : THM -> THM -> THM;
=DESCRIBE
If we know a disjunction is true, and one of its disjuncts is
false, then the other must be true.
If the second theorem is the negation of both disjuncts,
then the second disjunct will be eliminated.
(modus tollendo ponens)
=FRULE 1 Rule
²_cancel_rule
÷
‡1 ô t1 ² t2; ‡2 ô ³t1'
÷
‡1 À ‡2 ô t2
=TEX
And:
=FRULE 1 Rule
²_cancel_rule
÷
‡1 ô t1 ² t2; ‡2 ô ³t2'
÷
‡1 À ‡2 ô t1
=TEX
where $t1'$ and $t1$ are $\alpha$-convertible, as are
$t2$ and $t2'$.
=FAILURE
7010	?0 is not of the form: `‡ ô t1 ² t2`
7050	?0 and ?1 are not of the form: `‡1 ô t1 ² t2` and `‡2 ô ³t3`
	where ¬t3® is Á-convertible to ¬t1® or ¬t2®
=ENDDOC
\subsection{Concerning ´}
=DOC
val Û´_introÝ : TERM -> THM -> THM;
=DESCRIBE
Prove an implicative theorem, removing, if $\alpha$-convertibly present, the antecedent of the implication from the assumption list.
=FRULE 1 Rule
´_intro
¬t1®
÷
‡ ô t2
÷
‡ - {t1} ô t1 ´ t2
=TEX
A primitive inference rule.
=SEEALSO
$disch\_rule$ (which fails if term not in assumption list)
=FAILURE
3031	?0 is not of type ”BOOL®
=ENDDOC
($DISCH$ in Cambridge HOL)
=DOC
val Ûdisch_ruleÝ : TERM -> THM -> THM;
=DESCRIBE
Prove an implicative theorem, removing, if $\alpha$-convertibly present, the antecedent of the implication from the assumption list,
and failing if it is not present.
=FRULE 1 Rule
disch_rule
¬t1®
÷
‡, t1' ô t2
÷
‡ ô t1 ´ t2
=TEX
=SEEALSO
$´\_intro$ (which does not fail if term not in assumption list)
=FAILURE
7031	?0 not Á-convertibly present in assumption list
=ENDDOC
($DISCH$ in Cambridge HOL)
=DOC
val Û´_elimÝ : THM -> THM -> THM;
val Û´_mp_ruleÝ : THM -> THM -> THM;
=DESCRIBE
Modus Ponens
(which is why we introduce the alias $´\_mp\_rule$,
though $´\_elim$ is shorter, conventional, and the preferred name).
=FRULE 1 Rule
´_elim
÷
‡1 ô t1 ´ t2; ‡2 ô t1'
÷
‡1 À ‡2 ô t2
=TEX
where $t1$ and $t1'$ must be $\alpha$-convertible.
A primitive inference rule.
=SEEALSO
$¤\_mp\_rule$(Modus Ponens on $¤$),
$´\_match\_mp\_rule$ (a ``matching'' version of this function).
=FAILURE
6010	?0 is not of the form: `‡ ô t1 ´ t2`
6011	?0 and ?1 are not of the forms: `‡1 ô t1 ´ t2` and `‡2 ô t1'` where
	¬t1® and ¬t1'® are Á-convertible
=ENDDOC
($MP$ in Cambridge HOL)
=DOC
val Ûsimple_´_match_mp_ruleÝ : THM -> THM -> THM ;
=DESCRIBE
A matching Modus Ponens rule for an implicative theorem.
=FRULE 1 Rule
simple_´_match_mp_rule
÷
‡1 ô µ x1 ... · t1 ´ t2; ‡2 ô t1'
÷
‡1 À ‡2 ô t2'
=TEX
where $t1'$ is an instance of $t1$ under type instantiation
and substitution for the $x‰i$ and the free variables of the
first theorem, and where $t2'$
is the corresponding instance of $t2$.
No type instantiation or substitution will occur in the assumptions of either
theorem.
=SEEALSO
$simple\_´\_match\_mp\_rule1$
=FAILURE
7044	Cannot match ?0 and ?1
7045	?0 is not of the form `‡ ô µ x1 ... xn · u ´ v`
=ENDDOC
($MATCH\_MP$ in Cambridge HOL)
=DOC
val Ûsimple_´_match_mp_rule1Ý : THM -> THM -> THM ;
=DESCRIBE
A matching Modus Ponens rule for an implicative theorem.
=FRULE 1 Rule
simple_´_match_mp_rule1
÷
‡1 ô µ x1 ... · t1 ´ t2; ‡2 ô t1'
÷
‡1 À ‡2 ô t2'
=TEX
where $t1'$ is an instance of $t1$ under type instantiation
and substitution for the $x‰i$ (but not free variables), and where $t2'$
is the corresponding instance of $t2$.
Types in the assumptions of the theorems will not be instantiated.
=SEEALSO
$simple\_´\_match\_mp\_rule$
=FAILURE
7044	Cannot match ?0 and ?1
7045	?0 is not of the form `‡ ô µ x1 ... xn · u ´ v`
=ENDDOC

=DOC
val Ûundisch_ruleÝ : THM -> THM ;
=DESCRIBE
Undischarge the antecedent of an implicative theorem into the assumption list.
=FRULE 1 Rule
undisch_rule
÷
‡ ô a ´ b
÷
‡ À {a} ô b
=TEX
=FAILURE
7011	?0 is not of the form: `‡ ô a ´ b`
=ENDDOC
($UNDISCH$ in Cambridge HOL)
=DOC
val Ûstrip_´_ruleÝ : THM -> THM;
=DESCRIBE
Repeatedly apply $undisch\_rule$:
=FRULE 1 Rule
strip_´_rule
÷
‡ ô t1 ´ ... ´ tn ´ t
÷
‡ À {t1, ..., tn} ô t
=TEX
=ENDDOC
($UNDISCH\_ALL$ in Cambridge HOL)
=DOC
val Ûall_´_introÝ :THM -> THM;
=DESCRIBE
Discharge all members of assumption list using $´\_intro$.
=FRULE 1 Rule
all_´_intro
÷
{t1, ..., tn} ô t
÷
ô t1 ´ ... ´ tn ´ t
=TEX
=ENDDOC
($DISCH\_ALL$ in Cambridge HOL)
=DOC
val Û´_trans_ruleÝ : THM -> THM -> THM;
=DESCRIBE
Transitivity of $´$.
=FRULE 1 Rule
´_trans_rule
÷
‡1 ô t1 ´ t2; ‡2 ô t2' ´ t3
÷
‡1 À ‡2 ô t1 ´ t3
=TEX
where $t2$ and $t2'$ are $\alpha$-convertible.
=FAILURE
7040	?0 is not of the form: `‡ ô t1 ´ t2`
7042	?0 and ?1 are not of the form: `‡1 ô t1 ´ t2` and `‡2 ô t2a ´ t3`
	where ¬t2® and ¬t2a® are Á-convertible
=ENDDOC
($IMP\_TRANS$ in Cambridge HOL)
=DOC
val Ûmodus_tollens_ruleÝ : THM -> THM -> THM;
=DESCRIBE
If the consequent of an implicative theorem is false, then so must be
the antecedent (modus tollens).
=FRULE 1 Rule
modus_tollens_rule
÷
‡1 ô t1 ´ t2; ‡2 ô ³t2'
÷
‡1 À ‡2 ô ³t1
=TEX
where $t2$ and $t2'$ are $\alpha$-convertible.
=FAILURE
7040	?0 is not of the form: `‡ ô t1 ´ t2`
7051	?0 and ?1 are not of the form: `‡1 ô t1 ´ t2` and `‡2 ô ³t2a`
	where ¬t2® and ¬t2a® are Á-convertible
=ENDDOC
This might be renamed $mt\_rule$ if we wanted the name shortened.
\subsection{Concerning ¤}
This section is complemented by the inference rules
concerning equality, section \ref{EqualityInference}

=DOC
val Û¤_introÝ : THM -> THM -> THM;
=DESCRIBE
Join two implicative theorems into an bi-implicative theorem.
=FRULE 1 Rule
¤_intro
÷
‡1 ô t1 ´ t2; ‡2 ô t1' ´ t2'
÷
‡1 À ‡2 ô t1 ¤ t2
=TEX
where $t1$ and $t1'$ are $\alpha$-convertible, as are
$t2$ and $t2'$.
=FAILURE
7040	?0 is not of the form: `‡ ô t1 ´ t2`
7064	?0 and ?1 are not of the form: `‡ ô t1 ´ t2; ‡ ô t2a ´ t1a`
	where ¬t1® and ¬t1a®, ¬t2® and ¬t2a®, are Á-convertible
=ENDDOC
($CONJ\_IFF$ and $IMP\_ANTISYM\_RULE$ in Cambridge HOL)
=DOC
val Û¤_elimÝ : THM -> (THM * THM);
=DESCRIBE
Split a bi-implicative theorem into two implicative theorems.
=FRULE 1 Rule
¤_elim
÷
‡ ô t1 ¤ t2
÷
‡ ô t1 ´ t2; ‡ ô t2 ´ t1
=TEX
=FAILURE
7062	?0 is not of the form: `‡ ô t1 ¤ t2`
=ENDDOC
($IFF\_CONJ$ and $EQ\_IMP\_RULE$ in Cambridge HOL)
Perhaps we want to give
$¤\_left\_elim$ and $¤\_right\_elim$ as well,
being no more than $fst\ o\ ¤\_elim$ and $snd\ o\ ¤\_elim$.
=DOC
val Û¤_mp_ruleÝ : THM -> THM -> THM;
=DESCRIBE
This is reminiscent of Modus Ponens, but upon bi-implicative theorems.
=FRULE 1 Rule
¤_mp_rule
÷
‡1 ô t1 ¤ t2; ‡2 ô t1'
÷
‡1 À ‡2 ô t2
=TEX
where $t1$ and $t1'$ must be $\alpha$-convertible.

A built-in inference rule.
=SEEALSO
$´\_elim$ (true Modus Ponens, on $´$),
$¤\_match\_mp\_rule$ (a ``matching'' version of $¤\_mp\_rule$)
=FAILURE
6024	?0 and ?1 are not of the form: `‡1 ô t1 ¤ t2` and `‡2 ô t1'`
	where ¬t1® and ¬t1'® are Á-convertible
6030	?0 is not of the form: `‡ ô t1 ¤ t2`
=ENDDOC
($EQ\_MP$ in Cambridge HOL)

=DOC
val Ûsimple_¤_match_mp_ruleÝ : THM -> THM -> THM;
=DESCRIBE
A matching Modus Ponens for $¤$.
=FRULE 1 Rule
simple_¤_match_mp_rule
÷
‡1 ô µ x1 ... · t1 ¤ t2; ‡2 ô t1'
÷
‡1' À ‡2 ô t2'
=TEX
where $t1'$ is an instance of $t1$ under type instantiation
and substitution for the $x‰i$ and the free variables of the
first theorem, and where $t2'$
is the corresponding instance of $t2$.
No type instantiation or substitution will occur in the assumptions of either
theorem.
=SEEALSO
$´\_elim$ (Modus Ponens on $´$),
$simple\_¤\_match\_mp\_rule$
=FAILURE
7044	Cannot match ?0 and ?1
7046	?0 is not of the form `‡ ô µ x1 ... xn · u ¤ v`
=ENDDOC
=DOC
val Ûsimple_¤_match_mp_rule1Ý : THM -> THM -> THM;
=DESCRIBE
A matching Modus Ponens for $¤$ that doesn't affect assumption lists.
=FRULE 1 Rule
simple_¤_match_mp_rule1
÷
‡1 ô µ x1 ... · t1 ¤ t2; ‡2 ô t1'
÷
‡1 À ‡2 ô t2'
=TEX
where $t1'$ is an instance of $t1$ under type instantiation
and substitution for the $x‰i$ (but not free variables), and where $t2'$
is the corresponding instance of $t2$.
Types in the assumptions of the theorems will not be instantiated.
=SEEALSO
$´\_elim$ (Modus Ponens on $´$),
$simple\_¤\_match\_mp\_rule1$
=FAILURE
7044	Cannot match ?0 and ?1
7046	?0 is not of the form `‡ ô µ x1 ... xn · u ¤ v`
=ENDDOC

\subsection{Concerning =}
\label{EqualityInference}
=DOC
val Ûsubst_ruleÝ : (THM * TERM) list -> TERM -> THM -> THM;
=DESCRIBE
Substitution of equational theorems according to a template.
=FRULE 1 Rule
subst_rule
÷
[‡1 ô t1=t1', ... , ‡n ô tn=tn']
‡ ô t[t1,...tn]
÷
‡1 À ... ‡n À ‡ ô t[t1',...tn']
=TEX
$subst\_rule$ $[(thm_1, x_1),\ldots,(thm_n, x_n)]$ $template$ $thm$
returns a theorem in which $template$ determines where in $thm$ the $thm_i$ are substituted.
The $x_i$ must be variables.
The template is of the form $t[x_1,\ldots,x_n]$, and wherever the $x_i$ are free in $template$ their associated equational theorem, $thm_i$,
is substituted into $thm$.
The rule will rename as necessary to avoid bound variable capture.
The assumption list of the resulting theorem will be the union of all
substitution theorems, regardless of use.

The conclusion of the resulting theorem will take its bound variable names
from $template$, not $thm$, as shown in the following example.
This provides an $\alpha$-conversion facility.

The function may be usefully partially evaluated with one or two arguments.

A primitive inference rule.
=EXAMPLE
subst_rule [(`ô p = q`, ¬x1®), (`ô r = s`, ¬x2®)]
	(¬µ y · f x1 r y + g x2 p = h y®)
	(`ô µ x · f p r x + g r p = h x`)
	=
	`ô µ y · f q r y + g s p = h y`
=SEEALSO
$subst\_conv$
=FAILURE
3007	?0 is not a term variable
6001	?0 does not substitute to conclusion of theorem ?1
6002	Substitution theorem ?0 is not of the form: `‡ ô t1 = t2`
6029	Substitution list contains entry (?0,?1) where the type of the variable
	differs from the type of the LHS of the theorem
=ENDDOC
($SUBST$ in Cambridge HOL)

=DOC
val Ûsubst_convÝ : (THM * TERM) list -> TERM -> CONV;
=DESCRIBE
Substitution of equational theorems according to a template.
=FRULE 1 Conversion
subst_conv
[...,(`‡i ô ti=ti'`,¬xi®), ...]
¬t[...,xi,...]®
¬t[...,ti,...]®
÷
÷
‡1 À ... ‡n ô t[...,ti,...] = t[...,ti',...]
=TEX

$subst\_conv$ $[(thm_1, x_1),\ldots,(thm_n, x_n)]$ $template$ $term$
returns a theorem in which $template$ determines where in $term$ the $thm_i$ are substituted, when forming the RHS of the equation.
The $x_i$ must be variables.
The template is of the form $t[x_1,\ldots,x_n]$, and wherever the $x_i$ are free in $template$ their associated equational theorem, $thm_i$,
is substituted into $thm$.
The rule will rename as necessary to avoid bound variable capture.
The assumption list of the resulting theorem will be the union of all
substitution theorems, regardless of use.

The RHS of the resulting theorem will take its bound variable names
from $template$, not $term$, as shown in the following example.
This provides an $\alpha$-conversion facility.

This function may be partially evaluated with only one argument.
=EXAMPLE
subst_conv [(`ô p = q`, ¬x1®), (`ô r = s`, ¬x2®)]
	(¬µ y · f x1 r y + g x2 p = h y®)
	(¬µ x · f p r x + g r p = h x®)
	=
	`ô (µ x · f p r x + g r p = h x) ¤
	    µ y · f q r y + g s p = h y`
=SEEALSO
$subst\_rule$
=FAILURE
3007	?0 is not a term variable
3012	?0 and ?1 do not have the same types
6001	?0 does not substitute to conclusion of theorem ?1
6002	Substitution theorem ?0 is not of the form: `‡ ô t1 = t2`
6029	Substitution list contains entry (?0,?1) where the type of the variable
	differs from the type of the LHS of the theorem
=ENDDOC
=DOC
val Ûrefl_convÝ : CONV;
=DESCRIBE
The reflexivity of equality implemented as a conversion.
=FRULE 1 Rule
refl_conv
¬t®
÷
÷
ô t = t
=TEX
A primitive inference rule.
=ENDDOC
($ALL\_CONV$ and $REFL$ in Cambridge HOL)
=DOC
val Ûeq_trans_ruleÝ : THM -> THM -> THM;
=DESCRIBE
Transitivity of equality:
=FRULE 1 Rule
eq_trans_rule
÷
‡1 ô t1 = t2; ‡2 ô t2' = t3
÷
‡1 À ‡2 ô t1 = t3
=TEX
where $t2$ and $t2'$ are $\alpha$ convertible.
A built-in inference rule.
=FAILURE
6020	?0 is not of the form: `‡ ô t1 = t2`
6022	?0 and ?1 are not of the form: `‡1 ô t1 = t2` and `‡2 ô t2a = t3`
	where ¬t2® and ¬t2a® are Á-convertible
=ENDDOC
($TRANS$ in Cambridge HOL)
=DOC
val Ûeq_sym_ruleÝ : THM -> THM;
=DESCRIBE
Symmetry of equality:
=FRULE 1 Rule
eq_sym_rule
÷
‡ ô t1 = t2
÷
‡ ô t2 = t1
=TEX
A built-in inference rule.
=SEEALSO
$eq\_sym\_conv$
=FAILURE
6020	?0 is not of the form: `‡ ô t1 = t2`
=ENDDOC
($SYM$ in Cambridge HOL)
=DOC
val Ûeq_sym_convÝ : CONV;
=DESCRIBE
Symmetry of equality:
=FRULE 1 Rule
eq_sym_conv
¬t1 = t2®
÷
÷
ô (t1 = t2) ¤ (t2 = t1)
=TEX
=SEEALSO
$eq\_sym\_rule$
=FAILURE
3014	?0 is not of form: ¬t = u®
=ENDDOC
($SYM\_CONV$ in Cambridge HOL)
=DOC
val Û³_eq_sym_ruleÝ : THM -> THM ;
=DESCRIBE
If $a$ is not equal to $b$ then $b$ is not equal to $a$.
=FRULE 1 Rule
³_eq_sym_rule
÷
‡ ô ³(a = b)
÷
‡ ô ³(b = a)
=TEX
=FAILURE
7091	?0 is not of form: `‡ ô ³(a = b)`
=ENDDOC
($NOT\_EQ\_SYM$ in Cambridge HOL)
=DOC
val Ûsimple_eq_match_convÝ : THM -> CONV ;
=DESCRIBE
This matches the LHS of an equational theorem to a term,
instantiating the RHS accordingly.
In fact the equation may be partially or fully universally quantified
(simple quantification only),
without affecting the result of the conversion.
=FRULE 1 Conversion
simple_eq_match_conv
(‡ ô µ ... · u = v)
¬t®
÷
÷
‡' ô t = v'
=TEX
where $v'$ is the result of applying to $v$ the instantiation rules required to match $u$ to $t$
(including both term and type instantiation).
If there are free variables on the RHS of the supplied equational theorem (when stripped of all universal quantification)
they will be renamed as necessary to avoid identification with
any variables in $t$.
=FAILURE
7044	Cannot match ?0 and ?1
=ENDDOC
($REWRITE\_CONV$ in Cambridge HOL)
The process of renaming to avoid identification is a minimum requirement on free variables on the RHS.
More powerful requirements (e.g. something like Cambridge HOL's $genvar$) could be appropriate.
=DOC
val Ûsimple_eq_match_conv1Ý : THM -> CONV ;
=DESCRIBE
This matches the LHS of an universally quantified (simple quantifiers only) equational theorem to a term,
instantiating the RHS accordingly.
The conversion will only instantiate its universal quantifications,
and type variables not present in the assumptions,
and not its free term variables.
=FRULE 1 Conversion
simple_eq_match_conv1
(‡ ô µ x1 ... xn · u[x1,...,xn] =
   v[x1,...,xn])
¬t®
÷
÷
‡ ô t = v[t1,...,tn]
=TEX
where ¬u[t1,...,tn]® is $\alpha$-convertible to ¬t®.
If there are free variables on the RHS of the supplied equational theorem(when stripped of all universal quantification)
they will be renamed as necessary to avoid identification with
any variables in $t$.

This conversion may be partially evaluated with only its theorem argument.
=USES
In producing a limited rewriting facility, that only instantiates
explicitly identified variables.
=FAILURE
7095	?0 is not of the form `‡ ô µ x1 ... xn · u = v`
	where ¬xi® are variables
7076	Could not match term ?0 to LHS of theorem ?1
=ENDDOC
An alternative method of indicating what may be instantiated
is to give a ``forbidden list'' of variables that may not be instantiated,
whether they be universally quantified or free in the original theorem.
This could of course be a ``only modify'' list instead.

As this is calculated once per application of $eq\_match\_1_conv$ to a theorem, and not once per application to a term, it is not
a major potential time-saver either way.
What this function must be fast at is its application to a term.

We may want a specialised $term\_match$ function that understands
a ``forbidden list'' of variables that it may not modify.

We might also want some way of matching, such that free variables in the assumption list are also instantiated. This would work best with a ``forbidden list'' style, rather than a style that only
allows the universally quantified variables to be instantiated.
This question is particularly important if we want the possibility
of clever assumption introduction mechanisms during rewriting,
especially those involved in rewriting with implicative theorems.
\subsection{Concerning $if\ldots then\ldots else \ldots$}

=DOC
val Ûif_introÝ : TERM -> THM -> THM -> THM;
=DESCRIBE
Introduce a conditional, based on the assumptions of two theorems.
=FRULE 1 Rule
if_intro
¬a®
÷
‡1, a ô tt ;  ‡2, ³a' ô et
÷
‡1 À ‡2 ô if a then tt else et
=TEX
where $a$ and $a'$ are $\alpha$-convertible.
Actually, the assumptions may be missing, and the rule still works.
=EXAMPLE
(ô x = tt), (ô x = te)			(* hypothesis *)
ô if a then (x = tt) else (x = te) 	(* if_intro ¬a® *)
ô x = if a then tt else te		(* if_fun_rule *)
=FAILURE
3031	?0 is not of type ”BOOL®
=ENDDOC
Perhaps the theorems could be in either order, the rule working out
which.
=DOC
val Ûif_then_elimÝ : THM -> THM;
=DESCRIBE
Give the dependence of the $then$ branch of a conditional
upon the condition.
=FRULE 1 Rule
if_then_elim
÷
‡ ô if tc then tt else te
÷
‡ ô tc ´ tt
=TEX
=FAILURE
7012	?0 is not of the form: `‡ ô if tc then tt else te`
=ENDDOC
=DOC
val Ûif_else_elimÝ : THM -> THM;
=DESCRIBE
Give the dependence of the $else$ branch of a conditional
upon the condition.
=FRULE 1 Rule
if_else_elim
÷
‡ ô if tc then tt else te
÷
‡ ô ³ tc ´ te
=TEX
=FAILURE
7012	?0 is not of the form: `‡ ô if tc then tt else te`
=ENDDOC

As the ICL HOL conditional on booleans is the same as that on other
types,  we choose a different presentation to \cite{Manna74},
where this is not true.
However, Manna's rules for conditionals on other types can be derived from those present here, and vice versa.
=DOC
val Ûif_app_convÝ : CONV;
=DESCRIBE
Move a function application out of a conditional.
=FRULE 1 Conversion
if_app_conv
¬(if a then f b else f c)®
÷
÷
ô (if a then f b else f' c) =
	f(if a then b else c)
=TEX
where $f$ and $f'$ are $\alpha$-convertible, and $f$
is used on the RHS of the resulting equational theorem
=FAILURE
7037	?0 is not of the form: ¬if a then (f b) else (g c)®
7038	?0 is not of the form: ¬if a then (f b) else (fa c)®
	where ¬f® and ¬fa® are Á-convertible
=ENDDOC
=DOC
val Ûapp_if_convÝ : CONV;
=DESCRIBE
Move a function application into a conditional.
=FRULE 1 Conversion
app_if_conv
¬f(if a then b else c)®
÷
÷
ô f(if a then b else c) =
	(if a then f b else f c)
=TEX
=FAILURE
7098	?0 is not of the form: ¬f(if a then b else c)®
=ENDDOC

\subsection{Concerning Ì}
=DOC
val Ûsimple_Â_convÝ : CONV;
=DESCRIBE
Apply a $\beta$-reduction to a simple abstraction.
=FRULE 1 Conversion
simple_Â_conv
¬(Ì x · t1[x]) t2®
÷
÷
ô (Ì x · t1[x]) t2 = t1[t2]
=TEX
A primitive inference rule.
=SEEALSO
$\beta\_conv$
=FAILURE
6012	?0 is not of the form: ¬(Ì x · t1[x])t2® where ¬x® is a variable
=ENDDOC
($BETA\_CONV$ in Cambridge HOL)
=DOC
val Ûsimple_Ì_eq_ruleÝ : TERM -> THM -> THM;
=DESCRIBE
Given an equational theorem, return the equation formed by abstracting the term argument (which must be a variable) from both sides.
=FRULE 1 Rule
simple_Ì_eq_rule
¬x®
÷
‡ ô t1[x] = t2[x]
÷
‡ ô (Ì x · t1[x]) = (Ì x · t2[x])
=TEX
A primitive inference rule.
=SEEALSO
$Ì\_eq\_rule$
=FAILURE
3007	?0 is not a term variable
6005	?0 occurs free in assumption list
6020	?0 is not of the form: `‡ ô t1 = t2`
=ENDDOC
($SIMPLE\_Ì$ in Cambridge HOL)
=DOC
val ÛÌ_ruleÝ : TERM -> THM -> THM;
=DESCRIBE
An introduction rule for $Ì$:
=FRULE 1 Rule
Ì_rule
¬t®
÷
‡ ô s[t]
÷
‡ ô (Ì x · s[x]) t
=TEX
where $x$ is a machine generated variable.
=ENDDOC
=DOC
val Ûall_simple_Â_convÝ : CONV;
=DESCRIBE
A conversion to eliminate all instances of simple $\beta$ redexes in a term, regardless of nesting, or even that the $\beta$ redex was created as the result of
an earlier reduction in the conversion's evaluation.
=FRULE 1 Rule
all_simple_Â_conv
¬t®
÷
÷
ô t = t'
=TEX
$t'$ is $t$ with all simple $\beta$ redexes reduced.
=USES
This uses an optimised term traversal algorithm, superior in speed
to the general term traversal algorithms used with conversions,
and should be used in preference to them and $\beta\_conv$.
=FAILURE
7020	?0 contains no Â-redexes
=ENDDOC
=DOC
val Ûall_simple_Â_ruleÝ : THM -> THM;
=DESCRIBE
Eliminate all instances of simple $\beta$ redexes in a theorem, regardless of nesting, or even that the $\beta$ redex was created as the result of
an earlier reduction in the rule's evaluation.
=FRULE 1 Rule
all_simple_Â_rule
÷
‡ ô t
÷
‡ ô t'
=TEX
$t'$ is $t$ with all $\beta$-redexes reduced.
=FAILURE
7020	?0 contains no Â-redexes
=ENDDOC
($BETA\_RULE$ in Cambridge HOL)

\subsection{Concerning µ}
=DOC
val Ûsimple_µ_introÝ : TERM -> THM -> THM;
=DESCRIBE
Introduce a simple universally quantified theorem.
=FRULE 1 Rule
simple_µ_intro
¬x®
÷
‡ ô t
÷
‡ ô µ x · t
=TEX
A built-in inference rule.
=SEEALSO
$µ\_intro$
=FAILURE
3007	?0 is not a term variable
6005	?0 occurs free in assumption list
=ENDDOC
($GEN$ in Cambridge HOL)
=DOC
val Ûsimple_µ_elimÝ : TERM -> THM -> THM;
=DESCRIBE
Instantiate a universally quantified variable to a given value.
=FRULE 1 Rule
simple_µ_elim
¬t1®
÷
‡ ô µ x · t2[x]
÷
‡ ô t2'[t1]
=TEX
where $t2'$ is renamed from $t2$ to prevent bound variable capture,
and $x$ is a variable.
=FAILURE
3012	?0 and ?1 do not have the same types
7039	?0 is not of the form: `‡ ô µ x · t` where ¬x® is a variable
=ENDDOC
($SPEC$ in Cambridge HOL)
=DOC
val Ûlist_simple_µ_introÝ : TERM list -> THM -> THM;
=DESCRIBE
Generalised simple $µ$ introduction.
=FRULE 1 Rule
list_simple_µ_intro
[¬x1®, ..., ¬xn®]
÷
‡ ô t[x1, ..., xn]
÷
‡ ô µ x1 ... xn · t[x1, ..., xn]
=TEX
=SEEALSO
$µ\_intro$
=FAILUREC
\paragraph{Errors}
Same messages as $simple\_µ\_intro$.
=ENDDOC
($GENL$ in Cambridge HOL)
=DOC
val Ûlist_simple_µ_elimÝ : TERM list -> THM -> THM;
=DESCRIBE
Generalised $µ$ elimination.
=FRULE 1 Rule
list_simple_µ_elim
[¬t1®, ..., ¬tn®]
÷
‡ ô µ x1 ... xn · t[x1, ..., xn]
÷
t[t1, ..., tn]
=TEX
A built-in inference rule.
The instantiation is done simultaneously, rather than by
iteration of a single instantiation, which may affect renaming.
=SEEALSO
$µ\_elim$
=FAILURE
3012	?0 and ?1 do not have the same types
6018	?0 is not of the form: `‡ ô µ ...xi... · t` where
	the ¬xi® are ?1 variables
=ENDDOC
($SPECL$ in Cambridge HOL)
=DOC
val Ûall_µ_introÝ : THM -> THM;
=DESCRIBE
Generalises all the free variables (other than those in the assumption list) in a theorem:
=FRULE 1 Rule
all_µ_intro
÷
‡ ô t
÷
‡ ô µ x1 ... xn · t
=TEX
where $x1, \ldots, xn$ are all the free variables of $t$.
The function introduces variables in their order of occurrence,
so:
=EXAMPLE
all_µ_intro (ô a ² b) = ô µ a b · a ² b
=ENDDOC
($GEN\_ALL$ in Cambridge HOL)
=DOC
val Ûall_simple_µ_elimÝ : THM -> THM;
=DESCRIBE
Specialises all the simple universally quantified variables in a theorem:
=FRULE 1 Rule
all_simple_µ_elim
÷
‡ ô µ x1 ... xn · t[x1, ..., xn]
÷
‡ ô t[x1', ..., xn']
=TEX
where $x1', \ldots, xn'$ are renamed from $x1, \ldots, xn$ as necessary to avoid clashes with
free variables in the assumption list, or duplicated names in
the list of specialisations.
=ENDDOC
($GEN\_ALL$ in Cambridge HOL)
=DOC
val Û³_simple_µ_convÝ : CONV;
=DESCRIBE
Move $³$ into a $µ$ construct.
=FRULE 1 Rule
³_simple_µ_conv
¬³ (µ x · t[x])®
÷
÷
ô (³ (µ x · t[x])) ¤ ¶ x · ³ t[x]
=TEX
This will work with any simple universal quantifier.
=FAILURE
7036	?0 not of the form: ¬³ (µ x · t[x])®
=ENDDOC
($NOT\_FORALL\_CONV$ in Cambridge HOL)
We do not give a rule for $µµ$ introduction from \cite{Manna74}.
\subsection{Concerning ¶}
=DOC
val Ûsimple_¶_introÝ : TERM -> THM -> THM ;
=DESCRIBE
Introduce an existential quantifier by reference to a witness.
=FRULE 1 Rule
simple_¶_intro
¬¶ x · t1[x]®
÷
‡ ô t1[t2]
÷
‡ ô ¶ x · t1[x]
=TEX
where ¬x® is a variable.
=FAILURE
3034	?0 is not of form: ¬¶ var · body®
7047	?0 cannot be matched to conclusion of theorem ?1
=ENDDOC
($EXISTS$ in Cambridge HOL)
In Cambridge HOL you give $t2$ (i.e. the witness that satisfies the predicate) as another argument, though this
seems only to speed the correctness check, as it may be
derived via $term\_match$.
=DOC
val Ûsimple_¶_elimÝ : TERM -> THM -> THM -> THM ;
=DESCRIBE
Eliminate an existential quantifier by reference to an arbitrary variable structure satisfying the predicate.
=FRULE 1 Rule
simple_¶_elim
¬y®
÷
‡1 ô ¶ x · t1[x]; ‡2, t1[y] ô t2
÷
‡1 À ‡2 ô t2
=TEX
where  $y$ must be variable which is not present elsewhere in the second theorem, nor in the conclusion of the
first.
$t1[y]$ need not actually be present in the assumptions of the second theorem.
=FAILURE
3007	?0 is not a term variable
7014	?0 has the wrong type
7109	?0 is not of the form `‡ ô ¶ x · t[x]`
7120	?0 occurs free in conclusion of ?1
7121	?0 occurs free in hypotheses of ?1 other than ?2
=ENDDOC
($CHOOSE$ in Cambridge HOL)
=DOC
val Û³_simple_¶_convÝ : CONV;
=DESCRIBE
Move $³$ into an $¶$ construct.
=FRULE 1 Rule
³_simple_¶_conv
¬³ (¶ x · t[x])®
÷
÷
ô (³ (¶ x · t[x])) ¤ µ x · ³ t[x]
=TEX
This will work with any simple existential quantifier.
=FAILURE
7058	?0 is not of the form: ¬³ (¶ x · t[x])®
	where ¬x® is a variable
=ENDDOC
($NOT\_EXISTS\_CONV$ in Cambridge HOL)
We do not give a rule for $¶¶$ introduction from \cite{Manna74}.
\subsection{Concerning ¶$_1$}
=DOC
val Ûsimple_¶‰1_introÝ : THM -> THM -> THM;
=DESCRIBE
Introduce $¶‰1$ by reference to a witness, and a uniqueness theorem.
=FRULE 1 Rule
simple_¶‰1_intro
÷
‡1 ô P'[t']
‡2 ô µ x · P[x] ´ x = t
÷
‡1 À ‡2 ô ¶‰1 x · P[x]
=TEX
Where $P'$ is $\alpha$-convertible to $P$, and
$t'$ is $\alpha$-convertible to $t$.
Notice that for the resulting theorem we take the bound variable name, $x$, and the form of the predicate, $P$, from the second theorem.
=FAILURE
7066	?0 not of the form: `‡ ô µ x · P[x] ´ x = t`
7067	?0 and ?1 are not of the form: `‡1 ô Pa[ta]` and `‡2 ô µ x · P[x] ´ x = t`
	where ¬Pa® and ¬P®, ¬ta® and ¬t® are Á-convertible
=ENDDOC
=DOC
val Ûsimple_¶‰1_elimÝ : THM -> THM;
=DESCRIBE
Express a $¶‰1$ in terms of $¶$ and a uniqueness property.
=FRULE 1 Rule
simple_¶‰1_elim
÷
‡ ô ¶‰1 x · P[x]
÷
‡ ô ¶ x · P[x] ± µ y · P[y] ´ y = x
=TEX
=FAILURE
7015	?0 is not of the form: `‡ ô ¶‰1 x · P[x]`
=ENDDOC
This could be rewritten to produce two theorems,
`$¶\ x\ ·\ P[x]$` and `$µ\ x\ y\ ·\ P[x]\ ±\ P[y]\ ´\ x\ =\ y$`
\subsection{Concerning Å}
=DOC
val ÛÅ_intro_ruleÝ : THM -> THM;
=DESCRIBE
Given a theorem whose conclusion is a function application,
we know that the ``function'' is a predicate, and the rule states that
$Å$ of this predicate will satisfy the predicate.
=FRULE 1 Rule
Å_intro_rule
÷
‡ ô t1 t2
÷
‡ ô t1 (Å t1)
=TEX
=FAILURE
7016	?0 is not of the form: `‡ ô t1 t2`
=ENDDOC
($SELECT\_INTRO$ in Cambridge HOL)
$Å$ is not part of natural deduction so the rule cannot really be suffixed by just $\_intro$.
We might want an introduction function that requires a template $t1[x]$ and $x$, and a theorem of the form
`$ô t1 [t2]$`,
rather than the above more limited form.
=DOC
val Ûsimple_Å_elim_ruleÝ : TERM -> THM -> THM -> THM;
=DESCRIBE
Given that $Å$ of a predicate satisfies that predicate, then
in a different theorem we may eliminate an assumption that
claims an otherwise unused variable satisfies the predicate.
=FRULE 1 Rule
simple_Å_elim_rule
¬x®
÷
‡1 ô t' (Å t'');
‡2, t x ô s
÷
‡1 À ‡2 ô s
=TEX
where $t$, $t'$ and $t''$ are $\alpha$-convertible, and $x$ is a free variable occurring nowhere else in the second
theorem
other than shown, nor in the conclusion of the first theorem.
Actually $(Å\ t'')$ can be any value, rather than a choice construct.
=FAILURE
3007	?0 is not a term variable
7019	?0 is not of the form: `‡ ô t1(Å t1)`
7054	?0 is not of same type as choice sub-term of first theorem
7108	Arguments not of the form ¬?0®, `‡1 ô t (Å t)` and
	`‡2, (t ?0) ô s`
7120	?0 occurs free in conclusion of ?1
7121	?0 occurs free in hypotheses of ?1 other than ?2
7122	?0 occurs free in operator of the conclusion of ?1
=ENDDOC
($SELECT\_ELIM$ in Cambridge HOL)
As with the introduction rule, we might want a more general interface.
=DOC
val Ûsimple_¶_Å_ruleÝ : THM -> THM;
=DESCRIBE
Give that $Å$ of a predicate satisfies the predicate by reference to an $¶$ construct.
It can properly handle paired existence.
=FRULE 1 Rule
simple_¶_Å_rule
÷
‡ ô ¶ x · p[x]
÷
‡ ô p[Å x · p x]
=TEX
=SEEALSO
$¶\_Å\_conv$
=FAILURE
7092	?0 is not of the form: `‡ ô ¶ x · p[x]`
=ENDDOC
($SELECT\_RULE$ in Cambridge HOL)
=DOC
val Ûsimple_¶_Å_convÝ : CONV;
=DESCRIBE
Give that $Å$ of a predicate satisfies the predicate by reference to an $¶$ construct.
=FRULE 1 Rule
simple_¶_Å_conv
¬¶ x · p[x]®
÷
÷
‡ ô (¶ x · p[x]) ¤ p[Å x · p [x]]
=TEX
=SEEALSO
$¶\_Å\_rule$
=FAILURE
3034	?0 is not of form: ¬¶ var · body®
=ENDDOC

\subsection{Concerning Functional Application}
=DOC
val Ûmk_app_ruleÝ : THM -> THM -> THM;
=DESCRIBE
Given two equational theorems, one being between two functions, apply the two functions
to the LHS and RHS of the other equation.
=FRULE 1 Rule
mk_app_rule
÷
‡1 ô u1 = u2; ‡2 ô v1 = v2
÷
‡1 À ‡2 ô u1 v1 = u2 v2
=TEX
The second input theorem or the result may be expressed using $¤$.

A built-in inference rule.
=FAILURE
6020	?0 is not of the form: `‡ ô t1 = t2`
6023	?0 and ?1 are not of the form :`‡1 ô u1 = u2` and `‡2 ô v1 = v2`
	where ¬u1® can be functionally applied to ¬v1®
=ENDDOC
($MK\_COMB$ in Cambridge HOL)
We might later want a variant of $mk\_app\_rule$ that prevents the
identification of free variables in the two theorems.
=DOC
val Ûapp_fun_ruleÝ : TERM -> THM -> THM ;
=DESCRIBE
Apply a function to both sides of an equational theorem.
=FRULE 1 Rule
app_fun_rule
¬f®
÷
‡ ô a = b
÷
‡ ô f a = f b
=TEX
=FAILURE
6020	?0 is not of the form: `‡ ô t1 = t2`
7024	?0 may not be applied to each side of equation
=ENDDOC
($AP\_TERM$ in Cambridge HOL)
=DOC
val Ûapp_arg_ruleÝ : TERM -> THM -> THM;
=DESCRIBE
Apply both sides of an equational theorem to an argument.
=FRULE 1 Rule
app_arg_rule
¬x®
÷
‡ ô f = g
÷
‡ ô f x = g x
=TEX
=FAILURE
6020	?0 is not of the form: `‡ ô t1 = t2`
7025	Sides of equation may not be applied to term
=ENDDOC
($AP\_THM$ in Cambridge HOL)
=DOC
val Ûext_ruleÝ : THM -> THM;
=DESCRIBE
Extensionality of functions in ICL HOL.
=FRULE 1 Rule
ext_rule
÷
‡ ô f = g
÷
‡ ô µ x · f x = g x
=TEX
where $x$ is a machine-generated variable of appropriate type,
not found free in the equational theorem.
=FAILURE
6020	?0 is not of the form: `‡ ô t1 = t2`
7026	?0 is not an equation of functions
=ENDDOC
($EXT$ in Cambridge HOL)
\subsection{Concerning Assumptions}
=DOC
val Ûasm_ruleÝ : TERM -> THM;
=DESCRIBE
``A term is true on the assumption that it is true.''
=FRULE 1 Rule
asm_rule
¬t®
÷
÷
t ô t
=TEX
A primitive inference rule.
=FAILURE
3031	?0 is not of type ”BOOL®
=ENDDOC
($ASSUME$ in Cambridge HOL)
=DOC
val Ûasm_introÝ : TERM -> THM -> THM;
=DESCRIBE
Introduce a new assumption to an existing theorem.
=FRULE 1 Rule
asm_intro
¬t1®
÷
‡ ô t2
÷
‡ À {t1} ô t2
=TEX
=FAILURE
3031	?0 is not of type ”BOOL®
=ENDDOC
($ADD\_ASSUM$ in Cambridge HOL)
=DOC
val Ûasm_elimÝ : TERM -> THM -> THM -> THM;
=DESCRIBE
Eliminate an assumption with reference to contradictory assumption lists.
=FRULE 1 Rule
asm_elim
¬a®
÷
‡1, a' ô t; ‡2, ³a''  ô t'
÷
‡1 À ‡2 ô t
=TEX
where $a$, $a'$ and $a''$,
as well as $t$ and $t'$ are $\alpha$-convertible.
Actually, the assumptions don't have to be present for the function to succeed.
=FAILURE
3031	?0 is not of type ”BOOL®
7029	?0 and ?1 are not of the form:`‡1, aa ô t` and `‡2, ³aaa  ô ta`
	where ¬t® and ¬ta® are Á-convertible
=ENDDOC
=DOC
val Ûprove_asm_ruleÝ : THM -> THM -> THM;
=DESCRIBE
Eliminate an assumption with reference to a the assumption being a conclusion of a theorem.
=FRULE 1 Rule
prove_asm_rule
÷
‡1 ô t1; ‡2, t1 ô t2
÷
‡1 À ‡2 ô t2
=TEX
This will in fact work even if the assumption is not present.
=ENDDOC
($PROVE\_HYP$ in Cambridge HOL)
It doesn't worry about the lack of an assumption, because
this is helpful in programming tactics.
This could easily be a (the?) assumption elimination rule, though \cite{Manna74} doesn't so use it.
=DOC
val Ûasm_inst_term_ruleÝ : (TERM * TERM) list -> THM -> THM;
=DESCRIBE
Parallel instantiation of term variables within a theorem's conclusion and assumptions to some other values.
=FRULE 1 Rule
asm_inst_term_rule
[..., (¬ti®, ¬xi®), ...]
÷
‡ ô t[x1, ..., xn]
÷
‡' ô t[t1, ..., tn]
=TEX
=SEEALSO
$inst\_term\_rule$
=FAILURE
3007	?0 is not a term variable
6027	Types of element (?0, ?1) in term association list differ
=ENDDOC
=DOC
val Ûasm_inst_type_ruleÝ : (TYPE * TYPE) list -> THM -> THM;
=DESCRIBE
Parallel instantiation of some of the type variables of both the conclusion and assumptions of a theorem.
=FRULE 1 Rule
asm_inst_type_rule
[(Ó1, tv1), ..., (Ón,tvn)]
÷
‡ ô t[tv1,...tvn]
÷
‡' ô t[Ó1,...Ón]
=TEX
$asm\_inst\_type\_rule$ $talist$ $thm$ will instantiate each type variable in
$talist$ with its associated type.
It will decorate free variables that would become identified with
other variables by their types becoming the same and the names originally being the same.
$\alpha$-convertible duplicate assumptions will be eliminated.
=SEEALSO
$inst\_type\_rule$
=FAILURE
3019	?0 is not a type variable
=ENDDOC
\subsection{Concerning $\alpha$-conversion}
=DOC
val ÛÁ_convÝ : TERM -> CONV;
=DESCRIBE
Returns a theorem that two terms are equal, should they be
$\alpha$-convertible.
=FRULE 1 Rule
Á_conv
¬t2®
¬t1®
÷
÷
ô t1 = t2
=TEX
=FAILURE
3012	?0 and ?1 do not have the same types
7034	?0 and ?1 are not Á-convertible
=ENDDOC
($ALPHA$ in Cambridge HOL)
=DOC
val Ûsimple_Á_convÝ : string -> CONV;
=DESCRIBE
Rename a bound variable name, as a conversion.
This only works with simple abstractions.
=FRULE 1 Rule
simple_Á_conv
(v : string)
¬Ì x · t[x]®
÷
÷
ô (Ì x · t[x]) = (Ì v · t[v])
=TEX
=FAILURE
3011	?0 is not of form: ¬Ì var · t®
7035	Cannot rename bound variable ?0 to ?1 as this would cause variable capture
=ENDDOC
($ALPHA\_CONV$ in Cambridge HOL)
\subsection{Concerning Numbers, Characters and Strings}
=DOC
val Ûsuc_convÝ : CONV;
=DESCRIBE
This function defines the constants with names consisting only of decimal digits, and type $î$.
=FRULE 1 Rule
suc_conv
(mk_î (m+1))
÷
÷
ô ‘(mk_î(m+1))® = 
Suc ‘mk_î m®
=TEX
The conversion fails if given $0$.

A primitive inference rule(axiom schemata), except that it
fails on $0$.
=FAILURE
3026	?0 is not a numeric literal
7100	?0 must be numeric literal > 0
=SEEALSO
$mk\_î$
=ENDDOC
($num\_CONV$ in Cambridge HOL)
=DOC
val Ûstring_convÝ : CONV;
=DESCRIBE
This function defines the constants with names starting with $"$, and type $CHAR\ LIST$
(an abbreviation of $CHAR\ LIST$).
A string literal constant is indicated by the constant name starting with a double quote($"$), as well as being of type $CHAR\ LIST$.
This is equivalent to a list of character literal constants,
one for each but the first ($"$) character of the string constant's name.
This conversion defines this relationship, by returning the head and unexploded tail of the list of characters.
A character literal is indicated by the constant's name starting with single backquote ($`$), as well as being of type $CHAR$.
=FRULE 1 Rule
string_conv
(mk_string ("c..."))
÷
÷
ô ‘(mk_string("c..."))® = 
Cons ‘(mk_char("c"))® 
	‘(mk_string("..."))®
=TEX
Or:
=FRULE 1 Rule
string_conv
(mk_string "")
÷
÷
ô ‘(mk_string(""))® = Nil
=TEX
A primitive inference rule(axiom schemata).
=SEEALSO
$mk\_string$
=FAILURE
3025	?0 is not a string literal
=ENDDOC
=DOC
val Ûchar_convÝ : CONV;
=DESCRIBE
This function defines the character literal constants, by giving a relationship between character literal constants and their ASCII code (derived by the Standard ML function $ord$).
A character literal is indicated by the constant's name starting with single backquote ($`$), being a single other character, as well as being of type $CHAR$.
=FRULE 1 Rule
char_conv
(mk_char("c"))
÷
÷
ô ‘(mk_char("c"))® = 
	AbsChar ‘ord "c"®
=TEX
A primitive inference rule(axiom schemata).
=SEEALSO
$mk\_char$
=FAILURE
3024	?0 is not a character literal
=ENDDOC
=DOC
val Ûplus_convÝ : CONV;
=DESCRIBE
Provides the value of the addition of two numeric literals.
=FRULE 1 Rule
plus_conv
¬‘mk_î m® +
‘mk_î n®®
÷
÷
ô ¬‘mk_î m® +
	‘mk_î n®® = 
	‘mk_î(m + n)®
=TEX
=USES
For doing fast arithmetic proofs.
=FAILURE
6085	?0 is not of the form: ¬‘mk_î m® + ‘mk_î n®®
=ENDDOC

\subsection{Concerning Conversions}
\subsubsection{Building Blocks}
=DOC
val Ûid_convÝ : CONV;
=DESCRIBE
This is an alias for $refl\_conv$, reflecting the fact that
$refl\_conv$ is the identity for the conversional $THEN\_C$.
=FAILURE
7061	Failed as requested
=ENDDOC
=DOC
val Ûfail_convÝ : CONV;
=DESCRIBE
This conversion always fails.
=FAILURE
7061	Failed as requested
=ENDDOC
($NO\_CONV$ in Cambridge HOL)
=DOC
val Ûfail_with_convÝ : string -> CONV;
=DESCRIBE
This conversion always fails, with the error message being its string
argument.
=FAILURE
7075	?0
=ENDDOC
($FAIL\_CONV$ in Cambridge HOL)
\subsubsection{Conversionals}
=DOC
val ÛTHEN_CÝ : (CONV * CONV) -> CONV;
=DESCRIBE
Combine the effect of two successful conversions.
=FRULE 1 Rule
(c1: CONV) THEN_C (c2: CONV)
¬t®
÷
÷
‡ ô t = t'''
=TEX
where $c1\ t$ returns `$‡1 ô t = t'$`, $c2\ t'$ returns
`$‡2 ô t'' = t'''$`, $t'$ and $t''$ are $\alpha$-convertible and
$‡$ equals $‡1 À ‡2$.
=SEEALSO
$EVERY\_C$ (the iterated version of this function),
as well as $THEN\-\_TRY\-\_C$, $AND\-\_OR\-\_C$, and $ORELSE\_C$
=FAILURE
7101	Result of first conversion, ?0, not an equational theorem
7102	LHS (if any) of result of second conversion, ?0, not
	Á-convertible to RHS of first, ?1
=FAILUREC
\paragraph{Errors}
If any, as the failures of $c1$ and $c2$ applied to $t$ and $t'$ respectively.
=ENDDOC
($THENC$ in Cambridge HOL)
=DOC
val ÛTHEN_TRY_CÝ : (CONV * CONV) -> CONV;
=DESCRIBE
Combine the effect of two conversions, ignoring the failure
of the second if necessary.
That is, if the first conversion results in an equational theorem
whose RHS can have the second conversion applied,
and the two resulting theorems composed,
then that composition;
otherwise the result of the first conversion alone is returned.
=SEEALSO
$THEN\_C$, $AND\-\_OR\-\_C$, $ORELSE\_C$
=FAILUREC
\paragraph{Errors}
As the failure of $c1$.
=ENDDOC

=DOC
val ÛORELSE_CÝ : (CONV * CONV) -> CONV;
=DESCRIBE
Attempt to apply one conversion, and if that fails, try the second one.
=FRULE 1 Rule
(c1: CONV) ORELSE_C (c2: CONV)
¬t®
÷
÷
‡ ô t = t'
=TEX
where $c1\ t$ returns $‡ ô t = t'$, or $c1$ fails, and
$c2\ t$ returns
$‡ ô t = t'$.
=SEEALSO
$FIRST\_C$ (the iterated version of this function), $THEN\_C$, $AND\-\_OR\-\_C$, and $THEN\-\_TRY\-\_C$
=FAILUREC
\paragraph{Errors}
As the failure of second conversion, should both conversions fail.
=ENDDOC
($ORELSEC$ in Cambridge HOL)
=DOC
val ÛAND_OR_CÝ : (CONV * CONV) -> CONV;
=DESCRIBE
$c1\ AND\-\_OR\-\_C\ c2$ will succeed if it can apply
one or both of $c1$ or $c2$.
If it cannot compose the results of applying both
conversions successfully (indicating an ill-formed conversion result)
it will return the result of the first conversion application.
=SEEALSO
$THEN\-\_TRY\-\_C$, $ORELSE\_C$, $THEN\_C$
=FAILUREC
\paragraph{Errors}

As the failure message of the second conversion
(implying that neither conversion was successfully applied).
=ENDDOC
=DOC
val ÛREPEAT_CÝ : CONV -> CONV;
=DESCRIBE
Repeatedly apply a conversion to a term.
To be more precise, the functionality is equivalent that of the following definition:
=GFT
fun REPEAT_C (c:CONV) =
	(c THEN_C (REPEAT_C c)) ORELSE_C refl_conv
=TEX
=SEEALSO
$REPEAT\_C1$
=ENDDOC
($REPEATC$ in Cambridge HOL)
=DOC
val ÛREPEAT_C1Ý : CONV -> CONV;
=DESCRIBE
Repeatedly apply a conversion to a term,
failing if not successfully applied at least once.
To be more precise, the functionality is equivalent that of the following definition:
=GFT
fun REPEAT_C1 (c:CONV) = (c THEN_TRY_C REPEAT_C1 c)
=TEX
=FAILUREC
\paragraph{Errors}
As the error of the conversion if it cannot be applied at
least once.
=ENDDOC
=DOC
val ÛEVERY_CÝ : CONV list -> CONV;
=DESCRIBE
Apply each conversion in the list, in the sequence given.
=SEEALSO
$THEN\_C$(which this function iterates)
=FAILURE
7103	List may not be empty
=FAILUREC
or as the failure of any constituent conversion,
or as $THEN\_C$.
=ENDDOC
($EVERYC$ in Cambridge HOL)
=DOC
val ÛFIRST_CÝ : CONV list -> CONV;
=DESCRIBE
Attempt to apply each conversion in the list, in the sequence given, until one succeeds, or all fail.
=SEEALSO
$ORELSE\_C$(which this function iterates)
=FAILURE
7103	List may not be empty
=FAILUREC
or as the failure of the last conversion.
=ENDDOC
($FIRSTC$ in Cambridge HOL)
=DOC
val ÛCHANGED_CÝ : CONV -> CONV;
=DESCRIBE
Applies a conversion, and fails if either the conversion fails,
has ill-formed results in certain ways,
or it causes no change.
Even $\alpha$-convertible changes count as a change for this purpose.
=FAILURE
7032	Conversion failed to cause a change
7104	Result of conversion, ?0, ill-formed
=FAILUREC
It may also fail with the error message of the conversion argument.
=ENDDOC
($CHANGED\_CONV$ in Cambridge HOL)
=DOC
val ÛTRY_CÝ : CONV -> CONV;
=DESCRIBE
Attempt to apply a conversion, and if it fails, apply $refl\_conv$.
=ENDDOC
($TRY\_CONV$ in Cambridge HOL)
=DOC
val ÛCOND_CÝ : (TERM -> bool) -> CONV -> CONV -> CONV;
=DESCRIBE
$COND\_C$ $pred$ $cnv1$ $cnv2$ $tm$ 
will be, if the term predicate $pred$ applied to $tm$ is true, then $cnv1$ $tm$
and otherwise
the $cnv2$ $tm$.
=FAILUREC
\paragraph{Errors}
As the failure of the predicate or either conversion.
=ENDDOC
\subsubsection{Term Traversal Algorithms for Conversions}
There is a term traversal conversion tool, prototyped in \cite{DS/FMU/IED/SML019}.
Thus we do not provide as full a tool kit as possible.
In particular we do not give equivalents to $DEPTH\_FORALL\_CONV$
and $DEPTH\_EXISTS\_CONV$.
=DOC
val ÛRAND_CÝ : CONV -> CONV;
=DESCRIBE
Apply a conversion to the operand of a combination:
=FRULE 1 Rule
RAND_C
(c : CONV)
¬f a®
÷
÷
ô f a = f a'
=TEX
where $c\ a$ gives $ô a = a'$.
=FAILURE
3010	?0 is not of form: ¬t1 t2®
7104	Result of conversion, ?0, ill-formed
=FAILUREC
Also as the failure of the conversion.
=ENDDOC
($RAND\_CONV$ in Cambridge HOL)
=DOC
val ÛRANDS_CÝ : CONV -> CONV;
=DESCRIBE
Apply a conversion to each of the arguments of a a function
=FRULE 1 Rule
RANDS_C
(c : CONV)
¬f a ... z®
÷
÷
ô f a ... z = f a'...z'
=TEX
where $c\ a$ gives $ô a = a'$, etc.
The function $f$ may have no arguments in which case $refl\-\_conv$ $f$ is returned.
=FAILURE
7104	Result of conversion, ?0, ill-formed
=FAILUREC
Also as the failure of the conversion.
=ENDDOC
=DOC
val ÛRATOR_CÝ : CONV -> CONV;
=DESCRIBE
Apply a conversion to the operator of a combination:
=FRULE 1 Rule
RATOR_C
(c : CONV)
¬f a®
÷
÷
ô f a = f' a
=TEX
where $c\ f$ gives $`ô f = f'`$.
=FAILURE
3010	?0 is not of form: ¬t1 t2®
7104	Result of conversion, ?0, ill-formed
=FAILUREC
Also as the failure of the conversion.
=ENDDOC
($RAND\_CONV$ in Cambridge HOL)
=DOC
val ÛLEFT_CÝ : CONV -> CONV;
=DESCRIBE
Apply a conversion to the first operand of a binary operator:
=FRULE 1 Rule
LEFT_C
(c : CONV)
¬f a b®
÷
÷
ô f a b = f a' b
=TEX
where $c\ a$ gives $ô a = a'$.
$f$ may itself be a function application.
=FAILURE
3013	?0 is not of form: ¬f a b®
7104	Result of conversion, ?0, ill-formed
=FAILUREC
Also as the failure of the conversion.
=ENDDOC
=DOC
val ÛRIGHT_CÝ : CONV -> CONV;
=DESCRIBE
Apply a conversion to the second operand of a binary operator:
=FRULE 1 Rule
RIGHT_C
(c : CONV)
¬f a b®
÷
÷
ô f a b = f a b'
=TEX
where $c\ b$ gives $`ô b = b'`$.
$f$ may itself be a function application.
=FAILURE
3013	?0 is not of form: ¬f a b®
7104	Result of conversion, ?0, ill-formed
=FAILUREC
Also as the failure of the conversion.
=ENDDOC
=DOC
val ÛAPP_CÝ : (CONV * CONV) -> CONV;
=DESCRIBE
Apply one conversion to the operator of a combination,
and a second to the operand.
=FRULE 1 Rule
APP_C
(c1 : CONV,
c2 : CONV)
¬f a®
÷
÷
ô f a = f' a'
=TEX
where $c1\ f$ gives $`ô f = f'`$,
and $c2\ f$ gives $`ô a = a'`$.
=FAILURE
3010	?0 is not of form: ¬t1 t2®
7110	Results of conversions, ?0 and ?1, ill-formed or cannot be combined
=FAILUREC
Also as the failure of the conversions.
=ENDDOC
=DOC
val ÛSIMPLE_Ì_CÝ : CONV -> CONV;
=DESCRIBE
Apply a conversion to the body of a simple abstraction:
=FRULE 1 Rule
SIMPLE_Ì_C
(c : CONV)
¬Ì x · p®
÷
÷
ô (Ì x · p[x]) = (Ì x · p'[x])
=TEX
where $c\ p[x]$ gives $`ô p[x] = p'[x]`$.
=SEEALSO
$SIMPLE\-\_BINDER\-\_C$
=FAILURE
3011	?0 is not of form: ¬Ì var · t®
7104	Result of conversion, ?0, ill-formed
=FAILUREC
Also as the failure of the conversion.
=ENDDOC
($SIMPLE\_Ì\_CONV$ in Cambridge HOL)
=DOC
val ÛSIMPLE_BINDER_CÝ : CONV -> CONV;
=DESCRIBE
Apply a conversion to the body of a simple binder term:
=FRULE 1 Rule
SIMPLE_BINDER_C
(c : CONV)
¬B x · p®
÷
÷
ô (B x · p[x]) = (B x · p'[x])
=TEX
where $c\ p[x]$ gives $`ô p[x] = p'[x]`$,
and $B$ is a binder.
=FAILURE
7059	?0 is not of the form: ¬B x · p[x]® where ¬B® is a binder
	and ¬x® a variable
7104	Result of conversion, ?0, ill-formed
=FAILUREC
Also as the failure of the conversion.
=ENDDOC
($SIMPLE\-\_BINDER\-\_CONV$ in Cambridge HOL)
=DOC
val ÛSUB_CÝ : CONV -> CONV;
=DESCRIBE
Apply a conversion to each of the constituents of a term,
however that term might be constructed,
and recombine the results.
Thus:
=GFT
SUB_C cnv var = refl_conv var

SUB_C cnv const = refl_conv const

SUB_C cnv (f x) = ‡ ô f x = f' x'
	where cnv f = ‡1 ô f = f'
	and   cnv x = ‡2 ô x = x'
	and ‡ = ‡1 À ‡2

SUB_C cnv (Ì x · t) = ‡ ô (Ì x · t) = (Ì x · t')
	where cnv t = ‡ ô t = t'
=TEX
=SEEALSO
$SUB\_C1$
=ENDDOC
($SUB\_CONV$ in Cambridge HOL)
=DOC
val ÛSUB_C1Ý : CONV -> CONV;
=DESCRIBE
Apply a conversion to each of the constituents of a term,
failing if the term cannot be broken up, or the
conversion fails on all constituents
(if only one of the two constituents of a $mk\_app$ have failures,
then the offending term will be $refl\_conv$ed instead).
Thus:
=GFT
SUB_C1 cnv var = fail_conv var

SUB_C1 cnv const = fail_conv const

SUB_C1 cnv (f x) = ‡ ô f x = f' x'
	where cnv f = ‡1 ô f = f'
	and   cnv x = ‡2 ô x = x'
	and ‡ = ‡1 À ‡2

SUB_C1 cnv (Ì x · t) = ‡ ô (Ì x · t) = (Ì x · t')
	where cnv t = ‡ ô t = t'
=TEX
=FAILURE
7104	Result of conversion, ?0, ill-formed
7105	?0 has no constituents
=FAILUREC
There may be failure messages from the conversions.
=ENDDOC

The following traversal schemes are those provided by Cambridge HOL,
and are by no means a complete set of ``reasonable'' traversal schemes.
Indeed, $REPEAT\_MAP\_C$ is unlikely to ever be an efficient traversal scheme, but merely complete.

When they fail, the resulting error message is somewhat ``non-deterministic'', it may
come from a function implementing the traversal scheme used,
or from the conversion traversed through the term.
=DOC
val ÛONCE_MAP_CÝ : CONV -> CONV;
=DESCRIBE
This traverses a term from the root node to its leaves,
attempting to apply its conversion argument.
If it successfully applies the conversion to any subterm
then it will not further traverse that subterm,
but will still continue on other branches.
If it fails to apply its conversion to a leaf, its functionality is equivalent to then applying $refl\_conv$.
It traverses from left to right, though this should only matter for
conversions that work by side-effect.
It will fail if the conversion succeeds nowhere in the tree,
or if the results of certain conversion applications are ill-formed.
=FAILURE
7005	Conversion fails on term and all its subterms
=ENDDOC
($ONCE\_DEPTH\_CONV$ in Cambridge HOL)
=DOC
val ÛMAP_CÝ : CONV -> CONV;
=DESCRIBE
This traverses a term from its leaves to its root node.
It will repeat the application of its conversion argument, until failure,
on each subterm encountered en route.
At each node the conversion is applied to the sub-term that results from the application of the preceding traversal, not the original.
It traverses from left to right, though this should only matter for
conversions that work by side-effect.
It fails if the conversion applies nowhere within the tree.
=FAILURE
7005	Conversion fails on term and all its subterms
=ENDDOC
($DEPTH\_CONV$ in Cambridge HOL)
=DOC
val ÛREPEAT_MAP_CÝ : CONV -> CONV;
=DESCRIBE
This traverses a term from its leaves to its root node.
It will attempt the application of its conversion argument
on each subterm encountered en route.
If the conversion is successfully applied
to a given sub-term,
then the resulting sub-term from the conversion
is re-traversed by the function.
It traverses from left to right, though this should only matter for
conversions that work by side-effect.
It fails if the conversion is not applicable anywhere within
the term, or if certain applications of the conversion
have ill-formed results.
=FAILURE
7005	Conversion fails on term and all its subterms
=ENDDOC
($REDEPTH\_CONV$ in Cambridge HOL)
=DOC
val ÛTOP_MAP_CÝ : CONV -> CONV;
=DESCRIBE
$TOP\_MAP\_C$ $conv$ $tm$ traverses $tm$ from its root node to its leaves.
It will repeat the application of $conv$, until failure,
on each subterm encountered en route.
It then descends through the sub-term that results from the repeated application of the conversion.
If the descent causes any change, on ``coming back out'' to the sub-term the conversional will attempt
to reapply $conv$, and if successful
will then (recursively) reapply $TOP\_MAP\_C$ $conv$
once more.
If $conv$ cannot be reapplied then the conversional continues
to ascend back to the root.

It traverses from left to right, though this should only matter for
conversions that work by side-effect.
It fails if the conversion is applied nowhere within the term.
=FAILURE
7005	Conversion fails on term and all its subterms
=ENDDOC
($TOP\_DEPTH\_CONV$ in Cambridge HOL)
\subsubsection{Conversions as Rules}
=DOC
val Ûconv_ruleÝ : CONV -> THM -> THM;
=DESCRIBE
Apply a conversion to the conclusion of a theorem, and do $¤$ modus ponens between the original theorem and the result of the conversion
=FRULE 1 Rule
conv_rule
(c : CONV)
÷
‡1 ô t
÷
‡1 À ‡2 ô t'
=TEX
where $c\ t$ gives $‡2 ô t ¤ t'$.
=FAILURE
7104	Result of conversion, ?0, ill-formed
=FAILUREC
Also as the failure of the conversion upon the conclusion of the
theorem.
=ENDDOC
($CONV\_RULE$ in Cambridge HOL)
\section{SUPPORTING THEORY}
\label{theorems}
Some of the above inference rules are implemented by appealing
to theorems, some of which we make visible to the user in the following.
=DOC
val Ût_thmÝ : THM;
=DESCRIBE
``True'' is true.
=FRULE 1 Theorem
t_thm
÷
÷
ô T
=TEX
=ENDDOC
($TRUTH$ in Cambridge HOL)
=DOC
val Ûf_thmÝ : THM;
=DESCRIBE
``Not False'' is true.
=FRULE 1 Theorem
f_thm
÷
÷
ô ³ F
=TEX
=ENDDOC
=DOC
val Û³_t_thmÝ : THM;
=DESCRIBE
``Not true is false''.
=FRULE 1 Theorem
³_t_thm
÷
÷
³ T ¤ F
=TEX
=ENDDOC
=DOC
val Û³_thm1Ý : THM;
=DESCRIBE
``Not t if and only if t is false.''
=FRULE 1 Theorem
³_thm1
÷
÷
ô µ t · (³ t) ¤ (t ¤ F)
=TEX
=ENDDOC
=DOC
val Û³_thmÝ : THM;
=DESCRIBE
Expanded form of definition of $³$:
=FRULE 1 Theorem
³_thm
÷
÷
µ t · (³ t) ¤ (t ´ F)
=TEX
=ENDDOC
=DOC
val Û±_thmÝ : THM;
=DESCRIBE
Expanded form of definition of $±$
=FRULE 1 Theorem
±_thm
÷
÷
µ t1 t2 · (t1 ± t2) ¤
	(µ b · (t1 ´ t2 ´ b) ´ b)
=TEX
=ENDDOC
=DOC
val Û²_thmÝ : THM;
=DESCRIBE
Expanded form of definition of $²$
=FRULE 1 Theorem
²_thm
÷
÷
µ t1 t2 · (t1 ² t2) ¤
(µ b · (t1 ´ b) ´ (t2 ´ b) ´ b)
=TEX
=ENDDOC
=DOC
val Û¶‰1_thmÝ : THM;
=DESCRIBE
Expanded form of definition of $¶‰1$
=FRULE 1 Theorem
¶‰1_thm
÷
÷
ô µ P · ($¶‰1 P) ¤
	(¶ t · (P t) ± 
	(µ x · (P x) ´ x = t))
=TEX
=ENDDOC
=DOC
val Û³_µ_thmÝ : THM;
=DESCRIBE
Used in pushing negations through simple universal quantifications.
=FRULE 1 Theorem
³_µ_thm
÷
÷
ô µ p· ³ $µ p ¤ (¶ x· ³ p x)
=TEX
=ENDDOC
=DOC
val Û³_¶_thmÝ : THM;
=DESCRIBE
Used in pushing negations through simple existential quantifications.
=FRULE 1 Theorem
³_¶_thm
÷
÷
ô µ p· ³ $¶ p ¤ (µ x· ³ p x)
=TEX
=ENDDOC
\section{END OF THE SIGNATURE}
=SML
end; (* signature of DerivedRules1 *)
=TEX
\section{TEST POLICY}
The functions in this document should be tested according to the general criteria described in
\cite{DS/FMU/IED/PLN008}.
All the primitive and built-in functions should be tested
to ensure they do not block errors 6036, 6065 and 6066
caused in their calls to the kernel inference rules they
are based on.
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}


