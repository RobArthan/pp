=TEX
% TQtemplate.tex
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Module Tests for Antiunification}  %% Mandatory field
\TPPref{DS/FMU/IED/MDT011}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}  %% Mandatory field (with sensible default)
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{
This document comprises test cases and test data for
Antiunification}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library \\ R.D. Arthan\\ D.J. King}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
%\bibliographystyle{fmu}
%\bibliography{fmu}

\subsection{Changes history}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1]
First version, based on DS/FMU/IED/DTD011.
\item[Issue 1.2]
Changed in accordance with changed interface to module test harness.
\end{description}
\subsection{Changes forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}

This document comprises tests of the function antiunify
which is specified in DS/FMU/IED/IMP011.

\subsection{Introduction}

\subsubsection{Background and Purpose}

This document is the first document to use the module test harness
described in DS/FMU/IED/DTDmod. Its purpose is to test fully
the function antiunify in accordance with the test policy in
DS/FMU/IED/DTD011 and the guidelines laid out in the
quality plan, DS/FMU/IED/PLN008.

\subsubsection{Dependencies}

This document depends on the signature Antiunify specified
in DS/FMU/IED/DTD011, and the structure Antiunify
specified in DS/FMU/IED/IMP011. It makes use of the
module test harness described in DS/FMU/IED/DTDmod and
DS/FMU/IED/IMPmod.

\subsubsection{Possible Enhancements}

None.

\subsubsection{Deficiencies}

None Known.

\section{TEST CASES}

\begin{description}

\item[au1] that the antiunification of any two identical
type variables is the type variable.

\item[au2] that the antiunification of any two identical
types is that same type

\item[au3] that the antiunification of the following
produces a new type variable:

\begin{enumerate}

\item two different type variables

\item a type variable and a t

\item two different types with different construct

\item two different types with same constructors but
different length type lists.

\end{enumerate}

\item[au4] that the antiunification of a non-easy pair
which differ in all list types produces a type with
the same constructor but a list containing new type
variables.

\item[au5] that when more than one new type variable is
generated in a list, that they are unique.

\item[au6] that the order of the arguments supplied
to antiunify does not matter.

\item[au7] that a new type variable will not
clash with a type variable present in either of the
two types.

\end{description}

\section{TEST DATA AND TEST CODE}

=SML
init_mt_results();
=TEX

=SML
let
val va = mk_vartype "VA";
val vb = mk_vartype "VB";
val vc = mk_vartype "VC";
val vd = mk_vartype "VD";
val ve = mk_vartype "VE";
val vf = mk_vartype "VF";
val vg = mk_vartype "VG";
val vh = mk_vartype "VH";
=TEX

=SML
val ta0  = mk_type ("TA",[]);
val tb0  = mk_type ("TB",[]);
val taq = mk_type ("'X",[]);
val ta1 = mk_type ("TA",[ta0]);
val ta1b= mk_type ("TA",[tb0]);
val tb1 = mk_type ("TB",[tb0]);
val ta2 = mk_type ("TA",[ta0,ta1]);
val ta2b = mk_type ("TA",[ta0,tb1]);
val ta3 = mk_type ("TA",[ta0,ta1,ta0]);
val ta3b = mk_type ("TA",[ta0,tb1,tb0]);
val ta3c = mk_type ("TA",[ta0,taq,tb0]);
val ta3d = mk_type ("TA",[ta1,ta1b,taq]);
val ANY = mk_type ("ANY",[]);
val EQ  = mk_type ("EQ", [ANY,ANY]);
val IFF = mk_type ("IFF",[BOOL,BOOL]);
val EQB = icl'inst_type [(ANY,"BOOL")] IFF;
=TEX

=SML
val res0 = mk_vartype ("'0");
val res00 = mk_vartype ("''0");
val res0a = mk_vartype ("'1");
val res00a = mk_vartype ("''1");
val res00b = mk_vartype ("''2");
val res1 = mk_type ("TA",[res0]);
val res2 = mk_type ("TA",[ta0,res0]);
val res3 = mk_type ("TA",[ta0,res0,res0a]);
val res4 = mk_type ("TA",[ta0,res00,res00a]);
val res5 = mk_type ("TA",[res00,res00a,res00b]);
=TEX

=SML
in
store_mt_results mt_run
[
("au1",   antiunify, (va,va),		va),
("au2.1", antiunify, (ta0,ta0),		ta0),
("au2.2", antiunify, (ta1,ta1),		ta1),
("au3.1", antiunify, (va,vb),		res0),
("au3.2", antiunify, (va,ta0),		res0),
("au3.3", antiunify, (ta0,tb0),		res0),
("au3.4", antiunify, (ta0,ta1),		res0),
("au4.1", antiunify, (ta1,ta1b),	res1),
("au4.2", antiunify, (ta3b,ta3d),	res5),
("au5.1", antiunify, (ta2,ta2b),	res2),
("au5.2", antiunify, (ta3,ta3b),	res3),
("au6.1", antiunify, (ta3b,ta3),	res3),
("au6.2", antiunify, (ta2,ta2b),	res2),
("au6.3", antiunify, (ta0,va),		res0),
("au7.1", antiunify, (va,taq),		res00),
("au7.2", antiunify, (ta3,ta3c),	res4),
("au7.3", antiunify, (ta3c,ta3d),	res5),
("au8.1", antiunify, (IFF,EQ),		res0),
("au8.2", antiunify, (IFF,EQB),		IFF)
]
end;
=TEX

=SML
get_mt_results();
summarize_mt_results();
=TEX

\newpage
\twocolumn[\section{INDEX OF DEFINED TERMS}]
\printindex
\end{document}
