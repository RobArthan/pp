=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
\TPPtitle{Proof Contexts}  %% Mandatory field
\def\TPPheadtitle{Proof Contexts}
\TPPref{DS/FMU/IED/DTD051}  %% Mandatory field
\def\SCCSversion{$Revision$
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}  %% Mandatory field
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{K.~Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{K.~Blackburn & WIN01\\R.D.Arthan & WIN01}
\TPPauthorisation{R.D.Arthan & FST Team Leader}
\TPPabstract{This document gives the detailed design for providing proof contexts.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Project Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item [Issue 1.1]
First version.
\end{description}
\subsection{Changes Forecast}
This document needs to know ``now'' which functions it may
configure, and the type of the proof context details.
Thus if a new configurable tool is added then this document will need
modification.

In particular, the expected resolution tool will be parameterised in some manner yet to be decided,
and when introduced will require changes to this document
and its implementation.
\section{GENERAL}
\subsection{Scope}
This document contains a detailed design for the 
provision of proof contexts.
This is called for in section \cite{DS/FMU/IED/HLD???}.
The design is implemented in \cite{DS/FMU/IED/IMP051}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
A proof context is a setting of various configurable
parameters to support a particular mode of proof.
In particular, proof contexts will be later made available,
through the tools supplied here,
that supply an good environment to reason about Z,
or within a particular theory (e.g. set theory),
and alter the default environment.
Proof contexts may be set merely by knowing their name.
We may expect the equational contexts of striping and rewriting
to be part of a proof context.

All functions require all their arguments to begin evaluation,
unless otherwise noted.

Note also that the order of declaration given in this document will
not necessarily reflect the order of implementation in
\cite{DS/FMU/IED/IMP051}.
\subsubsection{Dependencies}
This document is dependent on \cite{DS/FMU/IED/IMP026}
and \cite{DS/FMU/IED/IMP028}.

\subsubsection{Deficiencies}
None known.
\subsubsection{Possible Enhancements}
Proof contexts are often associated with theories,
so it might be nice if the theory lister tells you the names
of those objects associated with the theory listed.
\section{DISCUSSION}
The goal of the following functions is to be able:
\begin{enumerate}
\item
To give a naive user a simple command to change
the proof context of all proof tools and the environment
to provide the best context available for the style of work they are to then carry out.
\item
To give the developer of, say, a new theory the means
to create a proof context to provide a context suitable for reasoning in that theory.
\end{enumerate}
We go about this by first having a dictionary of proof contexts.
A proof context is then no more than a labelled record of proof context data.

We fail to give the developer of a configurable tool the means to modify all relevant pre-existing proof contexts to understand the
new tool.
They will have to modify this document and its implementation, and then rebuild the system
(an approach only available to someone supplied with the means to do a system build), or provide their own proof context
tools, perhaps ``piggy backing'' upon the ones supplied here.

An alternative approach to the one chosen is to take a 
proof context to be a labeled list of functions of type $:unit\ ->\ unit$.
A proof context would then be set by applying each function in the proof context to $()$.
This has the advantage that new configurable tools could be
introduced within a system rebuild.
However, one loses the ability to display even parts
of the context, or access to the data to which
an individual configurable function could be configured.
\section{THE DESIGN}
=DOC
signature âProofContextá = sig
=DESCRIBE
This provides the basic tools for handling proof contexts.
=ENDDOC
=DOC
type PROOF_CONTEXT;
=DESCRIBE
This is the type of a proof context, which holds the data used to configure
certain proof tools.
ó
type PROOF_CONTEXT = {
	rw_eqn_cxt: EQN_CXT,
	rw_canon: CANON,
	sa_eqn_cxt: EQN_CXT,
	sg_eqn_cxt: EQN_CXT}; 
æ
These are, in sequence:
\begin{itemize}
\item
An equational context for rewriting;
\item
A canonicalisation function for rewriting;
\item
An equational context for stripping theorems into the
assumption list;
\item
And an equational context for stripping goals.
\end{itemize}
=SEEALSO
$set\_proof\_context$, $create\_proof\_context$
=ENDDOC
=DOC
val âset_proof_contextá : string -> unit;
=DESCRIBE
The system holds a dictionary of known proof contexts.
This command selects one of those proof contexts,
and configures the system accordingly.

The proof context named ``empty'' removes
any special behaviour from the system caused by proof contexts,
the one named ``initial'' restores the proof context
to that initially supplied.
=SEEALSO
$list\_proof\_contexts$
=FAILURE
51006	A proof context with name ?0 does not exist
=ENDDOC
$set\_proof\_context$ does not return the previous proof context (though similar functions in ICL HOL do) because this function is
aimed at the naive user: use $get\_proof\_context$ instead.

We may well need to accommodate tools who are built
after, e.g., theories for which we wish to provide a proof context.
In this case we will provide a method of assigning new 
functionality to a function variable called by
$set\_proof\_context$.

Note the implicit requirement in the design of $set\_proof\_context$(q.v.) on the writer of any new
proof context areas to update at least the proof contexts ``empty'' and
``initial''.
=DOC
val âlist_proof_contextsá : unit -> string list;
=DESCRIBE
The system holds a dictionary of known proof contexts.
This command lists the names of these known proof contexts.
=SEEALSO
$set\_proof\_context$
=FAILURE
51006	A proof context with name ?0 does not exist
=ENDDOC
=DOC
val âcreate_proof_contextá : string -> PROOF_CONTEXT -> unit;
=DESCRIBE
This function creates a proof context, which can then be 
set by $set\_proof\_context$ (q.v).

Any previous proof context with the same name will be overwritten by the new proof context.
=SEEALSO
$get\_proof\_context$
=ENDDOC
=DOC
val âget_proof_contextá : string -> PROOF_CONTEXT;
=DESCRIBE
This returns a proof context created by $create\_proof\_context$.
Its contents can be accessed by pattern matching on the
object.
=SEEALSO
$set\_proof\_context$, $create\_proof\_context$
=FAILURE
51006	A proof context with name ?0 does not exist
=ENDDOC
\section{END OF THE SIGNATURE}
=SML
end; (* signature of ProofContext *)
=TEX
\section{TEST POLICY}
The functions in this document should be tested as described in
\cite{DS/FMU/IED/PLN008}.
=TEX
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}
