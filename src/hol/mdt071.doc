=IGN
********************************************************************************
mdt071.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
%  %Z% $Date: 2002/10/17 15:10:58 $ $Revision: 1.13 $ $RCSfile: mdt071.doc,v $

doctex mdt071 ; texdvi mdt071
bibtex mdt071

=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
\TPPtitle{Module Tests for the Theory of Relations}  %% Mandatory field
\def\TPPheadtitle{Module Tests for the \cr
Theory of Relations}
\TPPref{DS/FMU/IED/MDT071}  %% Mandatory field
\def\SCCSversion{$Revision: 1.13 $ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\def\SCCSdate{\FormatDate{$Date: 2002/10/17 15:10:58 $ %
}}
\TPPdate{\SCCSdate}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{ML Literate Script}
\TPPkeywords{}
\TPPauthor{R.B.Jones & WIN01}  %% Mandatory field
%\TPPauthors{K.Blackburn & WIN01\\D.J.~King & WIN01}
\TPPauthorisation{R.D.Arthan & Project Manager}
\TPPabstract{A set of module tests are given for the
functions (conversions, etc) associated with the
theory of relations.
It also checks that the theory design has been met by the theory implementation.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{center}
\bf Copyright \copyright\ : Lemma 1 Ltd. 1992
\end{center}
\pagebreak
\section{Document Control}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}

\item[Issues 1.1 (1992/05/07) to 1.6 (1992/06/17) ]
	First drafts of the document.

\item[Issues 1.17 to 1.11 (1993/02/02)]
	Add checks of Spivey's rules from~\cite{Spivey92}, the Z~Reference Manual.

\item[Issue 1.12 (1996/01/22)]
Made test output messages compatible with build process.
\item[Issue 1.13 (2002/10/17)] Copyright and banner updates for open source release.
\item[Issue 1.14 (2002/10/17)] PPHol-specific updates for open source release
\item[2014/07/23]
Augmented old RCS version numbers in the changes history with dates.
Dates will be used in place of version numbers in future.

%%%% END OF CHANGES HISTORY %%%%
\end{description}
%\subsection{Changes Forecast}

\section{GENERAL}
\subsection{Scope}
This document contains the module testing of the functions
(conversions, etc) associated with the theory of relations, required
by~\cite{DS/FMU/IED/DTD071}.
The design is in \cite{DS/FMU/IED/DTD071} and it is implemented in \cite{DS/FMU/IED/IMP071}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains the module testing for the material given in the
design document~\cite{DS/FMU/IED/DTD071}, following the test policy
given in that document and the general policy given
in~\cite{DS/FMU/IED/PLN008}.

The testing uses material from \cite{DS/FMU/IED/DTD013}.

\subsubsection{Dependencies}
This document is derived from the detailed design
in~\cite{DS/FMU/IED/DTD071} and is further influenced by the
implementation in~\cite{DS/FMU/IED/IMP071}.  It also requires a theory
check file, ``dtd071.tch'', created by running the Unix command ``{\tt
doctch dtd071}''.

\subsubsection{Deficiencies}
None known.
\section{TEST CASES}
The test cases are adapted from the so-called laws given in pp. 96-103 of
Spivey's Z~Reference Manual~\cite{Spivey92}. The intention is that
the proof context should support essentially automatic proof of all of
the laws. The tests are organised into groups, each group corresponding
to a page of \cite{Spivey92}. Not all the laws are true as stated and
a few require human intervention in the proof.

\section{INITIALISATION}
Initialise the test package:
=SML
use_file "dtd013";
use_file "imp013";
init_mt_results();
open_theory "bin_rel";

val bin_rel_defs = map snd(get_defns "-");

repeat drop_main_goal;
repeat pop_pc;
=TEX
=SML
fun list_eq (eq:'a * 'a -> bool) ((a :: x), (b :: y)) : bool = (
	eq(a,b) andalso list_eq eq (x, y)
) | list_eq eq ([], []) = true
| list_eq _ _ = false;
=TEX

\section{CHECK THE THEORY DESIGN}

=SML
"Check the theory design";
=TEX

=SML
use_file "dtd071.tch";
store_mt_results_show mt_run [
("theory design of bin_rel",
	theory_check_success,
	(),
	true)];
=TEX
\newpage
\section{CHECK THE PROOF CONTEXTS}

=SML
"Check the proof contexts";

push_merge_pcs["'bin_rel","hol2"];
=TEX

=IGN
set_merge_pcs["sets_ext", "'pair"];
set_merge_pcs["sets_ext", "'pair1"];
a(rewrite_tac bin_rel_defs THEN prove_tac nil);
=TEX

We save the test cases which allows us to rerun them later without
actually typing in the term.  This block of code is not used by the
normal test path.

We expect several tests to fail at present.  We keep track of them
to report the details at the end of the run.

=SML
val save_test_cases : (string * TERM) list ref = ref nil;
val expected_fails : (string * TERM) list ref = ref nil;

fun get_test_case (lab:string) = (
	(lab, lassoc3 (!save_test_cases) lab)
);

fun run_test (lab:string, t:TERM) = (
	diag_line("\n\n" ^ lab);
	push_goal(nil, t);
	a(prove_tac nil);
	repeat drop_main_goal
);

fun get_failed_test_labels () =
	map (fn (x,_) => x) (get_mt_results() drop (fn (_, x) => x));

fun run_failed_tests() = (
	let
		val fails = get_failed_test_labels();
		val e_fails = map (fn (x,_) => x) (!expected_fails);
	in
		map (run_test o get_test_case) (fails @ e_fails);
		()
	end
);
=TEX

The normal test path uses these next declarations. Most results
are provable automatically by the following tactic. First of all
it trys the $prove\_tac$ (from the $bin\_rel$ proof context).
Then, to accomodate the existentials introduced by things such
as relational composition it tries the existence prover to see if
that simplifies things. Then it tries equational simplification, which
will either prove the goal or give a foothold for a further go
with the $prove\_tac$ from the proof context, and finally if there's
anything left this is usually just because the predicate calculus
structure of the original goal was a bit too deep and a few goes with
forward chaining does the trick.

=SML
val my_prove_tac = (
	prove_tac[] THEN_TRY
	COND_T (is_∂ o snd) (prove_∂_tac) id_tac
	THEN_TRY PC_T1 "prop_eq_pair" asm_prove_tac[]
	THEN_TRY asm_prove_tac[]
	THEN_TRY REPEAT_N 3 (all_asm_fc_tac[])
);
local
	fun aux (lab:string) (tm:TERM) : bool = ((
			tac_proof(([], tm), my_prove_tac);
			true
		) handle Fail _ => false
	);
in
	fun make_test_case (lab:string, tm:TERM, expected_success:bool)
			: string * (TERM -> bool) * TERM * bool = (
		save_test_cases := (lab, tm) :: (!save_test_cases);
		if expected_success then () else
			expected_fails := (lab, tm) :: (!expected_fails);
		(lab, aux lab, tm, expected_success)
	);
end;
=TEX

These terms are copied from page~96 of the Z~Reference Manual~\cite{Spivey92}.


=IGN
:> map(make_test_case);
val it = fn : (string * TERM * bool) list -> (string * (TERM -> bool) * TERM * bool) list

:> store_mt_results_show mt_run ;
val it = fn : (string * ('a -> TERM) * 'a * TERM) list -> (string * bool) list



=SML
store_mt_results_show mt_run (map make_test_case [
("96_01",	¨ x ç Dom R § ( ∂ y ∑ (x Ì y) ç R ) Æ , true ),
("96_02",	¨ y ç Ran R § ( ∂ x ∑ (x Ì y) ç R ) Æ , true ),

(* 		¨ Dom { x1 Ì y1; ... ; xn Ì yn } = { x1; ... ; xn } Æ
			Spivey's statement *)
("96_03a",	¨ Dom { } = { } Æ , true ),
("96_03b",	¨ Dom { x1 Ì y1 } = { x1 } Æ , true ),
("96_03c",	¨ Dom { x1 Ì y1; x2 Ì y2 } = { x1; x2 } Æ , true ),
("96_03d",	¨ Dom { x1 Ì y1; x2 Ì y2; x3 Ì y3 } = { x1; x2; x3 } Æ , true ),
("96_03e",	¨ Dom { x1 Ì y1; x2 Ì y2; x3 Ì y3; x4 Ì y4 } =
				{ x1; x2; x3; x4 } Æ , true ),
("96_03f",	¨ ( ∂ y ∑ ( x Ì y ) ç S1 ) § x ç Dom S1 Æ , true ),
("96_03g",	¨ Dom ( { x Ì y } ¿ xy_s ) = { x } ¿ Dom xy_s Æ , true ),

(* 		¨ Ran { x1 Ì y1; ... ; xn Ì yn } = { y1; ... ; yn } Æ
			Spivey's statement *)
("96_04a",	¨ Ran { } = { } Æ , true ),
("96_04b",	¨ Ran { x1 Ì y1 } = { y1 } Æ , true ),
("96_04c",	¨ Ran { x1 Ì y1; x2 Ì y2 } = { y1; y2 } Æ , true ),
("96_04d",	¨ Ran { x1 Ì y1; x2 Ì y2; x3 Ì y3 } = { y1; y2; y3 } Æ , true ),
("96_04e",	¨ Ran { x1 Ì y1; x2 Ì y2; x3 Ì y3; x4 Ì y4 } =
				{ y1; y2; y3; y4 } Æ , true ),
("96_04f",	¨ ( ∂ x ∑ ( x Ì y ) ç S1 ) § y ç Ran S1 Æ , true ),
("96_04g",	¨ Ran ( { x Ì y } ¿ xy_s ) = { y } ¿ Ran xy_s Æ , true ),

("96_06",	¨ Dom ( Q ¿ R ) = ( Dom Q ) ¿ ( Dom R ) Æ , true ),
("96_07",	¨ Ran ( Q ¿ R ) = ( Ran Q ) ¿ ( Ran R ) Æ , true ),
("96_08",	¨ Dom ( Q ° R ) Ä ( Dom Q ) ° ( Dom R ) Æ , true ),
("96_09",	¨ Ran ( Q ° R ) Ä ( Ran Q ) ° ( Ran R ) Æ , true ),

("96_10",	¨ Dom { } = { } Æ , true ),
("96_11",	¨ Ran { } = { } Æ , true )
]);
=TEX

These terms are copied from page~97 of the Z~Reference Manual~\cite{Spivey92}.

=SML
store_mt_results_show mt_run (map make_test_case [
("97_01",	¨ ( x Ì x') ç Id X § ( x ç X ± x = x' ) Æ , true ),
("97_02",	¨ ( x Ì z ) ç P ª Q § ( ∂ y ∑ (x, y) ç P ± (y, z) ç Q ) Æ , true ),
("97_03",	¨  P R_ª_R ( Q ª R ) = ( P ª Q ) ª R Æ , true ),

(*		¨ Id X ª P = P Æ
			Not true in general, instead prove: *)
("97_04a",	¨ Dom P Ä X ¥ Id X ª P = P Æ , true ),
("97_04b",	¨ Id X ª P = X Ú P Æ , true ),

(*		¨ P ª Id Y = P Æ
			Not true in general, instead prove: *)
("97_05a",	¨ Ran P  Ä Y ¥ P ª Id Y = P Æ , true ),
("97_05b",	¨ P R_ª_R Id Y = P í Y Æ , true ),
("97_06",	¨ Id V ª Id W = Id ( V ° W ) Æ , true )

(*		¨ (f o g) x = f(g x) Æ
	Spivey's statement not directly expressible here *)
]);
=TEX

The last item above, i.e.,
=INLINEFT
¨ (f o g) x = f(g x) Æ
=TEX
{} needs the functional application of relations, which is defined in
the "fun\_rel" theory in~\cite{DS/FMU/IED/DTD072}.

These terms are copied from page~98 of the Z~Reference Manual~\cite{Spivey92}.

=TEX
=SML
store_mt_results_show mt_run (map make_test_case [
("98_01",	¨ S Ú R = Id S ª R Æ , true ),
(*		¨ S Ú R = (S ∏ Y) ° R Æ
			Not true in general, instead prove: *)
("98_02",	¨ Ran R Ä Y ¥ S Ú R = (S ∏ Y) ° R Æ , true ),
("98_03",	¨ R í T1 = R ª Id T1 Æ , true ),
(*		¨ R í T1 = R ° (X ∏ T1) Æ
			Not true in general, instead prove: *)
("98_04",	¨ Dom R Ä X ¥ R í T1 = R ° (X ∏ T1) Æ , true ),
("98_05",	¨ Dom (S Ú R) = S ° Dom R Æ , true ),
("98_06",	¨ Ran (R í T1) = Ran R ° T1 Æ , true ),
("98_07",	¨ S Ú R Ä R Æ , true ),
("98_08",	¨ R í T1 Ä R Æ , true ),
("98_09",	¨ (S Ú R) í T1 = S Ú (R í T1) Æ , true ),
("98_10",	¨ S Ú (V Ú R) = (S ° V) Ú R Æ , true ),
("98_11",	¨ (R í T1) í W = R í (T1 ° W) Æ , true )
]);
=TEX

=TEX

These terms are copied from page~99 of the Z~Reference Manual~\cite{Spivey92}.

=SML
store_mt_results_show mt_run (map make_test_case [
("99_01",	¨ Dom R Ä X ¥ S · R = (X \ S) Ú R Æ , true ),
("99_02",	¨ Ran R Ä Y ¥ R Å T1 = R í (Y \ T1) Æ , true ),
("99_03",	¨ (S Ú R) ¿ (S · R) = R Æ , true ),
("99_04",	¨ (R í T1) ¿ (R Å T1) = R Æ , true )
]);
=TEX

These terms are copied from page~100 of the Z~Reference Manual~\cite{Spivey92}.

=SML
store_mt_results_show mt_run (map make_test_case [
("100_01",	¨ (y Ì x) ç RÁ~Í § (x Ì y) ç R Æ , true ),
("100_02",	¨ (RÁ~Í)Á~Í = R Æ , true ),
("100_03",	¨ (Q ª R)Á~Í = RÁ~Í ª QÁ~Í Æ , true ),
("100_04",	¨ (Id V)Á~Í = Id V Æ , true ),
("100_05",	¨ Dom(RÁ~Í) = Ran R Æ , true ),
("100_06",	¨ Ran(RÁ~Í) = Dom R Æ , true ),
("100_07",	¨ Id(Dom R) Ä R ª RÁ~Í Æ , true ),
("100_08",	¨ Id(Ran R) Ä RÁ~Í ª R Æ , true )
]);
=TEX
These terms are copied from page~101 of the Z~Reference Manual~\cite{Spivey92}.

=SML
store_mt_results_show mt_run (map make_test_case [
("101_01",	¨ y ç R Image S § (∂ x ∑ x ç S ± (x, y) ç R) Æ , true ),
("101_02",	¨ R Image S = Ran(S Ú R) Æ , true ),
("101_03",	¨ Dom(Q ª R) = QÁ~Í Image (Dom R) Æ , true ),
("101_04",	¨ Ran(Q ª R) = R Image (Ran Q) Æ , true ),
("101_05",	¨ R Image (S ¿ T1) = R Image S ¿ R Image T1 Æ , true ),
("101_06",	¨ R Image (S ° T1) Ä R Image S ° R Image T1 Æ , true ),
("101_07",	¨ R Image (Dom R) = Ran R Æ , true ),
("101_08",	¨ Dom R = (Graph Fst) Image R Æ , false ),
("101_09",	¨ Ran R = (Graph Snd) Image R Æ , false )
]);
=TEX
The two results involving $Graph$ fail because the definition
of $Image$ results in a single variable which is a pair, and the
membership statements involvign this then give rise to appearances of
$Fst$ and $Snd$.
=SML
"101_08a";
repeat drop_main_goal;
push_goal(nil, ¨ Dom R = (Graph Fst) Image R Æ);
a(prove_tac nil);
a(∂_tac ¨(x, y)Æ THEN rewrite_tac nil THEN REPEAT strip_tac);
a(∂_tac ¨Snd x'Æ THEN asm_rewrite_tac nil THEN REPEAT strip_tac);

store_mt_results_show mt_run [
("101_08a", fn x => (pop_thm x; true), (), true)
];
=TEX

=SML
"101_09a";
repeat drop_main_goal;
push_goal(nil, ¨ Ran R = (Graph Snd) Image R Æ);
a(prove_tac nil);
a(∂_tac ¨(x', x)Æ THEN rewrite_tac nil THEN REPEAT strip_tac);
a(∂_tac ¨Fst x'Æ THEN asm_rewrite_tac nil THEN REPEAT strip_tac);

store_mt_results_show mt_run [
("101_09a", fn x => (pop_thm x; true), (), true)
];
=TEX

These terms are copied from page~102 of the Z~Reference Manual~\cite{Spivey92}.
(The last two involve application of a relation and so cannot be expressed
in the vocabulary of theory $bin\_rel$.)
=SML
store_mt_results_show mt_run (map make_test_case [
("102_01",	¨ R ´ R = R Æ , true ),
("102_02",	¨ P ´ (Q ´ R) = (P ´ Q) ´ R Æ , true ),
("102_03",	¨ P = { } ´ P Æ , true ),
("102_04",	¨ P = P ´ { } Æ , true ),
("102_05",	¨ Dom(Q ´ R) = Dom Q ¿ Dom R Æ , true ),
("102_06",	¨ Dom Q ° Dom R = { } ¥ Q ´ R = Q ¿ R Æ , true ),
("102_07",	¨ V Ú (Q ´ R) = (V Ú Q) ´ (V Ú R) Æ , true ),
("102_08",	¨ (Q ´ R) í W Ä (Q í W) ´ (R í W) Æ , true )
(*		¨ x ç (Dom f) \ (Dom g) ¥ (f ´ g) x = f x Æ *)
(*		¨ x ç Dom g ¥ (f ´ g) x = g x Æ *)
]);
=TEX


These terms are copied from page~103 of the Z~Reference Manual~\cite{Spivey92}.

=SML
val terms103 = [
("103_01",	(¨ r Ä rÁ+Í Æ , true )),
("103_02",	(¨ rÁ+Í ª rÁ+Í Ä rÁ+Í Æ , false )),
("103_03",	(¨ r Ä q ± q ª q Ä q ¥ rÁ+Í Ä q Æ , false )),
("103_04",	(¨ Id X Ä rÁ*Í Æ , false )),
("103_05",	(¨ r Ä rÁ*Í Æ , false )),
("103_06",	(¨ rÁ*Í ª rÁ*Í = rÁ*Í Æ , false )),
("103_07",	(¨ Id Universe Ä q ± r Ä q ± q ª q Ä q ¥ rÁ*Í Ä q Æ , false )),
("103_08",	(¨ rÁ*Í = rÁ+Í ¿ Id Universe Æ , false )),
("103_09",	(¨ rÁ*Í = ( r ¿ Id Universe) Á+Í Æ , false )),
("103_10",	(¨ rÁ+Í = r ª rÁ*Í Æ , false )),
("103_11",	(¨ rÁ+Í = rÁ*Í ª r Æ , false )),
("103_12",	(¨ ( rÁ+Í )Á+Í = rÁ+Í Æ , false )),
("103_13",	(¨ ( rÁ*Í )Á*Í = rÁ*Í Æ , false )),
("103_14",	(¨ s Ä rÁ*Í Image s Æ , false )),
("103_15",	(¨ r Image ( rÁ*Í Image s ) Ä rÁ*Í Image s Æ , false )),
("103_16",	(¨ s Ä t ± r Image t Ä t ¥ rÁ*Í Image s Ä t Æ , false ))
];
(*	Trying all of these to see which fail takes too long:
store_mt_results_show mt_run
	(map (make_test_case o (fn (x,(y, z)) => (x,y,z))) [hd terms103]);
*)
=TEX
=SML
"103_02";
repeat drop_main_goal;
set_goal(nil, fst(lassoc3 terms103 "103_02"));
a(rewrite_tac[] THEN REPEAT strip_tac
	THEN asm_fc_tac[]
	THEN all_asm_fc_tac[]);
store_mt_results_show mt_run [
("103_02a", fn x => (pop_thm x; true), (), true)
];
=TEX
=SML
"103_03";
repeat drop_main_goal;
set_goal(nil, fst(lassoc3 terms103 "103_03"));
a(rewrite_tac[] THEN REPEAT strip_tac
	THEN asm_fc_tac[]
	THEN all_asm_fc_tac[]);
store_mt_results_show mt_run [
("103_03a", fn x => (pop_thm x; true), (), true)
];
=TEX
=SML
"103_04";
repeat drop_main_goal;
set_goal(nil, fst(lassoc3 terms103 "103_04"));
a(rewrite_tac[] THEN REPEAT strip_tac THEN PC_T1 "prop_eq_pair" asm_prove_tac[]
	THEN asm_fc_tac[]
	THEN all_asm_fc_tac[]);
store_mt_results_show mt_run [
("103_04a", fn x => (pop_thm x; true), (), true)
];
=TEX
=SML
"103_05";
repeat drop_main_goal;
set_goal(nil, fst(lassoc3 terms103 "103_05"));
a(rewrite_tac[] THEN REPEAT strip_tac THEN PC_T1 "prop_eq_pair" asm_prove_tac[]
	THEN asm_fc_tac[]
	THEN all_asm_fc_tac[]);
store_mt_results_show mt_run [
("103_05a", fn x => (pop_thm x; true), (), true)
];
=TEX
=SML
"103_06";
repeat drop_main_goal;
set_goal(nil, fst(lassoc3 terms103 "103_06"));
a(rewrite_tac[] THEN REPEAT strip_tac THEN PC_T1 "prop_eq_pair" asm_prove_tac[]
	THEN asm_fc_tac[]
	THEN all_asm_fc_tac[]);
store_mt_results_show mt_run [
("103_06a", fn x => (pop_thm x; true), (), true)
];
=TEX
=SML
"103_07";
repeat drop_main_goal;
set_goal(nil, fst(lassoc3 terms103 "103_07"));
a(rewrite_tac[] THEN REPEAT strip_tac THEN PC_T1 "prop_eq_pair" asm_prove_tac[]
	THEN asm_fc_tac[]
	THEN all_asm_fc_tac[]);
a(swap_nth_asm_concl_tac 1 THEN GET_NTH_ASM_T 4 bc_thm_tac THEN strip_tac);
store_mt_results_show mt_run [
("103_07a", fn x => (pop_thm x; true), (), true)
];
=TEX
=SML
"103_08a";
repeat drop_main_goal;
set_goal(nil, fst(lassoc3 terms103 "103_08"));
a(rewrite_tac[] THEN REPEAT strip_tac THEN PC_T1 "prop_eq_pair" asm_prove_tac[]
	THEN asm_fc_tac[]
	THEN all_asm_fc_tac[]);
a(swap_nth_asm_concl_tac 5 THEN strip_tac);
a(∂_tac¨s ¿ Id UniverseÆ THEN REPEAT strip_tac
	THEN PC_T1 "prop_eq_pair" asm_prove_tac[]
	THEN asm_fc_tac[]
	THEN all_asm_fc_tac[]);
store_mt_results_show mt_run [
("103_08a", fn x => (pop_thm x; true), (), true)
];
=TEX
=SML
"103_09";
repeat drop_main_goal;
set_goal(nil, fst(lassoc3 terms103 "103_09"));
a(rewrite_tac[] THEN REPEAT strip_tac THEN PC_T1 "prop_eq_pair" asm_prove_tac[]
	THEN asm_fc_tac[]
	THEN all_asm_fc_tac[]);
(* *** Goal "1" *** *)
a(swap_nth_asm_concl_tac 3 THEN strip_tac);
a(∂_tac¨sÆ THEN REPEAT strip_tac
	THEN PC_T1 "prop_eq_pair" asm_prove_tac[]
	THEN asm_fc_tac[]
	THEN all_asm_fc_tac[]);
a(list_spec_nth_asm_tac 2 [¨xÆ, ¨xÆ]);
(* *** Goal "2" *** *)
a(swap_nth_asm_concl_tac 4 THEN strip_tac);
a(∂_tac¨sÆ THEN REPEAT strip_tac
	THEN PC_T1 "prop_eq_pair" asm_prove_tac[]
	THEN asm_fc_tac[]
	THEN all_asm_fc_tac[]);
store_mt_results_show mt_run [
("103_09a", fn x => (pop_thm x; true), (), true)
];
=TEX
Time has not permitted proof of the remaining results about the two
closure operations.
\newpage
\section{END OF TESTS}

=SML
diag_string "\n\n\
	\We do not expect all of the rules from Spivey's Z Reference \
	\Manual to be proven automatically by the proof context.  The \
	\Module tests here accomodate this view by having a boolean to \
	\show the expected success or otherwise of the proof.  Tests \
	\that unexpectedly fail to be proven are considered failed. \
	\Less obviously, tests that are unexpectedly proven are \
	\also considered failed.\n\n";

("Expected proof failures", !expected_fails);

diag_string(
	(string_of_int(length(!expected_fails))) ^
	" expected proof failures which are not counted as failing tests below.");

("Number of failing tests",
	length(map(fn (x,_) => x)
		(get_mt_results() drop (fn (_, x) => x))));
diag_string(summarize_mt_results());
=TEX

\end{document}
