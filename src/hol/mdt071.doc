%  %Z% $Date$ $Revision$ $RCSfile$

doctex mdt071 ; texdvi mdt071
bibtex mdt071

=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
\TPPtitle{Module Tests for the Theory of Relations}  %% Mandatory field
\def\TPPheadtitle{Module Tests for the \cr
Theory of Relations}
\TPPref{DS/FMU/IED/MDT071}  %% Mandatory field
\def\SCCSversion{$Revision$ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\def\SCCSdate{\FormatDate{$Date$ %
}}
\TPPdate{\SCCSdate}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{ML Literate Script}
\TPPkeywords{}
\TPPauthor{R.B.Jones & WIN01}  %% Mandatory field
%\TPPauthors{K.Blackburn & WIN01\\D.J.~King & WIN01}
\TPPauthorisation{R.D.Arthan & Project Manager}
\TPPabstract{A set of module tests are given for the 
functions (conversions, etc) associated with the
theory of relations.
It also checks that the theory design has been met by the theory implementation.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{center}
\bf Copyright \copyright\ : International Computers Ltd 1992
\end{center}
\pagebreak
\section{Document Control}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History} 
\begin{description}

\item[Issues 1.1 to 1.6 ]
	First drafts of the document.

\item[\FormatDate{$Date$%
}, issue \SCCSversion~]
	Add checks of Spivey's rules from~\cite{Spivey92}, the Z~Reference Manual.

%\item[\FormatDate{$Date$%
%}, issue \SCCSversion~]

\end{description}
%\subsection{Changes Forecast}

\section{GENERAL}
\subsection{Scope}
This document contains the module testing of the functions
(conversions, etc) associated with the theory of relations, required
by~\cite{DS/FMU/IED/DTD071}.
The design is in \cite{DS/FMU/IED/DTD071} and it is implemented in \cite{DS/FMU/IED/IMP071}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains the module testing for the material given in the
design document~\cite{DS/FMU/IED/DTD071}, following the test policy
given in that document and the general policy given
in~\cite{DS/FMU/IED/PLN008}.

The testing uses material from \cite{DS/FMU/IED/DTD013}.

\subsubsection{Dependencies}
This document is derived from the detailed design
in~\cite{DS/FMU/IED/DTD071} and is further influenced by the
implementation in~\cite{DS/FMU/IED/IMP071}.  It also requires a theory
check file, ``dtd071.tch'', created by running the Unix command ``{\tt
doctch dtd071}''.

\subsubsection{Deficiencies}
None known.
\section{INITIALISATION}
Initialise the test package:
=SML
use_file "dtd013";
use_file "imp013";
init_mt_results();
open_theory "bin_rel";

val bin_rel_defs = map snd(get_defns "-");

repeat drop_main_goal;
repeat pop_pc;
=TEX
=SML
fun list_eq (eq:'a * 'a -> bool) ((a :: x), (b :: y)) : bool = (
	eq(a,b) andalso list_eq eq (x, y)
) | list_eq eq ([], []) = true
| list_eq _ _ = false;
=TEX


\subsection{Timing}

This section copied from~\cite{DS/FMU/IED/IMP059}, but edited a little.

The following value allows timing to be invoked as on one off
(false invokes timing).
These functions are not currently used in the document,
but would become useful if further tuning is required.

=SML
val €tac_timing› = ref true;
=IGN
tac_timing := true;
tac_timing := false;
=TEX

=SML
val €tac_diag› = ref true;

fun debug s = if !tac_diag then diag_line s else ();
=IGN
tac_diag := true;
tac_diag := false;
=TEX

Time the application of a tactic to a goal, and its resulting proof to its
arguments.

=SML
local (* for timing functions *)

fun report (l1, l2, ts, was_ok) = (
let
	val duration = System.processtime() - ts;
in
	(diag_string o implode)
		[	l1
		,	" for "
		,	l2
		,	" took: "
		,	(string_of_int duration)
		,	(if was_ok then "" else ", but failed")
		]
end
);

in (* local for timing functions *)

fun €TIME_T› (name:string) (tac : TACTIC) : TACTIC = (
	if ! tac_timing 
	then ( fn asms_gl =>
		let
			val t1 = System.processtime ();
			val (sgs, prf) = (tac asms_gl)
				handle  E => (
					report("Tactic setting", name, t1, false);
					raise E
					);
			val sideeffect = report("Tactic setting", name, t1, true);
		in
			(sgs,(fn x => 
			let
				val t2 = System.processtime ();
				val res = (prf x)
					handle E => (
						report("Tactic proof  ", name, t1, false);
						raise E
						);
				val sideeffect = report("Tactic proof  ", name, t1, true);
			in
				res
			end))
		end
	)
	else tac);
=TEX

Time the application of a rule to a theorem.

=SML
fun €time_rule› (name:string) (rule : 'a -> THM) : 'a -> THM = (
	if ! tac_timing
	then (fn arg =>
		let	val t1 = System.processtime ();
			val s1 = rule arg
				handle E => (report("Rule", name, t1, false);
					raise E
					);
			val sideeffect = report("Rule", name, t1, true);
		in
			s1
		end)
	else rule
);

end (* of local for timing functions *);
=TEX

=IGN
push_goal(nil, ¨ µ z ∑ (Fst z, Snd z) = z Æ);
a(rewrite_tac [pair_clauses]);
val fst_snd_lemma = pop_thm();

push_goal(nil, ¨ µ z ∑ z = (Fst z, Snd z) Æ);
a(rewrite_tac [pair_clauses]);
val fst_snd_lemma1 = pop_thm();
=TEX

%\section{TESTING FUNCTIONS OF THE DESIGN}
\section{CHECK THE THEORY DESIGN}

=SML
"Check the theory design";
=TEX

=SML
use_file "dtd071.tch";
store_mt_results_show mt_run [
("theory design of bin_rel",
	theory_check_success,
	(),
	true)];
=TEX
\newpage
\section{CHECK THE PROOF CONTEXTS}

=SML
"Check the proof contexts";

push_merge_pcs["'basic_prove_∂_conv","'bin_rel_ext","hol1"];
=TEX

=IGN
set_merge_pcs["sets_ext", "'pair"];
set_merge_pcs["sets_ext", "'pair1"];
a(rewrite_tac bin_rel_defs THEN prove_tac nil);
=TEX

We save the test cases which allows us to rerun them later without
actually typing in the term.  This block of code is not used by the
normal test path.

We expect several tests to fail at present.  We keep track of them
to report the details at the end of the run.

=SML
val save_test_cases : (string * TERM) list ref = ref nil;
val expected_fails : (string * TERM) list ref = ref nil;

fun get_test_case (lab:string) = (
	(lab, lassoc3 (!save_test_cases) lab)
);

fun run_test (lab:string, t:TERM) = (
	diag_line("\n\n" ^ lab);
	push_goal(nil, t);
	a(TIME_T lab (prove_tac nil));
	repeat drop_main_goal
);

fun get_failed_test_labels () =
	map (fn (x,_) => x) (get_mt_results() drop (fn (_, x) => x));

fun run_failed_tests() = (
	let
		val fails = get_failed_test_labels();
		val e_fails = map (fn (x,_) => x) (!expected_fails);
	in
		map (run_test o get_test_case) (fails @ e_fails);
		()
	end
);
=TEX

The normal test path uses these next declarations.

=SML
local
	fun aux (lab:string) (tm:TERM) : bool = ((
			tac_proof((nil, tm), TIME_T lab (prove_tac nil));
			true
		) handle Fail _ => false
	);
in
	fun make_test_case (lab:string, tm:TERM, expected_success:bool)
			: string * (TERM -> bool) * TERM * bool = (
		save_test_cases := (lab, tm) :: (!save_test_cases);
		if expected_success then () else
			expected_fails := (lab, tm) :: (!expected_fails);
		(lab, aux lab, tm, expected_success)
	);
end;
=TEX

These terms are copied from page~96 of the Z~Reference Manual~\cite{Spivey92}.


=IGN
:> map(make_test_case);
val it = fn : (string * TERM * bool) list -> (string * (TERM -> bool) * TERM * bool) list

:> store_mt_results_show mt_run ;
val it = fn : (string * ('a -> TERM) * 'a * TERM) list -> (string * bool) list



=SML
store_mt_results_show mt_run (map make_test_case [
("96_01",	¨ x ç Dom R § ( ∂ y ∑ (x Ì y) ç R ) Æ , true ),
("96_02",	¨ y ç Ran R § ( ∂ x ∑ (x Ì y) ç R ) Æ , true ),

(* 		¨ Dom { x1 Ì y1; ... ; xn Ì yn } = { x1; ... ; xn } Æ
			Spivey's statement *)
("96_03a",	¨ Dom { } = { } Æ , true ),
("96_03b",	¨ Dom { x1 Ì y1 } = { x1 } Æ , true ),
("96_03c",	¨ Dom { x1 Ì y1; x2 Ì y2 } = { x1; x2 } Æ , true ),
("96_03d",	¨ Dom { x1 Ì y1; x2 Ì y2; x3 Ì y3 } = { x1; x2; x3 } Æ , true ),
("96_03e",	¨ Dom { x1 Ì y1; x2 Ì y2; x3 Ì y3; x4 Ì y4 } =
				{ x1; x2; x3; x4 } Æ , true ),
("96_03f",	¨ ( ∂ y ∑ ( x Ì y ) ç S1 ) § x ç Dom S1 Æ , true ),
("96_03g",	¨ Dom ( { x Ì y } ¿ xy_s ) = { x } ¿ Dom xy_s Æ , true ),

(* 		¨ Ran { x1 Ì y1; ... ; xn Ì yn } = { y1; ... ; yn } Æ
			Spivey's statement *)
("96_04a",	¨ Ran { } = { } Æ , true ),
("96_04b",	¨ Ran { x1 Ì y1 } = { y1 } Æ , true ),
("96_04c",	¨ Ran { x1 Ì y1; x2 Ì y2 } = { y1; y2 } Æ , true ),
("96_04d",	¨ Ran { x1 Ì y1; x2 Ì y2; x3 Ì y3 } = { y1; y2; y3 } Æ , true ),
("96_04e",	¨ Ran { x1 Ì y1; x2 Ì y2; x3 Ì y3; x4 Ì y4 } =
				{ y1; y2; y3; y4 } Æ , true ),
("96_04f",	¨ ( ∂ x ∑ ( x Ì y ) ç S1 ) § y ç Ran S1 Æ , true ),
("96_04g",	¨ Ran ( { x Ì y } ¿ xy_s ) = { y } ¿ Ran xy_s Æ , true ),

("96_06",	¨ Dom ( Q ¿ R ) = ( Dom Q ) ¿ ( Dom R ) Æ , true ),
("96_07",	¨ Ran ( Q ¿ R ) = ( Ran Q ) ¿ ( Ran R ) Æ , true ),
("96_08",	¨ Dom ( Q ° R ) Ä ( Dom Q ) ° ( Dom R ) Æ , true ),
("96_09",	¨ Ran ( Q ° R ) Ä ( Ran Q ) ° ( Ran R ) Æ , true ),

("96_10",	¨ Dom { } = { } Æ , true ),
("96_11",	¨ Ran { } = { } Æ , true )
]);
=TEX

These terms are copied from page~97 of the Z~Reference Manual~\cite{Spivey92}.

=SML
store_mt_results_show mt_run (map make_test_case [
("97_01",	¨ ( x Ì x') ç Id X § ( x ç X ± x = x' ) Æ , true ),
("97_02",	¨ ( x Ì z ) ç P ª Q § ( ∂ y ∑ (x, y) ç P ± (y, z) ç Q ) Æ , true ),
("97_03",	¨  P R_ª_R ( Q ª R ) = ( P ª Q ) ª R Æ , true ),

(*		¨ Id X ª P = P Æ
			False *)
("97_04a",	¨ Dom P Ä X ¥ Id X ª P = P Æ , false ),
("97_04b",	¨ Id X ª P = X Ú P Æ , false ),

(*		¨ P ª Id Y = P Æ
			False *)
("97_05a",	¨ Ran P  Ä Y ¥ P ª Id Y = P Æ , false ),
("97_05b",	¨ P R_ª_R Id Y = P í Y Æ , false ),
("97_06",	¨ Id V ª Id W = Id ( V ° W ) Æ , false )

(*		¨ (f o g) x = f(g x) Æ
			Spivey's statement, cannot be written here *)
]);
=TEX

The last item above, i.e.,
=INLINEFT
¨ (f o g) x = f(g x) Æ
=TEX
{} needs the functional application of relations, which is deferred to
the "fun\_rel" theory in~\cite{DS/FMU/IED/DTD072}.

These terms are copied from page~98 of the Z~Reference Manual~\cite{Spivey92}.

=SML
store_mt_results_show mt_run (map make_test_case [
("98_01",	¨ S Ú R = Id S ª R Æ , false ),
(*		¨ S Ú R = (S ∏ Y) ° R Æ
			Not enough detail *)
("98_02",	¨ Ran R Ä Y ¥ S Ú R = (S ∏ Y) ° R Æ , true ),
("98_03",	¨ R í T1 = R ª Id T1 Æ , false ),
(*		¨ R í T1 = R ° (X ∏ T1) Æ
			Not enough detail *)
("98_04",	¨ Dom R Ä X ¥ R í T1 = R ° (X ∏ T1) Æ , true ),
("98_05",	¨ Dom (S Ú R) = S ° Dom R Æ , true ),
("98_06",	¨ Ran (R í T1) = Ran R ° T1 Æ , true ),
("98_07",	¨ S Ú R Ä R Æ , true ),
("98_08",	¨ R í T1 Ä R Æ , true ),
("98_09",	¨ (S Ú R) í T1 = S Ú (R í T1) Æ , true ),
("98_10",	¨ S Ú (V Ú R) = (S ° V) Ú R Æ , true ),
("98_11",	¨ (R í T1) í W = R í (T1 ° W) Æ , true )
]);
=TEX

These terms are copied from page~99 of the Z~Reference Manual~\cite{Spivey92}.

=SML
store_mt_results_show mt_run (map make_test_case [
("99_01",	¨ Dom R Ä X ¥ S · R = (X \ S) Ú R Æ , true ),
("99_02",	¨ Ran R Ä Y ¥ R Å T1 = R í (Y \ T1) Æ , true ),
("99_03",	¨ (S Ú R) ¿ (S · R) = R Æ , true ),
("99_04",	¨ (R í T1) ¿ (R Å T1) = R Æ , true )
]);
=TEX

These terms are copied from page~100 of the Z~Reference Manual~\cite{Spivey92}.

=SML
store_mt_results_show mt_run (map make_test_case [
("100_01",	¨ (y Ì x) ç RÁ~Í § (x Ì y) ç R Æ , true ),
("100_02",	¨ (RÁ~Í)Á~Í = R Æ , true ),
("100_03",	¨ (Q ª R)Á~Í = RÁ~Í ª QÁ~Í Æ , true ),
("100_04",	¨ (Id V)Á~Í = Id V Æ , false ),
("100_05",	¨ Dom(RÁ~Í) = Ran R Æ , true ),
("100_06",	¨ Ran(RÁ~Í) = Dom R Æ , true ),
("100_07",	¨ Id(Dom R) Ä R ª RÁ~Í Æ , false ),
("100_08",	¨ Id(Ran R) Ä RÁ~Í ª R Æ , false )
]);
=TEX

These terms are copied from page~101 of the Z~Reference Manual~\cite{Spivey92}.

=SML
store_mt_results_show mt_run (map make_test_case [
("101_01",	¨ y ç R Image S § (∂ x ∑ x ç S ± (x, y) ç R) Æ , true ),
("101_02",	¨ R Image S = Ran(S Ú R) Æ , true ),
("101_03",	¨ Dom(Q ª R) = QÁ~Í Image (Dom R) Æ , true ),
("101_04",	¨ Ran(Q ª R) = R Image (Ran Q) Æ , true ),
("101_05",	¨ R Image (S ¿ T1) = R Image S ¿ R Image T1 Æ , true ),
("101_06",	¨ R Image (S ° T1) Ä R Image S ° R Image T1 Æ , true ),
("101_07",	¨ R Image (Dom R) = Ran R Æ , true ),
("101_08",	¨ Dom R = (Graph Fst) Image R Æ , false ),
("101_09",	¨ Ran R = (Graph Snd) Image R Æ , false )
]);
=TEX

These terms are copied from page~102 of the Z~Reference Manual~\cite{Spivey92}.

=SML
store_mt_results_show mt_run (map make_test_case [
("102_01",	¨ R ´ R = R Æ , true ),
("102_02",	¨ P ´ (Q ´ R) = (P ´ Q) ´ R Æ , false ),
("102_03",	¨ P = { } ´ P Æ , true ),
("102_04",	¨ P = P ´ { } Æ , true ),
("102_05",	¨ Dom(Q ´ R) = Dom Q ¿ Dom R Æ , false ),
("102_06",	¨ Dom Q ° Dom R = { } ¥ Q ´ R = Q ¿ R Æ , true ),
("102_07",	¨ V Ú (Q ´ R) = (V Ú Q) ´ (V Ú R) Æ , true ),
("102_08",	¨ (Q ´ R) í W Ä (Q í W) ´ (R í W) Æ , true )
(*		¨ x ç (Dom f) \ (Dom g) ¥ (f ´ g) x = f x Æ *)
(*		¨ x ç Dom g ¥ (f ´ g) x = g x Æ *)
]);
=TEX

These terms are copied from page~103 of the Z~Reference Manual~\cite{Spivey92}.

=GFT
val terms103 = [
("103_01",	¨ r Ä rÁ+Í Æ , true ),
("103_02",	¨ rÁ+Í ª rÁ+Í Ä rÁ+Í Æ , true ),
("103_03",	¨ r Ä q ± q ª q Ä q ¥ rÁ+Í Ä q Æ , true ),
("103_04",	¨ Id X Ä rÁ*Í Æ , true ),
("103_05",	¨ r Ä rÁ*Í Æ , true ),
("103_06",	¨ rÁ*Í ª rÁ*Í = rÁ*Í Æ , true ),
("103_07",	¨ Id X Ä q ± r Ä q ± q ª q Ä q ¥ rÁ*Í Ä q Æ , true ),
("103_08",	¨ rÁ*Í = rÁ+Í ¿ Id x Æ , true ),
("103_09",	¨ rÁ*Í = ( r ¿ Id x) Á+Í Æ , true ),
("103_10",	¨ rÁ+Í = r ª rÁ*Í Æ , true ),
("103_11",	¨ rÁ+Í = rÁ*Í ª r Æ , true ),
("103_12",	¨ ( rÁ+Í )Á+Í = rÁ+Í Æ , true ),
("103_13",	¨ ( rÁ*Í )Á*Í = rÁ*Í Æ , true ),
("103_14",	¨ s Ä rÁ*Í Image s Æ , true ),
("103_15",	¨ r Image ( rÁ*Í Image s ) Ä rÁ*Í Image s Æ , true ),
("103_16",	¨ s Ä t ± r Image t Ä t ¥ rÁ*Í Image s Ä t Æ , true )
];

store_mt_results_show mt_run
	(map make_test_case terms103);
=TEX

\newpage
\section{END OF TESTS}

=SML
diag_string "\n\n\
	\We do not expect all of the rules from Spivey's Z Reference \
	\Manual to be proven automatically by the proof context.  The \
	\module tests here accomodate this view by having a boolean to \
	\show the expected success or otherwise of the proof.  Tests \
	\that unexpectedly fail to be proven are considered failed. \
	\Less obviously, tests that are unexpectedly proven are \
	\also considered failed.\n\n";

("Expected proof failures", !expected_fails);

diag_string(
	(string_of_int(length(!expected_fails))) ^
	" expected proof failures which are not counted as failing tests below.");

("Number of failing tests",
	length(map(fn (x,_) => x)
		(get_mt_results() drop (fn (_, x) => x))));
diag_string(summarize_mt_results());
=TEX

\end{document}
