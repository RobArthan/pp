=IGN
********************************************************************************
imp073.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
%  $Id: imp073.doc,v 1.10 2004/01/16 13:04:10 rda Exp $ %Z%
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
\TPPtitle{Implementation for the Theory of Finite Sets}  %% Mandatory field
\def\TPPheadtitle{Implementation for the Theory \cr
of Functional Relations}
\TPPref{DS/FMU/IED/IMP072}  %% Mandatory field
\def\SCCSversion{$Revision: 1.10 $
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2004/01/16 13:04:10 $ %
}}  %% Mandatory field
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{R.B.Jones & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.Arthan & FST Team Leader}
\TPPabstract{This document creates the theory of finite sets.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Project Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item[Issues 1.1--1.5]
First drafts.
\item[Issue 1.6]
Proved consistency of {\it Max} and {\it Min}.

This is the first draft of the document.

\item[Issue 1.7] Copyright and banner updates for open source release.
\item[Issue 1.8] PPHol-specific updates for open source release
\item[Issue 1.9] Added finite set induction (theorem and tactic) and some basic theorems about finiteness.
\item[Issue 1.10] Added theorems on sizes of finite sets.
\end{description}
\item[Issue 1.10] Fixed bug in use of assumptions by finite set induction tactic.
\subsection{Changes Forecast}

\section{GENERAL}
\subsection{Scope}
This document contains an implementation of the theory of finite sets similar to that presented in section 4.4. of \cite{spivey88}.
The design is in \cite{DS/FMU/IED/DTD073}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains an implementation of the theory of finite sets.
\subsubsection{Dependencies}
This document takes its signature from \cite{DS/FMU/IED/DTD073}.
\subsubsection{Deficiencies}
None known.
\subsubsection{Possible Enhancements}
None known.
\section{THE THEORY ``finset''}
=SML
structure €FinSetTheory› : FinSetTheory = struct
val _ = open_theory "fin_set";
val €Ó_def› = get_defn"-""Ó";
val €finite_def› = get_defn"-""Finite";
val €Ê_def› = get_defn"-""Ê";
val €Êâ1_def› = get_defn"-""Êâ1";
val €min_def› = get_defn"-""Min";
val €max_def› = get_defn"-""Max";
val €size_def› = get_defn"-""Size";
val €iter_def› = get_defn"-""Iter";
val €ü_def› = get_defn"-""ü";
val €û_def› = get_defn"-""û";
=TEX
See \cite{spivey89} section 4.4.
\subsection{Theorems and Tactics}
%%%%
%%%%

=SML
val _ = (
	push_consistency_goal¨MinÆ;
	a prove_∂_tac;
	a(REPEAT strip_tac);
	a(cases_tac¨a' = {}Æ THEN1 asm_rewrite_tac[]);
	a(POP_ASM_T (PC_T1 "hol2" strip_asm_tac));
	a(POP_ASM_T ante_tac THEN cov_induction_tac ¨xÆ);
	a(cases_tac¨∂y∑y < x ± y ç a'Æ);
	(* *** Goal "1" *** *)
	a(all_asm_fc_tac[]);
	a(REPEAT strip_tac THEN ∂_tac¨Min''Æ THEN REPEAT strip_tac);
	a(all_asm_fc_tac[]);
	(* *** Goal "2" *** *)
	a(REPEAT strip_tac THEN ∂_tac¨xÆ THEN REPEAT strip_tac);
	a(all_asm_fc_tac[]);
	a(PC_T1"lin_arith" asm_prove_tac[]);
	save_consistency_thm¨MinÆ(pop_thm());
	()
);
=TEX
%%%%
%%%%

=SML
val _ = (
	push_consistency_goal¨MaxÆ;
	a prove_∂_tac;
	a(REPEAT strip_tac);
	a(cases_tac¨∂y∑µj∑j ç a' ¥ j º yÆ THEN_TRY asm_rewrite_tac[]);
	a(POP_ASM_T ante_tac THEN cov_induction_tac¨yÆ THEN REPEAT strip_tac);
	a(cases_tac¨∂z∑z < y ± (µ j∑ j ç a' ¥ j º z)Æ);
	(* *** Goal "1" *** *)
	a(all_asm_fc_tac[]);
	a(REPEAT strip_tac THEN ∂_tac¨Max''Æ THEN REPEAT strip_tac);
	a(all_asm_fc_tac[]);
	(* *** Goal "2" *** *)
	a(∂_tac¨yÆ THEN REPEAT strip_tac);
	a(all_asm_fc_tac[]);
	a(PC_T1"lin_arith" asm_prove_tac[]);
	save_consistency_thm¨MaxÆ(pop_thm());
	()
);
=TEX
%%%%
%%%%

=SML
val €finite_induction_thm› = save_thm("finite_induction_thm", (
push_goal([], ¨
		µp∑	p {} ± (µa x∑a ç Finite ± p a ± ≥x ç a ¥ p({x} ¿ a))
		¥ 	µa∑a ç Finite ¥ p a
Æ);
a(REPEAT strip_tac);
a(asm_ante_tac¨a ç FiniteÆ);
a(rewrite_tac[get_spec¨FiniteÆ]);
a(REPEAT strip_tac);
a(spec_nth_asm_tac 1 ¨{b | b ç Finite ± p b}Æ);
(* *** Goal "1" *** *)
a(swap_asm_concl_tac ¨≥ {} ç FiniteÆ);
a(rewrite_tac[get_spec¨FiniteÆ]);
a(PC_T "hol1" (REPEAT strip_tac));
(* *** Goal "2" *** *)
a(swap_asm_concl_tac ¨a' ç FiniteÆ);
a(asm_ante_tac ¨≥ {x} ¿ a' ç FiniteÆ);
a(rewrite_tac[get_spec¨FiniteÆ]);
a(PC_T "hol1" (contr_tac));
a(spec_nth_asm_tac 1 ¨sÆ);
(* *** Goal "2.1" *** *)
a(list_spec_nth_asm_tac 5 [¨a''Æ, ¨x'Æ]);
(* *** Goal "2.2" *** *)
a(list_spec_nth_asm_tac 4 [¨a'Æ, ¨xÆ]);
(* *** Goal "3" *** *)
a(swap_asm_concl_tac ¨≥ p ({x} ¿ a')Æ);
a(cases_tac¨x ç a'Æ);
(* *** Goal "3.1" *** *)
a(LEMMA_T¨{x} ¿ a' = a'Æ asm_rewrite_thm_tac);
a(PC_T "hol1" (REPEAT strip_tac));
a(asm_rewrite_tac[]);
(* *** Goal "3.2" *** *)
a(list_spec_nth_asm_tac 6 [¨a'Æ, ¨xÆ]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
local
val €a_ç_finite› = ¨a ç FiniteÆ;
val €f_i_tac› = gen_induction_tac1 finite_induction_thm;
in
fun €finite_induction_tac› (tm : TERM) : TACTIC = (
	if not (is_var tm)
	then term_fail "finite_induction_tac" 73001 [tm]
	else ( fn(asms, conc) =>
	let	val asm = find asms
			(fn t => ((term_match t a_ç_finite; true) handle Fail _ => false)
				andalso hd(snd(strip_app t)) ~=$ tm)
			handle Fail _ => fail "finite_induction_tac" 73002 [];
	in	if not (is_free_in tm conc)
			then term_fail "finite_induction_tac" 73003 [tm]
		else if any (asms drop (fn t => t =$ asm)) (is_free_in tm)
			then term_fail "finite_induction_tac" 73004 [tm]
		else	(asm_ante_tac asm THEN f_i_tac) (asms, conc)
	end
	)
);
end;
=TEX
%%%%
%%%%

=SML
val €empty_finite_thm› = save_thm("empty_finite_thm", (
push_goal([], ¨{} ç FiniteÆ);
a(rewrite_tac[get_spec¨FiniteÆ]);
a(PC_T "hol1" (REPEAT strip_tac));
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val €singleton_¿_finite_thm› = save_thm("singleton_¿_finite_thm", (
push_goal([], ¨µ a x∑ a ç Finite ¥ ({x} ¿ a) ç FiniteÆ);
a(rewrite_tac[get_spec¨FiniteÆ] THEN (PC_T "hol1" (REPEAT strip_tac)));
a(spec_nth_asm_tac 3 ¨sÆ);
(* *** Goal "1" *** *)
a(list_spec_nth_asm_tac 3 [¨a'Æ, ¨x'Æ]);
(* *** Goal "2" *** *)
a(list_spec_nth_asm_tac 2 [¨aÆ, ¨xÆ]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val €Ä_finite_thm› = save_thm("Ä_finite_thm", (
push_goal([], ¨µa b∑ a ç Finite ± b Ä a
	¥		b ç FiniteÆ);
a(REPEAT strip_tac);
a(POP_ASM_T ante_tac THEN intro_µ_tac(¨bÆ, ¨bÆ));
a(finite_induction_tac ¨aÆ THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a((lemma_tac¨b = {}Æ THEN1 PC_T1 "sets_ext" asm_prove_tac[]) THEN all_var_elim_asm_tac1);
a(rewrite_tac[empty_finite_thm]);
(* *** Goal "2" *** *)
a(cases_tac¨b Ä aÆ THEN1 all_asm_fc_tac[]);
a(lemma_tac¨b = {x} ¿ (b \ {x})Æ THEN1
	(PC_T1 "sets_ext" asm_prove_tac[] THEN asm_fc_tac[] THEN all_var_elim_asm_tac));
a(POP_ASM_T once_rewrite_thm_tac THEN bc_thm_tac singleton_¿_finite_thm);
a(GET_NTH_ASM_T 4 bc_thm_tac);
a(PC_T1 "sets_ext" asm_prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val €¿_finite_thm›  = save_thm ("¿_finite_thm",  (
set_goal([], ¨µa b ∑ a ç Finite ± b ç Finite ¥ a ¿ b ç FiniteÆ);
a(REPEAT strip_tac);
a(finite_induction_tac¨aÆ THEN1 asm_rewrite_tac[empty_finite_thm]);
a(rewrite_tac[pc_rule1 "sets_ext1" prove_rule[]¨µA B C∑(A ¿ B) ¿ C = A ¿ B ¿ CÆ]);
a(bc_thm_tac singleton_¿_finite_thm THEN REPEAT strip_tac);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val €°_finite_thm›  = save_thm ("°_finite_thm",  (
set_goal([], ¨µa b ∑ a ç Finite ≤ b ç Finite ¥ a ° b ç FiniteÆ);
a(REPEAT strip_tac);
(* *** Goal "1" *** *)
a(bc_thm_tac Ä_finite_thm THEN ∂_tac¨aÆ THEN REPEAT strip_tac);
a(PC_T1 "sets_ext1" prove_tac[]);
(* *** Goal "2" *** *)
a(bc_thm_tac Ä_finite_thm THEN ∂_tac¨bÆ THEN REPEAT strip_tac);
a(PC_T1 "sets_ext1" prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val €finite_distinct_elems_thm›  = save_thm ("finite_distinct_elems_thm",  (
set_goal([], ¨µa∑a ç Finite ¥ ∂list∑list ç Distinct ± Elems list = aÆ);
a(REPEAT strip_tac);
a(finite_induction_tac ¨aÆ THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(∂_tac¨[]Æ THEN asm_rewrite_tac[elems_def, distinct_def] THEN PC_T1 "sets_ext1" prove_tac[]);
(* *** Goal "2" *** *)
a(∂_tac¨Cons x listÆ THEN all_var_elim_asm_tac1 THEN asm_rewrite_tac[elems_def, distinct_def]);
pop_thm()
));
=TEX
%%%%
%%%%
=SML
val €length_˘_º_thm›  = save_thm ("length_˘_º_thm",  (
set_goal([], ¨µlist a∑Length( list ˘ a) º Length listÆ);
a(REPEAT strip_tac);
a(list_induction_tac ¨listÆ THEN rewrite_tac[length_def, ˘_def]);
a(REPEAT strip_tac THEN cases_tac¨x ç aÆ THEN asm_rewrite_tac[length_def]);
a(PC_T1 "lin_arith" asm_prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%
=SML
val €length_˘_less_thm›  = save_thm ("length_˘_less_thm",  (
set_goal([], ¨µlist a∑≥Elems list \ a = {} ¥ #(list ˘ a) < # listÆ);
a(µ_tac);
a(lemma_tac¨∂n ∑n = #listÆ THEN1 prove_∂_tac);
a(POP_ASM_T ante_tac THEN   intro_µ_tac(¨listÆ, ¨listÆ));
a(induction_tac ¨nÆ);
(* *** Goal "1" *** *)
a(strip_tac);
a(strip_asm_tac(µ_elim¨listÆ list_cases_thm) THEN all_var_elim_asm_tac1
	THEN rewrite_tac[length_def, elems_def]);
(* *** Goal "2" *** *)
a(strip_tac);
a(strip_asm_tac(µ_elim¨listÆ list_cases_thm) THEN all_var_elim_asm_tac1
	THEN rewrite_tac[length_def]);
a(REPEAT strip_tac);
a(POP_ASM_T ante_tac THEN rewrite_tac[elems_def]
	THEN PC_T1 "sets_ext1"  REPEAT strip_tac);
(* *** Goal "2.1" *** *)
a(all_var_elim_asm_tac1 THEN asm_rewrite_tac[length_def, ˘_def]);
a(LEMMA_T ¨#(list2 ˘ a) º #list2Æ ante_tac THEN1 rewrite_tac[length_˘_º_thm]);
a(PC_T1 "lin_arith" prove_tac[]);
(* *** Goal "2.2" *** *)
a(cases_tac¨x ç aÆ THEN asm_rewrite_tac[length_def, ˘_def]);
(* *** Goal "2.2.1" *** *)
a(lemma_tac¨≥Elems list2 \ a = {}Æ THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
a(all_asm_fc_tac[]);
(* *** Goal "2.2.2" *** *)
a(lemma_tac¨≥Elems list2 \ a = {}Æ THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
a(all_asm_fc_tac[]);
a(PC_T1 "lin_arith" asm_prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%
=SML
val €elems_˘_thm›  = save_thm ("elems_˘_thm",  (
set_goal([], ¨µlist a∑Elems( list ˘ a) = Elems list ° aÆ);
a(REPEAT strip_tac);
a(list_induction_tac ¨listÆ THEN rewrite_tac[elems_def, ˘_def]);
a(REPEAT strip_tac THEN cases_tac¨x ç aÆ THEN asm_rewrite_tac[elems_def]
	THEN PC_T1 "sets_ext1" asm_prove_tac[]);
pop_thm()
));
=TEX
=TEX
%%%%
%%%%

=SML
val €distinct_length_º_thm›  = save_thm ("distinct_length_º_thm",  (
set_goal([], ¨µlist1 list2 ∑list1 ç Distinct ± Elems list1 = Elems list2 ¥ #list1 º #list2Æ);
a(REPEAT µ_tac);
a(lemma_tac¨∂n ∑n = #list1Æ THEN1 prove_∂_tac);
a(POP_ASM_T ante_tac THEN
	rewrite_tac[taut_rule¨µp1 p2 p3 ∑(p1 ¥ p2 ¥ p3) § (p1 ± p2 ¥ p3)Æ]);
a( intro_µ_tac(¨list2Æ, ¨list2Æ) THEN   intro_µ_tac(¨list1Æ, ¨list1Æ));
a(induction_tac ¨nÆ);
(* *** Goal "1" *** *)
a(strip_tac);
a(strip_asm_tac(µ_elim¨list1Æ list_cases_thm) THEN all_var_elim_asm_tac1
	THEN rewrite_tac[length_def, elems_def]);
(* *** Goal "2" *** *)
a(REPEAT µ_tac);
a(strip_asm_tac(µ_elim¨list1Æ list_cases_thm) THEN all_var_elim_asm_tac1
	THEN rewrite_tac[length_def, elems_def, distinct_def]);
a(REPEAT strip_tac);
a(lemma_tac¨Elems list2' = Elems(list2 ˘ ~ {x})Æ);
(* *** Goal "2.1" *** *)
a(rewrite_tac[elems_˘_thm] THEN POP_ASM_T ante_tac);
a(PC_T1 "sets_ext1" rewrite_tac[complement_def]);
a(prove_tac[]);
a(contr_tac THEN all_var_elim_asm_tac);
(* *** Goal "2.2" *** *)
a(lemma_tac¨# list2' º #(list2 ˘ ~ {x})Æ THEN1
	DROP_NTH_ASM_T 6 bc_thm_tac THEN REPEAT strip_tac);
a(POP_ASM_T ante_tac THEN LEMMA_T ¨#(list2 ˘ ~{x}) < #list2Æ ante_tac THEN_LIST
	[bc_thm_tac length_˘_less_thm, PC_T1 "lin_arith" prove_tac[]]);
a(PC_T1 "sets_ext1" rewrite_tac[complement_def]);
a(REPEAT strip_tac THEN rewrite_tac[]);
a(∂_tac¨xÆ THEN1 DROP_NTH_ASM_T 2 (rewrite_thm_tac o eq_sym_rule));
a(PC_T1 "sets_ext1" prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val €distinct_size_length_thm›  = save_thm ("distinct_size_length_thm",  (
set_goal([], ¨µlist a ∑list ç Distinct ± Elems list = a ¥ #a = #listÆ);
a(REPEAT strip_tac);
a(rewrite_tac[size_def]);
a(bc_thm_tac (get_spec ¨MinÆ) THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(∂_tac¨listÆ THEN REPEAT strip_tac);
(* *** Goal "2" *** *)
a(all_var_elim_asm_tac1);
a(bc_thm_tac distinct_length_º_thm);
a(asm_rewrite_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val €size_empty_thm›  = save_thm ("size_empty_thm",  (
set_goal([], ¨#{} = 0Æ);
a(rewrite_tac[size_def]);
a(bc_thm_tac (get_spec ¨MinÆ) THEN REPEAT strip_tac);
a(∂_tac¨[]Æ THEN rewrite_tac[elems_def, length_def]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val €size_singleton_¿_thm›  = save_thm ("size_singleton_¿_thm",  (
set_goal([], ¨µx a ∑ a ç Finite ± ≥x ç a ¥ #({x} ¿ a) = #a + 1Æ);
a(REPEAT strip_tac THEN all_fc_tac [finite_distinct_elems_thm]);
a(ALL_FC_T rewrite_tac[distinct_size_length_thm]);
a(lemma_tac¨Cons x list ç DistinctÆ THEN1
	(all_var_elim_asm_tac1 THEN asm_rewrite_tac[distinct_def]));
a(lemma_tac¨Elems(Cons x list) = {x} ¿ aÆ THEN1 asm_rewrite_tac[elems_def]);
a(ALL_FC_T rewrite_tac[distinct_size_length_thm]);
a(rewrite_tac[length_def]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val €size_singleton_thm›  = save_thm ("size_singleton_thm",  (
set_goal([], ¨µx ∑ #{x} = 1Æ);
a(REPEAT strip_tac);
a(LEMMA_T ¨#{x} = #[x]Æ rewrite_thm_tac  THEN_LIST
	[id_tac, rewrite_tac[length_def]]);
a(bc_thm_tac distinct_size_length_thm);
a(rewrite_tac[elems_def, distinct_def]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val €size_¿_thm›  = save_thm ("size_¿_thm",  (
set_goal([], ¨µa b ∑ a ç Finite ± b ç Finite ¥ #(a ¿ b) + #(a ° b) = #a + #bÆ);
a(REPEAT strip_tac);
a(finite_induction_tac¨aÆ THEN1 rewrite_tac[size_empty_thm]);
a(lemma_tac¨a ¿ b ç FiniteÆ THEN1 all_fc_tac[¿_finite_thm]);
a(cases_tac¨≥x ç bÆ);
(* *** Goal "1" *** *)
a(LEMMA_T ¨≥x ç a ¿ bÆ asm_tac THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
a(rewrite_tac[pc_rule1 "sets_ext1" prove_rule[]¨µA B C∑(A ¿ B) ¿ C = A ¿ B ¿ CÆ]);
a(ALL_FC_T rewrite_tac[size_singleton_¿_thm]);
a(rewrite_tac[pc_rule1"lin_arith" prove_rule[]¨µi j∑(i + 1) + j = 1 + i + jÆ]);
a(LEMMA_T¨({x} ¿ a) ° b = a ° bÆ asm_rewrite_thm_tac);
a(POP_ASM_T ante_tac THEN PC_T1 "sets_ext1" prove_tac[]);
(* *** Goal "2" *** *)
a(LEMMA_T¨({x} ¿ a) ¿ b = a ¿ b ± ({x} ¿ a) ° b = {x} ¿ a ° bÆ asm_rewrite_thm_tac
	THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
a(lemma_tac¨a ° b ç FiniteÆ THEN1 ALL_FC_T rewrite_tac[°_finite_thm]);
a(LEMMA_T ¨≥x ç a ° bÆ asm_tac THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
a(ALL_FC_T rewrite_tac[size_singleton_¿_thm]);
a(rewrite_tac[pc_rule1"lin_arith" prove_rule[]¨µi j∑(i + 1) + j = 1 + i + j ± i + j + 1 = 1 + i + jÆ]);
a(REPEAT strip_tac);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val €size_0_thm›  = save_thm ("size_0_thm",  (
set_goal([], ¨µa ∑ a ç Finite ¥ (#a = 0 § a = {})Æ);
a(REPEAT strip_tac THEN_TRY (all_var_elim_asm_tac THEN rewrite_tac[size_empty_thm]));
a(POP_ASM_T ante_tac THEN finite_induction_tac ¨aÆ THEN
	ALL_FC_T rewrite_tac[size_singleton_¿_thm]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val €size_1_thm›  = save_thm ("size_1_thm",  (
set_goal([], ¨µa ∑ a ç Finite ¥ (#a = 1 § ∂x∑a = {x})Æ);
a(REPEAT strip_tac THEN_TRY (all_var_elim_asm_tac1 THEN rewrite_tac[size_singleton_thm]));
a(POP_ASM_T ante_tac THEN finite_induction_tac ¨aÆ);
(* *** Goal "1" *** *)
a(rewrite_tac[size_empty_thm]);
(* *** Goal "2" *** *)
a(ALL_FC_T rewrite_tac[size_singleton_¿_thm]);
a(ALL_FC_T1 fc_§_canon  rewrite_tac[size_0_thm] THEN REPEAT strip_tac THEN all_var_elim_asm_tac1);
a(∂_tac¨xÆ THEN rewrite_tac[]);
(* *** Goal "3" *** *)
a(ALL_FC_T rewrite_tac[size_singleton_¿_thm]);
a(asm_rewrite_tac[size_singleton_thm]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val €ﬁ_finite_thm›  = save_thm ("ﬁ_finite_thm",  (
set_goal([], ¨µu ∑
	u ç Finite
±	u Ä Finite
¥	ﬁu ç FiniteÆ);
a(REPEAT strip_tac THEN POP_ASM_T (ante_tac o pc_rule1"sets_ext1" rewrite_rule[]));
a(finite_induction_tac¨uÆ);
(* *** Goal "1" *** *)
a(rewrite_tac[empty_finite_thm]);
(* *** Goal "2" *** *)
a(REPEAT strip_tac);
a(spec_nth_asm_tac 1 ¨x'Æ);
(* *** Goal "3" *** *)
a(REPEAT strip_tac);
a(spec_nth_asm_tac 1 ¨xÆ);
a(rewrite_tac[pc_rule1"sets_ext1" prove_rule[]¨µa b∑ﬁ(a ¿ b) = ﬁa ¿ ﬁ bÆ]);
a(LEMMA_T¨ﬁ{x} =xÆ rewrite_thm_tac THEN1 PC_T1 "sets_ext1" prove_tac[]);
(* *** Goal "3.1" *** *)
a(∂_tac¨xÆ THEN REPEAT strip_tac);
(* *** Goal "3.2" *** *)
a(bc_thm_tac ¿_finite_thm THEN REPEAT strip_tac);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val €pigeon_hole_thm1›  = snd ("pigeon_hole_thm1",  (
set_goal([], ¨µu ∑
	u ç Finite
±	(µa∑a ç u ¥ a ç Finite ± #a º 1)
¥	#(ﬁu) º #uÆ);
a(REPEAT strip_tac THEN POP_ASM_T ante_tac);
a(finite_induction_tac¨uÆ);
(* *** Goal "1" *** *)
a(rewrite_tac[size_empty_thm]);
(* *** Goal "2" *** *)
a(REPEAT strip_tac);
a(spec_nth_asm_tac 1 ¨u'Æ);
(* *** Goal "3" *** *)
a(REPEAT strip_tac);
a(spec_nth_asm_tac 1 ¨u'Æ);
(* *** Goal "4" *** *)
a(rename_tac[(¨xÆ, "a")] THEN REPEAT strip_tac);
a(rewrite_tac[pc_rule1"sets_ext1" prove_rule[]¨µa b∑ﬁ(a ¿ b) = ﬁa ¿ ﬁ bÆ]);
a(LEMMA_T¨ﬁ{a} =aÆ rewrite_thm_tac THEN1 PC_T1 "sets_ext1" prove_tac[]);
(* *** Goal "4.1" *** *)
a(∂_tac¨aÆ THEN REPEAT strip_tac);
(* *** Goal "4.2" *** *)
a(ALL_FC_T rewrite_tac[size_singleton_¿_thm]);
a(lemma_tac ¨u Ä FiniteÆ THEN1
	(PC_T1 "sets_ext1"  REPEAT strip_tac THEN all_asm_fc_tac[]));
a(spec_nth_asm_tac 2 ¨aÆ);
a(all_fc_tac[ﬁ_finite_thm]);
a(lemma_tac¨#a = 0 ≤ #a = 1Æ THEN1 PC_T1 "lin_arith" asm_prove_tac[]
	THEN POP_ASM_T ante_tac);
(* *** Goal "4.2.1" *** *)
a(ALL_FC_T1 fc_§_canon  rewrite_tac[size_0_thm]);
a(REPEAT strip_tac THEN  ALL_FC_T asm_rewrite_tac[size_singleton_¿_thm]);
a(PC_T1 "lin_arith" asm_prove_tac[]);
(* *** Goal "4.2.2" *** *)
a(ALL_FC_T1 fc_§_canon  rewrite_tac[size_1_thm]);
a(REPEAT strip_tac THEN cases_tac¨a Ä ﬁuÆ);
(* *** Goal "4.2.2.1" *** *)
a(ALL_FC_T rewrite_tac[pc_rule1"sets_ext1" prove_rule[]¨µb∑a Ä b ¥ a ¿ b = bÆ]);
a(PC_T1 "lin_arith" asm_prove_tac[]);
(* *** Goal "4.2.2.2" *** *)
a(all_var_elim_asm_tac1);
a(ALL_FC_T (MAP_EVERY asm_tac) [pc_rule1"sets_ext1" prove_rule[]¨µb∑≥ {x} Ä b ¥ ≥x ç bÆ]);
a(ALL_FC_T asm_rewrite_tac[size_singleton_¿_thm]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val €pigeon_hole_thm›  = save_thm ("pigeon_hole_thm",  (
set_goal([], ¨µu ∑
	u ç Finite
±	u Ä Finite
±	#u < #(ﬁu)
¥	∂a∑a ç u ± #a > 1Æ);
a(PC_T "sets_ext1" contr_tac);
a(lemma_tac¨µ a∑ a ç u ¥ a ç Finite ± # a º 1Æ THEN1
	(REPEAT strip_tac THEN1 all_asm_fc_tac[]));
(* *** Goal "1" *** *)
a(spec_nth_asm_tac 2 ¨aÆ THEN PC_T1 "lin_arith" asm_prove_tac[]);
(* *** Goal "2" *** *)
a(all_fc_tac[pigeon_hole_thm1] THEN PC_T1 "lin_arith" asm_prove_tac[]);
pop_thm()
));
=TEX
\subsection{Derived Definitions}
\subsection{End of Theory ``finset''}
\section{CONVERSIONS}
\section{PROOF CONTEXTS}
The extensional context is good for proving results involving the operators introduced in this theory.
=GFT
val pos_bits = 
	[(¨x ç $SetComp yÆ, ç_comp_conv),
	(¨x ç $Insert y zÆ, ç_enum_set_conv)] @
	(cthm_eqn_cxt initial_rw_canon ç_in_clauses) @
	(cthm_eqn_cxt initial_rw_canon sets_ext_clauses);
val neg_bits = map (mk_≥ ** RAND_C) pos_bits;
val new_bits = pos_bits @ neg_bits;
val rw_eqn_cxt =
	(¨x ç $SetComp yÆ, ç_comp_conv) ::
	(¨x ç $Insert y zÆ, ç_enum_set_conv) ::
	(flat(map (cthm_eqn_cxt initial_rw_canon) [ç_in_clauses,sets_ext_clauses]));
val dummy = (delete_pc "sets_ext" handle ? => ());
val dummy = new_pc "sets_ext";
val dummy = merge_pcs ["pair"] "sets_ext";
val dummy = ((set_st_eqn_cxt new_bits "sets_ext");
		(set_sg_eqn_cxt new_bits "sets_ext");
		(set_rw_eqn_cxt rw_eqn_cxt "sets_ext"));
=TEX
The algebraic context is for more general use where obvious simplifications are required.
=GFT
val pos_bits = 
	[(¨x ç $SetComp yÆ, ç_comp_conv),
	(¨x ç $Insert y zÆ, ç_enum_set_conv)] @
	(cthm_eqn_cxt initial_rw_canon ç_in_clauses);
val neg_strips = map (mk_≥ ** RAND_C) pos_bits;
val new_strips = pos_bits @ neg_strips;
val new_rw =
	(¨x ç $SetComp yÆ, ç_comp_conv) ::
	(¨x ç $Insert y zÆ, ç_enum_set_conv) ::
	(flat(map (cthm_eqn_cxt initial_rw_canon)
	[complement_clauses, ¿_clauses, °_clauses, set_dif_clauses,
	Ä_clauses, †_clauses, ﬁ_clauses, •_clauses, _clauses]));
val dummy = (delete_pc "sets_alg" handle ? => ());
val dummy = new_pc "sets_alg";
val dummy = merge_pcs ["pair"] "sets_alg";
val dummy = ((set_st_eqn_cxt new_strips "sets_alg");
		(set_sg_eqn_cxt new_strips "sets_alg");
		(set_rw_eqn_cxt new_rw "sets_alg"));
=TEX
=SML
end; (* of structure FinSetTheory *)
open FinSetTheory;
=TEX
\newpage
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}


