=IGN
********************************************************************************
usr013B.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
% usr013B.doc $Revision: 2.6 $ $RCSfile: usr013B.doc,v $ $Date: 2002/10/18 15:26:07 $
% COPYRIGHT (c) Lemma 1 Ltd.
\ignore{
=SML
(* usr013B.sml $Revision: 2.6 $ $RCSfile: usr013B.doc,v $ $Date: 2002/10/18 15:26:07 $
   COPYRIGHT (c) Lemma 1 Ltd. *)
=TEX
}

\chapter{THE {\hol} {\type} SYSTEM}

\section{Introduction}

The {\Product-HOL} language provides a notation for making assertions about values in some domain of discourse.
The values in this domain of discourse are abstract entities suitable for use in mathematical models.

In assertions in {\hol}, {\term}s are used to denote values in the domain of discourse.
Each {\term} used must be syntactically well formed, and must also be Ûwell\ typedÝ; {\Product} will check this automatically and report any problems to the user.
A {\term} is {\welltyped} if there exists an assignment of {\type}s to the {\term} and its sub-{\term}s which is consistent with the {\hol} {\type} inference rules described below.

Each {\type} denotes a set of values.
The semantics of {\type}s and {\term}s in {\hol} are related so that the denotation of a {\welltyped} {\term} is a value which is a member of the denotation of its {\type}.

In general, {\type}s in {\hol} may also contain {\it TYPE variables}.
In this case they are known as {\it polymorphic} {\type}s and should be thought of as denoting a family of {\it monomorphic} {\type}s.

In this chapter a thorough and systematic (though informal) description of the {\type} system is given.
This, on a smaller scale, provides a model for the structure of the {\term} language treated in the next chapter.

To give a full account of the
=INLINEFT
ÛTYPEÝ
=TEX
\ system we provide:

\begin{itemize}
\item
An {\it abstract syntax} giving the logical structure of a notation for describing {\type}s.
This corresponds to the primitive facilities available in the metalanguage for manipulating {\type}s.
\item
A {\it concrete syntax} providing a specific way of writing {\type}s for submission to {\Product} or for presentation in documents.
\item
A semantics indicating informally how the set denoted by any {\type} may be determined.
\end{itemize}

These suffice to define {\type}s as completely as they can be without discussing how they relate to {\term}s.
The chapter goes on to describe the principal non-primitive facilities available in {\Product} for performing computations with {\type}s.

\section{The Abstract Syntax of {\type}s}

There are just two primitive ways of constructing a {\type}.
The first is the construction of a ÛTYPE\ variableÝ, which simply has a {\it name}.
A {\it TYPE variable} denotes an arbitrary set.
The second is the construction of a {\type} using a ÛTYPE\ constructorÝ.
A {\typeconstructor} also has a name, normally one which has previously been declared for the purpose with an associated arity.
The construction is performed on the {\typeconstructor} (which may be thought of as a function from one or more {\type}s yielding another {\type}) together with a number of {\type}s to which the constructor is applied.
A special case of a {\typeconstructor} is a 0-ary {\typeconstructor}.  This special case encompasses some of the most familiar {\type}s such as the {\type}
=INLINEFT
”BOOL®
=TEX
\ which denotes the set of truth values (
=INLINEFT
¬{T,F}®
=TEX
), and the {\type}
=INLINEFT
”î®
=TEX
\ which denotes the set of natural numbers (the positive whole numbers).

The abstract syntax may be described by giving the names and {\type}s in the metalanguage standard ML of the functions corresponding to the primitive {\typeconstructor}s:

=SML
Ûmk_vartypeÝ	: string			-> TYPE;
Ûmk_ctypeÝ	: string * TYPE list	-> TYPE;
=TEX

\section{The Concrete Syntax of {\type}s}

{\Product} provides a parser for {\hol} {\type}s both as free standing standard ML values (of type {\type}) and as {\it TYPE casts} disambiguating the {\type} of a {\term}.

The following consists of a simplified description of the concrete syntax of {\type}s, sufficient for the examples which follow, and sufficient to enter any well formed {\type}.

=GFT BNF
	Type	=	Name	
		|	Typars, Name
		|	Type, InfixName, Type
		| 	`(`, Type, `)`;
	Typars	=	Type
		|	`(`, Type, { `,`, Type }, `)`;
=TEX

The first alternative for a {\type} covers both {\type} variables and 0-ary {\typeconstructor}s.
The parser will disambiguate this by assuming that any name starting with a prime (') is intended as the name of a {\type} variable.

The second alternative is the default presentation of a {\type} construction, where the name of the {\typeconstructor} follows a comma separated list of {\type}s enclosed in round brackets.

Infix syntax is supported for binary {\typeconstructor}s.
Such {\typeconstructor}s may be given infix status and a parsing precedence by an appropriate {\fixitydeclaration}.

The last alternative allows brackets to be used to enclose a {\type} expression to override the precedence which the parser would otherwise use in parsing the {\type}.

\section{The Semantics of {\type}s}

{\type}s should be thought of as expressions which denote non-empty sets of values.
To understand the meaning of the language of {\type}s it is therefore necessary to understand for any {\type} expression which set is denoted by that expression.

This is complicated slightly by two variable factors.
Before the set denoted by any {\type} expression can be determined it is first necessary to know the denotations of the {\type} variables which occur in it (which will not usually be fixed), and secondly to know the denotations of the {\typeconstructor}s (which will usually have been partly determined by a declaration for the relevant {\typeconstructor}).

The meaning of a {\type} expression must therefore be understood to be given relative to an assignment of values to the {\type} variables and {\typeconstructor}s which appear in it.
Such an assignment will assign to each {\type} variable a non-empty set, and to each n-ary {\typeconstructor} a function from n-tuples of non-empty sets (the denotations of the {\type} expressions to which the {\typeconstructor} is applied) to non-empty sets (the denotations of the {\type} expression formed by applying the {\typeconstructor} to the argument types).

Just describing the necessary context in which the value denoted by some {\type} expression must be determined conveys most of the content of the description of the semantics of the {\type} system.
There are just two ways in which a {\type} expression may be formed and these determine the set denoted by the {\type} expression as follows.

If the expression is a {\type} variable then the set denoted is that assigned to the {\type} variable in the context.
If the expression is a {\typeconstructor} then the value denoted by the {\type} expression is the value obtained by applying the function assigned in the context to the {\typeconstructor} to the tuple of sets which are the denotations of the {\type} expressions supplied as arguments to the {\typeconstructor}.

In summary:

\begin{itemize}
\item
{\type}s denote non-empty sets of values.
\item
{\type} variables range over non-empty sets of values.
\item
{\typeconstructor}s denote functions from tuples of sets to sets.
\end{itemize}

\section{Examples of {\hol} {\type}s}

The following examples show a variety of {\type}s.
They also show different ways in which a {\type} can be entered into the system.
When a {\type} is entered as a top level expression to {\Product} it is evaluated to yield a standard ML value of type {\type} which is then displayed automatically invoking a pretty printer which will use the concrete syntax for {\hol} {\type}s.
These outputs from {\Product} are shown together with the various ways of entering {\type}s.

A {\type} is a value (of type {\type}) in the metalanguage standard ML.
The primitive method for entering such a {\type} is to enter the standard ML expression which computes the {\type} using the ML functions which are the constructors of the abstract data type.

Thus a {\type} which is a {\it TYPE variable} may be obtained by evaluating the ML function {\it mk_vartype} supplying it with the name of the variable:

=SML
val t = mk_vartype "'a";
=TEX

=GFT ProofPower output
val t = ”'a® : TYPE
=TEX

Submitting the above command to the {\Product} system causes the {\type} variable with name `'a' to be constructed and bound to the ML name `t'.

A {\type} formed from a {\typeconstructor} may be obtained using {\it mk_ctype} as follows:

=SML
val u = mk_ctype ("BOOL",[]);
=TEX

=GFT ProofPower output
val u = ”BOOL® : TYPE
=TEX

In the above the 0-ary {\typeconstructor} `BOOL' is applied to an empty list of {\type}s.
=INLINEFT
¬:BOOL®
=TEX
\ is the {\type} denoting the set of truth values (true and false) and is a primitive {\type} of the {\hol} logic.

Type following example is another primitive {\typeconstructor}, the binary function space constructor:

=SML
mk_ctype ("­",[”î®,”î®]);
=TEX

=GFT ProofPower output
val it = ”î ­ î® : TYPE
=TEX

This expression evaluates to the {\type} whose denotation in a standard model is the set of all total functions over the natural numbers.

In practice, for most purposes, entry of {\type}s as ML expressions is too cumbersome, and for this reason a parser is provided which enables the {\type}s to be entered in a convenient concrete syntax.
This parser is invoked automatically when a quotation beginning with the symbol `
=INLINEFT
”
=TEX
' is encountered by the {\Product} system.

Thus:
=SML
”'a®;
=TEX

=GFT ProofPower output
val it = ”'a® : TYPE
=TEX

is an alternative way of entering the same {\type} variable as that previously bound to `t'.

The {\type} formed from the 0-ary constructor `BOOL' is quoted thus:

=SML
”BOOL®;
=TEX

=GFT ProofPower output
val it = ”BOOL® : TYPE
=TEX

This is parsed as a {\typeconstructor} rather than a {\type} variable because its name does not begin with a prime.

The function space {\type} may be quoted using concrete syntax as follows:

=SML
”î ­ î®;
=TEX

=GFT ProofPower output
val it = ”î ­ î® : TYPE
=TEX

This infix concrete representation is permitted for binary {\typeconstructor}s provided that they have been declared previously as infix identifiers in a {\fixitydeclaration}.

Where a constructor has not been declared infix the concrete syntax requires postfix application of the constructor as in the {\type} of lists of natural numbers:

=SML
”(î) LIST®;
=TEX

=GFT ProofPower output
val it = ”î LIST® : TYPE
=TEX


For 1-ary {\typeconstructor}s the brackets surrounding the list of {\type}s preceding the constructor name are optional, so:

=SML
” î LIST®;
=TEX

=GFT ProofPower output
val it = ”î LIST® : TYPE
=TEX

is a quotation which yields exactly the same {\type} as the previous quotation.


The following example illustrates a typical use of {\type} variable, giving a polymorphic {\type} of lists.
This enables the normal operations over lists to be defined in such a way that they apply to lists of any {\type} of element.

=SML
”'a LIST®;
=TEX

=GFT ProofPower output
val it = ”'a LIST® : TYPE
=TEX

The quotation facilities are multilingual and support what is sometimes referred to as {\it anti-quotation}.
An ÛantiquotationÝ is an expression in ML, quoted inside an object language {\hol} quotation.
The quoted ML expression must evaluate to an appropriate type of ML expression (in this case an expression of ML type {\type}), and the value of this expression is used at the point of quotation in the {\type} constructed by the {\type} parser.
To supply an ML expression providing a constituent {\type}, the quotation symbol (`¬') is subscripted with ÛSML:Ý as shown in this example:

=SML
” ¬èSML:ê t® ­ ¬èSML:ê u®®;
=TEX
which is typed into a source document as:

{\ftlmargin=0in
=GFTSHOW
	” ¬èSML:ê t® ­ ¬èSML:ê u®®;
=TEX
}

and evaluates as:
=GFT ProofPower output
val it = ”'a ­ BOOL® : TYPE
=TEX

The ML name `t' has previously been bound to the {\type}
=INLINEFT
”'a®
=TEX
and `u' to {\type}
=INLINEFT
”BOOL®
=TEX
.
These are is supplied as arguments to the function space binary infix {\typeconstructor} to yield the {\type} of boolean valued functions over the natural numbers (which may be thought of as properties of natural numbers).

This is the same {\type} as would have been obtained from the expression:

=SML
mk_ctype("­",[t,u]);
=TEX

=GFT ProofPower output
val it = ”'a ­ BOOL® : TYPE
=TEX

Other examples of types formed from infix {\typeconstructor}s are:

=SML
”î ¸ î®;		(* pairs of natural numbers *)
=GFT ProofPower output
val it = ”î ¸ î® : TYPE
=SML
”î + BOOL®;		(* disjoint union of î and BOOL *)
=TEX
=GFT ProofPower output
val it = ”î + BOOL® : TYPE
=TEX

\section{Computation with {\type}s}

A full set of constructors, recognisers and destructors for the two different kinds of {\type} are provided as the primitive operations of the abstract data type in standard ML.
In addition to these primitive operators a range of higher level facilities are available.
Those provided include all the major facilities required in implementing a proof system for a logic with this {\type} system, and provide a good basis for any further programming with {\type}s which the user may wish to do to extend or customise the capabilities of the system.  Most users will find however, that programming with {\type}s is not necessary for their application.

\subsection{Recognisers and Destructors}

Corresponding to the two primitive constructors already introduced for building {\type}s by computation, there are recognisers, which may be used to discover whether a {\type} in hand was made by a particular constructor, and destructors, which may be used to take apart the {\type} again, yielding the values used originally as arguments to the constructor function.

These follow systematic naming conventions, the prefix Ûmk_Ý used in the constructor being replaced by Ûis_Ý in the name of the recogniser and Ûdest_Ý in the name of the destructor.
This pattern of naming conventions is repeated many times in {\Product}, wherever a new language is considered.
The pattern is repeated for the language of primitive {\term}s in {\hol}, the language of {\it derived TERM}s, and for {\term}s representing fragments of Z specifications.

It suffices here simply to record this set of ML procedure names and their ML types, leaving the reader to infer their functionality from the above informal description:

\begin{itemize}
\item constructors
=SML
mk_vartype	:string			-> TYPE;
mk_ctype	:string*TYPE list	-> TYPE;
=TEX
\item recognisers
=SML
Ûis_vartypeÝ	:TYPE -> bool;
Ûis_ctypeÝ	:TYPE -> bool;
=TEX
\item destructors
=SML
Ûdest_vartypeÝ	:TYPE -> string;
Ûdest_ctypeÝ	:TYPE -> string * TYPE list;
=TEX
\end{itemize}

\subsection{Basic Facilities}

Using the primitive facilities, higher level facilities may be programmed, usually by recursion over the structure of {\type}s.
The following are examples of such higher level facilities supplied with {\Product}.

\begin{itemize}
\item {\type} equality

In order to retain flexibility over the internal representation of {\type}s they are not an `equality type' in ML, and therefore cannot be compared using the ML equality relation.
A function performing a comparison between two {\type}s is therefore provided, in the form of the infix ML boolean valued operation `=:'.
=SML
op Û=:Ý : TYPE * TYPE -> bool;
=TEX
\item {\type} variables in a {\type}

The following function will extract the names of all the {\type} variables used in a {\type}.

=SML
Ûtype_tyvarsÝ : TYPE -> string list;
=TEX

\item {\typeconstructor}s in a {\type}

Similarly a function is available to extract the {\typeconstructor}s.
In this case both the name and the arity of the {\typeconstructor} are extracted as a pair.

=SML
Ûtype_tyconsÝ : TYPE -> (string * int) list;
=TEX

\item {\type} instantiation

When a polymorphic {\term} is instantiated to a specific {\type} a substitution is made for {\it TYPE variables} occuring in the {\type}.
This is known as {\it {\type} instantiation} and is performed by the following function:

=SML
Ûinst_typeÝ : (TYPE * TYPE) list -> TYPE -> TYPE;
=TEX
\end{itemize}

The first parameter is a list of pairs of {\type}s.
Each pair consists of a {\type} to be substituted and a {\type} variable for which the substitution takes place.

\subsection{Support for Pattern Matching}

Standard ML provides support for pattern matching in function definitions.
This support depends on the functions being defined over ML `datatype's.
Pattern matching is not available for value of `abstract types'.
In general the ML types used for representing object language constructs have to be implemented as abstract types in order that necessary well-formedness conditions are enforced, including the prevention of unsound derivations.

To mitigate the inconvenience caused to programmers we have made available a number of ML datatypes suitable for pattern matching function definitions, together with transfer functions which convert values of these abstract types into values of the corresponding datatypes.

The first example of such a type is the type {\destsimpletype}, which is defined as:

=GFT
datatype ÛDEST_SIMPLE_TYPEÝ =
	Vartype of string
|	Ctype of (string * TYPE list);
=TEX

This type reflects the top level structure of a {\type}, the constructors of the datatype corresponding to the primitive constructors for {\type}s.

Using this datatype generalised constructors and destructors for {\type}s are provided:

\begin{itemize}
\item generalised constructor
=SML
Ûmk_simple_typeÝ	: DEST_SIMPLE_TYPE -> TYPE;
=TEX
\item generalised destructor
=SML
Ûdest_simple_typeÝ	: TYPE -> DEST_SIMPLE_TYPE;
=TEX
\end{itemize}

The advantage of these facilities is:

\begin{itemize}
\item
They enable functions over {\type}s to be defined using pattern matching.
\item
They provide a convenient interactive interface for investigating the underlying structure of a {\type}.
\end{itemize}

To illustrate the first advantage we provide an example of a function over {\type}s defined using pattern matching.
The following is in effect a re-implementation of one of the functions provided with {\Product}.
It traverses a {\type} forming a list of all the {\it TYPE variables} appearing in it.
=SML
fun type_tyvars2 t =
 (fn	Vartype s	=> [s]
  |	Ctype (s,tl)	=> list_cup (map type_tyvars2 tl))
 (dest_simple_type t);
=TEX
The argument to the function `t' is a {\type}.
This is transformed into a {\it DEST_SIMPLE_TYPE\/} by {\it dest_simple_type} and then passed to a function abstraction defined using pattern matching over the structure of the datatype.

The function {\it list_cup}, which forms the union of two lists regarded as sets (i.e. removing duplicates), is one of a number of general purpose functions supplied with {\Product} to supplement the standard ML library in areas relevant to the functionality of {\Product}.
