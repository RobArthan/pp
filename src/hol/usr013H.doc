=IGN
********************************************************************************
usr013H.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
% usr013H.doc $Date: 2002/10/18 15:26:07 $ $Revision: 2.4 $ $RCSfile: usr013H.doc,v $
% COPYRIGHT (c) Lemma 1 Ltd.
\ignore{
=SML
(* usr013H.sml $Date: 2002/10/18 15:26:07 $ $Revision: 2.4 $ $RCSfile: usr013H.doc,v $
   COPYRIGHT (c) Lemma 1 Ltd. *)
=TEX
}

\chapter{INDUCTION}

Induction principles can be expressed and proven as {\theorem}s in Higher Order Logic, e.g.:

\begin{itemize}
\item €induction_thm› is the usual principle of induction over the natural numbers
=GFT
	Ù µ p∑	p 0	±
	  (µ m∑ p m ¥ p (m + 1))
	¥	(µ n∑ p n) : THM
=TEX
\item €cov_induction_thm› expresses course of values induction over the natural numbers
=GFT
	Ù µ p∑	(µ n∑ (µ m∑ m < n ¥ p m) ¥ p n)
	¥	(µ n∑ p n) : THM
=TEX
\item €list_induction_thm› is the principle of structural induction over lists
=GFT
	Ù µ p∑	p [] ±
	  (µ list∑ p list ¥ (µ x∑ p (Cons x list)))
	¥	(µ list∑ p list) : THM
=TEX
\end{itemize}

Using $µ_elim$ and $all_¬_rule$ these can be specialised for use in forward proofs, however, in practice induction principles are normally used via induction tactics.

\section{Induction Tactics}

Special tactics are available to facilitate the use of induction principles:

In the following descriptions of tactics the notation expressing the effect of the tactic shows the goal at the point of applying the tactic above a double horizontal line.
To the right of the line is the tactic employed together with any parameters, and below the line the resulting subgoals are described.

Goals are expressed as lists of assumptions enclosed in set brackets (suggesting that for many purposes the assumptions behave like a set) followed by the conclusion.
Often these will involve meta-variables, though in these informal presentations there is no systematic way of distinguishing meta-variables from object language variables.

The notation `strip\{a, A\}' means `the set of assumptions arising from stripping the new assumption `a' into the list of assumptions `A'.
Since this process may result in any number of subgoals the number of subgoals visible below the double line indicates only the number which would arise if no case splits or goal accomplishments occur during stripping.

If more than one goal is shown below the line they are separated by semicolons.

\begin{itemize}
\item induction over natural numbers using €induction_tac›
=FRULE 2
induction_tac ¨xÆ
˜
{ á } t
˜
{ á } t[0/x]; strip{t, á} t[x+1/x]
=TEX
This tactic supports proof by induction over the natural numbers.
It takes as a parameter a term which should be a variable of type îÓÆ which occurs free in the conclusion of the current goal (but not free in the assumptions).
Two subgoals would typically arise, corresponding to the base case and the induction step.
The base case is arrived at by substituting ¨0Æ for the variable supplied as parameter, in the conclusion of the original goal, without changing the assumptions.
The step case is obtained by stripping the original conclusion into the assumptions replacing the conclusion by the term resulting from substituting the induction variable +1 (¨x + 1Æ) into the original conclusion.

\item induction over natural numbers using €cov_induction_tac›
=FRULE 2
cov_induction_tac ¨xÆ
˜
{á} t
˜
strip{¨µm∑ m < x ¥ t[m/x]Æ, á} t
=TEX
Course of values induction has a strong feel of getting something for nothing.
Applied under similar circumstances as the standard natural number induction tactic, the resulting subgoal has the same conclusion as the original goal, but one extra premise is stripped into the assumptions.
The extra premise is that for all values less than the value of the induction variable the original conclusion is true.

\item for induction over lists €list_induction_tac› may be used
=FRULE 2
list_induction_tac ¨xÆ
˜
{á} t
˜
{á} t[[]/x]; strip{t, á} t[Cons h x/x]
=TEX
In the case of induction over lists the base case subgoal is obtained by substituting the empty list for the induction variable, while the step case involves substitution for the induction variable of the non-empty list formed by adding a value denoted by a new variable onto the front of the list denoted by the induction variable.

\item for other kinds of induction €gen_induction_tac› may be useful
=SML
gen_induction_tac	: THM -> TERM -> TACTIC;
=TEX
This function is takes as its first parameter a {\theorem} expressing an induction principle (e.g. {\it induction_thm}, {\it list_induction_thm}), and returns an induction tactic using that principle.
This is a quick way of getting a {\tactic} from a new induction principle which the user may have proved.
For full details see the\REFERENCE.

\end{itemize}

\section{Induction Example}

The theory of lists contains few {\theorem}s, but most of the results needed are simple to prove by induction.

The following example is a proof of the associativity of append, further examples are found in the exercises.

First we set the goal, a universally quantified statement of the associativity of the append operator
=INLINEFT
¨$@Æ
=TEX
, then immediately we strip the goal, discarding the universal quantifiers.

=SML
set_goal([],¨µl1 l2 l3:'a LIST∑
	(l1 @ l2) @ l3 = l1 @ (l2 @ l3)Æ);
(* remove universal quantifiers *)
a (REPEAT strip_tac);
=GFT ProofPower output
(* *** Goal "" *** *)

(* ?Ù *)  ¨(l1 @ l2) @ l3 = l1 @ l2 @ l3Æ
=TEX
We now proceed by induction on ¨l1Æ
=SML
a (list_induction_tac ¨l1Æ);
=GFT ProofPower output
(* *** Goal "2" *** *)

(*  1 *)  ¨(l1 @ l2) @ l3 = l1 @ l2 @ l3Æ

(* ?Ù *)  ¨µ x∑ (Cons x l1 @ l2) @ l3
		= Cons x l1 @ l2 @ l3Æ

(* *** Goal "1" *** *)

(* ?Ù *)  ¨([] @ l2) @ l3 = [] @ l2 @ l3Æ
=TEX
The base case is solved simply by rewriting with the definition of append:
=SML
a (rewrite_tac [append_def]);
=GFT ProofPower output
Tactic produced 0 subgoals:
Current goal achieved, next goal is:

(* *** Goal "2" *** *)

(*  1 *)  ¨(l1 @ l2) @ l3 = l1 @ l2 @ l3Æ

(* ?Ù *)  ¨µ x∑ (Cons x l1 @ l2) @ l3
		= Cons x l1 @ l2 @ l3Æ
=TEX
In the step case the induction assumption has to be used, and we therefore rewrite with the assumptions as well as the definition of append.
=SML
a (asm_rewrite_tac [append_def]);
val append_assoc_thm = pop_thm();
=GFT ProofPower output
Tactic produced 0 subgoals:
Current and main goal achieved
val €append_assoc_thm› =
 Ù µ l1 l2 l3∑ (l1 @ l2) @ l3 = l1 @ l2 @ l3 : THM
=TEX
Finally the value of the {\theorem} has been bound to the ML name {\it append_assoc_thm}.

You should now be able to attempt the exercises in section \ref{Induction}.

\chapter{{\tactical}s AND OTHER 'ALS}

A €TACTICAL› is a function which computes a {\tactic} usually taking one or more {\tactic}s as arguments.
The suffix `AL' follows mathematical usage in calling a function which operates over functions a functional.

There are many other kinds of higher order functions in {\Product} which greatly enhance productivity in developing new proof facilities.

At a very elementary level programming {\tactic}s using {\tactical}s occurs througout proof work.
At each step in a proof using the subgoal package an ML expression is presented for application to the current goal.
{\tactical}s are very often used in a very simple way to compute the {\tactic} to be applied.

More complex and sophisticated tactical programming may be used to make small or large extensions to the automatic proof capabilities of the system.

\begin{itemize}
\item
{\tactical}s may be used to combine the available tactics.
\item
Expressions using {\tactical}{}s may be used directly in proofs, e.g.:
=GFT
	a (REPEAT strip_tac);
=TEX
\item
named tactics may be defined using {\tactical}s:
=SML
	val repeat_strip_tac = REPEAT strip_tac;
=TEX
\item
{\tactical}s may be used to define parameterised tactics:
=SML
	fun list_induct_tac t = REPEAT strip_tac
			THEN list_induction_tac t;
=TEX
\end{itemize}

{\tactical}s usually have capitalised names ending in €_T›, though the most common (e.g. {\it REPEAT}, {\it THEN}) have aliases omitting the {\it _T}.
This facilitates identification of the full range of {\tactical}s supplied with {\Product} since their names are all collected together under {\it _T} in the {\it KWIC index} to the reference manual.

As well as {\tactical}s many other higher order functions are available for programming extensions to the systems proof capability:

Among these are €conversional›s (ending with €_C›) which are used to compute {\it conversion}s, €THM_TACTICAL›s (ending with €_THEN›) which compute {\thmtactic}s from {\thmtactic}s, and €THM_TACTICAL\ combinator›s (ending with €_TTCL›) which compute {\thmtactical}s from {\thmtactical}s .

\section{Commonly used {\tactical}s}

\begin{itemize}

\item

€REPEAT› - takes a tactic and returns a tactic which repeats that tactic until it fails.

If goal splits occur the {\it REPEAT}ing continues on all subgoals.

\item

€THEN› - an infix tactical which composes two tactics together.
The second tactic is applied to all subgoals arising from the first tactic.
If any applications of the operand tactics fail then the resulting tactic fails.

\item

€ORELSE› - an infix tactical which attempts to apply its first argument, and if this fails applies its second argument.
If both arguments fail then the resulting tactic fails.

\item
€TRY› - a tactical taking one argument which will attempt to do the {\tactic} which is its argument and will do nothing (but succeed!) if its argument tactic fails.

\item
€THEN_TRY› - variant on {\it THEN} which does not fail even if the second tactic fails.

t1 {\it THEN_TRY} t2 = t1 {\it THEN} ({\it TRY} t2)
\end{itemize}

\section{Processing of ``New'' Assumptions}

Tactics which add new assumptions normally do so using $strip_asm_tac$.

E.g., $strip_tac$, $cases_tac$, $lemma_tac$ work like this.

However, there are many alternative things which you might want to do with the result instead of than stripping it into the assumptions.
Sometimes, the stripping causes more case splitting than is desirable, you may wish to add the assumption without stripping it.
Alternatively you may wish to perform other transformations before adding the result into the assumptions.

To give this kind of flexibility most {\tactic}s which normally strip in new assumptions have corresponding {\tactical}s which will operate on a {\thmtactic} (which takes a {\theorem} and yields a {\tactic}) to give a new {\tactic}.
The new tactic performs the same function as the first tactic, except that instead of stripping in new assumptions it passes them to the {\thmtactic} for processing.

If $xxx_tac$ is a {\tactic} which creates new assumptions, then often $XXX_T$ is a corresponding {\tactical} which allows the user to select how the results (which {\it xxx_tac} would have added to the assumptions) are processed.

For example, {\it cases_tac c} is the same as {\it CASES_T c strip_asm_tac}, where:

=SML
cases_tac	: TERM -> TACTIC;
€CASES_T›	: TERM -> (THM -> TACTIC) -> TACTIC;
strip_asm_tac	: (THM -> TACTIC);
=TEX

If the new assumptions arising from an application of {\it cases_tac} were needed to do a single rewrite of the conclusions then this could be done without adding them to the assumptions using: {\it CASES_T rewrite_thm_tac}.
You need to be sure you will not need the assumptions again before using this technique.
It's safe in examples like the following:
=GFT SML
set_goal([], ¨(if x < y + 1 then x else y) < y + 1Æ);
a(CASES_T ¨x < y + 1Æ rewrite_thm_tac);
=GFT ProofPower Output
Tactic produced 0 subgoals:
Current and main goal achieved
=TEX
where the tactic finishes (a branch of) the proof.

Another occasionally useful {\it THM $->$ TACTIC} is {\it ante_tac}, which places its {\thm} argument into the left of an implication in the new conclusion, of which the previous conclusion is the right hand side.
This is like the inverse of stripping an implication and can be used to place an assumption in the conclusion for rewriting or automatic proof.

You should now be able to attempt the exercises in section \ref{Tacticals}.

\chapter{PROOF CONTEXTS}

\section{Introduction}

The behaviour of the proof facilities provided in {\Product} has been made `context sensitive' in order that:

\begin{itemize}
\item
When the user shifts from using one specification language to another the behaviour of the proof facilities changes in ways appropriate to the language in which reasoning is being conducted.
\item
Knowledge about various theories or problem domains can be applied automatically, in appropriate contexts, reducing the burden on the user to identify appropriate results from the relevant theories.
\end{itemize}

This is achieved by making many of the proof facilities ({\tactic}s etc.) sensitive the values held in the current €proof\ context›, and by supplying a collection of {\proofcontext}s in which the user can chose to conduct his proofs, as well as facilities for building new {\proofcontext}s.

A {\proofcontext} is therefore a named collection of settings of (implicit) parameters for many of the tactics, conversions, rules etc.

Proof contexts are used to customise many parts of the system including:

\begin{itemize}
\item stripping ($strip_tac$, $strip_asm_tac$ etc.)
\item rewriting ($rewrite_tac$ etc.)
\item forward chaining ($fc_tac$, {\it asm_fc_tac}, {\it all_fc_tac})
\end{itemize}

Each {\proofcontext} also contains some `automatic' provers, which will attempt to solve problems in the domain for which they have been constructed.

\begin{itemize}

\item
for general purpose automatic proof: $prove_tac$ attempts to prove the conclusion of the current goal without using the assumptions, $asm_prove_tac$ attempts such a proof making use of the assumptions of the current goal.

\item
for automatic existence proof $prove_∂_tac$ is provided.
This is used whenever a constant is specified using $const_spec$ or a {\holconst} paragraph to attempt to prove the consistency of the specification, and is useful for use interactively in proving existentially quantified goals.
Where a constant specification has not been proven automatically, manual application of {\it prove_∂_tac} often greatly simplifies the manual proof.

\end{itemize}

Each {\proofcontext} is associated with some particular theory which must be in scope when the {\proofcontext} is in use.

Some {\proofcontext}s recommended for everyday use, together with the name of the relevant theory, are:

\begin{centering}

\begin{tabular}{ll}
predicate calculus & $predicates$\\
sets & $sets_ext1$\\
above + lists etc. & $hol2$, $hol$\\
\end{tabular}

\end{centering}

The function $get_pcs$ may be used to list the names of all the {\proofcontext}s currently available together with the name of theory each {\proofcontext} is associated with.

Proof contexts with names beginning with $'$ are {\em component} {\proofcontext}s.
These are intended for use in conjunction with others.
Names without $'$ are {\em complete} {\proofcontext}s suitable for use on their own.
The simplest way to create a new {\proofcontext} is to create a {\it component} context containing only the new material and then merge that with other existing {\proofcontext}s to give the complete range of coverage required.

\section{Using Proof Contexts}

The simplest way to use a {\proofcontext} is to set the {\proofcontext} using {\it set_pc} or {\it push_pc}:

=SML
€set_pc›		: string -> unit;
€push_pc›	: string -> unit;
=TEX

Each of these takes a single string parameter which is the name of the {\proofcontext} which is to become the {\it current} {\proofcontext}.
Thenceforth all {\tactic}s which make use of the {\proofcontext} will refer to the identified {\proofcontext}, until the {\proofcontext} is changed again.
The {\proofcontext} identified must be associated with a theory which is currently in scope.

The {\it push} variant operates on a stack of {\proofcontext}s, the current context being the one at the top of the stack, and is therefore useful if a temporary change of context is required, permitting the previous context to be restored using {\it pop_pc}.

=SML
€pop_pc›	: unit -> unit;
=TEX

It is also possible to make local switches of {\proofcontext}, perhaps for just one tactic, conversion or rule.

Among the facilities supporting this kind of context switching are:

=SML
€PC_T›		: string -> TACTIC -> TACTIC;
€PC_T1›	: string -> ('a -> TACTIC) -> 'a -> TACTIC;

€PC_C›		: string -> CONV -> CONV;
€PC_C1›	: string -> ('a -> CONV) -> 'a -> CONV;

€pc_rule›	: string -> ('a -> THM) -> 'a -> THM;
€pc_rule1›	: string -> ('a -> 'b -> THM) -> 'a -> 'b -> THM;
=TEX

Note here that the variants ending with `1' here are variants suitable for use with parameterised {\it TACTICS}, {\it conv}ersions or rules.
These are needed where the parameterised function accesses the current {\proofcontext} when it is supplied its first argument.

For example, to do a rewrite in a different {\proofcontext} than the current context the following, will not suffice:
=GFT SML
a (PC_T "lin_arith" (rewrite_tac[]));
=TEX
even though this will be accepted and will do some rewriting.
This is because the subexpression {\it (rewrite_tac[])} (intended to rewrite using only the default rewrite conversions in the current {\proofcontext}) is evaluated first, in the current {\proofcontext}, to yield a {\tactic}.
At this stage {\it rewrite_tac} has already made use of the current {\proofcontext} in preprocessing the {\theorem}s to be used for rewriting, and has accessed the default rewriting conversions in the {\proofcontext}.
The resulting TACTIC is then applied in {\proofcontext} "lin_arith" but is no longer context sensitive.

The correct way to rewrite in a specific {\proofcontext} is:
=GFT SML
a (PC_T1 "lin_arith" rewrite_tac []);
=TEX
in which case {\it PC_T1} arranges for the {\proofcontext} to be switched before {\it rewrite_tac} is applied to its first argument.

It is also possible to combine the contents of more than one of the available {\proofcontext}s using {\proofcontext} {\it merge} facilities.
=SML
€set_merge_pcs›	: string list -> unit;
€MERGE_PCS_T›	: string list -> TACTIC -> TACTIC;
=TEX
which behave in a similar manner to their non-merge version, but accept a list of {\proofcontext} names instead of a single name, and combine the contexts together to form the new current {\proofcontext}.

{\it print_status} may be used to discover which {\proofcontext} is current.
=SML
€print_status›		: unit -> unit;
=TEX

\subsection{What's in the {\proofcontext}s?}

We now show one or two examples of the effects of some of the commonly used {\proofcontext}s.

Proof contexts which have the atom `ext' in their name are usually contexts which apply the rule of extensionality of sets by default.
Depending on what you are trying to prove this may either enable a rapid discharge of the goal (e.g. if the goal is a result of elementary set theory) or may cause confusion by expanding things which are not appropriate.
It is therefore useful to get a feel for when extensional reasoning is likely to be helpful.

An example of the effect of using extensionality is:
=SML
PC_C1 €"sets_ext1"› rewrite_conv[]
	¨{(1, 2)} Ä {(x, y) | x + 1 º y} ≤ 4 > 5Æ;
=GFT ProofPower Output:
val it = Ù {(1, 2)} Ä {(x, y)|x + 1 º y} ≤ 4 > 5
   § (µ x1 x2∑ (x1, x2) = (1, 2) ¥ x1 + 1 º x2)
	≤ 4 > 5 : THM
=TEX
Not all {\proofcontext}s which contain these rules do have the `ext' atom, the most frequently used extensional context without it is `€hol2›', which combines a knowledge of most of the theories which are ancestors of the theory `hol' with a propensity for extensional reasoning.
This means that there are a lot of elementary results which this context will solve automatically, but for less elementary results it may be too aggressive and cause the goal to become complicated and difficult to relate to the original problem.
=SML
PC_C1 "hol2" rewrite_conv[] ¨{(1, 2)} Ä {(x, y) | x + 1 º y} ≤ 4 > 5Æ;
=GFT ProofPower Output:
val it = Ù {(1, 2)} Ä {(x, y)|x + 1 º y} ≤ 4 > 5
		§ (µ x1 x2∑ x1 = 1 ± x2 = 2 ¥ x1 + 1 º x2) : THM
=TEX
=SML
PC_C1 "hol2" rewrite_conv[]¨A ° A Ä BÆ;
=GFT ProofPower Output:
val it = Ù A ° A Ä B § (µ x∑ x ç A ¥ x ç B) : THM
=TEX
=SML
PC_C1 "hol" rewrite_conv[]¨A ° A Ä BÆ;
=GFT ProofPower Output:
val it = Ù A ° A Ä B § A Ä B : THM
=TEX

\section{Automatic Proof Procedures}

To encourage the development of domain specific automatic proof {\tactic}s, which are capable of solving a useful collection of problems using domain specific techniques the {\proofcontext}s have a place for such {\tactic}s.

This provides a uniform interface to automatic proof {\tactic}s reducing the tendency for such domain specific proof automation to cause every greater complexity in the user interface.
A good example of the provision of this kind of facility is the provision of linear arithmetic.
Though the linear arithmetic package is a complex package, a large part of its functionality is made available to the user through existing procedural interfaces.
If the user selects the €lin_arith› {\proofcontext} then the standard rewriting facilities will perform normalisation operations on the operands of arithmetic relations, and {\it prove_tac} will solve goals whose conclusions are terms in linear arithmetic.

The automatic proof facilities in the current {\proofcontext} may be accessed by the use of the following three functions:

\begin{itemize}

\item
=SML
€prove_tac›		: THM list -> TACTIC;
=TEX

when the conclusion of a goal is automatically provable on its own

\item
=SML
€asm_prove_tac›	: THM list -> TACTIC;
=TEX

when the goal is automatically provable using the assumptions

\item
=SML
€prove_rule›		: THM list -> TERM -> THM;
=TEX

to state and prove a conjecture automatically
\end{itemize}

If you merge several {\proofcontext}s, the ``$prove_tac$'' comes from the last one in the list.

Many {\proofcontext}s contain $basic_prove_tac$.
It uses rewriting, a simple heuristic for eliminating equations involving variables, and a few steps of first-order resolution.

As seen with the {\theorem}s from PM and ZRM (in the `easy proof' exercises, section \ref{EasyProofs}), this is useful for simple predicate calculus {\theorem}s and for elementary facts about sets.

For example:

=SML
prove_rule [] ¨(∂x∑ ∆x) ≤ (∂y∑ Ÿy) § (∂z∑ ∆z ≤ Ÿz)Æ;
prove_rule [] ¨µa b∑a Ä b ± b Ä a § a = bÆ;
=GFT ProofPower Output
val it = Ù (∂ x∑ ∆ x) ≤ (∂ y∑ Ÿ y) § (∂ z∑ ∆ z ≤ Ÿ z) : THM
val it = Ù µ a b∑ a Ä b ± b Ä a § a = b : THM
=TEX

\section{Linear Arithmetic}

Proof context $lin_arith$ contains an automatic proof procedure for €linear\ arithmetic›.

This is useful for many simple arithmetic problems.

For example:
=SML
pc_rule1 "lin_arith" prove_rule[] ¨a º b ± a + b < c + a ¥ a < cÆ;
=GFT ProofPower Output
val it = Ù a º b ± a + b < c + a ¥ a < c : THM
=TEX

`linear arithmetic' means terms built up from:

\begin{itemize}
\item
``Atoms'' (numeric literals, variables of type Ó, etc.)
\item
Multiplication by numeric literals
\item
Addition, $=$, $º$, $æ$, $<$, $>$
\item
Logical operators
\end{itemize}

So all the following are terms of linear arithmetic:

=GFT
µa c∑(∂b∑a æ b ± ≥ b < c) ¥ a æ c
µa b c∑a + 2*b < 2*a ¥ b + b < a
µ x y∑ ≥ (2*x + y = 4 ± 4*x + 2*y = 7)
=TEX

Rewriting/stripping in $lin_arith$ processes numeric relations by ``multiplying out and collecting like terms''as follows.

=SML
pc_rule1 "lin_arith" rewrite_conv[]
	¨(i + j)*(j + i) º j*j + jÆ;
=GFT ProofPower Output
val it = Ù (i + j) * (j + i) º j * j + j
	§ i * i + 2 * i * j º j : THM
=TEX

$i * i$, $i * j$ and $j$ are then treated as atoms, so this {\proofcontext} solves problems a little more general than ``strict'' linear arithmetic.

=GFT
		≥(a < 1 + 2*b ± 4*b < 2*a)
=TEX

is proved thus:

\begin{centering}

\begin{tabular}{lll}
if &(1) & $a \leq 2*b$ \\
and & (2) & $4*b + 1 \leq 2*a$ \\
then & 2*(1) +(2) & $2*a +4*b + 1 \leq 2*a + 4*b$ \\
whence &  & $1 \leq 0$ \\
whence &  & CONTRADICTION \\
\end{tabular}

\end{centering}

You should now be able to attempt the exercises in section \ref{ProofContexts} (other exercises involving linear arithmetic may be found in sections \ref{AdvancedTechniques} and \ref{SupplementaryExercises}).


\chapter{CASE STUDY: VENDING MACHINE}

\section{Vending Machine Specification}

The following paragraphs give a model of a simple vending machine:

=SML
(open_theory "usr013" handle _ => (open_theory "hol"; new_theory "usr013"));
set_pc "hol2";
=TEX

The state of the vending machine is defined as a labelled record type $VM_State$ by the following paragraph:

πHOLLABPROD €VM_State›¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	€takings›		: Ó;
‹	€stock›			: Ó;
‹	€price›			: Ó;
‹	€cash_tendered›	: Ó
∞¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸

The labelled record type paragraph declares the following {\it projection functions}:

=GFT Projection Functions
takings		: VM_State ≠ Ó
stock		: VM_State ≠ Ó
price		: VM_State ≠ Ó
cash_tendered	: VM_State ≠ Ó
=TEX

If $st$ is a state value, $takings\,st$ is like $st.takings$ in Z or Pascal or Ada.

This paragraph also introduces a {\it constructor} function:

=GFT Constructor Function
€MkVM_State›	: Ó ≠ Ó ≠ Ó ≠ Ó ≠ VM_State
=TEX

If $t$, $s$, $p$, and $ct$ are numbers, $MkVM_State\,t\,s\,p\,ct$ is a state value with those numbers as its components.

The following paragraph introduces a new constant {\it vm} which is a functional model of the behaviour of the vending machine.

πHOLCONST
‹	€vm› : VM_State ≠ VM_State
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹µst∑	vm st
‹=	if	stock st = 0
‹	then	MkVM_State
‹		(takings st) (stock st) (price st) 0
‹	else	if cash_tendered st < price st
‹	then	st
‹	else	if cash_tendered st = price st
‹	then	MkVM_State
‹		(takings st + cash_tendered st)
‹		(stock st - 1) (price st) 0
‹	else	MkVM_State
‹		(takings st) (stock st) (price st) 0
∞

We can use {\Product} to `test' or `animate' the behaviour of the vending machine model using the {\Product} rewriting facilities.

The following conversion may be used for animating {\it vm}:

=SML
val €run_vm› = rewrite_conv [get_spec ¨vmÆ, get_spec ¨MkVM_StateÆ];
=GFT ProofPower Output
val run_vm = fn : CONV
=TEX

The behaviour of the vending machine can now be illustrated by executing {\it run_vm} on various vending machine states.

=SML
run_vm ¨vm (MkVM_State 0 20 5 5)Æ;
run_vm ¨vm (MkVM_State t 20 5 5)Æ;
=GFT ProofPower Output
val it = Ù vm (MkVM_State 0 20 5 5)
		= MkVM_State 5 19 5 0 : THM

val it = Ù vm (MkVM_State t 20 5 5)
		= MkVM_State (t + 5) 19 5 0 : THM
=TEX

Note that the second test case above is effectively doing {\it symbolic execution}.

\section{Vending Machine Critical Requirements}

The critical requirement might be informally stated as:

{\em ``No transaction of the vending machine causes the machine's owner
to lose money''}.

We formalise this by specifying the set of transition functions which never reduce the value of the machine's contents.

The value of a state is computed by the following function.

πHOLCONST
‹	€value› : VM_State ≠ Ó
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹µ st ∑value st = takings st + stock st * price st
∞

The set of machines satisfying the critical requirement is then:

πHOLCONST
‹	€vm_ok› : (VM_State ≠ VM_State) SET
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	vm_ok
‹=	{	trf
‹	|	µcb s p ct∑
‹		let	s1 = MkVM_State cb s p ct
‹		in let	s2 = trf s1
‹		in	value s2 æ value s1}
∞

You should now be able to attempt the exercises in section \ref{CaseStudy}.

\chapter{PROOF STRATEGY}

A large application proof may take several man years of effort to complete.

Top level proof strategy for large proofs must be carefully thought out.
Major lemmas are best proven separately, stored in the theory, and combined in a top level proof delivering the required result.
Exploration may be forwards or backwards.

Lemmas of moderate size may be proven using the goal package.
Such a proof would consist of a combination of stripping, rewriting with definitions, assumptions and previously proven results, and other uses of previous results.

\section{What to do when faced with a Goal}

Sanity Checks:

\begin{itemize}
\item
Decide whether the goal is true, if not, don't try to prove it!
\item
Decide whether the conclusion is relevant (are the assumptions inconsistent?).
\item
Do you see what the goal means? If not, can you simplify it.
\item
If all else fails, try retracing your steps.
\end{itemize}

Main Choices

\begin{itemize}
\item
Decompose by stripping or contradiction
($strip_tac$, $contr_tac$)
\item
Work forwards from assumptions
(e.g. $spec_asm_tac$, $fc_tac$)
\item
Do a case split ($strip_asm_tac$, $cases_tac$)
\item
Swap the conclusion with an assumption
($swap_asm_concl_tac$)
\item
Prove a lemma ($lemma_tac$)
\item
Prove automatically (e.g. $asm_prove_tac$, $prove_∂_tac$)
\item
Transform the conclusion by rewriting
(e.g. with a definition)
\item
Induction ($\ldots_induction_tac$)
\end{itemize}

You should now be able to attempt the exercises in sections \ref{AdvancedTechniques} and \ref{SupplementaryExercises}.
