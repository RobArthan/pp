=IGN
********************************************************************************
mdt084.doc: this file is part of the ProofPower system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
% mdt084.doc   %Z% $Date: 1992/10/23 14:19:14 $ $Revision: 1.2 $ $RCSfile: mdt084.doc,v $

=TEX
% mdt084.doc   %Z% $Date: 1992/10/23 14:19:14 $ $Revision: 1.2 $ $RCSfile: mdt084.doc,v $
\documentstyle[hol1,11pt,TQ]{article}

\TPPtitle{Module Tests for Propositional Calculus with Equality Proof Procedures}
\def\TPPheadtitle{Module Tests for Propositional Calculus with Equality\cr Proof Procedures}
\TPPref{DS/FMU/IED/MDT084}
\def\SCCSissue{$Revision: 1.2 $%
}
\TPPissue{\SCCSissue}
\TPPdate{\FormatDate{$Date: 1992/10/23 14:19:14 $%
}}
\TPPproject{FST PROJECT}
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{SML Literate Script}
\TPPkeywords{HOL}
\TPPauthor{A.J. Hammon & WIN01}  %% Mandatory field
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{This document contains the module tests for the proof
	procedures for propositional calculus with equalities.}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library
}}

\ftlinepenalty=9999
\makeindex

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\underscoreoff

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\makeTPPfrontpage

\vfill
\begin{center}
\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year
\end{center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{DOCUMENT CONTROL}

%********************************************************************

\subsection{Contents List}
\tableofcontents
% \listoftables

%********************************************************************

\subsection{Document Cross References}

\bibliographystyle{fmu}
\bibliography{fmu}

%********************************************************************

\subsection{Changes History}

\begin{description}

\item[\FormatDate{$Date: 1992/10/23 14:19:14 $%
}, issue \SCCSissue~]
	Initial drafts.

%\item[\FormatDate{$Date: 1992/10/23 14:19:14 $%
%}, issue \SCCSissue~]

\item[Issue 1.3] Copyright and banner updates for open source release.
\end{description}

%********************************************************************

%\subsection{Changes Forecast} \label{ChangesForecast}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{GENERAL}

%********************************************************************

\subsection{Scope}

This document contains the module tests for the proof procedures for
propositional calculus with equalities for \ProductHOL{} which are discussed
in~\cite{DS/FMU/IED/DTD084}.  The tests use the module testing system
of~\cite{DS/FMU/IED/DTD013} and~\cite{DS/FMU/IED/IMP013}.

%********************************************************************

\subsection{Introduction}

Each test, or part of a test, is identified by a string of the form
``$\cal N_M$'' or ``$\cal N_MA$'' where: ``$\cal N$'' indicates the
area of the test; ``$\cal M$'' is the test number; and, ``$\cal A$'' is
ancillary labelling for the test.

%********************************************************************

\subsection{Deficiencies}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{TEST HARNESS INITIALISATION}

Load and initialise the module test system.

=SML
use_file "dtd013.sml";
use_file "imp013.sml";
init_mt_results ();
new_theory "mdt084_test";
=TEX

Some useful functions.

=IGN
fun simplify_opt_list (Nil : 'a OPT, b) : 'a list = b
| simplify_opt_list (Value a, b) = a::b
;
=TEX

=IGN
fun useful_eq tm = (
	(case dest_eq tm of (l, r) => l ~=$ r)
	handle Fail _ => true
);
=TEX

=SML
fun term_subset(l1:TERM list, l2:TERM list) : bool = (
	all l1 (fn a => present (op ~=$) a l2)
);

fun unordered_term_lists_eq (l1:TERM list, l2:TERM list) : bool = (
	term_subset(l1, l2) andalso term_subset(l2, l1)
);

fun paired_unordered_term_lists_eq ((l1, r1), (l2, r2)) = (
	unordered_term_lists_eq(l1, l2) andalso unordered_term_lists_eq(r1, r2)
);
=TEX

=SML
fun check_ans((l1:THM list, r1:THM list), lr2:TERM list * TERM list) = (
	paired_unordered_term_lists_eq((map concl l1, map concl r1), lr2)
);
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{THE TESTS}

=SML
"Start of Tests";
=TEX

%********************************************************************

\subsection{Tests of $prop_eq_rule$}

=SML
let
	val in_tms = map asm_rule [
		¬a1:'a=b1®, ¬a1:'a=c1®, ¬d1:'a=c1®, ¬z1:'a=x1®,
		¬b1:'a=y1®, ¬z1:'a=w1®, ¬w1:'a=y1®, ¬c1:'a=y1®,
		¬x ± y®
	];

	val out_tms = [
		¬x1:'a=a1®, ¬z1:'a=a1®, ¬w1:'a=a1®, ¬d1:'a=a1®,
		¬y1:'a=a1®, ¬b1:'a=a1®, ¬c1:'a=a1®
	];
in
	store_mt_results_show (mt_runf check_ans) [
		("001_1", prop_eq_rule, in_tms, (out_tms, [¬x ± y®]))
	]
end;
=TEX

=SML
let
	val in_tms = map asm_rule [
		¬a1:'a=b1®, ¬a1:'a=c1®, ¬d1:'a=c1®, ¬z1:'a=x1®,
		¬b1:'a=y1®, ¬z1:'a=w1®, ¬w1:'a=y1®, ¬c1:'a=y1®,
		¬a2:'b=b2®, ¬a2:'b=c2®, ¬d2:'b=c2®, ¬z2:'b=x2®,
		¬b2:'b=y2®, ¬z2:'b=w2®, ¬w2:'b=y2®, ¬c2:'b=y2®,
		¬x ± y®
	];

	val out_tms = [
		¬x1:'a=a1®, ¬z1:'a=a1®, ¬w1:'a=a1®, ¬d1:'a=a1®,
		¬y1:'a=a1®, ¬b1:'a=a1®, ¬c1:'a=a1®,
		¬x2:'b=a2®, ¬z2:'b=a2®, ¬w2:'b=a2®, ¬d2:'b=a2®,
		¬y2:'b=a2®, ¬b2:'b=a2®, ¬c2:'b=a2®
	];
in
	store_mt_results_show (mt_runf check_ans) [
		("001_2", prop_eq_rule, in_tms, (out_tms, [¬x ± y®]))
	]
end;
=TEX

=SML
let
	val in_tms = map asm_rule [
		¬a1:'a=b1®, ¬a1:'a=c1®, ¬d1:'a=c1®, ¬z1:'a=x1®,
		¬b1:'a=y1®, ¬z1:'a=w1®, ¬w1:'a=y1®, ¬c1:'a=y1®,
		¬a2:'a=b2®, ¬a2:'a=c2®, ¬d2:'a=c2®, ¬z2:'a=x2®,
		¬b2:'a=y2®, ¬z2:'a=w2®, ¬w2:'a=y2®, ¬c2:'a=y2®,
		¬x ± y®
	];

	val out_tms = [
		¬x1:'a=a1®, ¬z1:'a=a1®, ¬w1:'a=a1®, ¬d1:'a=a1®,
		¬y1:'a=a1®, ¬b1:'a=a1®, ¬c1:'a=a1®,
		¬x2:'a=a2®, ¬z2:'a=a2®, ¬w2:'a=a2®, ¬d2:'a=a2®,
		¬y2:'a=a2®, ¬b2:'a=a2®, ¬c2:'a=a2®
	];
in
	store_mt_results_show (mt_runf check_ans) [
		("001_3", prop_eq_rule, in_tms, (out_tms, [¬x ± y®]))
	]
end;
=TEX

The tests above are fairly complex to construct given all of the terms
and types.  For the next tests we use a different style.

We need to create terms where the types are well-controlled so that we
can test for term equality later on.  To guarantee the types we create
a single term having both the input and the answer as a disjunction.
In some tests we want to force some of the variables to particular
types so the whole test may be wrapped in a universal quantifier.
Hence, the function below needs to take apart the input term to reveal
its component pieces.

=SML
fun run_test_a (lab:string, tm:TERM) = (
	let
		val (input_tm, expected_eq_term) = (dest_² o snd o strip_µ) tm;
		val input_terms = strip_± input_tm;
		val input_thms = map asm_rule input_terms;
		val input_neqs = input_terms drop is_eq;

		val expected_eqs = strip_± expected_eq_term;

		val (output_eq_thms, output_neq_thms) = prop_eq_rule input_thms
			handle Fail _ => (nil, input_thms);

		val output_eqs = map concl output_eq_thms;
		val output_neqs = map concl output_neq_thms;

		val res = unordered_term_lists_eq(expected_eqs, output_eqs)
			andalso unordered_term_lists_eq(input_neqs, output_neqs);
	in
		store_mt_results_show mt_run [(lab, Combinators.I, res, true)]
	end
	handle Fail _ => store_mt_results_show mt_run [
		(lab ^ "_failure", Combinators.I, false, true)]
);
=TEX

As a companion for $run_test_a$ this next function does the necessary
set up then calls $prop_eq_rule$ and then returns the conclusions of the
output theorems.

=SML
fun start_test_a (lab:string, tm:TERM) = (
	let
		val (input_tm, expected_eq_term) = (dest_² o snd o strip_µ) tm;
		val input_terms = strip_± input_tm;
		val input_thms = map asm_rule input_terms;
		val input_neqs = input_terms drop is_eq;

		val expected_eqs = strip_± expected_eq_term;
		val (output_eq_thms, output_neq_thms) = prop_eq_rule input_thms
			handle Fail _ => (nil, input_thms);

		val output_eqs = map concl output_eq_thms;
		val output_neqs = map concl output_neq_thms;
	in
		(output_eqs, output_neqs, expected_eqs)
	end
);
=TEX
		

=SML
run_test_a("002_1a", ¬
a1=b1 ± a1=c1 ± d1=c1 ± z1=x1 ± b1=y1 ± z1=w1 ± w1=y1 ± c1=y1 ±
a2=b2 ± a2=c2 ± d2=c2 ± z2=x2 ± b2=y2 ± z2=w2 ± w2=y2 ± c2=y2 ± w2=92 ±
a3=b3 ± a3=c3 ± z3=x3 ± z3=t3 ± w3=y3 ± z3=y3 ± z4 
²
a2 = 92 ± d2 = 92 ± x2 = 92 ± b2 = 92 ± c2 = 92 ±
z2 = 92 ± y2 = 92 ± w2 = 92 ± w3 = t3 ± x3 = t3 ± y3 = t3 ±
z3 = t3 ± b3 = a3 ± c3 = a3 ± x1 = a1 ± z1 = a1 ± w1 = a1 ±
d1 = a1 ± y1 = a1 ± b1 = a1 ± c1 = a1
®);
=TEX

=SML
run_test_a("002_1b", ¬
µ a1 a2 a3 b1 b2 b3 c1 c2 c3 d1 d2 t3 w1 w2 w3 x1 x2 x3 y1 y2 y3 z1 z2 z3 : î ·
a1=b1 ± a1=c1 ± d1=c1 ± z1=x1 ± b1=y1 ± z1=w1 ± w1=y1 ± c1=y1 ±
a2=b2 ± a2=c2 ± d2=c2 ± z2=x2 ± b2=y2 ± z2=w2 ± w2=y2 ± c2=y2 ± w2=92 ±
a3=b3 ± a3=c3 ± z3=x3 ± z3=t3 ± w3=y3 ± z3=y3 ± z4 
²
a2 = 92 ± d2 = 92 ± x2 = 92 ± b2 = 92 ± c2 = 92 ± z2 = 92 ±
y2 = 92 ± w2 = 92 ± x1 = a1 ± z1 = a1 ± w1 = a1 ± d1 = a1 ±
y1 = a1 ± b1 = a1 ± c1 = a1 ± b3 = a3 ± c3 = a3 ± w3 = t3 ±
x3 = t3 ± y3 = t3 ± z3 = t3
®);
=TEX

{\hfuzz 3pt
=SML
run_test_a("002_2a", ¬
a1=b1 ± a1=c1 ± d1=c1 ± z1=x1 ± b1=y1 ± z1=w1 ± w1=y1 ± c1=y1 ±
a2=b2 ± a2=c2 ± d2=c2 ± z2=x2 ± b2=y2 ± z2=w2 ± w2=y2 ± c2=y2 ± w2=92 ±
a4=b4 ± a4=cf4 cv4  ± d4=cf4 cv4  ± z4=x4 ± b4=y4 ± z4=w4 ± w4=y4 ± cf4 cv4 =y4 ±
f5 a5 = f5 b5 ± f5 a5 = f5a c5 ± f5a d5 = f5 b5 ±
a3=b3 ± a3=c3 ± z3=x3 ± z3=t3 ± w3=y3 ± z3=y3 ± p4 
²
a2 = 92 ± d2 = 92 ± x2 = 92 ± b2 = 92 ± c2 = 92 ± z2 = 92 ±
y2 = 92 ± w2 = 92 ± w3 = t3 ± x3 = t3 ± y3 = t3 ± z3 = t3 ±
b3 = a3 ± c3 = a3 ± f5a d5 = f5 a5 ± f5 b5 = f5 a5 ±
f5a c5 = f5 a5 ± x4 = a4 ± z4 = a4 ± w4 = a4 ± d4 = a4 ±
y4 = a4 ± b4 = a4 ± cf4 cv4 = a4 ± x1 = a1 ± z1 = a1 ± w1 = a1 ±
d1 = a1 ± y1 = a1 ± b1 = a1 ± c1 = a1
®);
=TEX
}

{\hfuzz 3pt
=SML
run_test_a("002_2b", ¬
µ a1 a2 a3 a4 a5 b1 b2 b3 b4 b5 cv4 c1 c2 c3 c5 d1 d2 d4 d5
	t3 w1 w2 w3 w4 x1 x2 x3 x4 y1 y2 y3 y4 z1 z2 z3 z4 : î ·
a1=b1 ± a1=c1 ± d1=c1 ± z1=x1 ± b1=y1 ± z1=w1 ± w1=y1 ± c1=y1 ±
a2=b2 ± a2=c2 ± d2=c2 ± z2=x2 ± b2=y2 ± z2=w2 ± w2=y2 ± c2=y2 ± w2=92 ±
a4=b4 ± a4=cf4 cv4  ± d4=cf4 cv4  ± z4=x4 ± b4=y4 ± z4=w4 ± w4=y4 ± cf4 cv4 =y4 ±
f5 a5 = f5 b5 ± f5 a5 = f5a c5 ± f5a d5 = f5 b5 ±
a3=b3 ± a3=c3 ± z3=x3 ± z3=t3 ± w3=y3 ± z3=y3 ± p4 
²
a2 = 92 ± d2 = 92 ± x2 = 92 ± b2 = 92 ± c2 = 92 ± z2 = 92 ±
y2 = 92 ± w2 = 92 ± x1 = a1 ± z1 = a1 ± w1 = a1 ± d1 = a1 ±
y1 = a1 ± b1 = a1 ± c1 = a1 ± b3 = a3 ± c3 = a3 ± x4 = a4 ±
z4 = a4 ± w4 = a4 ± d4 = a4 ± y4 = a4 ± b4 = a4 ± cf4 cv4 = a4 ±
w3 = t3 ± x3 = t3 ± y3 = t3 ± z3 = t3 ± f5a d5 = f5 a5 ±
f5 b5 = f5 a5 ± f5a c5 = f5 a5
®);
=TEX
}

=SML
run_test_a("002_3a", ¬
a1=b1 ± c1=d1 ± e1=f1 ± g1=h1 ± i1=j1 ± k1=l1 ± m1=n1 ± o1=p1 ±
q1=r1 ± s1=t1 ± u1=v1 ± w1=x1 ± y1=z1 ±
a2=b2 ± c2=d2 ± e2=f2 ± g2=h2 ± i2=j2 ± k2=l2 ± m2=n2 ± o2=p2 ±
q2=r2 ± s2=t2 ± u2=v2 ± w2=x2 ± y2=z2
²
z2 = y2 ± x2 = w2 ± v2 = u2 ± t2 = s2 ± r2 = q2 ± p2 = o2 ±
n2 = m2 ± l2 = k2 ± j2 = i2 ± h2 = g2 ± f2 = e2 ± d2 = c2 ±
b2 = a2 ± z1 = y1 ± x1 = w1 ± v1 = u1 ± t1 = s1 ± r1 = q1 ±
p1 = o1 ± n1 = m1 ± l1 = k1 ± j1 = i1 ± h1 = g1 ± f1 = e1 ±
d1 = c1 ± b1 = a1
®);
=TEX

=SML
run_test_a("002_3b", ¬
µ a1 b1 c1 d1 e1 f1 g1 h1 i1 j1 k1 l1 m1 n1 o1 p1 q1 r1 s1 t1 u1 v1 w1 x1 y1 z1
a2 b2 c2 d2 e2 f2 g2 h2 i2 j2 k2 l2 m2 n2 o2 p2 q2 r2 s2 t2 u2 v2 w2 x2 y2 z2 : 'a ·
a1=b1 ± c1=d1 ± e1=f1 ± g1=h1 ± i1=j1 ± k1=l1 ± m1=n1 ±
o1=p1 ± q1=r1 ± s1=t1 ± u1=v1 ± w1=x1 ± y1=z1 ±
a2=b2 ± c2=d2 ± e2=f2 ± g2=h2 ± i2=j2 ± k2=l2 ± m2=n2 ±
o2=p2 ± q2=r2 ± s2=t2 ± u2=v2 ± w2=x2 ± y2=z2
²
z2 = y2 ± x2 = w2 ± v2 = u2 ± t2 = s2 ± r2 = q2 ± p2 = o2 ±
n2 = m2 ± l2 = k2 ± j2 = i2 ± h2 = g2 ± f2 = e2 ± d2 = c2 ±
b2 = a2 ± z1 = y1 ± x1 = w1 ± v1 = u1 ± t1 = s1 ± r1 = q1 ±
p1 = o1 ± n1 = m1 ± l1 = k1 ± j1 = i1 ± h1 = g1 ± f1 = e1 ±
d1 = c1 ± b1 = a1
®);
=TEX

=SML
run_test_a("002_4", ¬
(	(f µ x · p x) = (g f µ y · p y)   )
± (	(f µ z · p z) = aaa   )
± (	(f µ x · p x) = p y   )
± (	(h ¶ x · q x) = p y   )
± (	(h ¶ x · q x) = h c   )
± (	(g f µ y · p y) = (g i µ y · p y)   )
± (	h d = (g i µ y · p y)   )

²

(	(f µ z · p z) = aaa   )
± (	(g f µ y · p y) = aaa   )
± (	(g i µ y · p y) = aaa   )
± (	(h ¶ x · q x) = aaa   )
± (	h c = aaa   )
± (	h d = aaa   )
± (	p y = aaa   )
®);
=TEX


=SML
run_test_a("002_5", ¬
(	(f9 µ x · p9 x) = (g9 f9 µ y · p9 y)   )
± (	(f9 µ z · p9 z) = aaa9   )
± (	(f9 µ x · p9 x) = p9 y9   )
± (	(h9 ¶ x · q9 x) = p9 y9   )
± (	(h9 ¶ x · q9 x) = h9 c9   )
± (	(g9 f9 µ y · p9 y) = (g9 i9 µ y · p9 y)   )
± (	h9 d9 = (g9 i9 µ y · p9 y)   )

± (	(f8 µ x · p8 x) = (g8 f8 µ y · p8 y)   )
± (	(f8 µ z · p8 z) = aaa8   )
± (	(f8 µ x · p8 x) = p8 y8   )
± (	(h8 ¶ x · q8 x) = p8 y8   )
± (	(h8 ¶ x · q8 x) = h8 c8   )
± (	(g8 f8 µ y · p8 y) = (g8 i8 µ y · p8 y)   )
± (	h8 d8 = (g8 i8 µ y · p8 y)   )

²

(	(f9 µ z · p9 z) = aaa9   )
± (	(g9 f9 µ y · p9 y) = aaa9   )
± (	(g9 i9 µ y · p9 y) = aaa9   )
± (	(h9 ¶ x · q9 x) = aaa9   )
± (	h9 c9 = aaa9   )
± (	h9 d9 = aaa9   )
± (	p9 y9 = aaa9   )

± (	(f8 µ z · p8 z) = aaa8   )
± (	(g8 f8 µ y · p8 y) = aaa8   )
± (	(g8 i8 µ y · p8 y) = aaa8   )
± (	(h8 ¶ x · q8 x) = aaa8   )
± (	h8 c8 = aaa8   )
± (	h8 d8 = aaa8   )
± (	p8 y8 = aaa8   )
®);
=TEX


=IGN
Framework for a test:

"test_id";
set_goal(nil, ¬®);

... proof

store_mt_results_show mt_run [
("test_id", fn x => (pop_thm x; true), (), true)
];
=TEX


=SML
"003_01a";
set_goal(nil, ¬a=b ± a=x ± b=y ´ x=y®);

a(REPEAT strip_tac THEN ASM_PROP_EQ_T rewrite_tac nil);

store_mt_results_show mt_run [
("003_01a", fn x => (pop_thm x; true), (), true)
];
=TEX

=SML
"003_01b";
set_goal(nil, ¬a=b ± a=x ± b=y ´ x=y®);

a(PC_T1 "prop_eq" prove_tac nil);

store_mt_results_show mt_run [
("003_01b", fn x => (pop_thm x; true), (), true)
];
=TEX

=SML
"003_02a";
set_goal(nil, ¬c=x ± c=h ± h=e ± e=f ± f=g ± g=d ± d=j ± j=b ± b=y ´ x=y®);

a(REPEAT strip_tac THEN ASM_PROP_EQ_T rewrite_tac nil);

store_mt_results_show mt_run [
("003_02a", fn x => (pop_thm x; true), (), true)
];
=TEX

=SML
"003_02b";
set_goal(nil, ¬c=x ± c=h ± h=e ± e=f ± f=g ± g=d ± d=j ± j=b ± b=y ´ x=y®);

a(PC_T1 "prop_eq" prove_tac nil);

store_mt_results_show mt_run [
("003_02b", fn x => (pop_thm x; true), (), true)
];
=TEX

=SML
"003_02c";
set_goal(nil, ¬c=x ± c=h ± h=e ± e=f ± f=g ± g=d ± d=j ± j=b ± b=y ´ x=y®);

a(REPEAT strip_tac THEN PC_T1 "prop_eq" asm_prove_tac nil);

store_mt_results_show mt_run [
("003_02c", fn x => (pop_thm x; true), (), true)
];
=TEX

=SML
"003_03a";
set_goal(nil, ¬
µ a b ·	(	Fst (a, b) = a   )
±	(	Snd (a, b) = b   )
±	(	a = b ¤ Fst a = Fst b ± Snd a = Snd b   )
±	(	³ (a = b) ¤ ³ (Fst a = Fst b ± Snd a = Snd b)   )
®);

a(rewrite_tac [pair_clauses]);
a(pure_once_rewrite_tac [prove_rule [pair_clauses] ¬µ x · x = (Fst x, Snd x)®]);
a(rewrite_tac [pair_clauses]);

store_mt_results_show mt_run [
("003_03a", fn x => (pop_thm x; true), (), true)
];
=TEX

=SML
"003_03b";
set_goal(nil, ¬
µ a b ·	(	Fst (a, b) = a   )
±	(	Snd (a, b) = b   )
±	(	a = b ¤ Fst a = Fst b ± Snd a = Snd b   )
±	(	³ (a = b) ¤ ³ (Fst a = Fst b ± Snd a = Snd b)   )
®);

a(PC_T1 "prop_eq_pair" prove_tac nil);

store_mt_results_show mt_run [
("003_03b", fn x => (pop_thm x; true), (), true)
];
=TEX

=SML
"003_04a";
set_goal(nil, ¬
s=k ±
Fst k=l ± l=m ± m=j ±
Snd k=h ± h=g ± g=n ±
(j,n)=a ± a=q ± q=r ±
Fst r=p ±
Snd q=Fst b ± Fst b=c d ± c d=e
´
Fst s=p ± Snd k=e
®);

a(PC_T1 "prop_eq_pair" prove_tac nil);

store_mt_results_show mt_run [
("003_04a", fn x => (pop_thm x; true), (), true)
];
=TEX

=SML
"003_04b";
set_goal(nil, ¬
s=k ±
Fst k=l ± l=m ± m=j ±
Snd k=h ± h=g ± g=n ±
(j,n)=a ± a=q ± q=r ±
Fst r=p ±
Snd q=Fst b ± Fst b=c d ± c d=e
´
Fst s=p ± Snd k=e
®);

a(conv_tac (TOP_MAP_C pair_eq_conv));
a(prop_eq_prove_tac nil);

store_mt_results_show mt_run [
("003_04b", fn x => (pop_thm x; true), (), true)
];
=TEX

=SML
"004_04a";
set_goal(nil, ¬
((k1, k2), k3) = l  ±
(m2, m1) = l  ±
Fst n = m1  ±
Snd n = m2  ±
(t1, p) = n  ±
(t2, t3) = p  ±
(t1, t2, t3) = (s1, s2)  ±
s1 = u1  ±
s2 = u2  ±
u2 = (u3, u4)  ±
Fst u2 = r  ±
u4 = q
´
k3 = s1 ± k1 = r ± k2 = q
®);

a(PC_T1 "prop_eq_pair" asm_prove_tac nil);

store_mt_results_show mt_run [
("004_04a", fn x => (pop_thm x; true), (), true)
];
=TEX


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{SUMMARY OF RESULTS}

=SML
"Summary Of Results";

diag_string(summarize_mt_results());
=TEX

\end{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%********************************************************************
%--------------------------------------------------------------------
