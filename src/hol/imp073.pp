=IGN
********************************************************************************
imp073.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
%  $Id: imp073.doc,v 1.12 2005/12/16 16:52:52 rda Exp rda $ ‚Ñ§
=TEX
%%%%% YOU MAY WANT TO CHANGE POINT SIZE IN THE FOLLOWING:
\documentclass[a4paper,11pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{latexsym}
\usepackage{epsf}
\makeindex

%%%%% YOU WILL WANT TO CHANGE THE FOLLOWING TO SUIT YOU AND YOUR DOCUMENT:

\def\Title{Implementation for the Theory of Finite Sets}

\def\AbstractText{This document creates the theory of finite sets.}

\def\Reference{DS/FMU/IED/IMP072}

\def\Author{R.B.Jones}


\def\EMail{C/O {\tt rda@lemma-one.com}}

\def\Phone{C/O +44 7497 030682}

\def\Abstract{\begin{center}{\bf Abstract}\par\parbox{0.7\hsize}
{\small \AbstractText}
\end{center}}

%%%%% YOU MAY WANT TO CHANGE THE FOLLOWING TO GET A NICE FRONT PAGE:
\def\FrontPageTitle{ {\huge \Title } }
\def\FrontPageHeader{\raisebox{16ex}{\begin{tabular}[t]{c}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year\\\strut\\
\end{tabular}}}

%%%%% THE FOLLOWING DEFAULTS WILL GENERALLY BE RIGHT:

\def\Version{\VCVersion}
\def\Date{\FormatDate{\VCDate}}

%% LaTeX2e port: =TEX
%% LaTeX2e port: \documentstyle[hol1,11pt,TQ]{article}
%% LaTeX2e port: \ftlinepenalty=9999
%% LaTeX2e port: \makeindex
%% LaTeX2e port: \TPPproject{FST PROJECT}  %% Mandatory field
%% LaTeX2e port: \TPPtitle{Implementation for the Theory of Finite Sets}  %% Mandatory field
%% LaTeX2e port: \def\TPPheadtitle{Implementation for the Theory \cr
%% LaTeX2e port: of Functional Relations}
%% LaTeX2e port: \TPPref{DS/FMU/IED/IMP072}  %% Mandatory field
%% LaTeX2e port: \def\SCCSversion{$Revision: 1.12 $
%% LaTeX2e port: }
%% LaTeX2e port: \TPPissue{\SCCSversion}  %% Mandatory field
%% LaTeX2e port: \TPPdate{\FormatDate{$Date: 2005/12/16 16:52:52 $ %
%% LaTeX2e port: }}  %% Mandatory field
%% LaTeX2e port: \TPPstatus{Draft}			%% Mandatory field
%% LaTeX2e port: \TPPtype{SML Literate Script}
%% LaTeX2e port: \TPPkeywords{}
%% LaTeX2e port: \TPPauthor{R.B.Jones & WIN01}  %% Mandatory field
%% LaTeX2e port: %\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
%% LaTeX2e port: \TPPauthorisation{R.D.Arthan & FST Team Leader}
%% LaTeX2e port: \TPPabstract{This document creates the theory of finite sets.}
%% LaTeX2e port: \TPPdistribution{\parbox[t]{4.0in}{%
%% LaTeX2e port: 	    Project Library
%% LaTeX2e port: }}
%% LaTeX2e port: %\TPPclass{CLASSIFICATION}
%% LaTeX2e port: %\def\TPPheadlhs{}
%% LaTeX2e port: %\def\TPPheadcentre{}
%% LaTeX2e port: %def\TPPheadrhs{}
%% LaTeX2e port: %\def\TPPfootlhs{}
%% LaTeX2e port: %\def\TPPfootcentre{}
%% LaTeX2e port: %\def\TPPfootrhs{}
%% LaTeX2e port: \begin{document}
%% LaTeX2e port: \makeTPPfrontpage
%% LaTeX2e port: \vfill
%% LaTeX2e port: \begin{centering}
%% LaTeX2e port: 
%% LaTeX2e port: \bf Copyright \copyright\ : Lemma 1 Ltd. \number\year
%% LaTeX2e port: 
%% LaTeX2e port: \end{centering}

\begin{document}

\headsep=0mm
\FrontPage
\headsep=10mm

\setcounter{section}{-1}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item[Issues 1.1 (1992/05/11)--1.5 (1992/06/17)]
First drafts.
\item[Issue 1.6 (2000/06/30)]
Proved consistency of {\it Max} and {\it Min}.

This is the first draft of the document.

\item[Issue 1.7 (2002/10/17)] Copyright and banner updates for open source release.
\item[Issue 1.8 (2002/10/17)] PPHol-specific updates for open source release
\item[Issue 1.9 (2003/09/30)] Added finite set induction (theorem and tactic) and some basic theorems about finiteness.
\item[Issue 1.10 (2004/01/16)] Added theorems on sizes of finite sets.
\item[Issue 1.11 (2004/11/02)] Fixed bug in use of assumptions by finite set induction tactic.
\item[Issues 1.12 (2005/12/16)] Added in more theorems from the maths case studies.
\item[Issue 1.13 (2006/12/10)] Removed dead code.
\item[2014/07/23]
Augmented old RCS version numbers in the changes history with dates.
Dates will be used in place of version numbers in future.

\item[2015/04/17]
Ported to Lemma 1 document template.
%%%% END OF CHANGES HISTORY %%%%
\end{description}
\subsection{Changes Forecast}

\section{GENERAL}
\subsection{Scope}
This document contains an implementation of the theory of finite sets similar to that presented in section 4.4. of \cite{spivey88}.
The design is in \cite{DS/FMU/IED/DTD073}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains an implementation of the theory of finite sets.
\subsubsection{Dependencies}
This document takes its signature from \cite{DS/FMU/IED/DTD073}.
\subsubsection{Deficiencies}
None known.
\subsubsection{Possible Enhancements}
None known.
\section{THE THEORY ``finset''}
=SML
structure ‚¶èFinSetTheory‚¶é : FinSetTheory = struct
val _ = open_theory "fin_set";
val ‚¶è‚Ñï_def‚¶é = get_defn"-""‚Ñï";
val ‚¶èfinite_def‚¶é = get_defn"-""Finite";
val ‚¶èùîΩ_def‚¶é = get_defn"-""ùîΩ";
val ‚¶èùîΩ‚ãé1_def‚¶é = get_defn"-""ùîΩ‚ãé1";
val ‚¶èmin_def‚¶é = get_defn"-""Min";
val ‚¶èmax_def‚¶é = get_defn"-""Max";
val ‚¶èsize_def‚¶é = get_defn"-""Size";
val ‚¶èiter_def‚¶é = get_defn"-""Iter";
val ‚¶è‚áª_def‚¶é = get_defn"-""‚áª";
val ‚¶è‚§ï_def‚¶é = get_defn"-""‚§ï";
=TEX
See \cite{spivey89} section 4.4.
\subsection{Theorems and Tactics}
%%%%
%%%%

=SML
val _ = (
	push_consistency_goal‚åúMin‚åù;
	a prove_‚àÉ_tac;
	a(REPEAT strip_tac);
	a(cases_tac‚åúa' = {}‚åù THEN1 asm_rewrite_tac[]);
	a(POP_ASM_T (PC_T1 "hol2" strip_asm_tac));
	a(POP_ASM_T ante_tac THEN cov_induction_tac ‚åúx‚åù);
	a(cases_tac‚åú‚àÉy‚¶Åy < x ‚àß y ‚àà a'‚åù);
	(* *** Goal "1" *** *)
	a(all_asm_fc_tac[]);
	a(REPEAT strip_tac THEN ‚àÉ_tac‚åúMin''‚åù THEN REPEAT strip_tac);
	a(all_asm_fc_tac[]);
	(* *** Goal "2" *** *)
	a(REPEAT strip_tac THEN ‚àÉ_tac‚åúx‚åù THEN REPEAT strip_tac);
	a(all_asm_fc_tac[]);
	a(PC_T1"lin_arith" asm_prove_tac[]);
	save_consistency_thm‚åúMin‚åù(pop_thm());
	()
);
=TEX
%%%%
%%%%

=SML
val _ = (
	push_consistency_goal‚åúMax‚åù;
	a prove_‚àÉ_tac;
	a(REPEAT strip_tac);
	a(cases_tac‚åú‚àÉy‚¶Å‚àÄj‚¶Åj ‚àà a' ‚áí j ‚â§ y‚åù THEN_TRY asm_rewrite_tac[]);
	a(POP_ASM_T ante_tac THEN cov_induction_tac‚åúy‚åù THEN REPEAT strip_tac);
	a(cases_tac‚åú‚àÉz‚¶Åz < y ‚àß (‚àÄ j‚¶Å j ‚àà a' ‚áí j ‚â§ z)‚åù);
	(* *** Goal "1" *** *)
	a(all_asm_fc_tac[]);
	a(REPEAT strip_tac THEN ‚àÉ_tac‚åúMax''‚åù THEN REPEAT strip_tac);
	a(all_asm_fc_tac[]);
	(* *** Goal "2" *** *)
	a(‚àÉ_tac‚åúy‚åù THEN REPEAT strip_tac);
	a(all_asm_fc_tac[]);
	a(PC_T1"lin_arith" asm_prove_tac[]);
	save_consistency_thm‚åúMax‚åù(pop_thm());
	()
);
=TEX
%%%%
%%%%

=SML
val ‚¶èfinite_induction_thm‚¶é = save_thm("finite_induction_thm", (
push_goal([], ‚åú
		‚àÄp‚¶Å	p {} ‚àß (‚àÄa x‚¶Åa ‚àà Finite ‚àß p a ‚àß ¬¨x ‚àà a ‚áí p({x} ‚à™ a))
		‚áí 	‚àÄa‚¶Åa ‚àà Finite ‚áí p a
‚åù);
a(REPEAT strip_tac);
a(asm_ante_tac‚åúa ‚àà Finite‚åù);
a(rewrite_tac[get_spec‚åúFinite‚åù]);
a(REPEAT strip_tac);
a(spec_nth_asm_tac 1 ‚åú{b | b ‚àà Finite ‚àß p b}‚åù);
(* *** Goal "1" *** *)
a(swap_asm_concl_tac ‚åú¬¨ {} ‚àà Finite‚åù);
a(rewrite_tac[get_spec‚åúFinite‚åù]);
a(PC_T "hol1" (REPEAT strip_tac));
(* *** Goal "2" *** *)
a(swap_asm_concl_tac ‚åúa' ‚àà Finite‚åù);
a(asm_ante_tac ‚åú¬¨ {x} ‚à™ a' ‚àà Finite‚åù);
a(rewrite_tac[get_spec‚åúFinite‚åù]);
a(PC_T "hol1" (contr_tac));
a(spec_nth_asm_tac 1 ‚åús‚åù);
(* *** Goal "2.1" *** *)
a(list_spec_nth_asm_tac 5 [‚åúa''‚åù, ‚åúx'‚åù]);
(* *** Goal "2.2" *** *)
a(list_spec_nth_asm_tac 4 [‚åúa'‚åù, ‚åúx‚åù]);
(* *** Goal "3" *** *)
a(swap_asm_concl_tac ‚åú¬¨ p ({x} ‚à™ a')‚åù);
a(cases_tac‚åúx ‚àà a'‚åù);
(* *** Goal "3.1" *** *)
a(LEMMA_T‚åú{x} ‚à™ a' = a'‚åù asm_rewrite_thm_tac);
a(PC_T "hol1" (REPEAT strip_tac));
a(asm_rewrite_tac[]);
(* *** Goal "3.2" *** *)
a(list_spec_nth_asm_tac 6 [‚åúa'‚åù, ‚åúx‚åù]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
local
val ‚¶èa_‚àà_finite‚¶é = ‚åúa ‚àà Finite‚åù;
val ‚¶èf_i_tac‚¶é = gen_induction_tac1 finite_induction_thm;
in
fun ‚¶èfinite_induction_tac‚¶é (tm : TERM) : TACTIC = (
	if not (is_var tm)
	then term_fail "finite_induction_tac" 73001 [tm]
	else ( fn(asms, conc) =>
	let	val asm = find asms
			(fn t => ((term_match t a_‚àà_finite; true) handle Fail _ => false)
				andalso hd(snd(strip_app t)) ~=$ tm)
			handle Fail _ => fail "finite_induction_tac" 73002 [];
	in	if not (is_free_in tm conc)
			then term_fail "finite_induction_tac" 73003 [tm]
		else if any (asms drop (fn t => t =$ asm)) (is_free_in tm)
			then term_fail "finite_induction_tac" 73004 [tm]
		else	(asm_ante_tac asm THEN f_i_tac) (asms, conc)
	end
	)
);
end;
=TEX
%%%%
%%%%

=SML
val ‚¶èempty_finite_thm‚¶é = save_thm("empty_finite_thm", (
push_goal([], ‚åú{} ‚àà Finite‚åù);
a(rewrite_tac[get_spec‚åúFinite‚åù]);
a(PC_T "hol1" (REPEAT strip_tac));
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶èsingleton_‚à™_finite_thm‚¶é = save_thm("singleton_‚à™_finite_thm", (
push_goal([], ‚åú‚àÄ a x‚¶Å a ‚àà Finite ‚áí ({x} ‚à™ a) ‚àà Finite‚åù);
a(rewrite_tac[get_spec‚åúFinite‚åù] THEN (PC_T "hol1" (REPEAT strip_tac)));
a(spec_nth_asm_tac 3 ‚åús‚åù);
(* *** Goal "1" *** *)
a(list_spec_nth_asm_tac 3 [‚åúa'‚åù, ‚åúx'‚åù]);
(* *** Goal "2" *** *)
a(list_spec_nth_asm_tac 2 [‚åúa‚åù, ‚åúx‚åù]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶è‚äÜ_finite_thm‚¶é = save_thm("‚äÜ_finite_thm", (
push_goal([], ‚åú‚àÄa b‚¶Å a ‚àà Finite ‚àß b ‚äÜ a
	‚áí		b ‚àà Finite‚åù);
a(REPEAT strip_tac);
a(POP_ASM_T ante_tac THEN intro_‚àÄ_tac(‚åúb‚åù, ‚åúb‚åù));
a(finite_induction_tac ‚åúa‚åù THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a((lemma_tac‚åúb = {}‚åù THEN1 PC_T1 "sets_ext" asm_prove_tac[]) THEN all_var_elim_asm_tac1);
a(rewrite_tac[empty_finite_thm]);
(* *** Goal "2" *** *)
a(cases_tac‚åúb ‚äÜ a‚åù THEN1 all_asm_fc_tac[]);
a(lemma_tac‚åúb = {x} ‚à™ (b \ {x})‚åù THEN1
	(PC_T1 "sets_ext" asm_prove_tac[] THEN asm_fc_tac[] THEN all_var_elim_asm_tac));
a(POP_ASM_T once_rewrite_thm_tac THEN bc_thm_tac singleton_‚à™_finite_thm);
a(GET_NTH_ASM_T 4 bc_thm_tac);
a(PC_T1 "sets_ext" asm_prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶è‚à™_finite_thm‚¶é = save_thm ("‚à™_finite_thm", (
set_goal([], ‚åú‚àÄa b‚¶Å
	 (a ‚à™ b) ‚àà Finite ‚áî a ‚àà Finite ‚àß b ‚àà Finite
‚åù);
a(rename_tac[(‚åúa:'a SET‚åù, "A"),
	(‚åúb : 'a SET‚åù, "B")] THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(lemma_tac ‚åúA ‚äÜ A ‚à™ B‚åù THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
a(all_fc_tac[‚äÜ_finite_thm]);
(* *** Goal "2" *** *)
a(lemma_tac ‚åúB ‚äÜ A ‚à™ B‚åù THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
a(all_fc_tac[‚äÜ_finite_thm]);
(* *** Goal "3" *** *)
a(POP_ASM_T ante_tac THEN intro_‚àÄ_tac(‚åúB‚åù, ‚åúB‚åù));
a(finite_induction_tac ‚åúA‚åù THEN1 asm_rewrite_tac[]);
a(REPEAT strip_tac);
a(LEMMA_T‚åú({x} ‚à™ A) ‚à™ B = {x} ‚à™ A ‚à™ B‚åù
	rewrite_thm_tac
	THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
a(bc_thm_tac singleton_‚à™_finite_thm THEN REPEAT strip_tac);
a(all_asm_fc_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶è‚à©_finite_thm‚¶é  = save_thm ("‚à©_finite_thm",  (
set_goal([], ‚åú‚àÄa b ‚¶Å a ‚àà Finite ‚à® b ‚àà Finite ‚áí a ‚à© b ‚àà Finite‚åù);
a(REPEAT strip_tac);
(* *** Goal "1" *** *)
a(bc_thm_tac ‚äÜ_finite_thm THEN ‚àÉ_tac‚åúa‚åù THEN REPEAT strip_tac);
a(PC_T1 "sets_ext1" prove_tac[]);
(* *** Goal "2" *** *)
a(bc_thm_tac ‚äÜ_finite_thm THEN ‚àÉ_tac‚åúb‚åù THEN REPEAT strip_tac);
a(PC_T1 "sets_ext1" prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶èfinite_distinct_elems_thm‚¶é  = save_thm ("finite_distinct_elems_thm",  (
set_goal([], ‚åú‚àÄa‚¶Åa ‚àà Finite ‚áí ‚àÉlist‚¶Ålist ‚àà Distinct ‚àß Elems list = a‚åù);
a(REPEAT strip_tac);
a(finite_induction_tac ‚åúa‚åù THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(‚àÉ_tac‚åú[]‚åù THEN asm_rewrite_tac[elems_def, distinct_def] THEN PC_T1 "sets_ext1" prove_tac[]);
(* *** Goal "2" *** *)
a(‚àÉ_tac‚åúCons x list‚åù THEN all_var_elim_asm_tac1 THEN asm_rewrite_tac[elems_def, distinct_def]);
pop_thm()
));
=TEX
%%%%
%%%%
=SML
val ‚¶èlength_‚Üæ_‚â§_thm‚¶é  = save_thm ("length_‚Üæ_‚â§_thm",  (
set_goal([], ‚åú‚àÄlist a‚¶ÅLength( list ‚Üæ a) ‚â§ Length list‚åù);
a(REPEAT strip_tac);
a(list_induction_tac ‚åúlist‚åù THEN rewrite_tac[length_def, ‚Üæ_def]);
a(REPEAT strip_tac THEN cases_tac‚åúx ‚àà a‚åù THEN asm_rewrite_tac[length_def]);
a(PC_T1 "lin_arith" asm_prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%
=SML
val ‚¶èlength_‚Üæ_less_thm‚¶é  = save_thm ("length_‚Üæ_less_thm",  (
set_goal([], ‚åú‚àÄlist a‚¶Å¬¨Elems list \ a = {} ‚áí #(list ‚Üæ a) < # list‚åù);
a(‚àÄ_tac);
a(lemma_tac‚åú‚àÉn ‚¶Ån = #list‚åù THEN1 prove_‚àÉ_tac);
a(POP_ASM_T ante_tac THEN   intro_‚àÄ_tac(‚åúlist‚åù, ‚åúlist‚åù));
a(induction_tac ‚åún‚åù);
(* *** Goal "1" *** *)
a(strip_tac);
a(strip_asm_tac(‚àÄ_elim‚åúlist‚åù list_cases_thm) THEN all_var_elim_asm_tac1
	THEN rewrite_tac[length_def, elems_def]);
(* *** Goal "2" *** *)
a(strip_tac);
a(strip_asm_tac(‚àÄ_elim‚åúlist‚åù list_cases_thm) THEN all_var_elim_asm_tac1
	THEN rewrite_tac[length_def]);
a(REPEAT strip_tac);
a(POP_ASM_T ante_tac THEN rewrite_tac[elems_def]
	THEN PC_T1 "sets_ext1"  REPEAT strip_tac);
(* *** Goal "2.1" *** *)
a(all_var_elim_asm_tac1 THEN asm_rewrite_tac[length_def, ‚Üæ_def]);
a(LEMMA_T ‚åú#(list2 ‚Üæ a) ‚â§ #list2‚åù ante_tac THEN1 rewrite_tac[length_‚Üæ_‚â§_thm]);
a(PC_T1 "lin_arith" prove_tac[]);
(* *** Goal "2.2" *** *)
a(cases_tac‚åúx ‚àà a‚åù THEN asm_rewrite_tac[length_def, ‚Üæ_def]);
(* *** Goal "2.2.1" *** *)
a(lemma_tac‚åú¬¨Elems list2 \ a = {}‚åù THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
a(all_asm_fc_tac[]);
(* *** Goal "2.2.2" *** *)
a(lemma_tac‚åú¬¨Elems list2 \ a = {}‚åù THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
a(all_asm_fc_tac[]);
a(PC_T1 "lin_arith" asm_prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%
=SML
val ‚¶èelems_‚Üæ_thm‚¶é  = save_thm ("elems_‚Üæ_thm",  (
set_goal([], ‚åú‚àÄlist a‚¶ÅElems( list ‚Üæ a) = Elems list ‚à© a‚åù);
a(REPEAT strip_tac);
a(list_induction_tac ‚åúlist‚åù THEN rewrite_tac[elems_def, ‚Üæ_def]);
a(REPEAT strip_tac THEN cases_tac‚åúx ‚àà a‚åù THEN asm_rewrite_tac[elems_def]
	THEN PC_T1 "sets_ext1" asm_prove_tac[]);
pop_thm()
));
=TEX
=TEX
%%%%
%%%%

=SML
val ‚¶èdistinct_length_‚â§_thm‚¶é  = save_thm ("distinct_length_‚â§_thm",  (
set_goal([], ‚åú‚àÄlist1 list2 ‚¶Ålist1 ‚àà Distinct ‚àß Elems list1 = Elems list2 ‚áí #list1 ‚â§ #list2‚åù);
a(REPEAT ‚àÄ_tac);
a(lemma_tac‚åú‚àÉn ‚¶Ån = #list1‚åù THEN1 prove_‚àÉ_tac);
a(POP_ASM_T ante_tac THEN
	rewrite_tac[taut_rule‚åú‚àÄp1 p2 p3 ‚¶Å(p1 ‚áí p2 ‚áí p3) ‚áî (p1 ‚àß p2 ‚áí p3)‚åù]);
a( intro_‚àÄ_tac(‚åúlist2‚åù, ‚åúlist2‚åù) THEN   intro_‚àÄ_tac(‚åúlist1‚åù, ‚åúlist1‚åù));
a(induction_tac ‚åún‚åù);
(* *** Goal "1" *** *)
a(strip_tac);
a(strip_asm_tac(‚àÄ_elim‚åúlist1‚åù list_cases_thm) THEN all_var_elim_asm_tac1
	THEN rewrite_tac[length_def, elems_def]);
(* *** Goal "2" *** *)
a(REPEAT ‚àÄ_tac);
a(strip_asm_tac(‚àÄ_elim‚åúlist1‚åù list_cases_thm) THEN all_var_elim_asm_tac1
	THEN rewrite_tac[length_def, elems_def, distinct_def]);
a(REPEAT strip_tac);
a(lemma_tac‚åúElems list2' = Elems(list2 ‚Üæ ~ {x})‚åù);
(* *** Goal "2.1" *** *)
a(rewrite_tac[elems_‚Üæ_thm] THEN POP_ASM_T ante_tac);
a(PC_T1 "sets_ext1" rewrite_tac[complement_def]);
a(prove_tac[]);
a(contr_tac THEN all_var_elim_asm_tac);
(* *** Goal "2.2" *** *)
a(lemma_tac‚åú# list2' ‚â§ #(list2 ‚Üæ ~ {x})‚åù THEN1
	DROP_NTH_ASM_T 6 bc_thm_tac THEN REPEAT strip_tac);
a(POP_ASM_T ante_tac THEN LEMMA_T ‚åú#(list2 ‚Üæ ~{x}) < #list2‚åù ante_tac THEN_LIST
	[bc_thm_tac length_‚Üæ_less_thm, PC_T1 "lin_arith" prove_tac[]]);
a(PC_T1 "sets_ext1" rewrite_tac[complement_def]);
a(REPEAT strip_tac THEN rewrite_tac[]);
a(‚àÉ_tac‚åúx‚åù THEN1 DROP_NTH_ASM_T 2 (rewrite_thm_tac o eq_sym_rule));
a(PC_T1 "sets_ext1" prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶èdistinct_size_length_thm‚¶é  = save_thm ("distinct_size_length_thm",  (
set_goal([], ‚åú‚àÄlist a ‚¶Ålist ‚àà Distinct ‚àß Elems list = a ‚áí #a = #list‚åù);
a(REPEAT strip_tac);
a(rewrite_tac[size_def]);
a(bc_thm_tac (get_spec ‚åúMin‚åù) THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(‚àÉ_tac‚åúlist‚åù THEN REPEAT strip_tac);
(* *** Goal "2" *** *)
a(all_var_elim_asm_tac1);
a(bc_thm_tac distinct_length_‚â§_thm);
a(asm_rewrite_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶èsize_empty_thm‚¶é  = save_thm ("size_empty_thm",  (
set_goal([], ‚åú#{} = 0‚åù);
a(rewrite_tac[size_def]);
a(bc_thm_tac (get_spec ‚åúMin‚åù) THEN REPEAT strip_tac);
a(‚àÉ_tac‚åú[]‚åù THEN rewrite_tac[elems_def, length_def]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶èsize_singleton_‚à™_thm‚¶é  = save_thm ("size_singleton_‚à™_thm",  (
set_goal([], ‚åú‚àÄx a ‚¶Å a ‚àà Finite ‚àß ¬¨x ‚àà a ‚áí #({x} ‚à™ a) = #a + 1‚åù);
a(REPEAT strip_tac THEN all_fc_tac [finite_distinct_elems_thm]);
a(ALL_FC_T rewrite_tac[distinct_size_length_thm]);
a(lemma_tac‚åúCons x list ‚àà Distinct‚åù THEN1
	(all_var_elim_asm_tac1 THEN asm_rewrite_tac[distinct_def]));
a(lemma_tac‚åúElems(Cons x list) = {x} ‚à™ a‚åù THEN1 asm_rewrite_tac[elems_def]);
a(ALL_FC_T rewrite_tac[distinct_size_length_thm]);
a(rewrite_tac[length_def]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶èsize_singleton_thm‚¶é  = save_thm ("size_singleton_thm",  (
set_goal([], ‚åú‚àÄx ‚¶Å #{x} = 1‚åù);
a(REPEAT strip_tac);
a(LEMMA_T ‚åú#{x} = #[x]‚åù rewrite_thm_tac  THEN_LIST
	[id_tac, rewrite_tac[length_def]]);
a(bc_thm_tac distinct_size_length_thm);
a(rewrite_tac[elems_def, distinct_def]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶èsize_‚à™_thm‚¶é  = save_thm ("size_‚à™_thm",  (
set_goal([], ‚åú‚àÄa b ‚¶Å a ‚àà Finite ‚àß b ‚àà Finite ‚áí #(a ‚à™ b) + #(a ‚à© b) = #a + #b‚åù);
a(REPEAT strip_tac);
a(finite_induction_tac‚åúa‚åù THEN1 rewrite_tac[size_empty_thm]);
a(lemma_tac‚åúa ‚à™ b ‚àà Finite‚åù THEN1 asm_rewrite_tac[‚à™_finite_thm]);
a(cases_tac‚åú¬¨x ‚àà b‚åù);
(* *** Goal "1" *** *)
a(LEMMA_T ‚åú¬¨x ‚àà a ‚à™ b‚åù asm_tac THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
a(rewrite_tac[pc_rule1 "sets_ext1" prove_rule[]‚åú‚àÄA B C‚¶Å(A ‚à™ B) ‚à™ C = A ‚à™ B ‚à™ C‚åù]);
a(ALL_FC_T rewrite_tac[size_singleton_‚à™_thm]);
a(rewrite_tac[pc_rule1"lin_arith" prove_rule[]‚åú‚àÄi j‚¶Å(i + 1) + j = 1 + i + j‚åù]);
a(LEMMA_T‚åú({x} ‚à™ a) ‚à© b = a ‚à© b‚åù asm_rewrite_thm_tac);
a(POP_ASM_T ante_tac THEN PC_T1 "sets_ext1" prove_tac[]);
(* *** Goal "2" *** *)
a(LEMMA_T‚åú({x} ‚à™ a) ‚à™ b = a ‚à™ b ‚àß ({x} ‚à™ a) ‚à© b = {x} ‚à™ a ‚à© b‚åù asm_rewrite_thm_tac
	THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
a(lemma_tac‚åúa ‚à© b ‚àà Finite‚åù THEN1 ALL_FC_T rewrite_tac[‚à©_finite_thm]);
a(LEMMA_T ‚åú¬¨x ‚àà a ‚à© b‚åù asm_tac THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
a(ALL_FC_T rewrite_tac[size_singleton_‚à™_thm]);
a(rewrite_tac[pc_rule1"lin_arith" prove_rule[]‚åú‚àÄi j‚¶Å(i + 1) + j = 1 + i + j ‚àß i + j + 1 = 1 + i + j‚åù]);
a(REPEAT strip_tac);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶èsize_0_thm‚¶é  = save_thm ("size_0_thm",  (
set_goal([], ‚åú‚àÄa ‚¶Å a ‚àà Finite ‚áí (#a = 0 ‚áî a = {})‚åù);
a(REPEAT strip_tac THEN_TRY (all_var_elim_asm_tac THEN rewrite_tac[size_empty_thm]));
a(POP_ASM_T ante_tac THEN finite_induction_tac ‚åúa‚åù THEN
	ALL_FC_T rewrite_tac[size_singleton_‚à™_thm]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶èsize_1_thm‚¶é  = save_thm ("size_1_thm",  (
set_goal([], ‚åú‚àÄa ‚¶Å a ‚àà Finite ‚áí (#a = 1 ‚áî ‚àÉx‚¶Åa = {x})‚åù);
a(REPEAT strip_tac THEN_TRY (all_var_elim_asm_tac1 THEN rewrite_tac[size_singleton_thm]));
a(POP_ASM_T ante_tac THEN finite_induction_tac ‚åúa‚åù);
(* *** Goal "1" *** *)
a(rewrite_tac[size_empty_thm]);
(* *** Goal "2" *** *)
a(ALL_FC_T rewrite_tac[size_singleton_‚à™_thm]);
a(ALL_FC_T1 fc_‚áî_canon  rewrite_tac[size_0_thm] THEN REPEAT strip_tac THEN all_var_elim_asm_tac1);
a(‚àÉ_tac‚åúx‚åù THEN rewrite_tac[]);
(* *** Goal "3" *** *)
a(ALL_FC_T rewrite_tac[size_singleton_‚à™_thm]);
a(asm_rewrite_tac[size_singleton_thm]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶è‚ãÉ_finite_thm‚¶é  = save_thm ("‚ãÉ_finite_thm",  (
set_goal([], ‚åú‚àÄu ‚¶Å
	u ‚àà Finite
‚àß	u ‚äÜ Finite
‚áí	‚ãÉu ‚àà Finite‚åù);
a(REPEAT strip_tac THEN POP_ASM_T (ante_tac o pc_rule1"sets_ext1" rewrite_rule[]));
a(finite_induction_tac‚åúu‚åù);
(* *** Goal "1" *** *)
a(rewrite_tac[empty_finite_thm]);
(* *** Goal "2" *** *)
a(REPEAT strip_tac);
a(spec_nth_asm_tac 1 ‚åúx'‚åù);
(* *** Goal "3" *** *)
a(REPEAT strip_tac);
a(spec_nth_asm_tac 1 ‚åúx‚åù);
a(rewrite_tac[pc_rule1"sets_ext1" prove_rule[]‚åú‚àÄa b‚¶Å‚ãÉ(a ‚à™ b) = ‚ãÉa ‚à™ ‚ãÉ b‚åù]);
a(LEMMA_T‚åú‚ãÉ{x} =x‚åù rewrite_thm_tac THEN1 PC_T1 "sets_ext1" prove_tac[]);
(* *** Goal "3.1" *** *)
a(‚àÉ_tac‚åúx‚åù THEN REPEAT strip_tac);
(* *** Goal "3.2" *** *)
a(asm_rewrite_tac[‚à™_finite_thm]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶èpigeon_hole_thm1‚¶é  = snd ("pigeon_hole_thm1",  (
set_goal([], ‚åú‚àÄu ‚¶Å
	u ‚àà Finite
‚àß	(‚àÄa‚¶Åa ‚àà u ‚áí a ‚àà Finite ‚àß #a ‚â§ 1)
‚áí	#(‚ãÉu) ‚â§ #u‚åù);
a(REPEAT strip_tac THEN POP_ASM_T ante_tac);
a(finite_induction_tac‚åúu‚åù);
(* *** Goal "1" *** *)
a(rewrite_tac[size_empty_thm]);
(* *** Goal "2" *** *)
a(REPEAT strip_tac);
a(spec_nth_asm_tac 1 ‚åúu'‚åù);
(* *** Goal "3" *** *)
a(REPEAT strip_tac);
a(spec_nth_asm_tac 1 ‚åúu'‚åù);
(* *** Goal "4" *** *)
a(rename_tac[(‚åúx‚åù, "a")] THEN REPEAT strip_tac);
a(rewrite_tac[pc_rule1"sets_ext1" prove_rule[]‚åú‚àÄa b‚¶Å‚ãÉ(a ‚à™ b) = ‚ãÉa ‚à™ ‚ãÉ b‚åù]);
a(LEMMA_T‚åú‚ãÉ{a} =a‚åù rewrite_thm_tac THEN1 PC_T1 "sets_ext1" prove_tac[]);
(* *** Goal "4.1" *** *)
a(‚àÉ_tac‚åúa‚åù THEN REPEAT strip_tac);
(* *** Goal "4.2" *** *)
a(ALL_FC_T rewrite_tac[size_singleton_‚à™_thm]);
a(lemma_tac ‚åúu ‚äÜ Finite‚åù THEN1
	(PC_T1 "sets_ext1"  REPEAT strip_tac THEN all_asm_fc_tac[]));
a(spec_nth_asm_tac 2 ‚åúa‚åù);
a(all_fc_tac[‚ãÉ_finite_thm]);
a(lemma_tac‚åú#a = 0 ‚à® #a = 1‚åù THEN1 PC_T1 "lin_arith" asm_prove_tac[]
	THEN POP_ASM_T ante_tac);
(* *** Goal "4.2.1" *** *)
a(ALL_FC_T1 fc_‚áî_canon  rewrite_tac[size_0_thm]);
a(REPEAT strip_tac THEN  ALL_FC_T asm_rewrite_tac[size_singleton_‚à™_thm]);
a(PC_T1 "lin_arith" asm_prove_tac[]);
(* *** Goal "4.2.2" *** *)
a(ALL_FC_T1 fc_‚áî_canon  rewrite_tac[size_1_thm]);
a(REPEAT strip_tac THEN cases_tac‚åúa ‚äÜ ‚ãÉu‚åù);
(* *** Goal "4.2.2.1" *** *)
a(ALL_FC_T rewrite_tac[pc_rule1"sets_ext1" prove_rule[]‚åú‚àÄb‚¶Åa ‚äÜ b ‚áí a ‚à™ b = b‚åù]);
a(PC_T1 "lin_arith" asm_prove_tac[]);
(* *** Goal "4.2.2.2" *** *)
a(all_var_elim_asm_tac1);
a(ALL_FC_T (MAP_EVERY asm_tac) [pc_rule1"sets_ext1" prove_rule[]‚åú‚àÄb‚¶Å¬¨ {x} ‚äÜ b ‚áí ¬¨x ‚àà b‚åù]);
a(ALL_FC_T asm_rewrite_tac[size_singleton_‚à™_thm]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶èpigeon_hole_thm‚¶é  = save_thm ("pigeon_hole_thm",  (
set_goal([], ‚åú‚àÄu ‚¶Å
	u ‚àà Finite
‚àß	u ‚äÜ Finite
‚àß	#u < #(‚ãÉu)
‚áí	‚àÉa‚¶Åa ‚àà u ‚àß #a > 1‚åù);
a(PC_T "sets_ext1" contr_tac);
a(lemma_tac‚åú‚àÄ a‚¶Å a ‚àà u ‚áí a ‚àà Finite ‚àß # a ‚â§ 1‚åù THEN1
	(REPEAT strip_tac THEN1 all_asm_fc_tac[]));
(* *** Goal "1" *** *)
a(spec_nth_asm_tac 2 ‚åúa‚åù THEN PC_T1 "lin_arith" asm_prove_tac[]);
(* *** Goal "2" *** *)
a(all_fc_tac[pigeon_hole_thm1] THEN PC_T1 "lin_arith" asm_prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶è‚äÜ_size_‚â§_thm‚¶é = save_thm("‚äÜ_size_‚â§_thm", (
set_goal([], ‚åú‚àÄa b‚¶Å a ‚àà Finite ‚àß b ‚äÜ a ‚áí #b ‚â§ #a‚åù);
a(REPEAT strip_tac);
a(POP_ASM_T ante_tac THEN intro_‚àÄ_tac(‚åúb‚åù, ‚åúb‚åù));
a(finite_induction_tac‚åúa‚åù THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(LEMMA_T ‚åúb = {}‚åù rewrite_thm_tac);
a(PC_T1"sets_ext1" asm_prove_tac[]);
(* *** Goal "2" *** *)
a(cases_tac‚åúx ‚àà b‚åù);
(* *** Goal "2.1" *** *)
a(PC_T1 "predicates" lemma_tac‚åúb \ {x} ‚äÜ a ‚àß ¬¨x ‚àà b \ {x}‚åù
	THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
a(all_fc_tac[‚äÜ_finite_thm]);
a(LEMMA_T‚åúb = {x} ‚à™ (b \ {x})‚åù once_rewrite_thm_tac
	THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
a(ALL_FC_T rewrite_tac[size_singleton_‚à™_thm]);
a(all_asm_fc_tac[]);
(* *** Goal "2.2" *** *)
a(lemma_tac‚åúb ‚äÜ a‚åù THEN1 PC_T1 "sets_ext1" asm_prove_tac[]);
(* *** Goal "2.2.1" *** *)
a(asm_fc_tac[] THEN all_var_elim_asm_tac);
(* *** Goal "2.2.2" *** *)
a(ALL_FC_T rewrite_tac[size_singleton_‚à™_thm]);
a(asm_fc_tac[] THEN PC_T1 "lin_arith" asm_prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶è‚äÜ_size_less_thm‚¶é = save_thm ("‚äÜ_size_less_thm", (
set_goal([],‚åú‚àÄa b‚¶Å a ‚àà Finite ‚àß b ‚äÜ a ‚àß ¬¨b = a ‚áí #b < #a‚åù);
a(REPEAT strip_tac);
a(lemma_tac‚åúa \ b ‚äÜ a ‚àß ¬¨a \ b = {}‚åù THEN1
	PC_T1 "sets_ext1" asm_prove_tac[]);
a(REPEAT strip_tac THEN all_fc_tac[‚äÜ_finite_thm]);
a(LEMMA_T ‚åú# (b ‚à™ (a \ b)) + # (b ‚à© (a \ b)) = # b + # (a \ b)‚åù ante_tac THEN1
	(bc_thm_tac size_‚à™_thm THEN REPEAT strip_tac));
a(LEMMA_T ‚åúb ‚à™ (a \ b) = a ‚àß b ‚à© (a \ b) = {}‚åù rewrite_thm_tac THEN1
	PC_T1 "sets_ext1" asm_prove_tac[]);
a(rewrite_tac[size_empty_thm]);
a(STRIP_T rewrite_thm_tac);
a(lemma_tac ‚åú¬¨ #(a \ b) = 0‚åù THEN_LIST
	[id_tac, PC_T1 "lin_arith" asm_prove_tac[]]);
a(ALL_FC_T1 fc_‚áî_canon asm_rewrite_tac[size_0_thm]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶èmin_‚àà_thm‚¶é = save_thm("min_‚àà_thm", (
set_goal([], ‚åú‚àÄn a‚¶Å n ‚àà a ‚áí Min a ‚àà a‚åù);
a(‚àÄ_tac THEN cov_induction_tac ‚åún:‚Ñï‚åù THEN REPEAT strip_tac);
a(cases_tac‚åú‚àÉm‚¶Å m < n ‚àß m ‚àà a‚åù);
(* *** Goal "1" *** *)
a(all_asm_fc_tac[]);
(* *** Goal "2" *** *)
a(LEMMA_T ‚åúMin a = n‚åù asm_rewrite_thm_tac);
a(bc_thm_tac(get_spec‚åúMin‚åù) THEN REPEAT strip_tac);
a(spec_nth_asm_tac 2 ‚åúi‚åù);
a(PC_T1 "lin_arith" asm_prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶èmin_‚â§_thm‚¶é = save_thm( "min_‚â§_thm", (
set_goal([], ‚åú‚àÄn a‚¶Å n ‚àà a ‚áí Min a ‚â§ n‚åù);
a(‚àÄ_tac THEN cov_induction_tac ‚åún:‚Ñï‚åù THEN REPEAT strip_tac);
a(cases_tac‚åú‚àÉm‚¶Å m < n ‚àß m ‚àà a‚åù);
(* *** Goal "1" *** *)
a(all_asm_fc_tac[]);
a(PC_T1 "lin_arith" asm_prove_tac[]);
(* *** Goal "2" *** *)
a(LEMMA_T ‚åúMin a = n‚åù rewrite_thm_tac);
a(bc_thm_tac(get_spec‚åúMin‚åù) THEN REPEAT strip_tac);
a(spec_nth_asm_tac 2 ‚åúi‚åù);
a(PC_T1 "lin_arith" asm_prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%
=SML
val ‚¶èmax_‚àà_thm‚¶é = save_thm("max_‚àà_thm", (
set_goal([], ‚åú‚àÄm n a‚¶Å (‚àÄi‚¶Åi ‚àà a ‚áí i ‚â§ m) ‚àß n ‚àà a ‚áí Max a ‚àà a‚åù);
a(‚àÄ_tac THEN induction_tac ‚åúm:‚Ñï‚åù THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(all_asm_fc_tac[] THEN all_var_elim_asm_tac1);
a(all_fc_tac[get_spec‚åúMax‚åù] THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(cases_tac‚åúm + 1 ‚àà a‚åù
	THEN1 (all_fc_tac[get_spec‚åúMax‚åù] THEN asm_rewrite_tac[]));
a(DROP_NTH_ASM_T 4 bc_thm_tac THEN ‚àÉ_tac‚åún‚åù
	THEN REPEAT strip_tac);
a(LIST_DROP_NTH_ASM_T [4] all_fc_tac);
a(cases_tac‚åúi = m + 1‚åù THEN1 all_var_elim_asm_tac1);
a(PC_T1 "lin_arith" asm_prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶è‚â§_max_thm‚¶é = save_thm("‚â§_max_thm", (
set_goal([], ‚åú‚àÄm n a‚¶Å (‚àÄi‚¶Åi ‚àà a ‚áí i ‚â§ m) ‚àß n ‚àà a ‚áí n ‚â§ Max a‚åù);
a(‚àÄ_tac THEN induction_tac ‚åúm:‚Ñï‚åù THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(all_asm_fc_tac[] THEN all_var_elim_asm_tac1);
a(all_fc_tac[get_spec‚åúMax‚åù] THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(cases_tac‚åúm + 1 ‚àà a‚åù
	THEN1 (all_fc_tac[get_spec‚åúMax‚åù] THEN asm_rewrite_tac[]
		THEN all_asm_fc_tac[]));
a(DROP_NTH_ASM_T 4 bc_thm_tac THEN REPEAT strip_tac);
a(LIST_DROP_NTH_ASM_T [4] all_fc_tac);
a(cases_tac‚åúi = m + 1‚åù THEN1 all_var_elim_asm_tac1);
a(PC_T1 "lin_arith" asm_prove_tac[]);
pop_thm()
));
=TEX
%%%%
%%%%

=SML
val ‚¶èfinite_‚äÜ_well_founded_thm‚¶é = save_thm("finite_‚äÜ_well_founded_thm", (
set_goal([],‚åú‚àÄp a‚¶Å
	a ‚àà Finite
‚àß	p a
‚áí	‚àÉb‚¶Å
	b ‚äÜ a
‚àß	p b
‚àß	‚àÄc‚¶Åc ‚äÜ b ‚àß p c ‚áí c = b‚åù);
a(REPEAT strip_tac);
a(PC_T1 "predicates" lemma_tac ‚åú#a ‚àà {n | ‚àÉt‚¶Å t ‚äÜ a ‚àß p t ‚àß n = #t}‚åù);
(* *** Goal "1" *** *)
a(REPEAT strip_tac);
a(‚àÉ_tac‚åúa‚åù THEN REPEAT strip_tac);
(* *** Goal "2" *** *)
a(all_fc_tac[min_‚àà_thm]);
a(‚àÉ_tac‚åút‚åù THEN REPEAT strip_tac);
a(contr_tac THEN all_fc_tac[‚äÜ_finite_thm]);
a(all_fc_tac[‚äÜ_size_less_thm]);
a(DROP_NTH_ASM_T 9 discard_tac);
a(PC_T1 "predicates" lemma_tac ‚åú#c ‚àà {n | ‚àÉt‚¶Å t ‚äÜ a ‚àß p t ‚àß n = #t}‚åù);
(* *** Goal "2.1" *** *)
a(REPEAT strip_tac);
a(‚àÉ_tac‚åúc‚åù THEN REPEAT strip_tac);
a(PC_T1 "sets_ext1" asm_prove_tac[]);
(* *** Goal "2.2" *** *)
a(all_fc_tac[min_‚â§_thm]);
a(PC_T1 "lin_arith" asm_prove_tac[]);
pop_thm()
));
=TEX
\subsection{Derived Definitions}
\subsection{End of Theory ``finset''}
\section{CONVERSIONS}
=TEX
=SML
end; (* of structure FinSetTheory *)
open FinSetTheory;
=TEX
\newpage
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}



