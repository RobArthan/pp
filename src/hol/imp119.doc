=IGN
********************************************************************************
imp119.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
\documentclass[a4paper,12pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{epsf}
\makeindex

\def\Title{ Quantifier Elimination Toolkit: Implementation }

\def\Abstract{\begin{center}
{\bf Abstract}\par\parbox{0.7\hsize}
{\small This document gives the implementation of some tools that assist in developing quantifier elimination procedures.}
\end{center}}

\def\Reference{LEMMA1/HOL/IMP119}

\def\Author{R.D. Arthan}

\def\EMail{{\tt rda@lemma-one.com}}

\def\Phone{+44 118 958 4409}

\def\Fax{+44 118 956 1920}

%%%%% YOU MAY WANT TO CHANGE THE FOLLOWING TO GET A NICE FRONT PAGE:
\def\FrontPageTitle{ {\huge \Title } }
\def\FrontPageHeader{\raisebox{16ex}{\begin{tabular}[t]{c}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year\\\strut\\
\end{tabular}}}
\begin{centering}



\end{centering}

%%%%% THE FOLLOWING DEFAULTS WILL GENERALLY BE RIGHT:

\def\Version{$Revision: 1.25 $%
}
\def\Date{\FormatDate{$Date: 2007/05/16 15:23:37 $%
}}

%%%%% NOW BEGIN THE DOCUMENT AND MAKE THE FRONT PAGE

\begin{document}
\headsep=0mm
\FrontPage
\headsep=10mm

%%%%% STANDARD RED-TAPE SECTIONS (MAY WANT TO INTERLEAVE SOME \newpage COMMANDS IN THESE)

%%%%% CONTENTS:

\subsection{Contents}

\tableofcontents

%%%%% REFERENCES:

\newpage
\subsection{References}

\bibliographystyle{fmu}

%%%%% CHANGE THE FOLLOWING AS NECESSARY (E.G., TO PICK UP daz.bib):
{\raggedright
\bibliography{fmu}
}
%%%%% CHANGES HISTORY:
\subsection{Changes History}
\begin{description}
\item[Issues 1.1] First draft.
\end{description}

%%%%%  CHANGES FORECAST:

\subsection{Changes Forecast}

None.

%%%%% DISTRIBUTION LIST

\subsection{Distribution}

Lemma 1 build system.

\newpage

\section{Introduction}
\subsection{Scope}
This document gives the implementation of tools that assist in developing quantifier elimination procedures.

\subsection{Purpose and Background}
See \cite{LEMMA1/HOL/DTD119}.


\section{THE STRUCTURE}


=TEX
=SML
structure ÛQuantElimToolsÝ : QuantElimTools = struct
val Ûorig_cur_theoryÝ = get_current_theory_name();
val _ = (open_theory "basic_hol"; push_pc "basic_hol");
(*
=TEX
Define a quantifier to be a boolean term obtained by applying a constant to a (possibly paired) Ì-abstraction.
=SML
*)
fun Ûis_quantÝ (tm : TERM) : bool = (
	let	val (ifier, lambda) = dest_app tm;
	in	type_of tm = BOOL andalso
		is_const ifier andalso
		is_Ì lambda
	end	handle Fail _ => false
);
fun Ûdest_quantÝ (tm : TERM) : TERM * TERM * TERM = (
	let	val (ifier, lambda) = dest_app tm;
		val (var_s, mtrx) = dest_Ì lambda;
	in	if	type_of tm = BOOL
		andalso	is_const ifier
		then	(ifier, var_s, mtrx)
		else	term_fail "dest_quant" 119001 [tm]
	end	handle Fail _ => term_fail "dest_quant" 119001 [tm]
);
fun Ûmk_quantÝ ((ifier, var_s, mtrx) : TERM * TERM * TERM) : TERM = (
	mk_app(ifier, mk_Ì(var_s, mtrx))
);
(*
=TEX
Conversional to apply a conversion to the matrix of a quantifier:
=SML
*)
fun ÛQUANT_CÝ (conv : CONV) : CONV = (fn tm =>
	if	is_quant tm
	then	RAND_C(Ì_C conv) tm
	else	fail_conv tm
);
(*
=TEX
Conversional to apply a conversion to each quantification in a nest of quantifications:
=SML
*)
fun ÛQUANTS_CÝ (conv : CONV) : CONV = (fn tm =>
	let	val (_, _, mtrx) = dest_quant tm;
	in	if	is_quant mtrx
		then	RAND_C(Ì_C (QUANTS_C conv)) THEN_C conv
		else	conv
	end	tm
);
(*
=TEX
Conversional to map a conversion over the propositional atoms in a term.
Fails if the conversion applies nowhere.
=SML
*)
fun ÛPROP_ATOM_CÝ (conv : CONV) : CONV = (fn tm =>
	let	val recur_conv = PROP_ATOM_C conv;
	in	case dest_term tm of
			D± _ => LEFT_C recur_conv AND_OR_C RIGHT_C recur_conv
		|	D² _ => LEFT_C recur_conv AND_OR_C RIGHT_C recur_conv
		|	D´ _ => LEFT_C recur_conv AND_OR_C RIGHT_C recur_conv
		|	D¤ _ => LEFT_C recur_conv AND_OR_C RIGHT_C recur_conv
		|	D³ _ => RAND_C recur_conv
		|	_ => conv
	end	tm 
);
(*
=TEX
Conversional to map a conversion over the propositional literals in a term.
Fails if the conversion applies nowhere.
=SML
*)
fun ÛPROP_LIT_CÝ (conv : CONV) : CONV = (fn tm =>
	let	val recur_conv = PROP_LIT_C conv;
	in	case dest_term tm of
			D± _ => LEFT_C recur_conv AND_OR_C RIGHT_C recur_conv
		|	D² _ => LEFT_C recur_conv AND_OR_C RIGHT_C recur_conv
		|	D´ _ => LEFT_C recur_conv AND_OR_C RIGHT_C recur_conv
		|	D¤ _ => LEFT_C recur_conv AND_OR_C RIGHT_C recur_conv
		|	_ => conv
	end	tm 
);
(*
=IGN
PROP_ATOM_C (¶‰1_conv) ¬a ¤ (¶‰1x· x = y ± µa·a = y) ´ ³ ((¶‰1x·a = x) ² e)®;
PROP_ATOM_C (¶_uncurry_conv) ¬a ¤ (¶‰1x· x = y ± µa·a = y) ´ ³ ((¶‰1x·a = x) ² e)®;
¶_uncurry_conv ¬¶ (x, y)· x = y ± µa·a = y®;
µ_uncurry_conv ¬¶ (x, y)· x = y ± µa·a = y®;
¶‰1_conv ¬¶‰1 (x, y)· x = y ± µa·a = y®;

=TEX
Conversional to map a conversion over the innermost quantifier in a term.
=SML
*)
fun ÛINNERMOST_QUANT_CÝ (conv : CONV) : CONV = (fn tm =>
	let	val recur_conv = INNERMOST_QUANT_C conv;
		val checked_conv = COND_C is_quant conv fail_conv;
	in	PROP_ATOM_C (QUANT_C recur_conv ORELSE_C checked_conv)
	end	tm
);
(*
=TEX
Conversional to map a conversions over all the quantifiers in a term, innermost quantifiers first.
If the conversion succeeds it is retried, so it should fail if it cannot make any progress.
=SML
*)
fun ÛQUANT_MAP_CÝ (conv : CONV) : CONV = (fn tm =>
	(INNERMOST_QUANT_C conv THEN_TRY_C QUANT_MAP_C conv) tm
);
(*
=TEX
The identity conversional.
=SML
*)
val ÛID_CÝ : CONV -> CONV = fn conv => conv;
(*
=TEX
Conversional to carry out a sequence of transformation given by conversions.
The conversions are tried one after the other, and the process only fails if none of the conversions is applicable.
Associated with each conversion is a conversional which can be used to diver the process into subterms of the result of a transformation.
For example, one might transform a unique existential quantification into an existential whose matrix contains a universal and then divert attention to the universal.
=SML
*)
fun ÛFIRST_THEN_CÝ
	(pairs : (CONV * (CONV -> CONV)) list)
	: CONV = (
	let	fun aux changed [] = (
			if	changed
			then	id_conv
			else	fail_conv
		) | aux changed ((conv, x_c)::more) = (fn tm =>
			(conv THEN_C x_c (aux true more)) tm
			handle Fail _ => aux changed more tm
		);
	in	aux false pairs
	end
);
(*
=TEX
=SML
*)
(*
=IGN
val conv1 = FIRST_THEN_C [
	(¶‰1_conv, (fn c => QUANT_C(PROP_ATOM_C (QUANTS_C c)) THEN_C c)),
	(¶_uncurry_conv, QUANTS_C),
	(µ_uncurry_conv, QUANTS_C),
	(¤_t_conv, ID_C)];
conv1 ¬¶‰1(x, y)·x = y®;
QUANTS_C ¤_t_conv ¬¶y·x = y®;

=TEX
Conversion to change universal quantifier into negated existential.
=SML
*)
val Ûsimple_µ_³_¶_³_convÝ : CONV = 
let	val conv1 : CONV = simple_eq_match_conv (taut_rule ¬µp·p ¤ ³(³ p)®);
in	fn tm =>
	(dest_simple_µ tm; (conv1 THEN_C RAND_C ³_µ_conv) tm)
end;
(*
=IGN
fun SHOW_C (conv : CONV) : CONV = (fn tm =>
	(diag_line("SHOW_C: " ^ string_of_term tm); conv tm)
);
=TEX
Propositional negation normal form conversion:
=SML
*)
val Ûnnf_convÝ : CONV =
	PC_C1 "predicates" pure_rewrite_conv
	(map taut_rule  [
		¬µp1 p2· ³(p1 ± p2) ¤ ³p1 ² ³p2®,
		¬µp1 p2· ³(p1 ² p2) ¤ ³p1 ± ³p2®,
		¬µp1 p2· ³(p1 ´ p2) ¤ p1 ± ³p2®,
		¬µp1 p2· ³(p1 ¤ p2) ¤ p1 ± ³p2 ² ³p1 ± p2®,
		¬µp1 p2· (p1 ¤ p2) ¤ p1 ± p2 ² ³p1 ± ³p2®,
		¬µp· ³(³ p) ¤ p®,
		¬³T ¤ F®,
		¬³F ¤ T®
	]);
(*
=IGN
nnf_conv ¬a ± ³(b ¤ c) ² d ¤ ³(c ± d)®;
=TEX
Given a nested conjunction,
=INLINEFT
a ± b ± c ± d
=TEX
, the following conversion finds an operand with a given property, e.g., $c$
and ripples it up to the top:
=INLINEFT
c ± a ± b ± d
=TEX
.
Takes care to fail if nothing to do.
=SML
*)
val Ûfind_in_±_convÝ : (TERM -> bool) -> CONV =
let	val comm_thm = taut_rule ¬µp1 p2· p1 ± p2 ¤ p2 ± p1®;
	val bubble_thm = taut_rule ¬µp1 p2 p3· p1 ± p2 ± p3 ¤ p2 ± p1 ± p3®;
	val comm_conv = simple_eq_match_conv comm_thm;
	val bubble_conv = simple_eq_match_conv bubble_thm;
	fun aux_conv first test tm = (
		let	val (a, b) = dest_± tm;
		in	if	test a
			then	if	first
				then	fail_conv tm
				else	refl_conv tm
			else if	test b
			then	comm_conv tm
			else	(RIGHT_C (aux_conv false test) THEN_C bubble_conv) tm
		end
	);
in	aux_conv true
end;
(*
=SML
*)
(*
=IGN
nnf_conv ¬a ± ³(b ¤ c) ² d ¤ ³(c ± d)®;
=TEX
Given a nested conjunction
=INLINEFT
a ± b ± ...
=TEX
\ and some property of terms, the following conversion splits it up in to the form:
=INLINEFT
(c ± d ± ...) ± (e ± f ± ...)
=TEX
, where $c, d, \ldots$ satisfy the property and $e, f, \ldots$ do not.
Takes care to fail if nothing to do.
=SML
*)
fun split_±_conv (test : (TERM -> bool)) : CONV = (fn tm =>
let	val shift_thm = taut_rule ¬µp1 p2 p3· p1 ± (p2 ± p3) ¤ (p2 ± p1) ± p3®;
	val find_conv = find_in_±_conv test
		ORELSE_C 
		COND_C (test o fst o dest_±) id_conv fail_conv;
	val step_conv = RIGHT_C find_conv
		THEN_C simple_eq_match_conv shift_thm;
	val ts = strip_± tm;
in	if	all ts test
	then	fail_conv
	else find_in_±_conv test AND_OR_C REPEAT_C1 step_conv
end tm
);
(*
=IGN
split_±_conv is_eq ¬x = y ± x < 1 ± a = b ± d > 3®;
split_±_conv is_eq ¬x < y ± x < 1 ± a = b ± d > 3®;
split_±_conv is_eq ¬x < y ± x < 1®;
split_±_conv is_eq ¬x = y ± x = 1®;
split_±_conv is_eq ¬x = y ± x = 1 ± x = 1®;

=SML
*)
(*
=TEX
Elimination of existential quantifier when the matrix is a boolean constant:
=SML
*)
val Ûsimple_¶_const_elim_convÝ : CONV =
let	val thm = pc_rule1 "predicates" prove_rule[]
		¬µp· (¶x· p) ¤ p®;
in	simple_eq_match_conv thm
end;
(*
=TEX
The one-point rule as a conversion:
=INLINEFT
(¶x·x = c ± p) ¤ p[c/x]
=SML
*)
val Ûsimple_one_point_convÝ : CONV =
let	val thm1a = pc_rule1 "predicates" prove_rule[]
		¬µc : 'a; p· (¶x·x = c ± p x) ¤ p c®;
	val thm1b = pc_rule1 "predicates" prove_rule[]
		¬µx c : 'a; p· (¶x·c = x ± p x) ¤ p c®;
	val ty = ”'a®;
	val thm1c = pc_rule1 "predicates" prove_rule[]
		¬µc· (¶x·x = c) ¤ T®;
	val thm1d = pc_rule1 "predicates" prove_rule[]
		¬µc·(¶x·c = x) ¤ T®;
	val thm1e = pc_rule1 "predicates" prove_rule[]
		¬(¶x·x = x) ¤ T®;
in	fn tm =>
	let	val (v, body) = dest_simple_¶ tm;
		val (p1, p2) = dest_± body;
		val (x, c) = dest_eq p1;
	in	if	x = v
		then let
			val lam = mk_simple_Ì(x, p2);
			val thm2 = inst_type_rule [(type_of v, ty)] thm1a;
			val thm3 = list_simple_µ_elim [c, lam] thm2;
			val conv1 = QUANT_C(RIGHT_C Â_conv);
			val conv2 = Â_conv;
			val conv3 = LEFT_C conv1 THEN_C RIGHT_C conv2;
			val thm4 = conv_rule conv3 thm3;
		in	thm4
		end else	if c = v
		then let
			val (x, c) = (c, x);
			val lam = mk_simple_Ì(x, p2);
			val thm2 = inst_type_rule [(type_of v, ty)] thm1b;
			val thm3 = list_simple_µ_elim [x, c, lam] thm2;
			val conv1 = QUANT_C(RIGHT_C Â_conv);
			val conv2 = Â_conv;
			val conv3 = LEFT_C conv1 THEN_C RIGHT_C conv2;
			val thm4 = conv_rule conv3 thm3;
		in	thm4
	
		end else	fail_conv tm
	end	handle Fail _ => (
		FIRST_C (map simple_eq_match_conv [thm1c, thm1d, thm1e]) tm
	) 
end;
(*
=TEX
The following is like {\em PROP\_ATOM\_C} but it does some propositional simplifications of its own.
=SML
*)
val Û³_simp_convÝ = FIRST_C(map (simple_eq_match_conv o taut_rule)[
	¬µp·(³ ³ p ¤ p)®,
	¬³F ¤ T®,
	¬³T ¤ F®]);
val Û²_simp_convÝ = FIRST_C(map (simple_eq_match_conv o taut_rule)[
	¬µp·F ² p ¤ p®,
	¬µp·p ² F ¤ p®,
	¬µp·T ² p ¤ T®,
	¬µp·p ² T ¤ T®]);
val Û±_simp_convÝ = FIRST_C(map (simple_eq_match_conv o taut_rule)[
	¬µp·p ± F ¤ F®,
	¬µp·F ± p ¤ F®,
	¬µp·T ± p ¤ p®,
	¬µp·p ± T ¤ p®]);
val Û´_simp_convÝ = FIRST_C(map (simple_eq_match_conv o taut_rule)[
	¬µp·p ´ T ¤ T®,
	¬µp·T ´ p ¤ p®,
	¬µp·F ´ p ¤ T®,
	¬µp·p ´ F ¤ ³p®]);
val Û¤_simp_convÝ = FIRST_C(map (simple_eq_match_conv o taut_rule)[
	¬µp·(p ¤ T) ¤ p®,
	¬µp·(T ¤ p) ¤ p®,
	¬µp·(F ¤ p) ¤ ³p®,
	¬µp·(p ¤ F) ¤ ³p®]);
val rec Ûprop_simp_convÝ  : CONV = (fn tm =>
	(case dest_term tm of
		D± _ =>
			LEFT_C prop_simp_conv AND_OR_C
			RIGHT_C prop_simp_conv AND_OR_C
			±_simp_conv
	|	D² _ =>
			LEFT_C prop_simp_conv AND_OR_C
			RIGHT_C prop_simp_conv AND_OR_C
			²_simp_conv
	|	D´ _ =>
			LEFT_C prop_simp_conv AND_OR_C
			RIGHT_C prop_simp_conv AND_OR_C
			´_simp_conv
	|	D¤ _ => LEFT_C prop_simp_conv AND_OR_C
			RIGHT_C prop_simp_conv AND_OR_C
			¤_simp_conv
	|	D³ _ => RAND_C prop_simp_conv AND_OR_C
			³_simp_conv
		|	_ => fail_conv) tm 
);
(*
=TEX
=SML
*)
val _ = (open_theory orig_cur_theory; pop_pc());
end (* of structure QuantElimTools *);
open QuantElimTools;
=TEX

\twocolumn[\section{INDEX}]
\small
\printindex

\end{document}







