=TEX
% TQtemplate.tex
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Implementation of Antiunification}  %% Mandatory field
\TPPref{DS/FMU/IED/DTD011}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}  %% Mandatory field (with sensible default)
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{
This document gives the implementation of the module containing
a function to compute the antiunifier of a pair of types.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library \\ R.D. Arthan\\ D.J. King}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1]
First version, based on DS/FMU/IED/DTD011.
\end{description}
\subsection{Changes forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}

\subsection{Introduction}

\subsubsection{Background and Purpose}

\subsubsection{Dependencies}

\subsubsection{Possible Enhancements}

\subsubsection{Deficiencies}

\section{ANTIUNIFICATION}

=SML

structure Antiunify = struct

fun ext_c nil = nil
	  | ext_c (t::tlist) =
	if is_vartype t
	then
		(dest_vartype t)::(ext_c tlist)
	else
		let	val constr = (fst o dest_type) t;
			val args   = (snd o dest_type) t
		in
			constr::(ext_c (tlist@args))
   		end;

fun count_primes s =
	let	fun aux n nil = n
		  | aux n (c::cs) =
			if c = "'"
			then
				aux (n+1) cs
			else
				n
	in
		aux 0 (explode s)
	end;

fun maxl nlst =
	let	fun aux n (nil : int list) = n
	  | aux n (x::xs) =
		if x > n
		then
			aux x xs
		else
			aux n xs
	in
		aux ~1 nlst
	end;

fun max_mcp tl = maxl (map count_primes (ext_c tl));

fun au_string nprimes n =
	let	fun aux 0 = ""
	  | aux n = "'"^(aux (n - 1))
	in
		(aux nprimes)^(string_of_int n)
	end;

fun findl lst s = any lst (fn (x,_) => x = s);
fun findr lst s = any lst (fn (_,y) => y = s);

fun gen f (tp as (t1,t2)) pren =
	let	fun aux i f tl pren =
		if findl f (mk_vartype (pren i))
		then
			aux (i+1) f tl pren
		else
			pren i
	in
		aux 0 f [t1,t2] pren
	end;

fun apply f nil g p = nil
  | apply f (x::xs) g p =
	let val (a,b) = f(x,g) p
	in
		(a,b)::(apply f xs a p)
	end;

fun easy (t1,t2) = not 
	(is_type t1 andalso is_type t2 andalso
		let val cns = (fst o dest_type);
		    val len = (length o snd o dest_type)
		in
			cns t1 = cns t2 andalso
			len t1 > 0 andalso
			len t1 = len t2
		end);

fun au ((tp as (t1,t2)), f) pren =
	if t1 = t2
	then
		(f, t1)
	else if easy tp
	then
		if findr f tp
		then
			(f,rassoc3 f tp)
		else
			let val beta = mk_vartype(gen f tp pren)
			in
				((beta,tp)::f, beta)
			end
	else
		let val cns = (fst o dest_type);
		    val cl = (snd o dest_type);
	     	    val ll = apply au (combine (cl t1) (cl t2)) f pren;
		    val (fs,ss) = split ll
		in
			((hd o rev) fs,mk_type (cns t1,ss))
		end;

fun antiunify (tp as (t1,t2)) =
	let	val prename = au_string (max_mcp [t1,t2] + 1);
	in
		snd (au (tp,nil) prename)
	end;

end;

=TEX

\twocolumn[\section{INDEX OF DEFINED TERMS}]
\printindex
\end{document}
