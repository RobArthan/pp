=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Module Tests for the Rewriting Rules of Inference}  %% Mandatory field
\def\TPPheadtitle{Module Tests for the Rewriting Rules of Inference}
\TPPref{DS/FMU/IED/MDT026}  %% Mandatory field
\def\SCCSversion{$Revision$ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{ML Literate Script}
\TPPkeywords{}
\TPPauthor{K.Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{K.Blackburn & WIN01\\D.J.~King & WIN01}
\TPPauthorisation{R.D.Arthan & Project Manager}
\TPPabstract{A set of module tests are given for the 
the rewriting rules of inference.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History} 
\begin{description}
\item [Issue 1.1]
First version.
\item [Issue 1.2]
Reacted to issue 1.3 of \cite{DS/FMU/IED/DTD026}.
\item [Issue 1.3]
Changed $TRAVERSE$ to $MAP$.
\item [Issue 1.4]
Re-implementation to follow ideas of \cite{DS/FMU/IED/DTD051}.
\item [Issue 1.5]
Reacting to issue 1.5 of \cite{DS/FMU/IED/DTD051}.
\end{description}
% \subsection{Changes Forecast}
\section{GENERAL}
\subsection{Scope}
This document contains the module testing of the Rewriting Rules of Inference.
The design is in \cite{DS/FMU/IED/DTD026}
and it is
implemented in \cite{DS/FMU/IED/IMP026}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains the module testing of the material given a design in \cite{DS/FMU/IED/DTD026},
following the test policy given in that document and the general policy given in \cite{DS/FMU/IED/PLN008}.

The tests distinguish the behaviour of all the inference rules from each other.
It shows (for the examples given, and hopefully always) that the filtered assumption rules behave as the expected equivalents given filters $(fn\ x\ =>\ true)$ and $(fn\ x\ =>\ false)$.
It also shows that the conversions behave as their rule
equivalents suggest.
\subsubsection{Dependencies}
This document is derived from the detailed design in \cite{DS/FMU/IED/DTD026},
and is further influenced by the implementation, in  \cite{DS/FMU/IED/IMP026}.
\subsubsection{Deficiencies}
The coverage of the tests, as called for by the test specification, may currently be incomplete.
\section{INITIALISATION}
Initialise the test package:
=SML
usefile "dtd013.sml";
usefile "imp013.sml";
init_mt_results();
=TEX
Initialising the rewriting context:
=SML
val just_beta_net = make_net 
	[(ª(ç x é y) zº,simple_%beta%_conv)];


val empty_rw_proof_context : EPROOF_CONTEXT= (
	set_epc_rw_canon id_canon
	(set_epc_rw_net just_beta_net
	initial_epc)
);
val _ = push_proof_context empty_rw_proof_context;
=TEX

\section{VALUE BINDINGS}
Û
f_first_thm =  Ö (É x é F Ä x Ç F) Ä (É x é F Å x Ç x)
Ê
=SML
local
	val s1 = asm_rule mk_f;
	val s2 = contr_rule ªF Ä xº s1;
	val s3 = all_ä_intro s2;
	val s4 = asm_rule ªF Ä xº;
	val s5 = Ä_left_elim s4;
	val s6 = all_ä_intro s5;
	val s7 = Ç_intro s6 s3;
	val s8 = all_É_intro s7;

	val s9 = asm_rule ªx : BOOLº;
	val s10 = Å_left_intro mk_f s9;
	val s11 = all_ä_intro s10;
	val s12 = asm_rule ªF Å xº;
	val s13 = Å_cancel_rule s12 f_thm;
	val s14 = all_ä_intro s13;
	val s15 = Ç_intro s14 s11;
	val s16 = all_É_intro s15;
	
	val s17 = Ä_intro  s8 s16;
in
	val f_first_thm = s17;
end;
=TEX
=SML
val sample = ª(ç f x y é (f x Ä y) Ä (ç p é p) q)(ç x é å x) T ((ç p é p) q)º;
val sample_thm = asm_rule sample;
val fall = (fn x => true);
val fnone = (fn x => false);

val sample2 = ª((ç f p q é (f p Ä f q))(ç x é å x) T (å(å F)) Å å(1 = 1)) Ç (F Å t)º;
val sample2_thm = asm_rule sample2;
val res1 = ªF Ä T Å F Ç F Å tº;
val res2 = ª((ç p é ç q é ((ç x é å x) p) Ä ((ç x é å x) q)) T (å T)) Å å T Ç F Å tº;
val res3 = ªF Å t Ç F Å tº;
val res4 = ªF Ç tº;
val res5 = ª((ç p é ç q é ((ç x é å x) p) Ä ((ç x é å x) q)) T (å T)) Å å T Ç tº;
val res6 = ªF Å t Ç tº;
val res7 = ª((ç f é ç p é ç q é (f p) Ä (f q)) (ç x é å x) T (å T)) Å å (1 = 1) Ç F Å tº;
val res8 = ª((ç f é ç p é ç q é (f p) Ä (f q)) (ç x é å x) T (å T)) Å å (1 = 1) Ç tº;
val res9 = ªt Ç tº;

val thms = [(Ç_t_intro f_thm), f_first_thm];
val thms1 = [å_t_thm, Ç_t_intro f_thm];
val sample3 = ªå(å T)º;
val sample3_thm = asm_rule sample3;
val res31 = ªå Fº;
val res32 = mk_t;

val thm41 = asm_ruleªp Ä qº;
val thm41p = Ä_left_elim thm41;
val thm41q = Ä_right_elim thm41;
val thm41pT = Ç_t_intro thm41p;
val thm41qT = Ç_t_intro thm41q;
val thm42 = asm_ruleªå(p Å q)º;
val thm42a = conv_rule simple_å_in_conv thm42;
val thm43 = asm_ruleªåÑxép xº;
val thm44 = conv_rule simple_å_in_conv thm43;
val thm44a = simple_É_elimªxº thm44;
val thm45 = asm_ruleªx = yº;
val thm46 = asm_ruleªx Ç yº;
val thm47 = asm_ruleªp:BOOLº;
val thm47T = Ç_t_intro thm47;
val thm48 = asm_ruleªp Ä q Ä rº;
val thm48p = Ä_left_elim thm48;
val thm48q = Ä_left_elim (Ä_right_elim thm48);
val thm48r = Ä_right_elim (Ä_right_elim thm48);
val thm48r = Ä_right_elim (Ä_right_elim thm48);
val thm49 = asm_ruleªåpº;
val thm49a = tac_proof(([ªåpº], ªpÇFº), all_undisch_tac THEN taut_tac);
val thm50c = ªÉ p q r é p Ä q Ä rº;
val thm50 = simple_É_elim ªp:BOOLº (asm_rule ªÉ p q r é p Ä q Ä rº);

=TEX
A simple canonicalisation:
=SML
val simple_canon = REWRITE_CAN (REPEAT_CAN Ä_rewrite_canon);
=TEX
Some proof contexts (all of them will have $simple\_\beta\_conv$ in their rewriting nets):
=SML
fun thms_to_net canon thms = (
	make_net 
	((ª(ç x é y)zº, simple_%beta%_conv) ::
	(flat(map (cthm_for_eqn_cxt canon) thms)))
);

val rw_proof_context1 : EPROOF_CONTEXT= (
	set_epc_rw_canon id_canon
	(set_epc_rw_net (thms_to_net id_canon [å_t_thm, 
		f_first_thm,
		(Ç_t_intro f_thm), 
		all_É_intro(Ç_t_intro (refl_conv ªx:'aº))
		])
	initial_epc)
);

val rw_proof_context2 : EPROOF_CONTEXT= (
	set_epc_rw_canon simple_canon
	(set_epc_rw_net (thms_to_net simple_canon [å_t_thm, 
		f_first_thm,
		(Ç_t_intro f_thm), 
		all_É_intro(Ç_t_intro (refl_conv ªx:'aº))
		])
	initial_epc)
);

val rw_proof_context3 : EPROOF_CONTEXT= (
	set_epc_rw_canon id_canon
	(set_epc_rw_net (thms_to_net id_canon [å_t_thm, 
		all_É_intro(Ç_t_intro (refl_conv ªx:'aº))
		])
	initial_epc)
);

val rw_proof_context4 : EPROOF_CONTEXT= (
	set_epc_rw_canon simple_canon
	(set_epc_rw_net (thms_to_net simple_canon [å_t_thm, 
		all_É_intro(Ç_t_intro (refl_conv ªx:'aº))
		])
	initial_epc)
);

val rw_proof_context5 : EPROOF_CONTEXT= (
	set_epc_rw_canon simple_canon
	(set_epc_rw_net just_beta_net
	initial_epc)
);
=TEX
\section{EVALUATING PROOF CONTEXTS}
Now we merely make sure that $evaluate\_proof\_context$
exists, and names things correctly
=SML
val sample_pc : PROOF_CONTEXT= (set_pc_name "sample_pc"
	(set_pc_rw_canons [Ä_rewrite_canon]
	(set_pc_rw_eqn_cxt [(ª(ç x é y) zº,simple_%beta%_conv)]
	(set_pc_st_eqn_cxt []
	(set_pc_sg_eqn_cxt [(ª(ç x é y) zº,simple_%beta%_conv)]
	initial_pc))))
);

val sample_epc: EPROOF_CONTEXT = evaluate_proof_context "sample_epc" sample_pc;

store_mt_results mt_run[
	("evaluate_proof_context",
	get_epc_name,
	sample_epc,
	"sample_epc")];
=TEX
\section{THE TESTS OF REWRITING}
We will test the assorted derived rewrite functions,
and these will serve as the primary test of $prim\_rewrite\_conv$.
\subsection{Testing the Conversions}
First check that having no effect causes a failure:
=SML
store_mt_results mt_run_fail [
	("rewrite_rule 26001 a",
	rewrite_rule [],
	t_thm,
	gen_fail_msg "rewrite_rule" 26001 []),
	("pure_rewrite_rule 26001 a",
	pure_rewrite_rule [],
	t_thm,
	gen_fail_msg "pure_rewrite_rule" 26001 []),
	("once_rewrite_rule 26001 a",
	once_rewrite_rule [],
	t_thm,
	gen_fail_msg "once_rewrite_rule" 26001 []),
	("pure_once_rewrite_rule 26001 a",
	pure_once_rewrite_rule [],
	t_thm,
	gen_fail_msg "pure_once_rewrite_rule" 26001 []),
	("asm_rewrite_rule 26001 a",
	asm_rewrite_rule [],
	t_thm,
	gen_fail_msg "asm_rewrite_rule" 26001 []),
	("pure_asm_rewrite_rule 26001 a",
	pure_asm_rewrite_rule [],
	t_thm,
	gen_fail_msg "pure_asm_rewrite_rule" 26001 []),
	("once_asm_rewrite_rule 26001 a",
	once_asm_rewrite_rule [],
	t_thm,
	gen_fail_msg "once_asm_rewrite_rule" 26001 []),
	("pure_once_asm_rewrite_rule 26001 a",
	pure_once_asm_rewrite_rule [],
	t_thm,
	gen_fail_msg "pure_once_asm_rewrite_rule" 26001 []),
	("fasm_rewrite_rule 26001 a",
	fasm_rewrite_rule [] fall,
	t_thm,
	gen_fail_msg "fasm_rewrite_rule" 26001 []),
	("pure_fasm_rewrite_rule 26001 a",
	pure_fasm_rewrite_rule [] fall,
	t_thm,
	gen_fail_msg "pure_fasm_rewrite_rule" 26001 []),
	("once_fasm_rewrite_rule 26001 a",
	once_fasm_rewrite_rule [] fall,
	t_thm,
	gen_fail_msg "once_fasm_rewrite_rule" 26001 []),
	("pure_once_fasm_rewrite_rule 26001 a",
	pure_once_fasm_rewrite_rule [] fall,
	t_thm,
	gen_fail_msg "pure_once_fasm_rewrite_rule" 26001 [])
	];

store_mt_results mt_run_fail [
	("rewrite_conv 26001 a",
	rewrite_conv [],
	mk_t,
	gen_fail_msg "rewrite_conv" 26001 []),
	("pure_rewrite_conv 26001 a",
	pure_rewrite_conv [],
	mk_t,
	gen_fail_msg "pure_rewrite_conv" 26001 []),
	("once_rewrite_conv 26001 a",
	once_rewrite_conv [],
	mk_t,
	gen_fail_msg "once_rewrite_conv" 26001 []),
	("pure_once_rewrite_conv 26001 a",
	pure_once_rewrite_conv [],
	mk_t,
	gen_fail_msg "pure_once_rewrite_conv" 26001 [])
	];
=TEX
\subsection{Setting the basic rewrites}
=SML	
val _ = push_proof_context rw_proof_context1;
=TEX
=SML
store_mt_results mt_run[
	("rewrite_rule 2",
	dest_thm o (rewrite_rule []),
	sample2_thm,
	([sample2],res1)),
	("once_rewrite_rule 2",
	dest_thm o (once_rewrite_rule []),
	sample2_thm,
	([sample2],res2)),
	("asm_rewrite_rule 2",
	dest_thm o (asm_rewrite_rule []),
	sample2_thm,
	([sample2],mk_t)),
	("pure_asm_rewrite_rule 2",
	dest_thm o (pure_asm_rewrite_rule []),
	sample2_thm,
	([sample2],res3)),
	("once_asm_rewrite_rule 2",
	dest_thm o (once_asm_rewrite_rule []),
	sample2_thm,
	([sample2],res3)),
	("pure_once_asm_rewrite_rule 2",
	dest_thm o (pure_once_asm_rewrite_rule []),
	sample2_thm,
	([sample2],res3)),
	("fasm_rewrite_rule 2a",
	dest_thm o (fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],mk_t)),
	("fasm_rewrite_rule 2b",
	dest_thm o (fasm_rewrite_rule [] fnone),
	sample2_thm,
	([sample2],res1)),
	("pure_fasm_rewrite_rule 2a",
	dest_thm o (pure_fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],res3)),
	("once_fasm_rewrite_rule 2a",
	dest_thm o (once_fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],res3)),
	("once_fasm_rewrite_rule 2b",
	dest_thm o (once_fasm_rewrite_rule [] fnone),
	sample2_thm,
	([sample2],res2)),
	("pure_once_fasm_rewrite_rule 2a",
	dest_thm o (pure_once_fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],res3))
	];
=TEX
=SML
store_mt_results mt_run[
	("rewrite_conv 2",
	dest_thm o (rewrite_conv []),
	sample2,
	([],mk_eq(sample2,res1))),
	("once_rewrite_conv 2",
	dest_thm o (once_rewrite_conv []),
	sample2,
	([],mk_eq(sample2,res2)))
	];
=TEX
\subsection{Setting the Canonicalisation}
=SML
val _ = push_proof_context rw_proof_context2;
=TEX
=SML
store_mt_results mt_run[
	("rewrite_rule 3",
	dest_thm o (rewrite_rule []),
	sample2_thm,
	([sample2],res4)),
	("once_rewrite_rule 3",
	dest_thm o (once_rewrite_rule []),
	sample2_thm,
	([sample2],res5)),
	("asm_rewrite_rule 3",
	dest_thm o (asm_rewrite_rule []),
	sample2_thm,
	([sample2],mk_t)),
	("pure_asm_rewrite_rule 3",
	dest_thm o (pure_asm_rewrite_rule []),
	sample2_thm,
	([sample2],res3)),
	("once_asm_rewrite_rule 3",
	dest_thm o (once_asm_rewrite_rule []),
	sample2_thm,
	([sample2],res6)),
	("pure_once_asm_rewrite_rule 3",
	dest_thm o (pure_once_asm_rewrite_rule []),
	sample2_thm,
	([sample2],res3)),
	("fasm_rewrite_rule 3a",
	dest_thm o (fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],mk_t)),
	("fasm_rewrite_rule 3b",
	dest_thm o (fasm_rewrite_rule [] fnone),
	sample2_thm,
	([sample2],res4)),
	("pure_fasm_rewrite_rule 3a",
	dest_thm o (pure_fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],res3)),
	("once_fasm_rewrite_rule 3a",
	dest_thm o (once_fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],res6)),
	("once_fasm_rewrite_rule 3b",
	dest_thm o (once_fasm_rewrite_rule [] fnone),
	sample2_thm,
	([sample2],res5)),
	("pure_once_fasm_rewrite_rule 3a",
	dest_thm o (pure_once_fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],res3))
	];
=TEX
=SML
store_mt_results mt_run[
	("rewrite_conv 3",
	dest_thm o (rewrite_conv []),
	sample2,
	([],mk_eq(sample2,res4))),
	("once_rewrite_conv 3",
	dest_thm o (once_rewrite_conv []),
	sample2,
	([],mk_eq(sample2,res5)))
	];
=TEX
\subsection{Rewriting with theorems}
Get parameters right:
=SML
val _ = push_proof_context rw_proof_context3;
=TEX
=SML
store_mt_results mt_run[
	("rewrite_rule 4",
	dest_thm o (rewrite_rule thms),
	sample2_thm,
	([sample2],res1)),
	("pure_rewrite_rule 4",
	dest_thm o (pure_rewrite_rule thms),
	sample2_thm,
	([sample2],res7)),
	("once_rewrite_rule 4",
	dest_thm o (once_rewrite_rule thms),
	sample2_thm,
	([sample2],res2)),
	("pure_once_rewrite_rule 4",
	dest_thm o (pure_once_rewrite_rule thms),
	sample2_thm,
	([sample2],res7)),
	("asm_rewrite_rule 4",
	dest_thm o (asm_rewrite_rule thms),
	sample2_thm,
	([sample2],mk_t)),
	("pure_asm_rewrite_rule 4",
	dest_thm o (pure_asm_rewrite_rule thms),
	sample2_thm,
	([sample2],res3)),
	("once_asm_rewrite_rule 4",
	dest_thm o (once_asm_rewrite_rule thms),
	sample2_thm,
	([sample2],res3)),
	("pure_once_asm_rewrite_rule 4",
	dest_thm o (pure_once_asm_rewrite_rule thms),
	sample2_thm,
	([sample2],res3)),
	("fasm_rewrite_rule 4a",
	dest_thm o (fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],mk_t)),
	("fasm_rewrite_rule 4b",
	dest_thm o (fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res1)),
	("pure_fasm_rewrite_rule 4a",
	dest_thm o (pure_fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],res3)),
	("pure_fasm_rewrite_rule 4b",
	dest_thm o (pure_fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res7)),
	("once_fasm_rewrite_rule 4a",
	dest_thm o (once_fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],res3)),
	("once_fasm_rewrite_rule 4b",
	dest_thm o (once_fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res2)),
	("pure_once_fasm_rewrite_rule 4a",
	dest_thm o (pure_once_fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],res3)),
	("pure_once_fasm_rewrite_rule 4b",
	dest_thm o (pure_once_fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res7))
	];
=TEX
=SML
store_mt_results mt_run[
	("rewrite_conv 4",
	dest_thm o (rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res1))),
	("pure_rewrite_conv 4",
	dest_thm o (pure_rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res7))),
	("once_rewrite_conv 4",
	dest_thm o (once_rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res2))),
	("pure_once_rewrite_conv 4",
	dest_thm o (pure_once_rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res7)))];
=TEX

=TEX
\subsection{Rewriting with theorems}
Get parameters right:
=SML
val _ = push_proof_context rw_proof_context4;
=TEX
=SML
store_mt_results mt_run[
	("rewrite_rule 5",
	dest_thm o (rewrite_rule thms),
	sample2_thm,
	([sample2],res4)),
	("pure_rewrite_rule 5",
	dest_thm o (pure_rewrite_rule thms),
	sample2_thm,
	([sample2],res8)),
	("once_rewrite_rule 5",
	dest_thm o (once_rewrite_rule thms),
	sample2_thm,
	([sample2],res5)),
	("pure_once_rewrite_rule 5",
	dest_thm o (pure_once_rewrite_rule thms),
	sample2_thm,
	([sample2],res8)),
	("asm_rewrite_rule 5",
	dest_thm o (asm_rewrite_rule thms),
	sample2_thm,
	([sample2],mk_t)),
	("pure_asm_rewrite_rule 5",
	dest_thm o (pure_asm_rewrite_rule thms),
	sample2_thm,
	([sample2],res9)),
	("once_asm_rewrite_rule 5",
	dest_thm o (once_asm_rewrite_rule thms),
	sample2_thm,
	([sample2],res6)),
	("pure_once_asm_rewrite_rule 5",
	dest_thm o (pure_once_asm_rewrite_rule thms),
	sample2_thm,
	([sample2],res6)),
	("fasm_rewrite_rule 5a",
	dest_thm o (fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],mk_t)),
	("fasm_rewrite_rule 5b",
	dest_thm o (fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res4)),
	("pure_fasm_rewrite_rule 5a",
	dest_thm o (pure_fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],res9)),
	("pure_fasm_rewrite_rule 5b",
	dest_thm o (pure_fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res8)),
	("once_fasm_rewrite_rule 5a",
	dest_thm o (once_fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],res6)),
	("once_fasm_rewrite_rule 5b",
	dest_thm o (once_fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res5)),
	("pure_once_fasm_rewrite_rule 5a",
	dest_thm o (pure_once_fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],res6)),
	("pure_once_fasm_rewrite_rule 5b",
	dest_thm o (pure_once_fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res8))
	];
=TEX
=SML
store_mt_results mt_run[
	("rewrite_conv 5",
	dest_thm o (rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res4))),
	("pure_rewrite_conv 5",
	dest_thm o (pure_rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res8))),
	("once_rewrite_conv 5",
	dest_thm o (once_rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res5))),
	("pure_once_rewrite_conv 5",
	dest_thm o (pure_once_rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res8)))];
=TEX
\subsection{Distinguishing $pure\_$ and $pure\_once\_$}
The above tests don't manage to distinguish the behaviour
of all the functions.
The following ad-hoc test completes the separation of behaviour.
=SML
val _ = push_proof_context rw_proof_context5;
=TEX
=SML
store_mt_results mt_run[
	("rewrite_rule 6",
	dest_thm o (rewrite_rule thms1),
	sample3_thm,
	([sample3],res32)),
	("pure_rewrite_rule 6",
	dest_thm o (pure_rewrite_rule thms1),
	sample3_thm,
	([sample3],res32)),
	("once_rewrite_rule 6",
	dest_thm o (once_rewrite_rule thms1),
	sample3_thm,
	([sample3],res31)),
	("pure_once_rewrite_rule 6",
	dest_thm o (pure_once_rewrite_rule thms1),
	sample3_thm,
	([sample3],res31)),
	("asm_rewrite_rule 6",
	dest_thm o (asm_rewrite_rule thms1),
	sample3_thm,
	([sample3],res32)),
	("pure_asm_rewrite_rule 6",
	dest_thm o (pure_asm_rewrite_rule thms1),
	sample3_thm,
	([sample3],res32)),
	("once_asm_rewrite_rule 6",
	dest_thm o (once_asm_rewrite_rule thms1),
	sample3_thm,
	([sample3],res31)),
	("pure_once_asm_rewrite_rule 6",
	dest_thm o (pure_once_asm_rewrite_rule thms1),
	sample3_thm,
	([sample3],res31)),
	("fasm_rewrite_rule 6a",
	dest_thm o (fasm_rewrite_rule thms1 fall),
	sample3_thm,
	([sample3],res32)),
	("fasm_rewrite_rule 6b",
	dest_thm o (fasm_rewrite_rule thms1 fnone),
	sample3_thm,
	([sample3],res32)),
	("pure_fasm_rewrite_rule 6a",
	dest_thm o (pure_fasm_rewrite_rule thms1 fall),
	sample3_thm,
	([sample3],res32)),
	("pure_fasm_rewrite_rule 6b",
	dest_thm o (pure_fasm_rewrite_rule thms1 fnone),
	sample3_thm,
	([sample3],res32)),
	("once_fasm_rewrite_rule 6a",
	dest_thm o (once_fasm_rewrite_rule thms1 fall),
	sample3_thm,
	([sample3],res31)),
	("once_fasm_rewrite_rule 6b",
	dest_thm o (once_fasm_rewrite_rule thms1 fnone),
	sample3_thm,
	([sample3],res31)),
	("pure_once_fasm_rewrite_rule 6a",
	dest_thm o (pure_once_fasm_rewrite_rule thms1 fall),
	sample3_thm,
	([sample3],res31)),
	("pure_once_fasm_rewrite_rule 6b",
	dest_thm o (pure_once_fasm_rewrite_rule thms1 fnone),
	sample3_thm,
	([sample3],res31))
	];
=TEX
=SML
store_mt_results mt_run[
	("rewrite_conv 6",
	dest_thm o (rewrite_conv thms1),
	sample3,
	([],mk_eq(sample3,res32))),
	("pure_rewrite_conv 6",
	dest_thm o (pure_rewrite_conv thms1),
	sample3,
	([],mk_eq(sample3,res32))),
	("once_rewrite_conv 6",
	dest_thm o (once_rewrite_conv thms1),
	sample3,
	([],mk_eq(sample3,res31))),
	("pure_once_rewrite_conv 6",
	dest_thm o (pure_once_rewrite_conv thms1),
	sample3,
	([],mk_eq(sample3,res31)))];
=TEX
\subsection{Testing $prim\_conv\_rule$}
=SML
store_mt_results mt_run [
	("prim_rewrite_rule 1",
	dest_thm o (prim_rewrite_rule 
		(just_beta_net)
		id_canon
		TOP_MAP_C
		[(ª(ç x é f) yº,simple_%beta%_conv)]
		[]),
	sample_thm,
	([sample],ª((å T) Ä q) Ä qº)),
	("prim_rewrite_rule 2",
	dest_thm o (prim_rewrite_rule 
		(just_beta_net)
		id_canon
		ONCE_MAP_C
		[(ª(ç x é f) yº,simple_%beta%_conv)]
		[]),
	sample_thm,
	([sample],ª(ç x y é ((ç x é å x) x Ä y) Ä (ç p é p) q) T qº)),
	("prim_rewrite_rule 3",
	dest_thm o (prim_rewrite_rule 
		(thms_to_net 
		id_canon
		[å_t_thm, 
		 f_first_thm,
		 (Ç_t_intro f_thm), 
		 all_É_intro(Ç_t_intro (refl_conv ªx:'aº))])
		id_canon
		TOP_MAP_C
		[]
		[]),
	sample2_thm,
	([sample2],res1)),
	("prim_rewrite_rule 4",
	dest_thm o (prim_rewrite_rule 
		(thms_to_net 
		(Ä_rewrite_canon ORELSE_CAN id_canon)
		[å_t_thm, 
		 f_first_thm,
		 (Ç_t_intro f_thm), 
		 all_É_intro(Ç_t_intro (refl_conv ªx:'aº))])
		(Ä_rewrite_canon ORELSE_CAN id_canon)
		TOP_MAP_C
		[]
		[]),
	sample2_thm,
	([sample2],res4)),
	("prim_rewrite_rule 5",
	dest_thm o (prim_rewrite_rule 
		(thms_to_net 
		id_canon
		[å_t_thm, 
		 f_first_thm,
		 (Ç_t_intro f_thm), 
		 all_É_intro(Ç_t_intro (refl_conv ªx:'aº))])
		id_canon
		TOP_MAP_C
		[]
		[f_first_thm, (Ç_t_intro f_thm)]),
	sample2_thm,
	([sample2],res1)),
	("prim_rewrite_rule 6",
	dest_thm o (prim_rewrite_rule 
		(thms_to_net 
		(Ä_rewrite_canon ORELSE_CAN id_canon)
		[å_t_thm, 
		 f_first_thm,
		 (Ç_t_intro f_thm), 
		 all_É_intro(Ç_t_intro (refl_conv ªx:'aº))])
		(Ä_rewrite_canon ORELSE_CAN id_canon)
		TOP_MAP_C
		[]
		[f_first_thm, (Ç_t_intro f_thm)]),
	sample2_thm,
	([sample2],res4))
	];
=TEX
\subsection{Canons}
=SML
store_mt_results
mt_run [
	("canons 1",
	map dest_thm o id_canon,
	thm41,	[dest_thm thm41]),
	("canons 2",
	map dest_thm o (Ä_rewrite_canon THEN_CAN Ç_t_rewrite_canon),
	thm41,	[dest_thm thm41pT, dest_thm thm41qT]),
	("canons 3",
	map dest_thm o (Ä_rewrite_canon ORELSE_CAN Ç_t_rewrite_canon),
	thm47,	[dest_thm thm47T]),
	("canons 4",
	map dest_thm o (Ä_rewrite_canon ORELSE_CAN Ç_t_rewrite_canon),
	thm41,	[dest_thm thm41p, dest_thm thm41q])
];
=TEX
=SML
store_mt_results
mt_run [
	("THEN_LIST_CAN",
	map dest_thm o (Ä_rewrite_canon THEN_LIST_CAN [Ç_t_rewrite_canon, id_canon]),
	thm41,	[dest_thm thm41pT, dest_thm thm41q])];

store_mt_results
mt_run_fail [
	("THEN_LIST_CAN 26204",
	(Ä_rewrite_canon THEN_LIST_CAN [Ç_t_rewrite_canon]),
	thm41,
	gen_fail_msg "THEN_LIST_CAN" 26204 [])];

=TEX
=SML
store_mt_results
mt_run [
	("canons 5",
	map dest_thm o EVERY_CAN [],
	thm41,	[dest_thm thm41]),
	("canons 6",
	map dest_thm o EVERY_CAN [Ä_rewrite_canon, Ç_t_rewrite_canon],
	thm41,	[dest_thm thm41pT, dest_thm thm41qT]),
	("canons 7",
	map dest_thm o FIRST_CAN[Ä_rewrite_canon, Ç_t_rewrite_canon],
	thm47,	[dest_thm thm47T]),
	("canons 8",
	map dest_thm o FIRST_CAN[Ä_rewrite_canon ORELSE_CAN Ç_t_rewrite_canon],
	thm41,	[dest_thm thm41p, dest_thm thm41q]),
	("canons 9",
	map dest_thm o REPEAT_CAN Ä_rewrite_canon,
	thm48,	[dest_thm thm48p, dest_thm thm48q, dest_thm thm48r])
];
=TEX
The above tests have already covered $Ä\_rewrite\_canon$ and
$Ç\_t\_rewrite\_canon$.
=SML
store_mt_results
mt_run [
	("canons 10",
	map dest_thm o simple_å_rewrite_canon ,
	thm42,	[dest_thm thm42a]),
	("canons 11",
	map dest_thm o simple_å_rewrite_canon ,
	thm43,	[dest_thm thm44]),
	("canons 12",
	map dest_thm o simple_å_rewrite_canon ,
	thm49,	[dest_thm thm49a]),
	("canons 13",
	map dest_thm o simple_É_rewrite_canon ,
	thm44,	[dest_thm thm44a])
];
=TEX
=SML
store_mt_results
mt_run_fail [
	("canons 14",
	Ç_t_rewrite_canon ,
	thm45,	gen_fail_msg "Ç_t_rewrite_canon" 26203 []),
	("canons 15",
	Ç_t_rewrite_canon ,
	thm46,	gen_fail_msg "Ç_t_rewrite_canon" 26203 []),
	("canons 16",
	FIRST_CAN [],
	thm46,	gen_fail_msg "FIRST_CAN" 26202 []),
	("canons 17",
	fail_canon,
	thm46,	gen_fail_msg "fail_canon" 26201 []),
	("canons 18",
	fail_with_canon "fred" 26202 [],
	thm46,	gen_fail_msg "fred" 26202 [])
];
=TEX
=SML
store_mt_results
mt_run [
	("REWRITE_CAN",
	map dest_thm o REWRITE_CAN  ((REPEAT_CAN(FIRST_CAN [
		simple_É_rewrite_canon,
		Ä_rewrite_canon]))),
	thm50,
	[([thm50c],ªp:BOOLº),([thm50c],ªÉ q é qº),([thm50c],ªÉ r é rº)])];
=TEX
\section{TACTICS}
We are pretty cursory in the following, doing little more than just demonstrating
their presence and error message origin.
=SML
val _ = push_proof_context initial_rewrite_epc;
set_flag("subgoal_package_quiet",true);
fun tac_res tac goal = (push_goal([],goal);
		a tac;
		let val (asms,gl) = top_goal()
		in
			(drop_main_goal();
			gl)
		end);
fun tac_res1 tac asms goal = (
		push_goal(asms,goal);
		a tac;
		let val (asms,gl) = top_goal()
		in
			(drop_main_goal();
			gl)
		end);
val s_thm = asm_rule ªs = å Tº;
=TEX
=SML
store_mt_results
mt_run [
	("rewrite_tac",
	tac_res (rewrite_tac[]),
	ªT Ä (ç x é x) pº,
	ªp:BOOLº),
	("pure_rewrite_tac",
	tac_res(pure_rewrite_tac[s_thm]),
	ªs Ä Tº,
	ªå T Ä Tº),
	("once_rewrite_tac",
	tac_res(once_rewrite_tac[]),
	ªT Ä (T Ä p)º,
	ª(T Ä p)º),
	("pure_once_rewrite_tac",
	tac_res(pure_once_rewrite_tac[Ä_thm]),
	ªt1 Ä t2º,
	ªÉ bé (t1 ä t2 ä b) ä bº),
	("rewrite_thm_tac",
	tac_res(rewrite_thm_tac s_thm),
	ªp Ä f (T Ä s)º,
	ªp Ä f Fº),
	("pure_rewrite_thm_tac",
	tac_res(pure_rewrite_thm_tac s_thm),
	ªs Ä pº,
	ªå T Ä pº),
	("once_rewrite_thm_tac",
	tac_res(once_rewrite_thm_tac s_thm),
	ªp s Ä f (T Ä s)º,
	ªp (å T) Ä f (s:BOOL)º),
	("pure_once_rewrite_thm_tac",
	tac_res(pure_once_rewrite_thm_tac s_thm),
	ªp s Ä f (T Ä s)º,
	ªp (å T) Ä f (T Ä å T)º),
	("asm_rewrite_thm_tac",
	tac_res1(asm_rewrite_thm_tac s_thm) [ªp:BOOL = qº],
	ªp Ä Tº,
	ªq:BOOLº),
	("pure_asm_rewrite_thm_tac",
	tac_res1(pure_asm_rewrite_thm_tac s_thm) 
		[ªp:BOOL = qº,ªq:BOOL = rº],
	ªs Ä p Ä Tº,
	ªå T Ä r Ä Tº),
	("once_asm_rewrite_thm_tac",
	tac_res1(once_asm_rewrite_thm_tac s_thm) 
		[ªp:BOOL = qº,ªq:BOOL = rº],
	ªp:BOOLº,
	ªq:BOOLº),
	("pure_once_asm_rewrite_thm_tac",
	tac_res1(pure_once_asm_rewrite_thm_tac s_thm) 
		[ªp:BOOL = qº,ªq:BOOL = rº],
	ªT Ä pº,
	ªT Ä qº),
	("fasm_rewrite_thm_tac",
	tac_res1(fasm_rewrite_thm_tac (fn x => ªp:BOOLº mem (frees x)) s_thm)
		 [ªp:BOOL = qº,ªq:BOOL = rº],
	ªp:BOOLº,
	ªq:BOOLº),
	("pure_fasm_rewrite_thm_tac",
	tac_res1(pure_fasm_rewrite_thm_tac (fn x => ªp:BOOLº mem (frees x)) s_thm) 
		[ªp:BOOL = qº,ªq:BOOL = rº],
	ªp Ä Tº,
	ªq Ä Tº),
	("once_fasm_rewrite_thm_tac",
	tac_res1(once_fasm_rewrite_thm_tac (fn x => ªp:BOOLº mem (frees x)) s_thm) 
		[ªp:BOOL = qº,ªq:BOOL = rº],
	ªp Ä q Ä (T Å s)º,
	ªq Ä q Ä Tº),
	("pure_once_fasm_rewrite_thm_tac",
	tac_res1(pure_once_fasm_rewrite_thm_tac (fn x => ªp:BOOLº mem (frees x)) s_thm) 
		[ªp:BOOL = qº,ªq:BOOL = rº],
	ªp Ä q Ä Tº,
	ªq Ä q Ä Tº)
	];
set_flag("subgoal_package_quiet",false);
=TEX
=SML
push_goal([],ªFº);
store_mt_results
mt_run_fail [
	("rewrite_tac 26001",
	a,
	(rewrite_tac[]),
	gen_fail_msg "rewrite_tac" 26001 []),
	("pure_rewrite_tac 26001",
	a,
	(pure_rewrite_tac[]),
	gen_fail_msg "pure_rewrite_tac" 26001 []),
	("once_rewrite_tac 26001",
	a,
	(once_rewrite_tac[]),
	gen_fail_msg "once_rewrite_tac" 26001 []),
	("pure_once_rewrite_tac 26001",
	a,
	(pure_once_rewrite_tac[]),
	gen_fail_msg "pure_once_rewrite_tac" 26001 []),
	("asm_rewrite_tac 26001",
	a,
	(asm_rewrite_tac[]),
	gen_fail_msg "asm_rewrite_tac" 26001 []),
	("pure_asm_rewrite_tac 26001",
	a,
	(pure_asm_rewrite_tac[]),
	gen_fail_msg "pure_asm_rewrite_tac" 26001 []),
	("once_asm_rewrite_tac 26001",
	a,
	(once_asm_rewrite_tac[]),
	gen_fail_msg "once_asm_rewrite_tac" 26001 []),
	("pure_once_asm_rewrite_tac 26001",
	a,
	(pure_once_asm_rewrite_tac[]),
	gen_fail_msg "pure_once_asm_rewrite_tac" 26001 []),
	("fasm_rewrite_tac 26001",
	a,
	(fasm_rewrite_tac [] (fn x => true)),
	gen_fail_msg "fasm_rewrite_tac" 26001 []),
	("pure_fasm_rewrite_tac 26001",
	a,
	(pure_fasm_rewrite_tac [] (fn x => true)),
	gen_fail_msg "pure_fasm_rewrite_tac" 26001 []),
	("once_fasm_rewrite_tac 26001",
	a,
	(once_fasm_rewrite_tac [] (fn x => true)),
	gen_fail_msg "once_fasm_rewrite_tac" 26001 []),
	("pure_once_fasm_rewrite_tac 26001",
	a,
	(pure_once_fasm_rewrite_tac [] (fn x => true)),
	gen_fail_msg "pure_once_fasm_rewrite_tac" 26001 []),
	("rewrite_thm_tac 26001",
	a,
	(rewrite_thm_tac t_thm),
	gen_fail_msg "rewrite_tac" 26001 []),
	("pure_rewrite_thm_tac 26001",
	a,
	(pure_rewrite_thm_tac t_thm),
	gen_fail_msg "pure_rewrite_tac" 26001 []),
	("once_rewrite_thm_tac 26001",
	a,
	(once_rewrite_thm_tac t_thm),
	gen_fail_msg "once_rewrite_tac" 26001 []),
	("pure_once_rewrite_thm_tac 26001",
	a,
	(pure_once_rewrite_thm_tac t_thm),
	gen_fail_msg "pure_once_rewrite_tac" 26001 []),
	("asm_rewrite_thm_tac 26001",
	a,
	(asm_rewrite_thm_tac t_thm),
	gen_fail_msg "asm_rewrite_tac" 26001 []),
	("pure_asm_rewrite_thm_tac 26001",
	a,
	(pure_asm_rewrite_thm_tac t_thm),
	gen_fail_msg "pure_asm_rewrite_tac" 26001 []),
	("once_asm_rewrite_thm_tac 26001",
	a,
	(once_asm_rewrite_thm_tac t_thm),
	gen_fail_msg "once_asm_rewrite_tac" 26001 []),
	("pure_once_asm_rewrite_thm_tac 26001",
	a,
	(pure_once_asm_rewrite_thm_tac t_thm),
	gen_fail_msg "pure_once_asm_rewrite_tac" 26001 []),
	("fasm_rewrite_thm_tac 26001",
	a,
	(fasm_rewrite_thm_tac (fn x => true) t_thm),
	gen_fail_msg "fasm_rewrite_tac" 26001 []),
	("pure_fasm_rewrite_thm_tac 26001",
	a,
	(pure_fasm_rewrite_thm_tac (fn x => true) t_thm),
	gen_fail_msg "pure_fasm_rewrite_tac" 26001 []),
	("once_fasm_rewrite_thm_tac 26001",
	a,
	(once_fasm_rewrite_thm_tac (fn x => true) t_thm),
	gen_fail_msg "once_fasm_rewrite_tac" 26001 []),
	("pure_once_fasm_rewrite_thm_tac 26001",
	a,
	(pure_once_fasm_rewrite_thm_tac (fn x => true) t_thm),
	gen_fail_msg "pure_once_fasm_rewrite_tac" 26001 [])];
=TEX
\section{UNTESTED MATERIAL}
We do not directly test: $initial\_rw\_canon$ (as tested by system build), $prim\_rewrite\_conv$ and $prim\_rewrite\_tac$ (as tested indirectly),

\section{END OF TESTS}
=SML
diag_string(summarize_mt_results());
=TEX
\twocolumn[\section{INDEX}]
\small
\printindex
=TEX
\end{document}
