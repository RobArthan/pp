=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{IED 1563}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Module Tests for the Rewriting Rules of Inference}  %% Mandatory field
\def\TPPheadtitle{Module Tests for the Rewriting Rules of Inference}
\TPPref{DS/FMU/IED/MDT026}  %% Mandatory field
\def\SCCSversion{$Revision$ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{ML Literate Script}
\TPPkeywords{}
\TPPauthor{K.Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{K.Blackburn & WIN01\\D.J.~King & WIN01}
\TPPauthorisation{R.D.Arthan & Project Manager}
\TPPabstract{A set of module tests are given for the 
the abstract data type $THM$.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{Document control}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history} 
\begin{description}
\item [Issue 1.1]
First version.
\item [Issue 1.2]
Reacted to issue 1.3 of \cite{DS/FMU/IED/DTD026}.
\item [Issue 1.3]
Changed $TRAVERSE$ to $MAP$.
\end{description}
\subsection{Changes forecast}
\section{GENERAL}
\subsection{Scope}
This document contains the module testing of the Rewriting Rules of Inference, required by ???.
The design is in \cite{DS/FMU/IED/DTD026}
and it is
implemented in \cite{DS/FMU/IED/IMP026}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains the module testing of the material given a design in \cite{DS/FMU/IED/DTD026},
following the test policy given in that document and the general policy given in \cite{DS/FMU/IED/PLN008}.

The tests distinguish the behaviour of all the inference rules from each other.
It shows (for the examples given, and hopefully always) that the filtered assumption rules behave as the expected equivalents given filters $(fn\ x\ =>\ true)$ and $(fn\ x\ =>\ false)$.
It also shows that the conversions behave as their rule
equivalents suggest.
\subsubsection{Dependencies}
This document is derived from the detailed design in \cite{DS/FMU/IED/DTD026},
and is further influenced by the implementation, in  \cite{DS/FMU/IED/IMP026}.
\subsubsection{Deficiencies}
The coverage of the tests, as called for by the test specification, may currently be incomplete.
\section{INITIALISATION}
Initialise the test package:
=SML
usefile "dtd013.sml";
usefile "imp013.sml";
init_mt_results();
=TEX
Initialising the rewriting parameters:
=SML
set_rewrite_canon (Combinators.I);
set_basic_rewrites [];
set_rewrite_conversions [];
=TEX

\section{VALUE BINDINGS}
Û
f_first_thm =  Ö (É x é F Ä x Ç F) Ä (É x é F Å x Ç x)
Ê
=SML
local
	val s1 = asm_rule mk_f;
	val s2 = contr_rule ªF Ä xº s1;
	val s3 = all_ä_intro s2;
	val s4 = asm_rule ªF Ä xº;
	val s5 = Ä_left_elim s4;
	val s6 = all_ä_intro s5;
	val s7 = Ç_intro s6 s3;
	val s8 = all_É_intro s7;

	val s9 = asm_rule ªx : BOOLº;
	val s10 = Å_left_intro mk_f s9;
	val s11 = all_ä_intro s10;
	val s12 = asm_rule ªF Å xº;
	val s13 = Å_cancel_rule s12 f_thm;
	val s14 = all_ä_intro s13;
	val s15 = Ç_intro s14 s11;
	val s16 = all_É_intro s15;
	
	val s17 = Ä_intro  s8 s16;
in
	val f_first_thm = s17;
end;
=TEX
=SML
val sample = ª(ç f x y é (f x Ä y) Ä (ç p é p) q)(ç x é å x) T ((ç p é p) q)º;
val sample_thm = asm_rule sample;
val fall = (fn x => true);
val fnone = (fn x => false);

val sample2 = ª((ç f p q é (f p Ä f q))(ç x é å x) T (å(å F)) Å å(1 = 1)) Ç (F Å t)º;
val sample2_thm = asm_rule sample2;
val res1 = ªF Ä T Å F Ç F Å tº;
val res2 = ª((ç p é ç q é ((ç x é å x) p) Ä ((ç x é å x) q)) T (å T)) Å å T Ç F Å tº;
val res3 = ªF Å t Ç F Å tº;
val res4 = ªF Ç tº;
val res5 = ª((ç p é ç q é ((ç x é å x) p) Ä ((ç x é å x) q)) T (å T)) Å å T Ç tº;
val res6 = ªF Å t Ç tº;
val res7 = ª((ç f é ç p é ç q é (f p) Ä (f q)) (ç x é å x) T (å T)) Å å (1 = 1) Ç F Å tº;
val res8 = ª((ç f é ç p é ç q é (f p) Ä (f q)) (ç x é å x) T (å T)) Å å (1 = 1) Ç tº;
val res9 = ªt Ç tº;

val thms = [(Ç_t_intro f_thm), f_first_thm];
val thms1 = [å_t_thm, Ç_t_intro f_thm];
val sample3 = ªå(å T)º;
val sample3_thm = asm_rule sample3;
val res31 = ªå Fº;
val res32 = mk_t;
=TEX
\section{THE TESTS}
We will test the assorted dervied rewrite functions,
and these will serve as the primary test of $prim\_rewrite\_conv$.
\subsection{Testing the Conversions}
First check that having no effect causes a failure:
=SML
store_mt_results mt_run_fail [
	("rewrite_rule 26001 a",
	rewrite_rule [],
	t_thm,
	gen_fail_msg "rewrite_rule" 26001 []),
	("pure_rewrite_rule 26001 a",
	pure_rewrite_rule [],
	t_thm,
	gen_fail_msg "pure_rewrite_rule" 26001 []),
	("once_rewrite_rule 26001 a",
	once_rewrite_rule [],
	t_thm,
	gen_fail_msg "once_rewrite_rule" 26001 []),
	("pure_once_rewrite_rule 26001 a",
	pure_once_rewrite_rule [],
	t_thm,
	gen_fail_msg "pure_once_rewrite_rule" 26001 []),
	("asm_rewrite_rule 26001 a",
	asm_rewrite_rule [],
	t_thm,
	gen_fail_msg "asm_rewrite_rule" 26001 []),
	("pure_asm_rewrite_rule 26001 a",
	pure_asm_rewrite_rule [],
	t_thm,
	gen_fail_msg "pure_asm_rewrite_rule" 26001 []),
	("once_asm_rewrite_rule 26001 a",
	once_asm_rewrite_rule [],
	t_thm,
	gen_fail_msg "once_asm_rewrite_rule" 26001 []),
	("pure_once_asm_rewrite_rule 26001 a",
	pure_once_asm_rewrite_rule [],
	t_thm,
	gen_fail_msg "pure_once_asm_rewrite_rule" 26001 []),
	("fasm_rewrite_rule 26001 a",
	fasm_rewrite_rule [] fall,
	t_thm,
	gen_fail_msg "fasm_rewrite_rule" 26001 []),
	("pure_fasm_rewrite_rule 26001 a",
	pure_fasm_rewrite_rule [] fall,
	t_thm,
	gen_fail_msg "pure_fasm_rewrite_rule" 26001 []),
	("once_fasm_rewrite_rule 26001 a",
	once_fasm_rewrite_rule [] fall,
	t_thm,
	gen_fail_msg "once_fasm_rewrite_rule" 26001 []),
	("pure_once_fasm_rewrite_rule 26001 a",
	pure_once_fasm_rewrite_rule [] fall,
	t_thm,
	gen_fail_msg "pure_once_fasm_rewrite_rule" 26001 [])
	];

store_mt_results mt_run_fail [
	("rewrite_conv 26001 a",
	rewrite_conv [],
	mk_t,
	gen_fail_msg "rewrite_conv" 26001 []),
	("pure_rewrite_conv 26001 a",
	pure_rewrite_conv [],
	mk_t,
	gen_fail_msg "pure_rewrite_conv" 26001 []),
	("once_rewrite_conv 26001 a",
	once_rewrite_conv [],
	mk_t,
	gen_fail_msg "once_rewrite_conv" 26001 []),
	("pure_once_rewrite_conv 26001 a",
	pure_once_rewrite_conv [],
	mk_t,
	gen_fail_msg "pure_once_rewrite_conv" 26001 [])
	];
=TEX
Now try setting the conversions:
=SML
set_rewrite_conversions [(ª(ç x é f) yº,simple_%beta%_conv)];
=SML
store_mt_results mt_run[
	("rewrite_rule 1",
	dest_thm o (rewrite_rule []),
	sample_thm,
	([sample],ª((å T) Ä q) Ä qº)),
	("once_rewrite_rule 1",
	dest_thm o (once_rewrite_rule []),
	sample_thm,
	([sample],ª(ç x y é ((ç x é å x) x Ä y) Ä (ç p é p) q) T qº)),
	("asm_rewrite_rule 1",
	dest_thm o (asm_rewrite_rule []),
	sample_thm,
	([sample],ª((å T) Ä q) Ä qº)),
	("once_asm_rewrite_rule 1",
	dest_thm o (once_asm_rewrite_rule []),
	sample_thm,
	([sample],ª(ç x y é ((ç x é å x) x Ä y) Ä (ç p é p) q) T qº)),
	("fasm_rewrite_rule 1",
	dest_thm o (fasm_rewrite_rule [] fall),
	sample_thm,
	([sample],ª((å T) Ä q) Ä qº)),
	("once_fasm_rewrite_rule 1",
	dest_thm o (once_fasm_rewrite_rule [] fall),
	sample_thm,
	([sample],ª(ç x y é ((ç x é å x) x Ä y) Ä (ç p é p) q) T qº))
	];

store_mt_results mt_run[
	("rewrite_conv 1",
	dest_thm o (rewrite_conv []),
	sample,
	([],mk_eq(sample,ª((å T) Ä q) Ä qº))),
	("once_rewrite_conv 1",
	dest_thm o (once_rewrite_conv []),
	sample,
	([],mk_eq(sample,ª(ç x y é ((ç x é å x) x Ä y) Ä (ç p é p) q) T qº)))
	];
=TEX
\subsection{Setting the basic rewrites}
=SML	
set_basic_rewrites[å_t_thm, 
	f_first_thm,
	(Ç_t_intro f_thm), 
	all_É_intro(Ç_t_intro (refl_conv ªx:'aº))
	];
=TEX
=SML
store_mt_results mt_run[
	("rewrite_rule 2",
	dest_thm o (rewrite_rule []),
	sample2_thm,
	([sample2],res1)),
	("once_rewrite_rule 2",
	dest_thm o (once_rewrite_rule []),
	sample2_thm,
	([sample2],res2)),
	("asm_rewrite_rule 2",
	dest_thm o (asm_rewrite_rule []),
	sample2_thm,
	([sample2],mk_t)),
	("pure_asm_rewrite_rule 2",
	dest_thm o (pure_asm_rewrite_rule []),
	sample2_thm,
	([sample2],res3)),
	("once_asm_rewrite_rule 2",
	dest_thm o (once_asm_rewrite_rule []),
	sample2_thm,
	([sample2],res3)),
	("pure_once_asm_rewrite_rule 2",
	dest_thm o (pure_once_asm_rewrite_rule []),
	sample2_thm,
	([sample2],res3)),
	("fasm_rewrite_rule 2a",
	dest_thm o (fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],mk_t)),
	("fasm_rewrite_rule 2b",
	dest_thm o (fasm_rewrite_rule [] fnone),
	sample2_thm,
	([sample2],res1)),
	("pure_fasm_rewrite_rule 2a",
	dest_thm o (pure_fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],res3)),
	("once_fasm_rewrite_rule 2a",
	dest_thm o (once_fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],res3)),
	("once_fasm_rewrite_rule 2b",
	dest_thm o (once_fasm_rewrite_rule [] fnone),
	sample2_thm,
	([sample2],res2)),
	("pure_once_fasm_rewrite_rule 2a",
	dest_thm o (pure_once_fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],res3))
	];
=TEX
=SML
store_mt_results mt_run[
	("rewrite_conv 2",
	dest_thm o (rewrite_conv []),
	sample2,
	([],mk_eq(sample2,res1))),
	("once_rewrite_conv 2",
	dest_thm o (once_rewrite_conv []),
	sample2,
	([],mk_eq(sample2,res2)))
	];
=TEX
\subsection{Setting the Canonicalisation}
=SML
set_rewrite_canon (flat o map strip_Ä_rule);
=TEX
=SML
store_mt_results mt_run[
	("rewrite_rule 3",
	dest_thm o (rewrite_rule []),
	sample2_thm,
	([sample2],res4)),
	("once_rewrite_rule 3",
	dest_thm o (once_rewrite_rule []),
	sample2_thm,
	([sample2],res5)),
	("asm_rewrite_rule 3",
	dest_thm o (asm_rewrite_rule []),
	sample2_thm,
	([sample2],mk_t)),
	("pure_asm_rewrite_rule 3",
	dest_thm o (pure_asm_rewrite_rule []),
	sample2_thm,
	([sample2],res3)),
	("once_asm_rewrite_rule 3",
	dest_thm o (once_asm_rewrite_rule []),
	sample2_thm,
	([sample2],res6)),
	("pure_once_asm_rewrite_rule 3",
	dest_thm o (pure_once_asm_rewrite_rule []),
	sample2_thm,
	([sample2],res3)),
	("fasm_rewrite_rule 3a",
	dest_thm o (fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],mk_t)),
	("fasm_rewrite_rule 3b",
	dest_thm o (fasm_rewrite_rule [] fnone),
	sample2_thm,
	([sample2],res4)),
	("pure_fasm_rewrite_rule 3a",
	dest_thm o (pure_fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],res3)),
	("once_fasm_rewrite_rule 3a",
	dest_thm o (once_fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],res6)),
	("once_fasm_rewrite_rule 3b",
	dest_thm o (once_fasm_rewrite_rule [] fnone),
	sample2_thm,
	([sample2],res5)),
	("pure_once_fasm_rewrite_rule 3a",
	dest_thm o (pure_once_fasm_rewrite_rule [] fall),
	sample2_thm,
	([sample2],res3))
	];
=TEX
=SML
store_mt_results mt_run[
	("rewrite_conv 3",
	dest_thm o (rewrite_conv []),
	sample2,
	([],mk_eq(sample2,res4))),
	("once_rewrite_conv 3",
	dest_thm o (once_rewrite_conv []),
	sample2,
	([],mk_eq(sample2,res5)))
	];
=TEX
\subsection{Rewriting with theorems}
Get parameters right:
=SML
set_rewrite_canon Combinators.I;
set_basic_rewrites[å_t_thm, 
	all_É_intro(Ç_t_intro (refl_conv ªx:'aº))
	];

=TEX
=SML
store_mt_results mt_run[
	("rewrite_rule 4",
	dest_thm o (rewrite_rule thms),
	sample2_thm,
	([sample2],res1)),
	("pure_rewrite_rule 4",
	dest_thm o (pure_rewrite_rule thms),
	sample2_thm,
	([sample2],res7)),
	("once_rewrite_rule 4",
	dest_thm o (once_rewrite_rule thms),
	sample2_thm,
	([sample2],res2)),
	("pure_once_rewrite_rule 4",
	dest_thm o (pure_once_rewrite_rule thms),
	sample2_thm,
	([sample2],res7)),
	("asm_rewrite_rule 4",
	dest_thm o (asm_rewrite_rule thms),
	sample2_thm,
	([sample2],mk_t)),
	("pure_asm_rewrite_rule 4",
	dest_thm o (pure_asm_rewrite_rule thms),
	sample2_thm,
	([sample2],res3)),
	("once_asm_rewrite_rule 4",
	dest_thm o (once_asm_rewrite_rule thms),
	sample2_thm,
	([sample2],res3)),
	("pure_once_asm_rewrite_rule 4",
	dest_thm o (pure_once_asm_rewrite_rule thms),
	sample2_thm,
	([sample2],res3)),
	("fasm_rewrite_rule 4a",
	dest_thm o (fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],mk_t)),
	("fasm_rewrite_rule 4b",
	dest_thm o (fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res1)),
	("pure_fasm_rewrite_rule 4a",
	dest_thm o (pure_fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],res3)),
	("pure_fasm_rewrite_rule 4b",
	dest_thm o (pure_fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res7)),
	("once_fasm_rewrite_rule 4a",
	dest_thm o (once_fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],res3)),
	("once_fasm_rewrite_rule 4b",
	dest_thm o (once_fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res2)),
	("pure_once_fasm_rewrite_rule 4a",
	dest_thm o (pure_once_fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],res3)),
	("pure_once_fasm_rewrite_rule 4b",
	dest_thm o (pure_once_fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res7))
	];
=TEX
=SML
store_mt_results mt_run[
	("rewrite_conv 4",
	dest_thm o (rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res1))),
	("pure_rewrite_conv 4",
	dest_thm o (pure_rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res7))),
	("once_rewrite_conv 4",
	dest_thm o (once_rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res2))),
	("pure_once_rewrite_conv 4",
	dest_thm o (pure_once_rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res7)))];
=TEX

=TEX
\subsection{Rewriting with theorems}
Get parameters right:
=SML
set_rewrite_canon  (flat o map strip_Ä_rule);
=TEX
=SML
store_mt_results mt_run[
	("rewrite_rule 5",
	dest_thm o (rewrite_rule thms),
	sample2_thm,
	([sample2],res4)),
	("pure_rewrite_rule 5",
	dest_thm o (pure_rewrite_rule thms),
	sample2_thm,
	([sample2],res8)),
	("once_rewrite_rule 5",
	dest_thm o (once_rewrite_rule thms),
	sample2_thm,
	([sample2],res5)),
	("pure_once_rewrite_rule 5",
	dest_thm o (pure_once_rewrite_rule thms),
	sample2_thm,
	([sample2],res8)),
	("asm_rewrite_rule 5",
	dest_thm o (asm_rewrite_rule thms),
	sample2_thm,
	([sample2],mk_t)),
	("pure_asm_rewrite_rule 5",
	dest_thm o (pure_asm_rewrite_rule thms),
	sample2_thm,
	([sample2],res9)),
	("once_asm_rewrite_rule 5",
	dest_thm o (once_asm_rewrite_rule thms),
	sample2_thm,
	([sample2],res6)),
	("pure_once_asm_rewrite_rule 5",
	dest_thm o (pure_once_asm_rewrite_rule thms),
	sample2_thm,
	([sample2],res6)),
	("fasm_rewrite_rule 5a",
	dest_thm o (fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],mk_t)),
	("fasm_rewrite_rule 5b",
	dest_thm o (fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res4)),
	("pure_fasm_rewrite_rule 5a",
	dest_thm o (pure_fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],res9)),
	("pure_fasm_rewrite_rule 5b",
	dest_thm o (pure_fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res8)),
	("once_fasm_rewrite_rule 5a",
	dest_thm o (once_fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],res6)),
	("once_fasm_rewrite_rule 5b",
	dest_thm o (once_fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res5)),
	("pure_once_fasm_rewrite_rule 5a",
	dest_thm o (pure_once_fasm_rewrite_rule thms fall),
	sample2_thm,
	([sample2],res6)),
	("pure_once_fasm_rewrite_rule 5b",
	dest_thm o (pure_once_fasm_rewrite_rule thms fnone),
	sample2_thm,
	([sample2],res8))
	];
=TEX
=SML
store_mt_results mt_run[
	("rewrite_conv 5",
	dest_thm o (rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res4))),
	("pure_rewrite_conv 5",
	dest_thm o (pure_rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res8))),
	("once_rewrite_conv 5",
	dest_thm o (once_rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res5))),
	("pure_once_rewrite_conv 5",
	dest_thm o (pure_once_rewrite_conv thms),
	sample2,
	([],mk_eq(sample2,res8)))];
=TEX
\subsection{Distinguishing $pure\_$ and $pure\_once\_$}
The above tests don't manage to distinguish the behaviour
of all the functions.
The folowing ad-hoc test completes the separation of behaviour.
=SML
set_basic_rewrites [];
=TEX
=SML
store_mt_results mt_run[
	("rewrite_rule 6",
	dest_thm o (rewrite_rule thms1),
	sample3_thm,
	([sample3],res32)),
	("pure_rewrite_rule 6",
	dest_thm o (pure_rewrite_rule thms1),
	sample3_thm,
	([sample3],res32)),
	("once_rewrite_rule 6",
	dest_thm o (once_rewrite_rule thms1),
	sample3_thm,
	([sample3],res31)),
	("pure_once_rewrite_rule 6",
	dest_thm o (pure_once_rewrite_rule thms1),
	sample3_thm,
	([sample3],res31)),
	("asm_rewrite_rule 6",
	dest_thm o (asm_rewrite_rule thms1),
	sample3_thm,
	([sample3],res32)),
	("pure_asm_rewrite_rule 6",
	dest_thm o (pure_asm_rewrite_rule thms1),
	sample3_thm,
	([sample3],res32)),
	("once_asm_rewrite_rule 6",
	dest_thm o (once_asm_rewrite_rule thms1),
	sample3_thm,
	([sample3],res31)),
	("pure_once_asm_rewrite_rule 6",
	dest_thm o (pure_once_asm_rewrite_rule thms1),
	sample3_thm,
	([sample3],res31)),
	("fasm_rewrite_rule 6a",
	dest_thm o (fasm_rewrite_rule thms1 fall),
	sample3_thm,
	([sample3],res32)),
	("fasm_rewrite_rule 6b",
	dest_thm o (fasm_rewrite_rule thms1 fnone),
	sample3_thm,
	([sample3],res32)),
	("pure_fasm_rewrite_rule 6a",
	dest_thm o (pure_fasm_rewrite_rule thms1 fall),
	sample3_thm,
	([sample3],res32)),
	("pure_fasm_rewrite_rule 6b",
	dest_thm o (pure_fasm_rewrite_rule thms1 fnone),
	sample3_thm,
	([sample3],res32)),
	("once_fasm_rewrite_rule 6a",
	dest_thm o (once_fasm_rewrite_rule thms1 fall),
	sample3_thm,
	([sample3],res31)),
	("once_fasm_rewrite_rule 6b",
	dest_thm o (once_fasm_rewrite_rule thms1 fnone),
	sample3_thm,
	([sample3],res31)),
	("pure_once_fasm_rewrite_rule 6a",
	dest_thm o (pure_once_fasm_rewrite_rule thms1 fall),
	sample3_thm,
	([sample3],res31)),
	("pure_once_fasm_rewrite_rule 6b",
	dest_thm o (pure_once_fasm_rewrite_rule thms1 fnone),
	sample3_thm,
	([sample3],res31))
	];
=TEX
=SML
store_mt_results mt_run[
	("rewrite_conv 6",
	dest_thm o (rewrite_conv thms1),
	sample3,
	([],mk_eq(sample3,res32))),
	("pure_rewrite_conv 6",
	dest_thm o (pure_rewrite_conv thms1),
	sample3,
	([],mk_eq(sample3,res32))),
	("once_rewrite_conv 6",
	dest_thm o (once_rewrite_conv thms1),
	sample3,
	([],mk_eq(sample3,res31))),
	("pure_once_rewrite_conv 6",
	dest_thm o (pure_once_rewrite_conv thms1),
	sample3,
	([],mk_eq(sample3,res31)))];
=TEX
\subsection{Testing $prim\_conv\_rule$}
=SML
store_mt_results mt_run [
	("prim_rewrite_rule 1",
	dest_thm o (prim_rewrite_rule 
		[(ª(ç x é f) yº,simple_%beta%_conv)]
		(Combinators.I)
		[]
		TOP_MAP_C
		[]),
	sample_thm,
	([sample],ª((å T) Ä q) Ä qº)),
	("prim_rewrite_rule 2",
	dest_thm o (prim_rewrite_rule 
		[(ª(ç x é f) yº,simple_%beta%_conv)]
		(Combinators.I)
		[]
		ONCE_MAP_C
		[]),
	sample_thm,
	([sample],ª(ç x y é ((ç x é å x) x Ä y) Ä (ç p é p) q) T qº)),
	("prim_rewrite_rule 3",
	dest_thm o (prim_rewrite_rule 
		[(ª(ç x é f) yº,simple_%beta%_conv)]
		(Combinators.I)
		[å_t_thm, 
		 f_first_thm,
		 (Ç_t_intro f_thm), 
		 all_É_intro(Ç_t_intro (refl_conv ªx:'aº))]
		TOP_MAP_C
		[]),
	sample2_thm,
	([sample2],res1)),
	("prim_rewrite_rule 4",
	dest_thm o (prim_rewrite_rule 
		[(ª(ç x é f) yº,simple_%beta%_conv)]
		(flat o map strip_Ä_rule)
		[å_t_thm, 
		 f_first_thm,
		 (Ç_t_intro f_thm), 
		 all_É_intro(Ç_t_intro (refl_conv ªx:'aº))]
		TOP_MAP_C
		[]),
	sample2_thm,
	([sample2],res4)),
	("prim_rewrite_rule 5",
	dest_thm o (prim_rewrite_rule 
		[(ª(ç x é f) yº,simple_%beta%_conv)]
		(Combinators.I)
		[å_t_thm, 
		 all_É_intro(Ç_t_intro (refl_conv ªx:'aº))]
		TOP_MAP_C
		[f_first_thm, (Ç_t_intro f_thm)]),
	sample2_thm,
	([sample2],res1)),
	("prim_rewrite_rule 6",
	dest_thm o (prim_rewrite_rule 
		[(ª(ç x é f) yº,simple_%beta%_conv)]
		(flat o map strip_Ä_rule)
		[å_t_thm, 
		 all_É_intro(Ç_t_intro (refl_conv ªx:'aº))]
		TOP_MAP_C
		[f_first_thm, (Ç_t_intro f_thm)]),
	sample2_thm,
	([sample2],res4))
	];
=TEX
	
\section{END OF TESTS}
=SML
summarize_mt_results();
=TEX
\twocolumn[\section{INDEX}]
\small
\printindex
=TEX
\end{document}
