######################################################################
#
#	hol.mkf from $Header: /home/rda/hol/RCS/hol.mkf,v 1.1 1999/04/27 16:59:32 rda Exp rda $
#
#	makefile for the HOL database for ProofPower
#
######################################################################


# suffixes known
.SUFFIXES: .db .doc .ldd0 .ldd .log .lot .sh .doc .tex .tch

# default make target.  displays a list of more useful targets
PRODNAME=PPHol
default:
	@echo "The following are some of the more useful make commands:"
	@echo " "
	@echo "make -f $(PRODNAME).mkf $(PRODNAME)         - makes $(PRODNAME)"
	@echo "make -f $(PRODNAME).mkf rel                   - makes the release directory"
	@echo "make -f $(PRODNAME).mkf tgz                   - makes the distribution"

######################################################################
#
#	Makefile Definitions
#
######################################################################

PRODUCT=$(PRODNAME)$(PPVER)
CWD=$(shell pwd)

######################################################################
#
#	Makefile Definitions
#
######################################################################

# Architecture type (used as a file-name suffix for images by NJML)
HEAP_SUFFIX=		$(shell eval `.arch-n-opsys`; echo $$HEAP_SUFFIX)

# database names
HOLDBNAME=	hol
HOLDB=		hol.$(HEAP_SUFFIX)
HOLDBLDD=	$(HOLDBNAME).ldd
SLRPDB=		slrp.$(HEAP_SUFFIX)

# Makefiles
HOLMKF=		hol.mkf

# Detailed designs and Implementations
# These files are split into three sets.
# Set 0 comprises just the portability module. It must be compiled first
# using the compiler's native commands for loading a file.
# Set 1 comprises the build up to the theory of characters. Some modules
# in set 1 have module tests that need to be run before set 2 is loaded
# A copy of the image is made once they are compiled.
# Set 2 comprises all the rest.
HOLSMLDOCS0 =	dtd108.doc imp108.doc	# Portability module
HOLSMLDOCS1 +=	dtd002.doc imp002.doc	# System control and basic error reporting
HOLSMLDOCS1 +=	dtd001.doc imp001.doc	# Standard ML Utilities
HOLSMLDOCS1 +=	dtd110.doc imp110.doc	# Reader Writer

HOLSMLDOCS1 +=	dtd003.doc imp003.doc	# Types and Terms
HOLSMLDOCS1 +=	dtd006.doc imp006.doc	# Abstract Data Type THM
HOLSMLDOCS1 +=	dtd004.doc imp004.doc	# Derived Terms
HOLSMLDOCS1 +=	dtd010.doc imp010.doc	# Warning Message Subsystem
HOLSMLDOCS1 +=	dtd012.doc imp012.doc	# Interface to the Abstract Data Type THM
HOLSMLDOCS1 +=	dtd015.doc imp015.doc	# HOL Lexical Analyser
HOLSMLDOCS1 +=	dtd011.doc imp011.doc	# Antiunification
HOLSMLDOCS1 +=	dtd020.doc imp020.doc	# Symbol Table
HOLSMLDOCS1 +=	dtd019.doc imp019.doc	# HOL Parser
HOLSMLDOCS1 +=	dtd014.doc imp014.doc	# Unification
HOLSMLDOCS1 +=	dtd016.doc imp016.doc	# Type Inference
HOLSMLDOCS1 +=	dtd022.doc imp022.doc	# HOL Parser Interface
HOLSMLDOCS1 +=	dtd023.doc imp023.doc	# Basic Definitions and Axioms
HOLSMLDOCS1 +=	dtd024.doc imp024.doc	# Oppen printing routines
HOLSMLDOCS1 +=	dtd031.doc imp031.doc	# Pretty Printer Support
HOLSMLDOCS1 +=	dtd032.doc imp032.doc	# HOL Pretty Printing functions
HOLSMLDOCS1 +=	dtd025.doc imp025.doc	# Pretty Printer
HOLSMLDOCS1 +=	dtd007.doc imp007.doc	# Derived Inference Rules I
HOLSMLDOCS1 +=	dtd008.doc imp008.doc	# Discrimination Nets
HOLSMLDOCS1 +=	dtd009.doc imp009.doc	# Tactics I
HOLSMLDOCS1 +=	dtd051.doc imp051.doc	# Proof contexts
HOLSMLDOCS1 +=	dtd028.doc imp028.doc	# Tactics II
HOLSMLDOCS1 +=	dtd026.doc imp026.doc	# Rewriting Rules
HOLSMLDOCS1 +=	dtd030.doc imp030.doc	# Subgoal Package
HOLSMLDOCS1 +=	dtd033.doc imp033.doc	# Theory Lister
HOLSMLDOCS1 +=	dtd037.doc imp037.doc	# pair
HOLSMLDOCS1 +=	dtd038.doc imp038.doc	# î
HOLSMLDOCS1 +=	dtd039.doc imp039.doc	# list
HOLSMLDOCS1 +=	dtd040.doc imp040.doc	# char

HOLSMLDOCS2 =	dtd103.doc imp103.doc	# conjectures database
HOLSMLDOCS2 +=	dtd045.doc imp045.doc	# general purpose theories
HOLSMLDOCS2 +=	dtd027.doc imp027.doc	# DerivedRules2
HOLSMLDOCS2 +=	dtd029.doc imp029.doc	# Tactics3
HOLSMLDOCS2 +=	dtd044.doc imp044.doc	# sets
HOLSMLDOCS2 +=	dtd046.doc imp046.doc	# Constant Specification
HOLSMLDOCS2 +=	dtd058.doc imp058.doc	# Automatic Existence Proof
HOLSMLDOCS2 +=	dtd059.doc imp059.doc	# Product types
HOLSMLDOCS2 +=	dtd057.doc imp057.doc	# Arithmetic Computation
HOLSMLDOCS2 +=	dtd067.doc imp067.doc	# Resolution
HOLSMLDOCS2 +=	dtd076.doc imp076.doc	# First Set of Proof Contexts
HOLSMLDOCS2 +=	dtd081.doc imp081.doc	# Algebraic Normalisation Conversions
HOLSMLDOCS2 +=	dtd082.doc imp082.doc	# Linear Arithmetic
HOLSMLDOCS2 +=	dtd084.doc imp084.doc	# Equational reasoning
HOLSMLDOCS2 +=	dtd071.doc imp071.doc	# Relations
HOLSMLDOCS2 +=	dtd072.doc imp072.doc	# Functional Relations
HOLSMLDOCS2 +=	dtd074.doc imp074.doc	# Sequences
HOLSMLDOCS2 +=	dtd073.doc imp073.doc	# Numbers and Finiteness
HOLSMLDOCS2 +=	dtd093.doc imp093.doc	# Integers
HOLSMLDOCS2 +=	dtd036.doc imp036.doc	# Initialisation
HOLSMLDOCS2 +=	dtd105.doc imp105.doc	# HOL Integer Proof Support

SHELLSCRIPTS = pp
SHELLSCRIPTS += hol
SHELLSCRIPTS += pp_list
SHELLSCRIPTS += hol_list
SHELLSCRIPTS += pp_make_database
SHELLSCRIPTS += pp_read


# These module tests are run halfway through the build process
# and so are mentioned separately.
HOLTESTDOCS =	mdt006.doc	# module test of 006
HOLTESTDOCS +=	mdt012.doc	# module test of 012
HOLTESTDOCS +=	mdt020.doc	# module test of 020

# Module tests
HOLMDTDOCS =	mdt001.doc
HOLMDTDOCS +=	mdt002.doc
HOLMDTDOCS +=	mdt003.doc
HOLMDTDOCS +=	mdt004.doc
HOLMDTDOCS +=	mdt110.doc
HOLMDTDOCS +=	mdt007.doc
HOLMDTDOCS +=	mdt008.doc
HOLMDTDOCS +=	mdt009.doc
HOLMDTDOCS +=	mdt011.doc
HOLMDTDOCS +=	mdt014.doc
HOLMDTDOCS +=	mdt015.doc
HOLMDTDOCS +=	mdt016.doc
HOLMDTDOCS +=	mdt019.doc
HOLMDTDOCS +=	mdt022.doc
HOLMDTDOCS +=	mdt023.doc
HOLMDTDOCS +=	mdt024.doc
HOLMDTDOCS +=	mdt025.doc
HOLMDTDOCS +=	mdt026.doc
HOLMDTDOCS +=	mdt027.doc
HOLMDTDOCS +=	mdt028.doc
HOLMDTDOCS +=	mdt029.doc
HOLMDTDOCS +=	mdt030.doc
HOLMDTDOCS +=	mdt031.doc
HOLMDTDOCS +=	mdt032.doc
HOLMDTDOCS +=	mdt033.doc
HOLMDTDOCS +=	mdt037.doc
HOLMDTDOCS +=	mdt038.doc
HOLMDTDOCS +=	mdt039.doc
HOLMDTDOCS +=	mdt040.doc
HOLMDTDOCS +=	mdt044.doc
HOLMDTDOCS +=	mdt045.doc
HOLMDTDOCS +=	mdt046.doc
HOLMDTDOCS +=	mdt051.doc
HOLMDTDOCS +=	mdt057.doc
HOLMDTDOCS +=	mdt058.doc
HOLMDTDOCS +=	mdt059.doc
HOLMDTDOCS +=	mdt067.doc
HOLMDTDOCS +=	mdt071.doc
HOLMDTDOCS +=	mdt072.doc
HOLMDTDOCS +=	mdt073.doc
HOLMDTDOCS +=	mdt074.doc
HOLMDTDOCS +=	mdt076.doc
HOLMDTDOCS +=	mdt081.doc
HOLMDTDOCS +=	mdt082.doc
HOLMDTDOCS +=	mdt084.doc
HOLMDTDOCS +=	mdt093.doc
HOLMDTDOCS +=	mdt103.doc
HOLMDTDOCS +=	mdt105.doc
HOLMDTDOCS +=	mdt013.doc
HOLMDTDOCS +=	mdt035.doc

# SLRP generator
SLRPDOCS=     dtd018.doc imp018.doc\
		dtd017.doc imp017.doc
SLRPSMLFILES=	dtd108.sml imp108.sml \
		dtd002.sml imp002.sml \
		dtd001.sml imp001.sml \
		$(SLRPDOCS:.doc=.sml)

# Testing tools

TESTTOOLS=	doctch \
		doctds

# Variations on the documents
HOLSMLFILES0=	$(HOLSMLDOCS0:.doc=.sml)
HOLLDDFILES0=	$(HOLSMLDOCS0:.doc=.ldd0)
HOLSMLFILES1=	$(HOLSMLDOCS1:.doc=.sml)
HOLLDDFILES1=	$(HOLSMLDOCS1:.doc=.ldd)
HOLSMLFILES2=	$(HOLSMLDOCS2:.doc=.sml)
HOLLDDFILES2=	$(HOLSMLDOCS2:.doc=.ldd)
HOLTESTSMLS=	$(HOLTESTDOCS:.doc=.sml)
HOLTESTTTDS=	$(HOLTESTDOCS:.doc=.ttd0)
HOLMDTSMLS=	$(HOLMDTDOCS:.doc=.sml)
HOLMDTTTDS=	$(HOLMDTDOCS:.doc=.ttd)

# Detailed Design and implementation of the IED test harness
IEDTESTDOCS=	dtd013.doc imp013.doc dtd035.doc imp035.doc
IEDTESTSMLS=	$(IEDTESTDOCS:.doc=.sml)


# Flags for ML compiler.  Currently non needed
MLFLAGS=	
# Build the empty database

HOLEMPTYCMD=	val system_version : string = \"$(RELEASE)\";\
	SMLofNJ.exportML \"$(HOLDBNAME)\";

# Hol database initialisation commands

HOLTOPTHY=	basic_hol
HOLTOPPC=	basic_hol
HOLBUILDDATE=	`date '+ [\"- - build_on %y/%m/%d %H:%M:%S\", \"$(RELEASE)\"]'`
			

HOLBANNERCMD= icl'set_banner (Value (\"ProofPower \"^system_version^\" [HOL Database]\")); \
		save_and_quit ();

HOLINITCMD=	open_theory \"$(HOLTOPTHY)\"; \
		repeat pop_pc; \
		push_pc \"$(HOLTOPPC)\"; \
		save_and_quit ();

######################################################################
#
# Dependencies - determining the order of compilation
#
######################################################################

dtd108.ldd0: $(HOLDBLDD)
dtd002.ldd: imp108.ldd0
dtd001.ldd: imp002.ldd
dtd110.ldd: imp001.ldd
dtd003.ldd: imp110.ldd
dtd006.ldd: imp003.ldd
dtd004.ldd: imp006.ldd
dtd010.ldd: imp004.ldd
dtd012.ldd: imp010.ldd
dtd015.ldd: imp012.ldd
dtd011.ldd: imp015.ldd
dtd020.ldd: imp011.ldd
dtd019.ldd: imp020.ldd
dtd014.ldd: imp019.ldd
dtd016.ldd: imp014.ldd
dtd022.ldd: imp016.ldd
dtd023.ldd: imp022.ldd
dtd024.ldd: imp023.ldd
dtd031.ldd: imp024.ldd
dtd032.ldd: imp031.ldd
dtd025.ldd: imp032.ldd
dtd007.ldd: imp025.ldd
dtd008.ldd: imp007.ldd
dtd009.ldd: imp008.ldd
dtd051.ldd: imp009.ldd
dtd028.ldd: imp051.ldd
dtd026.ldd: imp028.ldd
dtd030.ldd: imp026.ldd
dtd033.ldd: imp030.ldd
dtd037.ldd: imp033.ldd
dtd038.ldd: imp037.ldd
dtd039.ldd: imp038.ldd
dtd040.ldd: imp039.ldd
dtd103.ldd: imp040.ldd
dtd045.ldd: imp103.ldd
dtd027.ldd: imp045.ldd
dtd029.ldd: imp027.ldd
dtd044.ldd: imp029.ldd
dtd046.ldd: imp044.ldd
dtd058.ldd: imp046.ldd
dtd059.ldd: imp058.ldd
dtd057.ldd: imp059.ldd
dtd067.ldd: imp057.ldd
dtd076.ldd: imp067.ldd
dtd081.ldd: imp076.ldd
dtd082.ldd: imp081.ldd
dtd084.ldd: imp082.ldd
dtd071.ldd: imp084.ldd
dtd072.ldd: imp071.ldd
dtd074.ldd: imp072.ldd
dtd073.ldd: imp074.ldd
dtd093.ldd: imp073.ldd
dtd036.ldd: imp093.ldd
dtd105.ldd: imp036.ldd

imp108.ldd0: dtd108.ldd0
imp002.ldd: dtd002.ldd
imp001.ldd: dtd001.ldd
imp110.ldd: dtd110.ldd

imp003.ldd: dtd003.ldd
imp006.ldd: dtd006.ldd
imp004.ldd: dtd004.ldd
imp010.ldd: dtd010.ldd
imp012.ldd: dtd012.ldd
imp015.ldd: dtd015.ldd
imp011.ldd: dtd011.ldd
imp020.ldd: dtd020.ldd
imp019.ldd: dtd019.ldd
imp014.ldd: dtd014.ldd
imp016.ldd: dtd016.ldd
imp022.ldd: dtd022.ldd
imp023.ldd: dtd023.ldd
imp024.ldd: dtd024.ldd
imp031.ldd: dtd031.ldd
imp032.ldd: dtd032.ldd
imp025.ldd: dtd025.ldd
imp007.ldd: dtd007.ldd
imp008.ldd: dtd008.ldd
imp009.ldd: dtd009.ldd
imp051.ldd: dtd051.ldd
imp028.ldd: dtd028.ldd
imp026.ldd: dtd026.ldd
imp030.ldd: dtd030.ldd
imp033.ldd: dtd033.ldd
imp037.ldd: dtd037.ldd
imp038.ldd: dtd038.ldd
imp039.ldd: dtd039.ldd
imp040.ldd: dtd040.ldd

imp103.ldd: dtd103.ldd
imp045.ldd: dtd045.ldd
imp027.ldd: dtd027.ldd
imp029.ldd: dtd029.ldd
imp044.ldd: dtd044.ldd
imp046.ldd: dtd046.ldd
imp058.ldd: dtd058.ldd
imp059.ldd: dtd059.ldd
imp057.ldd: dtd057.ldd
imp067.ldd: dtd067.ldd
imp076.ldd: dtd076.ldd
imp081.ldd: dtd081.ldd
imp082.ldd: dtd082.ldd
imp084.ldd: dtd084.ldd
imp071.ldd: dtd071.ldd
imp072.ldd: dtd072.ldd
imp074.ldd: dtd074.ldd
imp073.ldd: dtd073.ldd
imp093.ldd: dtd093.ldd
imp036.ldd: dtd036.ldd
imp105.ldd: dtd105.ldd


mdt023.ttd: mdt023.sml dtd023.tch $(IEDTESTSMLS)
mdt035.ttd: dtd035.sml imp035.sml $(IEDTESTSMLS)
mdt037.ttd: mdt037.sml dtd037.tch $(IEDTESTSMLS)
mdt038.ttd: mdt038.sml dtd038.tch $(IEDTESTSMLS)
mdt039.ttd: mdt039.sml dtd039.tch $(IEDTESTSMLS)
mdt040.ttd: mdt040.sml dtd040.tch $(IEDTESTSMLS)
mdt044.ttd: mdt044.sml dtd044.tch $(IEDTESTSMLS)
mdt045.ttd: mdt045.sml dtd045.tch $(IEDTESTSMLS)
mdt071.ttd: mdt071.sml dtd071.tch $(IEDTESTSMLS)
mdt072.ttd: mdt072.sml dtd072.tch $(IEDTESTSMLS)
mdt073.ttd: mdt073.sml dtd073.tch $(IEDTESTSMLS)
mdt074.ttd: mdt074.sml dtd074.tch $(IEDTESTSMLS)
mdt093.ttd: mdt093.sml dtd093.tch $(IEDTESTSMLS)

int004.ttd: wrk044.sml wrk043.sml wrk046.sml

######################################################################
#
#	Building the SLR Parser Generator
#
######################################################################

slrp: $(SLRPDB)

slrp.sml: $(SLRPSMLFILES) hol.mkf
	cat $(SLRPSMLFILES) > slrp.sml ;\
	echo "PPBuild.pp'save_name := \"slrp\";" >>slrp.sml
	echo "if PPBuild.pp'save() then PPCompiler.exit 0 else ();" >>slrp.sml
	
$(SLRPDB): slrp.sml
	@echo "Building the Parser Generator...";\
	sml < slrp.sml >slrp.ldd
	echo "...Done"

######################################################################
#
#	Building the HOL database
#
######################################################################


holbuilt.ldd: holstage1.$(HEAP_SUFFIX) $(HOLLDDFILES2)
	@- rm -rf holbuilt.ldd
	make -f $(HOLMKF) holinitcmd
	make -f $(HOLMKF) holbannercmd
	grep '+++ Compiled' $(HOLLDDFILES0)
	grep '+++ Compiled' $(HOLLDDFILES1)
#	grep 'module' $(HOLTESTTTDS)
	grep '+++ Compiled' $(HOLLDDFILES2)
	@ touch holbuilt.ldd
	echo "Done."

hol holbuild: hol.ldd

holteststage1:  $(HOLTESTTTDS)
holteststage2:	  $(HOLMDTTTDS)

$(HOLLDDFILES2) $(HOLLDDFILES1) $(HOLLDDFILES0): $(HOLDBLDD)

holstage1.$(HEAP_SUFFIX): $(HOLLDDFILES1) $(HOLLDDFILES0)
	echo "PPBuild.pp'save_name := \"holstage1\"; PPBuild.pp'save();" \
		| sml @SMLload=$(HOLDB)

holinitcmd:
	echo "$(HOLINITCMD)" | sml @SMLload=$(HOLDB)

holbannercmd:
	echo "$(HOLBANNERCMD)" | sml @SMLload=$(HOLDB)

holdb $(HOLDBLDD):
	rm -f $(HOLDB)
	echo "$(HOLEMPTYCMD)" | sml
	chmod u+wr $(HOLDB)
	@touch $(HOLDBLDD)

dtd002.sml \
imp002.sml : dtd002.doc imp002.doc
	docsml -f hol.svf dtd002
	docsml  -f hol.svf imp002
	sed -e '/^[()"\\}; ]*new_error_message/,$$ !d' < dtd002.sml >> imp002.sml
	sed -e '/^[()"\\}; ]*new_error_message/,$$ d' < dtd002.sml > dtd002.sml.tmp
	mv dtd002.sml.tmp dtd002.sml

imp019.sml : dtd019.sml $(SLRPDB) imp019.doc imp018.sml
	docsml -f hol.svf imp019


######################################################################
#
#	Building the shell scripts
#
######################################################################

$(SHELLSCRIPTS): imp111.doc
	sieve sml < imp111.doc

######################################################################
#
#	Testing the HOL database
#
######################################################################

$(TESTTOOLS): imp100.doc
	docsml imp100

hol_test: $(HOLDBLDD) $(HOLMDTTTDS)
	@grep 'module' $(HOLMDTTTDS)
	@-grep 'abandoning file' $(HOLMDTTTDS)

######################################################################
#
#	Constructing release directories
#
######################################################################

dirs:
	rm -rf release
	mkdir release
	mkdir release/bin

rel: dirs holbuilt.ldd $(SHELLSCRIPTS) README.hol
	cp hol.$(HEAP_SUFFIX) release/bin
	cp $(SHELLSCRIPTS) release/bin
	cp README.hol release


$(PRODUCT).tgz: rel
	cd release && tar cvf ../$(PRODUCT).tar .
	cd $(CWD) && gzip $(PRODUCT).tar && mv $(PRODUCT).tar.gz $(PRODUCT).tgz

tgz: $(PRODUCT).tgz

######################################################################
#
#	Tidying Up
#
######################################################################

clean:
	@rm -f $(HOLSMLDOCS0) $(HOLSMLFILES0) $(HOLLDDFILES0)
	@rm -f $(HOLSMLDOCS1) $(HOLSMLFILES1) $(HOLLDDFILES1)
	@rm -f $(HOLSMLDOCS2) $(HOLSMLFILES2) $(HOLLDDFILES2)
	@rm -f $(HOLTESTDOCS) $(HOLTESTSMLS) $(HOLTESTTTDS)
	@rm -f $(HOLMDTDOCS) $(HOLMDTSMLS) $(HOLMDTTTDS)
	@rm -f $(IEDTESTDOCS) $(IEDTESTSMLS)
	@rm -f $(SLRPDOCS) $(SLRPSMLFILES)

veryclean: clean
	@rm -f $(HOLDB) $(HOLDBLDD) $(SLRPDB)
	@rm -f *tch

######################################################################
#
#	Generic Rules
#
######################################################################

%.ldd0: %.sml
	@-rm $@ $*.err 2>/dev/null
	@echo "Compiling (code)" $<
	@echo "use \"$<\"; SMLofNJ.exportML \"$(HOLDBNAME)\";"\
		| sml $(MLFLAGS) @SMLload=$(HOLDB) > $*.err
	@echo "+++ Compiled $<: OK (Compilation Run Complete) +++" >> $*.err
	@mv $*.err $@

%.ldd: %.sml
	@-rm $@ $*.err 2>/dev/null
	@echo "Compiling (code)" $<
	@echo "PPBuild.pp'load \"$<\";"\
		| sml $(MLFLAGS) @SMLload=$(HOLDB) > $*.err
	@echo "+++ Compiled $<: OK (Compilation Run Complete) +++" >> $*.err
	@mv $*.err $@


%.ttd: %.sml $(IEDTESTSMLS) $(TESTTOOLS)
	@-rm $@ $.err 2>/dev/null
	@echo "Compiling (test)" $<
	@echo "use_file \"$<\"; quit();" | sml $(MLFLAGS) @SMLload=$(HOLDB) > $*.err
	@mv $*.err $@

%.ttd0: %.sml $(IEDTESTSMLS) $(TESTTOOLS)
	@-rm $@ $.err 2>/dev/null
	@echo "Compiling (test)" $<
	@echo "use_file \"$<\"; quit();" | sml $(MLFLAGS) @SMLload=holstage1.$(HEAP_SUFFIX) > $*.err
	@mv $*.err $@

%.sml: %.doc hol.svf
	docsml -f hol.svf $*

%.tch: %.doc dtd035.sml imp035.sml
	doctch $*
