=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{HOL PDS System Initialisation}  %% Mandatory field
\TPPref{DS/FMU/IED/DTD036}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}  
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{R.D.~Arthan & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{
This document contains the detailed design for the module of the ICL HOL
system responsible for system initialisation.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library\\RDA\\AJH\\DJK}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1]
First draft for comment.

\item[Issue 1.3, \FormatDate{92/01/20} ] Updated to use new fonts.
\item[Issue 1.4]
Changes to reflect needs of \cite{DS/FMU/IED/DTD069}.
\item[Issue 1.5]
Added $show\_status$.
\end{description}
\subsection{Changes forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for the module in ICL HOL responsible
for system initialisation and close-down
as called for in the high-level design document
\cite{DS/FMU/IED/HLD008}.

The implementation for this design is given in \cite{DS/FMU/IED/IMP036}.
\subsection{Introduction}
Facilities are required to allow various functions (nominated during construction
of the HOL system or by an extender of the system) to be invoked at the start
of each session. Examples include output of a banner message at the start of
a session, accessing command line options, and performing compiler-specific
initialisation  (e.g. to set up pretty printing with PolyML).

We also need to supply the means whereby the user saves his work and ends a
session. These facilities are defined here.

\subsection{Dependencies}
This document depends only on Standard ML facilities.
The implementation will depend on compiler-specific features for
saving the Standard ML state.
\subsection{Possible Enhancements}
None known.
\subsection{Deficiencies}
None known.

\section{USER INTERFACES}
=DOC
signature ÛHOLSystemÝ = sig
=DESCRIBE
This is the signature of the structure $HOLSystem$ which contains
functions used to end a HOL session and to save the results of a HOL session,
as well as two access routes to the UNIX environment to the Poly/ML session.
=ENDDOC
=DOC
val	Ûhol_quitÝ : unit -> unit
=DESCRIBE
$hol\_quit()$ is used to end a session with the hol system. In interactive
use, if changes have been made to any theory during the session, a warning
message is output and the user is asked whether to quit or not.
If there any changes which have not been saved when $hol\_quit$
is used non-interactively,
then a message to this effect will be output and the session will end without
the changes being saved.
=ENDDOC
=FAILURE
36001	Not all changes to the theory database have been saved (using hol_save) in this session
=TEX
=DOC
val	Ûhol_saveÝ : unit -> unit;
=DESCRIBE
$hol\_save()$ is used to update the filestore copy of the theory database
to reflect any changes made in the current session.
=ENDDOC
=DOC
val	Ûget_shell_varÝ : string -> string;
=DESCRIBE
$get\_env$ $shvar$ will extract the value (as a string), if any, bound to
shell variable $shvar$.
If the variable is not set the empty string will be returned.
=ENDDOC
=DOC
val	Ûget_terminal_line_lengthÝ : unit -> int;
=DESCRIBE
This function returns the terminal's line length,
found by invoking {\tt stty\ size}.
This is a useful value to pass to $set\_line\_length$ (q.v.).
=ENDDOC
=DOC
val Ûicl'write_to_initialisation_error_fileÝ : string list -> unit;
=DESCRIBE
This function outputs (not appends) its list of strings to a temporary file named in shell variable 
=INLINEFT
hol_initialisation_error_file
=TEX
{} that,
if not empty, is executed before quitting {\tt hol}, {\tt hol\_list} and {\tt hol\_make\_makedatabase} with exit status of 1.
It is intended to pass error text to the UNIX interface programs,
and is only intended for creators of such programs,
or initialisation scripts for $new\_init\_fun$.
=ENDDOC
=DOC
val Ûshow_statusÝ : unit -> unit;
=DESCRIBE
This command will list:
\begin{enumerate}
\item
Current theory name;
\item
Current proof context name(s);
\item
Current subgoal label;
\item
Number of distinct goals to be achieved;
\item
Current system version.
\end{enumerate}
=ENDDOC
The follow are used to format the output:
=FAILURE
30010	The subgoal package is not in use
30026	There is no current goal
36006	Current theory name: ?0
36007	Current proof context name(s): [?0]
36008	Current subgoal label: ?0
36009	Remaining distinct subgoals to prove: ?0
36010	Current system version: 1.?0
=TEX
=SML
end; (* of signature HOLSystem *)
=TEX
\section{SYSTEM INITIALISATION}
=DOC
signature ÛInitialisationÝ = sig
=DESCRIBE
This is the signature of the structure $HOLInitialisation$ which contains
functions which may be used to add and test new start of session functions.
These functions are for use by those extending the system.
=ENDDOC
=DOC

val	Ûnew_init_funÝ : (unit -> unit) -> unit;
=DESCRIBE
$new\_init\_fun$ adds a new entry to a table of functions which are invoked
at the start of each session. At the beginning of each session, these functions
are executed in turn, with the function stored by the most recent use
of $new\_init\_fun$ executed last.

Since the table is stored in the Standard ML object code of the ICL HOL system itself,
this function is only effective when used to extend the ICL HOL system by
adding to that code.
System extenders are reminded that entries cannot be deleted from the table.
=USES
For use
in extending the system (e.g. to add extra messages to the start of
session message).
=ENDDOC

In the supplied system for PolyML, the table needs to contain the functions described in \section ref{Startup}.

=DOC
val	ÛinitÝ : unit -> unit;
=DESCRIBE
$init$ causes the initialisation functions in the table maintained
by $new\_init\_fun$ to be executed, as they would be at the start of
a session.
=USES
Mainly for use in testing extensions to the system.
=SEEALSO
$new\_init\_fun$.
=ENDDOC
The following is the banner message to be output when a session
begins. The ``$?0$'' is to be set to the value of the variable
$system\_version$ which is set up in \cite{DS/FMU/IED/IMP021}
to give a version number for the system build.
=FAILURE
36000	=== ICL HOL Version (1.?0) Copyright (C) ICL 1991,1992 ===
=TEX
=DOC
val Ûicl'database_infoÝ : {
	theory_hierarchy : icl'Kernel.icl'HIERARCHY OPT,
	cache_theory : string,
	caches : string list
};
=DESCRIBE
Private ICL HOL database information, that niether contains
information useful to the user, nor should be overwritten by the user.
=ENDDOC
\subsection{Standard Initialisation Functions}
\label{Startup}
We can now describe the initialisation functions
added using $new\_init\_fun$, which are, in order of execution:
\begin{enumerate}
\item
Set a flag to indicate that the state is as yet unchanged.
\item
Set the line length to two less than the terminal (to give 
a little leeway for any above average size extended ML characters.
=GFTSHOW
fn () => (set_line_length (get_terminal_line_length () - 2)
	handle _ => ());
=TEX
\item
Load the database's hierarchy, if any,
via $icl'database\_info$.
\item
Load the theory name stored in shell variable  
$hol\-\_current\-\_theory$, via $get\-\_shell\-\_var$,
or if that is unset or the empty string then attempt to load the database's cache theory
via $icl'database\_info$
and failing that leave the current theory unchanged.
If $hol\-\_current\-\_theory$ is a non-empty string that is
not a theory that can be opened then the hol session will be
quitted, and a shell script output to the file
with name given by $hol\_initialisation\_error\_file$
for program {\tt hol}, et al.
\item
Attempt to load (by $use\_file$) each of the comma-separated list of initialisation
scripts stored in shell variable $hol\-\_initialisation\-\_scripts$.
Failure on any particular load will not cause subsequent loading attempts to cease.
\item 
Initialise any modules which have an associated start of session initialisation function - just the theory cache
mechanism $set\_theory\_caches$ at the moment ($pp\_init$,
$error\_init$ don't seem necessary).
\item
Output the start of session banner message.
\end{enumerate}
Messages used in system initialisation:
=FAILURE
36002	echo "$PROGNAME: cannot open theory ?0 set in environment"
36003	.
36004	There is no hol_initialisation_error_file set
36005	Unable to load initialisation file ?0: continuing without it
=TEX
\section{EPILOGUE}
=SML
end; (* of signature Initialisation *)
=TEX
=SML
=TEX
\section{TEST POLICY}
The functions in this document should be tested as described in
\cite{DS/FMU/IED/PLN008}. 
These functions will
be checked out in the interactive integration tests,
in \cite{DS/FMU/IED/INT001}, as they are all interactive
in nature.
\small
\twocolumn[\section{INDEX}]
\printindex
\end{document}




