=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{HOL PDS System Initialisation}  %% Mandatory field
\TPPref{DS/FMU/IED/DTD036}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{R.D.~Arthan & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{
This document contains the detailed design for the module of the ICL HOL
system responsible for system initialisation.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Project Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1]
First draft for comment.

\item[Issue 1.3, \FormatDate{92/01/20} ] Updated to use new fonts.
\item[Issue 1.4]
Changes to reflect needs of \cite{DS/FMU/IED/DTD069}.
\item[Issue 1.5]
Added $print\_status$.
\item [Issue 1.6]
Changed save and exit commands.
\item [Issue 1.7 (26th May 1992)]
Renamings from version 1.5 of DS/FMU/IED/WRK038.
\item [Issue 1.8 (26th May 1992)]
Added $use\_terminal$ to initialisation list.
\item [Issue 1.9 (29th June 1992)]
Recognise difference between unreadable and unprocessable
initialisation files.
\item [Issue 1.10 (29th June 1992)]
Changed formatting of $print\_status$ line.
\item [Issue 1.11,1.12 (13th July 1992)]
Protecting against run-time environment errors.
\item [Issue 1.13 (11th September 1992)]
Extended description of $save\_and\_quit$.
\item [Issue 1.14 (14th September 1992)]
Reordered initialisation functions, corrected a typo.
\item [Issue 1.15 (3rd November 1992)]
Improved banner mechanism, lost system version from $print\_status$.
\end{description}
\subsection{Changes Forecast}
$save\_and\_exit$ should be enhanced to save more, or all,
of the supplied ICL HOL state - e.g. proof contexts,
flags and subgoal package.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for the module in ICL HOL responsible
for system initialisation and close-down
as called for in the high-level design document
\cite{DS/FMU/IED/HLD008}.

The implementation for this design is given in \cite{DS/FMU/IED/IMP036}.
\subsection{Introduction}
Facilities are required to allow various functions (nominated during construction
of the HOL system or by an extender of the system) to be invoked at the start
of each session. Examples include output of a banner message at the start of
a session, accessing command line options, and performing compiler-specific
initialisation  (e.g. to set up pretty printing with PolyML).

We also need to supply the means whereby the user saves his work and ends a
session. These facilities are defined here.

\subsection{Dependencies}
This document depends only on Standard ML facilities.
The implementation will depend on compiler-specific features for
saving the Standard ML state.

Commands $quit$ and $exit$ assume that any exception raised
by $ask\-\_at\-\_terminal$ may be taken to indicate
either that the session is not interactive, or
that $use\-\_terminal$ (q.v.)
is not active.

\subsection{Possible Enhancements}
None known.
\subsection{Deficiencies}
None known.

\section{USER INTERFACES}
=DOC
signature ÛHOLSystemÝ = sig
=DESCRIBE
This is the signature of the structure $HOLSystem$ which contains
functions used to end a HOL session and to save the results of a HOL session,
as well as two access routes to the UNIX environment to the Poly/ML session.
=ENDDOC
=DOC
val	ÛquitÝ : unit -> unit
val	ÛexitÝ : unit -> unit
=DESCRIBE
$quit()$ is used to end a session with the HOL system.
In interactive
use, the user is warned
that the database will not be saved, and asked whether
they still wish to quit.
The session will be quit if the response is ``y'',
and otherwise the user is returned to the HOL session.
If it
is used non-interactively, or $use\_terminal$ (q.v.)
is not active,
then the session will end without
the database being saved.

$exit$ have the same function as $quit$.
=SEEALSO
$save\_and\_quit$, $save\_and\_exit$ to save the database.
=ENDDOC
Text for the above:
=FAILURE
36001	Do you wish to ?0 the session without saving your work (y/n)?
36011	You may save and then ?0 by executing `save_and_?0();`
=TEX
The above two commands assume that any exception raised
by $ask\-\_at\-\_terminal$ may be taken to indicate
either that the session is not interactive, or
that $use\-\_terminal$ (q.v.)
is not active.

=DOC
val	Ûsave_and_quitÝ : unit -> unit;
val	Ûsave_and_exitÝ : unit -> unit;
=DESCRIBE
$save\_and\_quit()$ will save the user's current work
and then end the current session of the HOL system.

If the user is working directly with the ICL-supplied database then restarting a session from the saved database will reveal the session
is unchanged, except for AHL-declared system controls,
such as $PolyML.timing$, which will be reset to default values.

If the user is working with a child of the ICL-supplied database 
(the recommended mode of use, see $hol\_make\_database$)
then restarting a session upon the saved database will reveal a session
in which the previous session's theory hierarchy has been 
preserved, as well as any ML variable or function bindings.
The theory hierarchy in particular contains all the material
displayed by $print\_theory$.
However, any other settings of ICL-provided assignable variables,
and functionality based on such variables, will be
reset to the ICL-provided defaults.
This in particular means that the subgoal package state
(see $set\_goal$) will be emptied,
ICL-provided system controls
(see $set\_flag$) will be reset to defaults,
and user-provided proof context settings and contents
(see $set\_pc$) will be lost.
The functions $top\-\_goal\-\_state$, $get\-\_flags$, and 
$pending\-\_reset\-\_pc\-\_database$ may be used to mitigate these effects, by binding their results to variables
before saving the old session, and using these values
to restore material in the new session.

$save\_and\_exit$ has the same functionality as $save\_and\_quit$.
Both functions have the same behaviour for interactive and non-interactive use.
=SEEALSO
$quit$, $exit$
=FAILUREC
\paragraph{Errors}
If the database cannot be saved then the function will exit
anyway, with an AHL raised error message.
The only warning of this is that the start of session
text informs the user of that the database in read-only 
at that point in time.
=ENDDOC
Later releases of the above function may try harder to preserve other values.
The ``exit anyway'' effect is a consequence of AHL's 
$PolyML.commit$, and not terribly desirable.
=DOC
val	Ûget_shell_varÝ : string -> string;
=DESCRIBE
$get\_env$ $shvar$ will extract the value (as a string), if any, bound to
shell variable $shvar$.
If the variable is not set the empty string will be returned,
as it will be if the attempt to get the variables value fails in any other manner
(such as a shell syntax error),
though any shell error text will not be hidden.
=ENDDOC
=DOC
val	Ûget_terminal_line_lengthÝ : unit -> int;
=DESCRIBE
This function returns the terminal's line length,
found by invoking {\tt stty\ size}.
This is a useful value to pass to $set\_line\_length$ (q.v.).
=FAILURE
36013	Unable to determine terminal line length:
	perhaps not running with a terminal
=ENDDOC
=DOC
val Ûicl'write_to_initialisation_error_fileÝ : string list -> unit;
=DESCRIBE
This function outputs (not appends) its list of strings to a temporary file named in shell variable
=INLINEFT
hol_initialisation_error_file
=TEX
{} that,
if not empty, is executed before quitting {\tt hol}, {\tt hol\_list} and {\tt hol\_make\_makedatabase} with exit status of 1.
It is intended to pass error text to the UNIX interface programs,
and is only intended for creators of such programs,
or initialisation scripts for $new\_init\_fun$.
=ENDDOC
=DOC
val Ûprint_statusÝ : unit -> unit;
=DESCRIBE
This command will list:
\begin{enumerate}
\item
Current theory name;
\item
Current proof context name(s);
\item
Number of distinct goals to be achieved;
\item
Current subgoal label;
\end{enumerate}
=ENDDOC
The follow are used to format the output:
=FAILURE
30010	The subgoal package is not in use
30026	There is no current goal
36006	Current theory name: ?0
36007	Current proof context name(s): [?0]
36008	Current subgoal label: ?0
36009	Remaining distinct subgoals to prove: ?0
=TEX
=DOC
val Ûprint_bannerÝ : unit -> unit;
=DESCRIBE
Output the system startup banner.
=ENDDOC
=DOC
val Ûicl'set_bannerÝ : string OPT -> string;
=DESCRIBE
=INLINEFT
icl'set_banner (Value banner)
=TEX
{} will change the core of the startup banner to $banner$,
returning the old banner core.
=INLINEFT
icl'set_banner Nil
=TEX
{} will freeze the banner so that it can no longer be changed
by this function, still returning the old banner core.
A release of \Product{} will have a frozen banner.
=FAILURE
36015	The contents of the startup banner may no longer be changed
=TEX
The following are text used in creating banners,
36000 is the default core part,
36015 is the unchanging ``wrapping''.
=FAILURE
36000	ProofPower-HOL DB Issue ?0
36016	=== ?0. Copyright (C) ICL 1991,1992 ===
=ENDDOC

=SML
end; (* of signature HOLSystem *)
=TEX
\section{SYSTEM INITIALISATION}
=DOC
signature ÛInitialisationÝ = sig
=DESCRIBE
This is the signature of the structure $HOLInitialisation$ which contains
functions which may be used to add and test new start of session functions.
These functions are for use by those extending the system.
=ENDDOC
=DOC

val	Ûnew_init_funÝ : (unit -> unit) -> unit;
=DESCRIBE
$new\_init\_fun$ adds a new entry to a table of functions which are invoked
at the start of each session. At the beginning of each session, these functions
are executed in turn, with the function stored by the most recent use
of $new\_init\_fun$ executed last.

Since the table is stored in the Standard ML object code of the ICL HOL system itself,
this function is only effective when used to extend the ICL HOL system by
adding to that code.
System extenders are reminded that entries cannot be deleted from the table.
=USES
For use
in extending the system (e.g. to add extra messages to the start of
session message).
=ENDDOC

In the supplied system for PolyML, the table needs to contain the functions described in section ref{Startup}.

=DOC
val	ÛinitÝ : unit -> unit;
=DESCRIBE
$init$ causes the initialisation functions in the table maintained
by $new\_init\_fun$ to be executed, as they would be at the start of
a session.
The failure of any individual initialisation function
will not affect the attempted execution of the others.
=USES
Mainly for use in testing extensions to the system.
=SEEALSO
$new\_init\_fun$.
=FAILURE
36014	Initialisation.init ignored exception: ?0 (?1) 
=ENDDOC

=TEX
=DOC
val Ûicl'database_infoÝ : {
	theory_hierarchy : icl'Kernel.icl'HIERARCHY OPT,
	cache_theory : string,
	caches : string list
};
=DESCRIBE
Private ICL HOL database information, that neither contains
information useful to the user, nor should be overwritten by the user.
=ENDDOC
\subsection{Standard Initialisation Functions}
\label{Startup}
We can now describe the initialisation functions
added using $new\_init\_fun$, which are, in order of execution:
\begin{enumerate}
\item
Set a flag to indicate that the state is as yet unchanged.
\item
Set the line length to two less than the terminal (to give
a little leeway for any above average size extended ML characters.
=GFTSHOW
fn () => (set_line_length (get_terminal_line_length () - 2)
	handle _ => ());
=TEX
\item
Load the database's hierarchy, if any,
via $icl'database\_info$.
\item
Load the theory name stored in shell variable
$hol\-\_current\-\_theory$, via $get\-\_shell\-\_var$,
or if that is unset or the empty string then attempt to load the database's cache theory
via $icl'database\_info$
and failing that leave the current theory unchanged.
If $hol\-\_current\-\_theory$ is a non-empty string that is
not a theory that can be opened then the hol session will be
quitted, and a shell script output to the file
with name given by $hol\_initialisation\_error\_file$
for program {\tt hol}, et al.
\item
Initialise any modules which have an associated start of session initialisation function - just the theory cache
mechanism $set\_theory\_caches$ at the moment ($pp\_init$,
$error\_init$ don't seem necessary).
\item
Attempt to load (by $use\_file$) each of the comma-separated list of initialisation
scripts stored in shell variable $hol\-\_initialisation\-\_scripts$.
Failure on any particular load will not cause subsequent loading attempts to cease.
\item
Output the start of session banner message, via $print\-\_banner$.
\item
Start $use\_terminal$ and give a prompt.
\end{enumerate}
Messages used in system initialisation:
=FAILURE
36002	echo "$PROGNAME: cannot open theory ?0 set in environment"
36004	There is no hol_initialisation_error_file shell variable set
36005	Load of initialisation file ?0 caused an exception:
	continuing without the rest of it
36012	Unable to open file ?0 for reading:
	continuing without it
=TEX
\section{EPILOGUE}
=SML
end; (* of signature Initialisation *)
=TEX
=SML
=TEX
\section{TEST POLICY}
The functions in this document should be tested as described in
\cite{DS/FMU/IED/PLN008}.
These functions will
be checked out in the interactive integration tests,
in \cite{DS/FMU/IED/INT001}, as they are all interactive
in nature.
\small
\twocolumn[\section{INDEX}]
\printindex
\end{document}




