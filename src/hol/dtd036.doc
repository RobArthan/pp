=IGN
********************************************************************************
dtd036.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
% %Z% $Date: 2002/10/17 16:20:01 $ $Revision: 1.33 $ $RCSfile: dtd036.doc,v $
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{HOL PDS System Initialisation}  %% Mandatory field
\TPPref{DS/FMU/IED/DTD036}  %% Mandatory field
\def\SCCSversion{$Revision: 1.33 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2002/10/17 16:20:01 $%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{R.D.~Arthan & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{
This document contains the detailed design for the module of the \Product{}
system responsible for system initialisation.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Project Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1]
First draft for comment.

\item[Issue 1.3, \FormatDate{92/01/20} ] Updated to use new fonts.
\item[Issue 1.4]
Changes to reflect needs of \cite{DS/FMU/IED/DTD069}.
\item[Issue 1.5]
Added $print\_status$.
\item [Issue 1.6]
Changed save and exit commands.
\item [Issue 1.7 (26th May 1992)]
Renamings from version 1.5 of DS/FMU/IED/WRK038.
\item [Issue 1.8 (26th May 1992)]
Added $use\_terminal$ to initialisation list.
\item [Issue 1.9 (29th June 1992)]
Recognise difference between unreadable and unprocessable
initialisation files.
\item [Issue 1.10 (29th June 1992)]
Changed formatting of $print\_status$ line.
\item [Issue 1.11,1.12 (13th July 1992)]
Protecting against run-time environment errors.
\item [Issue 1.13 (11th September 1992)]
Extended description of $save\_and\_quit$.
\item [Issue 1.14 (14th September 1992)]
Reordered initialisation functions, corrected a typo.
\item [Issue 1.15 (3rd November 1992)]
Improved banner mechanism, lost system version from $print\_status$.
\item [Issue 1.16 (15th December 1992)]
Improved $save\_and\_quit$ effects.
\item [Issue 1.17 (22nd December 1992)]
Moved line length in initialisation functions.
\item [Issue 1.18 (19th January 1993)]
$save\_and\_quit$ checks for inconsistent state.
\item [Issue 1.19 (10th March 1993)]
Copyright dates corrected.
\item [Issue 1.20 (7th July 1993)]
Bug 126 fixed.
\item [Issue 1.21 (1st February 1994)]
Changed $exit$ and $save\_and\_exit$ to return the exit status, provided
as an argument, to the calling process. Both functions now have type $int -> unit$.
Added $use\_files\_save\_and\_exit$ to support batch processing of files. 
\item [Issue 1.22 (9th May 1994)]
Added the function $save()$ to the signature $HOLSystem$.
\item [Issue 1.24 (21st September 1994)]
Changed copyright message in banner to say 1991-94.
\item [Issue 1.25 (10st November 1994)]
Changed the style of the copyright banner.
\item [Issue 1.26]
Changed copyright message in banner to say 1991-96.
\item [Issue 1.27]
Changed copyright message in banner to say 1991-97.
\item [Issue 1.28]
Changed copyright message in banner to ``Lemma 1''.
Added {gc\_messages} interface.
\item [Issue 1.29]
Rationalised treatment of line lengths, environment variables and initialisation
errors.
\item [Issue 1.30]
Data structures now allow for new controls in child databases.
\item [Issue 1.31]
Updated copyright line.
\item[Issue 1.32] Copyright and banner updates for open source release.
\item[Issue 1.33] PPHol-specific updates for open source release
\item[Issue 1.34] Addressed comments on documentation from QinetiQ.
\end{description}
\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for the module in \Product{} responsible
for system initialisation and close-down
as called for in the high-level design document
\cite{DS/FMU/IED/HLD008}.

The implementation for this design is given in \cite{DS/FMU/IED/IMP036}.
\subsection{Introduction}
Facilities are required to allow various functions (nominated during construction
of the HOL system or by an extender of the system) to be invoked at the start
of each session. Examples include output of a banner message at the start of
a session, accessing command line options, and performing compiler-specific
initialisation  (e.g. to set up pretty printing with PolyML).

We also need to supply the means whereby the user saves his work and ends a
session. These facilities are defined here.

\subsection{Dependencies}
This document depends only on Standard ML facilities.
The implementation will depend on compiler-specific features for
saving the Standard ML state.

Commands $quit$ and $exit$ assume that any exception raised
by $ask\-\_at\-\_terminal$ may be taken to indicate
either that the session is not interactive, or
that $use\-\_terminal$ (q.v.)
is not active.

\subsection{Possible Enhancements}
None known.
\subsection{Deficiencies}
None known.

\section{USER INTERFACES}
=DOC
signature ÛHOLSystemÝ = sig
=DESCRIBE
This is the signature of the structure $HOLSystem$ which contains
functions used to end a HOL session and to save the results of a HOL session,
as well as two access routes to the UNIX environment to the Standard ML session.
=ENDDOC
=DOC
val	ÛquitÝ : unit -> unit
val	ÛexitÝ : int -> unit
=DESCRIBE
$quit()$ is used to end a session with the HOL system.
In interactive
use, the user is warned
that the database will not be saved, and asked whether
they still wish to quit.
The session will be quit if the response is ``y'',
and otherwise the user is returned to the HOL session.
If it
is used non-interactively, or $use\_terminal$ (q.v.)
is not active,
then the session will end without
the database being saved.

$exit$ ends the current session of the HOL system with an
exit status that is the argument to $exit$. The exit status is
available to the calling environment (e.g., as documented in the
UNIX manual page for sh(1)). This facility enables the user
to flag errors to the outside environment from within \Product.

=SEEALSO
$save\_and\_quit$, $save\_and\_exit$ to save the database.
=ENDDOC
Text for the above:
=FAILURE
36001	Do you wish to ?0 the session without saving your work (y/n)?
36011	You may save and then quit by executing `save_and_quit();`
36018	You may save and then exit by executing e.g., `save_and_exit 0;`
=TEX
The above two commands assume that any exception raised
by $ask\-\_at\-\_terminal$ may be taken to indicate
either that the session is not interactive, or
that $use\-\_terminal$ (q.v.)
is not active.

=DOC
val	ÛsaveÝ : unit -> bool;
val	Ûsave_and_quitÝ : unit -> unit;
val	Ûsave_and_exitÝ : int -> unit;
=DESCRIBE
$save()$ saves the user's current work to disk.  The return value is $true$ in the initial {\Product} session - the one in which $save$ was called - but is $false$ in any subsequent {\Product} session started using the saved database.
% Thus the semantics of the return value are the same as for $PolyML.commit$.

$save\_and\_quit()$ saves the user's current work to disk and then ends the current {\Product} session.

If the user is working directly with the ICL-supplied database then restarting a session from the saved database will reveal the session
is unchanged,
except for some compiler-specific system controls which may be reset to default values.

If the user is working with a child of the ICL-supplied database 
(the recommended mode of use, see $pp\_make\_database$)
then restarting a session upon the saved database will reveal a session
in which the previous session's theory hierarchy has been 
preserved, as well as any ML variable or function bindings,
ICL-supplied assignable variables,
and functionality based on such variables.
This in particular means that the subgoal package state
(see $set\_goal$),
ICL-provided system controls
(see, e.g., $set\_flag$),
and user-provided proof context settings and contents
(see $set\_pc$) will be preserved.
However, any assignable variables introduced by the user in
a parent database to the one used will be reset to the 
values set in the last save of the parent databse, NOT
those last set in the child database.

$save\_and\_exit$ saves the user's current work
and then ends the current {\Product} session with an
exit status that is the argument to $save\_and\_exit$.
The exit status is available to the calling environment (e.g., as documented in the
UNIX manual page for sh(1)). This facility enables the user
to flag errors to the outside environment from within \Product.

When any of these three functions is called, the compactification cache is cleared in order to reduce the size of the saved database.
=SEEALSO
$quit$, $exit$, $clear\_compactification\_cache$
=FAILURE
36017	STATE WAS FOUND TO BE INCONSISTENT: state should not be saved
=FAILUREC
\paragraph{Errors}
If the database cannot be saved then depending on the Standard ML compiler,
the function may exit anyway, with a compiler-specific raised error message.
The only warning of this is that the start of session
text informs the user of the database is read-only 
at that point in time.
This does not happen with Standard ML of New Jersey, which reports the error and
then continues the session.
=ENDDOC
The ``exit anyway'' effect is a consequence of AHL's 
$PolyML.commit$, and not terribly desirable.

=DOC
val Ûload_filesÝ : string list -> bool
=DESCRIBE
$load\_files$ takes a list of files and compiles each file (using $use\_file$). A message indicating the success or failure is output as each file is processed and a summary is output when all files have been processed.
If all the files loaded without any error, $load\_files$ returns $true$ else it returns $false$.
=ENDDOC
Text for the above:
=FAILURE
36021	+++ Compiled ?0: ?1?2 +++
36022	OK
36023	Failed
36024	 (Compilation Run Complete)
=TEX

=DOC
val	Ûget_shell_varÝ : string -> string;
=DESCRIBE
$get\_shell\_var$ $shvar$ will extract the value (as a string), if any, bound to
shell environment variable $shvar$.
If the variable is not set the empty string will be returned.
=ENDDOC
=DOC
val Ûprint_statusÝ : unit -> unit;
=DESCRIBE
This command will list:
\begin{enumerate}
\item
Current theory name;
\item
Current proof context name(s);
\item
Number of distinct goals to be achieved;
\item
Current subgoal label;
\end{enumerate}
=ENDDOC
The follow are used to format the output:
=FAILURE
30010	The subgoal package is not in use
30026	There is no current goal
36006	Current theory name: ?0
36007	Current proof context name(s): [?0]
36008	Current subgoal label: ?0
36009	Remaining distinct subgoals to prove: ?0
=TEX
=DOC
val Ûprint_bannerÝ : unit -> unit;
=DESCRIBE
Output the system startup banner.
=ENDDOC
=DOC
val Ûicl'set_bannerÝ : string OPT -> string;
=DESCRIBE
=INLINEFT
icl'set_banner (Value banner)
=TEX
{} will change the core of the startup banner to $banner$,
returning the old banner core.
=INLINEFT
icl'set_banner Nil
=TEX
{} will freeze the banner so that it can no longer be changed
by this function, still returning the old banner core.
A release of \Product{} will have a frozen banner.
=FAILURE
36015	The contents of the startup banner may no longer be changed
=TEX
The following are text used in creating banners,
36000 is the default core part,
36016 is the unchanging ``wrapping''.
=FAILURE
36000	ProofPower ?0 [HOL Database]
36016	=== ?0   Copyright (C) Lemma 1 Ltd. 2004 ===
=ENDDOC
=DOC
	(* flag: Ûgc_messagesÝ; default false *)
=DESCRIBE
The flag
=INLINEFT
gc_messages
=TEX
\ can be used to turn the Standard ML compiler garbage collector messages on and off
(%
=INLINEFT
true
=TEX
\ meaning on) providing that facility is supported by the compiler being used.
By default, garbage collection messages are turned off.
=ENDDOC

=SML
end; (* of signature HOLSystem *)
=TEX
\section{SYSTEM INITIALISATION}
=DOC
signature ÛInitialisationÝ = sig
=DESCRIBE
This is the signature of the structure $HOLInitialisation$ which contains
functions which may be used to add and test new start of session functions.
These functions are for use by those extending the system.
=ENDDOC
=DOC

val	Ûnew_init_funÝ : (unit -> unit) -> unit;
=DESCRIBE
$new\_init\_fun$ adds a new entry to a table of functions which are invoked
at the start of each session. At the beginning of each session, these functions
are executed in turn, with the function stored by the most recent use
of $new\_init\_fun$ executed last.

Since the table is stored in the Standard ML object code of the \Product{} system itself,
this function is only effective when used to extend the \Product{} system by
adding to that code.
System extenders are reminded that entries cannot be deleted from the table.
=USES
For use
in extending the system (e.g. to add extra messages to the start of
session message).
=ENDDOC

In the supplied system for PolyML, the table needs to contain the functions described in section ref{Startup}.

=DOC
val	ÛinitÝ : unit -> unit;
=DESCRIBE
$init$ causes the initialisation functions in the table maintained
by $new\_init\_fun$ to be executed, as they would be at the start of
a session.
The failure of any individual initialisation function
will not affect the attempted execution of the others.
=USES
Mainly for use in testing extensions to the system.
=SEEALSO
$new\_init\_fun$.
=FAILURE
36014	Exception caught by init: ?0 (?1) 
=ENDDOC

=TEX
=DOC
val Ûicl'theory_hierarchyÝ : icl'Kernel.icl'HIERARCHY OPT;
=DESCRIBE
Private \Product{} database information, that neither contains
information useful to the user, nor should be overwritten by the user.
Note that it is not an assignable variable.
=ENDDOC
=DOC
type ÛICL'DATABASE_INFO_TYPEÝ = {
	theory : string,
	language : string,
	cache_theories : string list,
	control_state : unit -> unit,
	controls : ((string * bool) list * 
		(string * int) list * 
		(string * string) list),
	error_messages : {id:int, text:string} list,
	stats : int S_DICT,
	pc_stack : unit -> unit,
	pc_database : unit -> unit,
	pc_evaluators : unit -> unit,
	ksc_functions : unit -> unit,
	subgoal_package : unit -> unit
};
val Ûicl'database_infoÝ : ICL'DATABASE_INFO_TYPE;
=DESCRIBE
Private \Product{} database information, that neither contains
information useful to the user, nor should be overwritten by the user.
Note that it is not an assignable variable.
It is set by $icl'set\_database\_info$.
=ENDDOC
=DOC
val Ûicl'set_database_infoÝ: unit -> unit;
=DESCRIBE
This function sets the value of $icl'database\_info$
so that it describes the current system state.
The function is used by $save\_and\_quit$,
and elsewhere, but should not be directly invoked by the user.
=ENDDOC
\subsection{Standard Initialisation Functions}
\label{Startup}
We can now describe the initialisation functions
added using $new\_init\_fun$, which are, in order of execution:
\begin{enumerate}
\item
Set a flag to indicate that the state is as yet unchanged.
\item
Load the database's hierarchy, if any,
via $icl'database\_info$.
\item
Load the theory name stored in shell variable
$hol\-\_current\-\_theory$, via $get\-\_shell\-\_var$,
or if that is unset or the empty string then attempt to load the database's cache theory
via $icl'database\_info$
and failing that leave the current theory unchanged.
If $hol\-\_current\-\_theory$ is a non-empty string that is
not a theory that can be opened then the hol session will be
quitted, and a shell script output to the file
with name given by $hol\_initialisation\_error\_file$
for program {\tt hol}, et al.
\item
Initialise the current state (e.g. current theory).
\item
Initialise any modules which have an associated start of session initialisation function - such as flags, controls,
proof context facilites, etc.
\item
Set the line length to two less than the terminal (to give
a little leeway for any above average size extended ML characters.
=GFTSHOW
fn () => (set_line_length (get_terminal_line_length () - 2)
	handle _ => ());
=TEX
\item
Attempt to load (by $use\_file$) each of the comma-separated list of initialisation
scripts stored in shell variable $hol\-\_initialisation\-\_scripts$.
Failure on any particular load will not cause subsequent loading attempts to cease.
\item
Output the start of session banner message, via $print\-\_banner$.
\item
Start $use\_terminal$ and give a prompt.
\end{enumerate}
Messages used in system initialisation:
=FAILURE
36002	Failure during initialisation: unable to open theory ?0
36005	Failed to load ?0
36012	Could not read ?0
=TEX
\section{EPILOGUE}
=SML
end; (* of signature Initialisation *)
=TEX
=SML
=TEX
\section{TEST POLICY}
The functions in this document should be tested as described in
\cite{DS/FMU/IED/PLN008}.
These functions will
be checked out in the interactive integration tests,
in \cite{DS/FMU/IED/INT001}, as they are all interactive
in nature.
\small
\twocolumn[\section{INDEX}]
\printindex
\end{document}




