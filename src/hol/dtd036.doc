=IGN
********************************************************************************
dtd036.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
% %Z% $Date: 2008/02/26 09:58:29 $ $Revision: 1.42 $ $RCSfile: dtd036.doc,v $
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{HOL PDS System Initialisation}  %% Mandatory field
\TPPref{DS/FMU/IED/DTD036}  %% Mandatory field
\def\SCCSversion{$Revision: 1.42 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2008/02/26 09:58:29 $%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{R.D.~Arthan & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{
This document contains the detailed design for the module of the \Product{}
system responsible for system initialisation.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Project Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1 (1991/07/31)]
First draft for comment.

\item[Issue 1.3 (1992/01/20), \FormatDate{92/01/20} ] Updated to use new fonts.
\item[Issue 1.4 (1992/05/06)]
Changes to reflect needs of \cite{DS/FMU/IED/DTD069}.
\item[Issue 1.5 (1992/05/11)]
Added $print\_status$.
\item [Issue 1.6 (1992/05/21)]
Changed save and exit commands.
\item [Issue 1.7 (1992/05/26) (26th May 1992)]
Renamings from version 1.5 of DS/FMU/IED/WRK038.
\item [Issue 1.8 (1992/05/26) (26th May 1992)]
Added $use\_terminal$ to initialisation list.
\item [Issue 1.9 (1992/06/29) (29th June 1992)]
Recognise difference between unreadable and unprocessable
initialisation files.
\item [Issue 1.10 (1992/06/29) (29th June 1992)]
Changed formatting of $print\_status$ line.
\item [Issue 1.11 (1992/07/13),1.12 (1992/07/13) (13th July 1992)]
Protecting against run-time environment errors.
\item [Issue 1.13 (1992/09/11) (11th September 1992)]
Extended description of $save\_and\_quit$.
\item [Issue 1.14 (1992/09/14) (14th September 1992)]
Reordered initialisation functions, corrected a typo.
\item [Issue 1.15 (1992/11/03) (3rd November 1992)]
Improved banner mechanism, lost system version from $print\_status$.
\item [Issue 1.16 (1992/12/15) (15th December 1992)]
Improved $save\_and\_quit$ effects.
\item [Issue 1.17 (1993/01/05) (22nd December 1992)]
Moved line length in initialisation functions.
\item [Issue 1.18 (1993/01/19) (19th January 1993)]
$save\_and\_quit$ checks for inconsistent state.
\item [Issue 1.19 (1993/03/10) (10th March 1993)]
Copyright dates corrected.
\item [Issue 1.20 (1993/07/07) (7th July 1993)]
Bug 126 fixed.
\item [Issue 1.21 (1994/02/01) (1st February 1994)]
Changed $exit$ and $save\_and\_exit$ to return the exit status, provided
as an argument, to the calling process. Both functions now have type $int -> unit$.
Added $use\_files\_save\_and\_exit$ to support batch processing of files.
\item [Issue 1.22 (1994/05/09) (9th May 1994)]
Added the function $save()$ to the signature $HOLSystem$.
\item [Issue 1.24 (1994/09/21) (21st September 1994)]
Changed copyright message in banner to say 1991-94.
\item [Issue 1.25 (1994/11/10) (10st November 1994)]
Changed the style of the copyright banner.
\item [Issue 1.26 (1996/03/12)]
Changed copyright message in banner to say 1991-96.
\item [Issue 1.27 (1997/05/14)]
Changed copyright message in banner to say 1991-97.
\item [Issue 1.28 (2000/06/30)]
Changed copyright message in banner to ``Lemma 1''.
Added {gc\_messages} interface.
\item [Issue 1.29 (2002/03/13)]
Rationalised treatment of line lengths, environment variables and initialisation
errors.
\item [Issue 1.30 (2002/03/19)]
Data structures now allow for new controls in child databases.
\item [Issue 1.31 (2002/10/17)]
Updated copyright line.
\item[Issue 1.32 (2002/10/17)] Copyright and banner updates for open source release.
\item[Issue 1.33 (2002/10/17)] PPHol-specific updates for open source release
\item[Issue 1.34 (2004/02/02)] Addressed comments on documentation from QinetiQ.
\item[Issue 1.35 (2005/04/15)] Removed restrictions on setting the banner and introduced a single function to restore the state at start of a session.
\item[Issue 1.36 (2005/04/16)] Now leaves the details of {\em ICL'DATABASE\_INFO\_TYPE} to the implementation and provides {\em get\_init\_funs} (which allows the implementation to be recoded to make {\em new\_init\_fun} work in child databases under Poly/ML).
\item[Issue 1.37 (2005/12/16)] The prefix for private interfaces is now $pp'$ rather than $icl'$.
\item[Issue 1.38 (2006/03/28)] Added $new\_save\_fun$.
\item[Issue 1.39 (2007/07/26)] More informative error message for {\em load\_files} and {\em load\_scripts}.
\item[Issues 1.40 (2008/02/03), 1.41 (2008/02/07)] Poly/ML 5.1 port.
\item[Issue 1.42 (2008/02/26)] Added message text for announcing database name.
\item[2014/07/23]
Augmented old RCS version numbers in the changes history with dates.
Dates will be used in place of version numbers in future.

%%%% END OF CHANGES HISTORY %%%%
\end{description}
\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for the module in \Product{} responsible
for system initialisation and close-down
as called for in the high-level design document
\cite{DS/FMU/IED/HLD008}.

The implementation for this design is given in \cite{DS/FMU/IED/IMP036}.
\subsection{Introduction}
Facilities are required to allow various functions (nominated during construction
of the HOL system or by an extender of the system) to be invoked at the start
of each session. Examples include output of a banner message at the start of
a session, accessing command line options, and performing compiler-specific
initialisation  (e.g. to set up pretty printing with PolyML).

We also need to supply the means whereby the user saves his work and ends a
session. These facilities are defined here.

\subsection{Dependencies}
This document depends only on Standard ML facilities.
The implementation will depend on compiler-specific features for
saving the Standard ML state.

Commands $quit$ and $exit$ assume that any exception raised
by $ask\-\_at\-\_terminal$ may be taken to indicate
either that the session is not interactive, or
that $use\-\_terminal$ (q.v.)
is not active.

\subsection{Possible Enhancements}
None known.
\subsection{Deficiencies}
None known.

\section{USER INTERFACES}
=DOC
signature ÛHOLSystemÝ = sig
=DESCRIBE
This is the signature of the structure $HOLSystem$ which contains
functions used to end a HOL session and to save the results of a HOL session,
as well as two access routes to the UNIX environment to the Standard ML session.
=ENDDOC
=DOC
val	ÛquitÝ : unit -> unit
val	ÛexitÝ : int -> unit
=DESCRIBE
$quit()$ is used to end a session with the HOL system.
In interactive
use, the user is warned
that the database will not be saved, and asked whether
they still wish to quit.
The session will be quit if the response is ``y'',
and otherwise the user is returned to the HOL session.
If it
is used non-interactively, or $use\_terminal$ (q.v.)
is not active,
then the session will end without
the database being saved.

$exit$ ends the current session of the HOL system with an
exit status that is the argument to $exit$. The exit status is
available to the calling environment (e.g., as documented in the
UNIX manual page for sh(1)). This facility enables the user
to flag errors to the outside environment from within \Product.

=SEEALSO
$save\_and\_quit$, $save\_and\_exit$ to save the database.
=ENDDOC
Text for the above:
=FAILURE
36001	Do you wish to ?0 the session without saving your work (y/n)?
36011	You may save and then quit by executing `save_and_quit();`
36018	You may save and then exit by executing e.g., `save_and_exit 0;`
=TEX
The above two commands assume that any exception raised
by $ask\-\_at\-\_terminal$ may be taken to indicate
either that the session is not interactive, or
that $use\-\_terminal$ (q.v.)
is not active.

=DOC
val	ÛsaveÝ : unit -> unit;
val	Ûsave_asÝ : string -> unit;
val	Ûsave_and_quitÝ : unit -> unit;
val	Ûsave_and_exitÝ : int -> unit;
=DESCRIBE
$save()$ saves the user's current work to disk using the current database name (which is initially derived from the name supplied on the command line when $\Product$ is invoked using the supplied shell scripts).
$save\_as\;name$ saves the user's current work to disk under a new name (which becomes the current name used in subsequent calls of $save()$).

$save\_and\_quit()$ saves the user's current work to disk and then ends the current {\Product} session.

$save\_and\_exit$ saves the user's current work
and then ends the current {\Product} session with an
exit status that is the argument to $save\_and\_exit$.
The exit status is available to the calling environment (e.g., as documented in the
UNIX manual page for sh(1)). This facility enables the user
to flag errors to the outside environment from within \Product.

If these function are called from another function rather than at the top-level
then the function should be the last side-effecting function call before returning
to the top-level,
otherwise the behaviour when a new session is started on the saved state will be
compiler-dependent.

The state of subsystems such as the subgoal package is preserved between sessions by system-dependent means.
The compactification cache is cleared at the end of each session in order to reduce the size of the saved database.
=SEEALSO
$quit$, $exit$, $clear\_compactification\_cache$
=FAILURE
36010	The database name has not been set
36017	STATE WAS FOUND TO BE INCONSISTENT: state should not be saved
=FAILUREC
\paragraph{Errors}
If the database cannot be saved then depending on the Standard ML compiler,
the function may exit anyway, with a compiler-specific raised error message.
The only warning of this is that the start of session
text informs the user of the database is read-only
at that point in time.
This does not happen with Standard ML of New Jersey, which reports the error and
then continues the session.
=ENDDOC
The ``exit anyway'' effect is a consequence of AHL's
$PolyML.commit$, and not terribly desirable.

=DOC
val Ûload_filesÝ : string list -> bool
=DESCRIBE
$load\_files$ takes a list of files and compiles each file (using $use\_file$). A message indicating the success or failure is output as each file is processed and a summary is output when all files have been processed.
If all the files loaded without any error, $load\_files$ returns $true$ else it returns $false$.
=ENDDOC
Text for the above:
=FAILURE
36021	+++ Compiled ?0: ?1?2 +++
36022	OK
36023	Failed
36024	 (Compilation Run Complete)
=TEX

=DOC
val	Ûget_shell_varÝ : string -> string;
=DESCRIBE
$get\_shell\_var$ $shvar$ will extract the value (as a string), if any, bound to
shell environment variable $shvar$.
If the variable is not set the empty string will be returned.
=ENDDOC
=DOC
val Ûprint_statusÝ : unit -> unit;
=DESCRIBE
This command will list:
\begin{enumerate}
\item
Current theory name;
\item
Current proof context name(s);
\item
Number of distinct goals to be achieved;
\item
Current subgoal label;
\end{enumerate}
=ENDDOC
The follow are used to format the output:
=FAILURE
30010	The subgoal package is not in use
30026	There is no current goal
36006	Current theory name: ?0
36007	Current proof context name(s): [?0]
36008	Current subgoal label: ?0
36009	Remaining distinct subgoals to prove: ?0
=TEX
=DOC
val Ûprint_bannerÝ : unit -> unit;
=DESCRIBE
Output the system startup banner.
=ENDDOC
=DOC
val Ûpp'set_bannerÝ : string OPT -> string;
(* string control: Ûsystem_bannerÝ; default - see below *)
(* string control: Ûuser_bannerÝ; default - "" *)
=DESCRIBE
=INLINEFT
pp'set_banner (Value banner)
=TEX
{} will change the core part of the system banner to $banner$,
returning the old value.
=INLINEFT
pp'set_banner Nil
=TEX
{} just returns the current value.
(The value is held in the string control {\em system\_banner} and can also be changed using {\em set\_string\_control} or
read {\em get\_string\_control}).

The messages below gives the banner, which has elements which may be changed by setting
the string controls {\em system\_banner} and {\em user\_banner}.
Message 36050 is printed first with {\em system\_banner} as the insertion (?0)
followed by message 36051 with insertions
giving the latest copyright year (?0) and the {\em user\_banner} (?1).
If it is not empty, {\em user\_banner} should begin with a newline character.

Message 36000 gives the value for {\em system\_banner} set in the HOL database, the insertion being the version string taken from the variable {\em system\_version} defined by the make file.


=FAILURE
36000	ProofPower ?0 [HOL Database]
36050	=== ?0
36051	=== Copyright (C) Lemma 1 Ltd. 2000-?0?1
=ENDDOC
=DOC
	(* flag: Ûgc_messagesÝ; default false *)
=DESCRIBE
The flag
=INLINEFT
gc_messages
=TEX
\ can be used to turn the Standard ML compiler garbage collector messages on and off
(%
=INLINEFT
true
=TEX
\ meaning on) providing that facility is supported by the compiler being used.
By default, garbage collection messages are turned off.
=ENDDOC

=SML
end; (* of signature HOLSystem *)
=TEX
\section{SYSTEM INITIALISATION}
=DOC
signature ÛInitialisationÝ = sig
=DESCRIBE
This is the signature of the structure $HOLInitialisation$ which contains
functions which may be used to add and test new start of session functions.
These functions are for use by those extending the system.
=ENDDOC
=DOC
val Ûnew_init_funÝ : (unit -> unit) -> unit;
=DESCRIBE
$new\_init\_fun$ adds a new entry to a table of functions which are invoked
at the start of each session. At the beginning of each session, these functions
are executed in turn, with the function stored by the most recent use
of $new\_init\_fun$ executed last.
=ENDDOC
=DOC
val Ûnew_save_funÝ : (unit -> unit) -> unit;
=DESCRIBE
$new\_save\_fun$ adds a new entry to a table of functions which are invoked when the state of a session is saved with $save$,  $save\_and\_quit$ or $save\_and\_exit$.
The functions are executed in turn, with the function stored by the most recent use of $new\_save\_fun$ executed last.
=ENDDOC

The table in the HOL database needs to contain the functions described in section \ref{Startup}.

=DOC
val ÛinitÝ : unit -> unit;
=DESCRIBE
$init$ causes the initialisation functions in the table maintained
by $new\_init\_fun$ to be executed, as they would be at the start of
a session.
The failure of any individual initialisation function
will not affect the attempted execution of the others.
=USES
Mainly for use in testing extensions to the system.
=SEEALSO
$new\_init\_fun$.
=FAILURE
36014	Exception caught by init: ?0 (?1)
=ENDDOC
=DOC
val Ûget_init_funsÝ : unit -> (unit -> unit) list;
val Ûget_save_funsÝ : unit -> (unit -> unit) list;
=DESCRIBE
These functions returns the list of functions that have been registered with $new\_init\_fun$ and $new\_save\_fun$.
They are made visible because they are needed to save the state in a child database.
=ENDDOC

=TEX
=DOC
val Ûpp'theory_hierarchyÝ : pp'Kernel.pp'HIERARCHY OPT;
=DESCRIBE
Private \Product{} database information, that neither contains
information useful to the user, nor should be overwritten by the user.
Note that it is not an assignable variable.
=ENDDOC
=DOC
type ÛICL'DATABASE_INFO_TYPEÝ;
val Ûpp'database_infoÝ : ICL'DATABASE_INFO_TYPE;
=DESCRIBE
Private \Product{} database information, that neither contains
information useful to the user, nor should be overwritten by the user.
Note that it is not an assignable variable.
It is set by $pp'set\_database\_info$.
=ENDDOC
=DOC
val Ûpp'set_database_infoÝ: unit -> unit;
=DESCRIBE
This function sets the value of $pp'database\_info$
so that it describes the current system state.
The function is used by $save\_and\_quit$,
and elsewhere, but should not be directly invoked by the user.
=ENDDOC
=DOC
val Ûpp'reset_database_infoÝ: bool -> ICL'DATABASE_INFO_TYPE -> unit;
=DESCRIBE
This function resets the current system state to a given stored value
(which will generally be given by the variable $pp'database\_info$),
optionally setting the current theory.
It is not intended to be called other than in the system start-up code.
=ENDDOC
\subsection{Standard Initialisation Functions}
\label{Startup}
We can now describe the initialisation functions
added using $new\_init\_fun$, which are, in order of execution:
\begin{enumerate}
\item
Set a flag to indicate that the state is as yet unchanged.
\item
Load the database's hierarchy, if any,
via $pp'database\_info$.
\item
Load the theory name stored in shell variable
$hol\-\_current\-\_theory$, via $get\-\_shell\-\_var$,
or if that is unset or the empty string then attempt to load the database's cache theory
via $pp'database\_info$
and failing that leave the current theory unchanged.
If $hol\-\_current\-\_theory$ is a non-empty string that is
not a theory that can be opened then the hol session will be
quitted, and a shell script output to the file
with name given by $hol\_initialisation\_error\_file$
for program {\tt hol}, et al.
\item
Initialise the current state (e.g. current theory).
\item
Initialise any modules which have an associated start of session initialisation function - such as flags, controls,
proof context facilites, etc.
\item
Set the line length to two less than the terminal (to give
a little leeway for any above average size extended ML characters.
=GFTSHOW
fn () => (set_line_length (get_terminal_line_length () - 2)
	handle _ => ());
=TEX
\item
Attempt to load (by $use\_file$) each of the comma-separated list of initialisation
scripts stored in shell variable $hol\-\_initialisation\-\_scripts$.
Failure on any particular load will not cause subsequent loading attempts to cease.
\item
Output the start of session banner message, via $print\-\_banner$.
\item
Start $use\_terminal$ and give a prompt.
\end{enumerate}
Messages used in system initialisation:
=FAILURE
36002	Failure during initialisation: unable to open theory ?0
36005	Failed to load ?0: ?1
36012	Could not read ?0
36025	Database name: ?0
=TEX
\section{EPILOGUE}
=SML
end; (* of signature Initialisation *)
=TEX
=SML
=TEX
\section{TEST POLICY}
The functions in this document should be tested as described in
\cite{DS/FMU/IED/PLN008}.
These functions will
be checked out in the interactive integration tests,
in \cite{DS/FMU/IED/INT001}, as they are all interactive
in nature.
\small
\twocolumn[\section{INDEX}]
\printindex
\end{document}




