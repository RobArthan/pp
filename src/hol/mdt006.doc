=IGN
********************************************************************************
mdt006.doc: this file is part of the ProofPower system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
% %Z% $Id: mdt006.doc,v 1.41 2002/06/03 13:11:12 rda Exp rda $
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Module Tests for the Abstract Data Type $THM$}  %% Mandatory field
\def\TPPheadtitle{Module Tests for the Abstract Data Type $THM$}
\TPPref{DS/FMU/IED/MDT006}  %% Mandatory field
\def\SCCSversion{$Revision: 1.41 $ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2002/06/03 13:11:12 $ %
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{ML Literate Script}
\TPPkeywords{}
\TPPauthor{K.Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.Arthan & Project Manager}
\TPPabstract{A set of module tests are given for the 
the abstract data type $THM$.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History} 
\begin{description}
\item [Issue 1.1]
First draft version.
\item [Issue 1.2]
Corrected typos, slight improvement to layout.
\item [Issue 1.3]
Changed to match issue 1.9 of \cite{DS/FMU/IED/DTD006}.
\item [Issue 1.4]
Testing corrections made to implementation.
\item [Issue 1.5]
Now reloads ``imp006.sml'' to start off from an empty ``min'' theory.
\item [Issue 1.6,1.7]
Changed to match issue 1.11 of \cite{DS/FMU/IED/DTD006}.
\item [Issue 1.8]
Changed a $list\_mk\_∂$ to $list\_mk\_simple\_∂$.
\item [Issue 1.8]
Changed a $mk\_∂$ to $mk\_simple\_∂$.
\item [Issue 1.9]
Added a test for $icl'list\_simple\_µ\_elim$ with duplicate quantifiers.
\item [Issue 1.10]
The prefix $simple$ is moved to being the first prefix, bar $icl'$.
Changed to match issue 1.12 of \cite{DS/FMU/IED/DTD006}.
\item [Issue 1.11]
Clears out theory hierarchy, rather than reloading imp006.
\item [Issue 1.12,1.13]
Deals with some glitches.
\item [Issue 1.14]
Initial use of material from \cite{DS/FMU/IED/DTD013}.
\item [Issue 1.15]
Further use of material from \cite{DS/FMU/IED/DTD013}.
Stopped using parser.
\item [Issue 1.16,1.17]
Changed as result of changes caused by IR0016.
\item [Issue 1.18]
Changes in reaction to issue 1.19 of \cite{DS/FMU/IED/DTD006}.
\item [Issue 1.19]
Fixed two minor mismatches.
\item [Issue 1.20]
Correcting what used to be 6038 tests.
\item [Issue 1.21]
Renamings of functions containing the name atom $simple$,
and renaming of $aconv$.
\item [Issue 1.22]
Added futher tests for error 6067. Made some duplicated test labels unique.
\item [Issue 1.23, 1.24]
Tidying up prior to desk check.
\item [Issue 1.25]
Corrected for fixity of $Div$ and $Mod$.
\item [Issue 1.26]
Added instructions for testing of hierarchy facilities.
\item [Issue 1.27]
Corrected test ``$icl'load\_hierarchy\ 6033$''.
\item [Issue 1.28]
Added $icl'plus\_conv$, removed $icl'div2\_conv$ and $icl'mod2\_conv$,
following change request CR007.

\item[Issue 1.29, \FormatDate{92/01/20} ] Updated to use new fonts.
\item [Issue 1.30]
Added new scope test.
\item [Issue 1.31 (8th April 1992)]
Changes required by CR0016.
\item [Issue 1.32 (13th April 1992)]
Changes due to CR0017.
\item [Issue 1.33 (21 April 1992)]
Reduce dependency upon the exact format of the pretty printer's outputs.
\item[Issue 1.34 (15 May 1992)] Use correct quotation symbols.
\item [Issue 1.35 (20th May 1992)]
Added $icl'get\_pervasive\_theory\_name$.
\item [Issue 1.36,1.37 (21st May 1992)]
Improved 6056.
\item [Issue 1.38 (14th July 1992)]
Collapsed error 6052 into 6051.
\item [Issue 1.39 (22nd February 1999)]
Update for SML97.
\item [Issue 1.40] Update for new INTEGER type.
\item[Issue 1.41]
Allowed for use of efficient dictionaries in THEORY type.
\item[Issue 1.42] Copyright and banner updates for open source release.
\end{description}
\subsection{Changes Forecast}
None.
\section{GENERAL}
\subsection{Scope}
This document contains the module testing of the the Abstract Data Type $THM$, required by Release 1 ICL HOL Product Requirement Specification \cite{DS/FMU/IED/DEF004}.
The design is in \cite{DS/FMU/IED/DTD006}
and it is
implemented in \cite{DS/FMU/IED/IMP006}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains the module testing of the material given a design in \cite{DS/FMU/IED/DTD006},
following the test policy given in that document and the general policy given in \cite{DS/FMU/IED/PLN008}.

\subsubsection{Dependencies}
This document is derived from the detailed design in \cite{DS/FMU/IED/DTD006},
and is further influenced by the implementation, in  \cite{DS/FMU/IED/IMP006}.
It does not depend on the ICL HOL parser, and only incidentally
on the pretty printer.
This is because these tools rely on the correct setting of
scopes by functions relying on those of this document.
\subsubsection{Deficiencies}
None known, except as detailed in section \ref{untested}.
\section{TEST CASES}
We test each function of the signature of \cite{DS/FMU/IED/DTD003},
both for correct function, and all error cases given messages
in the detailed design,
except for those exceptions noted in section \ref{untested}.
Due to the interdependencies of the functions tested the order of the tests is not the order of the detailed design
document.

The correct handling of the hierarchy material is primarily tested ``by hand'', rather than with the test harness, as described
in section \ref{hierarchy}.
\section{UTILITIES}
=SML
PPCompiler.print_depth 10;
=TEX
Initialise the test package:
=SML
use_file "dtd013.sml";
use_file "imp013.sml";
init_mt_results();
=TEX
We want to test in the context of empty theories,
and at least the icl'Kernel so:
=SML
open icl'Kernel;
icl'open_theory "min";
=TEX

Some functions to isolate this test material from the precise details
of the pretty printer's output.  These functions are used when testing
error conditions where the error message contains a formatted type or
term.  These routines might use the HOL pretty printer (via routines
$format_term1$ and $format_type1$ from $PrettyPrinter$) however they
might not be installed, the $sting\_of\_XXX$ functions defend us from this.

=SML
fun pr_term(tm:TERM) : string = (
	string_of_term tm
);

fun pr_type(ty:TYPE) : string = (
	string_of_type ty
);

fun pr_thm(th:THM) : string = (
	string_of_thm th
);
=TEX

=IGN
Or, we could use the printer formatting routines, in which case:

The pretty printer formatting routines return a list of strings
of up to some given line length.  Here we are dealing with short
printed texts that should fit onto one line, to encourage this we ask
for an excessively large line length.

..=SML
fun pr_term(tm:TERM) : string = (
	implode(PrettyPrinter.format_term1 true 10000 tm)
);

fun pr_type(ty:TYPE) : string = (
	implode(PrettyPrinter.format_type1 true 10000 ty)
);
=TEX

=SML
fun €theory_names› ((): unit) : string list = (
let	val hier = icl'get_hierarchy();
in
	map fst (hier drop 
		(fn (_,{status = status,...}) => status = TSDeleted))
end);

map (fn x => icl'delete_theory x 
	handle (Fail _) => ()) (theory_names());
map (fn x => icl'delete_theory x 
	handle (Fail _) => ()) (theory_names());
repeat icl'delete_extension;
=TEX
We provide a list of diagnostic printing functions. 
Those called $string\_of\_\ldots$ turn objects of various significant types ($THM$, etc)
into strings appropriate for our needs,
those called $print\_\ldots$ apply $diag\_string$ to the output
of the associated $string\_of\_\ldots$.

We also provide a pair of functions on $TERM$ that don't give the type information.
=SML
fun €string_of_seq› ((tml , tm): SEQ) : string = (
	format_list string_of_term tml ", " ^
	"Ù " ^ string_of_term tm
);
=TEX
The following functions, apart from displaying 
the contents of various Kernel objects, test, by side effect,
two kernel access functions: $icl'dest\_thm$ and $icl'get\_hierarchy$.
=SML
fun €string_of_thm1› (key:string) (them : THM) : string = (
let val {level=level,theory={name=iname,...},sequent=sequent} =
		icl'dest_thm them
	in
		"In theory "^ string_of_int iname ^ 
		", at level "^ string_of_int level ^ 
		", with key "^ key ^
		"\n" ^
		string_of_seq sequent
end);

fun €string_of_thy› ({name = iname,
		ty_env = ty_env,
		con_env = con_env,
		parents = parents,
		del_levels = del_levels,
		axiom_dict = axiom_dict,
		defn_dict = defn_dict,
		thm_dict = thm_dict,
		current_level = current_level,
		user_data = user_data} : THEORY) : string = (
	"Internal name " ^ string_of_int iname ^
	", Current Level " ^ string_of_int current_level^
	", Parents " ^ format_list string_of_int parents ", " ^
	"\n***Types***\n" ^
	implode (map (fn (nm,{arity=arity,level=level}) =>
		("     " ^ nm ^ 
		": arity="^string_of_int arity ^
		", level="^string_of_int level ^ "\n"))
		(oe_flatten ty_env) )^
	"***Constants***\n" ^
	implode (map (fn (nm,{ty=ty,level=level}) =>
		("     " ^ nm ^ 
		": ty="^string_of_type ty ^
		", level="^string_of_int level ^ "\n"))
		(oe_flatten con_env)) ^
	(format_list (Combinators.I)
	(["***Theorems***"] @
	(map (uncurry string_of_thm1) (oe_flatten thm_dict)) @
	["***Definitions***"] @
	(map (uncurry string_of_thm1) (oe_flatten defn_dict)) @
	["***Axioms***"] @
	(map (uncurry string_of_thm1) (oe_flatten axiom_dict))) "\n")
);

fun €string_of_ti› ({status : THEORY_STATUS,
	inscope : bool,
	contents : THEORY,
	children : int list,
	name : string}:THEORY_INFO) : string = (
	"Theory " ^ name ^ "\n" ^
	(if inscope then "In Scope, " else "Out of Scope, ") ^
	(case status of
	TSNormal => "Status: Normal, "
	| TSDeleted => "Status: Deleted, "
	| TSLocked => "Status: Locked, "
	| TSAncestor => "Status: Ancestor, ") ^
	"Children:" ^ (format_list string_of_int children ", ") ^ "\n" ^

	string_of_thy contents
);

fun €print_ti› (ti : THEORY_INFO) : unit = diag_line(string_of_ti ti);

fun €string_of_hierarchy› (():unit) : string = (
	implode(map (fn (p,q) => ("------ti key: "^p^"------\n" ^
		string_of_ti q ^ "\n"))
	(icl'get_hierarchy ())));

fun €print_hierarchy› (():unit) : unit = diag_line(string_of_hierarchy ());

=TEX
=SML
fun list_eq (eq:'a * 'a -> bool) ((a :: x), (b :: y)) : bool = (
	eq(a,b) andalso list_eq eq (x, y)
) | list_eq eq ([], []) = true
| list_eq _ _ = false;
=TEX
=SML
infix 3 =**$;
infix 3 =**:;
infix 3 =*$;
infix 3 =*:;
=TEX
=SML
fun (a,b) =**$ (c,d) = (a =$ c) andalso (b =$ d);
fun  (a,b) =**: (c,d) = (a =: c) andalso (b =: d);
fun (a,b) =*$ (c,d) = (a = c) andalso (b =$ d);
fun (a,b) =*: (c,d) = (a = c) andalso (b =: d);
=TEX

\section{VALUE BINDINGS}
Such as can be given here:
=SML
val v1 = mk_var("v1", BOOL);
val v2 = mk_var("v2", BOOL);
val tv1 = mk_vartype "'tv1";
val tva = mk_vartype "'a";
val tv'1 = mk_vartype "'1";
val tv'2 = mk_vartype "'2";
val vtv1 = mk_var("vtv1",tv1);
val v1 = mk_var("v1", BOOL);
val v2 = mk_var("v2", BOOL);
val N0 = (mk_Ó o integer_of_int) 0;
val N1 = (mk_Ó o integer_of_int) 1;
val N2 = (mk_Ó o integer_of_int) 2;
val N3 = (mk_Ó o integer_of_int) 3;
val N7 = (mk_Ó o integer_of_int) 7;
val N9 = (mk_Ó o integer_of_int) 9;
val pB = mk_var("p",BOOL);
val qB = mk_var("q",BOOL);
val xB = mk_var("x",BOOL);
val p1 = mk_var("p",tv'1);
val q1 = mk_var("q",tv'1);
val pa = mk_var("p",tva);
val qa = mk_var("q",tva);
val qa' = mk_var("q'",tva);
val p11 = mk_var("p1",tv'1);
val q1B = mk_var("q1",BOOL);
val pa = mk_var("p",tva);
val exists_p_q = mk_∂(p1, qB);
val exists_pB_q = mk_∂(pB, qB);
val exists_pa_q = mk_∂(pa, qB);
val exists_p_q1 = mk_∂(p1,q1B);
val exists_p1_q = mk_∂(p11, qB);
val So = mk_const("So",BOOL);
val IsSo = mk_const("IsSo",BOOL);
val vSo = mk_var("So",BOOL);
val vIsSo = mk_var("IsSo",BOOL);
=TEX

\section{THE TESTS}
Our initial hierarchy of (empty) theories.
All theories bar ``min'' should have status $Deleted$, and ``min'' should be
 empty.
=SML
print_hierarchy ();
=TEX
\subsection{Basic Theory Handling}
=SML
val next_index = icl'new_theory "next";
store_mt_results mt_run [("icl'new_theory 1",
	icl'new_theory,
	"another",
	next_index+1)];
store_mt_results mt_run [("icl'open_theory 1 a",
	icl'open_theory,
	"next",
	([next_index],[]))];
store_mt_results mt_run [("icl'get_current_theory_name",
	icl'get_current_theory_name,
	(),
	next_index)];
store_mt_results mt_run [("icl'new_theory a",
	icl'new_theory,
	"yet_again",
	next_index+2)];
store_mt_results mt_run_fail [("icl'new_theory 6040",
	icl'new_theory,
	"yet_again",
	gen_fail_msg "icl'new_theory" 6040 ["yet_again"])];
store_mt_results mt_run_fail [("icl'open_theory 6035 a",
	icl'open_theory,
	"rubbish",
	gen_fail_msg "icl'open_theory" 6035 ["rubbish"])];

print_hierarchy ();
=TEX
\subsection{Changing Scopes}
While we build up our basic test theories we also give a test of scopes: an older version of imp006 would give a failure, if the following executes at all the bug has gone.
The failure was to do with scopes not being completely cleared of that what was going out of scope before new material was added.
=SML
icl'open_theory "next";
icl'new_type("ScopeTest",1);
icl'open_theory "another";
icl'new_type("ScopeTest",2);
icl'open_theory "next";
icl'open_theory "another";
icl'open_theory "next";
=TEX
=SML
store_mt_results (mt_runf (op =:)) [("icl'new_type 1",
	icl'new_type,
	("BOOL",0),
	mk_ctype("BOOL",[]))];
=TEX
Another test, that earlier versions of the system would fail on (giving design errors) is:
=SML

icl'open_theory "min";
icl'new_theory "scopetest1";
icl'open_theory "scopetest1";
icl'new_theory "scopetest2";
icl'open_theory "scopetest1";
icl'new_theory "scopetest3";
icl'open_theory "scopetest3";
icl'new_theory "scopetest4";
icl'open_theory "scopetest4";
icl'new_const("scopetest4",tva);
icl'open_theory "scopetest2";
icl'new_theory "scopetest5";
icl'open_theory "scopetest5";
icl'new_parent "scopetest4";
icl'get_theory_info "scopetest2";
icl'get_theory_info "scopetest3";
icl'get_theory_info "scopetest4";
icl'get_theory_info "scopetest5";
icl'get_theory_info "scopetest1"; 

icl'open_theory "scopetest5";
icl'open_theory "min";
map icl'delete_theory ["scopetest5","scopetest4", "scopetest3",
	"scopetest2", "scopetest1"];
icl'open_theory "next";
=TEX
No failures = successful test.
\subsection{Theory Names}
=SML
store_mt_results mt_run [("icl'get_theory_name 1",
	icl'get_theory_name,
	next_index,
	"next")];
store_mt_results mt_run_fail [("icl'get_theory_name 6043 a",
	icl'get_theory_name,
	100,
	gen_fail_msg "icl'get_theory_name" 6043 ["100"]),
	("icl'get_theory_name 6043 b",
	icl'get_theory_name,
	~1,
	gen_fail_msg "icl'get_theory_name" 6043 ["-1"])];
=TEX
\subsection{Theory Information}
=SML
print_ti(icl'get_theory_info "next");
store_mt_results mt_run_fail [("icl'get_theory_info 6035 a",
	icl'get_theory_info,
	"rubbish",
	gen_fail_msg "icl'get_theory_info" 6035 ["rubbish"])];
=TEX
\subsection{Introducing Types}
=SML
store_mt_results (mt_runf (op =:)) [("icl'new_type 2",
	icl'new_type,
	("Ó",0),
	mk_ctype("Ó",[])),
	("icl'new_type 4",
	icl'new_type,
	("≠",2),
	mk_ctype("≠",[tv'1,tv'2]))];
store_mt_results mt_run_fail [("icl'new_type 6045",
	icl'new_type,
	("Ó",0),
	gen_fail_msg "icl'new_type" 6045 ["Ó"])];

print_ti(icl'get_theory_info "next");
=TEX
The following ensures that we cannot have a negative arity:
=SML
store_mt_results mt_run_fail [("icl'new_type 6088",
	icl'new_type,
	("rubbish",~1),
	gen_fail_msg "icl'new_type" 6088 [])];
=TEX
\subsection{Introducing Constants}
We first test that ill-formed constants cannot be declared.
=SML
store_mt_results mt_run_fail [("icl'new_const 3002",
	icl'new_const,
	("=",BOOL),
	gen_fail_msg "icl'new_const" 3002 []),
	("icl'new_const 3003",
	icl'new_const,
	("¥",BOOL),
	gen_fail_msg "icl'new_const" 3003 []),
	("icl'new_const 3004",
	icl'new_const,
	("µ",BOOL),
	gen_fail_msg "icl'new_const" 3004 ["µ"])
	];
=TEX
Now a test to ensure that constants cannot be introduced
with unknown types.
=SML
store_mt_results mt_run_fail [("icl'new_const 6013",
	icl'new_const,
	("TypeWrong",mk_ctype("TYPEWRONG",[])),
	gen_fail_msg "icl'new_const" 6013 [pr_type(mk_ctype("TYPEWRONG",[])),"TYPEWRONG"])];
=TEX
Then a proper instance of one of these constants:
=SML
icl'new_const("=",mk_≠_type(tv1, mk_≠_type(tv1, BOOL)));
=TEX
\subsection{Failures When Saving Theorems}
=SML
val n1 = icl'list_save_thm(["n1"], icl'asm_rule v1);
store_mt_results mt_run_fail [("icl'list_save_thm 6039",
	icl'list_save_thm,
	(["n1"], icl'asm_rule v1),
	gen_fail_msg "icl'list_save_thm" 6039 ["n1","next"]),
	("icl'list_save_thm 6031",
	icl'list_save_thm,
	([], icl'asm_rule v1),
	gen_fail_msg "icl'list_save_thm" 6031 []),
	("icl'list_save_thm 6013",
	icl'list_save_thm,
	(["n2"], icl'refl_conv (mk_var("rv",mk_ctype("rubbish",[])))),
	gen_fail_msg "icl'list_save_thm" 6013 ["Ù rv = rv","rubbish"])
	];
let val irc = icl'Kernel.icl'refl_conv (mk_var("rv",mk_ctype("BOOL",[BOOL])));
in
store_mt_results mt_run_fail [
	("icl'list_save_thm 6014",
	icl'list_save_thm,
	(["n2"], irc),
	gen_fail_msg "icl'list_save_thm" 6014 [pr_thm irc,"BOOL"])
	]
end;
let val irc = icl'refl_conv (mk_const("rv",BOOL));
in
store_mt_results mt_run_fail [
	("icl'list_save_thm 6015",
	icl'list_save_thm,
	(["n2"], irc),
	gen_fail_msg "icl'list_save_thm" 6015 [pr_thm irc,"rv"])
	]
end;
let val irc = icl'refl_conv (mk_const("1",BOOL));
in
store_mt_results mt_run_fail [
	("icl'list_save_thm 6038",
	icl'list_save_thm,
	(["n2"], irc),
	gen_fail_msg "icl'list_save_thm" 6038 [pr_thm irc,"1"])
	]
end;
store_mt_results mt_run [("icl'open_theory 2 a",
	icl'open_theory,
	"another",
	([next_index+1],[next_index])),
	("icl'open_theory 2 b",
	icl'open_theory,
	"another",
	([],[]))];
store_mt_results mt_run_fail [("icl'list_save_thm 6013 b",
	icl'list_save_thm,
	(["n2"], icl'asm_rule v1),
	gen_fail_msg "icl'list_save_thm" 6013 ["v1 Ù v1","BOOL"])
	];
=TEX
\subsection{Introducing Types and Constants 2}
=SML
store_mt_results mt_run [("icl'open_theory 1 b",
	icl'open_theory,
	"next",
	([next_index],[next_index+1]))];
store_mt_results (mt_runf (op =$)) [ 
	("icl'new_const 3",
	icl'new_const,
	("T",BOOL),
	mk_t),
	("icl'new_const 4",
	icl'new_const,
	("F",BOOL),
	mk_f)
	];
store_mt_results (mt_runf (op =$)) [("icl'new_const 7",
	icl'new_const,
	("Test",BOOL),
	mk_const("Test",BOOL))];
=TEX
We can now see whether types can be introduced that are
already in the descendants:
=SML
store_mt_results (mt_runf (op =:)) [("icl'new_type 3",
	icl'new_type,
	("∏",2),
	mk_ctype("∏",[tv'1,tv'2]))];

print_ti(icl'get_theory_info "next");
store_mt_results mt_run [("icl'open_theory 3 a",
	icl'open_theory,
	"min",
	([],[next_index]))];

store_mt_results mt_run_fail [("icl'new_type 6034",
	icl'new_type,
	("∏",2),
	gen_fail_msg "icl'new_type" 6034 ["∏"])];
=TEX
Then the same for constants:
=SML
val UNIT = icl'new_type ("UNIT",0);
val Unit = icl'new_const("Unit",UNIT);
print_ti(icl'get_theory_info "min");
store_mt_results mt_run [("icl'open_theory 1 c",
	icl'open_theory,
	"next",
	([next_index],[]))];
val AlsoUnit = icl'new_const("AlsoUnit",UNIT);
store_mt_results mt_run [("icl'open_theory 3 b",
	icl'open_theory,
	"min",
	([],[next_index]))];
store_mt_results mt_run_fail [("icl'new_const 6063",
	icl'new_const,
	("AlsoUnit",UNIT),
	gen_fail_msg "icl'new_const" 6063 ["AlsoUnit"])];
store_mt_results mt_run_fail [("icl'new_defn 6063",
	icl'new_defn,
	(["AlsoUnit"],"AlsoUnit", Unit),
	gen_fail_msg "icl'new_defn" 6063 ["AlsoUnit"])];
store_mt_results mt_run [("icl'open_theory 4 a",
	icl'open_theory,
	"yet_again",
	([next_index,next_index+2],[]))];
=TEX
\subsection{Deleting Extensions and Theorems}
=SML
store_mt_results mt_run [("icl'open_theory 2 c",
	icl'open_theory,
	"another",
	([next_index+1],[next_index,next_index+2]))];
store_mt_results (mt_runf (op =:)) [("icl'new_type 5",
	icl'new_type,
	("BOOL",0),
	mk_ctype("BOOL",[]))];
store_mt_results (mt_runf (op =$)) [ 
	("icl'new_const 1",
	icl'new_const,
	("T",BOOL),
	mk_t),
	("icl'new_const 2",
	icl'new_const,
	("F",BOOL),
	mk_f)
	];

print_ti(icl'get_theory_info "another");
store_mt_results mt_run [("icl'delete_extension 1",
	icl'delete_extension,
	(),
	4)];
print_ti(icl'get_theory_info "-");
val s1 = icl'list_save_thm(["s1"], icl'asm_rule v1);
store_mt_results mt_run_fail [("icl'delete_extension 6077",
	icl'delete_extension,
	(),
	gen_fail_msg "icl'delete_extension" 6077 ["another","s1"])];
store_mt_results (mt_runf (op =|-)) [("icl'delete_thm 1",
	icl'delete_thm,
	"s1",
	s1)];
store_mt_results mt_run [("icl'delete_extension 2",
	icl'delete_extension,
	(),
	3)];
val TorF = icl'new_const("TorF",BOOL);
print_ti(icl'get_theory_info "-");
fun icl'delete_extension (u:unit): int = (
let val n = icl'Kernel.icl'delete_extension u
in
	(diag_line("icl'delete_extension @ "^string_of_int n);
	n)
end);
store_mt_results mt_run [("icl'delete_extension 3",
	icl'delete_extension,
	(),
	7),
	("icl'delete_extension 4",
	icl'delete_extension,
	(),
	2),
	("icl'delete_extension 5",
	icl'delete_extension,
	(),
	1)];
store_mt_results mt_run_fail [("icl'delete_extension 6050",
	icl'delete_extension,
	(),
	gen_fail_msg "icl'delete_extension" 6050 ["another"])];
store_mt_results mt_run [("icl'open_theory 4 b",
	icl'open_theory,
	"yet_again",
	([next_index,next_index+2],[next_index+1]))];
=TEX
\subsection{New Axioms}
=SML
store_mt_results (mt_runf (op =#)) [("icl'new_axiom 1",
	dest_thm o icl'new_axiom,
	(["truth_axiom"],mk_t),
	([],mk_t)),
	("icl'new_axiom 2",
	dest_thm o icl'new_axiom,
	(["not so", "No way!"], mk_f),
	([], mk_f)),
	("icl'new_axiom 3",
	dest_thm o icl'new_axiom,
	(["testing"],mk_app(mk_var("f",mk_≠_type(BOOL,BOOL)), mk_t)),
	([],mk_app(mk_var("f",mk_≠_type(BOOL,BOOL)), mk_t)))
	];

let
	val twa_mk_eq = mk_eq(mk_var("v",mk_ctype("BOOL",[BOOL])), 
		mk_var("v",mk_ctype("BOOL",[BOOL])));
in
store_mt_results mt_run_fail [("icl'new_axiom 6047",
	icl'new_axiom,
	(["truth_axiom"],mk_t),
	gen_fail_msg "icl'new_axiom" 6047 ["truth_axiom","yet_again"]),
	("icl'new_axiom 6014 a",
	icl'new_axiom,
	(["type_wrong_axiom"],twa_mk_eq),
	gen_fail_msg "icl'new_axiom" 6014 [pr_term twa_mk_eq,"BOOL"]),
	("icl'new_axiom 6031",
	icl'new_axiom,
	([],mk_t),
	gen_fail_msg "icl'new_axiom" 6031 []),
	("icl'new_axiom 3031",
	icl'new_axiom,
	(["Not Bool"],N0),
	gen_fail_msg "icl'new_axiom" 3031 [pr_term N0])]
end;

store_mt_results mt_run [("icl'open_theory 2 d",
	icl'open_theory,
	"another",
	([next_index+1],[next_index, next_index+2]))];
store_mt_results mt_run_fail [("icl'new_axiom 6013",
	icl'new_axiom,
	(["truth_axiom1"],mk_t),
	gen_fail_msg "icl'new_axiom" 6013 [pr_term mk_t,"BOOL"])];
store_mt_results mt_run [("icl'open_theory 4 c",
	icl'open_theory,
	"yet_again",
	([next_index,next_index+2],[next_index+1]))];
store_mt_results (mt_runf (op =#)) [("icl'list_save_thm 1",
	dest_thm o icl'list_save_thm,
	(["tbd"],icl'asm_rule mk_t),
	([mk_t],mk_t))];
=TEX
\subsection{Locking Theories}
We first lock a theory, check that nothing can change it,
and then unlock it.
=SML
icl'lock_theory "yet_again";
print_ti(icl'get_theory_info "yet_again");
store_mt_results mt_run_fail [("icl'lock_theory 1",
	icl'new_axiom,
	(["Truth_axiom"],mk_t),
	gen_fail_msg "icl'new_axiom" 6037 ["yet_again"])];
store_mt_results mt_run_fail [("icl'lock_theory 2",
	icl'list_save_thm,
	(["Example"],icl'asm_rule v1),
	gen_fail_msg "icl'list_save_thm" 6037 ["yet_again"])];
store_mt_results mt_run_fail [("icl'lock_theory 3",
	icl'new_const,
	("ForT",BOOL),
	gen_fail_msg "icl'new_const" 6037 ["yet_again"])];
store_mt_results mt_run_fail [("icl'lock_theory 4",
	icl'new_type,
	("SOMETHING",3),
	gen_fail_msg "icl'new_type" 6037 ["yet_again"])];
store_mt_results mt_run_fail [("icl'lock_theory 5",
	icl'delete_extension,
	(),
	gen_fail_msg "icl'delete_extension" 6037 ["yet_again"])];
store_mt_results mt_run_fail [("icl'lock_theory 6",
	icl'delete_thm,
	"tba",
	gen_fail_msg "icl'delete_thm" 6037 ["yet_again"])];
store_mt_results mt_run_fail [("icl'lock_theory 7",
	icl'new_defn,
	(["SomeWhere"],"SomeWhere", mk_f),
	gen_fail_msg "icl'new_defn" 6037 ["yet_again"])];
store_mt_results mt_run_fail [("icl'lock_theory 8",
	icl'new_type_defn,
	( [ "TestType"], "TestType", ["'2"], icl'asm_rule mk_t),
	gen_fail_msg "icl'new_type_defn" 6037 ["yet_again"])];
store_mt_results mt_run_fail [("icl'lock_theory 9",
	icl'new_spec,
	( [ "TestSpec"], 1, icl'asm_rule mk_t),
	gen_fail_msg "icl'new_spec" 6037 ["yet_again"])];
store_mt_results mt_run_fail [("icl'lock_theory 10",
	icl'new_parent,
	"another",
	gen_fail_msg "icl'new_parent" 6037 ["yet_again"])];
store_mt_results mt_run [("icl'lock_theory 11",
	get_current_theory_status,
	(),
	TSLocked)];

icl'unlock_theory "yet_again";
=TEX
=SML
store_mt_results mt_run [("icl'unlock_theory 11",
	get_current_theory_status,
	(),
	TSNormal)];
=TEX
\subsection{Scope and Deletions}
We test various aspects of deletion: where we can do it,
what effect deletion has, etc.
=SML
store_mt_results mt_run [("icl'open_theory 3 c",
	icl'open_theory,
	"min",
	([],[next_index, next_index+2]))];
store_mt_results mt_run_fail [("icl'delete_extension 6076",
	icl'delete_extension,
	(),
	gen_fail_msg "icl'delete_extension" 6076 ["min"])];
store_mt_results mt_run [("icl'open_theory 1 d",
	icl'open_theory,
	"next",
	([next_index],[]))];
val tdb_index = icl'new_theory "to_be_deleted";
store_mt_results mt_run [("icl'open_theory 5",
	icl'open_theory,
	"to_be_deleted",
	([tdb_index],[]))];
val thy_deleted_thm = icl'list_save_thm(["thy_deleted_thm"],
	icl'asm_rule v1);
store_mt_results mt_run [("icl'open_theory 1 e",
	icl'open_theory,
	"next",
	([],[tdb_index]))];
icl'delete_theory "to_be_deleted";
print_hierarchy();
store_mt_results mt_run_fail [("icl'get_theory_info 6035 b",
	icl'get_theory_info,
	"to_be_deleted",
	gen_fail_msg "icl'get_theory_info" 6035 ["to_be_deleted"])];
store_mt_results mt_run_fail [("icl'get_theory_name 6089",
	icl'get_theory_name,
	tdb_index,
	gen_fail_msg "icl'get_theory_name" 6089 [string_of_int tdb_index])];

store_mt_results mt_run_fail [("icl'open_theory 6035 b",
	icl'open_theory,
	"to_be_deleted",
	gen_fail_msg "icl'open_theory" 6035 ["to_be_deleted"])];
store_mt_results mt_run_fail [("icl'delete_theory 6035 b",
	icl'delete_theory,
	"to_be_deleted",
	gen_fail_msg "icl'delete_theory" 6035 ["to_be_deleted"])];
store_mt_results mt_run_fail [("icl'lock_theory 6035 a",
	icl'lock_theory,
	"to_be_deleted",
	gen_fail_msg "icl'lock_theory" 6035 ["to_be_deleted"]),
	("icl'lock_theory 6035 b",
	icl'lock_theory,
	"rubbish",
	gen_fail_msg "icl'lock_theory" 6035 ["rubbish"])];
store_mt_results mt_run [("icl'new_theory 3",
	icl'new_theory,
	"to_be_deleted",
	tdb_index+1)];
icl'delete_theory "to_be_deleted"; 
store_mt_results mt_run_fail [("icl'delete_theory 6076",
	icl'delete_theory,
	"min",
	gen_fail_msg "icl'delete_theory" 6076 ["min"])];

icl'lock_theory "yet_again";
store_mt_results mt_run_fail [("icl'lock_theory 12",
	icl'delete_theory,
	"yet_again",
	gen_fail_msg "icl'delete_theory" 6037 ["yet_again"])];
icl'unlock_theory "yet_again";
store_mt_results mt_run [("icl'open_theory 4 d",
	icl'open_theory,
	"yet_again",
	([next_index+2],[]))];
store_mt_results mt_run_fail [("icl'delete_theory 6069",
	icl'delete_theory,
	"yet_again",
	gen_fail_msg "icl'delete_theory" 6069 ["yet_again"])];
store_mt_results mt_run_fail [("icl'unlock_theory 6035 a",
	icl'unlock_theory,
	"to_be_deleted",
	gen_fail_msg "icl'unlock_theory" 6035 ["to_be_deleted"]),
	("icl'lock_theory 6035 c",
	icl'unlock_theory,
	"rubbish",
	gen_fail_msg "icl'unlock_theory" 6035 ["rubbish"]),
	("icl'lock_theory 6068",
	icl'unlock_theory,
	"yet_again",
	gen_fail_msg "icl'unlock_theory" 6068 ["yet_again"])];
=TEX
=SML
store_mt_results mt_run_fail [("icl'delete_thm 6046",
	icl'delete_thm,
	"rubbish",
	gen_fail_msg "icl'delete_thm" 6046 ["rubbish","yet_again"])];
store_mt_results mt_run_error [("icl'list_save_thm 6036",
	icl'list_save_thm,
	(["s2"], thy_deleted_thm),
	gen_fail_msg "icl'list_save_thm" 6036 
	["v1 Ù v1","to_be_deleted",string_of_int tdb_index])];
=TEX
\subsection{Duplicating Theories}
$icl'duplicate\_theory$ is tested by visual checking
of the display of the resulting duplicate theory.
=SML
print_ti(icl'get_theory_info "next");
icl'duplicate_theory "next" "copy_of_next";
print_ti(icl'get_theory_info "copy_of_next");

store_mt_results mt_run_fail [("icl'duplicate_theory 6040",
	icl'duplicate_theory "rubbish",
	"copy_of_next",
	gen_fail_msg "icl'duplicate_theory" 6040 ["copy_of_next"]),
	("icl'duplicate_theory 6035 a",
	icl'duplicate_theory "rubbish",
	"copy_of_rubbish",
	gen_fail_msg "icl'duplicate_theory" 6035 ["rubbish"]),
	("icl'duplicate_theory 6035 b",
	icl'duplicate_theory "to_be_deleted",
	"copy_of_rubbish",
	gen_fail_msg "icl'duplicate_theory" 6035 ["to_be_deleted"])
];
=TEX
\subsubsection{icl'new\_defn}
We first need a number of constants to allow theorems to
be saved with declared constants and types.
=SML
icl'open_theory "next";
icl'new_const("∂",mk_≠_type(mk_≠_type(tv1,BOOL),BOOL));
icl'new_const("µ",mk_≠_type(mk_≠_type(tv1,BOOL),BOOL));
icl'new_const("¥",mk_≠_type(BOOL,mk_≠_type(BOOL,BOOL)));
icl'new_const("±",mk_≠_type(BOOL,mk_≠_type(BOOL,BOOL)))
	handle _ => mk_t;
icl'new_const("≤",mk_≠_type(BOOL,mk_≠_type(BOOL,BOOL)))
	handle _ => mk_t;
icl'new_const("≥",mk_≠_type(BOOL,BOOL))
	handle _ => mk_t;
icl'open_theory "yet_again";
=TEX
Now the tests:
=SML
store_mt_results (mt_runf (op =#)) [ 
	("icl'new_defn 1",
	dest_thm o icl'new_defn,
	(["True"],"True",mk_t),
	([],mk_§(mk_const("True",BOOL),mk_t))),
	("icl'new_defn 2",
	dest_thm o icl'new_defn,
	(["False"],"False",mk_f),
	([],mk_§(mk_const("False",BOOL),mk_f)))
	];
print_ti(icl'get_theory_info "-");
store_mt_results mt_run_fail [
	("icl'new_defn 6031",
	icl'new_defn,
	([],"True1",mk_t),
	gen_fail_msg "icl'new_defn" 6031 []),
	("icl'new_defn 6013",
	icl'new_defn,
	(["x"],"Rubbish",mk_var("v",mk_ctype("RUBBISH",[]))),
	gen_fail_msg "icl'new_defn" 6013 [pr_term(mk_var("v",mk_ctype("RUBBISH",[]))),"RUBBISH"]),
	("icl'new_defn 6049 a",
	icl'new_defn,
	(["True"],"True",mk_t),
	gen_fail_msg "icl'new_defn" 6049 ["True"]),
	("icl'new_defn 6049 b",
	icl'new_defn,
	(["0"],"0",N0),
	gen_fail_msg "icl'new_defn" 6049 ["0"]),
	("icl'new_defn 6051",
	icl'new_defn,
	(["True"],"True1",mk_t),
	gen_fail_msg "icl'new_defn" 6051 ["True","yet_again"]),
	("icl'new_defn 6058",
	icl'new_defn,
	(["Maybe1"],"Maybe1",mk_µ(vtv1,mk_eq(vtv1,vtv1))),
	gen_fail_msg "icl'new_defn" 6058 [pr_term(mk_µ(vtv1,mk_eq(vtv1,vtv1))),"'tv1"]),
	("icl'new_defn 6059",
	icl'new_defn,
	(["Maybe"],"Maybe",v1),
	gen_fail_msg "icl'new_defn" 6059 [pr_term v1,"v1"])
	];

val zero_def = icl'new_defn (["ZeRo"],"ZeRo",N0);
val ZeRo = mk_const("ZeRo",Ó);
print_ti(icl'get_theory_info "-");
icl'delete_extension ();
print_ti(icl'get_theory_info "-");
=TEX
\subsection{Type Definitions}
Again, we need two new constants to make certain theorems valid:
=SML
icl'new_const("TypeDefn",mk_≠_type(mk_≠_type(tv1,BOOL),
	mk_≠_type(mk_≠_type(tv'2,tv1),BOOL)));
val Tv1Pred = icl'new_const("Tv1Pred",mk_≠_type(tv1,BOOL));
=TEX
The actual tests:
=SML
val etype_ax = icl'new_axiom(["etype_ax"],
	mk_simple_∂(vtv1,mk_app(Tv1Pred,vtv1)));

local val x= mk_var("x",tv'2)
in
val etype2_exax = icl'new_axiom(["etype2_exax"],
	mk_simple_∂(x,mk_app(inst [] [(tv'2,tv1)]Tv1Pred,x)))
end;
val etype_def = icl'new_type_defn(["ETYPE"], "ETYPE", 
	["'tv1"], etype_ax);
val etype2_def = icl'new_type_defn( [ "ETYPE2"], "ETYPE2", ["'2"], etype2_exax);
print_ti(icl'get_theory_info "-");
let
	fun f t1 t2 = mk_var("f",mk_≠_type(t1,t2));
in
store_mt_results (mt_runf (op =#)) [ 
	("icl'new_type_defn 1",
	dest_thm,
	etype_def,
	([], mk_∂(f (mk_ctype("ETYPE",[tv1])) tv1,
		list_mk_app(
		mk_const("TypeDefn",mk_≠_type(mk_≠_type(tv1,BOOL),
			mk_≠_type(mk_≠_type(mk_ctype("ETYPE",[tv1]),tv1),BOOL))),
		[inst [] [] Tv1Pred,f (mk_ctype("ETYPE",[tv1])) tv1])))),
	("icl'new_type_defn 2",
	dest_thm,
	etype2_def,
	([], mk_∂(f (mk_ctype("ETYPE2",[tv'2])) (tv'2),
		list_mk_app(
		mk_const("TypeDefn",mk_≠_type(mk_≠_type(tv'2,BOOL),
			mk_≠_type(mk_≠_type(mk_ctype("ETYPE2",[tv'2]),tv'2),BOOL))),
		[inst [] [(tv'2,tv1)] Tv1Pred,
		f (mk_ctype("ETYPE2",[tv'2])) (tv'2)]))))
	]
end;
val etype_ax_6054 = icl'new_axiom(["etype_ax_6054"], mk_t);
val etype_ax_6055 = icl'new_axiom(["etype_ax_6055"], 
	mk_∂(mk_var("x",tv1),mk_t));
val etype_ax_6056 = icl'new_axiom(["etype_ax_6056"], 
	mk_∂(mk_var("x",tv1),
		mk_app(mk_var("p",mk_≠_type(tv1,BOOL)), mk_var("x",tv1))));
val etype_ax_6062 = icl'new_axiom(["etype_ax_6062"], 
	mk_∂(mk_var("x",tv1),
		mk_app(mk_var("q",mk_≠_type(BOOL,BOOL)),
		mk_app(mk_var("p",mk_≠_type(tv1,BOOL)), mk_var("x",tv1)))));
val etype_ax_6080 = icl'new_axiom(["etype_ax_6080"], 
	mk_∂(mk_var("x",tv1),
		mk_app(mk_const("≥",mk_≠_type(BOOL,BOOL)), mk_t)));
store_mt_results mt_run_fail [
	("icl'new_type_defn 6031",
	icl'new_type_defn,
	([], "ETYPE1", ["'tv1"], etype_ax),
	gen_fail_msg "icl'new_type_defn" 6031 []),
	("icl'new_type_defn 6045",
	icl'new_type_defn,
	(["ETYPE1"], "ETYPE", ["'tv1"], etype_ax),
	gen_fail_msg "icl'new_type_defn" 6045 ["ETYPE"]),
	("icl'new_type_defn 6051",
	icl'new_type_defn,
	(["ETYPE"], "ETYPE1", ["'tv1"], etype_ax),
	gen_fail_msg "icl'new_type_defn" 6051 ["ETYPE","yet_again"]),
	("icl'new_type_defn 6053",
	icl'new_type_defn,
	(["ETYPE1"], "ETYPE1", ["'tv1"], icl'asm_rule mk_t),
	gen_fail_msg "icl'new_type_defn" 6053 ["T Ù T"]),
	("icl'new_type_defn 6054",
	icl'new_type_defn,
	(["ETYPE1"], "ETYPE1", ["'tv1"], etype_ax_6054),
	gen_fail_msg "icl'new_type_defn" 6054 ["Ù T"]),
	("icl'new_type_defn 6055",
	icl'new_type_defn,
	(["ETYPE1"], "ETYPE1", ["'tv1"], etype_ax_6055),
	gen_fail_msg "icl'new_type_defn" 6055 ["Ù ∂ x∑ T"]),
	("icl'new_type_defn 6056",
	icl'new_type_defn,
	(["ETYPE1"], "ETYPE1", ["'tv1"], etype_ax_6056),
	gen_fail_msg "icl'new_type_defn" 6056 ["p","Ù ∂ x∑ p x"]),
	("icl'new_type_defn 6062",
	icl'new_type_defn,
	(["ETYPE1"], "ETYPE1", ["'tv1"], etype_ax_6062),
	gen_fail_msg "icl'new_type_defn" 6062 ["p, q","Ù ∂ x∑ q (p x)"]),
	("icl'new_type_defn 6057",
	icl'new_type_defn,
	(["ETYPE1"], "ETYPE1", ["'not_there"], etype_ax),
	gen_fail_msg "icl'new_type_defn" 6057 ["Ù ∂ vtv1∑ Tv1Pred vtv1", "'tv1"]),
	("icl'new_type_defn 6079",
	icl'new_type_defn,
	(["ETYPE1"], "ETYPE1", ["'tv1","'tv1"], etype_ax),
	gen_fail_msg "icl'new_type_defn" 6079 ["'tv1"]),	("icl'new_type_defn 6080",
	icl'new_type_defn,
	(["ETYPE1"], "ETYPE1", ["'tv1"], etype_ax_6080),
	gen_fail_msg "icl'new_type_defn" 6080 ["Ù ∂ x∑ ≥ T"])
	];
store_mt_results mt_run_error [
	("icl'new_type_defn 6036",
	icl'new_type_defn,
	( ["rubbish"], "rubbish", [], thy_deleted_thm),
	gen_fail_msg "icl'new_type_defn" 6036 ["v1 Ù v1",
		"to_be_deleted",string_of_int tdb_index])
	];

store_mt_results mt_run [("icl'open_theory 3 e",
	icl'open_theory,
	"min",
	([],[next_index, next_index+2]))];
store_mt_results mt_run_fail [
	("icl'new_type_defn 6034",
	icl'new_type_defn,
	( [ "rubbish"], "BOOL", [], etype2_exax),
	gen_fail_msg "icl'new_type_defn" 6034 ["BOOL"])
	];

store_mt_results mt_run [("icl'open_theory 4 f",
	icl'open_theory,
	"yet_again",
	([next_index,next_index+2],[]))];
=TEX
\subsection{icl'new\_spec}
=SML
val so_isso_axiom = icl'new_axiom(["so_isso_axiom"],
	list_mk_simple_∂([vSo,vIsSo],mk_¥(vSo,vIsSo)));
val so_isso_def = icl'new_spec (["So","IsSo"],2,so_isso_axiom);
store_mt_results (mt_runf (op =#)) [ 
	("icl'new_spec",
	dest_thm,
	so_isso_def,
	([],mk_¥(So,IsSo)))
	];
val spec_ax_6016 = icl'new_axiom(["spec_ax_6016"],
	list_mk_∂([mk_var("x",BOOL),mk_var("x",BOOL)],
		mk_±(mk_var("x",BOOL),mk_var("x",BOOL))));
val spec_ax_6051 = icl'new_axiom(["spec_ax_6051"],
	mk_∂(mk_var("x",BOOL),mk_var("x",BOOL)));
val spec_ax_6056 = icl'new_axiom(["spec_ax_6056"],
	mk_∂(mk_var("x",BOOL),mk_eq(mk_var("x",BOOL),v1)));
val spec_ax_6062 = icl'new_axiom(["spec_ax_6062"],
	mk_∂(mk_var("x",BOOL),
		mk_eq(mk_var("y",BOOL),
		mk_eq(mk_var("x",BOOL),v1))));
val spec_ax_6061 = icl'new_axiom(["spec_ax_6061"],
	mk_∂(mk_var("x",BOOL),mk_eq(mk_var("x",BOOL),
		mk_µ(mk_var("y",tv1), mk_t))));
val spec_ax_6081 = icl'new_axiom(["spec_ax_6081"],
	list_mk_∂([mk_var("y",tv'2),mk_var("x",BOOL)],
		mk_±(mk_var("x",BOOL),mk_var("x",BOOL))));
store_mt_results mt_run_fail [
	("icl'new_spec 6016",
	icl'new_spec,
	(["x1","x2"],2,spec_ax_6016),
	gen_fail_msg "icl'new_spec" 6016 ["x","Ù ∂ x x∑ x ± x"]),
	("icl'new_spec 6031",
	icl'new_spec,
	([],2,so_isso_axiom),
	gen_fail_msg "icl'new_spec" 6031 []),
	("icl'new_spec 6044",
	icl'new_spec,
	(["nowhere"],0,so_isso_axiom),
	gen_fail_msg "icl'new_spec" 6044 []),
	("icl'new_spec 6049",
	icl'new_spec,
	(["Soa","IsSoa"],2,so_isso_axiom),
	gen_fail_msg "icl'new_spec" 6049 ["So"]),
	("icl'new_spec 6051",
	icl'new_spec,
	(["So","IsSo"],1,spec_ax_6051),
	gen_fail_msg "icl'new_spec" 6051 ["IsSo","yet_again"]),
	("icl'new_spec 6053",
	icl'new_spec,
	(["So","IsSo"],2,icl'asm_rule mk_t),
	gen_fail_msg "icl'new_spec" 6053 ["T Ù T"]),
	("icl'new_spec 6056",
	icl'new_spec,
	(["x"],1,spec_ax_6056),
	gen_fail_msg "icl'new_spec" 6056 ["v1","Ù ∂ x∑ x § v1"]),
	("icl'new_spec 6062",
	icl'new_spec,
	(["x"],1,spec_ax_6062),
	gen_fail_msg "icl'new_spec" 6062 ["v1, y", "Ù ∂ x∑ y § x § v1"]),
	("icl'new_spec 6060",
	icl'new_spec,
	(["Some"],3,so_isso_axiom),
	gen_fail_msg "icl'new_spec" 6060 [pr_thm so_isso_axiom, "3"]),
	("icl'new_spec 6061",
	icl'new_spec,
	(["x"],1,spec_ax_6061),
	gen_fail_msg "icl'new_spec" 6061 [pr_thm spec_ax_6061, "'tv1"]),
	("icl'new_spec 6081",
	icl'new_spec,
	(["x"],2,spec_ax_6081),
	gen_fail_msg "icl'new_spec" 6081 [pr_term(mk_var("y",tv'2)),pr_term(mk_var("x",BOOL))])
	];
store_mt_results mt_run_error [
	("icl'new_spec 6036",
	icl'new_spec,
	([],2,thy_deleted_thm),
	gen_fail_msg "icl'new_spec" 6036 [pr_thm thy_deleted_thm,
		"to_be_deleted",string_of_int tdb_index])
	];
store_mt_results mt_run [("icl'open_theory 1 h",
	icl'open_theory,
	"next",
	([],[next_index+2]))];
local
	val So = mk_var("So",BOOL);
	val IsSo = mk_var("IsSo",BOOL)
in
	val so_isso_axiom1 = icl'new_axiom(["so_isso_axiom"],
		list_mk_simple_∂([So,IsSo],mk_¥(So,IsSo)));
end;
store_mt_results mt_run_fail [
	("icl'new_spec 6063",
	icl'new_spec,
	(["Soa","IsSoa"],2,so_isso_axiom1),
	gen_fail_msg "icl'new_spec" 6063 ["So"])
	];
=TEX
\subsection{icl'new\_parent}
We first set things up so that $icl'new\_parent$ should add
material into the scope:
=SML
store_mt_results mt_run [("icl'open_theory 4 h",
	icl'open_theory,
	"yet_again",
	([next_index+2],[]))];

store_mt_results mt_run [("icl'open_theory 2 e",
	icl'open_theory,
	"another",
	([next_index+1],[next_index,next_index+2]))];
val NEWTYPE = icl'new_type("NEWTYPE",1);
val NewThing = icl'new_const("NewThing",NEWTYPE);
store_mt_results mt_run [("icl'open_theory 4 i",
	icl'open_theory,
	"yet_again",
	([next_index,next_index+2],[next_index+1]))];
=TEX
We then show that the material is not immediately in scope:
=SML
let val iar = icl'asm_rule(mk_eq(NewThing, NewThing));
in
store_mt_results mt_run_fail [
	("icl'list_save_thm 6013 c",
	icl'list_save_thm,
	(["new_parent_test"],iar),
	gen_fail_msg "icl'list_save_thm" 6013 
		[pr_thm iar,"NEWTYPE"])
	]
end;
store_mt_results mt_run [ 
	("icl'new_parent 1",
	icl'new_parent,
	"another",
	[next_index+1])
	];
store_mt_results mt_run_fail [
	("icl'new_parent 6035",
	icl'new_parent,
	"rubbish",
	gen_fail_msg "icl'new_parent" 6035 ["rubbish"])
	];
=TEX
And finally that the new material is now in scope:
=SML
store_mt_results (mt_runf (op =#)) [ 
	("icl'new_parent 2",
	dest_thm o icl'list_save_thm,
	(["new_parent_test"],icl'asm_rule(mk_eq(NewThing, NewThing))),
	([mk_eq(NewThing, NewThing)],mk_eq(NewThing, NewThing)))
	];

print_hierarchy();
=TEX
We now test whether clashes are detected by $icl'new\_parent$.
=SML
store_mt_results mt_run [("icl'open_theory 3 f",
	icl'open_theory,
	"min",
	([],[next_index,next_index+1, next_index+2]))];
val test_index = icl'new_theory "test";
store_mt_results mt_run [("icl'open_theory 5 a",
	icl'open_theory,
	"test",
	([test_index],[]))];
val F' = icl'new_const("F",UNIT);
store_mt_results mt_run [("icl'open_theory 4 j",
	icl'open_theory,
	"yet_again",
	([next_index,next_index+1,next_index+2],[test_index]))];
store_mt_results mt_run_fail [
	("icl'new_parent 6067 a",
	icl'new_parent,
	"test",
	gen_fail_msg "icl'new_parent" 6067 ["test"]),
	("icl'new_parent 6082",
	icl'new_parent,
	"next",
	gen_fail_msg "icl'new_parent" 6082 ["next"])
	];

store_mt_results mt_run [("icl'open_theory 3 g",
	icl'open_theory,
	"min",
	([],[next_index,next_index+1,next_index+2]))];
store_mt_results mt_run_fail [
	("icl'new_parent 6084",
	icl'new_parent,
	"yet_again",
	gen_fail_msg "icl'new_parent" 6084 ["yet_again"])
	];
=TEX
\subsection{icl'get\_theory et al}
The test of $icl'get\_theory$ requires checking the result by eye.
=SML
icl'get_theory "min";
store_mt_results mt_run_fail [
	("icl'get_theory 6035",
	icl'get_theory,
	"rubbish",
	gen_fail_msg "icl'get_theory" 6035 ["rubbish"])
	];
store_mt_results mt_run [ 
	("get_current_theory_status",
	get_current_theory_status,
	(),
	TSNormal)
	];
=TEX
\section{INFERENCE RULES}
Test scopes:
=SML
icl'open_theory "yet_again";
val Deleted = icl'new_const ("Deleted",BOOL);
val const_deleted_thm = icl'asm_rule (mk_eq(p1,q1));
val side_effect = icl'delete_extension();
val side_effect = icl'new_theory "out_of_scope_mdt006";
val side_effect = icl'open_theory "out_of_scope_mdt006";
val out_of_scope_thm = icl'asm_rule (mk_eq(p1,q1));
val side_effect = icl'open_theory "yet_again";
val del_theory_index = string_of_int(icl'new_theory "deleted_theory_mdt006");
val side_effect = icl'open_theory "deleted_theory_mdt006";
val deleted_thm = icl'asm_rule (mk_eq(p1,q1));
val side_effect = icl'open_theory "yet_again";
val side_effect = icl'delete_theory "deleted_theory_mdt006";

val p_eq_q_thm = icl'asm_rule (mk_eq(p1,q1));
val pq_thm = icl'asm_rule (exists_p_q);
val pq_ax = icl'new_axiom(["pq_ax"], exists_p_q);
val t_eq_f = icl'asm_rule (mk_eq(mk_t,mk_f));
val q_eq_F = icl'new_axiom(["q_eq_F"],(mk_eq(qB,mk_f)));
val so_axiom = icl'new_axiom(["so_axiom"],So);
val Ó = icl'new_type("Ó",0) handle _ => Ó;
val tplus = mk_const("+",mk_≠_type(Ó,mk_≠_type(Ó,Ó)));
val Suc = icl'new_const("Suc",mk_≠_type(Ó, Ó))
	handle _ => mk_const("Suc",mk_≠_type(Ó, Ó));
val strip_±_T_conv : CONV = ( fn (tm : TERM) =>
	if is_± tm
	then let val (p,q) = dest_± tm
		in
		if q =$ mk_t
		then icl'asm_rule(mk_eq (tm, p))
		else fail "strip_±_T_conv" 0 []
	end
	else fail "strip_±_T_conv" 0 []
);
val t_def = icl'new_axiom(["t_def"],
	mk_eq(mk_t,mk_eq(mk_simple_Ã(xB,xB),mk_simple_Ã(xB,xB))));
=TEX
\subsection{Valid Theorems}
=SML
store_mt_results mt_run [
	("valid_thm 1",
	valid_thm,
	pq_thm,
	true),
	("valid_thm 2",
	valid_thm,
	const_deleted_thm,
	false),
	("valid_thm 3",
	valid_thm,
	out_of_scope_thm,
	false),
	("valid_thm 4",
	valid_thm,
	deleted_thm,
	false)
	];
=TEX
\subsection{Outputing Theorems}
=SML
store_mt_results mt_run [
	("string_of_thm",
	string_of_thm,
	pq_thm,
	"∂ p∑ q Ù ∂ p∑ q")];
store_mt_results mt_run_fail [
	("thm_fail",
	thm_fail "test" 6053,
	[pq_thm],
	gen_fail_msg "test" 6053 ["∂ p∑ q Ù ∂ p∑ q"])];
store_mt_results (mt_runf (op =#)) [ 
	("dest_thm",
	dest_thm,
	pq_thm,
	([exists_p_q],exists_p_q))
	];
=TEX
\section{THE TESTS - PRIMITVES AND BUILT-IN}
The tests proper:
\subsection{icl'subst\_rule}
=SML
store_mt_results mt_run_fail[
	("icl'subst_rule 6001 1",
	icl'subst_rule [] (exists_p_q1),
	pq_thm,
	gen_fail_msg "icl'subst_rule" 6001 ["¨∂ p∑ q1Æ","¨∂ p∑ qÆ"]),
	("icl'subst_rule 6001 2",
	icl'subst_rule [(t_eq_f, qB)] (mk_eq(mk_t,qB)),
	t_eq_f,
	gen_fail_msg "icl'subst_rule" 6001 ["¨T § TÆ","¨T § FÆ"])
	];
store_mt_results mt_run_error [
	("icl'subst_rule 6036 1",
	icl'subst_rule [] exists_p_q,
	deleted_thm,
	gen_fail_msg "icl'subst_rule" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'subst_rule 6065 1",
	icl'subst_rule [] exists_p_q,
	const_deleted_thm,
	gen_fail_msg "icl'subst_rule" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'subst_rule 6066 1",
	icl'subst_rule [] exists_p_q,
	out_of_scope_thm,
	gen_fail_msg "icl'subst_rule" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"]),
	("icl'subst_rule 6036 2",
	icl'subst_rule [(deleted_thm, q1)] (mk_eq(mk_t,mk_f)),
	t_eq_f,
	gen_fail_msg "icl'subst_rule" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'subst_rule 6065 2",
	icl'subst_rule [(const_deleted_thm, q1)] (mk_eq(mk_t,mk_f)),
	t_eq_f,
	gen_fail_msg "icl'subst_rule" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'subst_rule 6066 2",
	icl'subst_rule [(out_of_scope_thm, q1)] (mk_eq(mk_t,mk_f)),
	t_eq_f,
	gen_fail_msg "icl'subst_rule" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"])
	];

store_mt_results mt_run_fail [
	("icl'subst_rule 6002",
	icl'subst_rule,
	[(icl'asm_rule mk_t, pB)],
	gen_fail_msg "icl'subst_rule" 6002 ["T Ù T"]),
	("icl'subst_rule 3007",
	icl'subst_rule,
	[(t_def, mk_t)],
	gen_fail_msg "icl'subst_rule" 3007 [pr_term mk_t]),
	("icl'subst_rule 6029",
	icl'subst_rule,
	[(t_def, (mk_var("q",Ó)))],
	gen_fail_msg "icl'subst_rule" 6029 ["Ù T § (Ã x∑ x) = (Ã x∑ x)","¨qÆ"])
	];

store_mt_results (mt_runf (op =#)) [("icl'subst_rule_1",
	dest_thm o icl'subst_rule [] exists_p_q,
	pq_thm,
	dest_thm pq_thm),
	("icl'subst_rule_2",
	dest_thm o icl'subst_rule [] exists_p1_q,
	pq_thm,
	([exists_p_q],exists_p1_q)),
	("icl'subst_rule_3",
	dest_thm o icl'subst_rule [(t_eq_f, qB)] (mk_eq(qB,mk_f)),
	t_eq_f,
	([(mk_eq(mk_t,mk_f))],mk_§(mk_f,mk_f))),
	("icl'subst_rule_4",
	dest_thm o icl'subst_rule [(t_def, qB)] (mk_eq(qB,mk_f)),
	t_eq_f,
	([(mk_eq(mk_t,mk_f))],
	mk_eq(mk_eq(mk_simple_Ã(xB,xB),mk_simple_Ã(xB,xB)),mk_f)))];

=TEX
\subsection{icl'simple\_Ã\_eq\_rule}
=SML
store_mt_results (mt_runf (op =#)) [("icl'simple_Ã_eq_rule",
	dest_thm o icl'simple_Ã_eq_rule qB,
	q_eq_F,
	([],mk_eq(mk_simple_Ã(qB,qB),mk_simple_Ã(qB,mk_f))))
	];

store_mt_results mt_run_fail[
	("icl'simple_Ã_eq_rule 3007",
	icl'simple_Ã_eq_rule mk_t,
	q_eq_F,
	gen_fail_msg "icl'simple_Ã_eq_rule" 3007 [pr_term mk_t]),
	("icl'simple_Ã_eq_rule 6005",
	icl'simple_Ã_eq_rule qB,
	icl'asm_rule (mk_eq(qB,mk_f)),
	gen_fail_msg "icl'simple_Ã_eq_rule" 6005 ["¨qÆ"]),
	("icl'simple_Ã_eq_rule 6020",
	icl'simple_Ã_eq_rule qB,
	pq_ax,
	gen_fail_msg "icl'simple_Ã_eq_rule" 6020 ["Ù ∂ p∑ q"])
	];
store_mt_results mt_run_error [
	("icl'simple_Ã_eq_rule 6036",
	icl'simple_Ã_eq_rule qB,
	deleted_thm,
	gen_fail_msg "icl'simple_Ã_eq_rule" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'simple_Ã_eq_rule 6065",
	icl'simple_Ã_eq_rule qB,
	const_deleted_thm,
	gen_fail_msg "icl'simple_Ã_eq_rule" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'simple_Ã_eq_rule 6066",
	icl'simple_Ã_eq_rule qB,
	out_of_scope_thm,
	gen_fail_msg "icl'simple_Ã_eq_rule" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"])
	];
=TEX
\subsection{icl'inst\_type\_rule}
=SML
store_mt_results (mt_runf (op =#)) [("icl'inst_type_rule_1",
	dest_thm o icl'inst_type_rule [(BOOL, tva)],
	pq_ax,
	([],exists_p_q)),
	("icl'inst_type_rule_2",
	dest_thm o icl'inst_type_rule [(BOOL, tv'1)],
	pq_ax,
	([],exists_pB_q))
	];

store_mt_results mt_run_fail [
	("icl'inst_type_rule 6006",
	icl'inst_type_rule [(BOOL, tva)],
	(icl'asm_rule (mk_eq(qa,qa))),
	gen_fail_msg "icl'inst_type_rule" 6006 ["'a"]),
	("icl'inst_type_rule 3019",
	icl'inst_type_rule [(BOOL, BOOL)],
	pq_ax,
	gen_fail_msg "icl'inst_type_rule" 3019 ["îBOOLÆ"])
	];
store_mt_results mt_run_error [
	("icl'inst_type_rule 6036",
	icl'inst_type_rule [(BOOL, tva)],
	deleted_thm,
	gen_fail_msg "icl'inst_type_rule" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'inst_type_rule 6065",
	icl'inst_type_rule [(BOOL, tva)],
	const_deleted_thm,
	gen_fail_msg "icl'inst_type_rule" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'inst_type_rule 6066",
	icl'inst_type_rule [(BOOL, tva)],
	out_of_scope_thm,
	gen_fail_msg "icl'inst_type_rule" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"])
	];
=TEX
\subsection{icl'¥\_intro}
=SML
store_mt_results (mt_runf (op =#)) [
	("icl'¥_intro 1",
	dest_thm o icl'¥_intro v1,
	pq_ax,
	([],mk_¥(v1,exists_p_q))),
	("icl'¥_intro 2",
	dest_thm o icl'¥_intro v1,
	icl'asm_rule v1,
	([],mk_¥(v1,v1)))
	];

store_mt_results mt_run_fail [
	("icl'¥_intro 3031",
	icl'¥_intro N1,
	pq_ax,
	gen_fail_msg "icl'¥_intro" 3031 ["¨1Æ"])
	];
store_mt_results mt_run_error [
	("icl'¥_intro 6036",
	icl'¥_intro v1,
	deleted_thm,
	gen_fail_msg "icl'¥_intro" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'¥_intro 6065",
	icl'¥_intro v1,
	const_deleted_thm,
	gen_fail_msg "icl'¥_intro" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'¥_intro 6066",
	icl'¥_intro v1,
	out_of_scope_thm,
	gen_fail_msg "icl'¥_intro" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"])
	];
=TEX
\subsection{icl'¥\_elim}
=SML
store_mt_results (mt_runf (op =#)) [("icl'¥_elim_1",
	dest_thm o icl'¥_elim  so_isso_def,
	so_axiom,
	([],IsSo))
	];

store_mt_results mt_run_fail [
	("icl'¥_elim 6010",
	icl'¥_elim so_isso_axiom,
	so_axiom,
	gen_fail_msg "icl'¥_elim" 6010 [pr_thm so_isso_axiom]),
	("icl'¥_elim 6011",
	icl'¥_elim so_isso_def,
	so_isso_def,
	gen_fail_msg "icl'¥_elim" 6011 [pr_thm so_isso_def, pr_thm so_isso_def ])
	];
store_mt_results mt_run_error [
	("icl'¥_elim 6036 1",
	icl'¥_elim so_isso_def,
	deleted_thm,
	gen_fail_msg "icl'¥_elim" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'¥_elim 6065 1",
	icl'¥_elim so_isso_def,
	const_deleted_thm,
	gen_fail_msg "icl'¥_elim" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'¥_elim 6066 1",
	icl'¥_elim so_isso_def,
	out_of_scope_thm,
	gen_fail_msg "icl'¥_elim" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"]),
	("icl'¥_elim 6036 2",
	icl'¥_elim deleted_thm,
	so_axiom,
	gen_fail_msg "icl'¥_elim" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'¥_elim 6065 2",
	icl'¥_elim const_deleted_thm,
	so_axiom,
	gen_fail_msg "icl'¥_elim" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'¥_elim 6066 2",
	icl'¥_elim out_of_scope_thm,
	so_axiom,
	gen_fail_msg "icl'¥_elim" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"])
	];
=TEX
\subsection{icl'asm\_rule}
=SML
store_mt_results (mt_runf (op =#)) [
	("icl'asm_rule 1",
	dest_thm o icl'asm_rule,
	mk_const("rubbish",BOOL),
	([mk_const("rubbish",BOOL)],mk_const("rubbish",BOOL)))
	];

store_mt_results mt_run_fail [
	("icl'asm_rule 3031",
	icl'asm_rule,
	N0,
	gen_fail_msg "icl'asm_rule" 3031 [pr_term N0])
	];
=TEX
\subsection{icl'refl\_conv}
=SML
store_mt_results (mt_runf (op =#)) [
	("icl'refl_conv 1",
	dest_thm o icl'refl_conv,
	mk_const("rubbish",BOOL),
	([],mk_eq(mk_const("rubbish",BOOL), mk_const("rubbish",BOOL)))),
	("icl'refl_conv 2",
	dest_thm o icl'refl_conv,
	mk_const("rubbish",Ó),
	([],mk_eq(mk_const("rubbish",Ó), mk_const("rubbish",Ó))))
	];
=TEX
\subsection{icl'simple\_$\beta$\_conv}
=SML
store_mt_results (mt_runf (op =#)) [
	("icl'simple_¬_conv 1",
	dest_thm o icl'simple_¬_conv,
	mk_app(mk_simple_Ã(pa,mk_app(mk_var("f",mk_≠_type(tva,tv1)),pa)),qa),
	([],mk_eq(mk_app(mk_simple_Ã(pa,mk_app(
		mk_var("f",mk_≠_type(tva,tv1)),pa)),
		qa),
		mk_app(mk_var("f",mk_≠_type(tva,tv1)), qa)))),
	("icl'simple_¬_conv 2",
	dest_thm o icl'simple_¬_conv,
	mk_app(mk_simple_Ã(pa,mk_simple_Ã(qa,mk_app(mk_app(mk_var("f",
		mk_≠_type(tva,mk_≠_type(tva,tv1))),
		pa),qa))),qa),
	([],mk_eq(mk_app(mk_simple_Ã(pa,mk_simple_Ã(qa,mk_app(mk_app(mk_var("f",
		mk_≠_type(tva,mk_≠_type(tva,tv1))),
		pa),qa))),qa),
	mk_simple_Ã(qa',mk_app(mk_app(mk_var("f",
		mk_≠_type(tva,mk_≠_type(tva,tv1))),
		qa),qa')))))
	];

store_mt_results mt_run_fail [
	("icl'simple_¬_conv 6012",
	icl'simple_¬_conv,
	mk_simple_Ã(pa,mk_simple_Ã(qa,mk_app(mk_app(mk_var("f",
		mk_≠_type(tva,mk_≠_type(tva,tv1))),
		pa),qa))),
	gen_fail_msg "icl'simple_¬_conv" 6012 ["¨Ã p q∑ f p qÆ"])
	];
=TEX
\subsection{icl'suc\_conv}
=SML
store_mt_results (mt_runf (op =#)) [
	("icl'suc_conv 1",
	dest_thm o icl'suc_conv,
	N3,
	([],mk_eq(N3,mk_app(Suc,N2)))),
	("icl'suc_conv 2",
	dest_thm o icl'suc_conv,
	N0,
	([],mk_eq(N0,mk_const("Zero",Ó))))
	];

store_mt_results mt_run_fail [
	("icl'suc_conv 3026",
	icl'suc_conv,
	mk_const("Number",Ó),
	gen_fail_msg "icl'suc_conv" 3026 [pr_term(mk_const("Number",Ó))])
	];
=TEX
\subsection{icl'string\_conv}
=SML
store_mt_results (mt_runf (op =#)) [
	("icl'string_conv_1",
	dest_thm o icl'string_conv,
	mk_string "abc",
	([],mk_eq(mk_string "abc",
		list_mk_app(mk_const("Cons",
			mk_≠_type(CHAR,mk_≠_type(STRING,STRING))),
		[mk_char "a", mk_string "bc"])))),
	("icl'string_conv_2",
	dest_thm o icl'string_conv,
	mk_string "",
	([],mk_eq(mk_string "",mk_const("Nil",STRING))))
	];

store_mt_results mt_run_fail [
	("icl'string_conv 3025",
	icl'string_conv,
	N0,
	gen_fail_msg "icl'string_conv" 3025 [pr_term N0])
	];
=TEX
\subsection{icl'char\_conv}
=SML
store_mt_results (mt_runf (op =#)) [
	("icl'char_conv_1",
	dest_thm o icl'char_conv,
	mk_char "a",
	([],mk_eq(mk_char "a",mk_app(mk_const("AbsChar",mk_≠_type(Ó,CHAR)),
		(mk_Ó o integer_of_int) (ord "a") )))),
	("icl'char_conv_2",
	dest_thm o icl'char_conv,
	mk_char "Ó",
	([],mk_eq(mk_char "Ó",
		mk_app(mk_const("AbsChar",mk_≠_type(Ó,CHAR)),
		(mk_Ó o integer_of_int) (ord "Ó") ))))
	];

store_mt_results mt_run_fail [
	("icl'char_conv 3024",
	icl'char_conv,
	mk_const("he",CHAR),
	gen_fail_msg "icl'char_conv" 3024 [pr_term(mk_const("he",CHAR))])
	];

=TEX
\subsection{icl'eq\_sym\_rule}
=SML
store_mt_results (mt_runf (op =#)) [
	("icl'eq_sym_rule_1",
	dest_thm o icl'eq_sym_rule,
	icl'asm_rule(mk_eq(N0,N1)),
	([(mk_eq(N0,N1))],mk_eq(N1,N0))),
	("icl'eq_sym_rule_2",
	dest_thm o icl'eq_sym_rule,
	icl'asm_rule(mk_eq(mk_t,mk_f)),
	([(mk_eq(mk_t,mk_f))],mk_eq(mk_f,mk_t)))
	];

store_mt_results mt_run_fail[
	("icl'eq_sym_rule 6020",
	icl'eq_sym_rule,
	pq_ax,
	gen_fail_msg "icl'eq_sym_rule" 6020 ["Ù ∂ p∑ q"])
	];
store_mt_results mt_run_error [
	("icl'eq_sym_rule 6036",
	icl'eq_sym_rule,
	deleted_thm,
	gen_fail_msg "icl'eq_sym_rule" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'eq_sym_rule 6065",
	icl'eq_sym_rule,
	const_deleted_thm,
	gen_fail_msg "icl'eq_sym_rule" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'eq_sym_rule 6066",
	icl'eq_sym_rule,
	out_of_scope_thm,
	gen_fail_msg "icl'eq_sym_rule" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"])
	];
=TEX
\subsection{icl'list\_simple\_µ\_elim}
=SML
store_mt_results (mt_runf (op =#)) [
	("icl'list_simple_µ_elim_1",
	dest_thm o icl'list_simple_µ_elim [mk_f],
	icl'asm_rule (mk_µ(v1,mk_¥(v1,mk_t))),
	([(mk_µ(v1,mk_¥(v1,mk_t)))],mk_¥(mk_f,mk_t))),
	("icl'list_simple_µ_elim_2",
	dest_thm o icl'list_simple_µ_elim [v2],
	icl'asm_rule(mk_µ(v1,mk_app(mk_simple_Ã(v2,v1),mk_t))),
	([mk_µ(v1,mk_app(mk_simple_Ã(v2,v1),mk_t))],
		mk_app(mk_simple_Ã(mk_var("v2'",BOOL),v2),mk_t))),
	("icl'list_simple_µ_elim_3",
	dest_thm o icl'list_simple_µ_elim [v2,v2],
	icl'asm_rule(list_mk_µ([v1,v2],mk_±(v1,v2))),
	([(list_mk_µ([v1,v2],mk_±(v1,v2)))],mk_±(v2,v2))),
	("icl'list_simple_µ_elim_4",
	dest_thm o icl'list_simple_µ_elim [v1,v1],
	icl'asm_rule(list_mk_µ([v1,v2],mk_±(v1,v2))),
	([list_mk_µ([v1,v2],mk_±(v1,v2))],mk_±(v1,v1))),
	("icl'list_simple_µ_elim_5",
	dest_thm o icl'list_simple_µ_elim [mk_t,mk_f],
	icl'asm_rule(list_mk_µ([v1,v1],v1)),
	([list_mk_µ([v1,v1],v1)],mk_f))
	];

store_mt_results mt_run_fail[
	("icl'list_simple_µ_elim 6018",
	icl'list_simple_µ_elim [mk_t],
	pq_ax,
	gen_fail_msg "icl'list_simple_µ_elim" 6018 ["Ù ∂ p∑ q", "1"]),
	("icl'list_simple_µ_elim 3012",
	icl'list_simple_µ_elim [N0],
	icl'asm_rule(mk_µ(v1,mk_¥(v1,mk_t))),
	gen_fail_msg "icl'list_simple_µ_elim" 3012 [pr_term N0, pr_term v1])
	];
store_mt_results mt_run_error [
	("icl'list_simple_µ_elim 6036",
	icl'list_simple_µ_elim [v1],
	deleted_thm,
	gen_fail_msg "icl'list_simple_µ_elim" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'list_simple_µ_elim 6065",
	icl'list_simple_µ_elim [v1],
	const_deleted_thm,
	gen_fail_msg "icl'list_simple_µ_elim" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'list_simple_µ_elim 6066",
	icl'list_simple_µ_elim [v1],
	out_of_scope_thm,
	gen_fail_msg "icl'list_simple_µ_elim" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"])
	];
=TEX
\subsection{icl'eq\_trans\_rule}
=SML
store_mt_results (mt_runf (op =#)) [
	("icl'eq_trans_rule_1",
	dest_thm o icl'eq_trans_rule (icl'asm_rule (mk_eq(N0,N1))),
	icl'asm_rule (mk_eq(N1,N2)),
	([(mk_eq(N0,N1)), (mk_eq(N1,N2))],(mk_eq(N0,N2))))
	];

store_mt_results mt_run_fail[
	("icl'eq_trans_rule 6020 a",
	icl'eq_trans_rule pq_ax,
	icl'asm_rule (mk_eq(N1,N2)),
	gen_fail_msg "icl'eq_trans_rule" 6020 ["Ù ∂ p∑ q"]),
	("icl'eq_trans_rule 6020 b",
	icl'eq_trans_rule (icl'asm_rule (mk_eq(N1,N2))),
	pq_ax,
	gen_fail_msg "icl'eq_trans_rule" 6020 ["Ù ∂ p∑ q"]),
	("icl'eq_trans_rule 6022 a",
	icl'eq_trans_rule (icl'asm_rule (mk_eq(N0,N1))),
	p_eq_q_thm,
	gen_fail_msg "icl'eq_trans_rule" 6022 ["0 = 1 Ù 0 = 1", "p = q Ù p = q"]),
	("icl'eq_trans_rule 6022 b",
	icl'eq_trans_rule (icl'asm_rule (mk_eq(N0,N1))),
	icl'asm_rule (mk_eq(N0,N2)),
	gen_fail_msg "icl'eq_trans_rule" 6022 ["0 = 1 Ù 0 = 1", "0 = 2 Ù 0 = 2"])
	];
store_mt_results mt_run_error [
	("icl'eq_trans_rule 6036 a",
	icl'eq_trans_rule so_isso_axiom,
	deleted_thm,
	gen_fail_msg "icl'eq_trans_rule" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'eq_trans_rule 6065 a",
	icl'eq_trans_rule so_isso_axiom,
	const_deleted_thm,
	gen_fail_msg "icl'eq_trans_rule" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'eq_trans_rule 6066 a",
	icl'eq_trans_rule so_isso_axiom,
	out_of_scope_thm,
	gen_fail_msg "icl'eq_trans_rule" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"]),
	("icl'eq_trans_rule 6036 b",
	icl'eq_trans_rule deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'eq_trans_rule" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'eq_trans_rule 6065 b",
	icl'eq_trans_rule const_deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'eq_trans_rule" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'eq_trans_rule 6066 b",
	icl'eq_trans_rule out_of_scope_thm,
	so_isso_axiom,
	gen_fail_msg "icl'eq_trans_rule" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"])
	];
=TEX
\subsection{icl'mk\_app\_rule}
=SML
store_mt_results (mt_runf (op =#)) [
	("icl'mk_app_rule_1",
	dest_thm o icl'mk_app_rule (icl'asm_rule
		(mk_eq(mk_var("f",mk_≠_type(Ó,Ó)),mk_var("g",mk_≠_type(Ó,Ó))))),
	icl'asm_rule (mk_eq(N1,N2)),
	([mk_eq(mk_var("f",mk_≠_type(Ó,Ó)),mk_var("g",mk_≠_type(Ó,Ó))),
		(mk_eq(N1,N2))],
		mk_eq(mk_app(mk_var("f",mk_≠_type(Ó,Ó)),N1),
		mk_app(mk_var("g",mk_≠_type(Ó,Ó)),N2))))
	];

store_mt_results mt_run_fail[
	("icl'mk_app_rule 6020 a",
	icl'mk_app_rule pq_ax,
	icl'asm_rule (mk_eq(N1,N2)),
	gen_fail_msg "icl'mk_app_rule" 6020 ["Ù ∂ p∑ q"]),
	("icl'mk_app_rule 6020 b",
	icl'mk_app_rule (icl'asm_rule  (mk_eq(N1,N2))),
	pq_ax,
	gen_fail_msg "icl'mk_app_rule" 6020 ["Ù ∂ p∑ q"]),
	("icl'mk_app_rule 6023",
	icl'mk_app_rule (icl'refl_conv mk_t ),
	(icl'asm_rule  (mk_eq(N1,N2))),
	gen_fail_msg "icl'mk_app_rule" 6023 ["Ù T § T","1 = 2 Ù 1 = 2"])
	];
store_mt_results mt_run_error [
	("icl'mk_app_rule 6036 a",
	icl'mk_app_rule so_isso_axiom,
	deleted_thm,
	gen_fail_msg "icl'mk_app_rule" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'mk_app_rule 6065 a",
	icl'mk_app_rule so_isso_axiom,
	const_deleted_thm,
	gen_fail_msg "icl'mk_app_rule" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'mk_app_rule 6066 a",
	icl'mk_app_rule so_isso_axiom,
	out_of_scope_thm,
	gen_fail_msg "icl'mk_app_rule" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"]),
	("icl'mk_app_rule 6036 b",
	icl'mk_app_rule deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'mk_app_rule" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'mk_app_rule 6065 b",
	icl'mk_app_rule const_deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'mk_app_rule" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'mk_app_rule 6066 b",
	icl'mk_app_rule out_of_scope_thm,
	so_isso_axiom,
	gen_fail_msg "icl'mk_app_rule" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"])
	];
=TEX
\subsection{icl'§\_mp\_rule}
=SML
store_mt_results (mt_runf (op =#)) [
	("icl'§_mp_rule_1",
	dest_thm o icl'§_mp_rule t_eq_f,
	icl'asm_rule mk_t,
	([(mk_eq(mk_t,mk_f)),mk_t],mk_f))
	];

store_mt_results mt_run_fail[
	("icl'§_mp_rule 6024",
	icl'§_mp_rule t_eq_f,
	(icl'asm_rule mk_f),
	gen_fail_msg "icl'§_mp_rule" 6024 ["T § F Ù T § F", "F Ù F"]),
	("icl'§_mp_rule 6030 a",
	icl'§_mp_rule (icl'asm_rule mk_t),
	t_eq_f,
	gen_fail_msg "icl'§_mp_rule" 6030 ["T Ù T"]),
	("icl'§_mp_rule 6030 b",
	icl'§_mp_rule (icl'asm_rule (mk_eq(N0,N1))),
	t_eq_f,
	gen_fail_msg "icl'§_mp_rule" 6030 ["0 = 1 Ù 0 = 1"])
	];
store_mt_results mt_run_error [
	("icl'§_mp_rule 6036 a",
	icl'§_mp_rule so_isso_axiom,
	deleted_thm,
	gen_fail_msg "icl'§_mp_rule" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'§_mp_rule 6065 a",
	icl'§_mp_rule so_isso_axiom,
	const_deleted_thm,
	gen_fail_msg "icl'§_mp_rule" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'§_mp_rule 6066 a",
	icl'§_mp_rule so_isso_axiom,
	out_of_scope_thm,
	gen_fail_msg "icl'§_mp_rule" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"]),
	("icl'§_mp_rule 6036 b",
	icl'§_mp_rule deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'§_mp_rule" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'§_mp_rule 6065 b",
	icl'§_mp_rule const_deleted_thm,
	so_isso_axiom,
	gen_fail_msg "icl'§_mp_rule" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'§_mp_rule 6066 b",
	icl'§_mp_rule out_of_scope_thm,
	so_isso_axiom,
	gen_fail_msg "icl'§_mp_rule" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"])
	];

=TEX
\subsection{icl'simple\_µ\_intro}
=SML
store_mt_results (mt_runf (op =#)) [
	("icl'simple_µ_intro 1",
	dest_thm o icl'simple_µ_intro v1,
	t_eq_f,
	([(mk_eq(mk_t,mk_f))],mk_µ(v1,(mk_eq(mk_t,mk_f))))),
	("icl'simple_µ_intro 2",
	dest_thm o icl'simple_µ_intro qB,
	pq_ax,
	([],mk_µ( qB,exists_p_q)))
	];

store_mt_results mt_run_fail[
	("icl'simple_µ_intro 3007",
	icl'simple_µ_intro mk_t,
	t_eq_f,
	gen_fail_msg "icl'simple_µ_intro" 3007 [pr_term mk_t]),
	("icl'simple_µ_intro 6005",
	icl'simple_µ_intro v1,
	(icl'asm_rule v1),
	gen_fail_msg "icl'simple_µ_intro" 6005 [pr_term v1])
	];
store_mt_results mt_run_error [
	("icl'simple_µ_intro 6036",
	icl'simple_µ_intro v1,
	deleted_thm,
	gen_fail_msg "icl'simple_µ_intro" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'simple_µ_intro 6065",
	icl'simple_µ_intro v1,
	const_deleted_thm,
	gen_fail_msg "icl'simple_µ_intro" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'simple_µ_intro 6066",
	icl'simple_µ_intro v1,
	out_of_scope_thm,
	gen_fail_msg "icl'simple_µ_intro" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"])
	];

=TEX
\subsection{icl'inst\_term\_rule}
=SML
store_mt_results (mt_runf (op =#)) [
	("icl'inst_term_rule_1",
	dest_thm o icl'inst_term_rule [(mk_t,v1),(mk_f,v2)],
	icl'list_simple_µ_elim [v1,v2]
		(icl'asm_rule (list_mk_µ([v1,v2],mk_eq(v1,v2)))),
	([(list_mk_µ([v1,v2],mk_eq(v1,v2)))],(mk_eq(mk_t,mk_f)))),
	("icl'inst_term_rule_2",
	dest_thm o icl'inst_term_rule [(v2,v1),(v1,v2)],
	icl'list_simple_µ_elim [v1,v2]
		(icl'asm_rule (list_mk_µ([v1,v2],mk_eq(v1,v2)))),
	([(list_mk_µ([v1,v2],mk_eq(v1,v2)))],mk_eq(v2,v1))),
	("icl'inst_term_rule_3",
	dest_thm o icl'inst_term_rule [],
	icl'list_simple_µ_elim [v1,v2 ]
		(icl'asm_rule (list_mk_µ([v1,v2],mk_eq(v1,v2)))),
	([(list_mk_µ([v1,v2],mk_eq(v1,v2)))],mk_eq(v1,v2)))
	];

store_mt_results mt_run_fail[
	("icl'inst_term_rule 3007",
	icl'inst_term_rule [(v2,mk_t)],
	(icl'asm_rule v1),
	gen_fail_msg "icl'inst_term_rule" 3007 [pr_term mk_t]),
	("icl'inst_term_rule 6027",
	icl'inst_term_rule [(N0,v1)],
	(icl'asm_rule v1),
	gen_fail_msg "icl'inst_term_rule" 6027 [pr_term N0,pr_term v1]),
	("icl'inst_term_rule 6028",
	icl'inst_term_rule [(v2,v1)],
	(icl'asm_rule v1),
	gen_fail_msg "icl'inst_term_rule" 6028 [pr_term v1])
	];
store_mt_results mt_run_error [
	("icl'inst_term_rule 6036",
	icl'inst_term_rule [],
	deleted_thm,
	gen_fail_msg "icl'inst_term_rule" 6036 ["p = q Ù p = q", 
		"deleted_theory_mdt006",del_theory_index]),
	("icl'inst_term_rule 6065",
	icl'inst_term_rule [],
	const_deleted_thm,
	gen_fail_msg "icl'inst_term_rule" 6065 ["p = q Ù p = q",
		"yet_again"]),
	("icl'inst_term_rule 6066",
	icl'inst_term_rule [],
	out_of_scope_thm,
	gen_fail_msg "icl'inst_term_rule" 6066 ["p = q Ù p = q",
		"out_of_scope_mdt006"])
	];
=TEX
\subsection{icl'plus\_conv}
=SML
store_mt_results (mt_runf (op =#)) [
	("icl'plus_conv 1",
	dest_thm o icl'plus_conv,
	list_mk_app(tplus,[N7,N2]),
	([],mk_eq(list_mk_app(tplus,[N7,N2]),N9))),
	("icl'plus_conv 2",
	dest_thm o icl'plus_conv,
	list_mk_app(tplus,[N0,N2]),
	([],mk_eq(list_mk_app(tplus,[N0,N2]),N2)))
	];
=TEX
The following test assumes $+$ has been declared infix.
=SML
store_mt_results mt_run_fail [
	("icl'plus_conv 6085 a",
	icl'plus_conv,
	list_mk_app(tplus,[mk_var("n",Ó),N1]),
	gen_fail_msg "icl'plus_conv" 6085 ["¨n + 1Æ"]),
	("icl'plus_conv 6085 b",
	icl'plus_conv,
	mk_var("n",Ó),
	gen_fail_msg "icl'plus_conv" 6085 ["¨nÆ"])
	];
=TEX
\section{FUTHER THEORY FUNCTIONS}
Test hooks into environments.
=SML
let
fun aux (Value a, Value b) = a =: b
| aux (Nil, Nil) = true
| aux _ = false;
in
store_mt_results (mt_runf aux) [ 
	("get_const_type 1",
	get_const_type,
	"5",
	Value Ó),
	("get_const_type 2",
	get_const_type,
	"",
	Nil),
	("get_const_type 3",
	get_const_type,
	"T",
	Value BOOL),
	("get_const_type 4",
	get_const_type,
	"TorF",
	Nil),
	("get_const_type 5",
	get_const_type,
	"rubbish",
	Nil)
	]
end;
store_mt_results mt_run [ 
	("get_type_arity 1",
	get_type_arity,
	"BOOL",
	Value 0),
	("get_type_arity 2",
	get_type_arity,
	"Ó",
	Value 0),
	("get_type_arity 3",
	get_type_arity,
	"",
	Nil),
	("get_type_arity 4",
	get_type_arity,
	"≠",
	Value 2),
	("get_type_arity 5",
	get_type_arity,
	"RUBBISH",
	Nil)
	];
=TEX
Test the built in scopes:
=SML
store_mt_results (mt_runf (op =$)) [ 
	("icl'new_const 5",
	icl'new_const,
	("12a",BOOL),
	mk_const("12a",BOOL)),
	("icl'new_const 6",
	icl'new_const,
	("`12",BOOL),
	mk_const("`12",BOOL))
	];
store_mt_results mt_run_fail [
	("icl'new_const 6049 a",
	icl'new_const,
	("1",BOOL),
	gen_fail_msg "icl'new_const" 6049 ["1"]),
	("icl'new_const 6049 b",
	icl'new_const,
	("123",BOOL),
	gen_fail_msg "icl'new_const" 6049 ["123"]),
	("icl'new_const 6049 c",
	icl'new_const,
	("`a",BOOL),
	gen_fail_msg "icl'new_const" 6049 ["`a"]),
	("icl'new_const 6049 d",
	icl'new_const,
	("\"abc",BOOL),
	gen_fail_msg "icl'new_const" 6049 ["\"abc"])
	];
=TEX
\subsection{Sealing Theories}
=SML
store_mt_results mt_run [("icl'get_pervasive_theory_name 1",
	icl'get_pervasive_theory_name,
	(),
	"min")];
store_mt_results mt_run [("icl'open_theory 1 i",
	icl'open_theory,
	"next",
	([],[next_index+1,next_index+2]))];
store_mt_results mt_run_fail [(
	"icl'seal_hierarchy 6004",
	icl'seal_hierarchy,
	(),
	gen_fail_msg "icl'seal_hierarchy" 6004 ["another"])];
icl'new_parent "another";
icl'delete_theory "copy_of_next";
icl'delete_theory "test";
icl'seal_hierarchy();
store_mt_results mt_run [("icl'get_pervasive_theory_name 2",
	icl'get_pervasive_theory_name,
	(),
	"next")];
store_mt_results mt_run [("icl'open_theory 1 j",
	icl'open_theory,
	"next",
	([],[]))];
store_mt_results mt_run_fail [
	("icl'seal_hierarchy 1",
	icl'open_theory,
	"min",
	gen_fail_msg "icl'open_theory" 6017 ["min","next"]),
	("icl'seal_hierarchy 2",
	icl'open_theory,
	"another",
	gen_fail_msg "icl'open_theory" 6017 ["another","next"])
	];
store_mt_results mt_run [("icl'open_theory 4 l",
	icl'open_theory,
	"yet_again",
	([next_index+2],[]))];
=TEX
\subsection{Test Harness Testing of Hierarchies}
Tests on hierarchies : do after all others, as theories are made read only by these tests.
See also section \ref{hierarchy} for tests ``by hand''.
Most of the hierarchy functions are tested by side effect.
=SML
store_mt_results mt_run_fail [
	("icl'new_hierarchy 6090",
	icl'new_hierarchy,
	(),
	gen_fail_msg "icl'new_hierarchy" 6090 ["0"])
	];
icl'freeze_hierarchy();
print_hierarchy();
store_mt_results mt_run_fail [
	("icl'new_axiom 6071",
	icl'new_axiom,
	(["Truth_axiom1"],mk_t),
	gen_fail_msg "icl'new_axiom" 6071 ["yet_again"])
	];
store_mt_results mt_run_fail [
	("icl'new_const 6071",
	icl'new_const,
	("ForT1",BOOL),
	gen_fail_msg "icl'new_const" 6071 ["yet_again"])
	];
store_mt_results mt_run_fail [
	("icl'new_type 6071",
	icl'new_type,
	("SOMETHING1",3),
	gen_fail_msg "icl'new_type" 6071 ["yet_again"])
	];
store_mt_results mt_run_fail [
	("icl'new_defn 6071",
	icl'new_defn,
	(["True1"],"True1",mk_t),
	gen_fail_msg "icl'new_defn" 6071 ["yet_again"])
	];
store_mt_results mt_run_fail [
	("icl'delete_extension 6071",
	icl'delete_extension,
	(),
	gen_fail_msg "icl'delete_extension" 6071 ["yet_again"])
	];
store_mt_results mt_run_fail [
	("icl'list_save_thm 6071",
	icl'list_save_thm,
	(["Example1"],icl'asm_rule v1),
	gen_fail_msg "icl'list_save_thm" 6071 ["yet_again"])
	];
store_mt_results mt_run_fail [
	("icl'delete_thm 6071",
	icl'delete_thm,
	"Example",
	gen_fail_msg "icl'delete_thm" 6071 ["yet_again"])
	];
store_mt_results mt_run_fail [
	("icl'delete_theory 6071",
	icl'delete_theory,
	"another",
	gen_fail_msg "icl'delete_theory" 6071 ["another"])
	];
store_mt_results mt_run_fail [
	("icl'lock_theory 6071",
	icl'lock_theory,
	"yet_again",
	gen_fail_msg "icl'lock_theory" 6071 ["yet_again"])
	];
store_mt_results mt_run_fail [
	("icl'new_parent 6071",
	icl'new_parent,
	"another",
	gen_fail_msg "icl'new_parent" 6071 ["yet_again"])
	];
store_mt_results mt_run_fail [
	("icl'new_type_defn 6071",
	icl'new_type_defn,
	( [ "ETYPE7"], "ETYPE7", ["'1"], etype_ax),
	gen_fail_msg "icl'new_type_defn" 6071 ["yet_again"])
	];
store_mt_results mt_run_fail [
	("icl'new_spec 6071",
	icl'new_spec,
	(["So1","IsSo1"],2,so_isso_axiom),
	gen_fail_msg "icl'new_spec" 6071 ["yet_again"])
	];

val newhier1 = icl'new_hierarchy();
val newhier2 = icl'new_hierarchy();
icl'open_theory "next";
icl'load_hierarchy newhier1;
icl'new_theory "another_test";
store_mt_results mt_run_fail [
	("icl'load_hierarchy 6033",
	icl'load_hierarchy,
	newhier2,
	gen_fail_msg "icl'load_hierarchy" 6033 [])
	];
=TEX
\subsection{Scopes and $icl'new\_parent$}
Further tests for $icl'new\_parent$ clashes in children:
=SML
icl'open_theory "next";
icl'new_theory "np_test1";
icl'new_theory "np_test2";
icl'new_theory "np_test4";
icl'open_theory "np_test1";
icl'new_theory "np_test3";
icl'open_theory "np_test3";
icl'new_const("np_test",BOOL);
icl'new_type("np_test_t",0);
icl'open_theory "np_test2";
icl'new_const("np_test",BOOL);
icl'open_theory "np_test4";
icl'new_type("np_test_t",0);
icl'open_theory "np_test1";
store_mt_results mt_run_fail [
	("icl'new_parent 6067 b",
	icl'new_parent,
	"np_test2",
	gen_fail_msg "icl'new_parent" 6067 ["np_test2"]),
	("icl'new_parent 6067 c",
	icl'new_parent,
	"np_test4",
	gen_fail_msg "icl'new_parent" 6067 ["np_test4"])
	];
=TEX
\section{END OF TEST HARNESS TESTS}
=SML
diag_string(summarize_mt_results());
=TEX
\section{TESTING HIERARCHIES}
\label{hierarchy}
It is not really possible to test the hierarchy features,
and whether everything else ``respects'' them, within a module test document.
However, the following commented sequence should be input, by hand,
and the required textual identity checked.

Note that the database the tests start on will change,
so a copy should be made, to allow the restoration of the original.
=GFT csh
cp sun4hol.db testhol.db
poly $cwd/testhol.db
=TEX
or
=GFT csh
cp sun3hol.db testhol.db
poly $cwd/testhol.db
=TEX
as appropriate.
=GFT ML Source
open icl'Kernel;
icl'open_theory "min";

fun theory_names ((): unit) : string list = (
let	val hier = icl'get_hierarchy();
in
	map fst (hier drop 
		(fn (_,{status = status,...}) => status = TSDeleted))
end);
map (fn x => icl'delete_theory x 
	handle (Fail _) => ()) (theory_names());
map (fn x => icl'delete_theory x 
	handle (Fail _) => ()) (theory_names());
repeat icl'delete_extension;
val _ = icl'seal_hierarchy();
val _ = icl'freeze_hierarchy();
icl'get_hierarchy();
abandon_reader_writer();
PolyML.make_database "test.db";
PolyML.commit();
PolyML.quit();
=TEX
Note that it is correct to see in the output from the above the message
=GFT
:> Exception- AbandonReaderWriter raised
Abandoning reader writer
val it = () : unit   
=TEX
Now run the following on the new database `test.db':
=GFT csh
poly $cwd/test.db
=TEX
Prepare for tests
=GFT ML Source
use_terminal();
BasicError.icl'error_init();
PrettyPrinter.pp_init();
val hierarchy = icl'new_hierarchy();
val _ = icl'load_hierarchy hierarchy;
icl'get_hierarchy();
=TEX
Carry out activities to be tested:
these should be all functions which change the theory state.
=GFT ML Source
icl'new_theory "test";
icl'open_theory "test";
icl'new_theory "test1";
icl'open_theory "test1";
val BOOL = icl'new_type("BOOL",0);
val ≠_type = icl'new_type("≠",2);
val v1 = mk_var("v1",BOOL);
val mk_t = mk_const("T",BOOL);
icl'new_parent "min";
icl'new_theory "test2";
icl'open_theory "test2";
icl'new_theory "test3";
icl'lock_theory "test1";
icl'lock_theory "test2";
icl'unlock_theory "test2";
icl'delete_theory "test3";
icl'list_save_thm (["test_thm"],icl'asm_rule v1);
icl'list_save_thm (["del_test_thm"],icl'asm_rule v1);
icl'delete_thm "del_test_thm";
icl'new_axiom(["test_axiom"], v1);
icl'new_const("T",BOOL);
icl'new_const("delete_T",BOOL);
icl'delete_extension();
val tv1 = mk_vartype "'tv1";
val tv2 = mk_vartype "'tv2";
val vtv1 = mk_var("vtv1",tv1);
icl'new_const("=",mk_≠_type(tv1, mk_≠_type(tv1, BOOL)));
icl'new_const("∂",mk_≠_type(mk_≠_type(tv1,BOOL),BOOL));
icl'new_const("µ",mk_≠_type(mk_≠_type(tv1,BOOL),BOOL));
icl'new_const("¥",mk_≠_type(BOOL,mk_≠_type(BOOL,BOOL)));
icl'new_const("±",mk_≠_type(BOOL,mk_≠_type(BOOL,BOOL)))
	handle _ => mk_t;
icl'new_const("≤",mk_≠_type(BOOL,mk_≠_type(BOOL,BOOL)))
	handle _ => mk_t;
icl'new_const("≥",mk_≠_type(BOOL,BOOL))
	handle _ => mk_t;
icl'new_defn(["True"],"True",mk_t);
icl'new_const("TypeDefn",mk_≠_type(mk_≠_type(tv1,BOOL),
	mk_≠_type(mk_≠_type(tv2,tv1),BOOL)));
val Tv1Pred = icl'new_const("Tv1Pred",mk_≠_type(tv1,BOOL));
val etype_ax = icl'new_axiom(["etype_ax"],
	mk_simple_∂(vtv1,mk_app(Tv1Pred,vtv1)));

val etype_def = icl'new_type_defn(["ETYPE"], "ETYPE", 
	["'tv1"], etype_ax);
icl'open_theory "test1";
icl'duplicate_theory "test2" "test2a";
icl'seal_hierarchy();
icl'freeze_hierarchy();
=TEX
Test for the correct (i.e. created) state:
=GFT ML Source
icl'get_hierarchy ();
=TEX
Commit the database - this will cause the state of the ADT THM to revert to what is stored in the parent database.
=GFT ML Source
PolyML.commit();
=TEX
Test for the correct (i.e. initial) state.
That should be an empty theory ``min'' and a number of 
empty theories with status $TSDeleted$.
=GFT ML Source
icl'get_hierarchy ();
=TEX
Now reload the new hierarchy:
=GFT ML Source
val _ = icl'load_hierarchy hierarchy;
=TEX
Test for the correct (i.e. created, once more) state:
The output from this should be identical (by textual comparison) to the output of $icl'get_hierarchy$ for the original created state output.
=GFT ML Source
icl'get_hierarchy ();
=TEX
Tidy up:
=GFT ML Source
PolyML.quit();
=TEX
=GFT csh
rm testhol.db test.db
=TEX
\section{UNTESTED ERROR MESSAGES}
\label{untested}
The following are not tested for various reasons:

\begin{tabular}{| l | p{4.5in} |}\hline
Test & Comment \\ \hline
6072 & This is where a theorem has a duff theory pointer: difficult to recreate. \\
3002 & Difficult to test for definitions and specifications \\
3003 & Difficult to test for definitions and specifications \\
3004 & Difficult to test for definitions and specifications \\ 
6013 & Not done for all relevent functions \\
6014 & Not done for all relevent functions \\
6015 & Not done for all relevent functions \\
6038 & Not done for all relevent functions \\
\hline
\end{tabular}
=TEX
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}


