=IGN
********************************************************************************
imp045.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
%  $Id: imp045.doc,v 1.20 2005/12/16 10:34:27 rda Exp rda $ %Z%
=TEX
%%%%% YOU MAY WANT TO CHANGE POINT SIZE IN THE FOLLOWING:
\documentclass[a4paper,11pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{latexsym}
\usepackage{epsf}
\makeindex

%%%%% YOU WILL WANT TO CHANGE THE FOLLOWING TO SUIT YOU AND YOUR DOCUMENT:

\def\Title{Implementation for the General Purpose Theories}

\def\AbstractText{This document creates the theories ``one'', ``combin'' and ``sum''.}

\def\Reference{DS/FMU/IED/IMP045}

\def\Author{K. Blackburn}


\def\EMail{C/O {\tt rda@lemma-one.com}}

\def\Phone{C/O +44 7497 030682}

\def\Abstract{\begin{center}{\bf Abstract}\par\parbox{0.7\hsize}
{\small \AbstractText}
\end{center}}

%%%%% YOU MAY WANT TO CHANGE THE FOLLOWING TO GET A NICE FRONT PAGE:
\def\FrontPageTitle{ {\huge \Title } }
\def\FrontPageHeader{\raisebox{16ex}{\begin{tabular}[t]{c}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year\\\strut\\
\end{tabular}}}

%%%%% THE FOLLOWING DEFAULTS WILL GENERALLY BE RIGHT:

\def\Version{\VCVersion}
\def\Date{\FormatDate{\VCDate}}

%% LaTeX2e port: =TEX
%% LaTeX2e port: \documentstyle[hol1,11pt,TQ]{article}
%% LaTeX2e port: \ftlinepenalty=9999
%% LaTeX2e port: \makeindex
%% LaTeX2e port: \TPPproject{FST PROJECT}  %% Mandatory field
%% LaTeX2e port: \TPPtitle{Implementation for the General Purpose Theories}  %% Mandatory field
%% LaTeX2e port: \def\TPPheadtitle{Implementation for the General Purpose Theories}
%% LaTeX2e port: \TPPref{DS/FMU/IED/IMP045}  %% Mandatory field
%% LaTeX2e port: \def\SCCSversion{$Revision: 1.20 $
%% LaTeX2e port: }
%% LaTeX2e port: \TPPissue{\SCCSversion}  %% Mandatory field
%% LaTeX2e port: \TPPdate{\FormatDate{$Date: 2005/12/16 10:34:27 $ %
%% LaTeX2e port: }}  %% Mandatory field
%% LaTeX2e port: \TPPstatus{Draft}			%% Mandatory field
%% LaTeX2e port: \TPPtype{SML Literate Script}
%% LaTeX2e port: \TPPkeywords{}
%% LaTeX2e port: \TPPauthor{K.~Blackburn & WIN01}  %% Mandatory field
%% LaTeX2e port: %\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
%% LaTeX2e port: \TPPauthorisation{R.D.Arthan & FST Team Leader}
%% LaTeX2e port: \TPPabstract{This document creates the theories
%% LaTeX2e port: ``one'', ``combin'' and ``sum''.}
%% LaTeX2e port: \TPPdistribution{\parbox[t]{4.0in}{%
%% LaTeX2e port: 	    Project Library
%% LaTeX2e port: }}
%% LaTeX2e port: %\TPPclass{CLASSIFICATION}
%% LaTeX2e port: %\def\TPPheadlhs{}
%% LaTeX2e port: %\def\TPPheadcentre{}
%% LaTeX2e port: %def\TPPheadrhs{}
%% LaTeX2e port: %\def\TPPfootlhs{}
%% LaTeX2e port: %\def\TPPfootcentre{}
%% LaTeX2e port: %\def\TPPfootrhs{}
%% LaTeX2e port: \begin{document}
%% LaTeX2e port: \makeTPPfrontpage
%% LaTeX2e port: \vfill
%% LaTeX2e port: \begin{centering}
%% LaTeX2e port: 
%% LaTeX2e port: \bf Copyright \copyright\ : Lemma 1 Ltd. \number\year
%% LaTeX2e port: 
%% LaTeX2e port: \end{centering}

\begin{document}

\headsep=0mm
\FrontPage
\headsep=10mm

\setcounter{section}{-1}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item [Issue 1.1 (1991/09/24)]
First version.
\item [Issue 1.2 (1991/09/25)]
Taken $ext\_thm$ from elsewhere, and used $ante\_tac$.
\item [Issue 1.3 (1991/10/07)]
Made ``set'' the parent.
\item [Issue 1.4 (1991/10/16)]
Made ``sets'' the parent.
\item [Issue 1.5 (1991/10/21)]
Changes after comments.
Renamed constants $S$, $K$ and $I$ to $CombS$, $CombK$ and $CombI$.
\item [Issue 1.6 (1991/11/07)]
Changed precedence of ``+''.

\item[Issue 1.7 (1992/01/20), \FormatDate{92/01/20} ] Updated to use new fonts.
\item[Issue 1.8 (1992/01/27) (23rd January 1992)]
$new\_axiom$, $simple\_new\_type\_defn$, $new\_type\_defn$
all changed to take lists of keys, rather than single ones.
\item[Issue 1.9 (1992/01/27) (27th January 1992)]
Corrected a typo.
\item [Issue 1.10 (1992/02/07) (13th April 1992)]
Changes due to CR0017.
\item [Issue 1.12 (1992/05/14) (14th May 1992)]
Tidying up proof contexts.
\item [Issue 1.14 (1992/06/02) (2nd June 1992)]
Added hierarchy sealing.
\item[Issue 1.15 (1992/06/24) (24th June 1992)]
Renamings from issue 1.6 of \cite{DS/FMU/IED/WRK038},
mostly proof context name changes.
\item [Issue 1.16 (1992/07/07),1.17 (1992/07/08) (7th July 1992)]
Greater support for reasoning about sum types.
\item[Issue 1.18 (2002/10/17)] Copyright and banner updates for open source release.
\item[Issue 1.19 (2002/10/17)] PPHol-specific updates for open source release
\item[Issue 1.20 (2005/12/16)] The prefix for private interfaces is now $pp'$ rather than $icl'$.
\item[Issue 1.21 (2014/04/15)] Now use $new\_spec1$ rather than $new\_spec$.
\item[2014/07/23]
Augmented old RCS version numbers in the changes history with dates.
Dates will be used in place of version numbers in future.

\item[2015/04/17]
Ported to Lemma 1 document template.
%%%% END OF CHANGES HISTORY %%%%
\end{description}
% \subsection{Changes Forecast}
\section{GENERAL}
\subsection{Scope}
This document contains an implementation of the general purpose theories.
This is called for in \cite{DS/FMU/IED/HLD011}.
The design is in \cite{DS/FMU/IED/DTD045}.
\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains an implementation of the
general purpose theories.
\subsubsection{Dependencies}
This document takes its signature from \cite{DS/FMU/IED/DTD045},
and also requires the theory ``sets'' defined in
\cite{DS/FMU/IED/DTD044}.
\subsubsection{Deficiencies}
None known.
\subsubsection{Possible Enhancements}
None known.
\section{THE THEORY ``basic$\_$hol''}
=SML
structure €BasicHolTheory› : BasicHolTheory = struct
val _ = open_theory "char";
val _ = new_theory "€basic_hol›";
val _ = pp'Kernel.pp'seal_hierarchy();
val _ = push_merge_pcs ["'propositions",
		"'simple_abstractions"];
end;
=TEX
\section{THE THEORY ``one''}
=SML
structure €OneTheory› : OneTheory = struct
val _ = open_theory "basic_hol";
val _ = new_theory "€one›";
=TEX
=SML
val €is_one_rep_def› = new_spec1(["IsOneRep","is_one_rep_def"], ["IsOneRep"], (
push_goal([],¨∂ IsOneRep:BOOL ≠ BOOL ∑
	∂ one : BOOL ∑
	µ x: BOOL∑ IsOneRep x § (x § one)Æ);
a(simple_∂_tac¨Ã x ∑ x = TÆ THEN
 simple_∂_tac¨TÆ THEN
 rewrite_tac[]);
pop_thm()));
=TEX
=SML
val €one_def1› = new_type_defn(["ONE","one_def1"],"ONE",[],(
push_goal([],¨∂ x: BOOL ∑ IsOneRep xÆ);
a(strip_asm_tac (get_defn "-" "IsOneRep"));
a(simple_∂_tac ¨one:BOOLÆ THEN
  asm_rewrite_tac[]);
pop_thm()));
=TEX
=SML
val €one_def› = new_spec1(["One","one_def"], ["One"], (
push_goal([],¨∂ One : ONE ∑ µ x: ONE∑ x = OneÆ);
a (strip_asm_tac (simple_¥_match_mp_rule type_lemmas_thm
	(get_defn "-" "ONE")));
a(strip_asm_tac (get_defn "-" "IsOneRep"));
a(simple_∂_tac ¨abs (one:BOOL):ONEÆ);
a simple_µ_tac;
a(GET_NTH_ASM_T 2 (fn th1 => DROP_NTH_ASM_T 1 (fn th2
	=> ante_tac (rewrite_rule [th1] th2))));
a(¥_T (ante_tac o simple_µ_elim ¨rep (x:ONE):BOOLÆ));
a(asm_rewrite_tac[]);
a(¥_T (fn x=> asm_rewrite_tac[eq_sym_rule x]));
pop_thm()));
=TEX
=SML
val €one_fns_thm› = save_thm("one_fns_thm",(
push_goal([],¨µ f: 'a ≠ ONE ∑ f = Ã x ∑ OneÆ);
a(rewrite_tac[ext_thm,one_def]);
pop_thm()));
=TEX
\subsection{End of Theory ``one''}
=SML
end; (* of structure OneTheory *)
open OneTheory;
=TEX
\section{THE THEORY ``combin''}
=SML
structure €CombinTheory› : CombinTheory = struct
val _ = open_theory "basic_hol";
val _ = new_theory "€combin›";
=TEX
=SML
val _ = declare_infix (300, "o");
val €o_def› = new_spec1(["o","o_def"], ["o"] ,(
push_goal([],¨∂ $o ∑ µ (f:'b ≠ 'c) (g:'a ≠ 'b) (x: 'a) ∑
	(f o g) x = f(g x)Æ);
a(simple_∂_tac ¨Ã (f:'b ≠ 'c) (g:'a ≠ 'b) (x: 'a) ∑ f(g x)Æ THEN rewrite_tac[]);
pop_thm()));
=TEX
=SML
val €comb_s_def› = new_spec1(["CombS","comb_s_def"], ["CombS"], (
push_goal([],¨∂ CombS ∑ µ (f:'a ≠ 'b ≠ 'c) (g:'a ≠ 'b) (x:'a) ∑
	CombS f g x = f x (g x)Æ);
a(simple_∂_tac ¨Ã (f:'a ≠ 'b ≠ 'c) (g:'a ≠ 'b) (x:'a) ∑
	f x (g x)Æ THEN rewrite_tac[]);
pop_thm()));
=TEX
=SML
val €comb_k_def› = new_spec1(["CombK","comb_k_def"], ["CombK"], (
push_goal([],¨∂ CombK ∑ µ (x : 'a) (y : 'b) ∑ CombK x y = xÆ);
a(simple_∂_tac ¨Ã (x : 'a) (y : 'b) ∑ xÆ THEN rewrite_tac[]);
pop_thm()));
=TEX
=SML
val €comb_i_def› = new_spec1(["CombI","comb_i_def"], ["CombI"], (
push_goal([],¨∂ CombI ∑ µ (x : 'a) ∑ CombI x = xÆ);
a(simple_∂_tac ¨Ã (x : 'a) ∑ xÆ THEN rewrite_tac[]);
pop_thm()));
=TEX
=SML
val €s_k_thm› = save_thm ("s_k_thm", (
push_goal([],¨µ x ∑ (CombS:('a ≠ 'b ≠ 'a) ≠ ('a ≠ 'b) ≠ 'a ≠ 'a) CombK x = CombIÆ);
a(simple_µ_tac THEN rewrite_tac[ext_thm, comb_s_def, comb_k_def, comb_i_def]);
pop_thm()));
=TEX
=SML
val €o_assoc_thm› = save_thm ("o_assoc_thm",(
push_goal([],¨µ (f:'a ≠ 'b) (g:'c ≠ 'a) (h :'d ≠ 'c)∑
	f o (g o h) = (f o g) o hÆ);
a(REPEAT simple_µ_tac THEN rewrite_tac[ext_thm,o_def]);
pop_thm()));
=TEX
=SML
val €o_i_thm› = save_thm ("o_i_thm",(
push_goal([],¨µ f : 'a ≠ 'b∑
	((CombI o f) = f) ± ((f o CombI) = f)Æ);
a(REPEAT simple_µ_tac THEN rewrite_tac[ext_thm,o_def, comb_i_def]);
pop_thm()));
=TEX
\subsection{End of Theory ``combin''}
=SML
end; (* of struct CombinTheory *)
open CombinTheory;
=TEX
\section{THE THEORY ``sum''}
=SML
structure €SumTheory› : SumTheory = struct
val _ = open_theory "combin";
val _ = new_theory "€sum›";
=TEX
=SML
val €is_sum_rep_def› = new_spec1(["IsSumRep","is_sum_rep_def"], ["IsSumRep"], (
push_goal([],¨∂ IsSumRep ∑
∂ (inl:'a ≠  'a ∏ 'b ∏ BOOL) (inr:'b ≠  'a ∏ 'b ∏ BOOL)
  (outl:'a ∏ 'b ∏ BOOL ≠ 'a) (outr:'a ∏ 'b ∏ BOOL ≠ 'b)
  (isl:'a ∏ 'b ∏ BOOL ≠ BOOL) (isr:'a ∏ 'b ∏ BOOL ≠ BOOL) ∑
µ (x1:'a) (x2:'a) (y1:'b) (y2:'b) (z: 'a ∏ 'b ∏ BOOL) ∑
	IsSumRep(inl x1) ±
	IsSumRep(inr y1) ±
	(IsSumRep z ¥ (inl(outl z) = z ≤ inr(outr z) = z)) ±
	(inl x1 = inl x2 § x1 = x2) ±
	(inr y1 = inr y2 § y1 = y2) ±
	≥(inl x1 = inr y1) ±
	≥(inr y1 = inl x1) ±
	outl(inl x1) = x1 ±
	outr(inr y1) = y1 ±
	(IsSumRep z ¥ (isl z § inl(outl z) = z)) ±
	(IsSumRep z ¥ (isr z § inr(outr z) = z))
	Æ);
a(MAP_EVERY simple_∂_tac [
	¨Ã ((a:'a), (b:'b), c) ∑
	 if c then (b = Arbitrary) else (a = Arbitrary)Æ,
	¨Ã a:'a∑ (a, Arbitrary, T)Æ,
	¨Ã b:'b∑ (Arbitrary, b, F)Æ,
	¨Ã ((a:'a), (b:'b), (c:BOOL)) ∑ aÆ,
	¨Ã ((a:'a), (b:'b), (c:BOOL)) ∑ bÆ,
	¨Ã ((a:'a), (b:'b), (c:BOOL)) ∑ cÆ,
	¨Ã ((a:'a), (b:'b), c) ∑ ≥ cÆ]
	THEN rewrite_tac[pair_clauses]);
a(REPEAT strip_tac THEN (asm_rewrite_tac[pair_clauses] ORELSE_T id_tac));
(* *** Goal "1" *** *)
a(POP_ASM_T ante_tac THEN asm_rewrite_tac[pair_clauses]);
(* *** Goal "2" *** *)
a(POP_ASM_T ante_tac THEN asm_rewrite_tac[pair_clauses]);
(* *** Goal "3" *** *)
a(POP_ASM_T ante_tac THEN asm_rewrite_tac[pair_clauses]);
pop_thm()));
=TEX
=SML
val _ = declare_infix (300,"+");
val €sum_def› = new_type_defn(["+","sum_def"],"+",["'a","'b"],(
push_goal([],¨∂ x: 'a ∏ 'b ∏ BOOL ∑ IsSumRep xÆ);
a(strip_asm_tac (get_defn "-" "IsSumRep"));
a(simple_∂_tac¨inl (x:'a):'a ∏ 'b ∏ BOOLÆ);
a(asm_rewrite_tac[]);
pop_thm()));
=TEX
=SML
val €sum_clauses› = new_spec1(["InL", "InR", "OutL", "OutR", "IsL", "IsR","sum_clauses"],
	["InL", "InR", "OutL", "OutR", "IsL", "IsR"], (
push_goal([],¨
∂ InL InR OutL OutR IsL IsR ∑
µ (x1:'a) (x2:'a) (y1:'b) (y2:'b) (z: 'a + 'b) ∑
	(InL(OutL z) = z ≤ InR(OutR z) = z) ±
	((InL x1 : 'a + 'b) = InL x2 § x1 = x2) ±
	((InR y1 : 'a + 'b) = InR y2 § y1 = y2) ±
	≥(InL x1 = InR y1) ±
	≥(InR y1 = InL x1) ±
	OutL(InL x1:'a + 'b) = x1 ±
	OutR(InR y1:'a + 'b) = y1 ±
	(IsL z § InL(OutL z) = z) ±
	(IsR z § InR(OutR z) = z)
	Æ);
a (strip_asm_tac (simple_¥_match_mp_rule type_lemmas_thm
	(get_defn "-" "+")));
a(strip_asm_tac (get_defn "-" "IsSumRep"));
a(MAP_EVERY simple_∂_tac
	[¨(abs o (inl : 'a ≠ 'a ∏ 'b ∏ BOOL)):'a ≠ 'a + 'bÆ,
	¨(abs o (inr : 'b ≠ 'a ∏ 'b ∏ BOOL)):'b ≠ 'a + 'bÆ,
	¨((outl:'a ∏ 'b ∏ BOOL ≠ 'a) o rep):'a + 'b ≠ 'aÆ,
	¨((outr:'a ∏ 'b ∏ BOOL ≠ 'b) o rep):'a + 'b ≠ 'bÆ,
	¨((isl:'a ∏ 'b ∏ BOOL ≠ BOOL) o rep):'a + 'b ≠ BOOLÆ,
	¨((isr:'a ∏ 'b ∏ BOOL ≠ BOOL) o rep):'a + 'b ≠ BOOLÆ]
);
a(REPEAT simple_µ_tac THEN rewrite_tac[o_def]);
a(GET_NTH_ASM_T 2 (fn th1 => DROP_NTH_ASM_T 1 (fn th2
	=> ante_tac (rewrite_rule [th1] th2))));
a(¥_T(ante_tac o all_µ_intro o list_simple_µ_elim [
	¨x1: 'aÆ, ¨x2: 'aÆ, ¨y1: 'bÆ, ¨y2: 'bÆ, ¨rep (z:'a+'b):'a ∏ 'b ∏ BOOLÆ]));
a(asm_rewrite_tac[]);
a(¥_T(MAP_EVERY (asm_tac o all_µ_intro) o
	(strip_±_rule o all_simple_µ_elim)));
a(asm_rewrite_tac[]);
a(REPEAT strip_tac);
(* *** Goal "1" *** *)
a(DROP_NTH_ASM_T 10 (strip_asm_tac o all_simple_µ_elim));
(* *** Goal "1.1" *** *)
a(asm_ante_tac(get_asm 2) THEN asm_rewrite_tac[]);
(* *** Goal "1.2" *** *)
a(asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(DROP_NTH_ASM_T 1 (ante_tac o app_fun_rule ¨rep:'a + 'b ≠ ('a ∏ 'b ∏ BOOL)Æ)
	THEN asm_rewrite_tac[]);
(* *** Goal "3" *** *)
a(asm_rewrite_tac[]);
(* *** Goal "4" *** *)
a(DROP_NTH_ASM_T 1 (ante_tac o app_fun_rule ¨rep:'a + 'b ≠ ('a ∏ 'b ∏ BOOL)Æ)
	THEN asm_rewrite_tac[]);
(* *** Goal "5" *** *)
a(asm_rewrite_tac[]);
(* *** Goal "6" *** *)
a(≥_tac ¨TÆ THEN (rewrite_tac[] ORELSE_T accept_tac t_thm));
a(POP_ASM_T (ante_tac o app_fun_rule ¨rep:'a + 'b ≠ ('a ∏ 'b ∏ BOOL)Æ)
	THEN asm_rewrite_tac[]);
(* *** Goal "7" *** *)
a(≥_tac ¨TÆ THEN (rewrite_tac[] ORELSE_T accept_tac t_thm));
a(POP_ASM_T (ante_tac o app_fun_rule ¨rep:'a + 'b ≠ ('a ∏ 'b ∏ BOOL)Æ)
	THEN asm_rewrite_tac[]);
(* *** Goal "8" *** *)
a(asm_rewrite_tac[]);
(* *** Goal "9" *** *)
a(POP_ASM_T (ante_tac o app_fun_rule ¨rep:'a + 'b ≠ ('a ∏ 'b ∏ BOOL)Æ)
	THEN asm_rewrite_tac[]);
(* *** Goal "10" *** *)
a(asm_rewrite_tac[]);
(* *** Goal "11" *** *)
a(POP_ASM_T (ante_tac o app_fun_rule ¨rep:'a + 'b ≠ ('a ∏ 'b ∏ BOOL)Æ)
	THEN asm_rewrite_tac[]);
pop_thm()));
=TEX
=SML
val €simple_sum_cases_thm› =(
	all_µ_intro(hd(strip_±_rule(all_simple_µ_elim sum_clauses)))
);

val €sum_cases_thm› = (
push_goal([],¨µ x:'a + 'b ∑ (∂ y ∑ x = InL y) ≤
		(∂ z ∑ x = InR z)Æ);
a(simple_µ_tac);
a(strip_asm_tac (conv_rule (ONCE_MAP_C eq_sym_conv) (simple_µ_elim ¨xÆ simple_sum_cases_thm)));
(* *** Goal "1" *** *)
a(once_asm_rewrite_tac[]);
a(≤_left_tac THEN simple_∂_tac ¨(OutL x)Æ THEN rewrite_tac[]);
(* *** Goal "2" *** *)
a(once_asm_rewrite_tac[]);
a(≤_right_tac THEN simple_∂_tac ¨(OutR x)Æ THEN rewrite_tac[]);
save_thm("sum_cases_thm", pop_thm()));
=TEX
=SML
val €sum_fns_thm› = save_thm("sum_fns_thm",(
push_goal([],¨µ (f: 'a ≠ 'c) (g: 'b ≠ 'c) ∑
	∂â1 h: 'a + 'b ≠ 'c ∑
	h o InL = f ± h o InR = gÆ);
a(REPEAT strip_tac);
a(conv_tac simple_∂â1_conv);
a(simple_∂_tac ¨Ã x:'a+'b∑
	if IsL x then ((f: 'a ≠ 'c)(OutL x)) else ((g: 'b ≠ 'c)(OutR x))Æ);
a(rewrite_tac[ext_thm, o_def,sum_clauses]);
a(REPEAT strip_tac);
a(≤_THEN asm_tac (simple_µ_elim ¨x'Æ simple_sum_cases_thm));
(* *** Goal "1" *** *)
a(POP_ASM_T (fn x=> once_rewrite_tac[eq_sym_rule x]));
a(asm_rewrite_tac[sum_clauses]);
(* *** Goal "2" *** *)
a(POP_ASM_T (fn x=> once_rewrite_tac[eq_sym_rule x]));
a(asm_rewrite_tac[sum_clauses]);
pop_thm()));
=TEX
=SML
fun €is_sum_type› (ty : TYPE) : bool = (
	case (dest_simple_type ty) of
	Ctype("+",[_,_]) => true
	| _ => false
);
=TEX
=SML
val €µ_sum_thm› =
(push_goal([],¨µ p ∑ (µ x : 'a + 'b ∑ p x) §
	((µ y : 'a ∑ p (InL y)) ± (µ z : 'b ∑ p (InR z)))Æ);
a(REPEAT strip_tac THEN_TRY asm_rewrite_tac[]);
a(strip_asm_tac (simple_µ_elim ¨xÆ sum_cases_thm));
(* *** Goal "1" *** *)
a(asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(asm_rewrite_tac[]);
pop_thm());
local
	val vaty = î'aÆ;
	val vbty = î'bÆ;
in	
val €µ_sum_conv› : CONV = (fn tm =>
let	val (x,bdy) = dest_simple_µ tm
		handle (Fail _) =>
		term_fail "µ_sum_conv" 45001 [tm];
	val lxbdy = snd(dest_app tm);
	val (aty,bty) = case dest_simple_type (type_of x) of
		Ctype("+",[a,b]) => (a,b)
		| _ => term_fail "µ_sum_conv" 45001 [tm];
	val xnm = fst(dest_var x);
	val (xnm',xnm'') = (
			case list_variant (frees bdy)
				[mk_var(xnm,aty), mk_var(xnm,bty)] of
			[a,b] => (fst(dest_var a),fst(dest_var b))
			| _ => term_fail "µ_sum_conv" 45001 [tm]);
	val s1 = simple_µ_elim lxbdy
		(inst_type_rule [(aty,vaty),(bty,vbty)]
		 µ_sum_thm);
	val s2 = conv_rule (ONCE_MAP_C simple_¬_conv) s1;
	val s3 = conv_rule (RAND_C
		(APP_C (RAND_C(RAND_C (simple_¡_conv xnm')),
		RAND_C(simple_¡_conv xnm''))))
			s2;
	val s4 = eq_trans_rule (refl_conv tm) s3;
in
	s4
end);
end;
=TEX
=SML
fun €lintro_µ_tac› (x : TERM) : TACTIC = (fn (seqasms, conc) =>
	([(seqasms, mk_simple_µ(x, conc))],
		(fn [thm] => simple_µ_elim x thm | _ => bad_proof "lintro_µ_tac"))
);

=TEX
=SML
fun €sum_cases_tac› (tm : TERM) : TACTIC = (fn gl as (seqasms,conc) =>
	if not(is_var tm andalso is_sum_type (type_of tm))
	then term_fail "sum_cases_tac" 45002 [tm]
	else if not (is_free_in tm conc)
	then term_fail "sum_cases_tac" 38002 [tm]
	else if any seqasms (is_free_in tm)
	then term_fail "sum_cases_tac" 38003 [tm]
	else
		(lintro_µ_tac tm THEN
		conv_tac µ_sum_conv THEN
		±_tac THEN
		simple_µ_tac) gl
);

=TEX
\subsection{End of Theory ``sum''}
=SML
end; (* of struct SumTheory *)
open SumTheory;
=TEX
\section{THE THEORY ``hol''}
=SML
=SML
structure €HolTheory› : HolTheory = struct
val _ = open_theory "one";
val _ = new_theory "€hol›";
val _ = new_parent "sum";
val _ = pop_pc();
end;
=TEX

\newpage
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}


