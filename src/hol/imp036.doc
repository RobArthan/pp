=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{HOL PDS System Initialisation}  %% Mandatory field
\TPPref{DS/FMU/IED/IMP036}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{ML Literate Script}
\TPPkeywords{HOL}
\TPPauthor{R.D.~Arthan & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{
This document contains the implementation for the
system initialisation functions.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library\\RDA\\AJH\\DJK}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history}  % to get section number `0.3'
\begin{description}
\item[Issue 1.1]
First draft.
\item[Issue 1.2]
Removed some hangovers from quick document creation.
Added setting of $profiling$ to $false$.
\item [Issue 1.3]
Added $reset\_flag$ $"subgoal\_package\_quiet"$.

\item[Issue 1.4, \FormatDate{92/01/20} ] Updated to use new fonts.
\item [Issue 1.5]
Changes to reflect needs of \cite{DS/FMU/IED/DTD069}.
\item [Issue 1.6]
Added $print\_status$.
\item [Issue 1.7]
Changed save and exit commands.
\item [Issue 1.8 (26th May 1992)]
Renamings from version 1.5 of DS/FMU/IED/WRK038.
\item [Issue 1.9 (26th May 1992)]
Added $use\_terminal$ to initialisation list.
\item [Issue 1.10 (23rd June 1992)]
Removed spurious line in $icl'write\_to\_initialisation\_error\_file$.
\item [Issue 1.11 (29th June 1992)]
Recognise difference between unreadable and unprocessable
initialisation files.
\item [Issue 1.12 (29th June 1992)]
Changed formatting of $print\_status$ line.
\item [Issue 1.13 (13th July 1992)]
Protecting against run-time environment errors.
\end{description}
\subsection{Changes forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the implementation for the system initialisation functions.
The detailed design for this material is given in \cite{DS/FMU/IED/DTD036}.
\subsection{Introduction}
\subsection{Dependencies}
\subsection{Algorithms}
\subsection{Possible Enhancements}
\subsection{Deficiencies}

\section{SYSTEM INITIALISATION}
=SML
structure €Initialisation› : Initialisation = struct
=TEX
=SML
val €init_funs› : (unit -> unit) list ref = ref [];
=TEX
=SML
fun €new_init_fun› (f : unit -> unit) : unit = (
	init_funs := !init_funs @ [f]
);
=TEX
=SML
fun €init› (() : unit) : unit = (
	map (fn f => f()) (!init_funs);
	()
);
=TEX
=SML
val €icl'database_info› : {
	theory_hierarchy : icl'Kernel.icl'HIERARCHY OPT,
	cache_theory : string,
	caches : string list} = {
	theory_hierarchy = Nil,
	cache_theory = "hol",
	caches = ["hol","basic_hol"]};
=TEX
=SML
end; (* of structure Initialisation *)
=TEX
We now wish to expose $icl'database_info$:
=SML
val icl'database_info = Initialisation.icl'database_info;
=TEX
\section{USER INTERFACES}
=SML
structure €HOLSystem› : HOLSystem = struct
=TEX
The following turns off profiling, so that though the system build
is profiled automatically, any further profiling must be
requested.
=SML
val side_effect3 = set_flag("profiling",false);
=TEX
The following sets the subgoal package ``quietness'' to its default (``noisy'').
This means that if the switch is quiet from its point of creation then
no subgoal pacage material will arrive in the log.
=SML
val side_effect4 = reset_flag "subgoal_package_quiet";
=TEX
To have the initialisation functions called appropriately, we use a stream
to detect whether or not the return from the $PolyML.commit$ is in the same
session or the new one. This works because in the new session the stream
will have become closed.
=SML

fun €quit› (():unit) : unit = ((
let	val resp = ask_at_terminal (get_error_message 36001 ["quit"]);
in
	if resp = "y\n"
	then PolyML.quit()
	else diag_line (get_error_message 36011 ["quit"])
end)
handle complaint =>
if area_of complaint = "ask_at_terminal"
then PolyML.quit()
else raise complaint);

fun €exit› (():unit) : unit = ((
let	val resp = ask_at_terminal (get_error_message 36001 ["exit"]);
in
	if resp = "y\n"
	then PolyML.quit()
	else diag_line (get_error_message 36011 ["exit"])
end)
handle complaint =>
if area_of complaint = "ask_at_terminal"
then PolyML.quit()
else raise complaint);

fun €save_and_quit› () : unit = (
let	val strm = open_in "/";
in	PolyML.commit();
	if	ExtendedIO.can_input(strm, 1)
	then	(close_in strm;
		PolyML.quit())	(* same session *)
	else	Initialisation.init()	(* new session *)
end);

val €save_and_exit› : unit -> unit = save_and_quit;
=TEX
=SML

fun €print_status› () : unit = (
	map (fn x => diag_string(x ^";"))
	[get_error_message 36006 [get_current_theory_name()],
	get_error_message 36007 [
		format_list (Combinators.I) (fst(get_current_pc())) ", "],
	(get_error_message 36009 [string_of_int(length (top_goals()))]
		handle (Fail _) => 
		get_error_message 30010 []),
	(get_error_message 36008 [top_current_label()]
		handle (Fail _) => 
		get_error_message 30026 [])];
	diag_string(get_error_message 36010 [system_version] ^ ".")
);
=TEX

Noting that $ExtendedIO.execute$ will return its first
string will ``$\backslash n$'' at the end,
extract the value of an UNIX shell variable:
=SML
fun €get_shell_var› (var : string) : string = (
let	val (is,os) = ExtendedIO.execute("/bin/echo $"^var);
	val aline = ExtendedIO.input_line is;
	val ealine = explode aline;
	val ealine' =  rev(tl(rev ealine));
in
	implode ealine'
end
handle _ => "");
=TEX
Noting that {\tt /bin/stty size} returns output of the form
=GFTSHOW
<number of rows> <some space characters> <number of columns>
=TEX
extract the terminal's line length:
=SML
local
	fun aux1 (" " :: rest) = aux1 rest
	| aux1 x = x;

	fun aux (" " :: rest) = aux1 rest
	| aux (a :: rest) = aux rest
	| aux [] = [];
in
fun €get_terminal_line_length› () : int = (
let	val (is,os) = ExtendedIO.execute("/bin/stty size");
	val aline = ExtendedIO.input_line is;
	val ealine = explode aline;
	val ealine' = rev(tl(rev (aux ealine)));
in
	nat_of_string(implode ealine')
end
handle _ => fail "get_terminal_line_length" 36013 []);
end;
=TEX
\subsection{Initialisation Steps}
Numbered as in the detailed design:
\subsubsection{Line Length}
=SML
fun €init_line_length› () : unit = (
let	val ll = get_terminal_line_length () - 2;
in
	((if ll < 20
	then set_line_length 20
	else set_line_length ll);())
end);

val initial2 = Initialisation.new_init_fun init_line_length;
=TEX
\subsubsection{Theory Hierarchy}
=SML
fun €init_theory_hierarchy› () : unit = (
	use_string(
	"case (#theory_hierarchy icl'database_info) of " ^
	"Value th => icl'Kernel.icl'load_hierarchy th " ^
	"| Nil => ();")
	handle _ => ()
);

val initial3 = Initialisation.new_init_fun init_theory_hierarchy;
=TEX
\subsubsection{Current Theory}
First a function to write a list of strings to
the initialisation error file:
=SML
fun €icl'write_to_initialisation_error_file› (sl : string list) : unit = (
	case (get_shell_var "hol_initialisation_error_file") of
	"" => diag_line (get_error_message 36004 [])
	| nm => (let val oo = open_out nm;
		in
		(map (fn s => (output(oo,s);output(oo,"\n"))) sl;
		close_out oo;
		())
		end)
);
=TEX
Then the function proper:
=SML
fun €init_current_theory› () : unit = (
	case get_shell_var "hol_current_theory" of
	"" => (use_string(
		"open_theory (#cache_theory icl'database_info);")
		handle _ => ()
	) | hct => (
		open_theory hct
		handle (Fail msg) =>
		(diag_line(get_message msg);
		icl'write_to_initialisation_error_file [
		get_error_message 36002 [hct]];
		PolyML.quit())
	)
);

val initial4 = Initialisation.new_init_fun init_current_theory;
=TEX
\subsubsection{Initialisation Scripts}
=SML
local
	fun aux acc [] = (if is_nil acc
		then []
		else [implode (rev acc)]
	) | aux acc ("," :: rest) = (
		if is_nil acc
		then aux [] rest
		else (implode(rev acc) :: aux [] rest)
	) | aux acc (a :: rest) = aux (a::acc) rest;
	fun aux1 [] = ()
	| aux1 (a :: x) = (
		((use_file a 
			handle (Io _) => 
			diag_line(get_error_message 36012 [a]))
			handle _ =>
			diag_line(get_error_message 36005 [a])
		);
		aux1 x);
in		
fun €load_initisation_scripts› () : unit = (
let	val source = get_shell_var "hol_initialisation_scripts";
	val scripts = aux [] (explode source);
in
	(aux1 scripts)
end)
end;

val initial5 = Initialisation.new_init_fun load_initisation_scripts;
=TEX
\subsubsection{Module Initialisation}
=SML
fun €init_cache_theories› () : unit = (
	(use_string(
	"set_cache_theories (#caches icl'database_info);")
	handle _ => ())
);

val initial6 = Initialisation.new_init_fun init_cache_theories;
=TEX

\subsubsection{System Banner}
=SML
fun €banner› () : unit = (
	diag_string (get_error_message 36000 [system_version])
);
val initial7 = Initialisation.new_init_fun banner;
=TEX
\subsubsection{Prompt}
=SML
val initial8 = Initialisation.new_init_fun use_terminal;
=TEX

=SML
end; (* of structure HOLSystem *)
open HOLSystem;
=TEX
=SML
=TEX
\small
\twocolumn[\section{INDEX}]
\printindex

\end{document}
