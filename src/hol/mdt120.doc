=IGN
********************************************************************************
mdt116.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
\documentclass[a4paper,12pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{epsf}
\makeindex

\def\Title{ Higher-Order Matching: Module Tests }

\def\Abstract{\begin{center}
{\bf Abstract}\par\parbox{0.7\hsize}
{\small This document gives the module tests for the higher-order matching module.}
\end{center}}

\def\Reference{LEMMA1/HOL/MDT114}

\def\Author{R.D. Arthan}

\def\EMail{{\tt rda@lemma-one.com}}

\def\Phone{+44 118 958 4409}

\def\Fax{+44 118 956 1920}

%%%%% YOU MAY WANT TO CHANGE THE FOLLOWING TO GET A NICE FRONT PAGE:
\def\FrontPageTitle{ {\huge \Title } }
\def\FrontPageHeader{\raisebox{16ex}{\begin{tabular}[t]{c}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year\\\strut\\
\end{tabular}}}
\begin{centering}



\end{centering}

%%%%% THE FOLLOWING DEFAULTS WILL GENERALLY BE RIGHT:

\def\Version{1.7%
}
\def\Date{\FormatDate{2002/10/17 16:20:01%
}}

%%%%% NOW BEGIN THE DOCUMENT AND MAKE THE FRONT PAGE

\begin{document}
\headsep=0mm
\FrontPage
\headsep=10mm

%%%%% STANDARD RED-TAPE SECTIONS (MAY WANT TO INTERLEAVE SOME \newpage COMMANDS IN THESE)

%%%%% CONTENTS:

\subsection{Contents}

\tableofcontents

%%%%% REFERENCES:

\newpage
\subsection{References}

\bibliographystyle{fmu}

%%%%% CHANGE THE FOLLOWING AS NECESSARY (E.G., TO PICK UP daz.bib):
{\raggedright
\bibliography{fmu}
}
%%%%% CHANGES HISTORY:
\subsection{Changes History}
\begin{description}
\item[Issue 1.1] First draft (place-holder).
\item[Issue 1.2] First complete version.
\item[Issue 1.3] Added tests for cases where there are $\eta$-redexes in
the pattern.
\item[Issue 1.4] Renamed $ho\_match$ on $simple\_ho\_match$ to make
way for a future implementation of the Fettig/L\"{o}chner algborithm later.
\item[Issue 1.5} Allowed for new parameter to $simple\_ho\_match$ and added tests for new rigid variable feature.
\item[Issue 1.6} Added regression test for fix to new rigid variable feature.
\end{description}

%%%%%  CHANGES FORECAST:

\subsection{Changes Forecast}

None.

%%%%% DISTRIBUTION LIST

\subsection{Distribution}

Lemma 1 build system.

\newpage

\section{INTRODUCTION}
\subsection{Scope}
This document contains the module tests associated with the higher-order matching function.
required by \cite{DS/FMU/IED/DTD120} and
implemented in \cite{DS/FMU/IED/IMP120}.
\subsection{Introduction}
\subsubsection{Purpose and Background}
See \cite{DS/FMU/IED/DTD120}.
\subsubsection{Dependencies}
The test material depends on \cite{DS/FMU/IED/DTD013} and \cite{DS/FMU/IED/IMP013}.

\subsubsection{Deficiencies}
None known.
\section{INITIALISATION}
Initialise the test package:
=SML
use_file "dtd013.sml";
use_file "imp013.sml";
init_mt_results ();
=TEX
=TEX
=SML
fun gen_term_fail_msg area num tms = (
	gen_fail_msg area num (map string_of_term tms)
);
=TEX
=SML
open_theory "basic_hol";
new_theory"mdt120";
new_const("II", ”'a ­ 'a®);
=TEX
\section{TEST CASES}


\section{THE TESTS}
\subsection{Group 1: Atoms}
=SML
store_mt_results
mt_run [
("120.simple_ho_match.1.1",
	uncurry (simple_ho_match[]),
		( ¬ x:'a ® , ¬ y:'a ® ),
			([], [(¬x:'a®, ¬y:'a®)]) ),
("120.simple_ho_match.1.2",
	uncurry (simple_ho_match[]),
		( ¬ 1 ® , ¬ 1 ® ),
			([], []) ),
("120.simple_ho_match.1.3",
	uncurry (simple_ho_match[]),
		( ¬ 1 ® , ¬ y ® ),
			([(”î®, ”'a®)], [(¬1®, ¬y:î®)]) )];
=TEX
=SML
store_mt_results
mt_run_fail [
("120.simple_ho_match.1.4",
	uncurry (simple_ho_match[]),
		( ¬ 1 ® , ¬ 2 ® ),
			gen_term_fail_msg "simple_ho_match" 120001 [¬1®, ¬2®] )];

=TEX
\subsection{Group 2: Ì-abstractions}
=SML
store_mt_results
mt_run [
("120.simple_ho_match.2.1",
	uncurry (simple_ho_match[]),
		( ¬ Ìx:'a · x® , ¬ Ìy:'a · y® ),
			([], []) ),
("120.simple_ho_match.2.2",
	uncurry (simple_ho_match[]),
		( ¬ Ìx:'a · x ® , ¬ Ìy : 'a · (p y) : 'b ® ),
			([(”'a®, ”'b®)], [(¬(Ìx· x): 'a ­ 'a®, ¬p:'a ­ 'a®)]) ),
("120.simple_ho_match.2.3",
	uncurry (simple_ho_match[]),
		( ¬ Ìx:î · f x : î ® , ¬ p:'b ® ),
			([(”î ­ î®, ”'b®)], [(¬ Ìx:î · f x : î ®, ¬p:î ­ î®)]) ),
("120.simple_ho_match.2.4",
	uncurry (simple_ho_match[]),
		( ¬ Ìx:î · x + 1 ® , ¬ Ìy:'a· t y:'a ® ),
			([(”î®, ”'a®)], [(¬ Ì x· x + 1 ®, ¬t:î ­ î®)]) )];
=TEX
\subsection{Group 3: applications}
=SML
store_mt_results
mt_run [
("120.simple_ho_match.3.1",
	uncurry (simple_ho_match[]),
		( ¬ (Ìx·x) (Ìx:'a · x) ® , ¬ (Ìy·y)  (Ìy : 'a · (p y) : 'b ) ® ),
			([(”'a®, ”'b®)], [(¬(Ìx· x): 'a ­ 'a®, ¬p:'a ­ 'a®)])  ),
("120.simple_ho_match.3.2",
	uncurry (simple_ho_match[]),
		( ¬ II (Ìx:'a · x) ® , ¬  II (Ìy : 'a · (p y) : 'b ) ® ),
			([(”'a®, ”'b®)], [(¬(Ìx· x): 'a ­ 'a®, ¬p:'a ­ 'a®)])  )];

=TEX
\subsection{Group 4: È-redexes in the pattern}
=SML
=IGN
val s =  ¬ (P : ('a ­ 'b) ­ 'c) X ®;
val t = ¬ ((Ìx·G x) : ('a ­ 'b) ­ 'c) Y®
val (tym, tmm) = simple_ho_match [] s t;
val t1 = inst [] tym t;
val t2 = subst tmm t1;
val t3 = MAP_C Â_conv t2;
val rvars = [¬f : 'a ­ 'b®] : TERM list;
val rvars = [] : TERM list;
val s =  ¬ x : 'a  ®
val t = ¬ X : 'b® ;
simple_ho_match []  ¬ x : 'a  ®  ¬ y : 'b® ;
simple_ho_match []  s  t ;
=SML
fun check_ho_match_results rvars (s, t) = (
	let	val (tym, tmm) = simple_ho_match rvars s t;
		val t1 = inst [] tym t;
		val t2 = subst tmm t1;
		val t3 = snd(dest_eq(concl(TRY_C(MAP_C Â_conv THEN_TRY_C rewrite_conv[È_axiom])t2)));
		val s1 = snd(dest_eq(concl(TRY_C(rewrite_conv[È_axiom])s)));
	in	s1 ~=$ t3
	end
);
=TEX
store_mt_results
mt_run [
("120.simple_ho_match.4.1",
	check_ho_match_results [],
		( ¬ P : 'a ­ 'b  ® , ¬ Ìx· (G : 'b ­ 'a) x® ),
			true ),
("120.simple_ho_match.4.2",
	check_ho_match_results [],
		( ¬ (P : ('a ­ 'b) ­ 'c) X ® ,
		¬ (G : ('a ­ 'b) ­ 'c) (Ìx· H x)® ),
			true  ),
("120.simple_ho_match.4.3",
	check_ho_match_results [],
		( ¬ (P : ('a ­ 'b) ­ 'c) X ® ,
		¬ ((Ìx·G x) : ('a ­ 'b) ­ 'c) Y® ),
			true )];
=IGN

=TEX
\subsection{Group 5: rigid variables}
120.simple_ho_match.5.1.2 below is just to check that this match does not fail for some other reason in 120.simple_ho_match.5.2.2.
=SML
store_mt_results
mt_run [
("120.simple_ho_match.5.1.2",
	check_ho_match_results [¬f : 'a ­ 'b®],
		( ¬ Ìa· (f : 'a ­ 'b)(q x a) ® , ¬Ìx· (f : 'a ­ 'b)(t x)® ),
			true ),
("120.simple_ho_match.5.1.2",
	check_ho_match_results [],
		( ¬ x : 'a  ® , ¬ X : 'b® ),
			true ),
("120.simple_ho_match.5.1.3",
	check_ho_match_results [¬r : î ­ î®],
		( ¬ Ìi· r i + i + 2 ® , ¬Ìx· f x® ),
			true )];
=TEX
120.simple_ho_match.5.2.1 fails because the pattern is not linear unless $f$ is treated as a rigid variable.
=SML
store_mt_results
mt_run_fail [
("120.simple_ho_match.5.2.1",
	uncurry (simple_ho_match []),
		( ¬ Ìa· (f : 'a ­ 'b)(q x a) ® , ¬Ìx· (f : 'a ­ 'b)(t x)® ),
			gen_fail_msg "simple_ho_match" 120001 ["¬Ì a· f (q x a)®", "¬Ì x· f (t x)®"]),
("120.simple_ho_match.5.2.2",
	uncurry (simple_ho_match [¬t : 'b®]),
		( ¬ x : 'a  ® , ¬ X : 'b® ),
			gen_fail_msg "simple_ho_match" 120001 ["¬x®", "¬X®"] )];
=TEX

=TEX
\section{END OF TESTS}
=SML
diag_string(summarize_mt_results());
=TEX
\end{document}







