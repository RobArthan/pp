=IGN
********************************************************************************
dtd033.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design for Theory Lister}  %% Mandatory field
\TPPref{DS/FMU/IED/DTD033}  %% Mandatory field
\def\SCCSversion{$Revision: 2.13 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2008/12/13 14:34:12 $ %
}}
\TPPstatus{Draft}
%\TPPstatus{Approved}
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{R.D.~Arthan & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.B.~Jones & HAT Manager}
\TPPabstract{
This document contains the detailed design for the
theory lister module for ICL HOL.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item [Issues 1.1 - 1.6] Initial drafts.

\item [Issue 2.1 (3rd September 1991)] Approved version of issue 1.6, after desk check ID0050.

\item[Issue 2.2~(\FormatDate{92/01/20})] Updated to use new fonts.
\item [Issue 2.3 (13th April 1992)]
Changes due to CR0017.
\item [Issue 2.4]
Section title now in upper case in \TeX\ listings.
\item [Issue 2.5 (26th May 1992)]
Renamings from version 1.5 of DS/FMU/IED/WRK038.

\item[Issue 2.6 (27 May 1992)]
Change error message 33052.

\item[Issue 2.7 (1 October 1992)]
Add $output_theory1$ function.
\item[Issue 2.8 (25 November 1992)]
Added generic theory lister.
\item[Issue 2.9] Copyright and banner updates for open source release.
\item[Issue 2.10] PPHol-specific updates for open source release
\item[Issue 2.11] HOL now supports left-associative operators.
\item[Issue 2.12--2.14] Added support for nested structures (for new reports in the Compliance Tool).
\end{description}
\subsection{Changes Forecast}
The addition of a cross-referencer, as required by \cite{DS/FMU/IED/HLD008}.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for the theory lister module for ICL HOL.
The high level design for this material is given in \cite{DS/FMU/IED/HLD008}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
As identified in the high-level design document,
\cite{DS/FMU/IED/HLD008}, the user of the HOL system needs a means of listing out in a
readable format the contents of a theory and also means for cross
referencing definitions of objects against there uses in one or more
theories. It is the purpose of this document to meet these requirements.
\subsubsection{Dependencies}
This document is dependent on the pretty printer functions for HOL
defined in \cite{DS/FMU/IED/DTD025}.
\subsubsection{Possible Enhancements}
The theory lister is currently defined not to list out theory status, or anything
to do with theorem level numbers --- since the functional
interfaces of \cite{DS/FMU/IED/DTD012} allow this information to be
extracted when necessary and most users will not wish to see it as a matter
of course. This information could be optionally included under the control
of a system flag.
\subsubsection{Deficiencies}
Interfaces should be supplied allowing the width of screen and \TeX\ fonts
to be declared and the lister should format its listings on the basis
of these widths. As things stand it must use an average figure for the widths.
It may be desirable for user to control the width of the \TeX\ listing.

The cross-referencer is TBA.

\section{DISCUSSION}
\subsection{Theory Lister}
\subsubsection{Information to be Listed}
As described in \cite{DS/FMU/IED/DTD006} and \cite{DS/FMU/IED/DTD012},
an ICL HOL theory acts as a container for information of two sorts:
protected logical information and user-defined data. Within
the ICL HOL system itself, the principal use of the user-defined
data is by the symbol table module, see \cite{DS/FMU/IED/DTD020},
which uses it to implement the various syntactic devices supported
by the ICL HOL concrete syntax. It is the purpose of the theory
lister to enable the user to see a readable representation of
the logical information and of the information managed by
the symbol table module.

It may be seen from \cite{DS/FMU/IED/DTD006} that the logical information
may be collected together under the various sorts of object which
are stored as follows:

{\center
\begin{tabular}{|c|p{4in}|}\hline
Object & Information to be listed \\ \hline\hline

Parent & the name \\\hline
Child & the name \\\hline
Type Constructor & arity of the constructor\\\hline
Constant & type of the constant \\\hline
Definition & the defining theorem (as a sequent) \\\hline
Axiom & the axiom (as a sequent)\\\hline
Theorem & the theorem as a sequent \\\hline
\end{tabular}}

From \cite{DS/FMU/IED/DTD020}, one sees that the symbol table information
is to cover the following the sorts of object listed in the following
table:

{\center
\begin{tabular}{|c|p{4in}|}\hline
Object & Information to be listed \\\hline\hline
\begin{tabular}{c}
Binder \\
Nonfix \\
\end{tabular}
	& the fact that the name is declared as such \\\hline
\begin{tabular}{c}
Infix \\
Postfix \\
Prefix \\
\end{tabular}
	& the fact that the name is declared as such and the numeric precedence \\\hline
Terminator & the fact that the name is declared as such \\\hline
Undeclared Terminator & the fact that the terminator has been undeclared \\\hline
Type Abbreviation & the formal parameters and the type abbreviated \\\hline
Undeclared Type Abbreviation & the fact that the type abbreviation has been undeclared  \\\hline
Alias & the string-type pairs corresponding to the constants for which
the name is an alias \\\hline
Undeclared Alias & the string-type pairs corresponding to the constants for which
this name has had its alias status undeclared \\\hline
\end{tabular}}


In addition, we should list the language of the theory (at least if it is
not HOL).
\subsection{Listing Format}
Experience with earlier HOL systems suggests that use of a tabular layout
for things such as the listing of constants and their types would ease
readability.

A decision to be made with regard to the listing format is whether to list syntactic
status separately or to attempt to include it elsewhere. For example, we might
decorate a constant name in the list of constants and their types with
underscores (and, for binders a `·') indicating where the operands of the
constant go (after the style of Z). Unfortunately we would still need a separate
listing for the names with special status which are not defined as types,
constants etc. Given this consideration, a separate listing of the names
with special status would seem appropriate.

From the previous section, we arrive at a format for
the listing containing the following 14 sections of information about a theory:

\begin{tabular}{|l|l|}\hline
Section & Contents \\\hline
$parents$ & the parents of the theory \\\hline
$children$ & the children of the theory \\\hline
$constants$ & the names and types of the constants \\\hline
$aliases$ & a list of alias names and the corresponding constants \\\hline
$undeclared$ $alias$ & a list of the aliases which have been undeclared \\\hline
$types$ & the names and arities of the types \\\hline
$type$ $abbreviations$ & a list of the type abbreviations and their expansions \\\hline
$undeclared$ $type$ $abbreviations$ & a list of the undeclared type abbreviations \\\hline
$fixity$ & information about fixity declarations \\\hline
$terminators$ & information about terminator declarations \\\hline
$undeclared$ $terminators$ & information about terminator undeclarations \\\hline
$axioms$ & the axioms \\\hline
$definitions$ & the definitions \\\hline
$theorems$ & the theorems \\\hline
\end{tabular}

A rather untypical example exhibiting all 14 sections is given in
section \ref{ExampleListing} below and the reader is invited
to look at it before reading the rest of this section.

A banner line containing the theory
name appears at the beginning of the listing.
Each section is preceded by a header indicating what is to follow.
Sections in which there is nothing to be listed will be omitted.
The end of the listing is marked by a trailer line (which like the banner
contains the theory name).

The fixity section is organised into subsections according to fixity
and precedence (see the example in section \ref{ExampleListing} below).

Every section of the table is laid out in two horizontal
fields: a fairly narrow left-hand
{\em label}
field typically containing some form of label and a right-hand
{\em value} field
filling the rest of the width containing a table or a value like a theorem.

The label
field (two tab stops wide in the example) is empty in sections, such
as $parents$ which just contain lists of names. In the fixity section,
which essentially contains lists of names labelled by fixity information,
the left-hand field contains the fixity information. In other sections
the left-hand field is used for the name or names of the object of
interest (e.g. the name of a constant or the names of a definition).

The value field either contains a single value such as a type or a theorem,
or, in the case of
$parents$, $children$, $fixity$, $terminators$, and $undeclared$ $terminator$
contains a multicolumn table.
Each such table is given column widths sufficiently
wide to accommodate the widest name in the table.
The value field is empty in the case of the $types$ section, since all the
relevant information there is contained in the displayed instance of the
type (which is put in the label field rather than the value field for
uniformity with the $constants$ section).

The width of the left-hand field is under user control via
a system control variable, $listing\_indent$. The overall width of the listing
as displayed on the screen is
governed by the $line\_length$ control variable described in
\cite{DS/FMU/IED/DTD001}.

The user may ask for lists of items to be sorted alphabetically
using a system control flag. The lists in the fixity
section are always sorted, since the organisation by precedence value
means that no other order is useful (and in any case the order of the fixity
declarations has no impact, unlike, say, constant definitions).

\subsection{Example Listing}\label{ExampleListing}
The following is an example of the screen format of a theory listing.
=GFT
 === The Theory "lots" ===

--- Parents ---

		More		Other		Again		Dull

--- Children ---

		Fred		Jim		Jill		Jack
		John

--- Constants ---

$+_real:	real ­ real ­ real
$-_real:	real ­ real ­ real
$*_real:	real ­ real ­ real
$/_real:	real ­ real ­ real

--- Aliases ---

$+		$+_real : real ­ real ­ real
$-		$-_real : real ­ real ­ real
$*		$*_real : real ­ real ­ real
$/		$/_real : real ­ real ­ real

--- Undeclared Aliases ---

$+		$+_rat : rat ­ rat ­ rat

--- Types ---

:î
:real
:('a)isos
:'a à 'b

--- Type Abbreviations ---

('a)auto	'a ­ 'a
('a, 'b)dis_union
		'a + 'b
('a)seq		î ­ 'a
real_seq	î ­ real

--- Undeclared Type Abbreviations ---

		ab1		ab2

--- Fixity  ---

Binder:		RiemannIntegral
			CauchyIntegral
Infix 100:	à
Infix 200:	+		-
Infix 300:	*		/
Nonfix: 		,
Postfix 500:	!
Prefix 400:	~

--- Terminators ---

		+		*		-		/

--- Undeclared Terminators ---

		=		¸

--- Axioms ---

nasty_axiom1	ô A horrid pack of lies

--- Definitions ---

real		ô The definition of the type of reals
+
-		ô µ x y:real· A long and complicated definition of real addition
		and subtraction spreading over several lines
		containing perhaps ($+) ($-)
*		ô µ x y:real· A short definition of real multiplication
/		ô µ x y:real· A short definition of real division

--- Theorems ---

+_comm_thm	ô µ x y:real· x + y = y + x
+_*_distributive_thm
		ô µ x y:real· a *(x + y) = a * x + a * y
long_and_boring_thm
		ô A very long and uninteresting theorem with large numbers of
		horrors in it and spreading over, er?, well let's see, ah! yes!
		all of three lines.
asm_thm	This,
		Theorem has,
		Assumptions,
		Some of them being quite long so they won't fit on one line
		ô But its conclusion is quite short.

 === End of listing of theory "lots" ===
=TEX

\subsection{Message Definitions}

The following message definitions are used to achieve the above format:

=FAILURE
33001	The theory ?0
33002	Parents
33003	Children
33004	Constants
33005	Aliases
33006	Types
33007	Type Abbreviations
33008	Fixity
33009	Terminators
33010	Axioms
33011	Definitions
33012	Theorems
33013	Undeclared Aliases
33014	Undeclared Type Abbreviations
33015	Undeclared Terminators
33020	Binder:
33021	Left Infix ?0:
33022	Right Infix ?0:
33023	Nonfix:
33024	Postfix ?0:
33025	Prefix ?0:
33030	End of listing of theory ?0
33031	THE THEORY ?0
=TEX


\subsubsection{Interface with \TeX}
To interface the lister with \TeX, the lister produces a file containing
the theory listing interleaved with {\tt screen} (see \cite{DS/FMU/IED/USR001})
directive lines to distinguish the various parts of the listing.
The directives used are shown in the following table:

\begin{tabular}{|l|p{3in}|}\hline
Directive & Purpose \\\hline
{\tt =THEORYLISTINGBANNER} & The header at the beginning of the listing\\\hline
{\tt =THEORYLISTINGSECTION} & A section header\\\hline
{\tt =THEORYLISTINGTABLE} & A section in which the value column contains
a multicolumn table\\\hline
{\tt =THEORYLISTINGOTHER} & A section in which the right-hand column contains
individual values like theorems\\\hline
{\tt =THEORYLISTINGTRAILER} & The trailer line at the end of the listing\\\hline
{\tt =TEX} & This directive marks the end of a piece of text introduced
by one of the other directives\\\hline
\end{tabular}

A tab character is used to separate the label and value fields and to
separate the columns of a multicolumn table.

\subsection{Theory Cross-referencer}
TBA
\section{PROLOGUE}
=DOC
signature Lister = sig
=DESCRIBE
This is the signature of the structure $Lister$ which contains functions
for listing theories.
=ENDDOC
\section{THEORY LISTER}
=DOC
val Ûprint_theoryÝ : string -> unit
=DESCRIBE
$print\_theory\,thy$ causes a listing of the theory $thy$ to be written to
the standard output. The listing is in a format suited for display on
the screen. The theory must be in scope, i.e. it must be
the current theory or one of its ancestors.
=FAILURE
33050	The theory ?0 is not in scope
33051	There is no theory called ?0
=SEEALSO
$output\_theory$
$output\_theory1$
=ENDDOC

=DOC
val Ûoutput_theoryÝ : {theory:string, out_file:string} -> unit
=DESCRIBE
$output\_theory\{theory=thy, out_file=file\}$ causes a listing of the theory
$thy$ to be output to the file $file$. The listing is in a format suited
for printing using the ICL HOL document preparation system.
The theory must be in scope, i.e. it must be
the current theory or one of its ancestors.
=SEEALSO
$output\_theory1$
$print\_theory$
=FAILURE
33050	The theory ?0 is not in scope
33051	There is no theory called ?0
33101	i/o failure on file ?0 (?1)
33102	the theory ?0 does not exist
=ENDDOC

=DOC
val Ûoutput_theory1Ý : {theory:string, out_file:string} -> unit
=DESCRIBE
$output\_theory1\{theory=thy, out_file=file\}$ causes a listing of the
theory $thy$ to be output to the file $file$.  The listing is in a
format suited for display on the screen or for viewing with a text
editor.  The theory must be in scope, i.e. it must be the current
theory or one of its ancestors.
=SEEALSO
$output\_theory$
$print\_theory$
=FAILURE
33050	The theory ?0 is not in scope
33051	There is no theory called ?0
33101	i/o failure on file ?0 (?1)
33102	the theory ?0 does not exist
=ENDDOC

=DOC
(* Ûsorted_listingsÝ		- flag - default false *)
(* Ûlisting_indentÝ		- integer - control default 2 *)
=DESCRIBE
These two system control variables influence the behaviour of
the functions $list\_theory$ and $output\_theory$ which are used
to generate theory listings.
If $sorted\-\_listings$ is false (the default) then items are
unsorted, otherwise they are sorted according to $string\_order$ (q.v.).
$listing\_indent$ sets the indent level of the listings in terms of a number of tabstops, and its default is 2.
=FAILURE
33052	integer control `?0` must be greater than zero
=SEEALSO
$output\_theory$
=ENDDOC

\section{THEORY CROSS-REFERENCER}

\section{EPILOGUE}
=SML
end; (* of signature Lister *)
=TEX
\section{THE GENERIC THEORY LISTER}
=DOC
signature ÛListerSupportÝ = sig
datatype ÛLISTER_SECTIONÝ =
	ÛLSBannerÝ	|	ÛLSParentsÝ		|	ÛLSChildrenÝ
|	ÛLSConstsÝ	|	ÛLSAliasesÝ		|	ÛLSUndeclaredAliasesÝ
|	ÛLSTypesÝ	|	ÛLSTypeAbbrevsÝ	|	ÛLSUndeclaredTypeAbbrevsÝ
|	ÛLSFixityÝ	|	ÛLSTerminatorsÝ	|	ÛLSUndeclaredTerminatorsÝ
|	ÛLSAxiomsÝ	|	ÛLSDefnsÝ		|	ÛLSThmsÝ
|	ÛLSTrailerÝ
|	ÛLSADStringÝ of string -> (string list * string)
|	ÛLSADStringsÝ of string -> (string list * string list)
|	ÛLSADThmsÝ of string -> (string list * THM) list
|	ÛLSADTermsÝ of string -> (string list * TERM) list
|	ÛLSADTypesÝ of string -> (string list * TYPE) list
|	ÛLSADTablesÝ of string -> (string list * string list) list
|	ÛLSADSectionÝ of string -> string
|	ÛLSADNestedStructureÝ of string -> (string * LISTER_SECTION list);
=DESCRIBE
{\em ListerSupport} is the signature of a structure containing a functions, {\em gen\_theory\_lister} and {\em gen\_theory\_lister1}  for creating
variant theory listers, e.g. for languages other than \ProductHOL.
The data type {\em ListerSupport.LISTER\_SECTION} controls what is listed.
Each constructor of this type determines an element of the listing. The first block
of constructors for the type
=INLINEFT
LISTER_SECTION
=TEX
\ cause sections of the listing like those produced by the HOL theory
lister to be included (except that $LSBanner$ uses the first argument
to $print$, $output$, or $output1$ to compute the contents of the banner
heading.) The second block of constructors are for creating
application-defined sections of the listing and in each case the constructor takes
as its operand a function which is passed the name of the theory
being listed as argument. $LSADSection$ produces a section header containing
the result of applying the argument function to the theory name unless that
result is an empty string, in which case it has no effect. The others are for printing
(labelled) individual strings ($LSADString$) or columns of strings ($LSADStrings$), or (labelled) lists of theorems, terms, types or rows of strings ($LSADTables$).
In each case the first component of (each element of) the result is used as a
list of labels for the elements and is printed in the left margin and
the second component is indented.
=ENDDOC
=DOC
val Ûgen_theory_listerÝ : LISTER_SECTION list ->
	{	print: (string -> string) -> string -> unit,
		out: (string -> string) -> {theory: string, out_file: string} -> unit,
		out1: (string -> string) -> {theory: string, out_file: string} -> unit};
val Ûgen_theory_lister1Ý : LISTER_SECTION list ->
	{	print: (string -> string) -> string -> unit,
		out: (string -> string) -> {theory: string, out_file: string} -> unit,
		out1: (string -> string) -> {theory: string, out_file: string} -> unit};
end (* of structure ListerSupport *) (* of structure ListerSupport *);
=DESCRIBE
{\raggedright
The functions
=INLINEFT
ListerSupport.gen_theory_lister
=TEX
\ and
=INLINEFT
ListerSupport.gen_theory_lister1
=TEX
\ are used to create customised theory listers and can also be
used to create formatted listings of other kinds.

}

They return a triple of functions each of which has as its first argument
a function to compute the contents of the banner line in the listing
from the name of the theory name. Given such an argument, the three
components, $print$, $out$, and $out1$ deliver results which
behave very much like
=INLINEFT
print_theory
=TEX
,
=INLINEFT
output_theory
=TEX
\ and
=INLINEFT
output_theory1
=TEX
, respectively, as regards where they send the listing and whether or
not they insert \LaTeX\ formatting controls in it, but what they put
in the listing is determined by the argument to
=INLINEFT
gen_theory_lister
=TEX
.
This argument is a list of elements of type {\em LISTER\_SECTION}, q.v.

The integer control
=INLINEFT
listing_indent
=TEX
and the flag
=INLINEFT
sorted_listings
=TEX
\ control the print of labelled lists of theorems, terms etc.
=INLINEFT
listing_indent
=TEX
\ gives the number of spaces of indent from the left margin of the lists.
If
=INLINEFT
sorted_listings
=TEX
\ is true, the lists will be sorted using the concatenation of the labels
as the sort key otherwise they are printed in the order supplied.

{\em gen\_theory\_lister1} is just like {\em gen\_theory\_lister}
except that it does not check whether the theory exists or whether it is in scope.
=ENDDOC
=TEX
\section{TEST POLICY}
The symbol table functions are to be tested according to the
general criteria laid down in the quality plan, \cite{DS/FMU/IED/PLN008}.
The automated module tests will only be able to test a limited amount
of the functionality. The important matter of checking the displayed and
printed format of the listings must be done by human
inspection in the integration testing.
\small
\twocolumn[\section{INDEX}]
\printindex

\end{document}


