=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
\TPPtitle{Detailed Design for Tactics II}
\TPPref{DS/FMU/IED/DTD028}  %% Mandatory field
\def\SCCSversion{$Revision$
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{91/03/11 %
}}  %% Mandatory field
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{K.~Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.Arthan & FST Team Leader}
\TPPabstract{This document gives a detailed design for the 
second group of tactics and tacticals in ICL HOL.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Project Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{Document control}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history}
\begin{description}
\item [Issue \SCCSversion (\FormatDate{$Date$%}
})]
First draft issue (incorporating much of former DS/FMU/IED/DTD009).
\end{description}
\subsection{Changes forecast}
As determined by comments and review.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for the 
second group of tactics and tacticals for ICL HOL.
This group is mainly concerned with supplying support for predicate calculus
connectives (including boolean conditionals but not boolean let expressions).
This is called for in \cite{DS/FMU/IED/HLD009}.
The design is implemented in \cite{DS/FMU/IED/IMP028}.
\subsection{Introduction}
The second group of tactics and tacticals is mainly concerned with supplying support for predicate calculus
connectives (including boolean conditionals but not boolean $let$-expressions).
The main objective is to supply adequate goal, theorem
and assumption stripping tactics and tacticals (sufficiently
powerful to prove all tautologies). These and the other tactics defined
here may then be used to construct the rewriting tactics and
the elementary theory of pairs and so enable the set of
and tactics (and supporting rules)
which handle paired abstractions and the other term constructs
which are not covered here.

This document contains first of all a general discussion of some of
the design issues and decisions concerning the tactics and tacticals
(section \ref{GENERALREMARKS}.
Section \ref{THETACTICSANDTACTICALS} then contains the specifications
of the tactics and tacticals, starting with the important tactics
which relate to stripping goals and theorems and then giving those
which relate to particular predicate calculus connectives.

\subsubsection{Purpose and Background}
Study material which relates to the coverage of the tactics and tacticals
may be found in \cite{DS/FMU/IED/WRK013} and
\cite{DS/FMU/IED/WRK014}.

The section of general remarks in the document describing the more
elementary tactics, \cite{DS/FMU/IED/DTD009} also apply to this document.

\subsubsection{Dependencies}
Loading this document is dependent on \cite{DS/FMU/IED/IMP009}.

=TEX
\section{GENERAL REMARKS}\label{GENERALREMARKS}
\subsection{Coverage}
We wish to supply tactics which correspond
to (a useful subset of) the inference rules for the predicate
calculus connectives given in \cite{DS/FMU/IED/DTD007}. Here by
predicate calculus connective we mean one of the following:

Û
Ä, Å, ä, Ç, å, (if ... then ... else):BOOL, É, Ñ, T, F
Ê

It would be perfectly feasible to handle boolean $let$-expressions
as well. However, it is considered more appropriate to let the
user explicitly control the expansiom of local definitions rather than
make the general purpose predicate calculus tactics expand them automatically
(and thereby run a risk of making the user's goal large and incomprehensible) 

In general, for each connective, $con$, (and also for some combinations of
connectives, e.g. $Ç\_T$), we supply:

\begin{enumerate}
\item
a tactical, $con\_T$, which takes one or more theorem tactic arguments,
and which may be used to attack a goal whose principal connective is
$con$ by inverting the introduction rule for $con$ to give one or more
subgoals. The theorem tactic arguments are then applied to the new assumptions
introduced in the subgoals in an attempt to further simplify them.
E.g. $ä\_T\,thmtac$ is a tactic which works on a goal with conclusion of the
form $t1ät2$ by applying $thmtac(t1Öt1)$ to a goal with the same assumptions
and with conclusion $t2$;
\item
a theorem tactical, $con\_THEN$, which helps to use a theorem with $con$
as its principal connective by using the elimination rule for
$con$ to simplify the goal.
E.g. $Ñ\_THEN\,thmtac$ is a theorem tactic which uses a theorem
of the form $ÖÑxét$ by applying $thmtac(t Ö t)$ to the goal and composing
the resulting proof with the existential elimination rule;
\item
a tactic, $con\_tac$, which is $con\_T\,strip\_asm\_tac$.
\end{enumerate}

Every connective has a $con\_tac$ but
$con\_T$ and $con\_THEN$ are not always supplied. E.g. $con\_T$ is only
supplied for connectives for which the introduction rule eliminates some
assumptions (i.e. introduces assumptions when inverted), so, for instance, $É\_T$
is not needed.

N.B. $con\_tac$ or $con\_T$, may well not be the best way of handling a
goal whose principal connective is $con$. E.g. negation is usually best
handled by moving the negation inside other connectives rather than by
attempting a proof inverting negation introduction (which amounts to the
variant of proof by contradiction in which one $Ö åa$ by demonstrating
that $a Ö b$ and $a Ö åb$ for some suitable choice of $b$).

\subsection{Strengthening}
The phrase ``N.B. loses information.'' in a tactic description
indicates that the tactic strengthens the goal to be proved,
by losing some information that \underline{might} have been necessary
to complete the proof.
This is, of course, a standard proof approach, but it is worth knowing when
such tactics have been used to correctly interpret the state of
having reached an unprovable goal - does it indicate that the main
goal is unprovable, or just that an incorrect choice of proof has been made.
All information-losing tactics will be noted.


\subsection{Stripping Goals, Theorems and Assumptions}\label{StrippingGoalsTheoremsandAssumptions}
One of the most important purposes of the present design is to
supply the tacticals which are used to strip goals
and theorems. These tacticals support some common
techniques for proving goals or using theorems within
tactic proofs in a uniform fashion.
For example, if a goal of the form $\{ˆ\}a Ä b$ is almost always
proved by reducing it to $\{ˆ\}a$ and $\{ˆ\}b$, and, dually, a theorem of
the form $Ö a Å b$ is almost always used to do a case split.

Very commonly the theorem stripping techniques are used to strip up theorems
corresponding to new assumptions introduced by a tactic. For example,
the obvious way of proving a goal of the form $\{ˆ\}(a Å b) ä c$
is to reduce it to two subgoals  $\{ˆ\}a ä c$ and $\{ˆ\}b ä c$. A uniform
means of performing this type of reduction is to have the tactic which strips
a goal of the form $\{ˆ\}t1 ä t2$ pass the theorem $t1 Ö t1$ to the theorem
stripper which then decomposes $t1 Ö t1$ into primitive constituents, performs any
relevant case splits and passes the primitive constituents on to a suitable
theorem tactic (typically $asm\_tac$). A more precise definition of
how this is done may be found in the following subsections.

The goal stripping techniques are packaged as a tactical
$STRIP\_GOAL\_T$ whose argument is a theorem tactic which
is used to process any new assumptions which may arise from stripping
the goal. The theorem stripping techniques are packaged as a thoerem
tactical $STRIP\_THM\_THEN$. The actual capabilities of
$STRIP\_GOAL\_T$ and $STRIP\_THM\_THEN$ are determined by assignable
variables containing lists of proof procedures to be attempted on a
given goal or a theorem. This allows applications specific transformations
to be handled in a uniform manner with the predicate calculus transformations
dealt with here.

\subsubsection{Stripping Goals}
Schematically, the effect on a goal of the goal stripping capabilities
supplied here is as follows:

Û
É_tac		({ˆ}, Éxét)			ã	({ˆ}, t)

Ä_tac 		({ˆ}, t1 Ä t2)			ã	({ˆ}, t1) ; ({ˆ}, t2)

Å_tac		({ˆ}, t1 Å åt2)			ã	({ˆ}, t2 ä t1)
Å_tac		({ˆ}, t1 Å t2)			ã	({ˆ}, åt1 ä t2)


ä_T ttac	({ˆ}, t1 ä t2)			ã	ttac(t1 Ö t1) ({ˆ}, t)

Ç_T ttac	({ˆ}, t1 Ç t2)			ã	ttac(t1 Ö t1) ({ˆ}, t2);
							ttac(t2 Ö t2) ({ˆ}, t1)

IF_T ttac	({ˆ}, if a then t1 else t2)	ã	ttac(a Ö a)({ˆ}, t1) ;
						 	ttac(åa Ö åa)({ˆ}, t2)

å_tac		({ˆ}, åt)			ã	({ˆ}, rhs(å_conv(åt)))

t_tac		({ˆ}, T)			ã	[]

goal_in_asms_tac	({ˆ, t}, t)		ã	[]
Ê
where $[]$ denotes an empty list of subgoals, i.e. the tactic
proves the goal, 
and where $å\_conv$ is a conversion which moves negations over the
other connectives, i.e. it proves theorems of the following forms:

Û
	Ö	ååt		= t
	Ö	å(t1 Ä t2)	= åt1 Å åt2
	Ö	å(t1 Å t2)	= åt1 Ä åt2
	Ö	å(t1 ä t2)	= t1 Ä åt2
	Ö	å(t1 Ç t2)	= (t1 Ä åt2) Å (t2 Ä åt1)
	Ö	åÉxét		= Ñxéåt
	Ö	åÑxét		= Éxéåt
	Ö	åÑ∞xét		= Éxéå(t Ä Éx'ét[x'] ä x' = x)
	Ö	åT		= F
	Ö	åF		= T
Ê

(Note also that in the present document we do not deal with paired abstractions
so that $Ñ\_tac$ and $å\_tac$ are supplied as $simple\_Ñ\_tac$ and $simple\_å\_tac$.)

$STRIP\_GOAL\_T\,ttac$ (as set up here) is a tactic which applies
the first of the above tactics which applies to the goal.

Each of the above stripping tactics is an equivalence transformation
(in the sense that the original goal is valid iff. all of the subgoals indicated
are valid). If we also assume that the theorem tactic $ttac$ above always
either achieves its goal or produces one or more subgoals with a possibly
increased stock of assumptions but the same conclusion, then we see that
iteration of these stripping tactics will always terminate
and result in a conclusion of one of the following forms (which we will
call {\em conclusion literals} in the discussion in this document):

Û
	Ñxét
	Ñ∞xét
	F
	åa
	a
Ê

where the principal connective of $a$ is not one of our predicate calculus
connectives.

\subsubsection{Stripping Theorems}

The theorem stripping capability supplied here may be shown schematically
as follows:
Û
Ä_THEN ttac (Ò Ö a Ä b)	({ˆ} t)		ã (ttac (Ò Ö a) THEN ttac (Ò Ö b)) ({ˆ} t)
Å_THEN ttac (Ò Ö a Å b)	({ˆ} t)		ã ttac (a Ö a) ({ˆ} t) ; ttac (b Ö b) ({ˆ} t)
ä_THEN ttac (Ò Ö a ä b) ({ˆ} t)		ã ttac (Ò Ö åa Å b) ({ˆ} t)
Ç_THEN ttac (Ò Ö a Ç b)({ˆ} t)		ã (ttac (Ò Ö a ä b) THEN ttac (Ò Ö b ä a)) ({ˆ} t)
IF_THEN ttac (Ò Ö if a then b else c)
				({ˆ} t)		ã (ttac (Ò Ö a ä b) THEN ttac (Ò Ö åa ä c)) ({ˆ} t)
å_THEN ttac (Ò Ö åa)	({ˆ} t)		ã ttac (Ò Ö rhs(å_conv(åa))) ({ˆ} t)
Ñ_THEN ttac (Ò Ö Ñx.a)	({ˆ} t)		ã ttac (a[x`/x] Ö a[x'/x]) ({ˆ} t)
Ñ∞_THEN ttac (Ò Ö Ñ∞x.a)	({ˆ} t)		ã Ñ_THEN ttac (Ò Ö Ñx.a Ä Éyéa[y] ä y = x)({ˆ} t)
Ê

where $a[x'/x]$ denotes $a$ with $x'$ substituted for $x$ with $x'$ a
variable which does not appear free anywhere in the theorem or the goal.

(The negation and existence theorem tacticals defined here are
$SIMPLE\_$ versions since we do not handle paired abstractions here.)

$STRIP\_THM\_THEN$ (as set up here) is a theorem tactical which applies
the first of the above theorem tacticals which applies to the
given theorem.

Each of the above theorem tacticals is an equivalence transformation
in the sense that if applications of the theorem tactic $ttac$ do not
lose any information then neither does its transform under the theorem
tactical. Morever if we repeatedly apply the above theorem tacticals
we will ultimately apply $ttac$ to theorems with conclusions having
one of the following forms (which we will call {\em assumption literals}
in the discussion below):

Û
	Éxét
	T
	F
	åa
	a
Ê
where the principal connective of $a$ is not one of our predicate
calculus connectives.

\subsubsection{Stripping Assumptions}

$strip\_asm\_tac$ is a theorem tactic which repeatedly applies the
above theorem tacticals to a theorem tactic $check\_asm\_tac$ which
acts as follows:

Û
check_asm_tac (Ò Ö T) ({ˆ} t)		ã ({ˆ} t)
check_asm_tac (Ò Ö F) ({ˆ} t)		ã []
check_asm_tac (Ò Ö åa) ({ˆ, a} t)		ã []
check_asm_tac (Ò Ö a) ({ˆ, åa} t)		ã []
check_asm_tac (Ò Ö a) ({ˆ} t)			ã ({a, ˆ}, t)
Ê

where $[]$ denotes an empty list of subgoals, i.e. the tactic proves
the goal.

\subsubsection{$strip\_tac$}
The general purpose stripping tactic $strip\_tac$ is now
defined as $STRIP\_GOAL\_T\,strip\_asm\_tac$. From our observations
above on the goal and theorem stripping facilities this uses, we see that
repeated application of $strip\_tac$ reduces any goal to an equivalent collection
of subgoals each of which may be obtained from the original goal by (a)
replacing the conclusion by a conclusion literal and (b) adding zero or
more assumption literals to the assumptions.
Moreover, within each of the subgoals, each new assumption
will be distinct from any other assumption
and from the negation of any other assumption and from the conclusion.

As we will see in the next section the stripping tactic we offer the user
actually goes further then is needed to prove all tautologies (too far, in
fact --- it will not prove certain substitution instances of tautologies in which
a quantified subterm appears both positively and negatively).
However, it does not go to the extreme of putting the goal into a clausal form
(e.g. as might be represented by a collection of goals all of which had
$F$ as the conclusion and had assumptions comprising universally quantified
disjunctions of propositional literals).

The form of goal is considered to be a convenient
compromise between the two extremes, in that it simplifies
existentially quantified assumptions and universally quantified conclusions
without rendering the goal incomprehensible to the interactive user.
A resolution-style tactic could sensibly start from a goal in this form, either
by continuing to reduce to clausal form (for a fully automatic proof) or
by just doing some propositional calculus normalisations
of the assumptions to derive obvious immediate consequences of the assumptions
in a form which was still comprehensible.

\subsubsection{$taut\_tac$}
By using a subset of the stripping techniques discussed in the
previous sections, a tactic which will prove any goal whose
conclusion is a substitution instance
of a tautology may be produced. (Here we define a {\em tautology} to be 
a term formed from propositional variables and the propositional constants
$T$ and $F$ using the non-quantifying predicate calculus connectives, which
is true for any assignment of truth values to the propositional variables).

To see this, consider (without loss of generality) the case when the original goal
has no assumptions and observe that by applying only transformations
for the non-quantifying connectives we will reduce any goal to
an equivalent collection of subgoals in which each conclusion and each assumptions is
what we shall call  a {\em propositional literal}, i.e.
either a {\em propositonal atom} ---  a term which has a quantifier or a
non-predicate calculus connective as principal connective ---
or the negation of such a propositional atom.
Moreover, each subgoal, $\{ˆ\}t$ say is {\em (a)} such that no assumption
$a ù ˆ$ is $\alpha$-convertible with $t$ or with the negation of
any other assumption in that subgoal or with $T$, $F$, $åT$ or $åF$,
and  {\em (b)} such that $t$ is not $T$ or $åF$ or $åT$.

Now assume that the original goal had a tautology as its conclusion.
In this case, each subgoal produced by the stripping process of the previous paragraph
must be true with respect to any (consistent) assignment of truth values
to the non-constant propositional
atoms which appear (possibly negated) as its conclusion or in its assumptions.
I claim that no subgoal of the form discussed
in the previous paragraph can be true with respect to all such assignments.
For, there are two possibilities: either, (a), the
subgoal has the form $\{ˆ\}F$, in which case, as no assumption $a ù ˆ$
also appears negated in $ˆ$, we can choose an assignment which makes all the assumptions true and so make the subgoal false,
or, (b), the subgoal has the form $\{ˆ\}t$ or $\{ˆ\}åt$
where $t$ is not a propositional constant, but then, as no assumption is
$\alpha$-convertible with the conclusion $t$ or $åt$, we can choose
an assignment which makes each assumption true, makes the conclusion
false and so makes the subgoal false.
It follows that as the original goal had a tautology as its conclusion
then the stripping process of the previous paragraph must result in an
empty collection of subgoals, i.e. it will prove the original goal. 

\subsection{Introduction of New Assumptions}
Many of the tactics $con\_tac$ (where $con$ stands for some predicate calculus
connective) naturally introduce additional assumptions. For example,
$ä\_tac$ might reduce $\{ˆ\}a ä b$ to $\{a, ˆ\} ä b$. However, in the
majority of cases it is best to strip up the new assumptions as described
in section \ref{StrippingGoalsTheoremsandAssumptions} before adding them
to the assumptions. Note that, in general, this may cause case splits.

For ease of use, therefore, the tactics $con\_tac$ which
introduce new assumptions will always strip the assumptions. 
I.e. $con\_tac$ will be implemented as $con\_T\,strip\_asm\_tac$.
In the more specialised cases where stripping is not required the user may use
$con\_T\,asm\_tac$ to achieve the desired effect.

To describe such a tactic we use the notation $strip(\{a, ˆ\}t)$ to denote
$strip\_asm\_tac(a Ö a) (\{ˆ\}t)$.

\section{THE TACTICS AND TACTICALS}\label{THETACTICSANDTACTICALS}
=DOC
signature ‚Tactics2· = sig
=DESCRIBE
This provides the second group of tactics and tacticals in ICL HOL.
These are mainly concerned with the predicate calculus.
=ENDDOC
=SML
local
	open Tactics1
in
=TEX
\subsection{Stripping Tactics and Tacticals}
(Errors in this section begin with 281).
=DOC
val ‚strip_tac· : TACTIC;
=DESCRIBE
$strip\_tac$ is a general purpose tactic for simplifying the outermost
connective or combination of a goal by applying the first applicable
member of a collection of tactics which will normally include at least
the following:
Û
É_tac		Ä_tac 		Å_tac		ä_T ttac,		Ç_T ttac
IF_T ttac,	å_tac		t_tac		goal_in_asms_tac
Ê

Any new assumptions generated by the tactic are processed using
$strip\_asm\_tac$. Thus $strip\_tac$ may produce large numbers of
subgoals or may prove the goal. 

The usual setup for $strip\_tac$ implies that it will prove most
tautologies automatically. It will, however, 
not succeed in proving some tautologies involving positive and
negative instances of a quantified subterm.
=USES
This is the usual way of simplifying a goal involving predicate
calculus conectives.
=SEEALSO
$strip\_asm\_tac$, $taut\_tac$, $STRIP\_GOAL\_T$, $STRIP\_THM\_THEN$
=FAILURE
28101	no appropriate stripping tactic for this form of goal
=ENDDOC
=DOC
val ‚strip_asm_tac· : THM -> TACTIC;
=DESCRIBE
$strip\_asm\_tac$ is a general purpose tactic for splitting a theorem up
into useful pieces using a range of
simplification techniques before using it to increase the stock of assumptions.
The simplification techniques applied will always include the
ones discussed below
(and may be extended using $set\_strip\_thm\_thens$ q.v).

Using $sat$ as an abbreviation for $strip\_asm\_tac$ we may show the
simplifications which do not involve negations or a case split
as follows:
Û
sat (Ö a Ä b) 			ã sat (Ö a) THEN sat (Ö b)
sat (Ö a ä b)			ã sat (Ö åa Å b)
sat (Ö a Ç b) 			ã sat (Ö a ä b) THEN sat (Ö b ä a)
sat (Ö if a then b else c)	ã sat (Ö a ä b) THEN sat (Ö åa ä c)
sat (Ñx.a)			ã sat (Ö a[x`/x] Ö a[x'/x])
sat (Ñ∞x.a)			ã sat (Ö Ñx.a Ä Éyéa[y] ä y = x))
Ê

Negations are handled by rewriting with the one of the following theorems.
Û
Ö	ååt		=	t
Ö	å(t1 Ä t2)	=	åt1 Å åt2
Ö	å(t1 Å t2)	=	åt1 Ä åt2
Ö	å(t1 ä t2)	=	t1 Ä åt2
Ö	å(t1 Ç t2)	=	(t1 Ä åt2) Å (t2 Ä åt1)
Ö	åÉxét		=	Ñxéåt
Ö	åÑxét		=	Éxéåt
Ö	åÑ∞xét		=	Éxéå(t Ä Éx'ét[x'] ä x' = x)
Ö	åT		=	F
Ö	åF		=	T
Ê

Finally if the theorem has a disjunctive conclusion the action
of $strip\_asm\_tac$ may be shown schematically as follows:
Û
sat (Ö a Å b)({ˆ} t)		ã sat (a Ö a) ({ˆ} t) ; sat (b Ö b) ({ˆ} t)
Ê

i.e. $strip\_asm\_tac$ does a case split resulting in two subgoals when
it processes a disjunction.

After all of the available simplification techniques have been attempted
$strip\_asm\_tac$ then proceeds as $check\_asm\_tac$ to use the simplified theorem
either to prove the goal or to generate additional assumptions.
=SEEALSO
$check\_asm\_tac$, $strip\_tac$, $STRIP\_THM\_THEN$
=ENDDOC
=DOC
val ‚check_asm_tac· : THM -> TACTIC;
=DESCRIBE
$check\_asm\_tac\,thm$ is a tactic which checks the form of the theorem, $thm$,
and proceeds as follows:

{\centering
\begin{tabular}{|l|p{4in}|}\hline
$thm$ & action \\ \hline
$ˆ Ö T$ & as $id\_tac$ \\ \hline
$ˆ Ö F$ & proves goal\\ \hline
$ˆ Ö åt$ & proves goal if $t$ in assumptions, else as $asm\_tac$\\ \hline
$ˆ Ö t$ & proves goal if $åt$ in assumptions, else as $asm\_tac$\\ \hline
\end{tabular}}

=USES
Specialised tactic programming.
=SEEALSO
$strip\_asm\_tac$, $strip\_tac$.
=ENDDOC
=DOC
val ‚STRIP_THM_THEN· : THM_TACTICAL;
=DESCRIBE
$STRIP\_THM\_THEN$ provides a general purpose way of
stripping theorems into primitive constituents before
using them in a tactic proof.
It is equivalent to $FIRST\_TTCL$ $ttcls$ where
$ttcls$ is the list of theorem tacticals maintained
by $set\_strip\_thm\_thens$ and $get\_strip\_thm\_thens$ q.v.. In the supplied
system this list comprises at least the following theorem tacticals:
Û
Ä_THEN,		ä_THEN,		 Å_THEN,	å_THEN,		Ç_THEN,
Ñ_THEN,		Ñ%down%1_THEN, 	IF_THEN
Ê
=USES
Specialised tactic programming.
=SEEALSO
$strip\_asm\_tac$, $strip\_tac$.
=ENDDOC
=DOC
val ‚STRIP_GOAL_T· : (THM -> TACTIC) -> TACTIC;
=DESCRIBE
$STRIP\_GOAL\_THEN\,ttac$ is a general purpose way of stripping
goals and passing any new assumptions generated by the stripping
to a tactic generating function.
It is controlled by a list of tactic generating functions maintained
by $set\_strip\_goal\_ts$ and $get\_strip\_goal\_ts$ q.v..
$STRIP\_GOAL\_THEN\,ttac$ will normally return the first applicable
tactic in a list of tactics including at least the following:

Û
É_tac,		Ä_tac,		ä_T ttac,	Ç_tac,
å_in_tac,	Å_tac		IF_T ttac, 	t_tac,
goal_in_asms_tac
Ê
=USES
Specialised tactic programming.
=SEEALSO
$strip\_asm\_tac$, $strip\_tac$.
=ENDDOC

=DOC 
val ‚set_strip_thm_thens· : THM_TACTICAL list -> unit;
val ‚get_strip_thm_thens· : unit -> THM_TACTICAL list;
=DESCRIBE
$set\_strip\_thm\_thens$ and $get\_strip\_thm\_thens$ are used to
access the list of theorem tacticals which control the behaviour
of $STRIP\_THM\_THEN$. The default list is held
in the variable $basic\_strip\_thm\_thens$.

N.B. It is advisable to ensure that the list always begins with the default
list. The behaviour of a large number of tactics will be unpredictable
otherwise.
=USES
Extending the system.
=ENDDOC


=DOC 
val ‚set_strip_goal_ts· : THM_TACTICAL list -> unit;
val ‚get_strip_goal_ts· : unit -> THM_TACTICAL list;
=DESCRIBE
$set\_strip\_goal\_ts$ and $get\_strip\_goal\_tns$ are used to
access the list of theorem tacticals which control the behaviour
of $STRIP\_GOAL\_T$. The default list is held
in the variable $basic\_strip\_goal\_ts$.

N.B. It is advisable to ensure that the list always begins with the default
list. The behaviour of a large number of tactics will be unpredictable
otherwise.
=USES
Extending the system.
=ENDDOC

$basic\_strip\_thm\_thens$ 
and $basic\_strip\_goal\_ts$involve rules for handling paired quantifiers
and so its definition is deferred to \cite{DS/FMU/IED/DTD029}.
The implementation here is expected to set the lists up to handle all
the propositional connectives and unpaired quantifiers so that the
theory of pairs can be developed.


=DOC 
val ‚goal_in_asms_tac· : TACTIC;
=DESCRIBE
$goal\_in\_asms\_tac$ is a tactic which checks whether the conclusion of
the goal is also in the assumptions, and if so proves the goal.
=FAILURE
28102	the goal does not appear in the assumptions
=ENDDOC

\subsection{Concerning $T$}
=DOC
val ‚t_tac· :  TACTIC;
=DESCRIBE
A subgoal that is just `$T$' is immediately provable.
=TACTIC
t_tac
…
{ ˆ } T
…

=TEX
=SEEALSO
$strip\_tac$, $taut\_tac$.
=USES
Tactic programming.
=ENDDOC
=DOC
val ‚Ç_t_tac· : TACTIC;
=DESCRIBE
Simplifies a goal of the form: `$... Ç T$' or `$T Ç ...$'.
=TACTIC
Ç_t_tac
…
{ ˆ } t Ç T
…
{ ˆ } t
=TEX
and
=TACTIC
Ç_T_tac
…
{ ˆ } T Ç t
…
{ ˆ } t
=TEX
=FAILURE
28001	goal not of form: `{ ˆ } t Ç T` or `{ ˆ } T Ç t`
=SEEALSO
$strip\_tac$
=USES
Tactic programming. 
=ENDDOC
$Ç\_T\_elim\_tac$ won't be of interest.

\subsection{Concerning $F$}
=DOC
val ‚contr_tac· : TACTIC;
=DESCRIBE
Prove a goal by showing that the assumptions are contradictory.

N.B. loses information.
=TACTIC
contr_tac
…
{ ˆ } t
…
{ ˆ } F
=TEX
=USES
If a proof is to be gained by showing the assumptions inconsistent,
then the conclusion of the subgoal is only ``clutter'', and may be removed.
=ENDDOC
=DOC
val ‚f_thm_tac· : THM -> TACTIC;
=DESCRIBE
Prove a goal by using a theorem of the form $ˆ Ö F$.
=TACTIC
f_thm_tac (ˆ1 Ö F)
…
{ ˆ2 } t
…
=TEX
where the assumptions, $ˆ1$, of the theorem are contained in the assumptions,
$ˆ2$, of the goal.
=FAILURE
28050	the theorem does not have the form `ˆ Ö F`
=USES
In tactic programming, to use a theorem which shows that the assumptions are contradictory.
=SEEALSO
$strip\_asm\_tac$.
=ENDDOC
=DOC
val ‚c_contr_tac· : TACTIC;
=DESCRIBE
Classical contradiction as a tactic: $t$ holds if $åt Ö F$.
=TACTIC
c_contr_tac
…
{ ˆ } t
…
strip{åt, ˆ} F
=TEX
=USES
Proof by contradiction.
=SEEALSO
$strip\_tac$, $å_tac$.
=ENDDOC
=DOC
val ‚C_CONTR_T· : (THM -> TACTIC) -> TACTIC;
=DESCRIBE
Classical contradiction as a tactical.
$C\_CONTR\_T\,thmtac$ is a tactic which attempts to solve a goal $(ˆ, t)$,
by applying $thmtac(t Ö t)$ to the goal $(ˆ, F)$.
=TACTIC
C_CONTR_T
thmtac
…
{ ˆ } t
…
thmtac (åt Ö åt) ({ˆ} F)
=TEX
=USES
Proof by contradiction in combination with a theorem tactic.
=SEEALSO
$c\_contr\_tac$, $å\_T$.
=ENDDOC

\subsection{Concerning å}
=DOC
val ‚å_tac· : TERM -> TACTIC;
=DESCRIBE
Reductio ad absurdum as a tactic: $åt2$  holds if $t2 Ö t1$ and
$t2 Ö åt1$ for some term $t1$.

Note that $strip\_tac$ may be used to push a negation inside other logical connectives,
which is often the best way of handling a negated goal.
=TACTIC
å_tac
ªt1º
…
{ ˆ } åt2
…
strip{ t2, ˆ } t1; strip{ t2, ˆ } å t1
=TEX
=USES
To prove a negated term by showing that assuming the term gives rise to a contradiction.
=SEEALSO
$strip\_tac$, $c\_contr\_tac$, 
=FAILURE
28002	the term ?0 is not boolean
28003	the goal is not of the form ªå tº
=ENDDOC
=DOC
val ‚å_elim_tac· : TERM -> TACTIC;
=DESCRIBE
Proof by showing assumptions give rise to two contradictory
subgoals.

N.B. loses information.
=TACTIC
å_elim_tac
ªt1º
…
{ ˆ } t2
…
{ ˆ } t1; { ˆ } å t1
=TEX
=USES
In tactic programming.
If an assumption has its negation also in the assumption list
this will make for a rapid proof.
$undisch\_tac\,t1\,THEN\,strip\_tac$ is a more memorable idiom for handling
such a case in interactive use but is a little slower. 
=FAILURE
28002	Term is not boolean
=ENDDOC

\subsection{Concerning Ä}
=DOC
val ‚Ä_tac· : TACTIC;
=DESCRIBE
Split a goal into its conjuncts.
=TACTIC
Ä_tac
…
{ ˆ } t1 Ä t2
…
{ ˆ } t1; { ˆ } t2
=TEX
=FAILURE
28004	the goal is not of the form: `{ ˆ } t1 Ä t2`
=ENDDOC
=DOC
val ‚Ä_THEN· : (THM -> TACTIC) -> (THM -> TACTIC);
=DESCRIBE
A theorem tactic to apply a given theorem tactic to the conjuncts of 
a theorem of the form $ˆ Ö t1 Ä t2$.
Û
Ä_THEN1 thmtac (ˆ Ö t1 Ä t2) = thmtac (ˆ Ö t1) THEN thmtac (ˆ Ö t2)
Ê
=FAILURE
28005	the theorem is not of the form: `ˆ Ö t1 Ä t2`
=ENDDOC
=DOC
val ‚Ä_THEN2· : (THM -> TACTIC) -> (THM -> TACTIC) -> (THM -> TACTIC);
=DESCRIBE
A theorem tactic to apply given theorem tactics to the conjuncts of 
a theorem of the form $ˆ Ö t1 Ä t2$.
Û
Ä_THEN2 thmtac1 thmtac2 (ˆ Ö t1 Ä t2) = thmtac1 (ˆ Ö t1) THEN thmtac2 (ˆ Ö t2)
Ê
=FAILURE
28005	the theorem is not of the form: `ˆ Ö t1 Ä t2`
=ENDDOC
\subsection{Concerning Å}
=DOC
val ‚Å_left_tac· : TACTIC;
=DESCRIBE
Take the left disjunct of the current
goal as the subgoal.

N.B. loses information.
=TACTIC
Å_left_tac
…
{ ˆ } a Å b
…
{ ˆ } a
=TEX
=SEEALSO
$Å\_left\_intro$, $Å\_left\_tac1$
=FAILURE
28008	the goal is not of the form: `{ ˆ } a Å b`
=ENDDOC

=DOC
val ‚Å_right_tac· : TACTIC;
=DESCRIBE
Take the right disjunct of the current
subgoal as the new subgoal.

N.B. loses information.
=TACTIC
Å_right_tac
…
{ ˆ } a Å b
…
{ ˆ } b
=TEX
=SEEALSO
$Å\_right\_intro$, $Å\_right\_tac1$
=FAILURE
28008	the goal is not of the form: `{ ˆ } a Å b`
=ENDDOC
=DOC
val ‚swap_Å_tac· : TACTIC;
=DESCRIBE
Interchange the disjuncts of a disjunctive goal.
=TACTIC
swap_Å_tac
…
{ ˆ } a Å b
…
{ ˆ } b Å a
=TEX
=FAILURE
28008	the goal is not of the form: `{ ˆ } a Å b`
=USES
For use in conjunction with $strip\_tac$ (q.v.) when the reduction
of $\{ ˆ \} a Å b$ to $\{ åa, ˆ \} b$ is inappropriate.
=ENDDOC
=DOC
val ‚Å_elim_tac· : THM -> TACTIC;
val ‚Å_cases_tac· : THM -> TACTIC;
=DESCRIBE
Given a disjunctive theorem, prove the subgoal assuming the left
disjunct, then assuming the right, and so prove the original goal.
$Å\_cases\_tac$ is an alias for $Å\_elim\_tac$.
=TACTIC
Å_elim_tac
ˆ1 Ö t1 Å t2
…
{ ˆ2 } t
…
strip{t1, ˆ1 ° ˆ2 } t; 
strip{t2, ˆ1 ° ˆ2 } t; 
=TEX
=SEEALSO
$strip\_asm\_tac$, $Å\_THEN$
=FAILURE
28009	Theorem is not of the form: `ˆ Ö t1 Å t2`
=ENDDOC
=DOC
val ‚Å_THEN· : (THM -> TACTIC) -> (THM -> TACTIC);
=DESCRIBE
A theorem tactic to perform a case split on a given disjunctive theorem
applying a tactic generating function to the extra assumption in each branch.
Û
Å_THEN2 ttac (Ò Ö t1 Å t2) ({ˆ} t) = ttac (t1 Ö t1) ({ˆ} t); ttac (t2 Ö t2)({ˆ} t)
Ê
=TEX
=SEEALSO
$STRIP\_THM\_THEN$, $Å\_THEN2$
=FAILURE
28009	Theorem is not of the form: `ˆ Ö t1 Å t2`
=ENDDOC

=DOC
val ‚Å_THEN2· : (THM -> TACTIC) -> (THM -> TACTIC) -> (THM -> TACTIC);
=DESCRIBE
A theorem tactic to perform a case split on a given disjunctive theorem
applying tactic generating functions to the extra assumption in each branch.
Û
Å_THEN2 ttac1 ttac2 (Ò Ö t1 Å t2) ({ˆ} t) = ttac1 (t1 Ö t1) ({ˆ} t); ttac2 (t2 Ö t2)({ˆ} t)
Ê
=TEX
=SEEALSO
$STRIP\_THM\_THEN$, $Å\_THEN$
=FAILURE
28009	Theorem is not of the form: `ˆ Ö t1 Å t2`
=ENDDOC

=DOC
val ‚cases_tac· : TERM -> TACTIC;
=DESCRIBE
Do a case split on a given boolean term.
=TACTIC
cases_tac
ªt1º
…
{ ˆ } t2
…
strip{ t1, ˆ } t2; strip{ åt1, ˆ } t2
=TEX
=FAILURE
28002	Term is not boolean
=ENDDOC

=DOC
val ‚CASES_T· : TERM -> (THM -> TACTIC) -> TACTIC;
=DESCRIBE
Do a case split on a given boolean term using a tactic generating function:
Û
CASES_T t1 ttac ({ˆ} t2) = ttac(t1 Ö t1)({ˆ} t2) ; ttac(åt1 Ö åt1)({ˆ} t2)
Ê
=FAILURE
28002	Term is not boolean
=ENDDOC

=DOC
val ‚CASES_T2· : TERM -> (THM -> TACTIC) -> (THM -> TACTIC) -> TACTIC;
=DESCRIBE
Do a case split on a given boolean term using two tactic generating functions:
Û
CASES_T2 t1 ttac1 ttac2 ({ˆ} t2) = ttac1(t1 Ö t1)({ˆ} t2) ; ttac2(åt1 Ö åt1)({ˆ} t2)
Ê
=FAILURE
28002	Term is not boolean
=ENDDOC

\subsection{Concerning ä}
=DOC
val ‚ä_tac· : TACTIC;
=DESCRIBE
Strip the antecedent of an implicative goal into the assumption list.
=TACTIC
ä_tac
…
{ ˆ } t1 ä t2
…
strip{ t1, ˆ } t2
=TEX
=FAILURE
28010	g
oal is not of form: `{ ˆ } t1 ä t2`
=ENDDOC

=DOC
val ‚ä_T· : (THM -> TACTIC) -> TACTIC;
=DESCRIBE
Reduce an implicative goal
by passing the antecedent to a tactic generating function.
=TACTIC
ä_T
ttac
…
{ ˆ } t1 ä t2
…
ttac{ t1, ˆ } t2
=TEX
=FAILURE
28010	goal is not of form: `{ ˆ } t1 ä t2`
=ENDDOC

=DOC
val ‚undisch_tac· : TERM -> TACTIC ;
=DESCRIBE
Bring a term out of the assumption list into the goal as the antecedent
of an implication.
=RULE
undisch_tac
ªt1º
…
{ ˆ, t1' } t2
…
{ ˆ } Ö t1 ä t2
=TEX
where $t1$ and $t1'$ are $\alpha$-convertible.
Note that all assumptions $\alpha$-convertible with $t1$ are removed.
=SEEALSO
$list\_undisch\_tac$, $all\_undisch\_tac$, $pop\_tac$
=USES
To make the assumption amenable to manipulation, e.g. by
a rewriting tactic.
=FAILURE
28011	the term ?0 is not in the assumptions
=ENDDOC

=DOC
val ‚list_undisch_tac· : TERM list -> TACTIC;
=DESCRIBE
Repeatedly apply $undisch\_tac$.
=RULE
list_undisch_tac
[ªt1º,...,ªtnº]
…
{ ˆ, t1, ..., tn } t
…
{ ˆ } t1 ä ... ä tn ä t
=TEX
=FAILURE
28011	the term ?0 is not in the assumptions
=ENDDOC

=DOC
val ‚all_undisch_tac· : TACTIC;
=DESCRIBE
Apply $undisch\_tac$ to every assumption in turn:
=TACTIC
list_undisch_tac
…
{ t1, ..., tn } t
…
{} tn ä ... ä t1 ä t
=TEX
$\alpha$-equivalent assumptions will only appear once in the resulting
goal.
=ENDDOC

\subsection{Concerning Ç}
=DOC
val ‚Ç_tac· : TACTIC;
=DESCRIBE
Reduce a bi-implication to two subgoals.
=TACTIC
Ç_tac
…
{ ˆ } t1 Ç t2
…
strip{ t1, ˆ } Ö t2; strip{ t2, ˆ } Ö t1
=TEX
=FAILURE
28016	goal is not of the form: `ˆ Ö t1 Ç t2`
=ENDDOC
($EQ\_TAC$ and $IFF\_TAC$ in Cambridge HOL)
=ENDDOC

=DOC
val ‚Ç_T· : (THM -> TACTIC) -> TACTIC;
=DESCRIBE
Reduce a bi-implication by passing each operand to a tactic generating
function.
=TACTIC
Ç_T
ttac
…
{ ˆ } t1 Ç t2
…
ttac{ t1, ˆ } Ö t2; ttac{ t2, ˆ } Ö t1
=TEX
=FAILURE
28017	the goal is not of the form: `ˆ Ö t1 Ç t2`
=ENDDOC

=DOC
val ‚Ç_T2· : (THM -> TACTIC) -> (THM -> TACTIC) -> (THM -> TACTIC);
=DESCRIBE
Reduce a bi-implication by passing the operands to tactic generating
functions.
=TACTIC
Ç_T2
ttac1 ttac2
…
{ ˆ } t1 Ç t2
…
ttac1{ t1, ˆ } Ö t2; ttac2{ t2, ˆ } Ö t1
=TEX
=FAILURE
28017	the goal is not of the form: `ˆ Ö t1 Ç t2`
=ENDDOC

=DOC
val ‚Ç_THEN· : (THM -> TACTIC) -> (THM -> TACTIC) -> (THM -> TACTIC);
=DESCRIBE
A theorem tactic to apply a given theorem tactic to the result
of eliminating $Ç$ from a theorem of the form $ˆ Ö t1 Ç t2$.
Û
Ç_THEN1 thmtac (ˆ Ö t1 Ç t2) = thmtac (ˆ Ö t1 ä t2) THEN thmtac (ˆ Ö t2 ä t1)
Ê
=FAILURE
28017	the theorem is not of the form: `ˆ Ö t1 Ç t2`
=ENDDOC

=DOC
val ‚Ç_THEN2· : (THM -> TACTIC) -> (THM -> TACTIC) -> (THM -> TACTIC);
=DESCRIBE
A theorem tactic to apply given theorem tactics to the the result
of eliminating $Ç$ from a theorem of the form $ˆ Ö t1 Ç t2$.
Û
Ç_THEN2 ttac1 ttac2(ˆ Ö t1 Ä t2) = ttac1(ˆ Ö t1 ä t2) THEN ttac2(ˆ Ö t2 ä t1)
Ê
=FAILURE
28017	the theorem is not of the form: `ˆ Ö t1 Ç t2`
=ENDDOC


\subsection{Concerning $if\ldots then\ldots else \ldots$}

=DOC
val ‚if_tac· : TACTIC;
=DESCRIBE
Reduce a conditional subgoal by performing a case split on the
selector.
=TACTIC
if_tac
…
{ ˆ } if a then tt else et
…
strip{ a, ˆ } tt ;  { åa, ˆ } et
=TEX
=SEEALSO
$strip\_tac$
=FAILURE
28024	goal is not of the form: `{ ˆ } if a then tt else et`
=ENDDOC


\subsection{Concerning É}
=DOC
val ‚simple_É_tac· : TACTIC;
=DESCRIBE
Reduce a universally quantified goal.
Fails with paired quantifiers.
=TACTIC
simple_É_tac
…
{ ˆ } É x é t[x]
…
{ ˆ } t[x']
=TEX
where $x'$ is a variant name of $x$, different from any 
variable in $ˆ$ or $t$.
=USES
Specialised tactic programming.
The more general $É\_tac$ is just as efficient as $simple\_É\_tac$.
=SEEALSO
$É\_tac$
=FAILURE
28051	goal is not of the form: `{ ˆ } É x é t[x]`
=ENDDOC


\subsection{Concerning Ñ}
=DOC
val ‚simple_Ñ_tac· : TERM -> TACTIC ;
=DESCRIBE
Provide a witness for an existential subgoal.
Fails with paired quantifiers.

N.B. loses information.
=TACTIC
Ñ_tac
ªt1º
…
{ ˆ } Ñ x é t2[x]
…
{ ˆ } t2[t1]
=TEX
where ªxº may be instantiated to the structure of ªt1º.
=USES
Specialised tactic programming.
The more general $Ñ\_tac$ is just as efficient as $simple\_Ñ\_tac$.
=FAILURE
28027	goal is not of the form: `{ ˆ } Ñ x é t2[x]` 
28028	goal is not of the form: `{ ˆ } Ñ x é t2[x]`
	where the term argument has the same type as ªxº
28046	goal is not of the form: `{ ˆ } Ñ x é t2[x]`
	where ªxº can be instantiated to the term argument
=ENDDOC

=DOC
val ‚SIMPLE_Ñ_THEN· : (THM -> TACTIC) -> (THM -> TACTIC);
=DESCRIBE
A theorem tactical which applies a given theorem tactic to the result
of eliminating the outermost quantifier from a theorem of the form
$ˆ Ö Ñxét$.
Fails with paired quantifiers.
Û
SIMPLE_Ñ_THEN thmtac (ˆ Ö Ñxét) = thmtac (ˆ Ö t[x'/x])
Ê
where ªx'º is a variant of ªxº which does not appear in $ˆ$ or in
the assumption or conclusion of the goal.
=USES
Tactic programming. Note that the more general $Ñ\_THEN$ is just as
efficient.
=SEEALSO
$Ñ\_THEN$
=FAILURE
28048	thoerem is not of the form: `ˆ Ö Ñ x é t` 
=ENDDOC

\subsection{Concerning ¿}
=DOC
val ‚simple_Ñ%down%1_tac· : TERM -> TACTIC;
=DESCRIBE
Simplify a unique existentially quantified goal with a particular
witness.
Fails with paired quantifiers.

N.B. loses information.
=TACTIC
simple_Ñ%down%1_tac1
ªtº
…
{ ˆ } simple_Ñ%down%1 x é P[x]
…
{ ˆ } P[t];
{ ˆ } É x' é P[x'] ä x' = t
=TEX
where $x'$ is a variant of $x$ which does not occur free in $t$.
=USES
Specialised tactic programming.
The more general $Ñ∞\_tac$ is just as efficient as $simple\_Ñ∞\_tac$.
=FAILURE
28029	goal is not of the form: `{ ˆ } Ñ%down%1 x é P[x]`
=ENDDOC

=DOC
val ‚SIMPLE_Ñ%down%1_THEN· : (THM -> TACTIC) -> (THM -> TACTIC);
=DESCRIBE
A theorem tactical which applies a given theorem tactic to the result
of eliminating the outermost quantifier from a theorem of the form
$ˆ Ö Ñ∞xét$.
Fails with paired quantifiers.
Û
SIMPLE_Ñ∞_THEN thmtac (ˆ Ö Ñ∞xét) = thmtac (ˆ Ö t[x'/x] Ä Éx''éP[x''] ä x'' = x)
Ê
where ªx'º and ªx''º are distinct variants of ªxº which do not appear free in $ˆ$ or in
the assumptions or conclusion of the goal.
=USES
Specialised tactic programming.
The more general $Ñ∞\_THEN$ is just as efficient as $SIMPLE\_Ñ∞\_THEN$.
=FAILURE
28048	thoerem is not of the form: `ˆ Ö Ñ x é t` 
=ENDDOC

\subsection{$lemma\_tac$}
=DOC
val ‚lemma_tac· : TERM -> TACTIC;
=DESCRIBE
Introduce a lemma (the term argument) to be proved,
and then added as an assumption.
=TACTIC
lemma_tac
ªt1º
…
{ ˆ } t2
…
strip{t1, ˆ} t2;
{ ˆ } t1
=TEX
Note that if $t1$ cannot be proved then neither now can the main goal,
even if it was provable by another approach.
=SEEALSO
$LEMMA\_T$
=ENDDOC
\subsection{Tautology Prover}
=DOC
val ‚taut_tac· : TACTIC;
=DESCRIBE
A tautology prover.
If the conclusion of the goal is a tautology then $taut\_tac$ will prove
the goal.
A tautology is taken to be any substitution
instance of a term which is formed from boolean variables,
the constants $T$ and $F$ and the following
connectives:
Û
Ä, Å, ä, Ç, å, if ... then ... else
Ê
and which is true for any assignment of truth values to the variables.
=TACTIC
taut_tac
…
{ ˆ } t
…
=TEX
=SEEALSO
$strip\_tac$
=FAILURE
28049	the conclusion of the goal is not a tautology
=ENDDOC
($TAUT\_TAC$ in Cambridge HOL)

\section{END OF THE SIGNATURE}
=SML
end; (* of local ... in ... end *)
end; (* signature of DerivedInferenceRules *)
=TEX
\section{TEST POLICY}
The functions in this document should be tested according to the
general criteria given in \cite{DS/FMU/IED/PLN008}.
=TEX
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}

