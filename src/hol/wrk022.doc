=IGN
********************************************************************************
wrk022.doc: this file is part of the PPHol system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
%
\documentclass[a4paper,12pt]{article}
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{latexsym}
\usepackage{epsf}
% PRINTING THEORY LISTINGS
% ======== ====== ========
% Assuming the theory is in the databse `modal'
% use the following shell command to generate the theory listing:
%	hol_list -d modal wrk022 >wrk022.thl.doc
% Then use the shell command
%	doctex wrk022.thl
% to generate wrk022.thl.tex.
% Then print off this document in the normal way.
%


\ftlinepenalty=9999
\makeindex
\def\Title{Modal Logic in HOL}  %% Mandatory field
\def\Reference{DS/FMU/IED/WRK022}  %% Mandatory field
\def\SCCSversion{$Revision: 2.5 $%
}
\def\Version{\SCCSversion}  %% Mandatory field
\def\Date{\FormatDate{$Date: 2002/10/17 15:10:58 $%
}}
% \TPPtype{SML Literate Script}
% \TPPkeywords{}
\def\Author{R.D. Arthan }
\def\Abstract{\centering{\bf Abstract}\par The possible
worlds semantics for the modal propositional calculus is defined
in HOL and some well-known theorems about the
semantics are proved. The use of such a semantics to give proof support
for a modal logic is illustrated and discussed.}
\def\Distribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\FrontPage
\vfill
\begin{center}
\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year
\end{center}
\pagebreak
\section{Document Control}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item[Issue 2.1 (1992/09/29)] First approved issue.
\item[Issue 2.5 (2002/10/17)] Copyright and banner updates for open source release.
\item[Issue 2.6 (2002/10/17)] PPHol-specific updates for open source release
\item[2014/07/23]
Augmented old RCS version numbers in the changes history with dates.
Dates will be used in place of version numbers in future.

%%%% END OF CHANGES HISTORY %%%%
\end{description}
\subsection{Changes Forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document reports on a brief investigation into embedding the
possible worlds semantics for modal logic in HOL.

The purpose of the investigation was to demonstrate some of the new
capabilities of the ICL HOL proof tool and to show
by means of examples
how a semantic embedding of this sort is used to provide
proof support for formalisms other than HOL.

The treatment of the possible worlds semantics we give is by no means new.
It is essentially just a translation into HOL
of the sort of set-theoretic treatment which may be found
in any text-book on modal logic, for example, \cite{Boolos79}.


\subsection{Introduction}
\subsubsection{Modal Logics}
Modal propositional calculus is the ordinary propositional calculus
augmented by an additional connective, $\Box$. If $A$ is a proposition
then $\Box A$, the {\em necessitation} of $A$, was originally intended
to connote the idea that $A$ was, in some sense, a necessary rather
than a contingent fact. The semantics for this calculus, due to
Kripke, explicates this notion of necessity in terms of systems,
called {\em frames} in the literature.
A frame comprises a set of
{\em possible worlds} supplied with a relation of {\em accessibility}
between worlds. A proposition is viewed as necessary in a world
if its truth in each world, $x$, implies its truth in every world
accessible from $x$.

It turns out that by placing various constraints on the accessibility
relation, we arrive at semantics which interpret the
necessitation operator in interesting and useful ways, for example:

\begin{itemize}
\item
transitive accessibility relations for which all ascending chains
are finite correspond to
a view of $\Box$ which is closely related to the provability
predicate for Peano arithmetic. This leads to a useful conceptual framework
for understanding provability, consistency and self-reference
in the theory of arithmetic (see \cite{Boolos79}).
\item
Various forms of linear accessibility relation correspond to a view of $\Box$
as a temporal operator, with $\Box A$ meaning that $A$ will always hold
if it holds now (see, e.g., \cite{Benthem88}).
\item
Taking the worlds as the states of a computer and taking ``$x$ is accessible
from $y$'' to mean ``$x$ results when we execute program $p$ in state $y$'',
we get a modal logic which is closely connected with weakest-precondition
semantics for programming languages (see \cite{Benthem88}).
\item
Taking the worlds as the possible states of knowledge (or belief)
of some individual and taking
the accessibility relation to represent ways in which these states
grow through the acquisition of new knowledge (or belief), we get various forms
of {\em epistemic modal logic} (or {\em doxastic
modal logic}), in which $\Box A$ means that $A$ is known (or believed).
Such logics, usually extended to cover relationships between
the knowledge (or belief) of several individuals,
have many applications in artificial intelligence and in
the study of communication protocols in distributed computer systems
(see \cite{Ramsay88,burrows89}).
\end{itemize}

In the sequel we are going to formalise the possible worlds semantics
in HOL and prove the semantic justification of two rules
of inference for modal logic.

We will also prove some theorems, due to Kripke, about
some axioms used in various modal calculi.
To state the axioms we introduce the {\em possibility} operator, $\diamondsuit$.
$\diamondsuit A$ is defined as $³(\Box(³A))$.
In each case, the theorem we prove says that an axiom is valid provided
the accessibility relation possesses a certain property. The axioms
and properties are shown in the following table:

\begin{center}
\begin{tabular}{|l|l|l|}\hline
Axiom 1 & $\Box A´A$ & Reflexive \\\hline
Axiom 2 & $\Box A´\Box(\Box A)$ & Transitive \\\hline
Axiom 3 & $A´\Box(\Diamond A)$ & Symmetric \\\hline
Axiom 4 & $\Diamond A´\Box(\Diamond A)$ & Euclidean \\\hline
\end{tabular}
\end{center}

(The notion of a euclidean relation is defined in section \ref{AUXILIARYDEFINITIONS}
below.)

Note that the appropriateness of the above axioms depends on the application.
For example, they are all arguably appropriate for the epistemic reading,
for which, say, 2 is the so-called principle of ``positive introspection'':
`if $A$ is known, then it is known that $A$ is known'.
However, axiom 1 is inappropriate for the doxastic reading: we cannot
assert that a proposition is true just because it is believed.

\subsubsection{The HOL Proof Tool}
HOL (Higher Order Logic) is a polymorphic version of Church's type theory
due to M.J.C. Gordon  \cite{gordon87}). A system produced
by Cambridge University supporting
machine-checked reasoning in HOL has been available in the public domain for
several years \cite{SRI89a}. The Cambridge HOL system has been widely
used for a range of verification tasks in academia and has
been successfully exploited by a number of industrial users including
the Formal Methods Unit at ICL.

ICL are currently engaged in a research programme into formal proof
technology which includes a re-engineering of the HOL proof tool to
meet more fully the requirements of industrial use and to give a basis
for exploiting more recent research on the HOL technology. The ICL HOL
proof tool has been specifically designed with a view to its use to
provide support for specification and proof in formalisms other
than the HOL logic itself.
After a significant prototyping exercise early in the project,
a first version of this system is currently being integrated and tested.


As the HOL logic is well-established and uncontroversial
mathematically, and as the HOL proof tool
is constructed so as to maximise assurance in the
correctness of the theorems it proves with respect
to that logic, use of HOL to support other formalisms
means that the soundness of such support tools does not
have to be established on an {\em ad hoc} basis.

Space does not permit us to give a full exposition of the operation
of the HOL proof tool here. However, we hope that some aspects of
this will be clear from the examples we give. It may be worth mentioning
some basic concepts:

The system is implemented in the interactive
functional programming language Standard ML (or, strictly speaking, an
extension of Standard ML giving a special syntax for entering
HOL terms and types and supporting the use of an extended character
set for mathematical notations). ML, often referred to
as the {\em metalanguage}, also acts as the command language through which
the user interacts with the system.

The types and terms of the HOL language are implemented as abstract
data types, $TYPE$ and $TERM$.
The constructors of the
data type of terms guarantee that all values of type $TERM$ obey
the typing rules of the HOL language. Proof is conducted, at the most
primitive level, by computing theorems, i.e. values of an abstract
data type, $THM$. The constructors of this abstract data type implement
the primitive inference rules of the
logic. Thus, the only way to compute a theorem is via a sequence of
primitive inferences, and so any value of type $THM$ is indeed a theorem
of the HOL logic. On top of this logical kernel are implemented a wide
range of proof procedures which assist the user in performing proofs.
The great merit of this approach to implementing a proof tool is that the logical
kernel guarantees that the soundness of the system cannot be compromised
by infelicities in the coding of these derived proof procedures.

\subsubsection{Notation}
The present document is a
{\em literate script} containing a mixture of narrative
text and input for the ICL HOL system.
The appendix contains a listing of the HOL theory set up by the script
and section \ref{INDEX} contains an index of the objects defined in the script.
Defining occurrences of names are shown in {\bf bold}.

The inputs for HOL consists of a sequence of commands in an extension
of the interactive programming language Standard ML.

HOL terms and types appear enclosed by the symbols `¬' and `®' (with a `:' after
the `¬' for a type), the text between the symbols being parsed as HOL and
resulting in an ML value of type $TERM$ or $TYPE$.
For example, consider the following fragment of ML:

=SML
val t = ¬µm n·m + n - n = m®;
=TEX

This causes the HOL term
=INLINEFT
µm n·m + n - n = m
=TEX
\ to be parsed and the resulting value of type $TERM$ to be bound to the
ML variable $t$.

HOL constants are introduced using constant definition
boxes which have the form:

\begin{HOLConst}
\+	c : ty\\
\PrPH{}
\+	P\\
\end{HOLConst}

=TEX
The intention of this is to introduce a new constant, $c$,
of type $ty$, satisfying the property $P$. In the present document
$P$ will always be a (possibly universally quantified)
equation or bi-implication defining a value or a function.

The definitions introduced by these boxes are {\em conservative}.
The HOL system maintains a distinction between conservative extensions
and the introduction of arbitrary axioms.
\subsubsection{HOL Preamble}
The following HOL commands create a new HOL theory in which
we will save our definitions and theorems, and prepare the
specification proof facilities for the task in hand.
=SML
open_theory"hol";
new_theory"wrk022";
set_pc "hol";
=IGN
open_theory"pair";
delete_theory"modal_logic";
=TEX
\section{AUXILIARY DEFINITIONS}\label{AUXILIARYDEFINITIONS}
We need definitions of the concepts of $reflexive$, $transitive$,
$symmetric$ and $euclidean$ relations in HOL.

As we have already mentioned, HOL is a polymorphic variant
of simple type theory. In such a system properties of values of type $\tau$ are
represented as propositional functions, that is to say they are
objects of type $\tau ­ BOOL$, where $BOOL$ is the two-point type
of truth values. A binary relation on a type $\tau$
is a two-argument propositional function, i.e., it has type
$\tau­\tau­BOOL$.

Polymorphism allows us to use variables
which range over types, such type variables are distinguished syntactically
by having names beginning with the character $'$.
The propositional functions $Reflexive$, $Transitive$, etc. which
we will shortly define are polymorphic constants, they may be applied
to any value whose type has the form $\tau­\tau­BOOL$.

The definitions of the four properties of relations we need follow:

¹HOLCONST
	Reflexive: ('a ­ 'a ­ BOOL) ­ BOOL
÷
	µrel· Reflexive rel ¤ µx· rel x x
°
¹HOLCONST
	Transitive: ('a ­ 'a ­ BOOL) ­ BOOL
÷
	µrel· Transitive rel ¤ µx y z· rel x y ± rel y z ´ rel x z
°
¹HOLCONST
	Symmetric: ('a ­ 'a ­ BOOL) ­ BOOL
÷
	µrel· Symmetric rel ¤ µx y· rel x y ´ rel y x
°
¹HOLCONST
	Euclidean: ('a ­ 'a ­ BOOL) ­ BOOL
÷
	µrel· Euclidean rel ¤ µx y z· rel x y ± rel x z ´ rel y z
°

\section{POSSIBLE WORLD SEMANTICS IN HOL}
\subsection{Frames}
In a set-theoretic treatment a {\em frame} consists of a non-empty set $W$, of
{\em possible worlds}, equipped with a binary relation, $R$, the
{\em accessibility} relation. We will use a type variable
$'W$ to represent the set of possible worlds, so that our general treatment
can be instantiated to a particular type of possible worlds.
We can thus capture the notion
of a frame using the following type abbreviation:
=SML
declare_type_abbrev (Û"FRAME"Ý, ["'W"], ¬:'W ­ 'W ­ BOOL®);
=TEX
The above declaration introduces a new type abbreviation $FRAME$ with a single
formal parameter $'W$; The effect of the declaration is that, for example,
the type expression  $¬{:}(î)FRAME®$ will represent the type
$¬:î ­ î ­ BOOL®$ of binary
relations on the type $î$ of natural numbers. Thus a value
of type $¬{:}(î)FRAME®$ can be viewed as a frame in which the possible
worlds are numbers.

We will use the variable $R$ for accessibility relations,
and $x$, $y$ and $z$ for worlds.
\subsection{Valuations}
A {\em valuation} will be a function assigning a truth-value to every possible
world. In a syntactic treatment we would work with an {\em evaluator}
assigning valuations in this sense to the propositional variables. In our
approach we can use HOL variables of the appropriate type to represent
the semantics directly. We use the following type abbreviation for
valuations:
=SML
declare_type_abbrev (Û"VALUATION"Ý, ["'W"], ¬:'W ­BOOL®);
=TEX
Thus, for example, a value of type $¬{:}(î)VALUATION®$ is a propositional function on
the natural numbers.

We will use the variables $A$, $B$ and $C$ for valuations.
\subsection{Propositional Connectives}
It is straightforward to give the semantics of the ordinary
propositional connectives in their modal guise.
In each case the modal version of a connective
combines the valuations which are its operands to give a valuation
which asserts that for every world
the corresponding propositional connective holds
between the values taken by the operands in that world.
The definitions of these connectives are therefore independent of
any accessibility relation.

We will take implication and negation as our primitive connectives
and define others in terms of them:

¹HOLCONST
	Û´_modalÝ: ('W)VALUATION ­ ('W)VALUATION ­ ('W)VALUATION
÷
	µA B x· ´_modal A B x ¤ A x ´ B x
°

¹HOLCONST
	Û³_modalÝ: ('W)VALUATION ­ ('W)VALUATION
÷
	µA x· ³_modal A x ¤ ³A x
°
In making the above definitions, we had to distinguish the names for the modal
connectives from those already reserved for the propositional connectives
in HOL. The {\em alias} mechanism supported by ICL HOL allows us to use
the usual names instead as syntactic abbreviations. The following
declarations achieve this:
=SML
declare_alias
	(Û"´"Ý, ¬´_modal: ('W)VALUATION ­ ('W)VALUATION ­ ('W)VALUATION®);
declare_alias
	(Û"³"Ý, ¬³_modal: ('W)VALUATION ­ ('W)VALUATION®);
=TEX
To see how this works, we can now use a more natural syntax for
the definition of modal disjunction and conjunction:

¹HOLCONST
	Û²_modalÝ: ('W)VALUATION ­ ('W)VALUATION ­ ('W)VALUATION
÷
	µA B· ²_modal A B = (³A ´ B)
°
¹HOLCONST
	Û±_modalÝ: ('W)VALUATION ­ ('W)VALUATION ­ ('W)VALUATION
÷
	µA B· ±_modal A B = ³(A ´ ³B)
°
Note here that $³$ and $´$ refer to the modal connectives. The HOL
$³$ and $´$ may still be used --- the ICL HOL system
identifies the appropriate internal representation on the basis of the types
of the operands.

As with the other connectives we make alias declarations for the
modal disjunction and conjunction:
=SML
declare_alias(Û"²"Ý, ¬²_modal: ('W)VALUATION ­ ('W)VALUATION ­ ('W)VALUATION®);
declare_alias(Û"±"Ý, ¬±_modal: ('W)VALUATION ­ ('W)VALUATION ­ ('W)VALUATION®);
=TEX


\subsection{Necessitation}
The necessitation operator, $\Box$, is defined with respect to
a given frame $R$; The necessitation of a valuation, $A$, is the valuation
which is true at a world $x$ if and only if $A$ is true at every world
accessible from $x$. The HOL definition of this is as follows
¹HOLCONST
	Û%Box%Ý: ('W)FRAME ­ ('W)VALUATION ­ ('W)VALUATION
÷
	µR A x· %Box%R A x ¤ µy· R x y ´ A y
°
\subsection{Possibility}
The possibility operator, $\Diamond$, is defined in terms of
necessitation and negation as follows:
¹HOLCONST
	Û%Diamond%Ý: ('W)FRAME ­ ('W)VALUATION ­ ('W)VALUATION
÷
	µR A· %Diamond%R A = ³(%Box%R(³A))
°
=TEX

\subsection{Validity}
A valuation is valid if it is true in every world. Thus:
¹HOLCONST
	ÛValidÝ: ('W)VALUATION ­ BOOL
÷
	µA· Valid A ¤ µx· A x
°
\subsection{A Rewrite System}

In the sequel, we will use the above definitions to prove some theorems
about the semantics. The proofs will have a common pattern, in which
the first step is to expand out the above definitions to reduce the goal
to be proved to a proposition in the predicate calculus. The following
ML command gives us an ML value containing the list of defining theorems
which we use to do this.
=SML
val Ûmodal_rewritesÝ = map snd (get_defns"-");
=TEX
This pattern of proof is common in most applications of HOL: at the beginning
of building a theory, one often has to reduce problems to first principles.
Usually, once one has established a basic repertoire of theorems
characterising the problem domain, subsequent
proofs are performed at a higher-level using the characterising theorems.

\section{INFERENCE RULES}\label{INFERENCERULES}
Using the definitions of the previous section we can now prove
some results about the modal operators.
In this section we prove two theorems which are the semantic justifications
for the two inference rules usually associated with modal logics.


\subsection{Modus Ponens}
The rule of modus ponens for modal logic is given by the following
HOL theorem.
As an inference rule, modus ponens says that from (the theoremhood of)
$A\,´\,B$ and (the theoremhood of) $A$ we may infer
(the theoremhood of) $B$.
The semantic justification of this is the theorem we shall now
prove which asserts that if
$A\,´\,B$ and $A$ are valid, then so is $B$.

In the following statement of this theorem note that the conjunction
and the second implication are the HOL logical connectives. The first
implication is the modal one.
=SML
push_goal([], ¬µA B· Valid (A ´ B) ± Valid A ´ Valid B®);
=TEX
The above command initiates a session with the ICL HOL subgoal package,
the standard means of finding proofs by a goal oriented search.
Goals are reduced to subgoals by applying tactics. A discussion of
how proofs are conducted is outside the scope of this document.
The proofs given here follow a common pattern. First we rewrite with
the definitions to reduce the goal to a predicate calculus proposition.
We then break this down using the standard tactic for simplifying
such propositions, $strip\_tac$.
This simplification gives us a simpler goal and some assumptions
with which to prove it. In most of the present proofs, one or more of the
assumptions turns out to be a universally quantified
formula, which we use to prove the goal by specialisation and rewriting.
=SML
a(rewrite_tac modal_rewrites);
a(REPEAT strip_tac);
a(POP_ASM_T (ante_tac o µ_elim¬x®) THEN asm_rewrite_tac[]);
=TEX
This completes the proof of our goal. We save the theorem in
the HOL theory as follows:
=SML
val Ûmodal_mp_thmÝ = save_thm("modal_mp_thm", pop_thm());
=TEX
\subsection{Necessitation}
The rule of necessitation says that from $A$ we may infer $\Box A$.
Again this rule holds for any accessibility relation.
=SML
push_goal([], ¬µR A· Valid A ´ Valid (%Box%R A)®);
=TEX
=SML
a(rewrite_tac modal_rewrites);
a(REPEAT strip_tac THEN asm_rewrite_tac[]);
=TEX
=SML
val Ûnecessitation_thmÝ = save_thm("necessitation_thm", pop_thm());
=TEX
\section{THE DISTRIBUTION AXIOM SCHEMATA}
The distribution axiom schemata contains all sentences of the
form $\Box(A ´ B) ´ (\Box A ´ \Box B)$.
The semantic justification for this is proved as follows:
=SML
push_goal([], ¬µR A B· Valid (%Box%R(A ´ B)) ´ Valid (%Box%R A ´ %Box%R B)®);
=TEX
=SML
a(rewrite_tac modal_rewrites);
a(REPEAT strip_tac);
a(DROP_NTH_ASM_T 3 (ante_tac o list_µ_elim[¬x®, ¬y®]));
a(DROP_NTH_ASM_T 2 (ante_tac o µ_elim  ¬y®) THEN asm_rewrite_tac[]);
a(REPEAT strip_tac);
=TEX
=SML
val Ûdistribution_thmÝ = save_thm("distribution_thm", pop_thm());
=TEX
The reader may be reassured to know that the above is the longest subgoal
package proof in the document.
\section{FOUR AXIOMS}
In this section we prove the promised four theorems about the interplay
between certain modal axioms and properties of the accessibility
relation.
\subsection{Axiom 1}
This axiom holds for reflexive accessibility relations:
=SML
push_goal([], ¬µR· Reflexive R ´ µA· Valid(%Box%R A ´ A)®);
=TEX
=SML
a(rewrite_tac modal_rewrites);
a(REPEAT strip_tac);
a(POP_ASM_T (ante_tac o µ_elim¬x®) THEN asm_rewrite_tac[]);
=TEX
=SML
val Ûaxiom1_thmÝ = save_thm("axiom1_thm", pop_thm());
=TEX
\subsection{Axiom 2}
This axiom holds for transitive accessibility relations:
=SML
push_goal([], ¬µR· Transitive R ´ µA· Valid(%Box%R A ´ %Box%R (%Box%R A))®);
=TEX
=SML
a(rewrite_tac modal_rewrites);
a(REPEAT strip_tac);
a(DROP_NTH_ASM_T 4 (ante_tac o list_µ_elim[¬x®, ¬y®, ¬y'®]) THEN asm_rewrite_tac[]);
=TEX
=SML
val Ûaxiom2_thmÝ = save_thm("axiom2_thm", pop_thm());
=TEX
\subsection{Axiom 3}
This axiom holds for symmetric accessibility relations:
=SML
push_goal([], ¬µR· Symmetric R ´ µA· Valid(A ´ %Box%R (%Diamond%R A))®);
=TEX
=SML
a(rewrite_tac modal_rewrites);
a(REPEAT strip_tac);
a(DROP_NTH_ASM_T 3 (ante_tac o list_µ_elim[¬x®, ¬y®]) THEN asm_rewrite_tac[]);
a(REPEAT strip_tac THEN simple_¶_tac¬x® THEN asm_rewrite_tac[]);
=TEX
=SML
val Ûaxiom3_thmÝ = save_thm("axiom3_thm", pop_thm());
=TEX
\subsection{Axiom 4}
This axiom holds for euclidean accessibility relations:
=SML
push_goal([], ¬µR· Euclidean R ´ µA· Valid(%Diamond%R A ´ %Box%R (%Diamond%R A))®);
=TEX
=SML
a(rewrite_tac modal_rewrites);
a(REPEAT strip_tac);
a(DROP_NTH_ASM_T 4 (ante_tac o list_µ_elim[¬x®, ¬y'®, ¬y®]) THEN asm_rewrite_tac[]);
a(REPEAT strip_tac THEN ¶_tac¬y® THEN asm_rewrite_tac[]);
=TEX
=SML
val Ûaxiom4_thmÝ = save_thm("axiom4_thm", pop_thm());
=TEX
\section{PROOF SUPPORT FOR A MODAL LOGIC}
In this section we implement inference rules for modal logic,
and also implement the axiom schemata for
the modal logic traditionally called $T$.
$T$ has as its axioms all distribution axioms,
all instances of ordinary propositional tautologies
and all sentences of the form $\Box A ´ A$.

Note that we use the term ``axioms'' here
for what are actually theorems derived from our definitions
of the semantics.
The axiom schemata are implemented
as proof procedures, i.e.,
ML functions which prove rather than merely postulate the ``axioms''
in question.


Examples of the use of the rules and axiom schemata are given in section
\ref{ExampleProofs} below.

\subsection{Implementing the Inference Rules}
In this section we implement derived rules in HOL corresponding
to the theorems proved in section \ref{INFERENCERULES} above.

The first rule is modus ponens. Given as its arguments theorems of
the form $ ô Valid(A ´ B)$\footnote{%
The HOL logic is formulated as a {\em sequent calculus}:
the assertions one proves comprise a list of assumptions and a
conclusion. We write $ ô t$ for a theorem with assumptions $$ and
conclusion $t$.}%
and $ ô Valid\,A$ it will prove the theorem
$ À  ô Valid\,B$.
This is done with HOL rules to instantiate our
theorem on modus ponens and to use the theorem arguments to
discharge the antecedents of the resulting implication.
=SML
fun Ûmodal_mp_ruleÝ (thm1 : THM) (thm2 : THM) : THM = (
	simple_´_match_mp_rule modal_mp_thm (±_intro thm1 thm2)
);
=TEX
The second rule is necessitation. Given as arguments a term, $¬R®$,
and a theorem
of the form $ ô Valid\,A$, it will prove $ ô Valid(\Box R A)$.
This is done by instantiating our theorem on necessitation.
=SML
fun Ûnec_ruleÝ (R : TERM) (thm : THM) : THM = (
	inst_term_rule [(R, ¬R:('a)FRAME®)]
	(simple_´_match_mp_rule necessitation_thm thm)
);
=TEX
\subsection{Implementing the Axiom Schemata}
It is usual in modal calculi to take all ordinary propositional
tautologies as axioms. The following ML code implements this rule
by proving all such axioms. This proof procedure works
by rewriting with the
definitions of validity and all the modal connectives except %Box%, and then
using $strip\_tac$ to prove the resulting proposition.
=SML
fun Ûmodal_taut_ruleÝ (tm : TERM) : THM = (
	tac_proof( ([], tm),
	rewrite_tac
	(map(get_defn"-")
	["%Diamond%", "±_modal", "²_modal", "³_modal", "´_modal", "Valid"])
	THEN REPEAT strip_tac)
);
=TEX
It is also usual to take all instances of the distribution
axiom as axioms. This is implemented by the following proof procedure
which takes the accessibility relation, $¬R®$, and terms
$¬A®$ and $¬B®$ as arguments and proves
$ô \Box R(A ´ B) ´ (\Box R\,A ´ \Box R\,B)$. The proof is done by
instantiating our theorem on the distribution axiom appropriately.
=SML
fun Ûdist_ruleÝ (R : TERM) (A : TERM) (B : TERM) : THM = (
	inst_term_rule
	(combine [R, A, B] (fst(strip_µ(concl distribution_thm))))
	(all_simple_µ_elim distribution_thm)
);
=TEX
With reference to our theorem about axiom 1, to complete
our rules and axioms for the system $T$
we need assume that some unspecified accessibility relation
$R$ is symmetric.
The following proof procedure proves instances of axiom 1 on the
assumption of a symmetric
accessibility relation, $R$.
=SML
fun Ûaxiom1_ruleÝ (tm : TERM) : THM = (
	¤_t_elim(rewrite_conv[undisch_rule(all_simple_µ_elim axiom1_thm)] tm)
);
=TEX
\subsection{Example Proofs}\label{ExampleProofs}

As examples, we will prove the (semantic justifications of)
the following two theorems of the system $T$. The
two results are given as theorem 6 in chapter 1 of \cite{Boolos79} and
the proofs we give follow the ones give there.

=GFT Informal Example
	ô A ´ %Diamond%A
	ô %Box%A ´ %Diamond%A
=TEX
For expository purposes, we have written the proof out step by step.
In actual use, the main purpose of the sort of rules we have implemented
is to enable the construction of higher-level and more powerful
facilities for finding proofs. Proofs at the level of detail seen
here would not be seen by the user.

The following sequence of computations, then, is the HOL
proof of the two results. After each step
we show the output produced by the HOL system after executing
that step.
Note that, essentially, we are now working purely in modal logic:
we no longer see any HOL logical operators, just
terms of the form $¬Valid\,A®$ where $A$ involves only modal
connectives; all proof steps are done using the modal inference rules
and axiom schemata we have coded above.

=SML
val Ûlemma1Ý = axiom1_rule ¬Valid(%Box%R (³A) ´ ³A)®;
=TEX
=GFT HOL Output
val lemma1 = Reflexive R ô Valid (%Box% R (³ A) ´ ³ A) : THM
=TEX
=SML
val Ûlemma2Ý = modal_taut_rule¬Valid((%Box%R(³A) ´ ³A) ´ (A ´ %Diamond%R A))®;
=TEX
=GFT HOL Output
val lemma2 = ô Valid ((%Box% R (³ A) ´ ³ A) ´ A ´ %Diamond% R A) : THM
=TEX
=SML
val Ûresult1Ý = save_thm("result1", modal_mp_rule lemma2 lemma1);
=TEX
=GFT HOL Output
val result1 = Reflexive R ô Valid (A ´ %Diamond% R A) : THM
=TEX
=SML
val Ûlemma3Ý = modal_taut_rule¬Valid((%Box%R A ´ A) ´ (A ´ %Diamond%R A) ´ (%Box%R A ´ %Diamond%R A))®;
=TEX
=GFT HOL Output
val lemma3 = ô Valid ((%Box% R A ´ A) ´ (A ´ %Diamond% R A) ´ %Box% R A ´ %Diamond% R A) : THM
=TEX
=SML
val Ûlemma4Ý = axiom1_rule ¬Valid(%Box%R A ´ A)®;
=TEX
=GFT HOL Output
val lemma4 = Reflexive R ô Valid (%Box% R A ´ A) : THM
=TEX
=SML
val Ûlemma5Ý = modal_mp_rule lemma3 lemma4;
=TEX
=GFT HOL Output
val lemma5 = Reflexive R ô Valid ((A ´ %Diamond% R A) ´ %Box% R A ´ %Diamond% R A) : THM
=TEX
=SML
val Ûresult2Ý = save_thm("result2", modal_mp_rule lemma5 result1);
=TEX
=GFT HOL Output
val result2 = Reflexive R ô Valid (%Box% R A ´ %Diamond% R A) : THM
=TEX
\pagebreak
\section{PRACTICAL SYSTEMS}
While based on a semantics similar to the semantics discussed here,
systems of modal logic intended for practical applications,
e.g. for program verification or protocol verification, will
involve application-specific syntactic features. It is important
for the ease of use of proof tools that the user should
interact with the tool using the natural formalism for the task at hand.
As we have seen, this can come with very little extra work in the case of
a sufficiently simple logical language.

Proof support offering this feature for more complex languages
may be supplied by combining
a semantic approach like the one given here  with use of the facilities
offered by the HOL proof tool for manipulating syntax.
This technique is usually referred to as {\em semantic embedding} (as
opposed to a {\em syntactic} treatment, in which one would use HOL to reason
about syntactic notions, e.g. inference rules, rather than
semantic ones, e.g. the accessibility relation in the present treatment of
modal propositional logic).

In the semantic embedding technique,
sentences of the language to be supported are represented by
semantically equivalent HOL terms.
A parser maps sentences in the desired
concrete syntax to their HOL representation and a pretty-printer automatically
inverts this mapping when terms are displayed.
In the simple example we have given here the parser and pretty-printer
could be very easily constructed modifications of the HOL parser
and pretty-printer which would suppress the appearance of
the validity operator.
Tools assisting in the production of parsers and pretty-printers are
supplied as part of the ICL HOL system.

On the basis of theorems proved about the semantic objects,
proof procedures, analogous to the rules we have implemented in
the present document,
may be produced which preserve the required syntax as far as the user
is concerned.
Such procedures may often be produced quite
readily by customising or specialising existing proof procedures for HOL.
As in our example,
if valid inference rules for the language are already known, then they
can be used as the basis for the design of such proof procedures.

An important advantage of the semantic embedding techniques is
that, compared with other approaches, such as coding a complete system
for manipulating syntax from scratch,
it drastically reduces the amount of code in which
errors can make the system inconsistent (i.e. allow the user to prove
an invalid result).

A system of this sort offering proof support for Z is currently being
prototyped in ICL and good results are emerging.
Z is in many respects much harder to accommodate than most of
the formalisms based on modal logics
which have been proposed for computer science applications, and so such
formalisms promise to be good applications for this semantic
embedding techniques.

{\small
\twocolumn[\section{INDEX}]\label{INDEX}
\printindex}
=TEX
\onecolumn
\appendix
\input{wrk022.thl.tex}
\end{document}


