=TEX
\documentstyle[hol,11pt,TQ,thlist]{article}
\makeatletter
\def˜{\@Mm{\diamondsuit}}
\makeatother
\ftlinepenalty=9999
\makeindex
\TPPproject{FORMAL METHODS UNIT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Modal Logic in HOL}  %% Mandatory field
\TPPref{DS/FMU/IED/SML013}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
%\TPPauthor{K.~Blackburn & WIN01}  %% Mandatory field
\TPPauthors{K.~Blackburn &WIN01\\R.D. Arthan &WIN01\\&}
\TPPauthorisation{R.B.~Jones & FMU Manager}
\TPPabstract{A semantic embedding of the possible
worlds semantics for the modal propositional calculus
in HOL is described and some well-known theorems about the
semantics are proved.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    R.D.~Arthan \\ K.~Blackburn
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{Document control}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history} 
First version.

\subsection{Changes forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document reports on a brief investigation into embedding the
possible worlds semantics for modal logic in HOL. 
\subsection{Introduction}
Modal propositional calculus is the ordinary propositional calculus
augmented with an additional connective $ÿ$. If $A$ is a proposition
the $ÿA$, the {\em necessitation} of $A$, was originally intended
to connote the idea that $A$ was, in some sense, a necessary rather
than a contingent fact. The well-known semantics for this calculus due to
Kripke, explicates this notion of necessity in terms of a system,
called a {\em frame} in the literature,
comprising a set of
{\em possible worlds} supplied with a relation of accessibility
between worlds. A proposition is viewed as necessary in a world
if its truth in a world, $x$, implies its truth in every world
accessible from $x$.

It turns out that by placing various requirements on the accessibility
relation, we arrive at semantics which interpret the
necessitation operator in interesting and useful ways.
For example, well-founded accessibility relations correspond to
a view of $ÿ$ which is closely related to the provability
predicate for Peano arithmetic (see \cite{Boolos79}.
Various forms of linear ordering correspond to a view of $ÿ$
as a temporal operator.

In the sequel we are going to formalise the possible worlds semantics
in HOL. We will also prove the following connection between
certain axioms which are commonly used in various modal calculi
and conditions on the accessibility relation. These results are
well-known (see, for example, \cite{Boolos79}), but it is instructive
to see how easy they are to prove in the HOL framework for modal
logic which we construct.

\begin{tabular}{|l|l|l|}
Axiom 1 & $ÿAäA$ & Reflexive \\\hline 
Axiom 2 & $ÿAäÿÿA$ & Transitive \\\hline 
Axiom 3 & $Aäÿ˜A$ & Symmetric \\\hline 
Axiom 4 & $˜Aäÿ˜A$ & Euclidean \\\hline 
\end{tabular}

\subsection{HOL Preamble}
The following HOL commands create a new HOL theory in which
we will save our definitions and theorems.

=SML
open_theory"pair";
new_theory"wrk022";
=IGN
open_theory"pair";
delete_theory"modal_logic";
ReaderWriterSupport.PrettyNames.add_new_symbols[(["box"], Value"ÿ", ReaderWriterSupport.PrettyNames.Simple)];
ReaderWriterSupport.PrettyNames.add_new_symbols[(["diamond"], Value"˜", ReaderWriterSupport.PrettyNames.Simple)];

=TEX
\section{AUXILIARY  DEFINITIONS}
We will need the notion of a reflexive relation in the sequel.
We define this here:
»
	Reflexive: ('a ã 'a ã BOOL) ã BOOL
…
	Érelé Reflexive rel Ç Éxé rel x x
À
»
	Transitive: ('a ã 'a ã BOOL) ã BOOL
…
	Érelé Transitive rel Ç Éx y zé rel x y Ä rel y z ä rel x z
À
 
»
	Symmetric: ('a ã 'a ã BOOL) ã BOOL
…
	Érelé Symmetric rel Ç Éx yé rel x y ä rel y x
À
 
»
	Euclidean: ('a ã 'a ã BOOL) ã BOOL
…
	Érelé Euclidean rel Ç Éx y zé rel x y Ä rel x z ä rel y z
À
 

\section{POSSIBLE WORLD SEMANTICS IN HOL}
\subsection{Frames}
In a set-theoretic treatment a frame consists of a non-empty set $W$, of
{\em possible worlds}, equipped with a binary relation, $R$, the
{\em accessibility} relation. We will use a type variable
$'W$ to represent the possible worlds, so that our general treatment
can be instantiated to a particular type of possible worlds.
We can thus capture the notion
of a frame using the following type abbreviation:
=SML
declare_type_abbrev ("FRAME", ["'W"], ª:'W ã 'W ã BOOLº);
=TEX
The above declaration introduces a new type abbreviation $FRAME$ with a single
formal parameter $'W$; The effect of the declaration is that, for example,
the type expression  ª{:}(Ü)FRAMEº will represent, the type
ª:Ü ã Ü ã BOOLº of two-place propositional functions, i.e. binary
relations, on the type $Ü$ of natural numbers. Thus a value
of type ª{:}(Ü)FRAMEº can be viewed as a frame in which the possible
worlds are numbers.

We will always use the variable $R$ for an accessibility relation,
and $x$, $y$ and $z$ for worlds. 
=TEX
\subsection{Valuations}
A {\em valuation} will be a function assigning a truth-value to every possible
world. In a syntactic treatment we would work with an {\em evaluator}
assigning valuations in this sense to the propositional variables. In our
approach we can use HOL variables of the appropriate type to represent
the semantics directly. We use the following type abbreviation for
valuations:
=SML
declare_type_abbrev ("VALUATION", ["'W"], ª:'W ãBOOLº);
=TEX
Thus, for example, a value of type ª{:}(Ü)VALUATIONº is a propositional function on
the natural numbers.

We will use the variables $A$, $B$ and $C$ for valuations.
\subsection{Propositional Connectives}
It is straightforward to give the semantics of the various
propositional connectives.
In each case the modal version of a connective
combines the valuations which are its operands to give a valuation
which asserts that for every world
the corresponding propositional connective holds
between the values taken by the operands in that world.
The definitions of these connectives are therefore independent of
any accessibility relation.

We will take conjunction and implication as our primitive connectives
and define others in terms of them as needed:

»
	ã_modal: ('W)VALUATION ã ('W)VALUATION ã ('W)VALUATION
…
	ÉA B xé ã_modal A B x Ç A x ä B x
À

 
»
	å_modal: ('W)VALUATION ã ('W)VALUATION
…
	ÉA xé å_modal A x Ç åA x
À

In making the above definitions we had to distinguish the names for the modal
connectives from those already reserved for the propositional connectives
in HOL. The alias mechanism supported by ICL HOL allows us to use
the usual names instead as syntactic abbreviations. The following
declarations achieve this:
=SML
declare_alias("ã", ªã_modal: ('W)VALUATION ã ('W)VALUATION ã ('W)VALUATIONº);
declare_alias("å", ªå_modal: ('W)VALUATION ã ('W)VALUATIONº);
=TEX
To see how this works, we can now use a more natural syntax for
the definition of modal disjunction and conjunction:

»
	Å_modal: ('W)VALUATION ã ('W)VALUATION ã ('W)VALUATION
…
	ÉA Bé Å_modal A B = (åA ã B)
À

»
	Ä_modal: ('W)VALUATION ã ('W)VALUATION ã ('W)VALUATION
…
	ÉA Bé Ä_modal A B = å(A ã åB)
À

Note here that $å$ and $ä$ refer to the modal connectives. The HOL
$å$ and $ä$ may still be used --- the ICL HOL system
identifies the appropriate internal representation on the basis of the types
of the operands.

As with the other connectives we make alias declarations for the
modal disjunction and conjunction:
=SML
declare_alias("Å", ªÅ_modal: ('W)VALUATION ã ('W)VALUATION ã ('W)VALUATIONº);
declare_alias("Ä", ªÄ_modal: ('W)VALUATION ã ('W)VALUATION ã ('W)VALUATIONº);
=TEX


\subsection{Necessitation}
The necessitation operator, $ÿ$, is defined with respect to
a given frame $R$; The necessitation of a valuation, $A$, is the valuation
which is true at a world $W$ if and only if $A$ is true at every world
accessible from $W$. The HOL definition of this is as follows
»
	ÿ: ('W)FRAME ã ('W)VALUATION ã ('W)VALUATION
…
	ÉR A xé ÿR A x Ç Éyé R x y ä A y
À

\subsection{Possibility}
The possibility operator, $˜$, is defined in terms of
necessitation and negation as follows:
»
	˜: ('W)FRAME ã ('W)VALUATION ã ('W)VALUATION
…
	ÉR Aé ˜R A = å(ÿR(åA))
À

\subsection{Validity}
A valuation is valid if it is true in every world. Thus:
»	
Valid: ('W)VALUATION ã BOOL
…
	ÉAé Valid A Ç Éxé A x
À

\subsection{SOME GENERAL THEOREMS}
Using the definitions of the previous section we can now prove
some well-known general results about the the modal operators.
These results would be the inference rules
and axioms in a syntactic treatment of various modal logic.
A systematic treatment of this subject may be found in \cite{Boolos79}.


\subsection{Modus Ponens}
The rule of modus ponens for modal logic is given by the following
HOL theorem.
As an inference rule, modus ponens says that from $A$ and
$A\,ä\,B$ we may infer $B$. We find from the semantic formulation
we will now state and prove that this does not depend
on the accessibility relation:
=SML
push_goal([], ªÉA Bé Valid A Ä Valid (A ã B) ä Valid Bº);
=TEX
The above command initiates a session with the ICL HOL subgoal package,
the standard means of finding proofs by a goal oriented search.
Goals are reduced to subgoals by applying tactics. For example.
=SML
a(rewrite_tac (map snd (get_defns"-")));
a(REPEAT strip_tac);
a(POP_ASM_T (ante_tac o simple_É_elimªxº) THEN asm_rewrite_tac[]);
=TEX
=SML
val ‚modal_mp_thm· = save_thm("modal_mp_thm", pop_thm());
=TEX
\subsection{Necessitation}
The rule of necessitation says that from $A$ we may infer$ÿA$.
Again this rule does not holds for any accessibility relation.
=SML
push_goal([], ªÉR:('W) FRAME; Aé Valid A ä Valid (ÿR A)º);
=TEX
=SML
a(rewrite_tac (map snd (get_defns"-")));
a(REPEAT strip_tac THEN asm_rewrite_tac[]);
=TEX
=SML
val ‚necessitation_thm· = save_thm("necessitation_thm", pop_thm());
=TEX
\subsection{Axiom 1}
This axiom holds for reflexive accessibility relations:
=SML
push_goal([], ªÉRé Reflexive R ä ÉAé Valid(ÿR A ã A)º);
=TEX
=SML
a(rewrite_tac (map snd (get_defns"-")));
a(REPEAT strip_tac);
a(POP_ASM_T (ante_tac o simple_É_elimªxº) THEN asm_rewrite_tac[]);
=TEX
=SML
val ‚axiom1_thm· = save_thm("axiom1_thm", pop_thm());
=TEX
\subsection{Axiom 2}
This axiom holds for reflexive accessibility relations:
=SML
push_goal([], ªÉRé Transitive R ä ÉAé Valid(ÿR A ã ÿR (ÿR A))º);
=TEX
=SML
a(rewrite_tac (map snd (get_defns"-")));
a(REPEAT strip_tac);
a(DROP_NTH_ASM_T 4 (ante_tac o list_simple_É_elim[ªxº, ªyº, ªy'º]) THEN asm_rewrite_tac[]);
=TEX
=SML
val ‚axiom_thm2· = save_thm("axiom2_thm", pop_thm());
=TEX
\subsection{Axiom 3}
This axiom holds for symmetric accessibility relations:
=SML
push_goal([], ªÉRé Symmetric R ä ÉAé Valid(A ã ÿR (˜R A))º);
=TEX
=SML
a(rewrite_tac (map snd (get_defns"-")));
a(REPEAT strip_tac);
a(DROP_NTH_ASM_T 3 (ante_tac o list_simple_É_elim[ªxº, ªyº]) THEN asm_rewrite_tac[]);
a(REPEAT strip_tac THEN simple_Ñ_tacªxº THEN asm_rewrite_tac[]);
=TEX
=SML
val ‚axiom_thm3· = save_thm("axiom3_thm", pop_thm());
=TEX
\subsection{Axiom 3}
This axiom holds for euclidean accessibility relations:
=SML
push_goal([], ªÉRé Euclidean R ä ÉAé Valid(˜R A ã ÿR (˜R A))º);
=TEX
=SML
a(rewrite_tac (map snd (get_defns"-")));
a(REPEAT strip_tac);
a(DROP_NTH_ASM_T 4 (ante_tac o list_simple_É_elim[ªxº, ªy'º, ªyº]) THEN asm_rewrite_tac[]);
a(REPEAT strip_tac THEN simple_Ñ_tacªyº THEN asm_rewrite_tac[]);
=TEX
=SML
val ‚axiom_thm4· = save_thm("axiom4_thm", pop_thm());
=TEX
\appendix
\input{wrk022.thl.tex}
\end{document}
