######################################################################
#
#	pptex.mkf $Header: /Users/rda/pp/pptex/RCS/pptex.mkf,v 1.46 2014/05/31 12:58:10 rda Exp rda $
#
#	makefile for the PPTEX directory for ProofPower
#
######################################################################

# suffixes known
.SUFFIXES: .db .ldd1 .ldd2 .log .lot .sh .doc .tex .tch .pp

# default make target.  displays a list of more useful targets
default:
	@echo "The following are some of the more useful make commands:"
	@echo " "
	@echo "make -f pptex.mkf inst        - builds and installs the pptex files"
	@echo "make -f pptex.mkf srcrel      - makes the pptex source release"
	@echo "make -f pptex.mkf src         - makes the pptex source files"
	@echo "make -f pptex.mkf doc         - makes the pptex documents"
	@echo "make -f pptex.mkf bin         - makes binaries plus what is needed to use them"
	@echo "make -f pptex.mkf test        - runs some tests"
	@echo "make -f pptex.mkf build       - build the binaries for use in the current directory"
	@echo "make -f pptex.mkf packinglist - lists the pptex source file names"
	@echo " "
	@echo "Various environment variables influence the behaviour:"
	@echo " "
	@echo "    PPCOMPILER  - compiler to use (POLYML or SMLNJ)"
	@echo "    PPTARGETDIR - target installation directory"
	@echo "                  (../../bld if not set)"
	@echo "    PPVER       - product version"
	@echo "                  (taken from file version if not set)"


######################################################################
#
#	Makefile Definitions
#
######################################################################

PRODNAME=PPTex
SHORTNAME=pptex
VERSION=$(shell echo $${PPVER:-`cat version  2>/dev/null || echo XXX.YYY.ZZZ`})
RELDIR=$(shell echo "$${PPTARGETDIR:-../../bld}")
PRODUCT=$(PRODNAME)-$(VERSION)
CWD=$(shell pwd)
OS=$(shell uname -s | dd conv=lcase 2>/dev/null)
HAVERCS=$(shell (test -d RCS && echo y ) || echo n)
# Distinctive tag for binary distribution file
BINTAG=$(shell eval `arch-os`; echo $$ARCH-$$OS | dd conv=lcase 2>/dev/null)

CC=gcc

# Makefiles
PPTEXMKF = pptex.mkf

# contents of the pptex bin directory
IMP100SCRIPTS =  conv_ascii
IMP100SCRIPTS += conv_extended
IMP100SCRIPTS += docdvi
IMP100SCRIPTS += docpr
IMP100SCRIPTS += docsml
IMP100SCRIPTS += doctch
IMP100SCRIPTS += doctds
IMP100SCRIPTS += doctex
IMP100SCRIPTS += ppdvi
IMP100SCRIPTS += pppr
IMP100SCRIPTS += ppsml
IMP100SCRIPTS += pptch
IMP100SCRIPTS += pptds
IMP100SCRIPTS += pptex
IMP100SCRIPTS += pptexenv
IMP100SCRIPTS += texdvi

PPTEXBINRELEASE = $(IMP100SCRIPTS)
PPTEXBINRELEASE += sieve
PPTEXBINRELEASE += findfile
PPTEXBINRELEASE += pp_file_conv

# contents of the pptex etc directory
PPTEXETCRELEASE = sieveview
PPTEXETCRELEASE += utf8svf
PPTEXETCRELEASE += utf8skw
PPTEXETCRELEASE += sievekeyword
PPTEXETCRELEASE += minkeys
PPTEXETCRELEASE += mathmlkeywords

# contents of the pptex tex directory
PPTEXTEXRELEASE =  TQ.sty
PPTEXTEXRELEASE += TQa4.sty
PPTEXTEXRELEASE += A4.sty
PPTEXTEXRELEASE += hol1.sty
PPTEXTEXRELEASE += ProofPower.sty
PPTEXTEXRELEASE += Lemma1.sty
PPTEXTEXRELEASE += lemma1.eps
PPTEXTEXRELEASE += fmu.bst
PPTEXTEXRELEASE += fmu.bib
PPTEXTEXRELEASE += hyperbasics.sty

# documents
PPTEXDOCRELEASE = usr001.dvi

# manual pages
MANFILES = conv_ascii.1
MANFILES += docdvi.1
MANFILES += docpr.1
MANFILES += doctex.1
# can't immediately see how to build these!
# MANFILES += ppdvi.1
# MANFILES += pppr.1
# MANFILES += pptex.1
MANFILES += pptexenv.1
MANFILES += texdvi.1

# .doc files for (old) packing list

PACKDOCS=
PACKDOCS+= dtd100.doc
PACKDOCS+= imp054.doc
PACKDOCS+= imp100.doc
PACKDOCS+= mdt096.doc
PACKDOCS+= mdt100.doc
PACKDOCS+= usr001.doc
PACKDOCS+= usr024.doc
PACKDOCS+= int006.doc
PACKDOCS+= int007.doc

OTHERDOCS= 
OTHERDOCS+= dtd001.doc
OTHERDOCS+= dtd002.doc
OTHERDOCS+= dtd096.doc
OTHERDOCS+= dtd108.doc
OTHERDOCS+= dtd122.doc

IMPDOCS=
IMPDOCS+= imp001.doc
IMPDOCS+= imp002.doc
IMPDOCS+= imp096.doc
IMPDOCS+= imp108.doc
IMPDOCS+= imp122.doc
IMPDOCS+= imp123.doc

DOCFILES=$(PACKDOCS) $(OTHERDOCS) $(IMPDOCS)

# .pp files

PACKPPS= $(PACKDOCS:.doc=.pp)
OTHERPPS= $(OTHERDOCS:.doc=.pp)
IMPPPS= $(IMPDOCS:.doc=.pp)

PPFILES= $(DOCFILES:.doc=.pp)

# packing list for the developer source release (target src).
PACKINGLIST= $(PACKDOCS)
PACKINGLIST+= A4.sty
PACKINGLIST+= Lemma1.sty
PACKINGLIST+= ProofPower.sty
PACKINGLIST+= TQ.sty
PACKINGLIST+= TQa4.sty
PACKINGLIST+= findfile.c
PACKINGLIST+= fmu.bib
PACKINGLIST+= fmu.bst
PACKINGLIST+= hol.svf
PACKINGLIST+= hyperbasics.sty
PACKINGLIST+= lemma1.eps
PACKINGLIST+= mathmlkeywords.json
PACKINGLIST+= mdt096r
PACKINGLIST+= minkeys.skw
PACKINGLIST+= mtreport.sh
PACKINGLIST+= pptex.mkf
PACKINGLIST+= pptex.skw
PACKINGLIST+= ppunicodetab.h
PACKINGLIST+= ppusr.sty
PACKINGLIST+= pp_file_conv.c
PACKINGLIST+= sieve.c
PACKINGLIST+= unicodepptab.h
PACKINGLIST+= usr024_data.txt
PACKINGLIST+= utf8module.c
PACKINGLIST+= utf8module.h
PACKINGLIST+= utf8pptex.skw
PACKINGLIST+= $(MANFILES)

# packing list for user source release
DISTPACKINGLIST=$(PACKINGLIST)

######################################################################
#
#	Building pptex
#
######################################################################

pptex: sieve $(PPTEXBINRELEASE) $(PPTEXETCRELEASE)  $(PPTEXTEXRELEASE)

#utf8module.o: ppunicodetab.h unicodepptab.h

$(IMP100SCRIPTS): pp_file_conv sieve sieveview sievekeyword utf8svf utf8skw
	sieve sml <imp100.pp

findfile: findfile.o utf8module.o utf8module.h
	$(CC) -o findfile -DVERSION="\"$(PPVER)\"" $(CFLAGS) utf8module.o findfile.o

sieve: sieve.o utf8module.o utf8module.h
	$(CC) -o sieve -DVERSION="\"$(PPVER)\"" $(CFLAGS) utf8module.o sieve.o

pp_file_conv: pp_file_conv.o utf8module.o utf8module.h
	$(CC) -o pp_file_conv -DVERSION="\"$(PPVER)\"" $(CFLAGS) utf8module.o pp_file_conv.o

sievekeyword: utf8pptex.skw
	cat utf8pptex.skw > $@

utf8skw: utf8pptex.skw
	cat utf8pptex.skw > $@

minkeys: minkeys.skw
	cat minkeys.skw > $@

holutf8.svf: hol.svf
	pp_file_conv < hol.svf > $@

sieveview: hol.svf
	cat hol.svf > $@

utf8svf: holutf8.svf
	cat holutf8.svf > $@

hol1.sty: imp054.sml
	@sed -e 's/[    ]%.*$$//' \
	-e 's/^[        ][      ]*//' \
	-e 's/[         ][      ]*$$//' imp054.sml > hol1.sty


usr001.dvi: hol1.sty USR.sty usr001.pp usr024_data.tex fmu.bib fmu.bst
	pp_file_conv -u < usr001.pp > usr001.doc
	doctex usr001
	texdvi usr001 > usr001.dvi.ldd1 </dev/null
	- bibtex usr001
	texdvi usr001 > usr001.dvi.ldd2 </dev/null
	texdvi usr001

usr024_data.tex: usr024_data.txt
	@sed	-e /PRODUCT/s#PRODUCT#$(PRODUCT)#g \
		-e "/DATETIME/s#DATETIME#`date +'%H:%M:%S %d/%m/%Y'`"#g \
		-e "/YEAR/s#YEAR#`date +'%Y'`"#g \
		<usr024_data.txt >usr024_data.tex

USR.sty: usr024.pp usr024.sml usr024_data.tex
	LC_ALL=C LANG=C LANGUAGE=C sed -e 's/[ 	]%.*$$//' \
	-e 's/^[ 	][ 	]*//' \
	-e 's/[ 	][ 	]*$$//' usr024.sml > USR.sty


######################################################################
#
#	entity name table
#
######################################################################

# The file htmlmathml.json has been downloaded from the W3C web site where it was
# referred to by the MathML 3.0 standard.
# The following bits of Perl transform this into an SML definition of a list of
# entity name/ Unicode code pairs (discarding the multiple character entitites in
# the process).
# The resulting file is then loaded by imp122 and used to implement some of the
# ProofPower document coding translators.

entities.sml: htmlmathml.json
	printf "val entity_table = tl [(\"\", 0wx0)" >  entities.sml
	perl -ne '/^\s*(\"[^"]*\"):\s*"\\u([^"\\]*)",?\s*$$/ && print ",\n\t\($$1, 0wx$$2\)"' htmlmathml.json >> entities.sml
	printf "\n];\n" >> entities.sml

entities.h: htmlmathml.json
	printf "typedef int unicode;\n" >  entities.h
	printf "typedef struct {\n" >>  entities.h
	printf "	const char *pp_string;\n" >>  entities.h
	printf "	unicode code_point;} ent_to_unicode_entry;\n" >>  entities.h
	printf "#define ENT_TO_UNICODE_LEN 2025\n" >>  entities.h
	printf "static ent_to_unicode_entry entity_table [ENT_TO_UNICODE_LEN] = {\n\t{\"\",0wx0000}" >>  entities.h
	perl -ne '/^\s*("[^"]*"):\s*"\\u([^"\\]*)",?\s*$$/ && print ",\n\t\{$$1, 0wx$$2\}"' htmlmathml.json >> entities.h
	printf "\n};\n" >> entities.h

mathmlkeywords: htmlmathml.json
	printf "val entity_table = tl [(\"\", 0wx0)" >  entities.sml
	perl -ne '!/^\s*\"((ne|se|updown)arrow|circ|equiv|real)\":.*$$/ && /^\s*\"([^"]*)\":\s*"\\u([^"\\]*)",?\s*$$/ && print "%$$1%\t\t\tsimple\t0x00$$2\n"' htmlmathml.json >> mathmlkeywords

imp122.ldd: entities.sml entities.h

######################################################################
#
#	creating pp-unicode tables
#
######################################################################

# To build pputf8 we have to run an SML program, and this must work both
# with polyml and SMLNJ, so the following has been retrofitted from hol.mkf
# where hitherto the first hol database was constructed.
# The effect is to set the variable RUNSML to the command necessary for
# running an SML file, which in the case of polyml has built an image
# pp-ml including the compatibility module imp108.

# Compiler specifics:
ifeq ($(PPCOMPILER), POLYML)
# Directories for the poly stuff:
POLYHOME=$(shell echo $${PPPOLYHOME:-/usr/local})
POLYLIBDIR=$(POLYHOME)/lib
# Command to run ML
RUNML="poly"
else
ifeq ($(PPCOMPILER), SMLNJ)
# Command to run ML
RUNML="sml"
endif
endif

# sml for generating headers
PPUNICODESMLFILES=dtd108.sml imp108.sml dtd001.sml imp001.sml dtd002.sml imp002.sml
PPUNICODESMLFILES+=dtd122.sml imp122.sml dtd096.sml

$(PPUNICODESMLFILES): %.sml : %.doc sieve
		   sieve -e sml < $*.doc > $*.sml

PPUNICODECMD= \
	use\"dtd108.sml\"; use\"imp108.sml\"; \
	use\"dtd002.sml\"; use\"imp002.sml\"; \
	use\"dtd001.sml\"; use\"imp001.sml\"; \
	use\"dtd122.sml\"; use\"imp122.sml\"; \
	use\"dtd096.sml\";

bld: entities.sml entities.h ppunicodetab.h unicodepptab.h

ppunicodetab.h unicodepptab.h pp2unisktrans.pl ppunicodetab.ldd: $(IMP100SCRIPTS) $(PPUNICODESMLFILES) dtd096.sml imp122.sml
	echo "$(PPUNICODECMD)" | $(RUNML) > ppunicodetab.ldd

######################################################################
#
#	Generating keyword file for MathML entities
#
######################################################################



######################################################################
#
#	tests
#
######################################################################

PPTEXMDTTDS=mdt096.ttd mdt100.ttd

mdt096.ttd: mdt096r utf8svf sievekeyword

test:	usr001.dvi int006.dvi int007.dvi $(PPTEXMDTTDS) mtreport
	@echo "Please inspect usr001.dvi, int006.dvi int007.dvi"
	@grep 'module' $(PPTEXMDTTDS)
	@-grep 'abandoning file|+++ Compiled.*Failed'  \
		$(PPTEXMDTTDS) || true
	mtreport $(PPTEXMDTTDS)

testclean:
	rm -f $(PPTEXMDTSMLS) $(PPTEXMDTTDS)

retest: testclean test

#####################################################################
#
#	Constructing release or installation directories
#
######################################################################

reldir:
	if [ "$${PPTARGETDIR:-}" = "" ]; \
	then \
		rm -rf "$(RELDIR)"; \
	fi
	[ -d   "$(RELDIR)" ] || mkdir "$(RELDIR)"
	

bindir: reldir
	[ -d   "$(RELDIR)"/bin ] || mkdir "$(RELDIR)"/bin
	[ -d   "$(RELDIR)"/etc ] || mkdir "$(RELDIR)"/etc
	[ -d   "$(RELDIR)"/tex ] || mkdir "$(RELDIR)"/tex

docdir: reldir
	[ -d   "$(RELDIR)"/doc ] || mkdir "$(RELDIR)"/doc

srcdir : reldir
	[ -d   "$(RELDIR)"/src ] || mkdir "$(RELDIR)"/src

mandir:	reldir
	[ -d   "$(RELDIR)"/man ] || mkdir "$(RELDIR)"/man
	[ -d   "$(RELDIR)"/man/man1 ] || mkdir "$(RELDIR)"/man/man1

binrel	: bindir  $(PPTEXBINRELEASE) $(PPTEXETCRELEASE)  $(PPTEXTEXRELEASE)
	cp $(PPTEXBINRELEASE) "$(RELDIR)"/bin
	cp $(PPTEXETCRELEASE) "$(RELDIR)"/etc
	cp $(PPTEXTEXRELEASE) "$(RELDIR)"/tex
	chmod -R a-w "$(RELDIR)"
	chmod -R g-w "$(RELDIR)"
	chmod -R u+w "$(RELDIR)"

docrel	:  docdir 	$(PPTEXDOCRELEASE)  \
		mandir $(MANFILES)
	cp $(PPTEXDOCRELEASE) "$(RELDIR)"/doc
	chmod -R a-w "$(RELDIR)"
	chmod -R g-w "$(RELDIR)"
	chmod -R u+w "$(RELDIR)"
	cp $(MANFILES) "$(RELDIR)"/man/man1

build	: $(PPTEXBINRELEASE) $(PPTEXETCRELEASE) $(PPTEXTEXRELEASE)

bininst:	binrel

inst:	binrel docrel

# useful target to print out the names of all the files in the source release

packinglist:
	@echo $(PACKINGLIST)

######################################################################
#
#	Tidying Up
#
######################################################################

clean:
	rm -f *.aux *.doctex *.dvi *.idx *.log *.sid *.tex *.toc \
		*.sml *.bbl *.blg *.ldd* *.o \
		$(PPTEXBINRELEASE) $(PPTEXETCRELEASE) \
		USR.sty hol1.sty holutf8.svf utf8svf utf8skw \
		doctex_common pptex_common \
		entities.sml entities.h mtreport
		
######################################################################
#
#	Generic Rules
#
######################################################################

%.doc: %.pp pp_file_conv
	pp_file_conv -u < $*.pp > $*.doc

%.sml: %.pp
	ppsml $*

%.doctex: %.doc
	doctex $*
	mv $*.tex $*.doctex

%.tex: %.doc
	doctex $*

%.dvi: %.tex fmu.bib fmu.bst
	texdvi $*

%.ttd:	%.pp sieve sieveview pp_file_conv
	sieve sml <$*.pp >$*.ttd

%.texdiff: %.doctex %.tex
	diff $*.doctex $*.tex > $*.texdiff
