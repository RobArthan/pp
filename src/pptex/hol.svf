# $Id$

# sieve command file for the "hol1" style options and the daz project


##########################################################################
##########################################################################
#
# sievefile macros available:
#
#	$$	A single dollar sign
#	$&	The whole directive line
#	$*	All the directive line arguments
#	$0 $1 $2 $3 $4 $5 $6 $7 $8 $9
#		Individual directive line arguments

##########################################################################
##########################################################################
#
# Text for TeX and LaTeX

=TEX		tex
		cat char kw

=INLINEFT	tex
	echonl \begin{INLINEFT}%
	cat char kw kwflag kwwarn verbatim
	echonl \end{INLINEFT}%

##########################################################################
##########################################################################
#
# Standard ML categories

# Categories normally used for Extended Standard ML code which
# is to be read by the ICL HOL reader writer.  "SMLLABELLED"
# allows a label other than "SML".

=SML	sml
	cat kw kwwarn delindex

=SML tex
	echonl \begin{GFT}{SML}
	cat verbatim kw kwwarn kwflag
	echonl \end{GFT}

=SMLLABELLED sml
	arguments 0 9
	cat kw kwwarn delindex

=SMLLABELLED tex
	arguments 0 9
	argoptions latex
	echonl \begin{GFT}{$*}
	cat verbatim kw kwwarn kwflag
	echonl \end{GFT}

=SMLPLAIN sml
	arguments 0 9
	cat delindex

=SMLPLAIN tex
	arguments 0 9
	argoptions latex
	echonl \begin{GFTXQ}{$*}
	cat verbatim
	echonl \end{GFTXQ}

# Category normally used for Standard ML code to be read directly
# by PolyML, it is converted into pure Standard ML.

=SMLLITERAL sml
	cat mlchar

=SMLLITERAL tex
	echonl \begin{GFTSHOW}{SML}
	cat verbatim kw
	echonl \end{GFTSHOW}


# Like =SML but fonts are toggled
=ML	sml
	cat kw delindex kwwarn

=ML tex
	echonl \begin{MLCode}{SML}
	cat verbatim kw kwwarn kwflag
	echonl \end{MLCode}

##########################################################################
##########################################################################
#
# Material for help files

=DOC tex
	nl
	echonl \begin{HELPDOC}
	echonl \begin{GFT}{SML}
	cat kw kwflag kwwarn verbatim
	echonl \end{GFT}

=DOC sml
	cat kw delindex kwwarn

=SYNOPSIS tex
	echonl \paragraph{Synopsis}
	cat char kw

=DESCRIBE tex
	echonl \paragraph{Description}
	cat char kw

=FAILURE tex
	nl
	echonl \begin{GFT}{Errors}
	cat kw kwflag kwwarn verbatim
	echonl \end{GFT}

=FAILURE errors
	mlstring

# failure commentary - for tex consumption only. If this category is
# not preceded by an "=FAILURE" section then the document should have
# a "\paragraph{Failure}" added by its author at start of section

=FAILUREC tex
	cat char kw

=EXAMPLE tex
	echonl \begin{GFT}{Example}
	cat kw kwflag kwwarn verbatim
	echonl \end{GFT}

=USES tex
	echonl \paragraph{Uses}
	cat char kw

=COMMENTS tex
	echonl \paragraph{Uses}
	cat char kw

=SEEALSO tex
	echonl \paragraph{See Also}
	cat char kw

=KEYWORDS tex
	echonl \paragraph{Keywords}
	cat char kw

# After an =ENDDOC return to same as =TEX
=ENDDOC tex
	echonl \end{HELPDOC}
	nl
	cat char kw

##########################################################################
##########################################################################
#
# Theory design stuff

=THDOC thydoc
	cat kw delindex
=THSML thydoc
	cat kw delindex

=THDOC tex
	nl
	echonl \begin{HELPDOC}
	echonl \begin{GFT}{Theory Design}
	cat kw kwflag kwwarn verbatim
	echonl \end{GFT}

=THSML tex
	echonl \begin{GFT}{Theory Design}
	cat kw kwflag kwwarn verbatim
	echonl \end{GFT}

##########################################################################
##########################################################################
#
# Optionally labelled segments of formal text which are not
# wanted in Standard ML.

=GFT tex
	arguments 0 9
	argoptions latex
	echonl \begin{GFT}{$*}
	cat kw kwflag kwwarn verbalone verbatim
	echonl \end{GFT}

=GFTXQ tex
	arguments 0 9
	argoptions latex
	echonl \begin{GFTXQ}{$*}
	cat verbatim verbalone
	echonl \end{GFTXQ}

=GFTSHOW tex
	arguments 0 9
	argoptions latex
	echonl \begin{GFTSHOW}{$*}
	cat verbatim
	echonl \end{GFTSHOW}

##########################################################################
##########################################################################
#
# Z Stuff

# Z Schemas
ˇ  tex
	arguments 1 9
	argoptions latex
	echonl \begin{ZSchema}{$$$*$$}
	cat verbatim verbalone kw kwwarn kwflag
	echonl \end{ZSchema}

πˇ  tex
	arguments 1 9
	argoptions latex
	echonl \begin{ZSchemaInformal}{$$$*$$}
	cat verbatim verbalone kw kwwarn kwflag
	echonl \end{ZSchemaInformal}

ˇ  sml
	arguments 1 9
	echonl $&
	cat delindex kw kwwarn
	echonl à

# Z generic constants
ù  tex
	arguments 0 9
	argoptions latex
	echonl \begin{ZGenConst}{$$$*$$}
	cat verbatim verbalone kw kwwarn kwflag
	echonl \end{ZGenConst}

πù  tex
	arguments 0 9
	argoptions latex
	echonl \begin{ZGenConstInformal}{$$$*$$}
	cat verbatim verbalone kw kwwarn kwflag
	echonl \end{ZGenConstInformal}

ù  sml
	arguments 0 9
	echonl $&
	cat delindex kw kwwarn
	echonl à

# End of the above Z categories
à  tex
	cat char kw

# Z axiomatic description
πZAX  tex
	echonl \begin{ZAxDes}
	cat verbatim verbalone kw kwwarn kwflag
	echonl \end{ZAxDes}

πIZAX  tex
	echonl \begin{ZAxDesInformal}
	cat verbatim verbalone kw kwwarn kwflag
	echonl \end{ZAxDesInformal}

πZAX  sml
	echonl $&
	cat delindex kw kwwarn
	echonl ∞

# Other Z stuff
πZ  tex
	echonl \begin{ZOther}
	cat verbatim verbalone kw kwwarn kwflag
	echonl \end{ZOther}

πIZ  tex
	echonl \begin{ZOtherInformal}
	cat verbatim verbalone kw kwwarn kwflag
	echonl \end{ZOtherInformal}

πZ  sml
	echonl $&
	cat delindex kw kwwarn
	echonl ∞

# End of the above two
∞   tex
	cat char kw

##########################################################################
##########################################################################
#
# HOL stuff

# HOL constants
πHOLCONST  tex
	echonl \begin{HOLConst}
	cat verbatim verbalone kw kwwarn kwflag
	echonl \end{HOLConst}

πHOLCONST  sml
	echonl $&
	cat delindex kw kwwarn
	echonl ∞

πHOLLABPROD  tex
	argoptions latex
	arguments 1
	echonl {\underscoreoff
	echonl \begin{HOLLabProd}{$$$*$$}
	cat verbatim verbalone kw kwwarn kwflag
	echonl \end{HOLLabProd}
	echonl }

πHOLLABPROD  sml
	arguments 1
	argoptions delindex
	echonl $&
	cat delindex kw kwwarn
	echonl ∞

##########################################################################
##########################################################################
#
# Rules

=FRULE tex
	arguments 1 2
	argoptions latex
	echonl \begin{FRULE}{$1}{$2}
	cat kw kwflag kwwarn verbalone verbatim
	echonl \end{FRULE}

##########################################################################
##########################################################################
#
# Things for running the parser generator and creation of the
# system build scripts.

# SH --- run shells
=SH sml
	filter sh
=SH tex
	echonl \begin{GFT}{Bourne Shell}
	cat kw kwflag kwwarn verbatim
	echonl \end{GFT}

=CSH sml
	filter csh
=CSH tex
	echonl \begin{GFT}{C-Shell}
	cat kw kwflag kwwarn verbatim
	echonl \end{GFT}

# DUMP -- dump to a file
# VDUMP -- verbatim dump to a file

=DUMP sml
	arguments 1
	write $1 cat delindex

=DUMP tex
	arguments 1
	argoptions latex
	echonl \begin{GFT}{Text dumped to file $1}
	cat verbatim
	echonl \end{GFT}

=DUMPMORE sml
	arguments 1
	append $1 cat delindex

=DUMPMORE tex
	arguments 1
	argoptions latex
	echonl \begin{GFT}{Text appended to file $1}
	cat verbatim
	echonl \end{GFT}

=VDUMP sml
	arguments 1
	write $1 cat

=VDUMP tex
	arguments 1
	argoptions latex
	echonl \begin{GFTSHOW}{Text dumped to file $1}
	cat verbatim
	echonl \end{GFTSHOW}

=VDUMPMORE sml
	arguments 1
	append $1 cat

=VDUMPMORE tex
	arguments 1
	argoptions latex
	echonl \begin{GFTSHOW}{Text appended to file $1}
	cat verbatim
	echonl \end{GFTSHOW}

# INCLUDE --- include contents of file.
=INCLUDE sml
	filter cat `cat`
=INCLUDE tex
	echonl \begin{GFT}{Text included from the following files}
	cat verbatim
	echonl \end{GFT}


##########################################################################
##########################################################################
#
# Views for Theory Listings

=THEORYLISTINGBANNER tex
	echo {\underscoreoff\section{
	cat char kw
	echonl }}

=THEORYLISTINGSECTION tex
	echo {\underscoreoff\subsection{
	cat char kw
	echonl }}

=THEORYLISTINGSUBSECTION tex
	echo {\underscoreoff\subsubsection{
	cat char kw
	echonl }}

=THEORYLISTINGTRAILER tex
	ignore

=THEORYLISTINGTABLE tex
	echonl \begin{thlist}
	cat kw kwflag kwwarn verbatim
	echonl \end{thlist}

=THEORYLISTINGOTHER tex
	echonl \begin{thlist}
	cat kw kwflag kwwarn verbatim
	echonl \end{thlist}


##########################################################################
##########################################################################
#
# Miscellaneous categories

=IGNORE	ignore	ignore
=IGN	ignore	ignore
=TEST	ignore	ignore
=TEMP	ignore	ignore



##########################################################################
##########################################################################
#
# Extract narrative from a document

=TEX   narrative
	echonl $&
	cat

=SYNOPSIS   narrative
	echonl $&
	cat

=DESCRIBE   narrative
	echonl $&
	cat

=FAILURE   narrative
	echonl $&
	cat

=FAILUREC   narrative
	echonl $&
	cat

=USES   narrative
	echonl $&
	cat

=COMMENTS   narrative
	echonl $&
	cat

=ENDDOC   narrative
	echonl $&
	cat

à   narrative
	cat

∞   narrative
	cat

##########################################################################
##########################################################################
#
# Support for conversion to and from ASCII format
=CONVERT_FORMAT ascii
	cat convext
=CONVERT_FORMAT extended
	cat convkw


##########################################################################
##########################################################################
#
# Support for DAZ Web clauses (comprising Compliance Notation)

ˇ  zed
	arguments 1 9
	echonl $&
	cat delindex kw kwwarn
	echonl à

ù  zed
	arguments 0 9
	echonl $&
	cat delindex kw kwwarn
	echonl à

πZAX  zed
	echonl $&
	cat delindex kw kwwarn
	echonl ∞

πZ  zed
	echonl $&
	cat delindex kw kwwarn
	echonl ∞

πCN  tex
	echonl \begin{GFT}{Compliance Notation}
	cat verbatim verbalone kw
	echonl \end{GFT}

πCN  sml
	echonl $&
	cat delindex kw
	echonl ∞

=SMLZ	zed
	cat kw kwwarn delindex

=SMLZ tex
	echonl \begin{GFT}{SML for Z Type Checking}
	cat verbatim kw kwwarn kwflag
	echonl \end{GFT}

=TYPESTRUCT	imp
	cat kw kwwarn delindex

=TYPESTRUCT tex
	echonl \begin{GFT}{Implementation}
	cat verbatim kw kwwarn kwflag
	echonl \end{GFT}

=SMLLABELLED imp
	arguments 0 9
	cat kw kwwarn delindex

=SMLPLAIN imp
	arguments 0 9
	cat delindex

=SMLLITERAL imp
	cat mlchar

=SML	imp
	cat kw kwwarn delindex

=DOC	imp
	cat kw delindex kwwarn

##########################################################################
##########################################################################
#
# Support for DAZ Builds (which need Standard ML but no Z)

=SML	smlonly
	cat kw kwwarn delindex

=SMLLABELLED smlonly
	arguments 0 9
	cat kw kwwarn delindex


=SMLPLAIN smlonly
	arguments 0 9
	cat delindex


=SMLLITERAL smlonly
	cat mlchar

=ML	smlonly
	cat kw delindex kwwarn

=DOC smlonly
	cat kw delindex kwwarn

=SH smlonly
	filter sh

=CSH smlonly
	filter csh

=DUMP smlonly
	arguments 1
	write $1 cat delindex

=DUMPMORE smlonly
	arguments 1
	append $1 cat delindex

=VDUMP smlonly
	arguments 1
	write $1 cat

=VDUMPMORE smlonly
	arguments 1
	append $1 cat

=INCLUDE smlonly
	filter cat `cat`


##########################################################################
##########################################################################
# support for different ML compilers
#
# Poly/ML: POLYML
=POLYML sml ?PPCOMPILER=POLYML
	cat kw kwwarn delindex
=POLYML tex
	echonl \begin{GFT}{SML (for Poly/ML)}
	cat verbatim kw kwwarn kwflag
	echonl \end{GFT}
=INSTALLPP sml ?PPCOMPILER=POLYML
	echonl (PolyML.addPrettyPrinter)
	cat kw kwwarn delindex
=INSTALLPP tex
	echonl \begin{GFT}{Install Pretty-printer}
	cat verbatim kw kwwarn kwflag
	echonl \end{GFT}
=POLYSH sml ?PPCOMPILER=POLYML
	filter sh
=POLYSH tex
	echonl \begin{GFT}{Bourne Shell (for Poly/ML)}
	cat verbatim kw kwwarn kwflag
	echonl \end{GFT}
=POLYDUMPMORE sml ?PPCOMPILER=POLYML
	arguments 1
	append $1 cat delindex
# Standard ML of New Jersey: NJML:
=NJML sml ?PPCOMPILER=SMLNJ
	cat kw kwwarn delindex
=NJML tex
	echonl \begin{GFT}{SML (for Standard ML of New Jersey)}
	cat verbatim kw kwwarn kwflag
	echonl \end{GFT}
=INSTALLPP sml ?PPCOMPILER=SMLNJ
	echonl (PPCompiler.install_pp)
	cat kw kwwarn delindex
=NJMLSH sml ?PPCOMPILER=SMLNJ
	filter sh
=NJMLSH tex
	echonl \begin{GFT}{Bourne Shell (for Standard ML of New Jersey)}
	cat verbatim kw kwwarn kwflag
	echonl \end{GFT}
=NJMLDUMPMORE sml ?PPCOMPILER=SMLNJ
	arguments 1
	append $1 cat delindex
# MLton : MLTON
=MLTON sml ?PPCOMPILER=MLTON
	cat kw kwwarn delindex
=MLTON tex
	echonl \begin{GFT}{SML (for MLton)}
	cat verbatim kw kwwarn kwflag
	echonl \end{GFT}
=MLTONSH sml ?PPCOMPILER=MLTON
	filter sh
=MLTONSH tex
	echonl \begin{GFT}{Bourne Shell (for MLton)}
	cat verbatim kw kwwarn kwflag
	echonl \end{GFT}
=MLTONDUMPMORE sml ?PPCOMPILER=MLTON
	arguments 1
	append $1 cat delindex
##########################################################################
##########################################################################
