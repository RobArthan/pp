=IGN
********************************************************************************
dtd096.doc: this file is part of the PPHol system

Copyright (c) 2016 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
\documentclass[a4paper,12pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{epsf}
\makeindex

\def\Title{Detailed Design for sieve and findfile utilities}

\def\Abstract{\begin{center}
{\bf Abstract}\par\parbox{0.7\hsize}
{\small This document gives the detailed design for the sieve and finfile utilities.}
\end{center}}

\def\Reference{LEMMA1/HOL/DTD096}

\def\Author{R.B.~Jones}

\def\EMail{{\tt rbj@rbjones.com}}

%%%%% YOU MAY WANT TO CHANGE THE FOLLOWING TO GET A NICE FRONT PAGE:
\def\FrontPageTitle{ {\huge \Title } }
\def\FrontPageHeader{\raisebox{16ex}{\begin{tabular}[t]{c}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year\\\strut\\
\end{tabular}}}
\begin{centering}



\end{centering}

%%%%% THE FOLLOWING DEFAULTS WILL GENERALLY BE RIGHT:

\def\Version{\VCVersion}
\def\Date{\FormatDate{\VCDate}}

%%%%% NOW BEGIN THE DOCUMENT AND MAKE THE FRONT PAGE

\begin{document}
\headsep=0mm
\FrontPage
\headsep=10mm

%%%%% STANDARD RED-TAPE SECTIONS (MAY WANT TO INTERLEAVE SOME \newpage COMMANDS IN THESE)

%%%%% CONTENTS:

\subsection{Contents}

\tableofcontents

%%%%% REFERENCES:

\newpage
\subsection{References}

\bibliographystyle{fmu}

%%%%% CHANGE THE FOLLOWING AS NECESSARY (E.G., TO PICK UP daz.bib):
{\raggedright
\bibliography{fmu}
}
%%%%% CHANGES HISTORY:
\subsection{Changes History}
\begin{description}
\item[2016/08/27]
First working draft (as dtd123) arising from port of pputf8 contrib into pptex.
\item[2016/12/]
Conversion to dtd096 as imp123 is incorporated into imp096, providing a first cut implementation of pputf8 and utf8pp in {\Product} 

%%%% END OF CHANGES HISTORY %%%%
\end{description}

%%%%%  CHANGES FORECAST:

\subsection{Changes Forecast}

None.

%%%%% DISTRIBUTION LIST

\subsection{Distribution}

Lemma 1 build system.

\newpage

\section{Introduction}
\subsection{Scope}
This document is the detailed design document for the sieve and findfile utilities in {\Product}.

However, its scope is limited, the principal documentation for these utilities being USR001.
It primarily covers the changes to {\Product} for the support of utf8, and initial drafts will be simple copies of the principal correspondence discussing how this should be done.

\subsection{Purpose and Background}
See \cite{DS/FMU/IED/HLD011}.

This document is now being used as top level documentation for the proposed implementation of utf8 support in \Product{}, since the main action is in {\tt sieve}.

\section{Support for utf8 UNICODE in {\Product}}

\subsection{Goals}

The PPTex package is to support UTF-8 encoded Unicode mark-up in ProofPower documents.
It will continue to support the ProofPower 8-bit encoded extended character set (hereafter referred
to as EXT), with some qualification in relation to the distributed concatenation operator, which is being phased out.
It will continue to support the ProofPower ASCII encoding.
It will support conversion to and from all three formats.
The ASCII encoding can be used in documents that also use the EXT encoding and it will be supported in documents that use the UTF-8 encoding.
There is no requirement to support documents involving a mixture of UTF-8 and EXT.
The full UNICODE code set is supported in all document types, in the ASCII format through the use of percent keywords, either giving the UNICODE code point, or a keyword which has been declared in a {\tt sievekeyword} file to be synonymous with some code point.
A reconciliation will be undertaken between the keywords at present used in \Product{} and those in the set nominated in the MathML standard, and a {\tt sievekeyword} file will be supplied containing the resulting keyword definitions.

The PPXpp package is to support UTF-8 encoded Unicode mark-up as far as is possible with
the OpenMotif GUI technology.
This will be done by translation from the chosen file encoding to the \Product{} extended character set supplemented as required by percent keywords as names or for code points for which no name has been declared, as codes.


\subsubsection{Observations}

The use of a Byte-Order-Marker to identify a file as using UTF-8 encodings seems to
be deprecated.

The long term goal is for UTF-8 to supersede EXT.

MathML defines XML entity names for a lot of the symbols we need (and many more).
Adopting these names will give a user-friendly alternative to numeric code points.

Assumption: the distribution concatenation symbol can be removed and everywhere replaced
by its two character equivalent. 
The conversions from extended character set files will continue to accept the distributed concatenation code, but the conversion to the extended character set will not make use of the character, and the \Product{} Reader/Writer will expand it on input, but not compress on output.

At Phil Clayton’s (nice) suggestion, the ProofPower mapping currently maps the greek
letters to the corresponding code points for Mathematical Alphanumeric Symbols in the range
1D400–1D7FF. The MathML entities use the code points for Greek in the range 0370–03FF.
The Mathematical Greek Symbols do look nice, but to gain compatibility with MathML,
we would like to revert to using the code points for Greek in the range 0370-03FF.
This will also allow you to enter Greek by switching to a  standard Greek keyboard mapping.
In passing we will also use the right symbol for $\phi$ (the current mapping uses what LaTeX
calls ``\\varphi'' rather than ``\\phi'').

\subsubsection{Background}

The contrib package PPUtf8 defines a mapping from EXT and UTF-8 and provides filters
to convert between the two formats.

The PPHol packages provide support for input and output using either EXT or UTF-8.

The PPTex package provides a program called sieve which supports conversion
between EXT and ASCII encodings and projection onto SML, TeX and other formats
for further processing.

\subsubsection{Approach}

Removal of distributed concatenation character: remove uses of this character from PPZed.
Rationalise UTF-8 support in PPHol (module 122) as EXT characters now map to a single Unicode code point and not a list.

[Not convinced by this, it seems to me to raise difficulties on the transition, which are best avoided by continuing to expand the extended character.]

\subsubsection{sieve}

Sieve will be enhanced so that keywords of the form %#xXXXXXX% and %#NNNNNN%
are predefined (where XXXXXX and NNNNNN represent case-insensitive (?) hexadecimal
and decimal representations of a valid Unicode code point).
The optional numeric encoding of a code for a glyph in the sieve keyword file entries will now be interpreted as a Unicode code point.


{\it[
A new form of entry in the sieve keyword file will allow the identification of Unicode code
points with an EXT encoding. These new entries might look something like:

%#x002286%	extchar 0x80
]}

A fixed mapping from extended characters to UNICODE code points will be used, rather than including this in the {\tt sievekeyword} file.

Using the existing sameas mechanism, we can then implement the MathML entity names.
This involves a certain amount of reconciliation in the handful of cases where existing
ProofPower entity names conflict with MathML. Some adjustments to the existing mapping
from EXT to UTF-8 might be needed (e.g., it was a nice idea to change to using
the mathematical greek characters, but it might be better to revert for conformance with MathML).

The following change may now be reversed:
{\it[
Module 122 from PPHol and the modules from PPDev that it depends on will
be moved into PPTex and replaced by links in PPHol and/or PPDev. They will
be used in a build-time script to generate the part of the sieve keyword file
that identifies Unicode code points with their EXT encoding. [Alternatively,
this could just be extracted with a sed or perl script. Or [RDA preference] we could do it the other
way round and generate the table in imp122.doc from a file of extchar entries in the PPTex
source.]
]}

sieve will have command line options to select between UTF-8 and EXT on inputs and
outputs (independently so all 4 directions of conversion are possible). The driver
scripts (doctex etc.) will define a new file name extension for UTF-8 encoded
documents. We need to think through the options for the outputs of these scripts
on case-by-case basis. E.g., would it be prudent for docsml to output ASCII only?

\subsection{Unicode Mapping for ProofPower}

The version documented in this subsection is the mapping for the original extended codes in which one of these codes maps to a sequence of two UNICODE code points.
It is now intended to eliminate this anomoly as part of the UNICODE support transition.

The mapping is defined in terms of a basic translation table, which,
subject to some additional rules, defines a translation
from ProofPower to Unicode or from Unicode to ProofPower.
There are some notes giving the rationale for the mapping.

\subsubsection{Basic Translation Table}

The following table gives a one-to-one mapping from a subset of
the ProofPower extended character set to the Unicode
character set.
The range of the mapping includes all the ProofPower extended characters
with the exception of the byte 0x8B.

The LaTeX column contains GIFs showing the typeset form of each character
(produced using dvipng). The GIFs should display properly in any browser
without any Unicode support.  The Unicode column shows the corresponding
Unicode glyph as rendered by your web browser.

[Table omitted]
=IGN
\begin{tabular}{}{| l | c | c | l | l |}
\hline\\
Byte & LaTeX & Unicode & Code Point & Unicode Name \\

0x80 & <IMG SRC="gifs/x80.gif"> & &#x002286; & 0x002286 & SUBSET OF OR EQUAL TO\\
0x81 & <IMG SRC="gifs/x81.gif"> & &#x002A65; & 0x002A65 & Z NOTATION RANGE ANTIRESTRICTION\\
0x82 & <IMG SRC="gifs/x82.gif"> & &#x00228E; & 0x00228E & MULTISET UNION\\
0x83 & <IMG SRC="gifs/x83.gif"> & &#x01D54C; & 0x01D54C & MATHEMATICAL DOUBLE-STRUCK CAPITAL U\\
0x84 & <IMG SRC="gifs/x84.gif"> & &#x01D6E5; & 0x01D6E5 & MATHEMATICAL ITALIC CAPITAL DELTA\\
0x85 & <IMG SRC="gifs/x85.gif"> & &#x002218; & 0x002218 & RING OPERATOR\\
0x86 & <IMG SRC="gifs/x86.gif"> & &#x01D6F7; & 0x01D6F7 & MATHEMATICAL ITALIC CAPITAL PHI\\
0x87 & <IMG SRC="gifs/x87.gif"> & &#x01D6E4; & 0x01D6E4 & MATHEMATICAL ITALIC CAPITAL GAMMA\\
0x88 & <IMG SRC="gifs/x88.gif"> & &#x002514; & 0x002514 & BOX DRAWINGS LIGHT UP AND RIGHT\\
0x89 & <IMG SRC="gifs/x89.gif"> & &#x0022CE; & 0x0022CE & CURLY LOGICAL OR\\
0x8A & <IMG SRC="gifs/x8A.gif"> & &#x01D6E9; & 0x01D6E9 & MATHEMATICAL ITALIC CAPITAL THETA\\
0x8B & <IMG SRC="gifs/x8B.gif"></TD><TD ALIGN=CENTER COLSPAN=3> Translated into a sequence of two code points. See <A HREF="#pp-to-unicode">below</A>\\
0x8C & <IMG SRC="gifs/x8C.gif"> & &#x01D6EC; & 0x01D6EC & MATHEMATICAL ITALIC CAPITAL LAMDA\\
0x8D & <IMG SRC="gifs/x8D.gif"> & &#x002208; & 0x002208 & ELEMENT OF\\
0x8E & <IMG SRC="gifs/x8E.gif"> & &#x002209; & 0x002209 & NOT AN ELEMENT OF\\
0x8F & <IMG SRC="gifs/x8F.gif"> & &#x002916; & 0x002916 & RIGHTWARDS TWO-HEADED ARROW WITH TAIL\\
0x90 & <IMG SRC="gifs/x90.gif"> & &#x01D6F1; & 0x01D6F1 & MATHEMATICAL ITALIC CAPITAL PI\\
0x91 & <IMG SRC="gifs/x91.gif"> & &#x0024DC; & 0x0024DC & CIRCLED LATIN SMALL LETTER M\\
0x92 & <IMG SRC="gifs/x92.gif"> & &#x0025B7; & 0x0025B7 & WHITE RIGHT-POINTING TRIANGLE\\
0x93 & <IMG SRC="gifs/x93.gif"> & &#x01D6F4; & 0x01D6F4 & MATHEMATICAL ITALIC CAPITAL SIGMA\\
0x94 & <IMG SRC="gifs/x94.gif"> & &#x0024E3; & 0x0024E3 & CIRCLED LATIN SMALL LETTER T\\
0x95 & <IMG SRC="gifs/x95.gif"> & &#x01D6F6; & 0x01D6F6 & MATHEMATICAL ITALIC CAPITAL UPSILON\\
0x96 & <IMG SRC="gifs/x96.gif"> & &#x01D539; & 0x01D539 & MATHEMATICAL DOUBLE-STRUCK CAPITAL B\\
0x97 & <IMG SRC="gifs/x97.gif"> & &#x01D6FA; & 0x01D6FA & MATHEMATICAL ITALIC CAPITAL OMEGA\\
0x98 & <IMG SRC="gifs/x98.gif"> & &#x01D6EF; & 0x01D6EF & MATHEMATICAL ITALIC CAPITAL XI\\
0x99 & <IMG SRC="gifs/x99.gif"> & &#x01D6F9; & 0x01D6F9 & MATHEMATICAL ITALIC CAPITAL PSI\\
0x9A & <IMG SRC="gifs/x9A.gif"> & &#x002205; & 0x002205 & EMPTY SET\\
0x9B & <IMG SRC="gifs/x9B.gif"> & &#x0022CF; & 0x0022CF & CURLY LOGICAL AND\\
0x9C & <IMG SRC="gifs/x9C.gif"> & &#x002550; & 0x002550 & BOX DRAWINGS DOUBLE HORIZONTAL\\
0x9D & <IMG SRC="gifs/x9D.gif"> & &#x002552; & 0x002552 & BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE\\
0x9E & <IMG SRC="gifs/x9E.gif"> & &#x002915; & 0x002915 & RIGHTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE\\
0x9F & <IMG SRC="gifs/x9F.gif"> & &#x0021FB; & 0x0021FB & RIGHTWARDS ARROW WITH DOUBLE VERTICAL STROKE\\
0xA0 & <IMG SRC="gifs/xA0.gif"> & &#x002282; & 0x002282 & SUBSET OF\\
0xA1 & <IMG SRC="gifs/xA1.gif"> & &#x002229; & 0x002229 & INTERSECTION\\
0xA2 & <IMG SRC="gifs/xA2.gif"> & &#x0027E9; & 0x0027E9 & MATHEMATICAL RIGHT ANGLE BRACKET\\
0xA3 & <IMG SRC="gifs/xA3.gif"> & &#x002296; & 0x002296 & CIRCLED MINUS\\
0xA4 & <IMG SRC="gifs/xA4.gif"> & &#x0021D4; & 0x0021D4 & LEFT RIGHT DOUBLE ARROW\\
0xA5 & <IMG SRC="gifs/xA5.gif"> & &#x0022C2; & 0x0022C2 & N-ARY INTERSECTION\\
0xA6 & <IMG SRC="gifs/xA6.gif"> & &#x00225C; & 0x00225C & DELTA EQUAL TO\\
0xA7 & <IMG SRC="gifs/xA7.gif"> & &#x0027E8; & 0x0027E8 & MATHEMATICAL LEFT ANGLE BRACKET\\
0xA8 & <IMG SRC="gifs/xA8.gif"> & &#x002987; & 0x002987 & Z NOTATION LEFT IMAGE BRACKET\\
0xA9 & <IMG SRC="gifs/xA9.gif"> & &#x002988; & 0x002988 & Z NOTATION RIGHT IMAGE BRACKET\\
0xAA & <IMG SRC="gifs/xAA.gif"> & &#x002194; & 0x002194 & LEFT RIGHT ARROW\\
0xAB & <IMG SRC="gifs/xAB.gif"> & &#x002295; & 0x002295 & CIRCLED PLUS\\
0xAC & <IMG SRC="gifs/xAC.gif"> & &#x00231C; & 0x00231C & TOP LEFT CORNER\\
0xAD & <IMG SRC="gifs/xAD.gif"> & &#x002192; & 0x002192 & RIGHTWARDS ARROW\\
0xAE & <IMG SRC="gifs/xAE.gif"> & &#x00231D; & 0x00231D & TOP RIGHT CORNER\\
0xAF & <IMG SRC="gifs/xAF.gif"> & &#x00211D; & 0x00211D & DOUBLE-STRUCK CAPITAL R\\
0xB0 & <IMG SRC="gifs/xB0.gif"> & &#x0025A0; & 0x0025A0 & BLACK SQUARE\\
0xB1 & <IMG SRC="gifs/xB1.gif"> & &#x002227; & 0x002227 & LOGICAL AND\\
0xB2 & <IMG SRC="gifs/xB2.gif"> & &#x002228; & 0x002228 & LOGICAL OR\\
0xB3 & <IMG SRC="gifs/xB3.gif"> & &#x0000AC; & 0x0000AC & NOT SIGN\\
0xB4 & <IMG SRC="gifs/xB4.gif"> & &#x0021D2; & 0x0021D2 & RIGHTWARDS DOUBLE ARROW\\
0xB5 & <IMG SRC="gifs/xB5.gif"> & &#x002200; & 0x002200 & FOR ALL\\
0xB6 & <IMG SRC="gifs/xB6.gif"> & &#x002203; & 0x002203 & THERE EXISTS\\
0xB7 & <IMG SRC="gifs/xB7.gif"> & &#x002981; & 0x002981 & Z NOTATION SPOT\\
0xB8 & <IMG SRC="gifs/xB8.gif"> & &#x0000D7; & 0x0000D7 & MULTIPLICATION SIGN\\
0xB9 & <IMG SRC="gifs/xB9.gif"> & &#x0024C8; & 0x0024C8 & CIRCLED LATIN CAPITAL LETTER S\\
0xBA & <IMG SRC="gifs/xBA.gif"> & &#x002982; & 0x002982 & Z NOTATION TYPE COLON\\
0xBB & <IMG SRC="gifs/xBB.gif"> & &#x002A3E; & 0x002A3E & Z NOTATION RELATIONAL COMPOSITION\\
0xBC & <IMG SRC="gifs/xBC.gif"> & &#x002264; & 0x002264 & LESS-THAN OR EQUAL TO\\
0xBD & <IMG SRC="gifs/xBD.gif"> & &#x002260; & 0x002260 & NOT EQUAL TO\\
0xBE & <IMG SRC="gifs/xBE.gif"> & &#x002265; & 0x002265 & GREATER-THAN OR EQUAL TO\\
0xBF & <IMG SRC="gifs/xBF.gif"> & &#x01D54A; & 0x01D54A & MATHEMATICAL DOUBLE-STRUCK CAPITAL S\\
0xC0 & <IMG SRC="gifs/xC0.gif"> & &#x00222A; & 0x00222A & UNION\\
0xC1 & <IMG SRC="gifs/xC1.gif"> & &#x01D6FC; & 0x01D6FC & MATHEMATICAL ITALIC SMALL ALPHA\\
0xC2 & <IMG SRC="gifs/xC2.gif"> & &#x01D6FD; & 0x01D6FD & MATHEMATICAL ITALIC SMALL BETA\\
0xC3 & <IMG SRC="gifs/xC3.gif"> & &#x002291; & 0x002291 & SQUARE IMAGE OF OR EQUAL TO\\
0xC4 & <IMG SRC="gifs/xC4.gif"> & &#x01D6FF; & 0x01D6FF & MATHEMATICAL ITALIC SMALL DELTA\\
0xC5 & <IMG SRC="gifs/xC5.gif"> & &#x01D700; & 0x01D700 & MATHEMATICAL ITALIC SMALL EPSILON\\
0xC6 & <IMG SRC="gifs/xC6.gif"> & &#x01D711; & 0x01D711 & MATHEMATICAL ITALIC SMALL PHI\\
0xC7 & <IMG SRC="gifs/xC7.gif"> & &#x01D6FE; & 0x01D6FE & MATHEMATICAL ITALIC SMALL GAMMA\\
0xC8 & <IMG SRC="gifs/xC8.gif"> & &#x01D702; & 0x01D702 & MATHEMATICAL ITALIC SMALL ETA\\
0xC9 & <IMG SRC="gifs/xC9.gif"> & &#x01D704; & 0x01D704 & MATHEMATICAL ITALIC SMALL IOTA\\
0xCA & <IMG SRC="gifs/xCA.gif"> & &#x01D703; & 0x01D703 & MATHEMATICAL ITALIC SMALL THETA\\
0xCB & <IMG SRC="gifs/xCB.gif"> & &#x01D705; & 0x01D705 & MATHEMATICAL ITALIC SMALL KAPPA\\
0xCC & <IMG SRC="gifs/xCC.gif"> & &#x01D706; & 0x01D706 & MATHEMATICAL ITALIC SMALL LAMDA\\
0xCD & <IMG SRC="gifs/xCD.gif"> & &#x01D707; & 0x01D707 & MATHEMATICAL ITALIC SMALL MU\\
0xCE & <IMG SRC="gifs/xCE.gif"> & &#x01D708; & 0x01D708 & MATHEMATICAL ITALIC SMALL NU\\
0xCF & <IMG SRC="gifs/xCF.gif"> & &#x002900; & 0x002900 & RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE\\
0xD0 & <IMG SRC="gifs/xD0.gif"> & &#x01D70B; & 0x01D70B & MATHEMATICAL ITALIC SMALL PI\\
0xD1 & <IMG SRC="gifs/xD1.gif"> & &#x01D712; & 0x01D712 & MATHEMATICAL ITALIC SMALL CHI\\
0xD2 & <IMG SRC="gifs/xD2.gif"> & &#x01D70C; & 0x01D70C & MATHEMATICAL ITALIC SMALL RHO\\
0xD3 & <IMG SRC="gifs/xD3.gif"> & &#x01D70E; & 0x01D70E & MATHEMATICAL ITALIC SMALL SIGMA\\
0xD4 & <IMG SRC="gifs/xD4.gif"> & &#x01D70F; & 0x01D70F & MATHEMATICAL ITALIC SMALL TAU\\
0xD5 & <IMG SRC="gifs/xD5.gif"> & &#x01D710; & 0x01D710 & MATHEMATICAL ITALIC SMALL UPSILON\\
0xD6 & <IMG SRC="gifs/xD6.gif"> & &#x002102; & 0x002102 & DOUBLE-STRUCK CAPITAL C\\
0xD7 & <IMG SRC="gifs/xD7.gif"> & &#x01D714; & 0x01D714 & MATHEMATICAL ITALIC SMALL OMEGA\\
0xD8 & <IMG SRC="gifs/xD8.gif"> & &#x01D709; & 0x01D709 & MATHEMATICAL ITALIC SMALL XI\\
0xD9 & <IMG SRC="gifs/xD9.gif"> & &#x01D713; & 0x01D713 & MATHEMATICAL ITALIC SMALL PSI\\
0xDA & <IMG SRC="gifs/xDA.gif"> & &#x01D701; & 0x01D701 & MATHEMATICAL ITALIC SMALL ZETA\\
0xDB & <IMG SRC="gifs/xDB.gif"> & &#x00298F; & 0x00298F & LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER\\
0xDC & <IMG SRC="gifs/xDC.gif"> & &#x002502; & 0x002502 & BOX DRAWINGS LIGHT VERTICAL\\
0xDD & <IMG SRC="gifs/xDD.gif"> & &#x00298E; & 0x00298E & RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER\\
0xDE & <IMG SRC="gifs/xDE.gif"> & &#x0022C3; & 0x0022C3 & N-ARY UNION\\
0xDF & <IMG SRC="gifs/xDF.gif"> & &#x0021F8; & 0x0021F8 & RIGHTWARDS ARROW WITH VERTICAL STROKE\\
0xE0 & <IMG SRC="gifs/xE0.gif"> & &#x0021A3; & 0x0021A3 & RIGHTWARDS ARROW WITH TAIL\\
0xE1 & <IMG SRC="gifs/xE1.gif"> & &#x002A64; & 0x002A64 & Z NOTATION DOMAIN ANTIRESTRICTION\\
0xE2 & <IMG SRC="gifs/xE2.gif"> & &#x0022A5; & 0x0022A5 & UP TACK\\
0xE3 & <IMG SRC="gifs/xE3.gif"> & &#x0021D0; & 0x0021D0 & LEFTWARDS DOUBLE ARROW\\
0xE4 & <IMG SRC="gifs/xE4.gif"> & &#x002283; & 0x002283 & SUPERSET OF\\
0xE5 & <IMG SRC="gifs/xE5.gif"> & &#x002287; & 0x002287 & SUPERSET OF OR EQUAL TO\\
0xE6 & <IMG SRC="gifs/xE6.gif"> & &#x01D53D; & 0x01D53D & MATHEMATICAL DOUBLE-STRUCK CAPITAL F\\
0xE7 & <IMG SRC="gifs/xE7.gif"> & &#x002197; & 0x002197 & NORTH EAST ARROW\\
0xE8 & <IMG SRC="gifs/xE8.gif"> & &#x002198; & 0x002198 & SOUTH EAST ARROW\\
0xE9 & <IMG SRC="gifs/xE9.gif"> & &#x002261; & 0x002261 & IDENTICAL TO\\
0xEA & <IMG SRC="gifs/xEA.gif"> & &#x002195; & 0x002195 & UP DOWN ARROW\\
0xEB & <IMG SRC="gifs/xEB.gif"> & &#x002040; & 0x002040 & CHARACTER TIE\\
0xEC & <IMG SRC="gifs/xEC.gif"> & &#x0021BF; & 0x0021BF & UPWARDS HARPOON WITH BARB LEFTWARDS\\
0xED & <IMG SRC="gifs/xED.gif"> & &#x0021A6; & 0x0021A6 & RIGHTWARDS ARROW FROM BAR\\
0xEE & <IMG SRC="gifs/xEE.gif"> & &#x002115; & 0x002115 & DOUBLE-STRUCK CAPITAL N\\
0xEF & <IMG SRC="gifs/xEF.gif"> & &#x0021A0; & 0x0021A0 & RIGHTWARDS TWO HEADED ARROW\\
0xF0 & <IMG SRC="gifs/xF0.gif"> & &#x002119; & 0x002119 & DOUBLE-STRUCK CAPITAL P\\
0xF1 & <IMG SRC="gifs/xF1.gif"> & &#x0024e9; & 0x0024e9 & CIRCLED LATIN SMALL LETTER Z\\
0xF2 & <IMG SRC="gifs/xF2.gif"> & &#x0025C1; & 0x0025C1 & WHITE LEFT-POINTING TRIANGLE\\
0xF3 & <IMG SRC="gifs/xF3.gif"> & &#x00211A; & 0x00211A & DOUBLE-STRUCK CAPITAL Q\\
0xF4 & <IMG SRC="gifs/xF4.gif"> & &#x0022A2; & 0x0022A2 & RIGHT TACK\\
0xF5 & <IMG SRC="gifs/xF5.gif"> & &#x002A3D; & 0x002A3D & RIGHTHAND INTERIOR PRODUCT\\
0xF6 & <IMG SRC="gifs/xF6.gif"> & &#x002A3C; & 0x002A3C & INTERIOR PRODUCT\\
0xF7 & <IMG SRC="gifs/xF7.gif"> & &#x00251C; & 0x00251C & BOX DRAWINGS LIGHT VERTICAL AND RIGHT\\
0xF8 & <IMG SRC="gifs/xF8.gif"> & &#x00FE63; & 0x00FE63 & SMALL HYPHEN-MINUS\\
0xF9 & <IMG SRC="gifs/xF9.gif"> & &#x0021BE; & 0x0021BE & UPWARDS HARPOON WITH BARB RIGHTWARDS\\
0xFA & <IMG SRC="gifs/xFA.gif"> & &#x002124; & 0x002124 & DOUBLE-STRUCK CAPITAL Z\\
0xFB & <IMG SRC="gifs/xFB.gif"> & &#x0027E6; & 0x0027E6 & MATHEMATICAL LEFT WHITE SQUARE BRACKET\\
0xFC & <IMG SRC="gifs/xFC.gif"> & &#x002500; & 0x002500 & BOX DRAWINGS LIGHT HORIZONTAL\\
0xFD & <IMG SRC="gifs/xFD.gif"> & &#x0027E7; & 0x0027E7 & MATHEMATICAL RIGHT WHITE SQUARE BRACKET\\
0xFE & <IMG SRC="gifs/xFE.gif"> & &#x002914; & 0x002914 & RIGHTWARDS ARROW WITH TAIL WITH VERTICAL STROKE\\
0xFF & <IMG SRC="gifs/xFF.gif"> & &#x00250C; & 0x00250C & BOX DRAWINGS LIGHT DOWN AND RIGHT\\
\hline
\end{tabular}
=TEX

=SML

=TEX

\subsubsection{ProofPower to Unicode}

Translating ProofPower into Unicode converts a stream of bytes into a stream of Unicode code points.
An ASCII string of the form ''%x\emph{HHHHHH}%", where \emph{HHHHHH}
is a string of 6 upper-case hexadecimal digits representing a value in the range
0x000100 to 0x10FFFF, is translated into the Unicode code point with that value.
Strings of this form are identified reading from left to right.
Any byte in the range 0x00 to 0x7F not appearing in
such a string is translated into the Unicode code point with the same numeric value.

A byte in the range 0x80 to 0xFF other than 0x8B is translated
into the Unicode code point identified in the basic translation table above.

The byte 0x8B (representing distributed concatenation in Z)
is translated into the sequence of 2 Unicode code points shown below:

=IGN
\begin{tabular}[]{l l l}
\hline\\
Byte & LaTeX & Code Point Sequence & Unicode \\
0x8B & \Pr{IL} & 0x002040 0x00002F & &#x002040;&#x00002f;\\
\hline
\end{tabular}
=TEX

\subsubsection{Unicode to ProofPower}

Translating Unicode converts a stream of code points into a stream of bytes.

A Unicode code point in the range 0x000000 to 0x00007F is
translated into the byte with the same numeric value.
A Unicode code point listed in the Code Point column in the basic translation table is translated into the byte with the numeric value given in the Byte column.
A Unicode code point in the range 0x000080 to 0x10FFFF that is not listed in the basic translation table
is translated into the ASCII string "%x\emph{HHHHHH}%", where \emph{HHHHHH} represents the value of the code
point as 6 upper-case hexadecimal digits.

\subsubsection{Rationale}

The mapping for Z symbols (other than paragraph mark-up) follows the ISO Z
Standard Unicode mark-up.  An exception is that the ASCII minus sign is
translated unchanged while the unary minus sign 0xF8 is translated into SMALL
HYPHEN-MINUS. Unfortunately, SMALL HYPHEN-MINUS often seems to be rendered
bigger than HYPHEN-MINUS.

Unicode does not provide any single glyphs that resemble
the decorated Quine corners provided in the ProofPower character set
for quoting HOL types, ML and Z. Squared letters T, M and Z have been
used as a convenient single character translation for these.

The %x\emph{HHHHHH}% format allows any code point to be used in a ProofPower identifier.
Strings of this form are highly unlikely to occur in existing scripts and so there is no requirement for a string of this form to be translated into Unicode as 9 ASCII characters.

\section{CONVERSION TABLES}

Two conversion tables are required, in multiple forms.

The first is the mapping of \Product{} extended codes to unicode code points.
This is a fixed mapping, having one definitive version as an SML definition, which is used to generate other versions as required, and incorporated into the \Product{} build as required by inclusion from other parts of the build.
This is done for the structure Unicode, which makes the \Product{} to utf8 mapping in an SML structure in \Product{}, and may also be imported into the Reader/Writer.
The table is also used to generate C header files used by sieve to implement {\tt pputf8} and {\tt utf8pp}.

I had originally naively supposed the SML table could be included with a DUMP directive in imp096, but the dump would have to be done by {\tt sieve} so there is a chicken and egg problem here, so the following two little sections need to be reconsidered.

\subsection{SML PP to UNICODE Code Table}

This module supplies an SML file defining a conversion table from PP extended characters to their UNICODE code points.
This is the definitive mapping and should be used by any other part of the system which requires this mapping.
However, the mapping is made available in {\Product} via the structure \emph{Unicode} provided by {\tt dtd/imp122} and should be used through that structure where possible.
It is used by imp096 to generate header files which are incorporated into the {\tt sieve} program.

\subsection{C Header Files}

This module creates two C header files pputf8tab.h and utf8pptab.h containing tables defining the mapping between \Product{} extended character codes and unicode points, and provides two programs which convert files between the two representations.

The header files are available for use by any other programs which might undertake similar translations, the programs are supplied as a part of \Product{} release.


\section{TEST POLICY}
There are no special module test requirements.
\twocolumn[\section{INDEX}]
\small
\printindex

\end{document}







