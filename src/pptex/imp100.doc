=IGN
********************************************************************************
imp100.doc: this file is part of the PPDev system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
% imp100.doc  $Id: imp100.doc,v 1.19 2007/07/10 16:42:41 rda Exp rda $

=TEX
% imp100.doc  $Id: imp100.doc,v 1.19 2007/07/10 16:42:41 rda Exp rda $
\documentstyle[11pt,TQ,hol1]{article}

\TPPtitle{Implementation of Document Handling Commands for Solaris 2}
\TPPref{DS/FMU/IED/IMP100}
\def\SCCSissue{$Revision: 1.19 $%
}

=IGNORE

sieve sml < imp100.doc
mv docsml doctex texdvi doctch doctds sun4bin

doctex imp100 ; texdvi imp100
bibtex imp100
dvipage imp100 &
=TEX

\TPPissue{\SCCSissue}
\TPPdate{\FormatDate{$Date: 2007/07/10 16:42:41 $%
}}
\TPPproject{FST}

\TPPstatus{Draft}
\TPPtype{Literate Script}
\TPPkeywords{HOL}
\TPPauthor{A.J. Hammon & WIN01}  %% Mandatory field
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{This document contains the implementation of the shell scripts
		for document processing.}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library
}}

\ftlinepenalty=9999
\tabstop=0.9\tabstop
\makeindex

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\catcode`\_=\active
\def\_{\kern.06em\vbox{\hrule height.1ex width.3em}\hskip0.1em\relax}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
\makeTPPfrontpage
\vfill
\begin{center}
\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year
\end{center}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}

\begin{description}

\item[Issue 1.1] First version based on \cite{DS/IED/FMU/IMP055}. The difference is that on Solaris 2, saving the tty settings prior to calling LaTeX causes the processing to wait on the terminal when run as a background task.
\item[Issue 1.2 \FormatDate{94/12/13}] Bug fixing so that $docpr$ works under Solaris 2.
\item[Issue 1.3] Added the $-e$ flag to $doctex$ and $docdvi$.
\item[Issue 1.4] In $doctex$, modified the call to $ex$ and improved error handling to report to the user if use of the $-e$ flag fails.
\item[Issue 1.5] Better handling of out-of-directory files.
\item[Issue 1.6] $docsml$ now supports views other than just $sml$ via environment variable $DOCSMLVIEW$.
\item[Issue 1.7] Fixed bug in {\tt docsml} that the Solaris shells let by.
\item[Issue 1.9] Copyright and banner updates for open source release.
\item[Issue 1.10] PPDev-specific updates for open source release
\item[Issues 1.11--1.13] Support for running out-of-the-box.
\item[Issue 1.14] Now sets up {\it PPETCPATH} as needed.
\item[Issue 1.15] New script {\tt pptexenv} added.
\item[Issue 1.16] Revised treatment of TEXINPUTS etc.
\item[Issue 1.17] Stopped {\tt texdvi} running {\tt bibtex} if the {\tt latex} run fails.
\item[Issue 1.18] Made {\tt doctex} report errors from {\tt sieve} and tidied up error handling in {\tt texdvi}.
\item[Issues 1.19--1.20] Made scripts handle file names with spaces.
\end{description}

%********************************************************************

%\subsection{Changes Forecast}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%********************************************************************
%--------------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{GENERAL}

%********************************************************************

\subsection{Scope}

This document contains the implementation of the documents transforming
utility programs whose detailed design is in~\cite{DS/FMU/IED/DTD100}.

%********************************************************************

\subsection{Introduction}

\subsubsection{Purpose and Background}

A number of programs are provided here that call the sieve program,
see~\cite{DS/FMU/IED/DTD053}, to get various views of a document file.
Related programs here perform further processing of the outputs of the
sieving process.

\subsubsection{Dependencies}

These programs use the sieve program, see~\cite{DS/FMU/IED/DTD053},
they are written as Bourne Shell scripts (see {\tt sh(1)} of the Sun
UNIX manual set) and require some of the utilities found with the Unix
operating system.

%--------------------------------------------------------------------

\subsubsection{Interface}

Full details of the interfaces to these programs and functions
are given in the user document for the document processing
system~\cite{DS/FMU/IED/USR001}.

%--------------------------------------------------------------------

%\subsubsection{Possible Enhancements}

%--------------------------------------------------------------------

%\subsubsection{Deficiencies}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{STRUCTURE OF THIS DOCUMENT}

This file contains a number of shell scripts.  These scripts are
extracted by using the sieve program as follows.

=GFT Shell commands
sieve sml < imp100.doc
=TEX

A side effect of this sieving action is the creation of the programs
and setting the executable flag in their file permissions.  The
standard output of the sieve program is empty.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage
\section{COMMON MATERIAL}
Note: the following code is also in \cite{DS/FMU/IED/IMP111} so if there is a bug here
it should be fixed there as well.
=DUMP pptex_common
PROGNAME=`basename $0`
diag() {
	echo $PROGNAME: $* 1>&2
}
if test "$PPENVDEBUG" = ""
then
	env_diag() {
		true
	}
else
	env_diag() {
		diag $*
	}
fi
set_pp_home() {
	if test "$PPHOME" = ""
	then
		BINDIR=`dirname "$0"`
		if test "$BINDIR" = ""
		then
			BINDIR="."
		fi
		FINDFILE="$BINDIR"/findfile
		if test -x "$FINDFILE" && BINFILE=`"$FINDFILE" -r "$0"`
		then
			env_diag "found real path to executable $0 at $BINFILE"
			REALBINDIR=`dirname "$BINFILE"`
			PPHOME=`dirname "$REALBINDIR"`
			if test -d "$PPHOME"
			then
				env_diag "using PPHOME=$PPHOME"
				export PPHOME
				PATH="$PPHOME"/bin:"$PATH"
				env_diag "using PATH=$PATH"
			else
				env_diag cannot access $PPHOME
				diag "cannot locate the ProofPower installation directory"
			fi
		else
			env_diag "cannot find real path to executable $0"
			diag "cannot locate the ProofPower installation directory"
			exit 1
		fi
	else	env_diag "PPHOME set by caller to $PPHOME"
		env_diag "PATH set by caller to $PATH"
	fi
	if test "$PPETCPATH" = ""
	then
		PPETCPATH="$PPHOME"/etc:"$PATH"
		export PPETCPATH
		env_diag "using PPETCPATH=$PPETCPATH"
	else
		env_diag "PPETCPATH set by caller to $PPETCPATH"
	fi
}
=TEX
\newpage
\section{PROGRAM DOCTEX}

Shell script to strip {\tt.doc} files creating \LaTeX{} {\tt.tex} files.

=DUMP doctex
#! /bin/sh
#	doctex   From: $Id: imp100.doc,v 1.19 2007/07/10 16:42:41 rda Exp rda $
#
# Shell script to strip ".doc" files creating ".tex" files.

USAGE="$PROGNAME [-v] [-e edit_script] [-f view_file] [-K] [-k keyword_file] <file> ..."
USAGEMSG="$PROGNAME: usage: $USAGE"
=SH
cat pptex_common >>doctex
=DUMPMORE doctex
VERBOSE="n"
EDITFILE=""
SIEVEFILE=""
KEYFILE=""
OPT_K=""
while true
do
	case $1 in
	-e)		EDITFILE="$EDITFILE \"$2\""	; shift ; shift	;;
	-f)		SIEVEFILE="-f \"$2\""		; shift ; shift	;;
	-K)		OPT_K="-K"			; shift		;;
	-k)		KEYFILE=$KEYFILE" -k \"$2\""	; shift ; shift	;;
	-v)		VERBOSE="y"			; shift 	;;
	--)						  shift ; break ;;
	-*)		diag "Bad flag for $PROGNAME: $1"
			diag "$USAGEMSG"
								  exit 1 ;;
	*)							  break ;;
	esac
done

if test $# -lt 1
then
	diag "$USAGEMSG"
	exit 1
fi

set_pp_home

EXITSTATUS=0

for FILE
do
	stem=`basename "$FILE" .doc`
	dname=`dirname "$FILE"`
	docfile="$dname"/"$stem".doc
	outfile="$stem".tex

	if test "$VERBOSE" = "y"
	then
		diag $PROGNAME: reading $docfile writing $outfile
	fi

	if test ! -r "$docfile"
	then
		diag "$PROGNAME:" $docfile "does not exist or cannot be read"
		EXITSTATUS=1
	else
		eval sieve $OPT_K $KEYFILE $SIEVEFILE tex < "$docfile" > "$outfile"
		if test "$?" -ne 0
		then	EXITSTATUS=1
		elif test ! -s "$outfile"
		then
			diag $PROGNAME: Warning, file $outfile is empty
		fi
	fi
done

if [ "$EDITFILE" = "" ]
then	:
else
	for FILE
	do
		stem=`basename "$FILE" .doc`
		texfile="$stem".tex
		ex -s "$texfile" 2>&1 >/dev/null <<EOF
`cat "$EDITFILE"`
wq
EOF
		if test "$?" -ne 0
		then
		   diag "$PROGNAME: Warning, $EDITFILE failed to modify $FILE"
		fi
	done
fi


exit $EXITSTATUS
=TEX

=SH
chmod +x doctex
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{PROGRAM DOCSML}

Shell script to strip {\tt.doc} files creating Standard~ML {\tt.sml}
files together with the extraction of error messages.

=DUMP docsml
#! /bin/sh
#	docsml   From: $Id: imp100.doc,v 1.19 2007/07/10 16:42:41 rda Exp rda $

PROGNAME=`basename "$0"`
USAGE="$PROGNAME [-v] [-f view_file] [-K] [-k keyword_file] <file> ..."
USAGEMSG="$PROGNAME: usage: $USAGE"
=SH
cat pptex_common >>docsml
=DUMPMORE docsml
VERBOSE="n"
SIEVEFILE=""
KEYFILE=""
OPT_K=""
if [ "$DOCSMLVIEW" = "" ]
then
	DOCSMLVIEW=sml
fi

while true
do
	case $1 in
	-f)		SIEVEFILE="-f \"$2\""		; shift ; shift	;;
	-K)		OPT_K="-K"			; shift		;;
	-k)		KEYFILE=$KEYFILE" -k \"$2\""	; shift ; shift	;;
	-v)		VERBOSE="y"			; shift 	;;
	--)						  shift ; break ;;
	-*)		diag "Bad flag for $PROGNAME: $1"
			diag $USAGEMSG
							exit 1 ;;
	*)						break ;;
	esac
done

if test $# -lt 1
then
	diag $USAGEMSG
	exit 1
fi

set_pp_home

EXITSTATUS=0

for FILE
do
	stem=`basename "$FILE" .doc`
	dname=`dirname "$FILE"`
	docfile="$dname"/"$stem".doc
	outfile="$stem".sml

	if test $VERBOSE = "y"
	then
		diag $PROGNAME: reading $docfile writing $outfile
	fi

	if test ! -r "$docfile"
	then
		diag "$PROGNAME:" $docfile "does not exist or cannot be read"
		EXITSTATUS=1
	else
		eval sieve $OPT_K $KEYFILE $SIEVEFILE \""$DOCSMLVIEW"\" < "$docfile" > "$outfile"

		eval sieve $OPT_K $KEYFILE $SIEVEFILE errors < "$docfile" \
		| sed \
		-e '1,1s/^\([0-9][0-9]*\)		*\(.*\)/'\
'(new_error_message {id= \1, text = "\2\\/'\
		-e '2,$s/^		*\(.*\)/	\\ \1\\/' \
		-e '2,$s/^\([0-9][0-9]*\)		*\(.*\)/'\
'\\" }; new_error_message {id= \1, text = "\2\\/' \
		-e '$s/\\$/" });/' \
	>> $outfile

		if test ! -s "$outfile"
		then
			diag $PROGNAME: Warning, file $outfile is empty
		fi
	fi
done

exit $EXITSTATUS
=TEX

=SH
chmod +x docsml
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{PROGRAM DOCTCH}

Shell script to strip {\tt.doc} files creating theory checking
files {\tt.tch} files.

=DUMP doctch
#! /bin/sh
#	doctch   From: $Id: imp100.doc,v 1.19 2007/07/10 16:42:41 rda Exp rda $

PROGNAME=`basename "$0"`
USAGE="$PROGNAME [-v] [-f view_file] [-K] [-k keyword_file] <file> ..."
USAGEMSG="$PROGNAME: usage: $USAGE"
=SH
cat pptex_common >>doctch
=DUMPMORE doctch
VERBOSE="n"
SIEVEFILE=""
KEYFILE=""
OPT_K=""

while true
do
	case $1 in
	-f)		SIEVEFILE="-f \"$2\""		; shift ; shift	;;
	-K)		OPT_K="-K"			; shift		;;
	-k)		KEYFILE=$KEYFILE" -k \"$2\""	; shift ; shift	;;
	-v)		VERBOSE="y"			; shift 	;;
	--)						  shift ; break ;;
	-*)		diag "Bad flag for $PROGNAME: $1"
			diag $USAGEMSG
								  exit 1 ;;
	*)							  break ;;
	esac
done

if test $# -lt 1
then
	diag $USAGEMSG
	exit 1
fi

if test ! \( -s dtd035.sml -a -s imp035.sml \)
then
	diag Files \"dtd035.sml\" and \"imp035.sml\" required
	exit 1
fi

set_pp_home

EXITSTATUS=0

for FILE
do
	stem=`basename "$FILE" .doc`
	dname=`dirname "$FILE"`
	docfile="$dname"/"$stem".doc
	outfile="$stem".tch

	if test "$VERBOSE" = "y"
	then
		diag $PROGNAME: reading $docfile writing $outfile
	fi

	if test ! -r "$docfile"
	then
		diag "$PROGNAME:" $docfile "does not exist or cannot be read"
		EXITSTATUS=1
	else
		(	echo 'use_file "dtd035";'
			echo 'use_file "imp035";'
			echo 'req_flag := Check;'
			echo 'initialise_td_results ();'
			eval sieve $OPT_K $KEYFILE $SIEVEFILE thydoc < "$docfile"
			echo 'summarize_td_results ();'
		) > "$outfile"
	fi
done

exit $EXITSTATUS
=TEX

=SH
chmod +x doctch
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{PROGRAM DOCTDS}

Shell script to strip {\tt.doc} files creating theory design
{\tt.tds} files.

=DUMP doctds
#! /bin/sh
#	doctds   From: $Id: imp100.doc,v 1.19 2007/07/10 16:42:41 rda Exp rda $

PROGNAME=`basename $0`
USAGE="$PROGNAME [-v] [-f view_file] [-K] [-k keyword_file] <file> ..."
USAGEMSG="$PROGNAME: usage: $USAGE"
=SH
cat pptex_common >>doctds
=DUMPMORE doctds
VERBOSE="n"
SIEVEFILE=""
KEYFILE=""
OPT_K=""

while true
do
	case $1 in
	-f)		SIEVEFILE="-f \"$2\""		; shift ; shift	;;
	-K)		OPT_K="-K"			; shift		;;
	-k)		KEYFILE=$KEYFILE" -k \"$2\""	; shift ; shift	;;
	-v)		VERBOSE="y"			; shift 	;;
	--)						  shift ; break ;;
	-*)		diag "Bad flag for $PROGNAME: $1"
			diag $USAGEMSG
								  exit 1 ;;
	*)							  break ;;
	esac
done

if test $# -lt 1
then
	diag $USAGEMSG
	exit 1
fi

if test ! \( -s dtd035.sml -a -s imp035.sml \)
then
	diag Files \"dtd035.sml\" and \"imp035.sml\" required
	exit 1
fi

set_pp_home

EXITSTATUS=0

for FILE
do
	stem=`basename "$FILE" .doc`
	dname=`dirname "$FILE"`
	docfile="$dname"/"$stem".doc
	outfile="$stem".tds

	if test "$VERBOSE" = "y"
	then
		diag $PROGNAME: reading $docfile writing $outfile
	fi

	if test ! -r "$docfile"
	then
		diag "$PROGNAME:" $docfile "does not exist or cannot be read"
		EXITSTATUS=1
	else
		(	echo 'use_file "dtd035";'
			echo 'use_file "imp035";'
			echo 'req_flag := Declare;'
			echo 'initialise_td_results ();'
			eval sieve $OPT_K $KEYFILE $SIEVEFILE thydoc < "$docfile"
			echo 'summarize_td_results ();'
		) > "$outfile"
	fi
done

exit $EXITSTATUS
=TEX

=SH
chmod +x doctds
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{PROGRAM TEXDVI}

Shell script to run \LaTeX{} on a {\tt.tex} file creating as the main
output a {\tt.dvi} file.  Other files include the index {\tt.idx} file
which is sorted to create a {\tt.sid} file.

Note the sort of the index file.  First duplicates are removed, then
the page numbers are adjusted to be three characters with leading
spaces so that the final sort will place entries for the same name in
ascending order of page number.

=DUMP texdvi
#! /bin/sh
#	texdvi   From: $Id: imp100.doc,v 1.19 2007/07/10 16:42:41 rda Exp rda $

PROGNAME=`basename "$0"`
USAGE="$PROGNAME [-v] [-p TeX_program] <file> ..."
USAGEMSG="$PROGNAME : usage: $USAGE"
=SH
cat pptex_common >>texdvi
=DUMPMORE texdvi
VERBOSE="n"
TEXPROGRAM="latex"
RUNBIBTEX="n"

while true
do
	case $1 in
	-b)		RUNBIBTEX=y			; shift ; 		;;
	-p)		TEXPROGRAM=$2			; shift ; shift	;;
	-v)		VERBOSE="y"			; shift 	;;
	--)						  shift ; break ;;
	-*)		diag "Bad flag for $PROGNAME: $1"
			diag $USAGEMSG
								  exit 1 ;;
	*)							  break ;;
	esac
done

if test $# -lt 1
then
	diag $USAGEMSG
	exit 1
fi

EXITSTATUS=0

set_pp_home

TEXINPUTS="$TEXINPUTS":"$PPHOME"/tex:"$PPHOME"/doc:
export TEXINPUTS
env_diag "using TEXINPUTS=$TEXINPUTS"
BIBINPUTS="$BIBINPUTS":"$PPHOME"/tex:"$PPHOME"/doc:
export BIBINPUTS
env_diag "using BIBINPUTS=$BIBINPUTS"
BSTINPUTS="$BSTINPUTS":"$PPHOME"/tex:"$PPHOME"/doc:
export BSTINPUTS
env_diag "using BSTINPUTS=$BSTINPUTS"

for FILE
do
	stem=`basename "$FILE" .tex`
	dname=`dirname "$FILE"`
	dvifile="$stem".dvi
	idxfile="$stem".idx
	sidfile="$stem".sid
	texfile="$dname"/"$stem".tex

	if test "$VERBOSE" = "y"
	then
		diag $PROGNAME: reading $texfile writing $dvifile
	fi

	if test ! -r "$texfile"
	then
		diag "$PROGNAME:" $texfile "does not exist or cannot be read"
		EXITSTATUS=1
	else
		touch "$sidfile"
		"$TEXPROGRAM" "$texfile"
		TEXPROGSTATUS="$?"
		if test "$TEXPROGSTATUS" -ne 0
		then
			EXITSTATUS=$TEXPROGSTATUS
		else	if test "$RUNBIBTEX" = "y"
			then
				bibtex "$stem"
			fi
			if test -r "$idxfile"
			then
				sort -u "$idxfile" \
				| sed	-e 's/{\([0-9]}\)$/{  \1/' \
					-e 's/{\([0-9][0-9]}\)$/{ \1/' \
				| sort -f > "$sidfile"
			fi
		fi
	fi
done

exit $EXITSTATUS
=TEX

=SH
chmod +x texdvi
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{PROGRAM DOCDVI}

Shell script that combines the actions of {\tt doctex}, {\tt bibtex}
(which is part of the basic \TeX{} distribution) and {\tt texdvi} with
the intention of fully processing a simple document from its {\tt.doc}
form to a printable {\tt.dvi} file.

=DUMP docdvi
#! /bin/sh
#	docdvi   From: $Id: imp100.doc,v 1.19 2007/07/10 16:42:41 rda Exp rda $

PROGNAME=`basename "$0"`
USAGE="$PROGNAME [-v] [-e edit_script] [-f view_file] [-K] [-k keyword_file]"
USAGE="$USAGE [-p TeX_program] <file> ..."
USAGEMSG="$PROGNAME: usage: $USAGE"
=SH
cat pptex_common >>docdvi
=DUMPMORE docdvi
VERBOSE="n"
EDITFILE=""
SVARGS=""
TEXPROGRAM="latex"
DOLATEX="3"
OPT_K=""

while true
do
	case $1 in
	-e)		EDITFILE="$EDITFILE -e \"$2\""	; shift ; shift	;;
	-f)		SVARGS=$SVARGS" -f \"$2\""		; shift ; shift	;;
	-K)		SVARGS=$SVARGS" -K"		; shift		;;
	-k)		SVARGS=$SVARGS" -k \"$2\""		; shift ; shift	;;
	-p)		TEXPROGRAM=$2			; shift ; shift	;;
	-v)		VERBOSE="y"			; shift 	;;
	-4)		DOLATEX="4"			  shift		;;
	-3)		DOLATEX="3"			  shift		;;
	-2)		DOLATEX="2"			  shift		;;
	-1)		DOLATEX="1"			  shift		;;
	--)						  shift ; break ;;
	-*)		diag "Bad flag for $PROGNAME: $1"
			diag $USAGEMSG
								  exit 1 ;;
	*)							  break ;;
	esac
done

set_pp_home

if test $# -lt 1
then
	diag $USAGEMSG
	exit 1
fi

TEXARGS="-p "\""$TEXPROGRAM\""

EXITSTATUS=0

for FILE
do
	stem=`basename "$FILE" .doc`
	dname=`dirname "$FILE"`
	docfile=$dname/$stem.doc
	dvifile=$stem.dvi

	if test $VERBOSE = "y"
	then
		diag $PROGNAME: reading $docfile writing $dvifile
		SVARGS=$SVARGS" -v"
		TEXARGS=$TEXARGS" -v"
	fi

	eval doctex $EDITFILE $SVARGS \""$docfile"\" || { EX=$? ; EXITSTATUS=1 ; continue ; }
	texdvi -b $TEXARGS "$stem" < /dev/null || { EX=$? ; EXITSTATUS=1 ; continue ; }
	if	test $DOLATEX -ge 2
	then	eval texdvi $TEXARGS \""$stem"\" < /dev/null \
		|| { EX=$? ; EXITSTATUS=1 ; continue ; }
	fi
	if	test $DOLATEX -ge 3
	then	eval texdvi $TEXARGS \""$stem"\" < /dev/null \
		|| { EX=$? ; EXITSTATUS=1 ; continue ; }
	fi
	if	test $DOLATEX -ge 4
	then	eval texdvi $TEXARGS \""$stem"\" < /dev/null \
		|| { EX=$? ; EXITSTATUS=1 ; continue ; }
	fi
done

exit $EXITSTATUS
=TEX

=SH
chmod +x docdvi
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{PROGRAM DOCPR}

Shell script to print a file containing extended characters in a
verbatim fashion.

{\hfuzz 2.2pt
=DUMP docpr
#! /bin/sh
#	docpr   From: $Id: imp100.doc,v 1.19 2007/07/10 16:42:41 rda Exp rda $

PROGNAME=`basename "$0"`
USAGE="$PROGNAME [-n] [-p] [-s] [-v] [-w width] <filename> ..."
USAGEMSG="$PROGNAME : usage: $USAGE"
=SH
cat pptex_common >>docpr
=DUMPMORE docpr
VERBOSE="n"
SCREENVIEW="n"
PRESERVE="n"
WIDTH="80"
NUMBERED="n"
TEMPDIR=/tmp
TEMPSTEM="$PROGNAME"$$
TEMPFILE="$TEMPDIR"/"$TEMPSTEM"

while true
do
	case $1 in
	-n)		NUMBERED="y"			  shift		;;
	-p)		PRESERVE="y"			  shift		;;
	-s)		SCREENVIEW="y"			  shift		;;
	-v)		VERBOSE="y"			; shift 	;;
	-w)		WIDTH=$2			; shift ; shift	;;
	--)						  shift ; break ;;
	-*)		diag "Bad flag for $PROGNAME: $1"
			diag $USAGEMSG
								  exit 1 ;;
	*)							  break ;;
	esac
done

set_pp_home

tidyup() {
	rm -f	"$TEMPFILE".doc "$TEMPFILE".tex \
		"$TEMPFILE".aux \
		"$TEMPFILE".sid "$TEMPFILE".log
	test "$PRESERVE" = "y" || rm -f "$TEMPFILE".dvi
}
trap tidyup 0 1 2 3 15

NUMBERPROG="nl -ba"
test $NUMBERED = "n" && NUMBERPROG="cat"

(
	echo '=TEX'
	echo '\documentstyle[TQa4,hol1,11pt]{article}'
	echo '\ftlinepenalty=0'
	echo '\begin{document}'
	echo '\ShowAllImages'
	echo '\vertbarfalse'
	echo '\underscoreoff'

	if test "$VERBOSE" = "y" -a "$PRESERVE" = "y"
	then
		diag Listing to file $TEMPFILE.dvi
	fi

	for FILE
	do
		if test "$VERBOSE" = "y"
		then
			diag Listing of file $FILE
		fi

		echo '\setcounter{page}{1}'
		echo '\section*{Listing of file'" $FILE}"

		if [ -r "$FILE" ]
		then
			echo '=GFTSHOW'

			"$NUMBERPROG" "$FILE" | expand | fold -$WIDTH \
			| unexpand | sed -e "1,\$s/^/ /"

			echo '=TEX'
		else
			echo "File "$FILE" does not exist or cannot be read."
			diag "$PROGNAME: file "$FILE" does not exist or cannot be read"
			EXITSTATUS=1
		fi

		echo '\newpage'
	done

	echo '=TEX'
	echo '\end{document}'

) > "$TEMPFILE".doc

cd "$TEMPDIR"

doctex "$TEMPSTEM"
texdvi "$TEMPSTEM" < /dev/null

if test $SCREENVIEW = "n"
then
	dvips "$TEMPSTEM"
else
	xdvi "$TEMPSTEM"
fi

exit $EXITSTATUS
=TEX
}

=SH
chmod +x docpr
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{PROGRAMS CONV_ASCII AND CONV_EXTENDED}

The two conversion programs are so similar that we generate them by
running sed on a temporary file:

=DUMP conv_temp
#! /bin/sh
#	conv_ascii/conv_extended   From: $Id: imp100.doc,v 1.19 2007/07/10 16:42:41 rda Exp rda $

PROGNAME=`basename "$0"`
USAGE="$PROGNAME [-v] [-K] [-k keyword_file] <file> ..."
USAGEMSG="$PROGNAME: usage: $USAGE"
=SH
cat pptex_common >>conv_temp
=DUMPMORE conv_temp
SIEVEFILE=""
KEYFILE=""
RENAME="y"
OPT_K=""

while true
do
	case $1 in
	-K)		OPT_K="-K"			; shift		;;
	-k)		KEYFILE=$KEYFILE" -k \"$2\""	; shift ; shift	;;
	-r)		RENAME="n"			; shift 	;;
	--)						  shift ; break ;;
	-*)		diag "Bad flag for $PROGNAME: $1"
			diag $USAGEMSG
								  exit 1 ;;
	*)							  break ;;
	esac
done

if test $# -lt 1
then
	diag $USAGEMSG
	exit 1
fi

set_pp_home

EXITSTATUS=0

convert(){
	{ echo '=CONVERT_FORMAT' ; sed -e '1,$s/^/ /' $2 ; echo '=IGN' ; } |
		eval sieve $OPT_K $KEYFILE $1 | sed -e '1,$s/ //'
}

for FILE
do
	stem=`basename "$FILE" .doc`
	dname=`dirname "$FILE"`
	docfile="$dname"/"$stem".doc
	outfile="$stem".SED_SUFFIX

	if test ! -r "$docfile"
	then
		diag "$PROGNAME:" $docfile "does not exist or cannot be read"
		EXITSTATUS=1
	else
		convert SED_TO "$docfile" > "$outfile"
		if	test "$RENAME" = "y"
		then	if	(convert SED_FROM "$outfile" 2>/dev/null |
					cmp -s - "$docfile")
			then	if	mv "$outfile" "$docfile"
				then	EXITSTATUS=0
				else	diag $PROGNAME:\
					"cannot rename $outfile as $docfile;"
					diag $PROGNAME:\
					"output of conversion is in $outfile" 
					EXITSTATUS=1
				fi
			else	diag $PROGNAME:\
				"conversion may not have been successful;"
				diag $PROGNAME:\
				"$docfile unchanged;" \
				"output of conversion is in $outfile"
				EXITSTATUS=2
			fi
		fi
	fi
done

exit $EXITSTATUS
=TEX
=SH
sed	-e '/SED_FROM/s/SED_FROM/extended/' \
	-e '/SED_TO/s/SED_TO/ascii/' \
	-e '/SED_SUFFIX/s/SED_SUFFIX/asc/' \
	<conv_temp >conv_ascii
chmod +x conv_ascii

sed	-e '/SED_FROM/s/SED_FROM/ascii/' \
	-e '/SED_TO/s/SED_TO/extended/' \
	-e '/SED_SUFFIX/s/SED_SUFFIX/ext/' \
	<conv_temp >conv_extended
chmod +x conv_extended
rm conv_temp
=TEX

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newpage
\section{PROGRAM PPTEXENV}

Shell script that runs a {\TeX} related command, e.g., a DVIWARE command like {\tt dvips}, with the environment set up so that {\Product} files will be picked up.

=DUMP pptexenv
#! /bin/sh
#	pptexenv   From: $Id: imp100.doc,v 1.19 2007/07/10 16:42:41 rda Exp rda $

PROGNAME=`basename "$0"`
USAGE="$PROGNAME [-v] command [options]"
USAGEMSG="$PROGNAME: usage: $USAGE"
=SH
cat pptex_common >>pptexenv
=DUMPMORE pptexenv
VERBOSE="n"

while true
do
	case $1 in
	-v)		VERBOSE="y"			; shift 	;;
	--)						  shift ; break ;;
	-*)		diag "Bad flag for $PROGNAME: $1"
			diag $USAGEMSG
							exit 1 ;;
	*)						break ;;
	esac
done

if	[ "$1" = "" ]
then	diag "no command supplied"
	diag $USAGEMSG
	exit 2
fi

set_pp_home

TEXINPUTS="$TEXINPUTS":"$PPHOME"/tex:"$PPHOME"/doc:
export TEXINPUTS
BIBINPUTS="$BIBINPUTS":"$PPHOME"/tex:
export BIBINPUTS
BSTINPUTS="$BSTINPUTS":"$PPHOME"/tex:
export BSTINPUTS

if	[ "$VERBOSE" = "y" ]
then
	echo TEXINPUTS="$TEXINPUTS"
	echo BIBINPUTS="$BIBINPUTS"
	echo BSTINPUTS="$BSTINPUTS"
fi
	sh -c $@
=TEX

=SH
chmod +x pptexenv
=TEX


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\end{document}
