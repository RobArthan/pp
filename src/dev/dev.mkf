######################################################################
#
#	dev.mkf from $Header: /home/rda/dev/RCS/dev.mkf,v 1.51 2009/04/21 10:14:19 rda Exp rda $
#
#	makefile for the for the ProofPower development tools
#
######################################################################


# suffixes known
.SUFFIXES: .db .doc .ldd0 .ldd .log .lot .sh .doc .tex .tch .dvi .sml

# default make target.  displays a list of more useful targets
default:
	@echo "The following are some of the more useful make commands:"
	@echo " "
	@echo "make -f dev.mkf inst        - builds and installs the dev files"
	@echo "make -f dev.mkf srcrel      - makes the dev source release"
	@echo "make -f dev.mkf src         - makes the source files"
	@echo "make -f dev.mkf bin         - makes the binaries"
	@echo "make -f dev.mkf doc         - makes the documentation"
	@echo "make -f dev.mkf test        - runs the tests"
	@echo "make -f dev.mkf build       - builds binaries for use from the current directory"
	@echo " "
	@echo "Various environment variables influence the behaviour:"
	@echo " "
	@echo "    PPCOMPILER  - compiler to use (POLYML or SMLNJ)"
	@echo "    PPTARGETDIR - target installation directory"
	@echo "                  (creates a clean directory called release if not set)"
	@echo "    PPVER       - product version"
	@echo "                  (taken from file version if not set)"

######################################################################
#
#	Makefile Definitions
#
######################################################################

PRODNAME=PPDev
SHORTNAME=dev
VERSION=$(shell echo $${PPVER:-`cat version  2>/dev/null || echo XXX.YYY.ZZZ`})
RELDIR=$(shell echo "$${PPTARGETDIR:-release}")
PRODUCT=$(PRODNAME)-$(PPVER)
CWD=$(shell pwd)
HAVERCS=$(shell (test -d RCS && echo y ) || echo n)

# database names
SLRPDBNAME=	slrpdb
SLRPDB=		$(SLRPDBNAME).$(HEAP_SUFFIX)

# Compiler specifics:
ifeq ($(PPCOMPILER), POLYML)
# Architecture type (used as a file-name suffix for images by NJML)
HEAP_SUFFIX=		"polydb"
# Directory for the poly stuff:
POLYHOME=$(shell echo $${PPPOLYHOME:-/usr/local})
POLYLIBDIR=$(POLYHOME)/lib
LD_RUN_PATH=$(shell echo $${PPLD_RUN_PATH:-$(POLYLIBDIR)})
# Commands to build the empty database
EXPORT="PolyML.commit();"
SLRPSTARTMLCMD=	val product_version : string = \"$(VERSION)\";\
	val copyright : string = \"Copyright (c) Lemma 1 Ltd. 2008\";\
	use\"dtd108.sml\"; use\"imp108.sml\";
SLRPMAKEDBCMD=	PPBuild.pp'save_name := \"$(SLRPDBNAME)\";\
	PPBuild.pp'save ();
SLRPSTARTCMD= \
 	{	{ echo "$(SLRPSTARTMLCMD)" | poly ; } && \
		LD_RUN_PATH=$(LD_RUN_PATH) \
			c++ -o slrp-ml pp-ml.o \
				-L$(POLYLIBDIR) -lpolymain -lpolyml && \
		{ echo "$(SLRPMAKEDBCMD)" | slrp-ml ; }	}
# Command to run ML
RUNML="slrp-ml"
MLDBPFX=""
SLRPDRIVER=slrp-ml
# Command to garbage-collect the database
DBGC="slrp-ml"
DBGCARG="-c"
else
ifeq ($(PPCOMPILER), SMLNJ)
# Architecture type (used as a file-name suffix for images by NJML)
HEAP_SUFFIX=		$(shell eval `.arch-n-opsys`; echo $$HEAP_SUFFIX)
# Commands to build the empty database
SLRPSTARTMLCMD=	val product_version : string = \"$(VERSION)\";\
	val copyright : string = \"Copyright (c) Lemma 1 Ltd. 2008\";\
	use\"dtd108.sml\"; use\"imp108.sml\"; \
	PPBuild.pp'save_name := \"$(SLRPDBNAME)\"; \
	SMLofNJ.exportML \"$(SLRPDBNAME)\";
SLRPSTARTCMD= echo "$(SLRPSTARTMLCMD)" | sml
SLRPDRIVER=
# Command to run ML
RUNML="sml"
MLDBPFX="@SMLload="
# Command to garbage-collect the database
DBGC="echo"
DBGCARG="database garbage collection not needed with SML/NJ"
endif
endif
# Distinctive tag for binary distribution file
BINTAG=$(shell eval `make -s -f dev.mkf arch-os; arch-os`; echo $$ARCH-$$OS-$$PPCOMPILER | dd conv=lcase 2>/dev/null)


TESTTOOLS	 = doctch
TESTTOOLS	+= doctds


SHELLSCRIPTS = slrp $(TESTTOOLS)


# SLRP Parser Generator
SLRPDOCS=     dtd018.doc imp018.doc\
		dtd017.doc imp017.doc\
		dtd118.doc imp118.doc

SLRPSMLFILES=	dtd108.sml imp108.sml \
		dtd002.sml imp002.sml \
		dtd001.sml imp001.sml \
		$(SLRPDOCS:.doc=.sml)

# Detailed Design and implementation of the IED test harness
TESTHARNESSDOCS=	dtd013.doc imp013.doc
TESTHARNESSSMLS=	$(TESTHARNESSDOCS:.doc=.sml)
TESTDOCS=	mdt017.doc mdt118.ttd
TESTTTDS=	$(TESTDOCS:.doc=.ttd)

# documentation files

RELEASEDOCFILES = dtd017.dvi dtd018.dvi imp018.sml usr032.dvi usr032a.eps

# Flags for ML compiler.  Currently non needed
MLFLAGS=

# packing list for the source release (target src).

PACKINGLIST=
PACKINGLIST+= dev.mkf
PACKINGLIST+= dtd018.doc
PACKINGLIST+= imp018.doc
PACKINGLIST+= dtd017.doc
PACKINGLIST+= imp017.doc
PACKINGLIST+= dtd013.doc
PACKINGLIST+= imp013.doc
PACKINGLIST+= mdt017.doc
PACKINGLIST+= dtd001.doc
PACKINGLIST+= imp001.doc
PACKINGLIST+= dtd002.doc
PACKINGLIST+= imp002.doc
PACKINGLIST+= imp100.doc
PACKINGLIST+= dtd108.doc
PACKINGLIST+= imp108.doc
PACKINGLIST+= dtd118.doc
PACKINGLIST+= imp118.doc
PACKINGLIST+= mdt118.doc
PACKINGLIST+= wrk063.doc
PACKINGLIST+= wrk064.doc
PACKINGLIST+= wrk077.doc
PACKINGLIST+= usr032.doc
PACKINGLIST+= usr032a.fig
PACKINGLIST+= hol.svf
PACKINGLIST+= fmu.bib
PACKINGLIST+= mtreport.sh

# packing list for user source release (they get the computed PostScript file
# so that they don't need the transfig package)
DISTPACKINGLIST=$(PACKINGLIST) usr032a.eps

######################################################################
#
# Dependencies - determining the order of compilation
#
######################################################################

dtd002.ldd: imp108.ldd
imp002.ldd: dtd002.ldd
dtd001.ldd: imp002.ldd
imp001.ldd: dtd001.ldd
dtd018.ldd: imp001.ldd
imp018.ldd: dtd018.ldd
dtd017.ldd: imp018.ldd
imp017.ldd: dtd017.ldd
dtd118.ldd: imp018.ldd
imp118.ldd: dtd118.ldd

arch-os: dtd108.doc
	docsml -f hol.svf dtd108.doc

######################################################################
#
#	Building the User Guide
#
######################################################################

usr032.dvi: usr032a.eps dtd017a.tex dtd017b.tex dtd018a.tex dtd118a.tex

dtd017a.doc: dtd017.doc
	sed -n -e '/dtd017a_begin/,/dtd017a_end/p' <dtd017.doc > dtd017a.doc

dtd017b.doc: dtd017.doc
	sed -n -e '/dtd017b_begin/,/dtd017b_end/p' <dtd017.doc > dtd017b.doc

dtd018a.doc: dtd018.doc
	sed -n -e '/=DOC/,/=ENDDOC/p' <dtd018.doc > dtd018a.doc

dtd118a.doc: dtd118.doc
	sed -n -e '/=DOC/,/=ENDDOC/p' <dtd118.doc > dtd118a.doc
	
######################################################################
#
#	Building the SLR Parser Generator
#
######################################################################

$(SLRPDB): imp017.ldd imp118.ldd

dtd002.sml \
imp002.sml : dtd002.doc imp002.doc hol.svf
	docsml -f hol.svf dtd002
	docsml  -f hol.svf imp002
	sed -e '/^[()"\\}; ]*new_error_message/,$$ !d' < dtd002.sml >> imp002.sml
	sed -e '/^[()"\\}; ]*new_error_message/,$$ d' < dtd002.sml > dtd002.sml.tmp
	mv dtd002.sml.tmp dtd002.sml


######################################################################
#
#	Building the shell scripts
#
######################################################################

$(TESTTOOLS): imp100.doc
	docsml imp100.doc

slrp: imp017.sml


######################################################################
#
#	Testing the parser generator
#
######################################################################

mdt017.sml:	slrp $(SLRPDB)

test:	$(TESTTTDS) $(SLRPDB) mtreport
	@grep 'module' $(TESTTTDS)
	mtreport $(TESTTTDS)


mdt118.ttd: pascal.grm.sml \
	c.grm.sml \
	wrk077.sml \
	slrp \
	$(SLRPDB) \
	$(SLRPSMLFILES) \
	$(TESTHARNESSSMLS)

c.grm.sml: wrk063.sml

# Making pascal.grm.sml will also make: ada95.grm.sml java11.grm.sml
pascal.grm.sml: wrk064.sml

######################################################################
#
#	Constructing release directories
#
######################################################################
# useful target to print out the names of all the files in the source releases
# Developer source:
packinglist:
	@echo $(PACKINGLIST)
# End-user source:
distpackinglist:
	@echo $(DISTPACKINGLIST)

inst:	binrel docrel

reldir:
	if [ "$${PPTARGETDIR:-}" = "" ]; \
	then \
		rm -rf "$(RELDIR)"; \
	fi
	[ -d   "$(RELDIR)" ] || mkdir "$(RELDIR)"

bindir:	reldir
	[ -d   "$(RELDIR)"/bin ] || mkdir "$(RELDIR)"/bin

docdir: reldir
	[ -d   "$(RELDIR)"/doc ] || mkdir "$(RELDIR)"/doc

srcdir:	reldir
	[ -d   "$(RELDIR)"/src ] || mkdir "$(RELDIR)"/src

build: $(SLRPDB) $(SHELLSCRIPTS)

binrel: bindir $(SLRPDRIVER) $(SLRPDB) $(SHELLSCRIPTS) arch-os
	cp $(SLRPDRIVER) $(SLRPDB) "$(RELDIR)"/bin
	cp $(SHELLSCRIPTS) "$(RELDIR)"/bin
	cp arch-os "$(RELDIR)"/bin
	chmod -R a-w "$(RELDIR)"
	chmod -R g-w "$(RELDIR)"
	chmod -R u+w "$(RELDIR)"

docrel: docdir $(RELEASEDOCFILES)
	cp $(RELEASEDOCFILES) "$(RELDIR)"/doc
	chmod -R a-w "$(RELDIR)"
	chmod -R g-w "$(RELDIR)"
	chmod -R u+w "$(RELDIR)"

rcsrel:  srcdir
	[ -d   "$(RELDIR)"/src/RCS ] || mkdir "$(RELDIR)"/src/RCS
	@for f in $(PACKINGLIST); \
	do \
		cp RCS/$$f,v "$(RELDIR)"/src/RCS/$$f,v; \
	done
	chmod -R a-w "$(RELDIR)"
	chmod -R g-w "$(RELDIR)"
	chmod -R u+w "$(RELDIR)"

bin:	binrel
	cd "$(RELDIR)" && tar cvf "$(CWD)"/$(PRODUCT).bin.tar ./*
	cd "$(CWD)" && gzip $(PRODUCT).bin.tar && \
	mv $(PRODUCT).bin.tar.gz $(PRODUCT).$(BINTAG).bin.tgz

doc:	docrel
	cd "$(RELDIR)" && tar cvf "$(CWD)"/$(PRODUCT).doc.tar ./*
	cd "$(CWD)" && gzip $(PRODUCT).doc.tar && mv $(PRODUCT).doc.tar.gz $(PRODUCT).doc.tgz

src:	rcsrel
	cd "$(RELDIR)" && tar cvf "$(CWD)"/$(PRODUCT).src.tar ./*
	cd "$(CWD)" && gzip $(PRODUCT).src.tar && mv $(PRODUCT).src.tar.gz $(PRODUCT).src.tgz

srcrel: srcdir $(DISTPACKINGLIST)
	@for f in $(DISTPACKINGLIST); \
	do \
		cp $$f "$(RELDIR)"/src/$$f; \
	done
	echo $(VERSION) > "$(RELDIR)"/src/version
	chmod -R a-w "$(RELDIR)"
	chmod -R g-w "$(RELDIR)"
	chmod -R u+w "$(RELDIR)"

######################################################################
#
#	Tidying Up
#
######################################################################

clean:
	@rm -f $(SLRPSMLFILES) *.ldd wrk063.sml wrk064.sml wrk077.sml *.grm.sml

veryclean: clean
	@rm -f $(SLRPDB)

######################################################################
#
#	Rules for compiling ML
#		- two specific ones for the portability infrastructure
#		  then a generic one for the rest.
#
######################################################################

dtd108.ldd imp108.ldd $(SLRPDRIVER): dtd108.sml imp108.sml
	$(SLRPSTARTCMD)  > dtd108.ldd
	@echo "See dtd108.ldd" > imp108.ldd

%.ldd: %.sml
	@rm -f $@ $*.err 2>/dev/null
	@echo "Compiling (code)" $<
	@echo "PPCompiler.gc_messages false; PPBuild.pp'load \"$<\";"\
	        | $(RUNML) $(MLFLAGS) $(MLDBPFX)$(SLRPDB) > $*.err
	@echo "+++ Compiled $<: OK (Compilation Run Complete) +++" >> $*.err
	@mv $*.err $@

%.ttd: %.sml $(TESTHARNESSSMLS)
	@rm -f $@ $.err 2>/dev/null
	@echo "Compiling (test)" $<
	@echo "PPBuild.pp'use \"$<\"; PPCompiler.exit 0;" \
		| $(RUNML) $(MLFLAGS) $(MLDBPFX)$(SLRPDB) > $*.err
	@mv $*.err $@

%.sml: %.doc hol.svf
	docsml -f hol.svf $*

%.dvi: %.tex fmu.bib
	texdvi $* > $*.dvi.ldd1 </dev/null
	bibtex $*
	texdvi $* > $*.dvi.ldd1 </dev/null
	texdvi $*

%.tex: %.doc
	doctex  $<

%.eps: %.fig
	fig2dev -L eps -m 0.75 $< $@
