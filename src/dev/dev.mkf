######################################################################
#
#	dev.mkf from $Header: /Users/rda/pp/dev/RCS/dev.mkf,v 1.55 2014/04/23 12:39:24 rda Exp rda $
#
#	makefile for the for the ProofPower development tools
#
######################################################################


# suffixes known
.SUFFIXES: .db .doc .ldd0 .ldd .log .lot .sh .doc .tex .tch .dvi .sml

# default make target.  displays a list of more useful targets
default:
	@echo "The following are some of the more useful make commands:"
	@echo " "
	@echo "make -f dev.mkf inst        - builds and installs the dev files"
	@echo "make -f dev.mkf srcrel      - makes the dev source release"
	@echo "make -f dev.mkf src         - makes the source files"
	@echo "make -f dev.mkf bin         - makes the binaries"
	@echo "make -f dev.mkf doc         - makes the documentation"
	@echo "make -f dev.mkf test        - runs the tests"
	@echo "make -f dev.mkf build       - builds binaries for use from the current directory"
	@echo " "
	@echo "Various environment variables influence the behaviour:"
	@echo " "
	@echo "    PPCOMPILER  - compiler to use (POLYML, SMLNJ or MLTON)"
	@echo "    PPTARGETDIR - target installation directory"
	@echo "                  (../../bld if not set)"
	@echo "    PPVER       - product version"
	@echo "                  (taken from file version if not set)"
	@echo " "
	@echo "The makefile depends on the PPTex package"

######################################################################
#
#	Makefile Definitions
#
######################################################################

PRODNAME=PPDev
SHORTNAME=dev
VERSION=$(shell echo $${PPVER:-`cat version  2>/dev/null || echo XXX.YYY.ZZZ`})
RELDIR=$(shell echo "$${PPTARGETDIR:-../../bld}")
PRODUCT=$(PRODNAME)-$(PPVER)
YEAR=$(shell date +%Y)

# Distinctive tag for binary distribution file
BINTAG=$(shell eval `make -s -f dev.mkf arch-os; arch-os`; echo $$ARCH-$$OS-$$PPCOMPILER | dd conv=lcase 2>/dev/null)

SHELLSCRIPTS = slrp


# SLRP Parser Generator
SLRPSUPPDOCS= dtd108.doc imp108.doc
SLRPSUPPDOCS+=dtd002.doc imp002.doc
SLRPSUPPDOCS+=dtd001.doc imp001.doc

SLRPGENDOCS= dtd018.doc imp018.doc
SLRPGENDOCS+=dtd017.doc imp017.doc

SLRPEXTRADOCS= dtd118.doc imp118.doc

SLRPGENSMLFILES= $(SLRPSUPPDOCS:.doc=.sml)
SLRPGENSMLFILES+=$(SLRPGENDOCS:.doc=.sml)

SLRPSMLFILES= $(SLRPSUPPDOCS:.doc=.sml)
SLRPSMLFILES+=$(SLRPGENDOCS:.doc=.sml)
SLRPSMLFILES+=$(SLRPEXTRADOCS:.doc=.sml)

# Detailed Design and implementation of the IED test harness
TESTHARNESSDOCS=	dtd013.doc imp013.doc
TESTHARNESSSMLS=	$(TESTHARNESSDOCS:.doc=.sml)
TESTDOCS=	mdt017.doc mdt118.ttd
TESTTTDS=	$(TESTDOCS:.doc=.ttd)

# documentation files

RELEASEDOCFILES = dtd017.dvi dtd018.dvi imp018.sml usr032.dvi usr032a.eps

# Flags for ML compiler.  Currently non needed
MLFLAGS=

# packing list for the source release (target src).

PACKINGLIST=
PACKINGLIST+= dev.mkf
PACKINGLIST+= dtd018.doc
PACKINGLIST+= imp018.doc
PACKINGLIST+= dtd017.doc
PACKINGLIST+= imp017.doc
PACKINGLIST+= dtd013.doc
PACKINGLIST+= imp013.doc
PACKINGLIST+= mdt017.doc
PACKINGLIST+= dtd001.doc
PACKINGLIST+= imp001.doc
PACKINGLIST+= dtd002.doc
PACKINGLIST+= imp002.doc
PACKINGLIST+= dtd108.doc
PACKINGLIST+= imp108.doc
PACKINGLIST+= dtd118.doc
PACKINGLIST+= imp118.doc
PACKINGLIST+= mdt118.doc
PACKINGLIST+= wrk063.doc
PACKINGLIST+= wrk064.doc
PACKINGLIST+= wrk077.doc
PACKINGLIST+= usr024.doc
PACKINGLIST+= usr032.doc
PACKINGLIST+= usr032a.fig
PACKINGLIST+= hol.svf
PACKINGLIST+= mtreport.sh

# packing list for user source release (they get the computed PostScript file
# so that they don't need the transfig package)
DISTPACKINGLIST=$(PACKINGLIST) usr032a.eps


######################################################################
#
#	Building the User Guide and Other Documents
#
######################################################################

usr024_data.tex: usr024_data.txt
	@sed	-e /PRODUCT/s#PRODUCT#$(PRODUCT)#g \
		-e "/DATETIME/s#DATETIME#`date +'%H:%M:%S %d/%m/%Y'`"#g \
		-e "/YEAR/s#YEAR#`date +'%Y'`"#g \
		<usr024_data.txt >usr024_data.tex

USR.sty: usr024.doc usr024.sml usr024_data.tex
	@sed -e 's/[ 	]%.*$$//' \
	-e 's/^[ 	][ 	]*//' \
	-e 's/[ 	][ 	]*$$//' usr024.sml > USR.sty

usr032.dvi: usr032a.eps dtd017a.tex dtd017b.tex dtd018a.tex dtd118a.tex USR.sty

dtd017a.doc: dtd017.doc
	sed -n -e '/dtd017a_begin/,/dtd017a_end/p' <dtd017.doc > dtd017a.doc

dtd017b.doc: dtd017.doc
	sed -n -e '/dtd017b_begin/,/dtd017b_end/p' <dtd017.doc > dtd017b.doc

dtd018a.doc: dtd018.doc
	sed -n -e '/=DOC/,/=ENDDOC/p' <dtd018.doc > dtd018a.doc

dtd118a.doc: dtd118.doc
	sed -n -e '/=DOC/,/=ENDDOC/p' <dtd118.doc > dtd118a.doc
	
######################################################################
#
#	Building the SLR Parser Generator binary
#
######################################################################

slrp-header.sml: slrp-header.sml.template
	sed -e '/VERSION/s/VERSION/$(PPVER)/' \
		-e '/YEAR/s/YEAR/$(YEAR)/' \
			<slrp-header.sml.template >slrp-header.sml

dtd002.sml \
imp002.sml : dtd002.doc imp002.doc hol.svf
	docsml -f hol.svf dtd002
	docsml  -f hol.svf imp002
	sed -e '/^[()"\\}; ]*new_error_message/,$$ !d' < dtd002.sml >> imp002.sml
	sed -e '/^[()"\\}; ]*new_error_message/,$$ d' < dtd002.sml > dtd002.sml.tmp
	mv dtd002.sml.tmp dtd002.sml

imp108.sml: imp108-pp-include.sml

imp108-pp-include.sml: dtd108.sml

ifeq ($(PPCOMPILER), POLYML)
#
SLRP_BIN=slrp-bin
TESTML=poly
slrp-bin: slrp-header.sml $(SLRPGENSMLFILES)
	echo "use\"polyml-build.sml\";" | poly > slrp-bin.log 2>&1
	polyc -o slrp-bin slrp-bin.o
#
else
ifeq ($(PPCOMPILER), SMLNJ)
#
HEAP_SUFFIX=$(shell eval `.arch-n-opsys`; echo $$HEAP_SUFFIX)
SLRP_BIN=slrp-bin.$(HEAP_SUFFIX)
TESTML=sml
slrp-bin: $(SLRP_BIN)
$(SLRP_BIN): slrp-header.sml $(SLRPGENSMLFILES)
	echo "use\"smlnj-build.sml\";" | sml > slrp-bin.log 2>&1
#
else # MLton is the only other supported compiler:
#
SLRP_BIN=slrp-bin
TESTML=poly
slrp-bin: slrp-header.sml $(SLRPGENSMLFILES)
	mlton -output slrp-bin mlton-build.mlb > slrp-bin.log 2>&1
#
endif
endif

######################################################################
#
#	Building the shell script
#
######################################################################

slrp.template slrp-header.sml.template: imp017.doc
	docsml imp017

slrp: slrp.template
	sed -e '/^MLCOMPILER=/s/=.*/=$(PPCOMPILER)/' < slrp.template > slrp
	chmod +x slrp

######################################################################
#
#	Testing the parser generator
#
######################################################################

test:	$(TESTTTDS) mtreport
	@grep 'module' $(TESTTTDS)
	mtreport $(TESTTTDS)

mdt118.sml: ada95.grm.sml \
	java11.grm.sml \
	pascal.grm.sml \
	c.grm.sml \
	wrk077.sml

mdt118.ttd: mdt118.sml \
	$(SLRPSMLFILES) \
	$(TESTHARNESSSMLS)

c.grm.sml: wrk063.sml
	docsml wrk063

ada95.grm.sml java11.grm.sml pascal.grm.sml: wrk064.sml
	docsml wrk063

######################################################################
#
#	Constructing release directories
#
######################################################################
# useful target to print out the names of all the files in the source releases
# Developer source:
packinglist:
	@echo $(PACKINGLIST)
# End-user source:
distpackinglist:
	@echo $(DISTPACKINGLIST)

inst:	binrel docrel

reldir:
	if [ "$${PPTARGETDIR:-}" = "" ]; \
	then \
		rm -rf "$(RELDIR)"; \
	fi
	[ -d   "$(RELDIR)" ] || mkdir "$(RELDIR)"

bindir:	reldir
	[ -d   "$(RELDIR)"/bin ] || mkdir "$(RELDIR)"/bin

docdir: reldir
	[ -d   "$(RELDIR)"/doc ] || mkdir "$(RELDIR)"/doc

srcdir:	reldir
	[ -d   "$(RELDIR)"/src ] || mkdir "$(RELDIR)"/src

build: $(SLRP_BIN) $(SHELLSCRIPTS)

binrel: bindir $(SLRPDRIVER) $(SLRP_BIN) $(SHELLSCRIPTS) arch-os
	cp $(SLRPDRIVER) $(SLRP_BIN) "$(RELDIR)"/bin
	cp $(SHELLSCRIPTS) "$(RELDIR)"/bin
	cp arch-os "$(RELDIR)"/bin
	chmod -R a-w "$(RELDIR)"
	chmod -R g-w "$(RELDIR)"
	chmod -R u+w "$(RELDIR)"

docrel: docdir $(RELEASEDOCFILES)
	cp $(RELEASEDOCFILES) "$(RELDIR)"/doc
	chmod -R a-w "$(RELDIR)"
	chmod -R g-w "$(RELDIR)"
	chmod -R u+w "$(RELDIR)"

srcrel: srcdir $(DISTPACKINGLIST)
	@for f in $(DISTPACKINGLIST); \
	do \
		cp $$f "$(RELDIR)"/src/$$f; \
	done
	echo $(VERSION) > "$(RELDIR)"/src/version
	chmod -R a-w "$(RELDIR)"
	chmod -R g-w "$(RELDIR)"
	chmod -R u+w "$(RELDIR)"

######################################################################
#
#	Tidying Up
#
# N.b., this deletes ALL files whose name begins with "slrp-bin" or "run-".
######################################################################

clean:
	rm -f $(SLRPSMLFILES) *.ldd wrk063.sml wrk064.sml wrk077.sml *.grm.sml
	rm -f *.grm.txt *.grm.log *.grm.red.sml *.log *.run *.polydb
	rm -f *.dvi *.ldd1 *.aux *.bbl *.blg *.dvi *.idx *.lof *.toc *.sid
	rm -f arch-os dtd018a.* slrp slrp-ml usr032a.eps wrk077.[123].* *.ttd
	rm -f dtd017[ab].* dtd118a.* *.sml mtreport *.o *.c *.ada *.java
	rm -f *.tok *.p *.brax slrp-bin* *.template *.mlb run-*
	rm -f *.pp *.diff

######################################################################
#
#	Rules for processing doc files and derivatives thereof
#
######################################################################

%.ttd: %.sml $(TESTHARNESSSMLS) $(SLRPSMLFILES)
	@echo "Running (test)" $<
ifeq ($(PPCOMPILER), MLTON)
	mlton -output run-$* run-$*.mlb
	run-$* > $*.ttd
else 
	@echo "use \"run-$<\";" | $(TESTML) >$*.ttd
endif

%.pp: %.doc
	pp_file_conv < $*.doc > $*.pp

%.sml: %.pp
	sieve -u -f hol.svf sml < $*.pp > $*.sml

# %.sml: %.doc hol.svf
#	docsml -f hol.svf $*

%.dvi: %.tex
	texdvi -b $* > $*.dvi.ldd1 </dev/null
	texdvi $* > $*.dvi.ldd1 </dev/null
	texdvi $*

%.tex: %.doc
	doctex  $<

%.eps: %.fig
	fig2dev -L eps -m 0.75 $< $@
