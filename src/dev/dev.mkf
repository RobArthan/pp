######################################################################
#
#	dev.mkf from $Header: /home/rda/dev/RCS/dev.mkf,v 1.6 2002/03/13 16:50:01 rda Exp rda $
#
#	makefile for the for the ProofPower development tools
#
######################################################################


# suffixes known
.SUFFIXES: .db .doc .ldd0 .ldd .log .lot .sh .doc .tex .tch

# default make target.  displays a list of more useful targets
PRODNAME=PPDev
default:
	@echo "The following are some of the more useful make commands:"
	@echo " "
	@echo "make -f dev.mkf src                   - makes the source files"
	@echo "make -f dev.mkf bin                   - makes the binaries"
	@echo "make -f dev.mkf doc                   - makes the documentation"

######################################################################
#
#	Makefile Definitions
#
######################################################################

PRODUCT=$(PRODNAME)-$(PPVER)
CWD=$(shell pwd)
COPYRIGHT="Copyright Lemma 1 Ltd. 2000"

# Compiler specifics:
ifeq ($(PPCOMPILER), POLYML)
# Architecture type (used as a file-name suffix for images by NJML)
HEAP_SUFFIX=		"polydb"
# Commands to build the empty database
EXPORT="PolyML.commit();"
SLRPSTARTMLCMD=	val product_version : string = \"$(RELEASE)\";\
	val copyright : string = \"Copyright (c) Lemma 1 Ltd. 2002\";\
	use\"dtd108.sml\"; use\"imp108.sml\"; \
	PolyML.commit();
SLRPSTARTCMD= cat /usr/lib/poly/ML_dbase > $(SLRPDB);\
	echo "$(SLRPSTARTMLCMD)" | poly $(SLRPDB)
# Command to run ML
RUNML="poly"
MLDBPFX=""
# Command to garbage-collect the database
DBGC="poly"
DBGCARG="-d"
else
ifeq ($(PPCOMPILER), SMLNJ)
# Architecture type (used as a file-name suffix for images by NJML)
HEAP_SUFFIX=		$(shell eval `.arch-n-opsys`; echo $$HEAP_SUFFIX)
# Commands to build the empty database
SLRPSTARTMLCMD=	val product_version : string = \"$(RELEASE)\";\
	val copyright : string = \"Copyright (c) Lemma 1 Ltd. 2002\";\
	use\"dtd108.sml\"; use\"imp108.sml\"; \
	PPBuild.pp'save_name := \"$(SLRPDBNAME)\"; \
	SMLofNJ.exportML \"$(SLRPDBNAME)\";
SLRPSTARTCMD= echo "$(SLRPSTARTMLCMD)" | sml
# Command to run ML
RUNML="sml"
MLDBPFX="@SMLload="
# Command to garbage-collect the database
DBGC="echo"
DBGCARG="database garbage collection not needed with SML/NJ"
endif
endif
# Distinctive tag for binary distribution file
BINTAG=$(shell eval `make -s arch-os; arch-os`; echo $$ARCH-$$OS-$$PPCOMPILER | dd conv=lcase 2>/dev/null)

# database names
SLRPDBNAME=	slrpdb
SLRPDB=		$(SLRPDBNAME).$(HEAP_SUFFIX)

TESTTOOLS	 = doctch
TESTTOOLS	+= doctds


SHELLSCRIPTS = slrp $(TESTTOOLS)


# SLRP Parser Generator
SLRPDOCS=     dtd018.doc imp018.doc\
		dtd017.doc imp017.doc

SLRPSMLFILES=	dtd108.sml imp108.sml \
		dtd002.sml imp002.sml \
		dtd001.sml imp001.sml \
		$(SLRPDOCS:.doc=.sml)

# Detailed Design and implementation of the IED test harness
TESTHARNESSDOCS=	dtd013.doc imp013.doc
TESTHARNESSSMLS=	$(TESTHARNESSDOCS:.doc=.sml)
TESTDOCS=	mdt017.doc
TESTTTDS=	$(TESTDOCS:.doc=.ttd)

# documentation files

RELEASEDOCFILES = dtd017.dvi dtd018.dvi

# Flags for ML compiler.  Currently non needed
MLFLAGS=

# packing list for the source release (target src).

PACKINGLIST=
PACKINGLIST+= README.dev.src
PACKINGLIST+= dev.mkf
PACKINGLIST+= dtd018.doc
PACKINGLIST+= imp018.doc
PACKINGLIST+= dtd017.doc
PACKINGLIST+= imp017.doc
PACKINGLIST+= dtd013.doc
PACKINGLIST+= imp013.doc
PACKINGLIST+= mdt017.doc
PACKINGLIST+= dtd001.doc
PACKINGLIST+= imp001.doc
PACKINGLIST+= dtd002.doc
PACKINGLIST+= imp002.doc
PACKINGLIST+= imp100.doc
PACKINGLIST+= dtd108.doc
PACKINGLIST+= imp108.doc
PACKINGLIST+= hol.svf

######################################################################
#
# Dependencies - determining the order of compilation
#
######################################################################

dtd002.ldd: imp108.ldd
imp002.ldd: dtd002.ldd
dtd001.ldd: imp002.ldd
imp001.ldd: dtd001.ldd
dtd018.ldd: imp001.ldd
imp018.ldd: dtd018.ldd
dtd017.ldd: imp018.ldd
imp017.ldd: dtd017.ldd

arch-os: dtd108.sml

######################################################################
#
#	Building the SLR Parser Generator
#
######################################################################

$(SLRPDB): imp017.ldd

dtd002.sml \
imp002.sml : dtd002.doc imp002.doc hol.svf
	docsml -f hol.svf dtd002
	docsml  -f hol.svf imp002
	sed -e '/^[()"\\}; ]*new_error_message/,$$ !d' < dtd002.sml >> imp002.sml
	sed -e '/^[()"\\}; ]*new_error_message/,$$ d' < dtd002.sml > dtd002.sml.tmp
	mv dtd002.sml.tmp dtd002.sml


######################################################################
#
#	Building the shell scripts
#
######################################################################

$(TESTTOOLS): imp100.doc
	docsml imp100.doc

slrp: imp017.sml

######################################################################
#
#	Making the README file - leave $PPVER alone for this one
#
######################################################################

README.dev: README.dev.src
#	sed -e '/$$PPVER/s/$$PPVER/'"$$PPVER/g" \
#			< README.dev.src > README.dev
	cp README.dev.src README.dev


######################################################################
#
#	Testing the parser generator
#
######################################################################

mdt017.sml:	slrp $(SLRPDB)

slrp_test:	$(TESTTTDS) $(SLRPDB)
	@grep 'module' $(TESTTTDS)

######################################################################
#
#	Constructing release directories
#
######################################################################
# useful target to print out the names of all the files in the source release

packinglist:
	@echo $(PACKINGLIST)

reldir:
	rm -rf release
	mkdir release

bindir:	reldir
	mkdir release/bin

docdir: reldir
	mkdir release/doc

srcdir:	reldir
	mkdir release/src
	mkdir release/src/RCS
	@for f in $(PACKINGLIST); \
	do \
		cp RCS/$$f,v release/src/RCS/$$f,v; \
	done
	chmod -R a-w release
	chmod -R g-w release
	chmod -R u+w release

binrel: bindir $(SLRPDB) $(SHELLSCRIPTS) README.dev
	cp $(SLRPDB) release/bin
	cp $(SHELLSCRIPTS) release/bin
	cp arch-os release/bin
	cp README.dev release
	chmod -R a-w release
	chmod -R g-w release
	chmod -R u+w release

docrel: docdir $(RELEASEDOCFILES) README.dev
	cp $(RELEASEDOCFILES) release/doc
	cp README.dev release
	chmod -R a-w release
	chmod -R g-w release
	chmod -R u+w release

srcrel:  srcdir

bin:	binrel
	cd release && tar cvf $(CWD)/$(PRODUCT).bin.tar ./*
	cd $(CWD) && gzip $(PRODUCT).bin.tar && mv $(PRODUCT).bin.tar.gz $(PRODUCT).bin.tgz

doc:	docrel
	cd release && tar cvf $(CWD)/$(PRODUCT).doc.tar ./*
	cd $(CWD) && gzip $(PRODUCT).doc.tar && mv $(PRODUCT).doc.tar.gz $(PRODUCT).doc.tgz

src:	srcrel
	cd release && tar cvf $(CWD)/$(PRODUCT).src.tar ./*
	cd $(CWD) && gzip $(PRODUCT).src.tar && mv $(PRODUCT).src.tar.gz $(PRODUCT).src.tgz

######################################################################
#
#	Tidying Up
#
######################################################################

clean:
	@rm -f $(SLRPDOCS) $(SLRPSMLFILES)

veryclean: clean
	@rm -f $(SLRPDB)

######################################################################
#
#	Rules for compiling ML
#		- two specific ones for the portability infrastructure
#		  then a generic one for the rest.
#
######################################################################

dtd108.ldd imp108.ldd: dtd108.sml imp108.sml
	$(SLRPSTARTCMD)  | tee dtd108.ldd > imp108.ldd

%.ldd: %.sml
	@rm -f $@ $*.err 2>/dev/null
	@echo "Compiling (code)" $<
	@echo "PPCompiler.gc_messages false; PPBuild.pp'load \"$<\";"\
	        | $(RUNML) $(MLFLAGS) $(MLDBPFX)$(SLRPDB) > $*.err
	@echo "+++ Compiled $<: OK (Compilation Run Complete) +++" >> $*.err
	@mv $*.err $@

%.ttd: %.sml $(TESTHARNESSSMLS)
	@rm -f $@ $.err 2>/dev/null
	@echo "Compiling (test)" $<
	@echo "PPBuild.pp'use \"$<\"; PPCompiler.exit 0;" \
		| $(RUNML) $(MLFLAGS) $(MLDBPFX)$(SLRPDB) > $*.err
	@mv $*.err $@

%.sml: %.doc hol.svf
	docsml -f hol.svf $*

%.dvi: %.doc
	docdvi $*
