=IGN
********************************************************************************
dtd002.doc: this file is part of the PPDev system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design of System Control and Basic Error Reporting}  %% Mandatory field
\def\TPPheadtitle{Detailed Design of \cr System Control and Basic Error Reporting}
\TPPref{DS/FMU/IED/DTD002}  %% Mandatory field
\def\SCCSversion{$Revision: 2.10 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2005/04/16 16:13:31 $%
}}  %% Mandatory field (with sensible default)
\TPPstatus{Draft}
%\TPPstatus{Approved}
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{R.D.~Arthan & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.B.~Jones & HAT Manager}
\TPPabstract{
This document gives the detailed design of the
system control and basic
error reporting subsystem for the ICL HOL system.
It also defines the policies for reporting and handling errors
and for allocating error messages to be followed throughout
the detailed design and implementation.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library \\ R.D. Arthan\\ K. Blackburn\\ A.J. Hammon}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history}  % to get section number `0.3'
\begin{description}
\item[Issues 1.1-1.16] Initial drafts.
\item [Issue 2.1 (\FormatDate{91/08/08%
})] First approved issue after inspection ID0019.

\item[Issue 2.2 (\FormatDate{92/01/20})] Updated to use new fonts.
\item[Issue 2.3~ (\FormatDate{92/02/21})] Changed
the format of error messages.
\item[Issue 2.4 (14th December 1992)]
Changed to allow uniform saving of controls and error messages.
\item[Issue 2.5] New function {\it pending\_reset\_control\_state}.
\item[Issue 2.6] Fixed bug in restoring controls in child database.
\item[Issue 2.7] {\it new\_XXX} functions now warn rather than fail when the
{\it XXX} is already there.
\item[Issue 2.8] Copyright and banner updates for open source release.
\item[Issue 2.9] PPDev-specific updates for open source release
\item[Issue 2.10] Added pending reset function for the error messages to simplify (and solve a problem in) system initialisation.
\item[Issue 2.11] Added elaborate.
\end{description}
\subsection{Changes forecast}
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design of the
the structure $SystemControl$ and $BasicError$
called for in \cite{DS/FMU/IED/HLD006}. It is intended
to constitute a detailed design document for part of the ICL HOL
system in the  sense of \cite{DS/FMU/IED/PLN008}.
\subsection{Introduction}
\subsubsection{Background and Purpose}
The desired attributes of the error handling subsystem
are defined in \cite{DS/FMU/IED/HLD006}.
\subsubsection{Dependencies}
None, but note that the implementation of this material
will involve some compiler dependencies for best results
(see section \ref{Deficiencies} below for more information).
\subsubsection{Interface}
The document defines signatures $BasicError$ and
$SystemControl$.
\subsubsection{Possible Enhancements}
It may be desirable for more of the standard system controls
to be introduced here.
\subsubsection{Deficiencies}\label{Deficiencies}
The main deficiency will be with Standard ML compilers which
do not support printing of the value associated with an
uncaught exception.
To support such a compiler a facility, $print\_last\_error$,
could be offered so that the user could ask the system
to print the error message associated with an evaluation
which had just failed.

The design given here will accommodate compilers which
will print a string value associated with an uncaught
exception but less efficiently than is possible with
a compiler allowing a user defined printing function
to be invoked (since it will not be possible to defer
formatting of error messages until the point when the
message is printed).

\section{POLICIES}
\subsection{Allocation of Message Texts}
Detailed design and implementation documents should not contain
string literals containing
text for inclusion in messages
other than those which appear in arguments to calls of
the function {\it new\_error\_message} which is used to
allocate an error message text and associated error message number.
Subsystems such as the type checker
which format and output complex messages containing information
derived from their input should allocate message texts which give
the framework of the desired message and use the inserts facility
supported by $get\_error\_message$ to generate the desired message.

Error message numbers for a document have the form
$1000 ¸ r + n$, where $r$ is the numeric part of the reference
for the detailed design document allocating a message,
and $1 \le n \le 999$. It is permitted for several functions
to share the same message number if the text is suitable.

\subsection{Error Reporting}
The function $fail$ should be used to report errors which may be
trapped (e.g. by a rewriting algorithm which works by repetition
until failure).

The function $error$ should be used to report errors which must
be reported to the user and are not intended to be trapped.
An example might be an ``impossible'' branch in a case switch
indicating an error in the system itself.

Recoverable situations in which the interactive user will be
asked whether to continue are to be reported by the function
$warn$ (which is defined in \cite{DS/FMU/IED/DTD010}).

\subsection{Error Handling}
The idioms used for handling (i.e. trapping) an error should
normally follow one of the following fragments.

=GFT
    handle complaint => ... divert complaint ...
    handle complaint => ... elaborate complaint ...
    handle complaint => ... list_divert ...
    handle complaint => ... reraise complaint ...
    handle complaint => ... area_of complaint ...
    handle (Fail _) => ...
=TEX

That is to say, if a handler is supplied which can catch any value
of type $exn$ (as in the first four examples), then the only
use of the exception value should be as an argument to one of the functions
defined in this document.
Alternatively a handler may be supplied to catch exceptions
constructed with the constructor $Fail$.

Other, more specialised, error handling schemes may be required
in some cases. These are not encouraged
and should be reviewed against the policy here and
the stated objectives for error handling laid down in
\cite{DS/FMU/IED/HLD006}.

\section{MINIMAL ERROR REPORTING}
\subsection{Overview}
=DOC
signature ÛBasicErrorÝ = sig
=DESCRIBE
This is the signature of the structure $BasicError$.
=ENDDOC
=TEX
This structure contains a basic repertoire of error
reporting facilities and related functions.
\subsection{Types}
The following types are used for error messages.
The details of the type $MESSAGE$ are local to this
structure since they may, in general, be compiler-dependent.
Typically, $MESSAGE$ will be a function which
returns
a string indicating the name of the source
of an error, a number identifying the error message and
a list of strings for inserting in the message.
A function, $get\_message$, is available for inspecting
$MESSAGE$s.
=DOC
type ÛMESSAGEÝ
=DESCRIBE
This type is used to pass error and other messages
around in the system. 
=USES
Obscure debugging situations.
=ENDDOC
=TEX
\subsection{Exceptions}
Two exceptions are used: one which may be trapped
and one which, by convention, ensures that
a message will be printed.
=DOC
exception ÛFailÝ of MESSAGE
exception ÛErrorÝ of MESSAGE
=DESCRIBE
These exception are raised to report error conditions.
$Fail$ is for errors which may be trapped (so that
the associated message is suppressed).
$Error$ is intended to ensure that the message will be reported
and, by convention, should not be trapped.
=USES
Obscure debugging situations.
=ENDDOC
\subsection{Error Message Database}
The structure will contain the database of error messages.
These are referenced by a number and are allocated
as and when needed at compile time by the following
function:
=DOC
val Ûnew_error_messageÝ : {id:int, text:string} -> unit
=DESCRIBE
This function adds a new entry to the database
of error messages.
Note that substrings of the message of the form ``$?i$'' where
$i$ is a decimal digit have special significance (see
$fail$ for details).
``$??$'' may be used to insert a single ``$?$'' character
in a message.

If the $id$ and the $text$ are identical to an existing entry, then
$new\_error\_message$ has no effect.
If there is an existing entry with the same $id$ but a different $text$
then a message is reported on the standard output
and the existing entry is left unchanged.
=FAILURE
2001	The error number ?0 is already in use for a different message
=USES
For use when adding facilities to the system.
=ENDDOC
=DOC
val Ûget_error_messageÝ : int -> (string list) -> string
=DESCRIBE
This function returns the entry in the error message
database associated with the given integer key.
The second parameter gives a list of strings to be inserted
into the text of the message. Substrings of the
message text of the form  ``$?i$'', where
$i$ is a decimal digit, indicate positions where these insertions
are to be made. ``$?0$'' identifies the string at the
head of the list etc.  
=FAILURE
2002	The error number ?0 does not identify an entry in the error message database
=ENDDOC
=DOC
val Ûget_error_messagesÝ : unit -> {id:int, text:string} list
val Ûset_error_messagesÝ : {id:int, text:string} list -> unit
=DESCRIBE
$get\_error\_messages$ returns the contents of the error message
database as a list.

$set\_error\_messages$ uses $new\_error\_message$ to
add any new error messages in a list of such into 
the database of error messages.
It will issue a message on the standard output
(and change nothing) for any messages that do not match
those already present.
=ENDDOC
=TEX

=DOC
val Ûicl'change_error_messageÝ : {id:int, text:string} -> unit
=DESCRIBE
This function changes an entry in the database
of error messages. If the number does not identify
an existing entry a new entry is made.
=USES
ICL Use only.
=ENDDOC
=TEX
\subsection{Simple Error Reporting}\label{SimpleErrorReporting}
=DOC
val ÛfailÝ : string -> int -> (unit -> string) list -> 'a
val ÛerrorÝ : string -> int -> (unit -> string) list -> 'a
=DESCRIBE
These functions report a message of the corresponding
class with text determined by an integer parameter and
a list of string valued functions.
The string parameter is intended to give the name
of the top level function which has invoked the error message.

The error messages are stored in a database maintained by
$new\_error\_message$ and the integer parameter gives the
key for the desired entry in the database. The list of
string-valued functions allow the messages to be parameterised.
When the error is printed, the functions are evaluated to
produce a list of strings. Substrings of the database
entry of the form ``$?i$'' where $i$ is a decimal
digit are replaced by the corresponding entries in the
list (with ``$?0$'' corresponding to the head of the list).
(If there are more than ten entries in the list, entries
after the tenth are evaluated but the result of the
evaluation is ignored).

$fail$ is for unrecoverable errors which may, however, be trapped. It causes
exception $Fail$ to be raised.

$error$ is for unrecoverable errors which must be reported
to the user.
It causes exception $Error$ to be raised.
=FAILUREC
As for $set\_flag$ etc.
=USES
For use when coding new facilities to add to the system.
=ENDDOC
=TEX
\subsection{Printing Errors}
Values of type $MESSAGE$ may be inspected using the following
function.
=DOC
val Ûget_messageÝ: MESSAGE -> string
=DESCRIBE
This returns a printable form of an error message
value.
The message text is followed by a trailer of the form
``{\it $<$\#nnnnn area$>$}'', where {\it \#nnnnn}
is the number of the message in the error database and {\it area}
typically gives the name of the function which gave rise to the error message.
=USES
In constructing extensions to the system.
=SEEALSO
$get\_message\_text$
=ENDDOC
The following fragment of text is stored in the
error message database used by $get\_message$ to
format the message. As it is not itself an error message it is not included
in the description of the function for the user in the above box.

=FAILURE
2003	* ?2 [?1.?0] *
=TEX
=DOC
val Ûget_message_textÝ: MESSAGE -> string
=DESCRIBE
This returns a printable form of an error message text.
The message text is given without the header information which is
inserted by $get\_message$, q.v.
=USES
In constructing extensions to the system.
=SEEALSO
$get\_message$
=ENDDOC
=TEX
We could supply a function to print the
message corresponding to the latest error to be reported.
This would mainly be for use on
systems which do not allow exceptions raised at the top level
to be pretty printed under our control.
The variable used to store the last error would be updated
as rarely as possible (e.g. in the error pretty printer
on systems which support one).

\subsection{Support for Error Handling}
=DOC
val ÛdivertÝ : exn -> string -> string -> int -> (unit -> string) list -> 'a
val Ûlist_divertÝ : exn -> string -> ((string * int * ((unit -> string) list)) list) -> 'a
val ÛelaborateÝ : exn -> int -> string -> int -> (unit -> string) list -> 'a
=DESCRIBE
These functions support a style of error handling in which,
if an error is reported during evaluation of an expression,
the source of the error may be checked and the error report
modified if needed to give a more meaningful report to
the user.
Sources of errors are identified by the string passed
as the first argument to the function $fail$ which is used
to flag trappable errors. By convention, this string gives
the name of the top level function which has raised
the error.

In the call $divert\,X\,from\,new\,new\_msg\,inserters$,
$X$ is the exception which has been
raised and
$from$ identifies a possible source for an error report.
$inserters$ is a list of functions to be used to generate
insertions for the error message (as with $fail$ q.v.).
If an error has been reported by $from$, the call will have
the same effect as if $fail\,new\,new\_msg\,inserters$ had been
called.

$list\_divert\,X\,new\,triples$ handles the more general case in which
errors from several sources are expected.
$X$ and $new$ are as for $divert$. $triples$ gives a list
of triples giving possible sources of error and the corresponding
new messages and insertion functions.

$elaborate$ is similar to $divert$ but makes it possible
to expand on the information provided by the function that has raised the exception.
In the call $elaborate\,X\,old\_msg\,new\,new\_msg\,inserters$, $old\_msg$ identifies an error message text.
If $X$ results from a call of $fail$ (or equivalent) with that error message text, the effect is as if
$fail\,new\,new\_msg\,(inserters'@inserters)$ had been called, with $inserters'$
the list of string-valued functions associated with $X$. 
=USES
For use when coding new facilities to add to the system.
=ENDDOC
=TEX
=DOC
val Ûarea_ofÝ : exn -> string
=DESCRIBE
This returns the name of the function which raised an exception
(provided the exception was raised with $fail$
following the usual conventions). If the exception was not
the one raised by $fail$ then it is raised again.
=USES
For use when coding new facilities to add to the system.
=ENDDOC
=DOC
val ÛreraiseÝ : exn -> string -> 'a
=DESCRIBE
This re-raises an exception. If the exception is the exception $Fail$
(as raised by $fail$, q.v.) then the function name associated with the exception
is changed to the name given by the second argument.
=USES
For use when coding new facilities to add to the system.
=ENDDOC
=DOC
val Ûpass_onÝ : exn -> string -> string -> 'a
=DESCRIBE
$pass\_on$ $exn$ $from$ $to$ is similar to $reraise$, q.v., but
the function name associated with the exception is only modified if it
is equal to $from$, in which case it is changed to $to$.
=ENDDOC
=TEX
\subsection{Initialisation}
Some implementations will require the error system to be initialised
at the start of a session. For example, with PolyML, the function which
causes the exception values to be printed by the pretty printer needs
to be reinvoked at the start of each session. The following function
is intended to perform any such initialisations.
=DOC
val Ûicl'error_initÝ : unit -> unit
=DESCRIBE
This function is used to initialise certain aspects of the error reporting
system. It is called automatically at the start of each session. It is
harmless, but unnecessary, to call it within a session.
=ENDDOC
=DOC
val Ûpending_reset_error_messagesÝ : unit -> unit -> unit
=DESCRIBE
This function is intended for use in system initialisation and shutdown.
The binding {\it val p = pending\_reset\_error\_messages()}, defines {\it p}
as a function which will set the internal state of the {\it BasicError} module to
the value it had at the time the binding for {\it prcs} was made.
This is used to remember the set-up for error messages introduced in a child database.
=ENDDOC
=SML
end; (* of signature BasicError *)
=TEX
\section{SYSTEM CONTROL}\label{OVERVIEW}
\subsection{Overview}
=DOC
signature ÛSystemControlÝ = sig
=DESCRIBE
This is the signature of the structure $SystemControl$.
=ENDDOC
Note that the signature constraint of this structure is not imposed until IMP010 has been
compiled. This allows IMP010 (which defines the function {\it warn}) to assign to
a variable which the {\it new\_XXX} functions use to generate a warning.
=TEX
This section contains definitions concerned with
user-settable controls which govern the behaviour of the
system.

The intention is to give an extensible scheme whereby
ICL and user code can declare any controls needed
at compile time.
Boolean, string and integer controls are catered for.

\subsection{Introducing new controls.}
=DOC
val Ûnew_flagÝ :
	{name:string, control:bool ref, default:unit->bool, check:bool -> bool} -> unit
val Ûnew_int_controlÝ :
	{name:string, control:int ref, default:unit->int, check:int -> bool} -> unit
val Ûnew_string_controlÝ :
	{name:string, control:string ref, default:unit->string, check:string -> bool} -> unit
=DESCRIBE
These functions are used to introduce new named
control variables of the corresponding types. The $name$ parameter gives the
name of the new control variable. The $control$ component
of the parameter
gives the variable itself.
The $default$ component of the parameter is a function
which is used by $reset\_flag$, $reset\_int\_control$ or
$reset\_string\_control$ to reset the value.

After the introduction, users
may update the control using one of
$set\_flag$, $set\_int\_control$ or $set\_string\_control$.

The $check$ component of the parameter is
a function to check the validity of the control values, and, if desired,
to notify other code of the change in the value.
When one of the control setting functions,
is called, an error is reported if the $check$
function for the control returns {\it false} when applied to the
new value supplied by the caller.

The following message is raised as a warning if the control variable name is already in use.
If the user elects to continue, the old control variable is renamed (by decorating it with
one or more prime characters) and a new control variable is introduced with the specified name.
=FAILURE
2010	The name ?0 is already in use as a control variable name
=USES
This function is for use when adding new facilities
to the HOL system which require global control variables.
=ENDDOC
In most cases, it is better for ICL code to supply a $check$ function
which calls $fail$ rather than returns $false$, since this
allows a more appropriate error message to be reported than the one
produced by $set\_flag$ etc. below:

=DOC
val Ûset_flagÝ : (string * bool) -> bool
val Ûset_int_controlÝ : (string * int) -> int
val Ûset_string_controlÝ : (string * string) -> string
=DESCRIBE
These functions are used to change
the values of named
control variables of the corresponding types.
The first parameter gives the
name of the control variable. The second parameter
gives the desired new value.
They return the previous value of the control variable.
=FAILURE
2011	The name ?0 is not in use as a control variable name
2012	Value out of range for control variable ?0
=USES
This function is the standard means of changing
global control variables.
=ENDDOC
=DOC
val Ûreset_flagÝ : string -> bool
val Ûreset_int_controlÝ : string -> int
val Ûreset_string_controlÝ : string -> string
=DESCRIBE
These functions are used to reset
the values of named
control variables of the corresponding types.
The parameter gives the
name of the control variable.
They return the previous value of the control variable.
=FAILURE
2011	The name ?0 is not in use as a control variable name
=USES
This function is for use when adding new facilities
to the HOL system which require global control variables.
=ENDDOC
=DOC
val Ûget_flagÝ : string -> bool
val Ûget_int_controlÝ : string -> int
val Ûget_string_controlÝ : string -> string
=DESCRIBE
These functions are used to get
the values of named
control variables of the corresponding types.
The parameter gives the
name of the control variable.
=FAILURE
2011	The name ?0 is not in use as a control variable name
=USES
This function is for use when adding new facilities
to the HOL system which require global control variables.
=ENDDOC
=DOC
val Ûget_flagsÝ : unit -> (string * bool) list
val Ûget_int_controlsÝ : unit -> (string * int) list
val Ûget_string_controlsÝ : unit -> (string * string) list
val Ûget_controlsÝ : unit ->
	((string * bool) list * (string * int) list * (string * string) list)
=DESCRIBE
These functions return the names and current values of
the system flags or controls.
=ENDDOC
=DOC
val Ûset_flagsÝ : (string * bool) list -> unit
val Ûset_int_controlsÝ : (string * int) list -> unit
val Ûset_string_controlsÝ : (string * string) list -> unit
val Ûset_controlsÝ : ((string * bool) list * (string * int) list * (string * string) list)
	-> unit
=DESCRIBE
These functions set the current values of
the system flags or controls named in the lists.
Items that are not mentioned keep their previous values.
=ENDDOC
=DOC
val Ûreset_flagsÝ : unit -> unit
val Ûreset_int_controlsÝ : unit -> unit
val Ûreset_string_controlsÝ : unit -> unit
val Ûreset_controlsÝ : unit -> unit
=DESCRIBE
These functions reset the current values of all
the system flags or controls in the system,
as by $reset\_flag$, etc.
=ENDDOC
=DOC
val Ûpending_reset_control_stateÝ : unit -> unit -> unit
=DESCRIBE
This function is intended for use in system initialisation and shutdown.
The binding {\it val prcs = pending\_reset\_control\_state()}, defines {\it prcs}
as a function which will set the internal state of the {\it SystemControl} module to
the value it had at the time the binding for {\it prcs} was made.
This is used to remember the set-up for controls introduced in a child database.
Note that, to avoid problems with stateful user-defined check functions, this
function does not attempt to set the values of the controls.
The values are, after all, not part of the {\it SystemControl} module's internal state.
=ENDDOC

=SML
end; (* of signature SystemControl *)
=TEX
\section{TEST POLICY}
The module tests for this module are to follow the guidelines
laid down in \cite{DS/FMU/IED/PLN008}.

\twocolumn[\section{INDEX OF DEFINED TERMS}]
\printindex
\end{document}


