=TEX
%%%%% YOU MAY WANT TO CHANGE POINT SIZE IN THE FOLLOWING:
\documentclass[a4paper,12pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{epsf}
\makeindex
\def\Slrp{{\bf SLRP}}
\def\Hide#1{\relax}

%%%%% YOU WILL USUALLY WANT TO CHANGE THE FOLLOWING TO SUIT YOU AND YOUR DOCUMENT:

\def\Title{ A {\Slrp} Parser for Full ANSI-C }

\def\Abstract{\begin{center}
{\bf Abstract}\par\parbox{0.7\hsize}
{\small This document gives a grammar for ANSI-C together with the supporting code to form a
fairly complete parser for the full ANSI-C language.}
\end{center}}

\def\Reference{LEMMA1/DEV/WRK077}

\def\Author{R.D. Arthan}

\def\EMail{{\tt rda@lemma-one.com}}

\def\Phone{+44 118 958 4409}

\def\Fax{+44 118 956 1920}

%%%%% YOU MAY WANT TO CHANGE THE FOLLOWING TO GET A NICE FRONT PAGE:
\def\FrontPageTitle{ {\huge \Title } }
\def\FrontPageHeader{\raisebox{16ex}{\begin{tabular}[t]{c}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year\\\strut\\
\end{tabular}}}
\begin{centering}



\end{centering}

%%%%% THE FOLLOWING DEFAULTS WILL GENERALLY BE RIGHT:

\def\Version{$Revision: 1.1 $%
}
\def\Date{\FormatDate{$Date: 2006/10/05 15:04:43 $%
}}

%%%%% NOW BEGIN THE DOCUMENT AND MAKE THE FRONT PAGE

\begin{document}
\headsep=0mm
\FrontPage
\headsep=10mm

%%%%% STANDARD RED-TAPE SECTIONS (MAY WANT TO INTERLEAVE SOME \newpage COMMANDS IN THESE)

%%%%% CONTENTS:

\subsection{Contents}

\tableofcontents

%%%%% REFERENCES:

\subsection{References}

\bibliographystyle{fmu}

%%%%% CHANGE THE FOLLOWING AS NECESSARY (E.G., TO PICK UP daz.bib):
{\raggedright
\bibliography{fmu}
}
%%%%% CHANGES HISTORY:
\subsection{Changes History}
\begin{description}
\item[Issues 1.1] First draft.
\end{description}

%%%%%  CHANGES FORECAST:

\subsection{Changes Forecast}

As determined by experience with the template.

%%%%% DISTRIBUTION LIST

\subsection{Distribution}
\begin{center}
\begin{tabular}{ll}
Lemma 1 Development Library
\end{tabular}
\end{center}


\newpage

%%%%% NOW THE CREATIVE BIT:

\section{Introduction}
\subsection{Scope}
This document is part of some preparatory work on the C language.

\subsection{Purpose and Background}
This document is part of the {\Slrp} test suite and also provides an example of
various techniques of interest to users of {\Slrp}.

\subsection{Overview}
This document provides a grammar in the {\Slrp} format that can support the full C language.
I.e., unlike the grammar of \cite{LEMMA1/DEV/WRK063}, this grammar caters for the numerous
rather obscure consequences of the definitions of C, for example, the rule that says structure member names are in a separate namespace .

=TEX
\section{THE GRAMMAR} \label{GRAMMAR}
Our starting point is the reference grammar given in \cite{LEMMA1/DEV/WRK063}
which is itself based on the 1990 standard \cite{ansi90} and the grammar given in.

The following records the various changes that have been made to the grammar of \cite{LEMMA1/DEV/WRK063}.

\begin{itemize}
\item
Introduce a new non-terminal  identifier\_or\_typedef\_name for
use in situations such as statement labels where either an identifier or a typedef name is allowed.
Use this as appropriate wherever it does not cause LALR(1) conflicts (which is everywhere except in a direct\_declarator).
\item
* Extend declaration\_list to allow empty lists, and exploit this to abbreviate the productions that use it.
\item
* Allow declaration\_specifiers rather than just specifier_qualifier_list at the beginning of a struct\_declaration (leaving a later phase to reject a struct\_declaration with a storage class).
\item
Generalise declarator etc. to allow typedef names and add a new construct
non\_type\_declarator for a declarator that does not comprise a typedef name on its own.
Use non\_type\_declarator in place of declarator wherever necessary to eliminate LALR(1)
conflicts.
\end{itemize}

\subsection{Translation Units}
=DUMP wrk077.grm.txt
€translation_unit›
	= external_declaration
	| translation_unit, external_declaration
	;
=TEX
=DUMPMORE wrk077.grm.txt
€external_declaration›
	= function_definition
	| declaration
	;
=TEX
=DUMPMORE wrk077.grm.txt
€function_definition›
	= declarator, declaration_list, compound_statement
	| declaration_specifiers, declarator, declaration_list, compound_statement
	;
=TEX
\subsection{Declarations}

=TEX
The following production will need an action function in the working grammar.
=DUMPMORE wrk077.grm.txt
€declaration›				(* REFERENCE ONLY *)
	= declaration_specifiers, `;`
	| declaration_specifiers, init_declarator_list, `;`
	;
=TEX
=DUMPMORE wrk077.grm.txt
€declaration_list›
	=
	| declaration_list, declaration
	;
=TEX
=DUMPMORE wrk077.grm.txt
€declaration_specifiers›
	= storage_class_specifier
	| storage_class_specifier, declaration_specifiers
	| type_specifier
	| type_specifier, declaration_specifiers
	| type_qualifier
	| type_qualifier, declaration_specifiers
	;
=TEX
=DUMPMORE wrk077.grm.txt
€storage_class_specifier›			(* REFERENCE ONLY *)
	= `auto`
	| `register`
	| `static`
	| `extern`
	| `typedef`
	;
=TEX
=DUMPMORE wrk077.grm.txt
€type_specifier›				(* REFERENCE ONLY *)
	= `void`
	| `char`
	| `short`
	| `int`
	| `long`
	| `float`
	| `double`
	| `signed`
	| `unsigned`
	| struct_or_union_specifier
	| enum_specifier
	| typedef_name
	;
=TEX
=DUMPMORE wrk077.grm.txt
€type_qualifier›
	= `const`
	| `volatile`
	;
=TEX
=DUMPMORE wrk077.grm.txt
€struct_or_union_specifier›		(* REFERENCE ONLY *)
	= struct_or_union, `{`, struct_declaration_list, `}`
	| struct_or_union, identifier_or_typedef_name, `{`, struct_declaration_list, `}`
	| struct_or_union, identifier_or_typedef_name
	;
=TEX
=DUMPMORE wrk077.grm.txt
€struct_or_union›
	= `struct`
	| `union`
	;
=TEX
=DUMPMORE wrk077.grm.txt
€struct_declaration_list›
	= struct_declaration
	| struct_declaration_list, struct_declaration
	;
=TEX
=DUMPMORE wrk077.grm.txt
€init_declarator_list›
	= init_declarator
	| init_declarator_list, `,`, init_declarator
	;
=TEX
=DUMPMORE wrk077.grm.txt
€init_declarator›
	= declarator
	| declarator, `=`, initializer
	;
=TEX
=DUMPMORE wrk077.grm.txt
€struct_declaration›
	= declaration_specifiers, struct_declarator_list, `;`
	;
=TEX
=DUMPMORE wrk077.grm.txt
€specifier_qualifier_list›
	= type_specifier
	| type_specifier, specifier_qualifier_list
	| type_qualifier
	| type_qualifier, specifier_qualifier_list
	;
=TEX
=DUMPMORE wrk077.grm.txt
€struct_declarator_list›
	= struct_declarator
	| struct_declarator_list, `,`, struct_declarator
	;
=TEX
=DUMPMORE wrk077.grm.txt
€struct_declarator›
	= declarator
	| `:`, constant_expression
	| declarator, `:`, constant_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€enum_specifier›
	= `enum`, `{`, enumerator_list, `}`
	| `enum`, identifier_or_typedef_name, `{`, enumerator_list, `}`
	| `enum`, identifier_or_typedef_name
	;
=TEX
=DUMPMORE wrk077.grm.txt
€enumerator_list›
	= enumerator
	| enumerator_list, `,`, enumerator
	;
=TEX
=DUMPMORE wrk077.grm.txt
€enumerator›				(* REFERENCE ONLY *)
	= identifier_or_typedef_name
	| identifier_or_typedef_name, `=`, constant_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€declarator›
	= direct_declarator
	| pointer, direct_declarator
	;
=TEX
In the first alternative below, the intention is that a {\tt typedef} name may appear as an identifier, e.g., when a variable in an inner scope has the same name as a {\tt typedef} name in an outer scope.
However, expressing that in the grammar leads to
an ambiguous grammar with many LALR(1) conflicts.
=DUMPMORE wrk077.grm.txt
€direct_declarator›		(* REFERENCE ONLY *)
	= identifier
	| `(`, declarator, `)`
	| direct_declarator, `[`, `]`
	| direct_declarator, `[`, constant_expression, `]`
	| direct_declarator, `(`, `)`
	| direct_declarator, `(`, parameter_type_list, `)`
	| direct_declarator, `(`, identifier_list, `)`
	;
=TEX
=DUMPMORE wrk077.grm.txt
€pointer›
	= `*`
	| `*`, type_qualifier_list
	| `*`, pointer
	| `*`, type_qualifier_list, pointer
	;
=TEX
=DUMPMORE wrk077.grm.txt
€type_qualifier_list›
	= type_qualifier
	| type_qualifier_list, type_qualifier
	;
=TEX
=DUMPMORE wrk077.grm.txt
€parameter_type_list›
	= parameter_list
	| parameter_list, `,`, `...`
	;
=TEX
=DUMPMORE wrk077.grm.txt
€parameter_list›
	= parameter_declaration
	| parameter_list, `,`, parameter_declaration
	;
=TEX
=DUMPMORE wrk077.grm.txt
€parameter_declaration›
	= declaration_specifiers, declarator
	| declaration_specifiers
	| declaration_specifiers, abstract_declarator
	;
=TEX
The following production is only used for old style formal parameter lists, in which {\tt typedef} names are (following {\tt gcc} at least) not to be treated as identifiers.
=DUMPMORE wrk077.grm.txt
€identifier_list›			(* REFERENCE ONLY *)
	= identifier
	| identifier_list, `,`, identifier
	;
=TEX
=DUMPMORE wrk077.grm.txt
€initializer›
	= assignment_expression
	| `{`, initializer_list, `}`
	| `{`, initializer_list, `,`, `}`
	;
=TEX
=DUMPMORE wrk077.grm.txt
€initializer_list›
	= initializer
	| initializer_list, `,`, initializer
	;
=TEX
=DUMPMORE wrk077.grm.txt
€type_name›			(* REFERENCE ONLY *)
	= specifier_qualifier_list
	| specifier_qualifier_list, abstract_declarator
	;
=TEX
=DUMPMORE wrk077.grm.txt
€abstract_declarator›
	= pointer
	| direct_abstract_declarator
	| pointer, direct_abstract_declarator
	;
=TEX
=DUMPMORE wrk077.grm.txt
€direct_abstract_declarator›
	= `(`, abstract_declarator, `)`
	| `[`, `]`
	| `[`, constant_expression, `]`
	| direct_abstract_declarator, `[`, `]`
	| direct_abstract_declarator, `[`, constant_expression, `]`
	| `(`, `)`
	| `(`, parameter_type_list, `)`
	| direct_abstract_declarator, `(`, `)`
	| direct_abstract_declarator, `(`, parameter_type_list, `)`
	;
=TEX
The production for {\it typedef\_name} has to be modified, since the grammar becomes ambiguous
if typedef names cannot be distinugished from other names. E.g., to decide whether the
expression ``{\tt(X)(x)}'' is a cast or a function call, one needs to know whether ``{\tt X}''
denotes a type.
=DUMPMORE wrk077.grm.txt
€typedef_name› =
	TypeDefName;
=TEX
However, the C name space rules imply that there a {\tt typedef} name may be used as an identifier in several places, e.g., as a structure tag.
Where it does not introduce LALR(1) conflicts, we use the following production to achieve this:
=DUMPMORE wrk077.grm.txt
€identifier_or_typedef_name›
	= identifier
	| typedef_name
	;
=TEX
\subsection{Statements}
=DUMPMORE wrk077.grm.txt
€statement›
	= labeled_statement
	| compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	;
=TEX
=DUMPMORE wrk077.grm.txt
€labeled_statement›
	= identifier_or_typedef_name, `:`, statement
	| `case`, constant_expression, `:`, statement
	| `default`, `:`, statement
	;
=TEX
=DUMPMORE wrk077.grm.txt
€compound_statement›			(* REFERENCE ONLY *)
	= `{`, declaration_list, `}`
	| `{`, declaration_list, statement_list, `}`
	;
=TEX
=DUMPMORE wrk077.grm.txt
€statement_list›
	= statement
	| statement_list, statement
	;
=TEX
=DUMPMORE wrk077.grm.txt
€expression_statement›
	= `;`
	| expression, `;`
	;
=TEX
This is where the shift/reduce conflict arises. The statement ``{\tt if(a) if(b) f(); else g();}''
can be parsed so that the else-part belongs to the inner if-statement or the outer one
according to the following grammar. The resolution is that it should belong to the
inner if-statement, i.e., reduce.
=DUMPMORE wrk077.grm.txt
€selection_statement›
	= `if`, `(`, expression, `)`, statement
	| `if`, `(`, expression, `)`, statement, `else`, statement
	| `switch`, `(`, expression, `)`, statement
	;
=TEX
To avoid 7 extra cases in the following, we introduce a new production for an optional expression.
=DUMPMORE wrk077.grm.txt
€iteration_statement›
	= `while`, `(`, expression, `)`, statement
	| `do`, statement, `while`, `(`, expression, `)`, `;`
	| `for`, `(`, expression_opt, `;`, expression_opt, `;`, expression_opt, `)`,
	  statement
	;
=TEX
=DUMPMORE wrk077.grm.txt
€expression_opt›
	=
	| expression;
=TEX
=DUMPMORE wrk077.grm.txt
€jump_statement›
	= `goto`, identifier_or_typedef_name, `;`
	| `continue`, `;`
	| `break`, `;`
	| `return`, expression_opt, `;`
	;
=TEX
\subsection{Expressions}

=DUMPMORE wrk077.grm.txt
€expression›
	= assignment_expression
	| expression, `,`, assignment_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
=TEX
=DUMPMORE wrk077.grm.txt
€assignment_expression›
	= conditional_expression
	| unary_expression, assignment_operator, assignment_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€assignment_operator›
	= `=`
	| `*=`
	| `/=`
	| `%=`
	| `+=`
	| `-=`
	| `<<=`
	| `>>=`
	| `&=`
	| `^=`
	| `|=`
	;
=TEX
=DUMPMORE wrk077.grm.txt
€conditional_expression›
	= logical_or_expression
	| logical_or_expression, `?`, expression, `:`, conditional_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€constant_expression›
	= conditional_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€logical_or_expression›
	= logical_and_expression
	| logical_or_expression, `||`, logical_and_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€logical_and_expression›
	= inclusive_or_expression
	| logical_and_expression, `&&`, inclusive_or_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€inclusive_or_expression›
	= exclusive_or_expression
	| inclusive_or_expression, `|`, exclusive_or_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€exclusive_or_expression›
	= and_expression
	| exclusive_or_expression, `^`, and_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€and_expression›
	= equality_expression
	| and_expression, `&`, equality_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€equality_expression›
	= relational_expression
	| equality_expression, `==`, relational_expression
	| equality_expression, `!=`, relational_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€relational_expression›
	= shift_expression
	| relational_expression, `<`, shift_expression
	| relational_expression, `>`, shift_expression
	| relational_expression, `<=`, shift_expression
	| relational_expression, `>=`, shift_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€shift_expression›
	= additive_expression
	| shift_expression, `<<`, additive_expression
	| shift_expression, `>>`, additive_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€additive_expression›
	= multiplicative_expression
	| additive_expression, `+`, multiplicative_expression
	| additive_expression, `-`, multiplicative_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€multiplicative_expression›
	= cast_expression
	| multiplicative_expression, `*`, cast_expression
	| multiplicative_expression, `/`, cast_expression
	| multiplicative_expression, `%`, cast_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€cast_expression›
	= unary_expression
	| `(`, type_name, `)`, cast_expression
	;
=TEX
=DUMPMORE wrk077.grm.txt
€unary_expression›
	= postfix_expression
	| `++`, unary_expression
	| `--`, unary_expression
	| unary_operator, cast_expression
	| `sizeof`, unary_expression
	| `sizeof`, `(`, type_name, `)`
	;
€unary_operator›
	= `&`
	| `*`
	| `+`
	| `-`
	| `~`
	| `!`
	;
=TEX
=DUMPMORE wrk077.grm.txt
€postfix_expression›
	= primary_expression
	| postfix_expression, `[`, expression, `]`
	| postfix_expression, `(`, `)`
	| postfix_expression, `(`, argument_expression_list, `)`
	| postfix_expression, `.`, identifier_or_typedef_name
	| postfix_expression, `->`, identifier_or_typedef_name
	| postfix_expression, `++`
	| postfix_expression, `--`
	;
=TEX
=DUMPMORE wrk077.grm.txt
€primary_expression›
	= identifier
	| constant
	| string
	| `(`, expression, `)`
	;
=TEX
=DUMPMORE wrk077.grm.txt
€argument_expression_list›
	= assignment_expression
	| argument_expression_list, `,`, assignment_expression
	;
=TEX
We leave enumeration constants out of the following list, on the grounds that a practical parser
would more likely treat them as identifiers during lexical analysis. The distinction between
enumeration constants and other identifiers does not affect the parsing.
=DUMPMORE wrk077.grm.txt
€constant›
	= IntegerConstant
	| CharacterConstant
	| FloatingConstant
	;
=TEX
We add productions for {\it string} and identifier just to keep the naming scheme uniform.
=DUMPMORE wrk077.grm.txt
€string›			(* REFERENCE ONLY *)
	= String
	;
=DUMPMORE wrk077.grm.txt
€identifier›
	= Identifier
	;
=TEX
=SH
slrp -g -l 2  -f wrk077.grm.txt >wrk077.grm.run
=TEX
\newpage
\section{INDEX}
\small
\printindex
\end{document}


=IGN
