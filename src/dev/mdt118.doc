=IGN
********************************************************************************
dtd118.doc: this file is part of the PPDev system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
%%%%% YOU MAY WANT TO CHANGE POINT SIZE IN THE FOLLOWING:
\documentclass[a4paper,12pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{epsf}
\makeindex
\def\Slrp{{\bf SLRP}}
\def\Hide#1{\relax}

%%%%% YOU WILL USUALLY WANT TO CHANGE THE FOLLOWING TO SUIT YOU AND YOUR DOCUMENT:

\def\Title{ Generic SLRP Parser: Module Tests}

\def\Abstract{\begin{center}
{\bf Abstract}\par
{The module tests for the generic SLRP parser.}
\end{center}}

\def\Reference{DS/FMU/IED/MDT118}

\def\Author{R.D. Arthan}

\def\EMail{{\tt rda@lemma-one.com}}

\def\Phone{+44 118 958 4409}

\def\Fax{+44 118 956 1920}

%%%%% YOU MAY WANT TO CHANGE THE FOLLOWING TO GET A NICE FRONT PAGE:
\def\FrontPageTitle{ {\huge \Title } }
\def\FrontPageHeader{\raisebox{16ex}{\begin{tabular}[t]{c}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year\\\strut\\
\end{tabular}}}

%%%%% THE FOLLOWING DEFAULTS WILL GENERALLY BE RIGHT:

\def\Version{$Revision: 2.14 $%
}
\def\Date{\FormatDate{$Date: 2003/02/23 14:48:48 $%
}}

%%%%% NOW BEGIN THE DOCUMENT AND MAKE THE FRONT PAGE

\begin{document}
\headsep=0mm
\FrontPage
\headsep=10mm

%%%%% STANDARD RED-TAPE SECTIONS (MAY WANT TO INTERLEAVE SOME \newpage COMMANDS IN THESE)

%%%%% CONTENTS:

\subsection{Contents}

\tableofcontents

%%%%% REFERENCES:

\subsection{References}

\bibliographystyle{fmu}

%%%%% CHANGE THE FOLLOWING AS NECESSARY (E.G., TO PICK UP daz.bib):
{\raggedright
\bibliography{fmu}
}
%%%%% CHANGES HISTORY:
\subsection{Changes History}
\begin{description}

\item[Issues 1.1 to 1.12 ] First drafts.
\end{description}

%%%%%  CHANGES FORECAST:

\subsection{Changes Forecast}

None.

%%%%% DISTRIBUTION LIST

\subsection{Distribution}
\begin{center}
\begin{tabular}{ll}
{\Product} Development Library & Lemma 1\\
\end{tabular}
\end{center}
\newpage
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for a generic framework for a parser generated
by \Slrp. This is useful both for testing {\Slrp} and as a service to {\Slrp} users.

\subsection{Introduction}
See \cite{DS/FMU/IED/DTD118}.



\subsection{Purpose and Background}
See \cite{DS/FMU/IED/DTD118}.

\section{TEST CASES}
We currently run the generic parser on each of Ada 95, C, Java 1.1 and pascal.

\pagebreak
\section{RUNNING SLRP ON THE GRAMMARS}
=SML
(*
=SH
for f in ada9x c java11 pascal
do
	slrp -t -g -f $f.grm; cat $f.grm.sml > grammar.sml
	docsml imp118; mv imp118.sml imp118.$f.sml
done
=TEX
=SML
*)
=TEX
\section{COMPILING THE COMMON MATERIAL}
=SML
map use [
	"dtd108.sml",
	"imp108.sml",
	"dtd002.sml",
	"imp002.sml",
	"dtd001.sml",
	"imp001.sml",
	"dtd018.sml",
	"imp018.sml",
	"dtd118.sml"
	];
map use [ "dtd013.sml",
	"imp013.sml"];
=TEX

=TEX
\section{ADA 95}
=DUMP mdt118.ada
PACKAGE identifier IS

TYPE identifier IS `(` identifier `,` identifier `)` `;`

END identifier `;`
=TEX
=SML
use "imp118.ada9x.sml";
open GenericSlrpParser;
val t = parse_file "mdt118.ada";
print_tree (curry output std_out) t;
fun f (Leaf _) = 1
|   f (Node(_, children)) = (
	1 + fold (op +) (map f children) 0
);
store_mt_results
mt_run[
	("ada9x.1", f, t, 43)
];
=TEX
\section{C}
=DUMP mdt118.c
`int` identifier `(` `)`
`{`
	typedef_name identifier `=` CONSTANT `;`
	identifier `=` identifier `+` identifier`;`
	`return` identifier`;`
`}`
=TEX
=SML
use "imp118.c.sml";
open GenericSlrpParser;
val t = parse_file "mdt118.c";
print_tree (curry output std_out) t;
fun f (Leaf _) = 1
|   f (Node(_, children)) = (
	1 + fold (op +) (map f children) 0
);
store_mt_results
mt_run[
	("c.1", f, t, 108)
];
=TEX
\section{JAVA 1.1}
=DUMP mdt118.java
INTERFACE IDENTIFIER `{`
        PUBLIC VOID IDENTIFIER `(` CHAR IDENTIFIER `)` `;`
`}`
=TEX
=SML
use "imp118.java11.sml";
open GenericSlrpParser;
val t = parse_file "mdt118.java";
print_tree (curry output std_out) t;
fun f (Leaf _) = 1
|   f (Node(_, children)) = (
	1 + fold (op +) (map f children) 0
);
store_mt_results
mt_run[
	("java11.1", f, t, 38)
];
=TEX
\section{PASCAL}
=DUMP mdt118.p
PROGRAM IDENTIFIER SEMICOLON

VAR IDENTIFIER COLON IDENTIFIER SEMICOLON

PBEGIN
    IDENTIFIER ASSIGNMENT REALNUMBER SEMICOLON
    FOR IDENTIFIER ASSIGNMENT IDENTIFIER TO DIGSEQ
    DO IDENTIFIER ASSIGNMENT IDENTIFIER PLUS IDENTIFIER SEMICOLON
    IDENTIFIER LPAREN IDENTIFIER COMMA
               IDENTIFIER STAR IDENTIFIER PLUS IDENTIFIER RPAREN SEMICOLON

END

DOT
=TEX
=SML
use "imp118.pascal.sml";
open GenericSlrpParser;
val t = parse_file "mdt118.p";
print_tree (curry output std_out) t;
fun f (Leaf _) = 1
|   f (Node(_, children)) = (
	1 + fold (op +) (map f children) 0
);
store_mt_results
mt_run[
	("pascal.1", f, t, 173)
];
=TEX
\section{EPIILOGUE}
=SML
raw_diag_string (summarize_mt_results()^"\n");
=TEX
\end{document}


