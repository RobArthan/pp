######################################################################
# xpp.mkf $Revision: 1.52 $ $Date: 2003/04/03 15:42:37 $ 
#
# makefile for the X/Motif ProofPower Interface
# 
# Drastically simplified by RDA for GNU make (and Linux).
#
# (c) ICL 1994-1999
#
######################################################################

######################################################################
#
#	Makefile Definations
#
######################################################################

.SUFFIXES: .doc .dvi

# default make target, gives a list of more useful targets
default:
	@echo "The following are the generally useful targets:"
	@echo " "
	@echo "make -f xpp.mkf inst         - builds and installs the xpp files"
	@echo "make -f xpp.mkf srcrel       - makes the xpp source release"
	@echo "make -f xpp.mkf src          - makes the xpp source files"
	@echo "make -f xpp.mkf bin          - makes binaries plus what is needed to use them"
	@echo "make -f xpp.mkf doc          - makes xpp documentation"
	@echo "make -f xpp.mkf packinglist  - lists the xpp source file names"
	@echo " "
	@echo "The following environment variable influences the behaviour:"
	@echo " "
	@echo "    PPMOTIFLINKING  - linking method (dynamic or static)"

PRODNAME=PPXpp
SHORTNAME=xpp
VERSION=$(shell echo $${PPVER:-`cat version  2>/dev/null || echo XXX.YYY.ZZZ`})
RELDIR=$(shell echo $${PPTARGETDIR:-release})
PRODUCT=$(PRODNAME)-$(VERSION)
HAVERCS=$(shell (test -d RCS && echo y ) || echo n)
CWD=$(shell pwd)
OS=$(shell uname -s | dd conv=lcase 2>/dev/null)
MOTIFLINKING=$(shell echo $${PPMOTIFLINKING:-static})

ifeq ($(OS), linux)
# Linux: static linking of the X/Motif libraries (-lXm only now)
	CFLAGS = -g -DLINUX -I/usr/include -I/usr/X11R6/include $(USERCFLAGS)
	CLIBS = -L/usr/X11R6/lib \
		-Wl,-B$(MOTIFLINKING) -lXm -Wl,-Bdynamic \
		-lXp -lXmu -lXt -lSM -lICE -lXext -lX11
else
ifeq ($(OS), darwin)
# Mac OS X: static linking of the X/Motif libraries (-lXm only now)
	CFLAGS = -g -DMACOSX -I/usr/include -I/usr/X11R6/include $(USERCFLAGS)
	CLIBS = -L/usr/X11R6/lib \
		-lXm -lXext -lXp -lXt -lSM -lICE -lX11
else
# Solaris is the only other system supported just now:
	CC = gcc
	CFLAGS = -g -DSOLARIS -I/usr/include $(USERCFLAGS)
	CLIBS =  -L/usr/openwin/lib -lXm -lXmu -lXt  -lX11
endif
endif
# Distinctive tag for binary distribution file
BINTAG=$(shell eval `arch-os`; echo $$ARCH-$$OS | dd conv=lcase 2>/dev/null)
# If PPCOMPILER is set (e.g., during the open source build),
# set command to customise the application-defaults. 
ifeq ($(PPCOMPILER), POLYML)
	APPDEFFILTER="sed"
	APPDEFFILTERARGS="-e /!POLYML/s/!POLYML//"
else
ifeq ($(PPCOMPILER), SMLNJ)
	APPDEFFILTER="sed"
	APPDEFFILTERARGS="-e /!SMLNJ/s/!SMLNJ//"
else
	APPDEFFILTER="cat"
	APPDEFFILTERARGS=
endif
endif

# C source files
XPPCFILES=	cmdline.c\
		diag.c\
		files.c\
		mainw.c\
		menus.c\
		msg.c\
		options.c\
		palette.c\
		pixmaps.c\
		pterm.c\
		search.c\
		templates.c\
		undo.c\
		xmisc.c\
		xpp.c

# C header file
XPPHFILES=	pp_bitmap.h\
		xpp.h

# XPP help files
XPPHELPFILES=	makehelp.sh\
		help.txt

# bitmap files
XPPBMPFILES=	web.bmp\
		zabbdef.bmp\
		zaxbox.bmp\
		zconject.bmp\
		zconstr.bmp\
		zgenbox.bmp\
		zgivenset.bmp\
		zschbox.bmp\
		ztypedef.bmp\

# X initialisation files
XPPXFILES=	Mwm\
		Xpp.ad\
		xmodmaprc
# Resource files:
XPPRESOURCEFILES=\
		Xpp.ad \
		XppKeyboard3 \
		XppKeyboard4 \
		XppZTemplates

# X font files
XPPFONTFILES=	Holdouble36.bdf\
		Holnormal18.bdf\
		Holsans10.bdf

# Object files
XPPOFILES=	$(XPPCFILES:.c=.o) help.o

# documentation files

RELEASEDOCFILES = usr031.dvi usr031a.eps usr031b.eps usr031c.eps

# packing list for the source release (target src).
PACKINGLIST= \
			Holdouble36.bdf \
			Holnormal18.bdf \
			Holsans10.bdf \
			README.xpp.src \
			Xpp.ad \
			XppKeyboard3 \
			XppKeyboard4 \
			XppZTemplates \
			cmdline.c \
			diag.c \
			files.c \
			help.txt \
			mainw.c \
			makehelp.sh \
			menus.c \
			msg.c \
			options.c \
			palette.c \
			pixmaps.c \
			pp_bitmap.h \
			pterm.c \
			search.c \
			templates.c \
			undo.c \
			web.bmp \
			xmisc.c \
			xpp.c \
			xpp.h \
			xpp.mkf \
			zabbdef.bmp \
			zaxbox.bmp \
			zconject.bmp \
			zconstr.bmp \
			zgenbox.bmp \
			zgivenset.bmp \
			zschbox.bmp \
			ztypedef.bmp \
			usr031.doc \
			usr031a.eps \
			usr031b.eps \
			usr031c.eps \
			usr001A.doc

# packing list for user source release (they get the computed README file not the master)
DISTPACKINGLIST=$(subst README.$(SHORTNAME).src,README.$(SHORTNAME), $(PACKINGLIST))


######################################################################
#
#	Rules for making the documentation
#
######################################################################

usr031.dvi: usr031a.eps usr031b.eps usr031c.eps usr001A.tex

######################################################################
#
# Dependencies - determining the order of compilation
#
######################################################################

cmdline.o:	cmdline.c xpp.h help.h
diag.o:		diag.c xpp.h help.h
files.o:	files.c xpp.h help.h
mainw.o:	mainw.c xpp.h help.h
menus.o:	menus.c xpp.h help.h
msg.o:		msg.c xpp.h help.h
options.o:	options.c xpp.h help.h
palette.o:	palette.c xpp.h help.h
pixmaps.o:	pixmaps.c pp_bitmap.h xpp.h
search.o:	search.c xpp.h help.h
templates.o:	templates.c xpp.h  help.h
undo.o:		undo.c xpp.h help.h
xmisc.o:	xmisc.c xpp.h help.h

xpp.o: xpp.c xpp.h help.h
	$(CC) $(CFLAGS) -c xpp.c -DBUILDTITLE='"$(PRODUCT)"'

help.h help.c:help.txt makehelp.sh
	chmod u+x makehelp.sh
	makehelp.sh

######################################################################
#
#	Building Xpp
#
######################################################################

all: xpp

xpp: $(XPPOFILES)
	$(CC) $(CFLAGS) -o xpp $(XPPOFILES) $(CLIBS)

#build_log: $(XPPCFILES)
#	sccs edit build_log
#	sccs prs -d':M: :I: :D:' -l SCCS >build_log
#	sccs delget -y'update by makefile' build_log

######################################################################
#
#	Making the README file
#
######################################################################

ifeq ($(HAVERCS), y)
README.xpp: README.xpp.src
	sed -e '/$$PPVER/s/$$PPVER/'"$$PPVER/g" \
			< README.xpp.src > README.xpp
endif


######################################################################
#
#	Building a release of Xpp
#
######################################################################

reldir:
	if [ "$${PPTARGETDIR:-}" = "" ]; \
	then \
		rm -rf $(RELDIR); \
	fi
	[ -d   $(RELDIR) ] || mkdir $(RELDIR)

bindir:	reldir
	[ -d   $(RELDIR)/app-defaults ] || mkdir $(RELDIR)/app-defaults
	[ -d   $(RELDIR)/bin ] || mkdir $(RELDIR)/bin
	[ -d   $(RELDIR)/bitmaps ] || mkdir $(RELDIR)/bitmaps
	[ -d   $(RELDIR)/fonts  ] || mkdir $(RELDIR)/fonts 

docdir: reldir
	[ -d   $(RELDIR)/doc ] || mkdir $(RELDIR)/doc

srcdir:	reldir
	[ -d   $(RELDIR)/src ] || mkdir $(RELDIR)/src

binrel: bindir xpp $(XPPRESOURCEFILES) $(XPPFONTFILES) $(XPPBMPFILES) README.xpp
	cp xpp $(RELDIR)/bin
	$(APPDEFFILTER) $(APPDEFFILTERARGS) <Xpp.ad >$(RELDIR)/app-defaults/Xpp
	cp XppKeyboard3 XppKeyboard4 XppZTemplates $(RELDIR)/app-defaults
	( cd  $(RELDIR)/app-defaults; \
	  rm -f XppKeyboard XppTemplates; \
	  ln -s XppKeyboard3 XppKeyboard;  \
	  ln -s XppZTemplates XppTemplates )
	( cd $(RELDIR) && tar cvf app-defaults.tar app-defaults && \
	  gzip app-defaults.tar && mv app-defaults.tar.gz app-defaults.tgz )
	cp README.xpp $(RELDIR)
	cp $(XPPFONTFILES) $(RELDIR)/fonts; mkfontdir $(RELDIR)/fonts
	cp $(XPPBMPFILES) $(RELDIR)/bitmaps
	chmod -R a-w $(RELDIR)
	chmod -R g-w $(RELDIR)
	chmod -R u+w $(RELDIR)

docrel: docdir $(RELEASEDOCFILES) README.xpp
	cp $(RELEASEDOCFILES) $(RELDIR)/doc
	cp README.xpp $(RELDIR)
	chmod -R a-w $(RELDIR)
	chmod -R g-w $(RELDIR)
	chmod -R u+w $(RELDIR)

inst:	 binrel docrel

# useful target to print out the names of all the files in the source release
packinglist:
	@echo $(PACKINGLIST)

rcsrel:  srcdir
	[ -d   $(RELDIR)/src/RCS ] || mkdir $(RELDIR)/src/RCS
	@for f in $(PACKINGLIST); \
	do \
		cp RCS/$$f,v $(RELDIR)/src/RCS/$$f,v; \
	done
	chmod -R a-w $(RELDIR)
	chmod -R g-w $(RELDIR)
	chmod -R u+w $(RELDIR)

bin:	binrel
	cd $(RELDIR) && tar cvf $(CWD)/$(PRODUCT).bin.tar ./*
	cd $(CWD) && gzip $(PRODUCT).bin.tar && \
	mv $(PRODUCT).bin.tar.gz $(PRODUCT).$(BINTAG).bin.tgz

doc:	docrel
	cd $(RELDIR) && tar cvf $(CWD)/$(PRODUCT).doc.tar ./*
	cd $(CWD) && gzip $(PRODUCT).doc.tar && \
	mv $(PRODUCT).doc.tar.gz $(PRODUCT).doc.tgz

src:	rcsrel
	cd $(RELDIR) && tar cvf $(CWD)/$(PRODUCT).src.tar ./*
	cd $(CWD) && gzip $(PRODUCT).src.tar && \
	mv $(PRODUCT).src.tar.gz $(PRODUCT).src.tgz

srcrel: srcdir $(DISTPACKINGLIST)
	@for f in $(DISTPACKINGLIST); \
	do \
		cp $$f $(RELDIR)/src/$$f; \
	done
	echo $(VERSION) > $(RELDIR)/src/version
	chmod -R a-w $(RELDIR)
	chmod -R g-w $(RELDIR)
	chmod -R u+w $(RELDIR)

######################################################################
#
#	Tidying up
#
######################################################################
clean:
	rcsclean
	rm -f $(XPPOFILES) help.c help.h makehelp.sh

veryclean: clean
	rm -f $(XPPCFILES) $(XPPHFILES) $(XPPOFILES)
	rm -f $(XPPHELPFILES) $(XPPBMPFILES)
	rm -f $(XPPXFILES) $(XPPFONTFILES)
	rm -f build_log
	rm -f imp102.doc $(SCHEDULEMKF) recorded_xpp_schedule

######################################################################
#
#	Generic rules
#
######################################################################

%.dvi: %.doc
	docdvi $*

%.tex: %.doc
	doctex $*
