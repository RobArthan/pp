######################################################################
# makefile $Revision$ $Date$ 
#
# makefile for the X/Motif ProofPower Interface
#
# (c) ICL 1994
#
######################################################################

# suppress the automatic 'sccs get' rule
.SCCS_GET:

# default make target, gives a list of more useful targets
default:
	@echo "The following are some of the more useful make commands:"
	@echo " "
	@echo "make test                 - makes a test version of xpp (called xpptest)"
	@echo "make xpp                  - makes xpp, updating build log"
	@echo "make xpp_release          - makes xpp from the schedule"
	@echo "make xpp_setissue         - setissue file"
	@echo "make xpp_getissue         - getissue file"
	@echo "make xpp_make_schedule    - makes the Xpp schedule"
	@echo "make xpp_save_schedule    - saves the Xpp schedule"
	@echo "make xpp_unedit_schedule  - unedits the Xpp schedule"
	@echo " "

######################################################################
#
#	Makefile Definations
#
######################################################################

# C compiler options and flags
CC = gcc
CDEBUG = -ggdb
CFLAGS = $(CDEBUG) -ansi -I$$MOTIFHOME/include -I$$OPENWINHOME/include

# Directory macros
PPDIR=		/hat/projects/pp0.5
XPPDIR=		/hat/projects/ied/xpp
IEDDIR=		/hat/projects/ied
XPPSCCSDIR=	$(XPPDIR)/SCCS
IEDSCCSDIR=	$(IEDDIR)/SCCS

# directories in the release
RELEASEDIR=	release
BINDIR=		$(RELEASEDIR)/sun4bin
BITMAPDIR=	$(RELEASEDIR)/bitmaps
APPDEFAULTSDIR=	$(RELEASEDIR)/app-defaults
XFONTSDIR=	$(RELEASEDIR)/xfonts

# Makefiles
XPPMKF=		xpp.mkf
SCHEDULEMKF=	extension_schedules.mkf

# XPP and IED sccs commands
XPPSCCS=	sccs -d $(XPPDIR)
IEDSCCS=	sccs -d $(IEDDIR)

# C source files
XPPCFILES=	cmdline.c\
		diag.c\
		files.c\
		mainw.c\
		menus.c\
		msg.c\
		options.c\
		palette.c\
		pixmaps.c\
		pterm.c\
		search.c\
		templates.c\
		undo.c\
		xmisc.c\
		xpp.c

# C header file
XPPHFILES=	pp_bitmap.h\
		xpp.h

# XPP help files
XPPHELPFILES=	makehelp.sh\
		help.txt

# bitmap files
XPPBMPFILES=	web.bmp\
		zabbdef.bmp\
		zaxbox.bmp\
		zconject.bmp\
		zconstr.bmp\
		zgenbox.bmp\
		zgivenset.bmp\
		zschbox.bmp\
		ztypedef.bmp\

# X initialisation files
XPPXFILES=	Xpp\
		Xmodmaprc

# X font files
XPPXFONTFILES=	Holdouble36.bdf\
		Holnormal18.bdf\
		Holpalette26.bdf

# Object files
XPPOFILES=	$(XPPCFILES:.c=.o) help.o

# Filename of the Xpp schedule
XPPSCHEDULE=	recorded_xpp_schedule

# Contents of the Xpp schedule
XPPSCHEDULECONTENTS=	$(XPPCFILES)\
			$(XPPHFILES)\
			$(XPPHELPFILES)\
			$(XPPBMPFILES)\
			$(XPPXFILES)\
			$(XPPXFONTFILES)

######################################################################
#
# Dependencies - determining the order of compilation
#
######################################################################

cmdline.o:	cmdline.c xpp.h help.h
diag.o:		diag.c xpp.h help.h
files.o:	files.c xpp.h help.h
mainw.o:	mainw.c xpp.h help.h
menus.o:	menus.c xpp.h help.h
msg.o:		msg.c xpp.h help.h
options.o:	options.c xpp.h help.h
palette.o:	palette.c xpp.h help.h
pixmaps.o:	pixmaps.c pp_bitmap.h xpp.h
search.o:	search.c xpp.h help.h
templates.o:	templates.c xpp.h  help.h
undo.o:		undo.c xpp.h help.h
xmisc.o:	xmisc.c xpp.h help.h

xpp.o: xpp.c xpp.h
	$(CC) $(CFLAGS) -c xpp.c -DBUILDTITLE='"$(BUILDTITLE)"'

xpp.o_test_version: xpp.c xpp.h help.h
	$(CC) $(CFLAGS) -c xpp.c

help.h help.c:help.txt makehelp.sh
	chmod u+x makehelp.sh
	makehelp.sh

######################################################################
#
#	Building a development version of Xpp
#
######################################################################

all: xpp

development_default: xpp

test:	$(XPPOFILES) xpp.o_test_version
	$(CC) -o xpptest $(XPPOFILES) -lXm -lXt -lX11 -lgen

xpp: build_log
	@buildtitle='xpp (log : '`sccs prs -d':I:' build_log`')';\
	make -f $(XPPMKF) xpp_build BUILDTITLE="$$buildtitle"

xpp_build: $(XPPOFILES)
	$(CC) -o xpp $(XPPOFILES) -lXm -lXt -lX11 -lgen

build_log: $(XPPCFILES)
	sccs edit build_log
	sccs prs -d':M: :I: :D:' -l SCCS >build_log
	sccs delget -y'update by makefile' build_log

######################################################################
#
#	Building a release of Xpp
#
######################################################################

$(SCHEDULEMKF): $(IEDDIR)/SCCS/s.imp102.doc
	$(IEDSCCS) get imp102.doc
	sieve sml < imp102.doc

xpp_setissue: $(SCHEDULEMKF)
	@usage="xpp_setissue FILE=$(FILE) :";\
	if test XX$(FILE) = XX;\
	then\
	  echo "$$usage Set the macro FILE to the filename required";\
	  exit 1;\
	fi;\
	make -f $(SCHEDULEMKF) setissue SCCS='$(XPPSCCS)' SCCSDIR=$(XPPSCCSDIR) FILE=$(FILE)

xpp_getissue: $(SCHEDULEMKF)
	@usage="xpp_getissue FILE=$(FILE) :";\
	if test XX$(FILE) = XX;\
	then\
	  echo "$$usage Set the macro FILE to the filename required";\
	  exit 1;\
	fi;\
	make -f $(SCHEDULEMKF) getissue SCCS='$(XPPSCCS)' SCCSDIR=$(XPPSCCSDIR) FILE=$(FILE)

xpp_make_schedule: $(SCHEDULEMKF)
	@usage="xpp_make_schedule RELEASE=$(RELEASE) :";\
	if test XX$(RELEASE) = XX;\
	then\
	  echo "$$usage set the macro RELEASE to the release number of Xpp.";\
	  exit 1;\
	fi;\
	make -f $(SCHEDULEMKF) make_schedule SCHEDULE=$(XPPSCHEDULE) SCCS='$(XPPSCCS)' SCCSDIR=$(XPPSCCSDIR) CONTENTS='$(XPPSCHEDULECONTENTS)';\
	echo "xpp_version - - $(RELEASE) - -" >> $(XPPSCHEDULE)

xpp_unedit_schedule: $(SCHEDULEMKF)
	@make -f $(SCHEDULEMKF) unedit_schedule SCHEDULE=$(XPPSCHEDULE) SCCS='$(XPPSCCS)'

xpp_save_schedule: $(SCHEDULEMKF)
	@make -f $(SCHEDULEMKF) save_schedule SCHEDULE=$(XPPSCHEDULE) SCCS='$(XPPSCCS)' COMMENT='saved by $(USER) using $(XPPMKF)'

xpp_release: $(SCHEDULEMKF)
	@ISRELEASE=TRUE;\
	usage="xpp_release VERSION=$(VERSION) :";\
	if test XX$(VERSION) = XX;\
	then\
	  echo "$$usage set the macro VERSION to the version of the schedule to be used.";\
	  exit 1;\
	fi;\
# delete, and then make some directories for the release;\
	rm -rf $(RELEASEDIR);\
	mkdir $(RELEASEDIR);\
	mkdir $(BINDIR);\
	mkdir $(BITMAPDIR);\
	mkdir $(APPDEFAULTSDIR);\
	mkdir $(XFONTSDIR);\
# extract all the files needed from SCCS using the versions given in the schedule;\
	make -f $(SCHEDULEMKF) get_all_entries SCCS='$(XPPSCCS)'\
		SCCSDIR=$(XPPSCCSDIR) SCHEDULE=$(XPPSCHEDULE) VERSION=$(VERSION);\
# make xpp;\
	buildtitle='xpp   release '`make -f $(SCHEDULEMKF) get_version\
		SCHEDULE=$(XPPSCHEDULE) SCCS='$(XPPSCCS)' VERSION=$(VERSION)\
		FILE='xpp_version'`;\
	make -f $(XPPMKF) xpp_build BUILDTITLE="$$buildtitle" ISRELEASE=TRUE;\
# move files into the release directory;\
	mv xpp $(BINDIR);\
	mv $(XPPBMPFILES) $(BITMAPDIR);\
	mv Xpp $(APPDEFAULTSDIR);\
	mv Xmodmaprc $(RELEASEDIR)/.Xmodmaprc;\
	mv *.bdf $(XFONTSDIR);\
# initialise the x fonts directory
	mkfontdir $(XFONTSDIR)

######################################################################
#
#	Tidying Up
#
######################################################################

clean:
	rm -f $(XPPOFILES) help.c help.h makehelp.sh

veryclean: clean
	rm -f $(XPPCFILES) $(XPPHFILES) $(XPPOFILES)
	rm -f $(XPPHELPFILES) $(XPPBMPFILES)
	rm -f $(XPPXFILES) $(XPPXFONTFILES)
	rm -f build_log
	rm -f imp102.doc $(SCHEDULEMKF) recorded_xpp_schedule

######################################################################
#
#	Generic Rules
#
######################################################################

%.c %.h %.txt %.sh:
	@if test XX$(ISRELEASE) = XX;\
	then $(XPPSCCS) get $@;\
	else\
          echo "Error : using generic rule for $@ during a release build";\
          exit 1;\
        fi
