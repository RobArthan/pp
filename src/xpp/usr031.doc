=IGN
********************************************************************************
usr031.doc: this file is part of the PPXpp system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
%
% This document includes some screen snapshots; these
% are obtained as follows (on Linux):
% 1) Set up xpp session to be snapped
% 2) Use:
%	xwd -out usr031a.wd
%    or:
%	xwd -out usr031b.wd
%    or:
%	xwd -out usr031c.wd
%    to get the snapshots in X Window Dump format
%
% 3) Then convert to encapsulated PostScript via portable anymap format:
%	xwdtopnm usr031a.wd | pnmtops -noturn -scale 0.75 >usr031a.eps
%	xwdtopnm usr031b.wd | pnmtops -noturn -scale 0.75 >usr031b.eps
%	xwdtopnm usr031c.wd | pnmtops -noturn -scale 0.75 >usr031c.eps
%
%%%%% YOU MAY WANT TO CHANGE POINT SIZE IN THE FOLLOWING:
\documentclass[a4paper,12pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{epsf}
\def\Xpp{{\tt xpp}}
\def\XPP{{\tt Xpp}}
\def\FigRef#1{\ref{#1} on page \pageref{#1}}
%%%%% YOU WILL USUALLY WANT TO CHANGE THE FOLLOWING TO SUIT YOU AND YOUR DOCUMENT:

\def\Title{ ProofPower --- {\XPP} User Guide }

\def\Abstract{\begin{center}
{\bf Abstract}\par\parbox{0.7\hsize}
{\small This document is the user guide for {\Xpp} --- the X Windows interface
for the {\Product} specification and proof tools.}
\end{center}}

\def\Reference{LEMMA1/XPP/USR031}

\def\Author{R.D. Arthan}

\def\EMail{{\tt rda@lemma-one.com}}

\def\Phone{+44 118 958 4409}

\def\Fax{+44 118 956 1920}

%%%%% YOU MAY WANT TO CHANGE THE FOLLOWING TO GET A NICE FRONT PAGE:
\def\FrontPageTitle{ {\huge ProofPower\\---\\{\XPP} User Guide } }
\def\FrontPageHeader{\raisebox{16ex}{\begin{tabular}[t]{c}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year\\\strut\\
\end{tabular}}}
\begin{centering}



\end{centering}

%%%%% THE FOLLOWING DEFAULTS WILL GENERALLY BE RIGHT:

\def\Version{$Revision: 1.13 $%
}
\def\Date{\FormatDate{$Date: 2003/04/03 16:02:08 $%
}}

%%%%% NOW BEGIN THE DOCUMENT AND MAKE THE FRONT PAGE

\begin{document}
\headsep=0mm
\FrontPage
\headsep=10mm

%%%%% STANDARD RED-TAPE SECTIONS (MAY WANT TO INTERLEAVE SOME \newpage COMMANDS IN THESE)

%%%%% CONTENTS:

\subsection{Contents}

\tableofcontents
\newpage
\subsection{List of Figures}
\listoffigures
%%%%% REFERENCES:

\subsection{References}

\bibliographystyle{fmu}

%%%%% CHANGE THE FOLLOWING AS NECESSARY (E.G., TO PICK UP daz.bib):
{\raggedright
\bibliography{fmu}
}
%%%%% CHANGES HISTORY:
\subsection{Changes History}
\begin{description}
\item[Issue 1.1] Author's draft.
\item[Issue 1.2] First complete version.
\item[Issue 1.4] Copyright and banner updates for open source release.
\item[Issue 1.5] PPXpp-specific updates for open source release
\item[Issues 1.6, 1.7] Read-only option.
\item[Issues 1.8, 1.9] MS-DOS and Macintosh files.
\item[Issues 1.10--1.12] Regular expression and case-insensitive searching.
\item[Issue 1.13] Added section about the keyboard layouts that are now supplied.
\end{description}


%%%%%  CHANGES FORECAST:

\subsection{Changes Forecast}

None at this release.

%%%%% DISTRIBUTION LIST

%\subsection{Distribution}
%\begin{center}
%\begin{tabular}{ll}
%Rob Arthan & Lemma 1\\
%Gill Prout & Home \\
%Roger Jones & Home
%\end{tabular}
%\end{center}


\newpage

%%%%% NOW THE CREATIVE BIT:

\section{INTRODUCTION}

This document is the User Guide for {\Xpp}.
{\XPP} provides a convenient way to prepare, check and execute {\Product} scripts.
It combines a general purpose text editor with a command interface for operating the
{\Product} tools such as the {\ProductHOL} and {\ProductZ} systems.

{\XPP} includes a help system that explains each of its
user interface features. This document supplements the
information in the help system.



\section{OVERVIEW OF \Xpp}\label{OVERVIEW}
{\XPP} supports interactive development of {\Product} documents.
As you develop a document, you can process it with the appropriate {\Product}
tool to type-check your specifications, develop proofs, browse the theory hierarchy,
or indeed carry out any other function supported by the {\ProductML} interface to
the tool in question.

By using an extended character set supported by custom X Windows fonts,
{\Xpp} displays the most common mathematical symbols supported by the {\Product}
on the screen much as they appear on the printed page. See {\it {\Product} 
Document Preparation} \cite{DS/FMU/IED/USR001} for information on the
facilities for using {\LaTeX} to typeset your document.

{\XPP} sessions come in two guises: edit-only sessions and command interface sessions.
An edit-only session with {\Xpp} is shown in figure~\FigRef{fig1}; Examples of command interface
session are shown in figure~\FigRef{fig2} and figure~\FigRef{fig3}.

In an edit-only session, you are just editing a {\Product} document.
There are several features to help you work with the document as a document.
For example,
the more common mathematical symbols can easily be entered in your script using a Palette Tool,
or via the keyboard using special shift characters.
For some languages, such as, {\ProductZ}, the Template Tool gives you a quick way
of entering common constructs, such as schema boxes. 

In a command interface session you are both editing a {\Product} document and running
an interactive session typically with one of the {\ProductML}-based tools, such
as {\ProductHOL} or {\ProductZ}.
The main window of a command interface session contains two main text areas
(see figure~\FigRef{fig2}): the {\em script window}, where
you edit your {\Product} document and the {\em journal window}
which displays a record of your transactions with the other tool ({\ProductHOL} in the
example in figure~\FigRef{fig2}).


\begin{figure}
\begin{center}
\leavevmode
\epsffile{usr031a.eps}
\end{center}
\caption{An Example {\Xpp} Edit-Only Session}\label{fig1}
\end{figure}

\begin{figure}
\begin{center}
\leavevmode
\epsffile{usr031b.eps}
\end{center}
\caption{An Example {\Xpp} Command Interface Session (i)}\label{fig2}
\end{figure}

\section{USING \Xpp}\label{USING}
\subsection{Starting {\Xpp}}
{\XPP} is started from a Unix or Linux shell (command line) using the command
{\Xpp}. The command line syntax for {\Xpp} is:

\begin{verbatim}
    xpp [X options] [-readonly] [filename]
    xpp [X options] [-readonly] -file filename
    xpp [X options] [-readonly] [-file filename] -command command [args ...]
\end{verbatim}

The  X options allow you to control many aspects
of the behaviour and appearance of {\Xpp}, e.g., if you are logged in to a remote system,
you can tell {\Xpp} to use your local keyboard and screen (your ``display'', to use the X
Windows Systems term).
Please consult the main {\tt man} page for the X Windows System for detailed information
about these options (which are called the ``X Toolkit Intrinsics options'' in that {\tt man} page).
On most systems, one of the commands {\tt man X} or {\tt man X11} should display
this {\tt man} page.

{\XPP} follows the convention of allowing you to abbreviate option keywords such as {\tt -file}.
Any abbreviation that does not overlap with one of the X Toolkit
Intrinsics options keywords. For the {\tt -readonly}, {\tt -file} and {\tt -command} keywords,
the first letter will do: {\tt -r}. {\tt -f} and {\tt -c}.

The first two forms for the command line syntax (with no {\tt -command}) start an
edit-only session. If you provide a file name, then {\Xpp} will attempt to open
the file you have named.

If it cannot open the file, {\Xpp} will put up a dialogue
box before displaying its main window. Clicking OK in this dialogue box
will bring up the main window with no file open. If the problem was
that you just mistyped the file name on the command line, then you can simply
open the file using the File menu. Otherwise, you can quit {\tt \Xpp} either using
the File menu, or the Control+q keyboard accelerator.

If you specify {\tt -readonly}  on the command line, {\tt \Xpp} will start
up with its read-only option turned on.
See section~\ref{ReadOnlyOption} for more details.

\subsection{Working with the {\Xpp} Interface}
 
Figure~\FigRef{fig2} shows {\Xpp} being used to work with a {\ProductHOL} specification.
The user is incrementally type-checking the Z specification.
An HOL constant {\it concl} has just been entered and type-checked and then the
user has used the Command Line tool, to enter a fragment of {\ProductML}
to find out more information about the types that have been inferred.
The user has then selected the next paragraph of the specification, which
is therefore highlighted in the script window. The next step will be to use
Execute from the Command menu to enter the paragraph into {\ProductHOL} to
be type-checked.

Figure~\FigRef{fig3} shows {\Xpp} being used to develop a proof interactively
with the subgoal package. The user has used the Command Line tool
to load in a specification from a file, has then set up the goal by executing
the line beginning {\it set\_goal} and has just executed the first 
tactic (the line that is selecte in the journal window).

Consult the {\Xpp} help system for further information about working with the {\Xpp} interface.
The Tutorial or Help items in the Help menu are the best place to start.

Many {\Xpp} functions are provided by tools windows, such as the Command Line tool that
can be seen in figure~\FigRef{fig2}.
In most of these windows, there is a Help button that you can press to get help with
using that window.
 
\begin{figure}
\begin{center}
\leavevmode
\epsffile{usr031c.eps}
\end{center}
\caption{Example {\Xpp} Command Interface Session (ii)}\label{fig3}
\end{figure}
\newpage
\section{CUSTOMISING \Xpp}\label{CUSTOMISING}
\subsection{Resource Settings}

{\XPP} is customisable via its resource file (application defaults file).
This resource file is a text file called {\XPP} which you can edit with
any text editor (e.g., {\Xpp} itself!) to change the appearance and
behaviour of {\Xpp}.
The location of the resource files depends on your local X Windows System configuration.
Typically, it will be in a subdirectory {\tt app-defaults} of your \verb"$HOME"
directory. Please consult either the README file for {\tt Xpp} or your local systems
administrator for more information.

An example resource file for {\Xpp} is provided in the subdirectory
{\tt app-defaults} of the {\Product} installation directory. The example {\XPP}  file uses \verb"#include"
directives to include two files {\tt XppKeyboard} and {\tt XppTemplates}
which define the keyboard layoiut and the behaviour of the Templates Tool.
{\tt XppKeyboard} and {\tt XppTemplates} are set up as symbolic links to
other resource files in the same directory.


A typical entry in the resource file has the form:
\begin{verbatim}
Xpp<sep>[<widget name>].<resource name>:	<value>
\end{verbatim}

Here the optional \verb"<widget name>" may identify the part of {\Xpp} whose behaviour
is being controlled, \verb"<sep>" is either an asterisk or a dot,
\verb"<resource name>" identifies the attribute you want to change and
\verb"<value>" is the value you want to give to the attribute.
Some times \verb"<value>" has to be a long text string, and in that case
it can be split over several lines using a back-slash character at
the end of each line but the last.


Most of the resource settings in the example resource file affect generic
attributes of the Motif widgets that make up {\Xpp}.
A full description of the widget hierarchy for {\Xpp} is not
available in the current {\Product} user documentation. Users are
recommended to configure {\Xpp} only by adjusting the \verb"<value>" settings
in the example resource file supplied.

Some resource settings are specific to {\Xpp}. These are discussed in more
detail in section~\ref{XppResources} below. The treatment of {\tt fontList}
resources is special for {\Xpp} (again see section~\ref{XppResources}).

\subsection{{\XPP}-Specific Resources}\label{XppResources}

\subsubsection{Options Settings}\label{OptionsSettings}
The following resource settings correspond to options that you can also change
while {\Xpp} is running using the Options Tool that you can bring up with the
Tools menu.

\begin{description}
\item[{\tt Xpp*take-backups.set}]
Allowed values: ``True'' or ``False''.
See section~\ref{Backups} below.
\item[{\tt Xpp*delete-backups.set}]
Allowed values: ``True'' or ``False''.
See section~\ref{Backups} below.
\item[{\tt Xpp*ignore-case.set}]
Allowed values: ``True'' or ``False''.
When this option is ``True'', the Search and Replace Tool will ignore
the case of letters when matching the search pattern with the text (i.e.,
`a' and `A' will be considered to be equal, etc.).
\item[{\tt Xpp*journal-max.value}]
Allowed values: a decimal number.
In a command interface session, this limits the number of bytes of data that
is remembered in the journal window\footnote{
If you scroll to the top of the journal window, you will see a message
like ``{\tt **** Text lost when buffer exceeded 20000 bytes ****}'' if the
limit has been exceeded.}.
Values less than 2000 are mapped to 2000.
\item[{\tt Xpp*read-only.set}]
Allowed values: ``True'' or ``False''.
When this option is ``True'', you will be warned if you try to make changes to
the text in the script window or try to save the file.
This option may be set from the {\tt \Xpp} command line using the {\tt -readonly}
option keyword.
See section~\ref{ReadOnlyOption} for more details.
\item[{\tt Xpp*use-regular-expressions.set}]
Allowed values: ``True'' or ``False''.
When this option is ``True'', the Search and Replace Tool will interpret
the search pattern as a regular expression.
See section~\ref{RegularExpressions} for more details.
\item[{\tt Xpp.addNewLineMode}]
Allowed values: 0, 1, or 2.
In a command interface session,
if the text selection does not end in a new-line character when you try
to execute it, {\Xpp} may take special action depending on the value of
this resource. 0 causes {\Xpp} automatically to add a new-line;
1 causes {\Xpp} to put up a dialogue box asking you what to do;
2 causes {\Xpp} to execute the selection unchanged without any intervention
on your part.
Values outside the range 0, 1, 2 are mapped to the nearest value in that range.

\end{description}

\subsubsection{Other Settings}
The following settings are processed when {\Xpp} first starts running
and are not changeable via the Options Tool later.

\begin{description}
\item[{\tt Xpp.commandLineList}]
Allowed values: a list of text strings separated by ``\verb"\n"''.
The Command Line Tool maintains a list of useful commands that you
can add to as you go along. This resource specifies the initial contents
of the list.
\item[{\tt Xpp*script.fontList}]
Allowed values: an X Windows font name (typically one of the fonts supplied with {\Product}).
This is a standard Motif resource that is treated specially by {\Xpp}.
The value of this resource is copied from the script window widget
to all the text widgets that may be used for entering or displaying mathematical
symbols. So, for example, setting the {\tt fontList} resource for the command
window widget will have no effect.
\item[{\tt Xpp.textTranslations}]
Allowed values: a string representing what is known a translation table in the X Toolkit
Intrinsics library (see the example files for the format).
A translation table associates ``actions'' with key strokes.
This resource is used to define the translation table for all
the various text areas used for text that may include mathematical symbols.
Attempting to change the translation table resource for a text area by
naming it in the resource file will not work.

This resource is used in {\XPP} to give keyboard short-cuts for entering text (typically
mathematical symbols) and for executing commands.
For the latter purpose, {\XPP} adds an additional action ``{\tt execute}''
to the repertoire of standard Motif actions in the script window widget.
With no parameters this action causes the text selected in the script window
to be executed (just like Execute Selection in the Command menu).
With parameters, the action executes the text given as parameters.

The example resource file uses a \verb"#include" directive to include the value of
this resource via a symbolic link, named {\tt XppKeyboard}, pointing
to one of the files {\tt XppKeyboard3} or {\tt XppKeyboard4}.
If you use several different keyboards, you can customise these files and adjust
the link to suit the keyboard you are using. See section~\ref{KeyboardLayout}
below for more information.

\item[{\tt Xpp.templates}]
Allowed values: a list of triples each comprising a bitmap file name, an insertion text
string and a description text string;
the values within each triple and the triples are separated by slash characters.
This resource defines the behaviour of the Templates Tool.
Each triple defines one button in the Templates Tool. The bitmap gives the
icon used as the label for the button, the insertion text is the text that
is entered into the script window when the button is pressed, and the description
string is the descriptive text associated with that icon in the Templates Tool
help dialogue.

The Templates Tool is limited to a maximum of 100 template buttons. If you specify more,
entries after the first 100 will be ignored.
The library function {\tt XmGetPixmap} used to load the bitmap files has
a rather complex search algorithm.
If the environment variable {\tt XBMLANGPATH} is set, then it gives
a search path listing directories to be searched.
If this environment variable is not set, a somewhat long list of directories
including subdirectories of the directory identified by the environment
variable {\tt XAPPLRESDIR}, if set, is used. 
If neither of these environment variables is set, then the directories \verb"$HOME" and
\verb"$HOME/bitmaps" will be searched as well as some other directories in the
X Windows installation.

The example resource file uses a \verb"#include" directive to include the value of
this resource via a symbolic link, named {\tt XppTemplates}, pointing to one of the
files {\tt XppZTemplates} or {\tt XppDazTemplates} (if you have installed the Compliance
Tool). 

\item[{\tt Xpp.*mainpanes.orientation}]
Allowed values: ``VERTICAL'' or ``HORIZONTAL''.
This resource determines whether the script window and journal window are positioned
one above the other or side by side. If you do not specify this resource explicitly, the
value is taken as ``VERTICAL'', i.e., the windows are positioned one above the other.

\end{description}

\newpage
\subsection{Keyboard Layout}\label{KeyboardLayout}
The X Windows system defines a number of logical modifier keys: keys that affect
the interpretation of other keys. 
By setting up suitable modifier keys and, if necessary, adjusting the
resource setting {\tt Xpp.textTranslations}, you can arrange to enter all the mathematical
symbols in the {\Product} extended character set using the keyboard.
The mapping of physical keys on your keyboard
to modifier keys can be displayed and changed using the {\tt xmodmap} program.

As keyboard layouts vary widely and some subsystems, such as window
managers, impose constraints on the use of some keys, you may need to experiment
a little to get a workable layout. With most keyboards, it should be possible to
arrange for three or four extended character shift key combinations (so that each
key can generate five or six different symbols).
The supplied resource files include two examples: {\tt XppKeyboard3},
for use with three extended character shifts, and {\tt XppKeyboard4},
for use with four extended character shifts.

If you run it with no command line options, {\tt xmodmap} will display the current settings
for the eight logical modifier keys supported by X Windows. These eight modifiers keys 
are called ``Shift'', ``Lock'', ``Control'', and ``Mod1'' \ldots ``Mod5''.
For example, here is the output under XFree86 and KDE for a typical 105-key PC keyboard
with Microsoft specials such as the ``Flying Window'' keys:

\begin{center}
\small
\begin{minipage}{5.15in}
\begin{verbatim}
xmodmap:  up to 2 keys per modifier, (keycodes in parentheses):

shift       Shift_L (0x32),  Shift_R (0x3e)
lock        Caps_Lock (0x42)
control     Control_L (0x25),  Control_R (0x6d)
mod1        Alt_L (0x40)
mod2        Num_Lock (0x4d)
mod3        Mode_switch (0x71)
mod4        F13 (0x73)
mod5        Scroll_Lock (0x4e)
\end{verbatim}
\end{minipage}

\end{center}

This shows, for example, that the ``Mod2'' logical modifier key is mapped to the key labelled ``Num Lock''
on the physical keyboard. If you can't identify a physical key from its name in the table, start
the {\tt xev} program and experiment by pressing keys on your keyboard.  It will print out
information about each key press and key release. On our typical PC keyboard
pressing the key labelled ``Alt Gr'' might cause {\tt xev} to print out 
``{\tt keycode 113 (keysym 0xff7e, Mode\_switch)}'', from
which, after converting 0x71 into decimal,
you can infer that ``Mode\_switch (0x71)'' above refers to that key.

The above modifier key set-up will work as it stands with the example keyboard layout {\tt XppKeyboard3}
shown in figure~\ref{fig4}\footnote{%
This is a simplified diagram of a Sun Mark 4 keyboard. The `%
=INLINEFT
\
=TEX
' key has been put in the bottom row rather than up on its own with the function keys.
Each key cap in the diagram is labelled with the characters which that key
can produce.
The bottom part of the diagram shows which combination of modifier
keys produce which character.
}.
This layout uses the key labelled ``Alt'' together with the logical modifier keys ``Mod2'' and ``Shift''
to give three extended character shifts.
The three extended character shift combinations will be ``Alt'', ``Num Lock'' and ``Shift+Num Lock''.
However, this may not be very convenient to use, since the ``Num Lock''
key acts like a toggle switch and is not very close to the alphanumeric keys on most keyboards.
An alternative would be to use ``Right Control'' instead of ``Num Lock''. To do this put the
following text in a file, say {\tt xmodmaprc} and run the  command {\tt xmodmap xmodmaprc}:


\begin{center}
\small
\begin{minipage}{5in}
\begin{verbatim}
clear mod2
remove control = Control_R
add mod2 = Control_R
\end{verbatim}
\end{minipage}

\end{center}

The three extended character shift combinations will now be ``Alt'', ``Right Control'' and ``Shift+Right Control''.
``Left Control'' will still be available for menu accelerators (e.g., ``Left Control+Q'' will activate
the File/Quit menu item) and for other purposes that may be defined in {\tt xpp.textTranslations}.
This keyboard layout is set up so that ``Alt'' and ``Shift+Alt'' are equivalent are far as data
entry in {\tt XPP} is concerned so that ``Shift+Alt'' can be used when ``Alt'' would cause
some other action. E.g.,  ``Alt+f'' will pop up the File Menu, whereas ``Shift+Alt'+f''
will enter a $\phi$ character.

The example keyboard layout {\tt XppKeyboard4} shown in figure~\ref{fig5}\footnote{%
This is a more portable layout that uses only alphanumeric keys.
Each key cap in the diagram is labelled with the characters which that key
can produce. The ``Shift+key'' combination is not shown, since it will be specific
to the keyboard for the numeric keys.
The bottom right part of the diagram shows which combination of modifier
keys produce which character. Since the four shift combinations give some
spare capacity, soime keys have been mapped to multiple character sequences
as shown in the table at the bottom left of the diagram.
}
uses the logical modifier keys ``Mod3'', ``Mod4'' and ``Shift'' to give four extended character shift combinations.
Unfortunately, the assignment of keys to modifier keys shown by {\tt xmodmap} above may
not work very well. E.g., on one example keyboard, the physical keys corresponding to ``Mod3''
and ``Mod4'' turn out to be the ``Alt Gr'' key and the ``Left Flying Window'' key 
and these turn out to be treated specially by the keyboard hardware
and/or the window manager. E.g., KDE likes to reserve the ``Left Flying Window''
for popping up one of its menus.
To solve this problem, you can use {\tt xev} to identify two other keys to use
for ``Mod3'' and ``Mod4''. For example, if {\tt xev} shows that the ``Right Flying Window''
key is mapped to ``Multi\_key'', then the following {\tt xmodmap} commands would set up ``Right Control''
and ``Right Flying Window'' to act as ``Mod3'' and ``Mod4''.

\begin{center}
\small
\begin{minipage}{5in}
\begin{verbatim}
remove control = Control_R
clear mod3
clear mod4
add mod3 = Control_R
add mod4 = Multi_key
\end{verbatim}
\end{minipage}

\end{center}

\clearpage

\input{usr001A.tex}
\begin{figure}[p]
\begin{center}
%\par\vspace{0.5in}
\KEYBOARD
\par\vspace{0.25in}
\KEYBOARDKEY
\end{center}
\caption{Example Keyboard Layout: {\tt XppKeyboard3}}\label{fig4}
\end{figure}

\begin{figure}[p]
\begin{center}
%\par\vspace{0.5in}
%\par {\tt XppKeyboard3} \par\vspace{0.25in}
\KEYBOARDIV
\par\vspace{0.25in}
\KEYBOARDKEYIV
%\par {\tt XppKeyboard4} \par
\end{center}
\caption{Example Keyboard Layout: {\tt XppKeyboard4}}\label{fig5}
\end{figure}

\clearpage
% The following is not felt to be very useful any more, and would need extending
% to cover the mapping in XppKeyboard4.
% \newpage
% \section{Key Mapping by Function} \label{KeyMappingbyFunction}
% The following tables show the symbols in the extended character set grouped by function.
% The tables also show the key combinations used to type each symbol when
% using the supplied applications defaults file for the {\tt xpp} program together
% with a keyboard similar to the one shown in the diagram in section \ref{KeyboardLayout} above.
% In these tables, for example,  `A+4' means press the Alt key and the `4' key together, and `M+S+M' means press % % Mod2, Shift and the `M' key together.

% \KEYBOARDTABLES

\newpage
\section{SYSTEM INTERFACES}

Section~\ref{Backups}, \ref{Signals} and~\ref{ModalDialogues} below
explain some of the interactions between {\Xpp},
the operating system and the X Windows System.

\subsection{Backups}\label{Backups}
When you select the Save function in the file menu,
{\Xpp} may take a backup copy before it overwrites your file.
Note that this only applies to the Save function, the Save As
and Save Selection As functions will always prompt you before
overwriting an existing file, but will not take a backup for
you if you decide to overwrite the file.

{\raggedright What {\Xpp} does depends on the value of the resources named
{\tt Xpp*take-backups.set} and {\tt Xpp*delete-backups.set}.
Both these resources are set to ``True'' in the example resource file supplied with {\Xpp}
and these are the recommended settings for normal use.
See section~\ref{OptionsSettings} for how to change these settings, if you need to.

}

If {\tt Xpp*take-backups.set} is``True'', the Save
function will take backups.
{\Xpp} derives the name of the backup file
by appending ``{\tt .xpp.backup}'' to the name of your file.

If {\tt Xpp*delete-backups.set} is ``True'', the Save function
will delete the backup file if your file has been successfully
overwritten. The backup file will not be deleted if {\Xpp}
was unable to overwrite your file (e.g., if the file system is full).

Some Unix and Linux file system types, e.g., MS-DOS file systems,
do not support the file names that {\Xpp} uses for its backup files.
{\Xpp} will detect this situation and prompt you for confirmation
if the backup cannot be taken for this reason.

\subsection{Signals}\label{Signals}
This section assumes you know a little about Unix and Linux signals.
E.g., see the {\tt man} page for {\tt kill(1)}.
The response of {\tt Xpp} to various types of signal is shown in the following
table.

\begin{center}
\begin{tabular}{|l|p{4in}|}\hline
Signal & Response \\\hline
SIGINT &
{\XPP} behaves as if you had selected the Quit function from the file
menu: {\Xpp} will exit (with a 0 return code),
asking you for confirmation, if the file you are editing has not been saved.
\\\hline
\begin{tabular}[t]{@{}l@{}}
SIGBUS\\SIGFPE\\SIGSEGV\\SIGSYS
\end{tabular} &
{\XPP} will try to make an emergency backup of your file .
The emergency backup file will have a name of the form ``{\tt xpp.panic.\it XXXXXX}'' where
``{\tt \it XXXXXX}'' is some combination of letters and numbers.
{\XPP} will then send an error message, including the name of the emergency backup file 
to the standard error channel and exit (with a non-zero result code).\\\hline
Others &
{\XPP} takes the operating systems default action for the signal in question.\\\hline
\end{tabular}
\end{center}

\subsection{Application-Modal Dialogues}\label{ModalDialogues}

Often {\Xpp} puts up a dialogue, e.g., to ask you to select
a file, and you must respond to the dialogue before {\Xpp} can do anything else.
These are called {\em application-modal dialogues} in the X Windows System terminology.

Most window managers ensure that application-modal dialogues are never obscured by
any other window in the application itself. However, some window managers can be
configured in such a way that an application-modal dialogue can get hidden behind another
{\Xpp} window. When this happens {\Xpp} will appear to freeze. You can solve this by sliding
the visible {\Xpp} windows to the edge of the screen until you find the hidden dialogue
window.

\subsection{Read-only Option and File Access Permissions}\label{ReadOnlyOption}

{\Xpp} has a read-only option which is intended to help you work with files for which
you do not have write access. You can also use this option to protect against accidental
changes to files that you do not wish to change.
This option can be set when you start {\Xpp} using the {\tt -readonly} option keyword
or interactively using the Options Tool.
The option can also be set in the resource file (see section~\ref{CUSTOMISING}) and
doing so is equivalent to setting it on the command line.
The option is set automatically by {\Xpp} when you open a file for which you do not have write access.

When the read-only option is turned on you will be warned if you try
to make a change to the text in the script window or if you try to save the file
using Save in the File menu. You will not be warned if you save the file under a new
name using Save As in the File menu.

If you do not specify {\tt -readonly} when you start {\Xpp},
you will be warned whenever you open a file for which you do
not have write access.
The read-only option will be set automatically to match
your write access for the file you are currently editing. When you save a file
using Save As in the File menu, the read only option is automatically turned off if
the save operation succeeds.

If you are planning to work with several files for which you do not
have write access and do not wish to be warned every time you open one of them,
specifying {\tt -readonly} when you start {\Xpp} will suppress the warnings.
If you do this, turning the read only option off using the Options Tool will enable the warnings.

Some editors have a facility for overriding the access permissions
of a file (e.g., the {\tt w!} command in {\tt vi}). This kind of facility is not provided by
{\Xpp}, which never attempts to change the access permissions of a file. If you need to change
permissions, then use the {\tt chmod(1)} command from the Unix or Linux shell.

\subsection{Working with Microsoft and Apple Macintosh Files}\label{FileTypes}

{\Xpp} lets you work with text files created using the Microsoft  and the Apple Macintosh operating systems
as well as with text files created on Unix.
The three text file formats are distinguished by the characters used to terminate lines of text (line-feed on Unix, carriage-return on Macintosh, and carriage-return/line-feed pairs on Microsoft operating systems).

When a file is opened, {\Xpp} checks the line terminators to determine the type of the file, which is recorded as
one of ``Unix'', ``MS-DOS'' or ``Macintosh'' in the File Type menu in the Options Tool.
If the file being opened uses a mixture of different line terminating formats, {\Xpp} will report the problem
and record the file type as ``Unix''.
When a file is saved, {\Xpp} uses the setting of the File Type menu  in the Options Tool
to select which line terminators to use. You may change this setting to convert between the different formats.


\subsection{Working with Binary Files}\label{BinaryFiles}

{\Xpp} is not designed as an editor for files containg binary data: i.e., control characters other than
tab, line-feed and carriage return. It can be used to inspect such files, but any uneditable characters
are converted into question mark characters and will be saved as question mark characters if you save
the file. This is intended, for example, to let you recover text from a file that has been partially corrupted.
If you open a file containing binary data, you will be warned that the uneditable characters have been
changed and the read-only option will be set to remind you that saving the file may cause problems.

\subsection{Regular Expressions}\label{RegularExpressions}

When the option {\tt Xpp*use-regular-expressions.set} is ``True'',
{\Xpp} treats the search pattern in the Search and Replace Tool as
a regular expression. {\Xpp} uses the POSIX-compliant regular
expression library supplied with your system. Some of the more useful
regular expressions forms are shown in the following table:


\begin{center}

\begin{tabular}{|c|p{5in}|}\hline
$c$ &
	matches the character $c$,
	provided $c$ is a character, such as a letter, digit, space, tab or
	new-line that does not have a special meaning.
\\\hline
\verb"\"$c$ &
	matches the character $c$, whether or not $c$ is a character
	such as {\tt *} which would otherwise have a special meaning.
\\\hline
{\tt .} & matches any character other than new-line.
\\\hline
{\tt [}{\it list}{\tt ]} &
	matches any character in {\it list}. {\it list} may include character
	ranges such as {\tt a-z} and character classes such as \verb"[:alpha:]",
	and \verb"[:digit:]".
\\\hline
\verb"[^"{\it list}{\tt ]} &
	matches any character other than new-line that is not in {\it list}.
\\\hline
\verb"^" &
	matches the empty string at the beginning of a line.
\\\hline
\verb"$" &
	matches the empty string at the end of a line.
\\\hline
$e${\tt *} &
	matches zero or more occurrences of the regular expression {\it e}.
\\\hline
$e${\tt +} &
	matches one or more occurrences of the regular expression $e$.
\\\hline
$e${\tt \{}{\it m}{\tt ,}{\it n}{\tt \}} &
	matches any sequence of at least {\it m} and at most {\it n} occurrences
	of the regular expression $e$.
\\\hline
$e_1$\verb"|"$e_2$ &
	matches anything that matches either or both of the regular
	expressions $e_1$ and $e_2$. The \verb"|" operator has lower
	precedence than the postfix operators {\tt *}, etc.
\\\hline
{\tt (}$e${\tt )} &
	matches anything that matches the regular expression $e$.
	Brackets enable you to control the operator precedence.
	E.g., \verb"a|b*" matches either a single `a' or any string
	of `b's, whereas \verb"(a|b)*" matches any string
	of `a's and `b's.
\\\hline
\end{tabular}

\end{center}

In {\Xpp}, matches with empty strings are only allowed for sub-expressions
of the search pattern.
The Search and Replace Tool considers a search operation that matches an empty string
to be unsuccessful.

In replace operations in {\Xpp}, `\verb"&"' and `\verb"\"' have special meanings
in the replacement text when regular expression searching is turned on.
`\verb"\"$c$' is always replaced by the character $c$. Unless escaped by
a `\verb"\"' character, a `\verb"&"' stands for a copy of the text being replaced.


Consult your local UNIX or Linux manual pages (typically under
{\tt regex(5)} or {\tt regex(7)}) for more information on the
regular expression syntax supported on your system. {\Xpp} uses
the POSIX extended regular expression syntax.

\end{document}

