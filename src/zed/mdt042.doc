=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
\TPPtitle{Module Tests for Z Set Theory}
\TPPref{DS/FMU/IED/MDT042}  %% Mandatory field
\def\SCCSversion{$Revision$
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}  %% Mandatory field
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{K.~Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{R.D.~Arthan & WIN01 \\ K.~Blackburn & WIN01}
\TPPauthorisation{R.D.Arthan & FST Team Leader}
\TPPabstract{This document gives the module tests for the 
rules and tactics for the Z set theory.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Project Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item [Issue 1.1]
First version.
\item [Issue 1.2 (14th September 1992)]
Added theory check.
\end{description}
\subsection{Changes Forecast}
None known.
\section{GENERAL}
\subsection{Scope}
This document contains the module tests for the material
whose detailed design is given in in \cite{DS/FMU/IED/DTD042}.
\subsection{Introduction}
This document contains the module tests for the material
whose detailed design is given in in \cite{DS/FMU/IED/DTD042}.
This consists of demonstrating at least the simpler uses of the 
functions in question.
\subsubsection{Dependencies}
The tests depend upon \cite{DS/FMU/IED/IMP042} and \cite{DS/FMU/IED/IMP013}.
In addition, testing by the subgoal package (section \ref{subgoalpackage})
depends on \cite{DS/FMU/IED/IMP030}.
\subsubsection{Deficiencies}
The testing could be more rigorous.
\section{TEST CASES}
The functions are tested in their order of presentation in the detailed design.
\section{PREAMBLE}
=SML
open_theory "z_set_theory";
delete_theory "temp" handle _ => ();
new_theory "temp";
use_file "dtd013";
use_file "imp013";
init_mt_results();
(* set_flag("subgoal_package_quiet",true); *)
repeat drop_main_goal;
set_flag("check_is_z",true);
=TEX
We use the proof context
``z$\_$predicates'' and ``$'$z$\_$sets$\_$alg$''.
=SML
push_merge_pcs ["z_predicates","'z_ç_set_lang","'z_ç_set_lib", "'z_ç_rel", "'z_ç_fun", "'z_tuples"];
=TEX
\subsection{Utilities}
=SML
fun €list_eq› (eq:'a * 'a -> bool) ((a :: x), (b :: y)) : bool = (
	eq(a,b) andalso list_eq eq (x, y)
) | list_eq eq ([], []) = true
| list_eq _ _ = false;
=TEX
If two terms types are equal, break them apart until they differ.
=SML
fun €differ_where› itm1 itm2 = (
let	fun aux tm1 tm2 (App(f1,x1)) (App(f2,x2)) = (
		Value(force_value(aux f1 f2 (dest_simple_term f1) (dest_simple_term f2)))
		handle _ =>
		aux x1 x2 (dest_simple_term x1) (dest_simple_term x2))
	| aux tm1 tm2 (Const(nm1,ty1)) (Const(nm2,ty2)) = (
		if nm1 = nm2 andalso ty1 =: ty2
		then Nil
		else Value(tm1,tm2))
	| aux tm1 tm2 (Var(nm1,ty1)) (Var(nm2,ty2)) = (
		if nm1 = nm2 andalso ty1 =: ty2
		then Nil
		else Value(tm1,tm2))
	| aux tm1 tm2 (SimpleÃ(x1,b1)) (SimpleÃ(x2,b2)) = (
		if x1 =$ x2 
		then aux b1 b2 (dest_simple_term b1) (dest_simple_term b2)
		else Value(tm1,tm2))
	| aux tm1 tm2 _ _ = Value(tm1,tm2);
in
	aux itm1 itm2 (dest_simple_term itm1) (dest_simple_term itm2)
end);
=TEX
\subsection{Testing Using Subgoal Package}
\label{subgoalpackage}
The following functions apply a tactic to a selected goal
and returns the resulting top goal. 
This of course doesn't fully test tactics that return multiple
goals.
The functions differ in that $tac\_res1$ inputs and outputs
both assumptions and conclusion, while $tac\_res$
just assumes an empty assumption list.
=SML
fun €tac_res› tac goal = (push_goal([],goal);
		a tac;
		let val (seqasms,gl) = top_goal()
		in
			(drop_main_goal();
			gl)
		end);
fun €tac_res› tac goal = (push_goal([],goal);
		a tac;
		let val (seqasms,gl) = top_goal()
		in
			(drop_main_goal();
			gl)
		end);
fun €tac_res1› tac (seqasms, goal) = (
		push_goal(seqasms,goal);
		a tac;
		let val (rasms,gl) = top_goal()
		in
			(drop_main_goal();
			(rasms,gl))
		end);
=TEX
Now a function that returns the multiple goals for the case when a tactic causes multiple goals:
=SML
fun €tac_ress› tac n (seqasms, goal) = (
		push_goal(seqasms,goal);
		a tac;
		let val gll = map (top_labelled_goal o string_of_int)
			(interval 1 n)
		in
			(drop_main_goal();
			gll)
		end);
=TEX
This function tests that a tactic proves a goal:
=SML
fun €tac_solve› tac (seqasms, goal) = (
	dest_thm (tac_proof ((seqasms,goal),tac))
	=#
	(seqasms, goal)
);
=TEX
This function tests that a tactic fails on a goal:
=SML
fun €tac_fail› tac (seqasms, goal) = (
	push_goal(seqasms,goal);
	a tac
	handle complaint =>
	(drop_main_goal();
	reraise complaint (area_of complaint))
);
=TEX
\subsection{Some Useful Values}
ˇTEST_SCHEMA¸
x:U;
y:U
à
=SML
val aset = Ò{a,b:X; c:Y | a Ω b ∑ (a,b,c)}Æ;
val (asetd, asetp, asetv) = dest_z_seta aset;
val atuple3 = Ò(¨p:'aÆ,¨q:'aÆ,¨r:'bÆ)Æ;
val notz = ¨∂ x ∑ x = yÆ;
val trues = string_of_term mk_t;
val notzs = string_of_term notz;
=TEX
\section{TESTS}
\subsection{Set Abstraction}
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_seta_conv",
	snd o dest_eq o concl o z_ç_seta_conv,
	mk_z_ç(atuple3, aset),
	mk_z_∂(asetd,asetp,mk_z_eq(asetv, atuple3)))];
store_mt_results mt_run_fail [("z_ç_seta_conv 42001 a",
	z_ç_seta_conv,
	mk_t,
	gen_fail_msg "z_ç_seta_conv" 42001 [trues]),
	("z_ç_seta_conv 42001 b",
	z_ç_seta_conv,
	notz,
	gen_fail_msg "z_ç_seta_conv" 42001 [notzs])];
=TEX
\subsection{Set Display}
Difficult to provoke error 42008.
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_setd_conv1",
	snd o dest_eq o concl o z_ç_setd_conv1,
	mk_z_ç(Ò2Æ, Ò{1,2,3}Æ),
	ÒtrueÆ)];
store_mt_results mt_run_fail [("z_ç_setd_conv1 42009 a",
	z_ç_setd_conv1,
	mk_t,
	gen_fail_msg "z_ç_setd_conv1" 42009 [trues]),
	("z_ç_setd_conv1 42009 b",
	z_ç_setd_conv1,
	notz,
	gen_fail_msg "z_ç_setd_conv1" 42009 [notzs]),
	("z_ç_setd_conv1 42009 c",
	z_ç_setd_conv1,
	Òx ç {1,2}Æ,
	gen_fail_msg "z_ç_setd_conv1" 42009
	   [string_of_term Òx ç {1,2}Æ])
	];
=TEX
\section{TUPLES}
=SML
store_mt_results (mt_runf (op =$)) [("z_tuple_eq_conv a",
	snd o dest_eq o concl o z_tuple_eq_conv,
	Ò(a,b) = (1,2)Æ,
	Òa = 1 ± b = 2Æ),
	("z_tuple_eq_conv b",
	snd o dest_eq o concl o z_tuple_eq_conv,
	Ò(a Ì b) = (1,2)Æ,
	Òa = 1 ± b = 2Æ),
	("z_tuple_eq_conv c",
	snd o dest_eq o concl o z_tuple_eq_conv,
	Ò(a Ì b) = (1 Ì 2)Æ,
	Òa = 1 ± b = 2Æ)];
store_mt_results mt_run_fail [("z_tuple_eq_conv 42003",
	z_tuple_eq_conv,
	mk_t,
	gen_fail_msg "z_tuple_eq_conv" 42003 [trues])
	];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_tuple_selection_conv a",
	snd o dest_eq o concl o z_tuple_selection_conv,
	Ò(1,2,3).2Æ,
	Ò2Æ),
	("z_tuple_selection_conv b",
	snd o dest_eq o concl o z_tuple_selection_conv,
	Ò(1 Ì 2).2Æ,
	Ò2Æ)];
store_mt_results mt_run_fail [("z_tuple_selection_conv 47185",
	z_tuple_selection_conv,
	mk_t,
	gen_fail_msg "z_tuple_selection_conv" 47185 [trues]),
	("z_tuple_selection_conv 42006",
	z_tuple_selection_conv,
	mk_z_selât (mk_var("t",type_of Ò(1,2,3)Æ),2),
	gen_fail_msg "z_tuple_selection_conv" 42006 [
		string_of_term(mk_z_selât (mk_var("t",type_of Ò(1,2,3)Æ),2))])
	];
=TEX
=SML
let
	val atuple = mk_var("t",type_of Ò(1,2,3)Æ);
in
store_mt_results (mt_runf (op =$)) [
	("z_tuple_intro_conv a",
	snd o dest_eq o concl o z_tuple_intro_conv,
	Ò(ëatupleÆ.1,ëatupleÆ.2,ëatupleÆ.3)Æ,
	atuple),
	("z_tuple_intro_conv b",
	snd o dest_eq o concl o z_tuple_intro_conv,
	Ò((2,3).1 Ì (2,3).2)Æ,
	Ò(2,3)Æ)]
end;
store_mt_results mt_run_fail [("z_tuple_intro_conv 42005 a",
	z_tuple_intro_conv,
	mk_t,
	gen_fail_msg "z_tuple_intro_conv" 42005 [trues]),
	("z_tuple_intro_conv 42005 b",
	z_tuple_intro_conv,
	Ò(1,2,3)Æ,
	gen_fail_msg "z_tuple_intro_conv" 42005 [
		string_of_term Ò(1,2,3)Æ])
,
	("z_tuple_intro_conv 42005 c",
	z_tuple_intro_conv,
	Ò((1,2,3).1,(1,2,3).2)Æ,
	gen_fail_msg "z_tuple_intro_conv" 42005 [
		string_of_term Ò((1,2,3).1,(1,2,3).2)Æ])
	];
=TEX
=SML
let
	val atuple = mk_var("t",type_of Ò(1,2,3)Æ);
in
store_mt_results (mt_runf (op =$)) [("z_tuple_selection_intro_conv",
	snd o dest_eq o concl o z_tuple_selection_intro_conv,
	atuple,
	Ò(ëatupleÆ.1,ëatupleÆ.2,ëatupleÆ.3)Æ)]
end;
store_mt_results mt_run_fail [("z_tuple_selection_intro_conv 42004",
	z_tuple_selection_intro_conv,
	mk_t,
	gen_fail_msg "z_tuple_selection_intro_conv" 42004 [trues])
	];
=TEX

\section{CARTESIAN PRODUCTS}
=SML
store_mt_results (mt_runf (op =$)) [("z_∏_conv",
	snd o dest_eq o concl o z_∏_conv,
	ÒS1 ∏ S2 ∏  S2 ∏ {tâ2}Æ,
	Ò{tâ1:S1; tâ3:S2; tâ4:  S2; tâ5 : {tâ2}∑(tâ1,  tâ3, tâ4, tâ5)}Æ)];
store_mt_results mt_run_fail [("z_∏_conv 47160",
	z_∏_conv,
	mk_t,
	gen_fail_msg "z_∏_conv" 47160 [trues])
	];
=TEX
=SML
let
	val atuple = mk_var("y",type_of Ò(x,y,{y})Æ);
in
store_mt_results (mt_runf (op =$)) [("z_ç_∏_conv",
	snd o dest_eq o concl o z_ç_∏_conv,
	Òy ç S1 ∏ S2 ∏  S2Æ,
	ÒëatupleÆ.1 ç S1 ± ëatupleÆ.2 ç S2 ± ëatupleÆ.3 ç  S2Æ)]
end;
store_mt_results mt_run_fail [("z_ç_∏_conv 42007",
	z_ç_∏_conv,
	mk_t,
	gen_fail_msg "z_ç_∏_conv" 42007 [trues])
	];
=TEX
\section{MISCELLANEOUS}
=SML
diag_string("*** Ignore the Z language warnings ***");
store_mt_results (mt_runf (op =$)) [
	("z_defn_simp_rule a",
	concl o z_defn_simp_rule,
	(asm_rule ¨Z'AbbDef Òp ç (X ∏ Y) ± (µ q : X ∏ Y ∑ q ç p § first q = q.1)ÆÆ),
	Òµ q : U ∑
	q ç p § q ç X ∏ Y ± first q = q.1Æ),
	("z_defn_simp_rule b",
	concl o z_defn_simp_rule,
	(conv_rule 
	(RAND_C(LEFT_C (DECL_INTRO_C pred_dec_conv)))
	(asm_rule ¨Z'AbbDef Òp ç (X ∏ Y) ± (µ q : X ∏ Y ∑ q ç p § first q = q.1)ÆÆ)),
	Òµ q : U∑ q ç p § q ç X ∏ Y ± first q = q.1Æ)];
diag_string("*** Stop ignoring Z language warnings ***");
store_mt_results mt_run_fail [("z_defn_simp_rule 42011",
	z_defn_simp_rule,
	t_thm,
	gen_fail_msg "z_defn_simp_rule" 42011 [string_of_thm t_thm])
	];
=TEX
\section{PROOF CONTEXTS}
The following is not an exhaustive test of stripping under
the Z set theory proof contexts, but is a good test
of presence and basic intent.
=SML
let 
val example_tm = ÒA Ω ö ¥ (• A) \ S = • {T1 : A ∑ T1 \ S}Æ;
fun aux tm = (
push_merge_pcs["z_predicates","'z_ç_set_lang","'z_ç_set_lib","'z_sets_ext"];
push_goal([],tm);
a(REPEAT strip_tac);
(* *** Goal "1" *** *)
a(z_spec_nth_asm_tac 1 ¨z'Æ);
a(z_spec_nth_asm_tac 6 ¨T1Æ);
(* *** Goal "2" *** *)
a(z_spec_nth_asm_tac 2 ÒS' \ SÆ);
a(z_spec_nth_asm_tac 1 ¨S'Æ);
(* *** Goal "3" *** *)
a(z_spec_nth_asm_tac 1 Òz \ SÆ);
a(z_spec_nth_asm_tac 1 ¨zÆ);
pop_pc();
pop_thm());
in
store_mt_results (mt_runf (op =$)) [("Z set theory stripping",
	concl o aux,
	example_tm,
	example_tm)]
end;
=TEX
A check for $¬$ reduction:
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_set_lang pc ¬",
	concl o rewrite_conv [],
	Ò(Ã x : U ∑ f x) (1 + 2)Æ,
	Ò(Ã x : U ∑ f x) (1 + 2) = f (1 + 2)Æ)];
=TEX
\section{CHECK THE THEORY DESIGN}
=SML
use_file "dtd042.tch";
store_mt_results mt_run [("theory design of Z set theory",
	theory_check_success,
	(),
	true)];
=TEX
\section{END OF TESTS}
=SML
(* set_flag("subgoal_package_quiet",false); *)
diag_string(summarize_mt_results ());
=TEX
\end{document}
=IGN
***********COPY**************
store_mt_results (mt_runf (op =$)) [("",
	tac_res ,
	ÒÆ,
	ÒÆ)];
store_mt_results (mt_runf (op =$)) [("",
	snd o dest_eq o concl o  ,
	ÒÆ,
	ÒÆ)];
store_mt_results mt_run_fail [("",
	,
	,
	gen_fail_msg ""  [])];
store_mt_results (mt_runf (op =#)) [("",
	tac_res1 ,
	([ÒÆ],ÒÆ),
	([ÒÆ],ÒÆ))];
store_mt_results (mt_runf (list_eq(op =#))) [("",
	tac_ress  2,
	([ÒÆ],ÒÆ),
	[([ÒÆ],ÒÆ),([ÒÆ],ÒÆ)])];
store_mt_results mt_runf [
	("",
	tac_solve ,
	([],ÒÆ),
	true),
];
store_mt_results mt_run_fail [("",
	tac_fail ,
	([],ÒÆ),
	gen_fail_msg ""  [])];

store_mt_results mt_run [("",
	,
	,
	)];
store_mt_results mt_run_fail [("",
	,
	,
	gen_fail_msg ""  [])];

