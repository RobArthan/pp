% imp015.doc   %Z% $Date$ $Revision$ $RCSfile$
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Implementation of the Z Lexical Analyser}  %% Mandatory field
\TPPref{DS/FMU/IED/IMP060}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{This document contains the implementation of
the lexical analyser for HOL/Z.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issue \SCCSversion, \FormatDate{92/02/06} ]
First draft.

\end{description}
\subsection{Changes Forecast}
None.
\section{GENERAL}
\subsection{Scope}
This document contains the implementation
of the lexical analyser for HOL/Z meeting the detailed design
given in \cite{DS/FMU/IED/DTD060}.
\subsection{Introduction}
\subsection{Purpose and Background}
See \cite{DS/FMU/IED/DTD060}.
\subsection{Dependencies}
This implementation depends on the definition of the
type $TERM$ defined in \cite{DS/FMU/IED/DTD003}.
\subsection{Interface}
The structure $ZLex$ is constrained by the signature
$ZLex$ defined in \cite{DS/FMU/IED/DTD060}.
\subsection{Algorithms}
The algorithms used in this implementation are based
upon the a finite automaton lexical analyser. Unrecognised
inputs are handled by using the exception $Unrecognised$ to
control the program flow.
\subsection{Possible Enhancements}
None.
\subsection{Deficiencies}
None known.

\section{PREAMBLE}
=SML
structure ZLex : ZLex = struct
	open Lex;
=TEX
\section{DATA TYPES}
\subsection{Interface with Parser}
\subsubsection{Identifiers and Literals}
=SML
datatype €Z_TOKEN›	=
		€ZTAqTm› of TERM
	|	€ZTId› of string
	|	€ZTDecor› of string
	|	€ZTChar› of string
	|	€ZTString› of string
	|	€ZTNumber› of int
=TEX
subsubsection{Fixity Information}
The following constructors identify the fixity of
identifiers which are stored in the symbol table.
=SML

	|	€ZTBeginOp› of string
	|	€ZTEndOp› of string
	|	€ZTInOp› of string
	|	€ZTPostBeginOp› of string
	|	€ZTPostOp› of string
	|	€ZTPreEndOp› of string
	|	€ZTPreOp› of string
=TEX
\subsubsection{Paragraph Separators}
The following constructors correspond to paragraph
forming tokens:
=SML
	|	€ZTAx›
	|	€ZTSch›
	|	€ZTEnd›
	|	€ZTIs›
	|	€ZTSt›
	|	€ZTBar›
	|	€ZTAmpersand›
=TEX
\subsubsection{Lambda and Mu}
=SML
	|	€ZTÃ›
	|	€ZTÕ›
=TEX
\subsubsection{Logic Symbols}
=SML
	|	€ZTµ›
	|	€ZT∂›
	|	€ZT∂â1›
	|	€ZT≥›
	|	€ZT±› 
	|	€ZT≤› 
	|	€ZT§› 
	|	€ZT¥›
=TEX
\subsubsection{Schemas Operations}
=SML
	|	€ZTPre›
	|	€ZTÑ›
	|	€ZTò›
	|	€ZTPipe› 
	|	€ZT˘› 
	|	€ZTª› 
=TEX
\subsubsection{Punctuation and Reserved Identifiers}
=SML
	|	€ZTLet›
	|	€ZTFun›
	|	€ZTGen›
	|	€ZTRel›
	|	€ZTOpen›
	|	€ZTLbrace›
	|	€ZTRbrace›
	|	€ZTLbrack›
	|	€ZTRbrack›
	|	€ZTLsqbrack›
	|	€ZTRsqbrack›
	|	€ZTß›
	|	€ZT¢›
	|	€ZTComma›
	|	€ZTDots›
	|	€ZTDot›
	|	€ZTSlash›
	|	€ZTBSlash›
	|	€ZTFreeTyDef›
	|	€ZTColon›
	|	€ZTSemi›
	|	€ZTVert›
	|	€ZTConjecture›
	|	€ZT¶›
	|	€ZT∑›
	|	€ZT∏›
	|	€ZT ›
	|	€ZTEos›;
=TEX

\section{THE LEXICAL ANALYSER}
\subsection{Local Type Definitions}
The main lexical analysis algorithm is exception-driven
using the following local exception:
=SML
exception €Unrecognised›;
=TEX
A state, $LEX\_STATE$, is used by most of the lexical analysis
functions. The state is in two parts: first, the characters not yet tokenised,
actually a list of strings of single characters produced by exploding
the input text; second, the token immediately preceeding the first
part.  The token may not be recognised (yet) so the token part of the
state carries a success indicator.  On entry to an analysis function
the state will be ``$(chars, (Unknown, \hbox{``''}))$''.
=SML
datatype €SUCCESS› = €Known› of string | €Unknown›;


type €LEX_STATE›  = (string list) * SUCCESS;
=TEX
\subsection{Utilities}
$collect$ adds the first character of the untokenised input text into the current token.
=SML
fun €collect› ( cstk : LEX_STATE ) : LEX_STATE = (
	case cstk of
		(c :: cs, Known s) => (cs, Known(s ^ c))
	|	(c :: cs, Unknown) => (cs, Known c)
	|	_ => error "Z Lexical Analyser" 60003 [fn()=>"collect"]
);
=TEX
We need various character classifying functions.
=SML
fun mk_lex_dict dict (symbols : string list) : bool E_DICT = (
let	fun aux dict (sym::rest) = 
		aux (e_enter sym true dict) rest
	  | aux dict [] = dict;
in
	aux dict symbols
end);
=TEX
=TEX
=SML
val €ord0›	= ord "0";
val €ord9›	= ord "9";
val €orda›	= ord "a";
val €ordA›	= ord "A";
val €ordz›	= ord "z";
val €ordZ›	= ord "Z";
=TEX
=SML
fun €is_digit›  (d : string) = (
	let	val ordd = ord d
	in	(ordd >= ord0) andalso (ordd <= ord9)
	end
);
=TEX
=SML
fun €is_alpha›  (c : string) = (
	let	val ordc = ord c
	in		((ordc >= orda) andalso (ordc <= ordz))
		orelse	((ordc >= ordA) andalso (ordc <= ordZ))
	end
);
=TEX
=SML
fun €is_alnum›  (c : string) = (
	is_alpha c orelse is_digit c
);
=TEX
=SML
val €decor› : string list =
=TEX
=SMLLITERAL
	["'", "!", "?"];
=TEX
=SML
fun €is_decor› c = contains decor c;
=TEX
=SML
val €undersc› : string list =
=TEX
=SMLLITERAL
	["_"];
=TEX
=SML
fun €is_undersc› c = contains undersc c;
=TEX
=SML
val €invalid_symbol› : string list =
=TEX
=SMLLITERAL
	["â", "Ë", "õ"];
=TEX
=SML
fun €is_invalid_symbol› c = contains invalid_symbol c;
=TEX
=SML
val €superscriptor› : string list =
=TEX
=SMLLITERAL
	["Á", "Í"];
=TEX
=SML
fun €is_superscriptor› c = contains superscriptor c;
=TEX
=SML
=SML
fun €is_subscriptor› c = (c = "â");
=TEX
=SML
val €punctuation› : string list =
	[",", ";", ":", "(", ")", "[", "]", "{", "}",
	"ß", "¢", "/", "\\", "_", "±", "≤", "≥", "¥",
	"§", "=", "ç", "µ", "∂", "∑", "", "∏", "¶",
	"&", "ª", "˘", "Ê", "|"];
=TEX
The following punctuation symbols comprise more than
one character and need special treatment.
=SML
val €ext_punctuation› : string list =
	["::=", "?Ù"];
=TEX
=SML
val €punctuation_dict› = mk_lex_dict initial_e_dict punctuation;
fun €is_punctuation› c = (e_lookup c punctuation_dict = Value true);
fun €is_ext_punctuation› c = contains ext_punctuation c;
=TEX
=SML
val €greek› : string list =
	["¡", "¬", "«", "ƒ", "≈", "⁄", "»", " ", "…", "À",
	"Ã", "Õ", "Œ", "ÿ", "–","“", "”", "‘", "’", "∆",
	"—", "Ÿ", "◊", "á", "Ñ", "ä", "å", "ò", "ê",
	"ì", "ï", "Ü", "ô", "ó"];
=TEX
=SML
val €greek_dict› = mk_lex_dict initial_e_dict greek;
fun €is_greek› c = (e_lookup c greek_dict = Value true);
=TEX
=SML
fun €is_space› c = c <= " ";
=TEX
=SML
 fun €skip_space› (st as (cs as (c :: more), tk) : LEX_STATE) : LEX_STATE = (
	if is_space c
	then skip_space (more, tk)
	else st
) | skip_space (st as ([], _)) = st;
=TEX
=SML
val €symbol› : string list =
	["Á", "Í", "¿", "°", "ﬁ", "•", "Ä", "†", "ö",
	"é", "®", "©", "·", "Å", "Ú", "í", "Ù", "∫",
	"´", "ﬂ", "≠", "˛", "‡", "œ", "Ô", "è", "™",
	"Ó", "˙", "º", "æ", "<", ">", "Î", "ã", "Ω",
	"+", "-", "*", "#", ".", "~", "Ç", "˚", "˝"
];
=TEX
=SML
val €symbol_dict› = mk_lex_dict initial_e_dict symbol;
=IGN
fun €is_symbol› c = (e_lookup c symbol_dict = Value true);
=SML
fun €is_symbol› c =
	not (is_space c) andalso
	not (is_alnum c) andalso
	not (is_punctuation c) andalso
	not (is_decor c) andalso
	not (is_invalid_symbol c) andalso
	not (is_greek c);
=TEX
=SML
fun €is_macro› (c : string) = c = "%%";
=TEX
$next$ is used to apply a classifier function such as $is\_digit$
to the first character in the input part of a state. It returns false
if the input part is empty.
=SML
fun €next› (test : string -> bool) ((c :: _, _) : LEX_STATE) = test c
|   next _ ([], _) = false;
=TEX
When a lexeme 
has been recognised, the following function is used to classify the result.
=SML
fun €classify› (what : string) : Z_TOKEN = (
	case what of
		"Ã" => ZTÃ
	|	"Õ" => ZTÕ

	|	"µ" => ZTµ
	|	"∂" => ZT∂
	|	"∂â1" => ZT∂â1

	|	"≥" => ZT≥
	|	"pre" => ZTPre
	|	"Ñ" => ZTÑ
	|	"ò" => ZTò

	|	">>" => ZTPipe
	|	"˘" => ZT˘
	|	"ª" => ZTª
	|	"±" => ZT±
	|	"≤" => ZT≤
	|	"§" => ZT§
	|	"¥" => ZT¥

	|	"let" => ZTLet

	|	"fun" => ZTFun
	|	"gen" => ZTGen
	|	"rel" => ZTRel
	|	"&" => ZTAmpersand
	|	"open" => ZTOpen
	|	"{" => ZTLbrace
	|	"}" => ZTRbrace
	|	"(" => ZTLbrack
	|	")" => ZTRbrack
	|	"[" => ZTLsqbrack
	|	"]" => ZTRsqbrack
	|	"ß" => ZTß
	|	"¢" => ZT¢
	|	"," => ZTComma
	|	"..." => ZTDots
	|	"." => ZTDot
	|	"/" => ZTSlash
	|	"\\" => ZTBSlash
	|	"::=" => ZTFreeTyDef
	|	":" => ZTColon
	|	";" => ZTSemi
	|	"|" => ZTVert
	|	"?Ù" => ZTConjecture
	|	"¶" => ZT¶
	|	"∑" => ZT∑
	|	"∏" => ZT∏
	|	" " => ZT 

	|	other => ZTId other (* should go to symbol table *)
);
=TEX
\subsection{Recognition of Punctuation}
$rec\_punctuation$ returns an appropriately updated state if the input
begins with a punctuation, if not it raises $Unrecognised$. 
=SML
local
	val ext_pl = map explode ext_punctuation;
in
fun €rec_ext_punctuation›  (st as (cl, k) : LEX_STATE) : LEX_STATE = (
let	fun aux res _ [] = (res, true)
	  | aux res (c1::rest1) (c2::rest2) = (
		if c1 = c2 then aux (res@[c1]) rest1 rest2
		else (res, false)
	) | aux res [] _ = (res, false);

	fun aux1 cl (cs::rest) = (
	let	val (res, flag) = aux [] cl cs;
	in
		if flag then res
		else aux1 cl rest
	end)
	  | aux1 cl [] = [];

	fun subtr [] cl = cl
	  | subtr (c1::rest1) (c2::rest2) =
		subtr rest1 rest2
	  | subtr cl [] = [];

	val r = case aux1 cl ext_pl of
		[] => raise Unrecognised
		|other => other;
	val r' = implode r;
	val cl' = subtr r cl;

in
	case k of
	Unknown => (cl', Known r')
	|Known s => (cl', Known (s^r'))
end);
end (* of local ... in ... *);
=TEX
=SML
fun €rec_punctuation›  (st : LEX_STATE) : LEX_STATE = (
	rec_ext_punctuation st
	handle Unrecognised => (
		if next is_punctuation st
		then collect st
		else raise Unrecognised)
);
=TEX
\subsection{Recognition of an Alphabetic Character}
=SML
fun €rec_alpha› (st : LEX_STATE) : LEX_STATE = (
	if next is_alpha st
	then collect st
	else raise Unrecognised
);
=TEX
\subsection{Recognition of an Alphanumeric Character}
=SML
fun €rec_alnum› (st : LEX_STATE) : LEX_STATE = (
	if next is_alpha st orelse next is_digit st
	then collect st
	else raise Unrecognised
);
=TEX
\subsection{Recognition of a Greek Letter}
=SML
fun €rec_greek› (st : LEX_STATE) : LEX_STATE = (
	if next is_greek st
	then collect st
	else raise Unrecognised
);
=TEX
\subsection{Recognition of a Superscripting Character}
=SML
fun €rec_subscriptor› (st : LEX_STATE) : LEX_STATE = (
	if next is_subscriptor st
	then collect st
	else raise Unrecognised
);
=TEX
\subsection{Recognition of Underscore}
=SML
fun €rec_undersc› (st : LEX_STATE) : LEX_STATE = (
	if next is_undersc st
	then collect st
	else raise Unrecognised
);
=TEX
\subsection{Recognition of Alphanumeric Sequences}
$rec\_alnum$ returns an appropriately updated state if the input
is alphanumeric; if not it raises $Unrecognised$. 
=SML
fun €rec_alnumseq› (st : LEX_STATE) : LEX_STATE = (
	let	fun aux st = (
			if next is_alnum st
			then aux (collect st)
			else st
		);
	in	if next is_alnum st
		then aux (collect st)
		else raise Unrecognised
	end
);
=TEX
\subsection{Recognition of Symbolic Sequences}
Recognition of symbolic sequences is more complicated than that for
terminators or identifiers since we have to pick off keyword symbols
as well as single characters --- $rec\_keyword$ does this.
=SML
fun €rec_keyword› (st : LEX_STATE) : LEX_STATE = (
	let	fun aux (([], _) : LEX_STATE) = (
			error "Z Lexical Analyser" 60004 []
		) | aux st = (
			if next is_macro st
			then (collect st)
			else aux (collect st)
		);
	in	if next is_macro st
		then aux (collect st)
		else raise Unrecognised
	end
);
=TEX
$rec\_symbol$ uses $rec\_keyword$ to recognise a symbolic sequence:
=SML
fun  €rec_symbol› (st : LEX_STATE) : LEX_STATE = (
	if next is_symbol st
	then	let	val st' = (collect st)
		in	(rec_symbol st') handle Unrecognised => st'
		end
	else	if next is_macro st
		then	let	val st' = rec_keyword st
			in	(rec_symbol st') handle Unrecognised => st'
			end
		else	raise Unrecognised
);
=TEX
\subsection{Recognition of Identifiers}
To recognise identifiers we first need auxiliaries to recognise the
atomic pieces of identifiers (viz. alphanumeric sequences and
symbolic sequences)

The following function recognises an underscore followed
by an alphanumeric character.
=SML
fun €rec_undersc_alnum› (st : LEX_STATE) : LEX_STATE = (
let	val (st1, flag1) = (rec_undersc st, true)
		handle Unrecognised => (st, false);
	val (st2, flag2) = (rec_alnum st1, true)
		handle Unrecognised => (st1, false);
in
	if flag1 andalso flag2 then st2
	else raise Unrecognised
end);
=TEX
The following recognises an sequence of alphanumeric
characters containing a underscores.
=SML
fun €rec_atoms› (st : LEX_STATE) : LEX_STATE = (
let	val (st1, flag1) = (rec_alnum st, true)
		handle Unrecognised =>
		((rec_undersc_alnum st, true)
			handle Unrecognised => (st, false));
	fun aux st = (
	let	val (st1, flag1) = (rec_alnum st, true)
		handle Unrecognised =>
		((rec_undersc_alnum st, true)
			handle Unrecognised => (st, false));
	in
		if flag1 then aux st1
		else st1
	end);
in
	if flag1 then aux st1
		else raise Unrecognised
end);
=TEX
\subsection{Recognition of a Subscripted Character}
=SML
=TEX
The following recognises a character in subscript mode.
=SML
fun €rec_subscript› (st : LEX_STATE) : LEX_STATE = (
let	fun aux st = (
		if next is_superscriptor st
		then fail "Z Lexical Analyser" 60007 []
		else case st of
			([], _) => raise Unrecognised
			|st => collect st
	);
	val (st1, flag1) = (rec_subscriptor st, true)
		handle Unrecognised => (st, false);

in
	if flag1 then aux st1
	else raise Unrecognised
end);
=TEX
The following recognises a (possibly empty) sequence of
subscripted characters.
=SML
fun €rec_subscripteseq› (st : LEX_STATE) : LEX_STATE = (
let	val (st1, flag1) = (rec_subscript st, true)
			handle Unrecognised => (st, false);
in
	if flag1 then rec_subscripteseq st1
	else st1
end);
=TEX
The following recognises a (possibly empty) sequence of
symbols (excluding the subscript symbol).
=SML
fun €rec_symboleseq› (st : LEX_STATE) : LEX_STATE = (
let	val (st1, flag1) = (rec_symbol st, true)
		handle Unrecognised => (st, false);
in
	if flag1 then rec_symboleseq st1
	else st1
end);
=TEX
The following recognises an alpha-numeric identifier.
=SML
fun €rec_alphanumeric_id› (st : LEX_STATE) : LEX_STATE = (
let	val (st1, flag1) = (rec_alpha st, true)
			handle Unrecognised => (st, false);
	val (st2, flag2) = (rec_atoms st1, true)
			handle Unrecognised => (st1, false);
	val st3 = rec_subscripteseq st2;
in
	if flag1 then st3
	else raise Unrecognised
end);
=TEX
=SML
fun €rec_greek_id› (st : LEX_STATE) : LEX_STATE = (
let	val (st1, flag1) = (rec_greek st, true)
			handle Unrecognised => (st, false);
	val st2 = rec_subscripteseq st1;
in
	if flag1 then st2
	else raise Unrecognised
end);
=TEX
=SML
fun €rec_symbol_id› (st : LEX_STATE) : LEX_STATE = (
let	val (st1, flag1) = (rec_symbol st, true)
			handle Unrecognised => (st, false);
	val st2 = rec_symboleseq st1;
	val st3 = rec_subscripteseq st2;
in
	if flag1 then st3
	else raise Unrecognised
end);
=TEX
=SML
fun €rec_punc_id› (st : LEX_STATE) : LEX_STATE = (
let	val (st1, flag1) = (rec_punctuation st, true)
			handle Unrecognised => (st, false);
	val (st2, flag2) = (rec_subscript st1, true)
			handle Unrecognised => (st1, false);
	val st3 = rec_subscripteseq st2;
in
	if flag1 andalso flag2 then st3
	else raise Unrecognised
end);
=TEX
The following recognises a valid Z identifier.
=SML
fun €rec_identifier› (st : LEX_STATE) : LEX_STATE = (
	rec_symbol_id st
	handle Unrecognised =>
		rec_alphanumeric_id st
		handle Unrecognised =>
			rec_greek_id st
			handle Unrecognised =>
				rec_punc_id st
);
=TEX
\subsection{Recognition of Numbers}
=SML
fun €is_number› s = all (explode s) (fn s'=> is_digit s');
=TEX
=SML
fun €rec_number› (st : LEX_STATE) : LEX_STATE = (
let	fun aux st =
		if next is_digit st
		then aux (collect st)
		else st;
in
	if next is_digit st
	then aux (collect st)
	else raise Unrecognised
end);
=TEX
\subsection{Recognition of Decoration}
=SML
fun €is_decoration› s = all (explode s) (fn s'=> is_decor s');
=TEX
=SML
fun €rec_decor› (st : LEX_STATE) : LEX_STATE = (
let	fun aux st =
		if next is_decor st
		then aux (collect st)
		else st;
in
	if next is_decor st
	then aux (collect st)
	else raise Unrecognised
end);
=TEX

\subsection{Recognition of Lexemes}
Function $rec\_ns\_lexeme$ picks off the next non-space lexeme from the input
using the other recognisers.
It raises $Unrecognised$ if the input is exhausted.
=SML
fun €rec_ns_lexeme› (st : LEX_STATE) : LEX_STATE = (
	rec_identifier st
		handle Unrecognised => (rec_punctuation st
		handle Unrecognised => (rec_number st
		handle Unrecognised => (rec_decor st
		handle Unrecognised =>
			fail "Z Lexical Analyser" 60008 [])))
);
=TEX
\subsection{Lexical Analyser for Strings}
$lex\_string$ converts an input string into a list of tokens.
The supporting function $opclass$ determines fixity information
of known identifiers.
=SML
fun €opclass› s = (
	case get_fixity s of
	Prefix 1 => ZTBeginOp s
	|Prefix 2 => ZTEndOp s
	|Prefix 3 => ZTInOp s
	|Prefix 4 => ZTPostBeginOp s
	|Prefix 5 => ZTPostOp s
	|Prefix 6 => ZTPreEndOp s
	|Prefix 7 => ZTPreOp s
	|other => ZTId s
);
=TEX
=SML
fun €lex_string› (ip : string list) : Z_TOKEN list = (
	case skip_space (ip, Unknown) of
	([], _) => []
	|other => (
		case skip_space(rec_ns_lexeme other) of

		st' as (ip', Known s) => (
			case (classify s) of
			ZTId s' => (
				if is_decoration s'
				then (ZTDecor s')::lex_string ip'
				else if is_number s'
				then (ZTNumber (nat_of_string s'))::lex_string ip'
				else (opclass s')::lex_string ip'
			)| other => other :: lex_string ip'
		)|st' as (ip', Unknown) => (
			error
			"Z Lexical Analyser"
			60003
			[fn()=>	"Unrecognised input" ^ implode ip]
		)
		)
);
=TEX
\subsection{The Function $zlex$}
This is the lexical analyser function, visible via
the signature $ZLex$.
=SML
fun €zlex› (ip : INPUT list) : Z_TOKEN list = (
	case ip of
	Text s1 :: Text s2 :: more => (
		error
		"Z Lexical Analyser"
		60003
		[fn()=> "Adjacent text fragments generated by reader/writer"]
	) |	Text s :: more => (
			(lex_string (explode s))@zlex more
	) |	String s :: more => (
			ZTString s :: zlex more
	) |	Char s :: more => (
			if size s = 1
			then ZTChar s :: zlex more
			else fail "Z Lexical Analyser" 60005  [fn () => s]
	) |	Type ty :: more => (
			fail "Z Lexical Analyser" 60998 [fn()=>"Unexpected antiquoted type"]
	) |	Term tm :: more => (
			ZTAqTm tm :: zlex more
=SMLLITERAL
	) |	Separator s :: more => (
			case s of
			"˜" => ZTSt::zlex more
			|_ => error "Z Lexical Analyser" 60003 [fn()=>"Unknown Separator "^s]
=SML
	) |	Lex.Error n :: more => (fail "Z Lexical Analyser" 60006 [fn () => string_of_int n]
	) |	[] => [ZTEos]
);
=TEX
\section{EPILOGUE}

=SML
end; (* of structure Lex *)
=TEX
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}

=IGN


ÒaÆ;
Òa_3_4_4Æ;
Òabc_3Æ;
Òabc_3_aÆ;
Òabcâ1Æ;
Òabcâ1âsÆ;
Òabcâ1xâsÆ;
Òµâ¡ x∑x''+ zâk * ¡?=45Æ;
Òa''+1Æ;
Ò±âsÆ;
\section{FAILURES}

Òabc_3_Æ;
Òabc__3Æ;
Ò3_aÆ;
ÒabcâÁxÍÆ;
ÒâÆ;
ÒÁÆ;
ÒËÆ;
ÒÍÆ;
Ò∫Æ;
ÒªÆ;
ÒÙÆ;
ÒÆ;
Ò(Æ;



∞
