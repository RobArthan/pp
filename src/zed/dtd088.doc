=IGN
********************************************************************************
dtd088.doc: this file is part of the PPZed system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
%  dtd088.doc  %Z% $Date: 2002/10/17 16:26:32 $ $Revision: 1.16 $ $RCSfile: dtd088.doc,v $
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design of the Z Library Bags}  %% Mandatory field
\TPPref{DS/FMU/IED/DTD088}  %% Mandatory field
\def\SCCSversion{$Revision: 1.16 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2002/10/17 16:26:32 $%
}}
%\TPPstatus{Approved}
\TPPstatus{Draft}
\TPPtype{Specification}
\TPPkeywords{HOL}
%\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthors{D.J.~King & WIN01\\K.~Blackburn & WIN01}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{This document contains the detailed design of
the Z Library Bags and their proof support.
It also contains the ``marker'' theory $z\_library$,
and its proof contexts.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}
\item [Issue 1.1 (22nd October 1992)]
First version, derived from 078 and 083.
\item [Issue 1.2 (30th October 1992)]
Tidying.
\item [Issue 1.3, 12th November 1992] 
Changes as a consequence of changes in dependences.
\item [Issue 1.4, 15th November 1992] 
Added definition of the bag brackets.
\item[Issue 1.5 (11th December 1992)]
Global rename from wrk038.doc issue 1.9.
\item[Issue 1.6 (11th December 1992)]
Removed spurious ML bindings.
\item[Issue 1.7-1.9 (10th February 1993)]
Rearranging proof contexts.
\item[Issue 1.10 (15th February 1993)]
Summary of proof contexts results given.
\item[Issue 1.11 (23rd February 1993)]
Added theory $z\_library$.
\item[Issue 1.12 (21st December 1994)]
Added parent $z\_arithmetic\_tools$ to $z\_library$.
\item [Issue 1.13]
Added $z\_library1$ and $z\_library1\_ext$ proof contexts.
\item [Issue 1.14]
Typo.
\item[Issue 1.15] Copyright and banner updates for open source release.
\item[Issue 1.16] PPZed-specific updates for open source release
\item[Issue 1.17] The Z universal set is now called É.
\end{description}
\subsection{Changes Forecast}
Proof contexts ``z$\_$library'' and ``z$\_$library$\_$ext'' are 
likely to change or be superceded.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design
of the Bags Material of the Z Library.
The high level design for this material is given in \cite{DS/FMU/IED/HLD017}.
\subsection{Introduction}

\subsection{Purpose and Background}
See \cite{DS/FMU/IED/HLD017}.
\subsection{Dependencies}

\subsection{Possible Enhancements}
2nd Edition Spivey changes the name of bag membership, and
gives new operators for bag scaling, bag subsets, and bag difference.
This may need to be tracked as the Z Standard, to date, does not have these changes.
\subsection{Deficiencies}
None known.
\section{PROLOG}

=SML
open_theory"z_sequences";
push_pc "z_sets_alg";
force_delete_theory"z_bags" handle Fail _ => ();
val _ = set_flag ("z_type_check_only", false);
val _ = set_flag ("z_use_axioms", true);
new_theory"z_bags";
=TEX
\section {DEFINITION OF FIXITY}

The following fixity information has been taken from \cite{Spivey89}.
πZ
fun 3 _ Ç _
∞
πZ
rel _ in _
∞
πZ
gen 7 bag _
∞
In the language of Spivey, bag display is a language construct; the \ProductZ{} language allows (and requires) us to define the bag display here:

πZ
	fun	˚ ... ˝
∞

\section{BAGS}

\subsection{Bags, Multiplicity and Membership}

πZ
€bag› X ¶ X ﬂ Óâ1
∞

ù[X]úúúúúúúúúúúúúúúú
‹ €count› : bag X è (X ≠ Ó)
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹µ x : X; B : bag X ∑
‹	count B = (Ãx:X ∑ 0) ´ B
à¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸

ù[X]úúúúúúúúúúúúúúúú
‹ _ €in› _ : X ™ bag X
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹ µ x : X;B : bag X ∑
‹	x in B § x ç dom B
à¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
N.B. this is as in the 1st edition of Spivey, and in the standard version 0.5,
but its name changes to a ``squared'' $ç$ in 2nd edition Spivey.

\subsection{Bag Union}
ù[X]úúúúúúúúúúúúúúúú
‹ _ €Ç› _ : (bag X) ∏ bag X ≠ bag X
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹ µ B, C : bag X; x : X ∑
‹	count (B Ç C) x = count B x + count C x
à¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸

\subsection{Bag of Elements of a Sequence}

ù[X]úúúúúúúúúúúúúúúú
‹ €items› : seq X ≠ bag X
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹ µ s : seq X; x : X ∑
‹	count (items s) x = # {i : dom s | s (i) = x}
à¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
\subsection{Bag Display}
ù[X]úúúúúúúúúúúúúúúú
	˚ ... ˝ : seq X ≠ bag X
˜¸¸¸¸¸¸¸¸¸
	˚ ˝ = {};
	µx : X; s : seq X∑ (˚ ... ˝) (ßx¢ Î s) = (˚ ... ˝) s ´ {x Ì (˚ ... ˝) s x + 1}
à¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
\subsection{Start of Structure}
=DOC
signature €ZBags› = sig
=DESCRIBE
This provides the basic proof support for the Z library bags.
It creates the theory $z\_bags$.
=ENDDOC
=THDOC
req_name €"z_bags"› (Value "z_sequences");
req_language "Z";
set_flag("tc_thms_only",true);
=DESCRIBE
The theory $z\_bags$ contains various definitions of relation operators, and ``defining theorems'' of Z library constants derived from these definitions.
It is created in structure $ZBags$.
=ENDDOC

=DOC
val €z_bag_def› : THM;	val €z_count_def› : THM;
val €z_in_def› : THM;	val €z_Ç_def› : THM;
val €z_items_def› : THM;
=DESCRIBE
These are the definitions of the Z bag theory.
=ENDDOC
\subsection{Proof Contexts}
No appropriate material to use.
\subsection{End of Signature}
Red tape to end theory design:
=THSML
summarize_td_results ();
val z_bags_success = theory_check_success ();
initialise_td_results ();
=TEX
=SML
end; (* of signature ZBags *)
=TEX
\section{THE Z LIBRARY}
=SML
open_theory "z_bags";
new_theory "z_library";
new_parent "z_arithmetic_tools";
=TEX
\subsection{Start of Structure}
=DOC
signature €ZLibrary› = sig
=DESCRIBE
This provides a ``marker'' theory, indicating the ``top'' of the 
Z library theories.
It creates the theory $z\_library$.

As a side effect, loading this structure will set the current
theory to $z\_library$, the current proof context to
``z$\_$library'', and tidies the subgoal package and proof context stacks.
=ENDDOC
=THDOC
req_name €"z_library"› (Value "z_bags");
req_parent "z_arithmetic_tools";
req_language "Z";
set_flag("tc_thms_only",true);
=DESCRIBE
The theory $z\_bags$ contains various definitions of relation operators, and ``defining theorems'' of Z library constants derived from these definitions.
It is created in structure $ZLibrary$.
=ENDDOC

=DOC
(* Proof Context: €z_library› *)
=DESCRIBE
A mild complete proof context for handling the manipulation of Z language and library expressions and predicates.
Its contents are chosen to be ``uncontroversial''.
That is, any effect is considered to be ``almost always the correct thing''.

It consists of the merge of the proof contexts:
=GFT
"z_sets_alg", - simplification of set contructs, and Z language
"'z_rel_alg", - simplification of relational contructs
"'z_fun_alg", - simplification of function contructs
"'z_numbers" - simplification of numeric contructs
=TEX
\paragraph{Usage Notes}
It requires theory $z\-\_bags$.

It is not intended to be mixed with HOL proof contexts
or ``z$\_$library$\_$ext'', which offers an aggressive
approach.
=ENDDOC
=DOC
(* Proof Context: €z_library_ext› *)
=DESCRIBE
A agressive complete proof context for handling the manipulation of Z language and library expressions and predicates.
Its purpose is to strip or rewrite its input into the
Z predicate calculus.

It consists of the merge of the proof contexts:
=GFT
"z_fun_ext", - extensional reasoning about functions (and
	realtions and sets)
"'z_numbers" - simplification of numeric contructs
=TEX
\paragraph{Usage Notes}
It requires theory $z\-\_bags$.

It is not intended to be mixed with HOL proof contexts
or ``z$\_$library$\_$ext'', which offers an aggressive
approach.
=ENDDOC
Including the algebraic material in the above may not be
particularly helpful, though it seems unlikely to cause any harm.

What do the above proof contexts do?

The following function can be executed a Z system, to
derived the text that follows. It is intended as a summary of effects.
=DUMP z_library_summary.sml
open_theory "z_library";
local 
	val cnv1 = pc_rule1 "z_library" rewrite_conv [];
	val cnv2 = pc_rule1 "z_library_ext" rewrite_conv [];
	val cnv3 = pc_rule "z_library" strip_asm_conv;
	val cnv4 = pc_rule "z_library_ext" strip_asm_conv;
	fun cnv_result label isbool cnv tm = (
		if isbool andalso (not (type_of tm =: BOOL))
		then ("    " ^ label ^ ":   N/A")
		else  let val res = (snd(dest_eq(concl(cnv tm))))
			handle (Fail _) => tm;
		in
		if res =$ tm
		then ("   " ^ label ^ ":   N/C")
		else
		("    " ^ label ^ ": " ^ string_of_term res)
		end
	);
	
in
fun €library_pc_summary› ((title, term) :: rest) = (
	diag_line (title ^ ": " ^ string_of_term term);
	diag_line (cnv_result "z_library rewrite" false cnv1 term);
	diag_line (cnv_result "z_library_ext rewrite" false cnv2 term);
	diag_line (cnv_result "z_library strip" true cnv3 term);
	diag_line (cnv_result "z_library_ext strip" true cnv4 term);
 	library_pc_summary rest
) | library_pc_summary [] = (
	diag_line ("*** Z System Version " ^ z_system_version ^ " *** ")
);
end;
=TEX
The input data is:
=DUMPMORE z_library_summary.sml
val library_pc_summary_data1 = fn () => [
("Tuple Display Eqn", Ò(1,2,3) = (a,b,c)Æ),
("Tuple Display Eqn 2", Ò(1,2,3) = tupleÆ),
("Tuple Eqn", Ò(tuple1∫ (X ∏ Y)) = tuple2Æ),
("Tuple Maplet Eqn 1", Ò(x Ì y) = tuple2Æ),
("Tuple Maplet Eqn 2", Ò(x Ì y) = (1,2)Æ),
("Tuple of Selections",Ò((tuple1∫ ( X ∏ Y)).1, tuple1.2)Æ),
("Binding Display Eqn", Ò(x ¶ 1, y ¶ 2) = (x ¶ a, y ¶ b)Æ),
("Binding Display Eqn 2", Òbinding = (x ¶ 2, y ¶ 3)Æ),
("Binding Eqn", Ò(binding1 ∫ [x,y:X]) = binding2Æ),
("Binding   Eqn 1", Ò(  [x,y:X]) = binding2Æ),
("Binding   Eqn 2", Ò(  [x,y:X]) =   ([x,y:X])'Æ),
("Binding of Selections",Ò(x ¶ (binding1 ∫ [x,y:X]).x, y ¶ binding1.y)Æ),
("Set Display Eqn",Ò{1,2} = {a,b}Æ),
("Set Abstraction Eqn",Ò{x:X | x = 1} = {y:X | y > 0}Æ),
("Set Eqn",Ò(a∫  X) = bÆ),
("Set Display",Ò{1,2,3}Æ),
("ç Set Display",Ò p ç {1,2,3}Æ),
("Set Abstraction",Ò{x :X | p x ∑ (x,x)}Æ),
("Simp Set Abstraction",Ò{x:X | false ∑ x = 1}Æ),
("ç Set Abstraction",Òf x ç {x:X | p x ∑ x = 1}Æ),
("Empty Set",Ò{}Æ),
("ç Empty Set",Òr ç {}Æ),
("É",ÒÉÆ),
("ç É",Òx ç ÉÆ),
("É set",Ò{x:É; y,z:É | true}Æ),
("¨ç É set",Òx ç {x:É; y,z:É | true}Æ),
("É schema",Ò[x:É; y,z:É | true]Æ),
("ç É schema",Òx ç [x:É; y,z:É | true]Æ),
("Paragraph marker",¨Z'AbbDef (µ X ∑ Òsomething = falseÆ)Æ),
("ç  ",Òx ç  yÆ),
("Set Display ç  ",Ò{1,2} ç  yÆ),
("Set Display of variables ç  ",Ò{a,b} ç  yÆ),
(" É",Ò ÉÆ),
("ç  É",Òx ç  ÉÆ)
];
=TEX
=DUMPMORE z_library_summary.sml
val library_pc_summary_data2 =fn () =>  [
("Tuple Display ç Product",Ò(1,2) ç X ∏ YÆ),
("Tuple ç Product",Òx ç X ∏ YÆ),
("É ∏ É",ÒÉ ∏ É ∏ ÉÆ),
("ç É ∏ É",Òx ç É ∏ É ∏ ÉÆ),
("¬ reduction - no asms 1",Ò(Ã x :É∑ f x) yÆ),
("¬ reduction - no asms 2",Ò(Ã x:É ∑ (x = y)) yÆ),
("¬ reduction 1",Ò(Ã x :X∑ f x) yÆ),
("¬ reduction 2",Ò(Ã x :X ∑ (y = x)) yÆ),
("ç Ã",Òx ç (Ã x :X∑ f x)Æ),
("Õ", Ò(Õ x:X | p x ∑ q x)Æ),
("ç Õ", Òv ç (Õ x:X | p x ∑ q x)Æ),
("Application",Òf xÆ),
("ç Application",Òp ç f xÆ),
("Selection from Tuple Display 1",Ò(1,2,3).2Æ),
("Selection from Tuple Display 2",Ò(1,true,3).2Æ),
("Selection from Tuple Display 3",Òx ç (1,f 2,3).2Æ),
("Selection from Binding Display 1",Ò(x ¶ 1, y ¶ 2).yÆ),
("Selection from Tuple Display 2",Ò(x ¶ 1, y ¶ true).yÆ),
("Selection from Tuple Display 3",Òx ç (x ¶ 1, y ¶ f y).yÆ),
("Selection from   1",Ò(  [a,b:X]).aÆ),
("Selection from   2",Ò(  [a,b:X| ≥ a]).aÆ),
("Selection from   3",Òx ç (  [a,b:X]).aÆ),
("Ill-formed Schema as predicate",¨$"Z'SchemaPred" Ò(x¶x',y¶y) ÆÒ[x:X;y:Y]ÆÆ),
("Ill-formed  ",¨$"Z' " Ò(x¶x',y¶y) ÆÒ[x:X;y:Y]ÆÆ),
("ç",Òx ç fÆ),
("Variable",ÒfÆ),
("Sequence Display",Òß1,2¢Æ),
("ç Sequence Display",Òx ç ß1,2¢Æ),
("Bag Display",Ò˚ 1,2,1 ˝Æ),
("ç Bag Display",Òx ç ˚ 1,2,1 ˝Æ),
("Function Eqn",Ò(Ã x:X ∑ x +1) = yÆ),
("Variable Eqn",Òx = yÆ)
];
=TEX
=DUMPMORE z_library_summary.sml
val library_pc_summary_data3 = fn () => [
("≥",Ò≥ f xÆ),
("Simp ≥",Ò≥ falseÆ),
("±",Òa ± bÆ),
("Simp ±",Òtrue ± bÆ),
("≤",Òa ≤ bÆ),
("Simp ≤",Òtrue ≤ bÆ),
("¥",Òa ¥ bÆ),
("Simp ¥",Òtrue ¥ bÆ),
("§",Òa § bÆ),
("Simp §",Òtrue § bÆ),
("µ",Òµ x:X | p x ∑ q xÆ),
("Simp µ",Òµ x:X | false ∑ q xÆ),
("∂",Ò∂ x:X | p x ∑ q xÆ),
("Simp ∂",Ò∂ x:X | false ∑ q xÆ),
("∂â1",Ò∂â1 x:X | p x ∑ q xÆ),
("Simp ∂â1",Ò∂â1 x:X | false ∑ q xÆ),
("Binding ç Schema 1",Ò(x ¶ x,y ¶ y) ç (S ∫  [x:X;y:Y| f x y])Æ),
("Binding ç Schema 2",Ò(x ¶ x',y ¶ y) ç (S ∫  [x:X;y:Y| f x y])Æ),
("Schema",Ò([x:X;y:Y| f x y] ∫ É)Æ),
("Schema as predicate",Òê [x:X;y:Y| f x y]Æ),
("≥âs", Ò((≥ [x:X;y:Y| f x y]) ∫ É)Æ),
("ç ≥âs", Òp ç (≥ [x:X;y:Y| f x y])Æ),
("≥âs as predicate", Òê(≥ [x:X;y:Y| f x y])Æ),
("±âs", Ò(([y:Y; z:Z| g y z] ± [x:X;y:Y| f x y]) ∫ É)Æ),
("ç ±âs", Òp ç (([y:Y; z:Z| g y z] ± [x:X;y:Y| f x y]) ∫ É)Æ),
("±âs as predicate", Òê (([y:Y; z:Z| g y z] ± [x:X;y:Y| f x y]) ∫ É)Æ),
("≤âs", Ò(([y:Y; z:Z| g y z] ≤ [x:X;y:Y| f x y]) ∫ É)Æ),
("ç ≤âs", Òp ç (([y:Y; z:Z| g y z] ≤ [x:X;y:Y| f x y]) ∫ É)Æ),
("≤âs as predicate", Òê (([y:Y; z:Z| g y z] ≤ [x:X;y:Y| f x y]) ∫ É)Æ)
];
=TEX
=DUMPMORE z_library_summary.sml
val library_pc_summary_data4 = fn () => [
("¥âs", Ò(([y:Y; z:Z| g y z] ¥ [x:X;y:Y| f x y]) ∫ É)Æ),
("ç ¥âs", Òp ç (([y:Y; z:Z| g y z] ¥ [x:X;y:Y| f x y]) ∫ É)Æ),
("¥âs as predicate", Òê (([y:Y; z:Z| g y z] ¥ [x:X;y:Y| f x y]) ∫ É)Æ),
("§âs", Ò(([y:Y; z:Z| g y z] § [x:X;y:Y| f x y]) ∫ É)Æ),
("ç §âs", Òp ç (([y:Y; z:Z| g y z] § [x:X;y:Y| f x y]) ∫ É)Æ),
("§âs as predicate", Òê (([y:Y; z:Z| g y z] § [x:X;y:Y| f x y]) ∫ É)Æ),
("˘âs", Ò([y:Y; z:Z| g y z] ˘âs [x:X;y:Y| f x y] ∫ É)Æ),
("ç ˘âs", Òp ç ([y:Y; z:Z| g y z] ˘âs [x:X;y:Y| f x y] ∫ É)Æ),
("˘âs as predicate", Òê ([y:Y; z:Z| g y z] ˘âs [x:X;y:Y| f x y] ∫ É)Æ),
("µâs",Ò((µ x:X | p x ∑ [x,y,z:X | f x y z])∫É)Æ),
("ç µâs",Òq ç ((µ x:X | p x ∑ [x,y,z:X | f x y z])∫É)Æ),
("µâs as predicate",Òê ((µ x:X | p x ∑ [x,y,z:X | f x y z])∫É)Æ),
("∂âs",Ò((∂ x:X | p x ∑ [x,y,z:X | f x y z])∫É)Æ),
("ç ∂âs",Òq ç ((∂ x:X | p x ∑ [x,y,z:X | f x y z])∫É)Æ),
("∂âs as predicate",Òê ((∂ x:X | p x ∑ [x,y,z:X | f x y z])∫É)Æ),
("∂â1âs",Ò((∂â1 x:X | p x ∑ [x,y,z:X | f x y z])∫É)Æ),
("ç ∂â1âs",Òq ç ((∂â1 x:X | p x ∑ [x,y,z:X | f x y z])∫É)Æ),
("∂â1âs as predicate",Òê ((∂â1 x:X | p x ∑ [x,y,z:X | f x y z])∫É)Æ),
("preâs",Òpre [x,x',y,z:X | f x y z]Æ),
("ç preâs",Òp ç (pre [x,x',y,z:X | f x y z])Æ),
("preâs as predicate",Òê( pre [x,x',y,z:X | f x y z])Æ),
("Ñâs",ÒÑ [x,y,z:X | f x y z]Æ),
("ç Ñâs",Òp ç (Ñ [x,y,z:X | f x y z])Æ),
("Ñâs as predicate",Òê( Ñ [x,y,z:X | f x y z])Æ),
("òâs",Òò [x,y,z:X | f x y z]Æ),
("ç òâs",Òp ç (ò [x,y,z:X | f x y z])Æ),
("òâs as predicate",Òê( ò [x,y,z:X | f x y z])Æ)
];
=TEX
=DUMPMORE z_library_summary.sml
val library_pc_summary_data5 = fn () => [
("\\âs",Ò[x,y,z :X | f x y z] \âs (y)Æ),
("ç \\âs",Òp ç ([x,y,z :X| f x y z] \âs (y))Æ),
("\\âs as predicate",Òê ([x,y,z :X | f x y z] \âs (y))Æ),
("ªâs",Ò[x,x',y:X | f x x' y] ªâs [x,y,z:X | g x y z]Æ),
("ç ªâs",Òp ç ([x,x',y:X | f x x' y] ªâs [x,y,z:X | g x y z])Æ),
("ªâs as predicate",Òê( [x,x',y:X | f x x' y] ªâs [x,y,z:X | g x y z])Æ),
("Ω",Òs Ω tÆ),
("é",Òx é yÆ),
("ö",ÒöÆ),
("ç ö",Òp ç öÆ),
("Ä", Òs Ä tÆ),
("Simp Ä", Ò{} Ä tÆ),
("Set Display Ä", Ò{1,2} Ä tÆ),
("†", Òs † tÆ),
("Simp †", Òt † {}Æ),
("Set Display †", Ò{1,2} † tÆ),
("â1",Òâ1 sÆ),
("Simp â1",Òâ1 {}Æ),
("ç â1",Òt ç â1 sÆ),
("°", Òs ° tÆ),
("Simp °", Ò{} ° tÆ),
("ç °", Òx ç s ° tÆ),
("¿", Òs ¿ tÆ),
("Simp ¿", Ò{} ¿ tÆ),
("ç ¿", Òx ç s ¿ tÆ),
("\\", Òs \ tÆ),
("Simp \\", Ò{} \ tÆ),
("ç \\", Òx ç s \ tÆ),
("•",Ò• sÆ),
("Simp •",Ò• {}Æ),
("ç •",Òx ç • sÆ),
("ﬁ",Òﬁ sÆ),
("Simp ﬁ",Òﬁ {}Æ),
("ç ﬁ",Òx ç ﬁ sÆ)
];
=TEX
=DUMPMORE z_library_summary.sml
val library_pc_summary_data6 = fn () => [
("first",Òfirst xÆ),
("ç first",Òp ç first xÆ),
("second",Òsecond xÆ),
("ç second",Òp ç second xÆ),
("Ì",Ò(a Ì b).1Æ),
("™", ÒX ™ YÆ),
("Simp ™", Ò{} ™ YÆ),
("ç ™", Òx ç X ™ YÆ),
("Simp ç ™", Òx ç {} ™ YÆ),
("Domain", Òdom xÆ),
("Simp Domain", Òdom {}Æ),
("ç Domain", Òp ç dom xÆ),
("Simp ç Domain", Òp ç dom {}Æ),
("Range", Òran xÆ),
("Simp Range", Òran {}Æ),
("ç Range", Òp ç ran xÆ),
("Simp ç Range", Òp ç ran {}Æ),
("Identity",Òid xÆ),
("Simp Identity",Òid {}Æ),
("ç Identity",Òp ç id xÆ),
("Simp ç Identity",Òp ç id {}Æ),
("Sequential Composition",Òf ª gÆ),
("ç Sequential Composition",Ò x ç (f ª g)Æ),
("Sequential Composition 1",Òf o gÆ),
("ç Sequential Composition 1 ",Ò x ç (f o g)Æ),
("Domain restriction",Òx Ú yÆ),
("Simp Domain restriction",Ò{} Ú yÆ),
("ç Domain restriction",Òp ç x Ú yÆ),
("Simp ç Domain restriction",Òp ç {} Ú yÆ),
("Range restriction",Òx í yÆ),
("Simp Range restriction",Ò{} í yÆ),
("ç Range restriction",Òp ç x í yÆ),
("Simp ç Range restriction",Òp ç {} í yÆ),
("Domain antirestriction",Òx · yÆ),
("Simp Domain antirestriction",Ò{} · yÆ),
("ç Domain antirestriction",Òp ç x · yÆ),
("Simp ç Domain antirestriction",Òp ç {} · yÆ),
("Range antirestriction",Òx Å yÆ),
("Simp Range antirestriction",Ò{} Å yÆ),
("ç Range antirestriction",Òp ç x Å yÆ),
("Simp ç Range antirestriction",Òp ç {} Å yÆ)
];
=TEX
=DUMPMORE z_library_summary.sml
val library_pc_summary_data7 = fn () => [
("Relational Image", Òs ®t©Æ),
("Simp Relational Image", Ò{} ®t©Æ),
("ç Relational Image", Òx ç s ®t©Æ),
("Simp ç Relational Image", Òx ç {} ®t©Æ),
("Transitive Closure",Òx Á+ÍÆ),
("Simp Transitive Closure",Ò{} Á+ÍÆ),
("ç Transitive Closure",Òp ç x Á+ÍÆ),
("Simp ç Transitive Closure",Òp ç {} Á+ÍÆ),
("Transitive-Reflexive Closure",Òx Á*ÍÆ),
("Simp Transitive-Reflexive Closure",Ò{} Á*ÍÆ),
("ç Transitive-Reflexive Closure",Òp ç x Á*ÍÆ),
("Simp ç Transitive-Reflexive Closure",Òp ç {} Á*ÍÆ),
("Override",Òf ´ gÆ),
("ç Override",Òx ç f ´ gÆ),
("Partial Functions",Òx ﬂ yÆ),
("Simp Partial Functions",Ò{} ﬂ yÆ),
("ç Partial Functions",Òp ç x ﬂ yÆ),
("ç Simp Partial Functions",Òp ç {} ﬂ yÆ),
("Injections",Òx ˛ yÆ),
("Simp Injections",Ò{} ˛ yÆ),
("ç Injections",Òp ç x ˛ yÆ),
("ç Simp Injections",Òp ç {} ˛ yÆ),
("Surjections",Òx œ yÆ),
("Simp Surjections",Ò{} œ yÆ),
("ç Surjections",Òp ç x œ yÆ),
("ç Simp Surjections",Òp ç {} œ yÆ),
("Total Injections",Òx ‡ yÆ),
("Simp Total Injections",Ò{} ‡ yÆ),
("ç Total Injections",Òp ç x ‡ yÆ),
("ç Simp Total Injections",Òp ç {} ‡ yÆ),
("Total Surjections",Òx Ô yÆ),
("Simp Total Surjections",Ò{} Ô yÆ),
("ç Total Surjections",Òp ç x Ô yÆ),
("ç Total Simp Surjections",Òp ç {} Ô yÆ),
("Bijections",Òx è yÆ),
("Simp Bijections",Ò{} è yÆ),
("ç Bijections",Òp ç x è yÆ),
("ç Simp Bijections",Òp ç {} è yÆ),
("Total Functions",Òx ≠ yÆ),
("Simp Total Functions",Ò{} ≠ yÆ),
("ç Total Functions",Òp ç x ≠ yÆ),
("ç Simp Total Functions",Òp ç {} ≠ yÆ)
];
=TEX
=DUMPMORE z_library_summary.sml
val library_pc_summary_data8 = fn () => [
("Ó",ÒÓÆ),
("ç Ó",Òp ç ÓÆ),
("ç Ó 1",Ò1 ç ÓÆ),
("˙",Ò˙Æ),
("˙ struct",Ò˙ ∏ ˙Æ),
("ç ˙",Òp ç ˙Æ),
("ç ˙ 1",Ò1 ç ˙Æ),
("Addition",Ò a + bÆ),
("Simp Addition",Ò a + 0Æ),
("Literal Addition",Ò 2 + 3Æ),
("Negation",Ò a - bÆ),
("Simp Negation",Ò a - 0Æ),
("Literal Negation",Ò 2 - 3Æ),
("Multiplication",Ò a * bÆ),
("Simp Multiplication",Ò a * 0Æ),
("Literal Multiplication",Ò 2 * 3Æ),
("Integer divide",Ò a div bÆ),
("Simp Integer divide",Ò a div 1Æ),
("Literal Integer divide",Ò 5 div 3Æ),
("Modulus",Ò a mod bÆ),
("Simp Modulus",Ò a mod 1Æ),
("Literal Modulus",Ò 2 mod 3Æ),
("Unit negation",Ò~ aÆ),
("Simp Unit negation",Ò~ 0Æ),
("Literal Unit negation",Ò~ 3Æ),
("Less",Ò a < bÆ),
("Simp Less",Ò a < aÆ),
("Literal Less",Ò 2 < 3Æ),
("Less or equal",Ò a º bÆ),
("Simp Less or equal",Ò a º aÆ),
("Literal Less or equal",Ò 2 º 3Æ),
("Greater",Ò a > bÆ),
("Simp Greater",Ò a > aÆ),
("Literal Greater",Ò 2 > 3Æ),
("Greater or equal",Ò a æ bÆ),
("Simp Greater or equal",Ò a æ aÆ),
("Literal Greater or equal",Ò 2 æ 3Æ),
("Non-empty Ó",ÒÓâ1Æ),
("ç Non-empty Ó",Òx ç Óâ1Æ),
("succ",Òsucc 3Æ),
("Iterate",Òx Á 2 ÍÆ),
("Interval",Òa .. bÆ),
("Simp Interval",Ò1 .. 1Æ),
("ç Interval",Òx ç a .. bÆ),
("ç Simp Interval",Òx ç 1 .. 1Æ)
];
=TEX
Note that we do nothing for finiteness, sequence operators or bag operators.
=DUMPMORE z_library_summary.sml
library_pc_summary (library_pc_summary_data1 () @ 
	library_pc_summary_data2 () @
	library_pc_summary_data3 () @
	library_pc_summary_data4 () @
	library_pc_summary_data5 () @
	library_pc_summary_data6 () @
	library_pc_summary_data7 () @
	library_pc_summary_data8 ());
=TEX
The results of this are:
=GFT
Tuple Display Eqn: Ò(1, 2, 3) = (a, b, c)Æ
    z_library rewrite: Ò1 = a ± 2 = b ± 3 = cÆ
    z_library_ext rewrite: Ò1 = a ± 2 = b ± 3 = cÆ
    z_library strip: Ò1 = a ± 2 = b ± 3 = cÆ
    z_library_ext strip: Ò1 = a ± 2 = b ± 3 = cÆ
Tuple Display Eqn 2: Ò(1, 2, 3) = tupleÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò1 = tuple.1 ± 2 = tuple.2 ± 3 = tuple.3Æ
   z_library strip:   N/C
    z_library_ext strip: Ò1 = tuple.1 ± 2 = tuple.2 ± 3 = tuple.3Æ
Tuple Eqn: Òtuple1 = tuple2Æ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òtuple1.1 = tuple2.1 ± tuple1.2 = tuple2.2Æ
   z_library strip:   N/C
    z_library_ext strip: Òtuple1.1 = tuple2.1 ± tuple1.2 = tuple2.2Æ
Tuple Maplet Eqn 1: Òx Ì y = tuple2Æ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òx = tuple2.1 ± y = tuple2.2Æ
   z_library strip:   N/C
    z_library_ext strip: Òx = tuple2.1 ± y = tuple2.2Æ
Tuple Maplet Eqn 2: Òx Ì y = (1, 2)Æ
    z_library rewrite: Òx = 1 ± y = 2Æ
    z_library_ext rewrite: Òx = 1 ± y = 2Æ
    z_library strip: Òx = 1 ± y = 2Æ
    z_library_ext strip: Òx = 1 ± y = 2Æ
Tuple of Selections: Ò(tuple1.1, tuple1.2)Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Binding Display Eqn: Ò(x ¶ 1, y ¶ 2) = (x ¶ a, y ¶ b)Æ
    z_library rewrite: Ò1 = a ± 2 = bÆ
    z_library_ext rewrite: Ò1 = a ± 2 = bÆ
    z_library strip: Ò1 = a ± 2 = bÆ
    z_library_ext strip: Ò1 = a ± 2 = bÆ
Binding Display Eqn 2: Òbinding = (x ¶ 2, y ¶ 3)Æ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òbinding.x = 2 ± binding.y = 3Æ
   z_library strip:   N/C
    z_library_ext strip: Òbinding.x = 2 ± binding.y = 3Æ
Binding Eqn: Òbinding1 = binding2Æ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òbinding1.x = binding2.x ± binding1.y = binding2.yÆ
   z_library strip:   N/C
    z_library_ext strip: Òbinding1.x = binding2.x ± binding1.y = binding2.yÆ
Binding   Eqn 1: Ò [x, y : X] = binding2Æ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òx = binding2.x ± y = binding2.yÆ
   z_library strip:   N/C
    z_library_ext strip: Òx = binding2.x ± y = binding2.yÆ
Binding   Eqn 2: Ò [x, y : X] =  ([x, y : X])'Æ
    z_library rewrite: Òx = x' ± y = y'Æ
    z_library_ext rewrite: Òx = x' ± y = y'Æ
    z_library strip: Òx = x' ± y = y'Æ
    z_library_ext strip: Òx = x' ± y = y'Æ
Binding of Selections: Ò(x ¶ binding1.x, y ¶ binding1.y)Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Set Display Eqn: Ò{1, 2} = {a, b}Æ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òµ x1 : É ∑ x1 = 1 ≤ x1 = 2 § x1 = a ≤ x1 = bÆ
   z_library strip:   N/C
    z_library_ext strip: Òµ x1 : É ∑ x1 ç {1, 2} § x1 ç {a, b}Æ
Set Abstraction Eqn: Ò{x : X | x = 1} = {y : X | y > 0}Æ
    z_library rewrite: Ò{x : X | x = 1} = {y : X | 0 < y}Æ
    z_library_ext rewrite: Òµ x1 : É ∑ 1 ç X ± 1 = x1 § x1 ç X ± 0 < x1Æ
   z_library strip:   N/C
    z_library_ext strip: Òµ x1 : É ∑ x1 ç {x : X | x = 1} § x1 ç {y : X | y > 0}Æ
Set Eqn: Òa = bÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òµ x1 : É ∑ x1 ç a § x1 ç bÆ
   z_library strip:   N/C
    z_library_ext strip: Òµ x1 : É ∑ x1 ç a § x1 ç bÆ
Set Display: Ò{1, 2, 3}Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Set Display: Òp ç {1, 2, 3}Æ
    z_library rewrite: Òp = 1 ≤ p = 2 ≤ p = 3Æ
    z_library_ext rewrite: Òp = 1 ≤ p = 2 ≤ p = 3Æ
    z_library strip: Òp = 1 ≤ p = 2 ≤ p = 3Æ
    z_library_ext strip: Òp = 1 ≤ p = 2 ≤ p = 3Æ
Set Abstraction: Ò{x : X | p x ∑ (x, x)}Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Set Abstraction: Ò{x : X | false ∑ x = 1}Æ
    z_library rewrite: Ò{}Æ
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Set Abstraction: Òf x ç {x : X | p x ∑ x = 1}Æ
    z_library rewrite: Ò∂ x : X | p x ∑ x = 1 § f xÆ
    z_library_ext rewrite: Ò∂ x : X | p x ∑ x = 1 § f xÆ
    z_library strip: Ò∂ x : X | p x ∑ x = 1 § f xÆ
    z_library_ext strip: Ò∂ x : X | p x ∑ x = 1 § f xÆ
Empty Set: Ò{}Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Empty Set: Òr ç {}Æ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: ÒfalseÆ
    z_library strip: ÒfalseÆ
    z_library_ext strip: ÒfalseÆ
É: ÒÉÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç É: Òx ç ÉÆ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: ÒtrueÆ
    z_library_ext strip: ÒtrueÆ
É set: Ò{x : É; y, z : É}Æ
    z_library rewrite: ÒÉÆ
    z_library_ext rewrite: ÒÉÆ
    z_library strip:   N/A
    z_library_ext strip:   N/A
¨ç É set: Òx ç {x : É; y, z : É}Æ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: ÒtrueÆ
    z_library_ext strip: ÒtrueÆ
É schema: Ò[x : É; y, z : É]Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç É schema: Òx ç [x : É; y, z : É]Æ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: ÒtrueÆ
    z_library_ext strip: ÒtrueÆ
Paragraph marker: Ò¨Z'AbbDef (µ X∑ something § F)ÆÆ
    z_library rewrite: Ò≥ somethingÆ
    z_library_ext rewrite: Ò≥ somethingÆ
    z_library strip: Ò¨µ X∑ something § FÆÆ
    z_library_ext strip: Ò¨µ X∑ something § FÆÆ
ç  : Òx ç  yÆ
    z_library rewrite: Òx Ä yÆ
    z_library_ext rewrite: Òµ x1 : É ∑ x1 ç x ¥ x1 ç yÆ
    z_library strip: Òx Ä yÆ
    z_library_ext strip: Òµ x1 : É ∑ x1 ç x ¥ x1 ç yÆ
Set Display ç  : Ò{1, 2} ç  yÆ
    z_library rewrite: Ò{1, 2} Ä yÆ
    z_library_ext rewrite: Ò1 ç y ± 2 ç yÆ
    z_library strip: Ò{1, 2} Ä yÆ
    z_library_ext strip: Ò1 ç y ± 2 ç yÆ
Set Display of variables ç  : Ò{a, b} ç  yÆ
    z_library rewrite: Ò{a, b} Ä yÆ
    z_library_ext rewrite: Òa ç y ± b ç yÆ
    z_library strip: Ò{a, b} Ä yÆ
    z_library_ext strip: Òa ç y ± b ç yÆ
 É: Ò ÉÆ
    z_library rewrite: ÒÉÆ
    z_library_ext rewrite: ÒÉÆ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç  É: Òx ç  ÉÆ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: Òx ç ÉÆ
    z_library_ext strip: Òµ x1 : É ∑ x1 ç x ¥ x1 ç ÉÆ
Tuple Display ç Product: Ò(1, 2) ç X ∏ YÆ
    z_library rewrite: Ò1 ç X ± 2 ç YÆ
    z_library_ext rewrite: Ò1 ç X ± 2 ç YÆ
    z_library strip: Ò1 ç X ± 2 ç YÆ
    z_library_ext strip: Ò1 ç X ± 2 ç YÆ
Tuple ç Product: Òx ç X ∏ YÆ
    z_library rewrite: Òx.1 ç X ± x.2 ç YÆ
    z_library_ext rewrite: Òx.1 ç X ± x.2 ç YÆ
    z_library strip: Òx.1 ç X ± x.2 ç YÆ
    z_library_ext strip: Òx.1 ç X ± x.2 ç YÆ
É ∏ É: ÒÉ ∏ É ∏ ÉÆ
    z_library rewrite: ÒÉÆ
    z_library_ext rewrite: ÒÉÆ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç É ∏ É: Òx ç É ∏ É ∏ ÉÆ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: Òx.1 ç É ± x.2 ç É ± x.3 ç ÉÆ
    z_library_ext strip: Òx.1 ç É ± x.2 ç É ± x.3 ç ÉÆ
¬ reduction - no asms 1: Ò(Ã x : É ∑ f x) yÆ
    z_library rewrite: Òf yÆ
    z_library_ext rewrite: Òf yÆ
    z_library strip:   N/A
    z_library_ext strip:   N/A
¬ reduction - no asms 2: Ò(Ã x : É ∑ x = y) yÆ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: Òy = yÆ
    z_library_ext strip: Òy = yÆ
¬ reduction 1: Ò(Ã x : X ∑ f x) yÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
¬ reduction 2: Ò(Ã x : X ∑ y = x) yÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
   z_library strip:   N/C
   z_library_ext strip:   N/C
ç Ã: Òx ç (Ã x : X ∑ f x)Æ
    z_library rewrite: Òx.1 ç X ± f x.1 = x.2Æ
    z_library_ext rewrite: Òx.1 ç X ± f x.1 = x.2Æ
    z_library strip: Òx ç {x : X ∑ (x, f x)}Æ
    z_library_ext strip: Òx ç {x : X ∑ (x, f x)}Æ
Õ: ÒÕ x : X | p x ∑ q xÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Õ: Òv ç (Õ x : X | p x ∑ q x)Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
   z_library strip:   N/C
   z_library_ext strip:   N/C
Application: Òf xÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Application: Òp ç f xÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
   z_library strip:   N/C
   z_library_ext strip:   N/C
Selection from Tuple Display 1: Ò(1, 2, 3).2Æ
    z_library rewrite: Ò2Æ
    z_library_ext rewrite: Ò2Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
Selection from Tuple Display 2: Ò(1, true, 3).2Æ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: ÒtrueÆ
    z_library_ext strip: ÒtrueÆ
Selection from Tuple Display 3: Òx ç (1, f 2, 3).2Æ
    z_library rewrite: Òx ç f 2Æ
    z_library_ext rewrite: Òx ç f 2Æ
    z_library strip: Òx ç f 2Æ
    z_library_ext strip: Òx ç f 2Æ
Selection from Binding Display 1: Ò(x ¶ 1, y ¶ 2).yÆ
    z_library rewrite: Ò2Æ
    z_library_ext rewrite: Ò2Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
Selection from Tuple Display 2: Ò(x ¶ 1, y ¶ true).yÆ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: ÒtrueÆ
    z_library_ext strip: ÒtrueÆ
Selection from Tuple Display 3: Òx ç (x ¶ 1, y ¶ f y).yÆ
    z_library rewrite: Òx ç f yÆ
    z_library_ext rewrite: Òx ç f yÆ
    z_library strip: Òx ç f yÆ
    z_library_ext strip: Òx ç f yÆ
Selection from   1: Ò( [a, b : X]).aÆ
    z_library rewrite: ÒaÆ
    z_library_ext rewrite: ÒaÆ
    z_library strip:   N/A
    z_library_ext strip:   N/A
Selection from   2: Ò( [a, b : X | ≥ a]).aÆ
    z_library rewrite: ÒaÆ
    z_library_ext rewrite: ÒaÆ
    z_library strip: ÒaÆ
    z_library_ext strip: ÒaÆ
Selection from   3: Òx ç ( [a, b : X]).aÆ
    z_library rewrite: Òx ç aÆ
    z_library_ext rewrite: Òx ç aÆ
    z_library strip: Òx ç aÆ
    z_library_ext strip: Òx ç aÆ
Ill-formed Schema as predicate: Ò([x : X; y : Y]')Æ
    z_library rewrite: Òx' ç X ± y ç YÆ
    z_library_ext rewrite: Òx' ç X ± y ç YÆ
    z_library strip: Ò(x ¶ x', y ¶ y) ç [x : X; y : Y]Æ
    z_library_ext strip: Ò(x ¶ x', y ¶ y) ç [x : X; y : Y]Æ
Ill-formed  : Ò ([x : X; y : Y])'Æ
    z_library rewrite: Ò(x ¶ x', y ¶ y)Æ
    z_library_ext rewrite: Ò(x ¶ x', y ¶ y)Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç: Òx ç fÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
   z_library strip:   N/C
   z_library_ext strip:   N/C
Variable: ÒfÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Sequence Display: Òß1, 2¢Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Sequence Display: Òx ç ß1, 2¢Æ
    z_library rewrite: Òx = (1, 1) ≤ x = (2, 2)Æ
    z_library_ext rewrite: Òx.1 = 1 ± x.2 = 1 ≤ x.1 = 2 ± x.2 = 2Æ
    z_library strip: Òx ç {(1, 1), (2, 2)}Æ
    z_library_ext strip: Òx ç {(1, 1), (2, 2)}Æ
Bag Display: Ò˚ 1, 2, 1 ˝Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Bag Display: Òx ç ˚ 1, 2, 1 ˝Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
   z_library strip:   N/C
   z_library_ext strip:   N/C
Function Eqn: Ò(Ã x : X ∑ x + 1) = yÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òµ x1 : É; x2 : É ∑ x1 ç X ± x1 + 1 = x2 § (x1, x2) ç yÆ
   z_library strip:   N/C
    z_library_ext strip: Òµ x1 : É; x2 : É ∑ (x1, x2) ç (Ã x : X ∑ x + 1) § (x1, x2) ç yÆ
Variable Eqn: Òx = yÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
   z_library strip:   N/C
   z_library_ext strip:   N/C
≥: Ò≥ f xÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
   z_library strip:   N/C
   z_library_ext strip:   N/C
Simp ≥: Ò≥ falseÆ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: ÒtrueÆ
    z_library_ext strip: ÒtrueÆ
±: Òa ± bÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
   z_library strip:   N/C
   z_library_ext strip:   N/C
Simp ±: Òtrue ± bÆ
    z_library rewrite: ÒbÆ
    z_library_ext rewrite: ÒbÆ
   z_library strip:   N/C
   z_library_ext strip:   N/C
≤: Òa ≤ bÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
   z_library strip:   N/C
   z_library_ext strip:   N/C
Simp ≤: Òtrue ≤ bÆ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
   z_library strip:   N/C
   z_library_ext strip:   N/C
¥: Òa ¥ bÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip: Ò≥ a ≤ bÆ
    z_library_ext strip: Ò≥ a ≤ bÆ
Simp ¥: Òtrue ¥ bÆ
    z_library rewrite: ÒbÆ
    z_library_ext rewrite: ÒbÆ
    z_library strip: Ò≥ true ≤ bÆ
    z_library_ext strip: Ò≥ true ≤ bÆ
§: Òa § bÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip: Ò(a ¥ b) ± (b ¥ a)Æ
    z_library_ext strip: Ò(a ¥ b) ± (b ¥ a)Æ
Simp §: Òtrue § bÆ
    z_library rewrite: ÒbÆ
    z_library_ext rewrite: ÒbÆ
    z_library strip: Ò(true ¥ b) ± (b ¥ true)Æ
    z_library_ext strip: Ò(true ¥ b) ± (b ¥ true)Æ
µ: Òµ x : X | p x ∑ q xÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
   z_library strip:   N/C
   z_library_ext strip:   N/C
Simp µ: Òµ x : X | false ∑ q xÆ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: Òfalse ¥ (µ x : X ∑ q x)Æ
    z_library_ext strip: Òfalse ¥ (µ x : X ∑ q x)Æ
∂: Ò∂ x : X | p x ∑ q xÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip: ¨∂ x∑ x ç X ± Òp xÆ ± Òq xÆÆ
    z_library_ext strip: ¨∂ x∑ x ç X ± Òp xÆ ± Òq xÆÆ
Simp ∂: Ò∂ x : X | false ∑ q xÆ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: ÒfalseÆ
    z_library strip: ¨∂ x∑ x ç X ± F ± Òq xÆÆ
    z_library_ext strip: ¨∂ x∑ x ç X ± F ± Òq xÆÆ
∂â1: Ò∂â1 x : X | p x ∑ q xÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip: Ò∂ x : X | p x ± q x ∑ µ x' : X | p x' ± q x' ∑ x' = xÆ
    z_library_ext strip: Ò∂ x : X | p x ± q x ∑ µ x' : X | p x' ± q x' ∑ x' = xÆ
Simp ∂â1: Ò∂â1 x : X | false ∑ q xÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip: Ò∂ x : X | false ± q x ∑ µ x' : X | false ± q x' ∑ x' = xÆ
    z_library_ext strip: Ò∂ x : X | false ± q x ∑ µ x' : X | false ± q x' ∑ x' = xÆ
Binding ç Schema 1: Ò(x ¶ x, y ¶ y) ç SÆ
    z_library rewrite: ÒSÆ
    z_library_ext rewrite: ÒSÆ
    z_library strip: ÒSÆ
    z_library_ext strip: ÒSÆ
Binding ç Schema 2: Ò(x ¶ x', y ¶ y) ç SÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
   z_library strip:   N/C
   z_library_ext strip:   N/C
Schema: Ò[x : X; y : Y | f x y]Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Schema as predicate: Ò[x : X; y : Y | f x y]Æ
    z_library rewrite: Ò(x ç X ± y ç Y) ± f x yÆ
    z_library_ext rewrite: Ò(x ç X ± y ç Y) ± f x yÆ
    z_library strip: Ò(x ç X ± y ç Y) ± f x yÆ
    z_library_ext strip: Ò(x ç X ± y ç Y) ± f x yÆ
≥âs: Ò≥ [x : X; y : Y | f x y]Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç ≥âs: Òp ç (≥ [x : X; y : Y | f x y])Æ
    z_library rewrite: Ò≥ ((p.x ç X ± p.y ç Y) ± f p.x p.y)Æ
    z_library_ext rewrite: Ò≥ ((p.x ç X ± p.y ç Y) ± f p.x p.y)Æ
    z_library strip: Ò≥ p ç [x : X; y : Y | f x y]Æ
    z_library_ext strip: Ò≥ p ç [x : X; y : Y | f x y]Æ
≥âs as predicate: Ò≥ [x : X; y : Y | f x y]Æ
    z_library rewrite: Ò≥ ((x ç X ± y ç Y) ± f x y)Æ
    z_library_ext rewrite: Ò≥ ((x ç X ± y ç Y) ± f x y)Æ
    z_library strip: Ò≥ ((x ç X ± y ç Y) ± f x y)Æ
    z_library_ext strip: Ò≥ ((x ç X ± y ç Y) ± f x y)Æ
±âs: Ò[y : Y; z : Z | g y z] ± [x : X; y : Y | f x y]Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç ±âs: Òp ç ([y : Y; z : Z | g y z] ± [x : X; y : Y | f x y])Æ
    z_library rewrite: Ò((p.y ç Y ± p.z ç Z) ± g p.y p.z) ± (p.x ç X ± p.y ç Y) ± f p.x p.yÆ
    z_library_ext rewrite: Ò((p.y ç Y ± p.z ç Z) ± g p.y p.z) ± 
	(p.x ç X ± p.y ç Y) ± f p.x p.yÆ
    z_library strip: Ò(y ¶ p.y, z ¶ p.z) ç [y : Y; z : Z | g y z] ± 
	(x ¶ p.x, y ¶ p.y) ç [x : X; y : Y | f x y]Æ
    z_library_ext strip: Ò(y ¶ p.y, z ¶ p.z) ç [y : Y; z : Z | g y z] ± 
	(x ¶ p.x, y ¶ p.y) ç [x : X; y : Y | f x y]Æ
±âs as predicate: Ò([y : Y; z : Z | g y z] ± [x : X; y : Y | f x y])Æ
    z_library rewrite: Ò((y ç Y ± z ç Z) ± g y z) ± (x ç X ± y ç Y) ± f x yÆ
    z_library_ext rewrite: Ò((y ç Y ± z ç Z) ± g y z) ± (x ç X ± y ç Y) ± f x yÆ
    z_library strip: Ò(y ¶ y, z ¶ z) ç [y : Y; z : Z | g y z] ± 
	(x ¶ x, y ¶ y) ç [x : X; y : Y | f x y]Æ
    z_library_ext strip: Ò(y ¶ y, z ¶ z) ç [y : Y; z : Z | g y z] ± 
	(x ¶ x, y ¶ y) ç [x : X; y : Y | f x y]Æ
≤âs: Ò[y : Y; z : Z | g y z] ≤ [x : X; y : Y | f x y]Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç ≤âs: Òp ç ([y : Y; z : Z | g y z] ≤ [x : X; y : Y | f x y])Æ
    z_library rewrite: Ò(p.y ç Y ± p.z ç Z) ± g p.y p.z ≤ (p.x ç X ± p.y ç Y) ± f p.x p.yÆ
    z_library_ext rewrite: Ò(p.y ç Y ± p.z ç Z) ± g p.y p.z ≤ (p.x ç X ± p.y ç Y) 
	± f p.x p.yÆ
    z_library strip: Ò(y ¶ p.y, z ¶ p.z) ç [y : Y; z : Z | g y z] 
	≤ (x ¶ p.x, y ¶ p.y) ç [x : X; y : Y | f x y]Æ
    z_library_ext strip: Ò(y ¶ p.y, z ¶ p.z) ç [y : Y; z : Z | g y z] 
	≤ (x ¶ p.x, y ¶ p.y) ç [x : X; y : Y | f x y]Æ
≤âs as predicate: Ò([y : Y; z : Z | g y z] ≤ [x : X; y : Y | f x y])Æ
    z_library rewrite: Ò(y ç Y ± z ç Z) ± g y z ≤ (x ç X ± y ç Y) ± f x yÆ
    z_library_ext rewrite: Ò(y ç Y ± z ç Z) ± g y z ≤ (x ç X ± y ç Y) ± f x yÆ
    z_library strip: Ò(y ¶ y, z ¶ z) ç [y : Y; z : Z | g y z] ≤ 
	(x ¶ x, y ¶ y) ç [x : X; y : Y | f x y]Æ
    z_library_ext strip: Ò(y ¶ y, z ¶ z) ç [y : Y; z : Z | g y z] ≤ 
	(x ¶ x, y ¶ y) ç [x : X; y : Y | f x y]Æ
¥âs: Ò[y : Y; z : Z | g y z] ¥ [x : X; y : Y | f x y]Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç ¥âs: Òp ç ([y : Y; z : Z | g y z] ¥ [x : X; y : Y | f x y])Æ
    z_library rewrite: Ò(p.y ç Y ± p.z ç Z) ± g p.y p.z ¥ (p.x ç X ± p.y ç Y) ± 
	f p.x p.yÆ
    z_library_ext rewrite: Ò(p.y ç Y ± p.z ç Z) ± g p.y p.z ¥ 
	(p.x ç X ± p.y ç Y) ± f p.x p.yÆ
    z_library strip: Ò(y ¶ p.y, z ¶ p.z) ç [y : Y; z : Z | g y z] ¥ 
	(x ¶ p.x, y ¶ p.y) ç [x : X; y : Y | f x y]Æ
    z_library_ext strip: Ò(y ¶ p.y, z ¶ p.z) ç [y : Y; z : Z | g y z] ¥ 
	(x ¶ p.x, y ¶ p.y) ç [x : X; y : Y | f x y]Æ
¥âs as predicate: Ò([y : Y; z : Z | g y z] ¥ [x : X; y : Y | f x y])Æ
    z_library rewrite: Ò(y ç Y ± z ç Z) ± g y z ¥ (x ç X ± y ç Y) ± f x yÆ
    z_library_ext rewrite: Ò(y ç Y ± z ç Z) ± g y z ¥ (x ç X ± y ç Y) ± f x yÆ
    z_library strip: Ò(y ¶ y, z ¶ z) ç [y : Y; z : Z | g y z] ¥
	 (x ¶ x, y ¶ y) ç [x : X; y : Y | f x y]Æ
    z_library_ext strip: Ò(y ¶ y, z ¶ z) ç [y : Y; z : Z | g y z] ¥ 
	(x ¶ x, y ¶ y) ç [x : X; y : Y | f x y]Æ
§âs: Ò[y : Y; z : Z | g y z] § [x : X; y : Y | f x y]Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç §âs: Òp ç ([y : Y; z : Z | g y z] § [x : X; y : Y | f x y])Æ
    z_library rewrite: Ò(p.y ç Y ± p.z ç Z) ± g p.y p.z § (p.x ç X ± p.y ç Y) ± f p.x p.yÆ
    z_library_ext rewrite: Ò(p.y ç Y ± p.z ç Z) ± g p.y p.z § (p.x ç X ± p.y ç Y) 
	± f p.x p.yÆ
    z_library strip: Ò(y ¶ p.y, z ¶ p.z) ç [y : Y; z : Z | g y z] 
	§ (x ¶ p.x, y ¶ p.y) ç [x : X; y : Y | f x y]Æ
    z_library_ext strip: Ò(y ¶ p.y, z ¶ p.z) ç [y : Y; z : Z | g y z] 
	§ (x ¶ p.x, y ¶ p.y) ç [x : X; y : Y | f x y]Æ
§âs as predicate: Ò([y : Y; z : Z | g y z] § [x : X; y : Y | f x y])Æ
    z_library rewrite: Ò(y ç Y ± z ç Z) ± g y z § (x ç X ± y ç Y) ± f x yÆ
    z_library_ext rewrite: Ò(y ç Y ± z ç Z) ± g y z § (x ç X ± y ç Y) 
	± f x yÆ
    z_library strip: Ò(y ¶ y, z ¶ z) ç [y : Y; z : Z | g y z] § (x ¶ x, y ¶ y) 
	ç [x : X; y : Y | f x y]Æ
    z_library_ext strip: Ò(y ¶ y, z ¶ z) ç [y : Y; z : Z | g y z] § (x ¶ x, y ¶ y) 
	ç [x : X; y : Y | f x y]Æ
˘âs: Ò[y : Y; z : Z | g y z] ˘âs [x : X; y : Y | f x y]Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç ˘âs: Òp ç ([y : Y; z : Z | g y z] ˘âs [x : X; y : Y | f x y])Æ
    z_library rewrite: Ò∂ z : É ∑ ((p.y ç Y ± z ç Z) ± g p.y z) ± 
	(p.x ç X ± p.y ç Y) ± f p.x p.yÆ
    z_library_ext rewrite: Ò∂ z : É ∑ ((p.y ç Y ± z ç Z) ± g p.y z) ± 
	(p.x ç X ± p.y ç Y) ± f p.x p.yÆ
    z_library strip: Òp ç (([y : Y; z : Z | g y z] ± [x : X; y : Y | f x y]) \âs (z))Æ
    z_library_ext strip: Òp ç (([y : Y; z : Z | g y z] ± [x : X; y : Y | f x y]) \âs (z))Æ
˘âs as predicate: Ò([y : Y; z : Z | g y z] ˘âs [x : X; y : Y | f x y])Æ
    z_library rewrite: Ò∂ z : É ∑ ((y ç Y ± z ç Z) ± g y z) ± 
	(x ç X ± y ç Y) ± f x yÆ
    z_library_ext rewrite: Ò∂ z : É ∑ ((y ç Y ± z ç Z) ± g y z) ± 
	(x ç X ± y ç Y) ± f x yÆ
    z_library strip: Ò(x ¶ x, y ¶ y) ç (([y : Y; z : Z | g y z] ± 
	[x : X; y : Y | f x y]) \âs (z))Æ
    z_library_ext strip: Ò(x ¶ x, y ¶ y) ç (([y : Y; z : Z | g y z] ±
	 [x : X; y : Y | f x y]) \âs (z))Æ
µâs: Òµ x : X | p x ∑ [x, y, z : X | f x y z]Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç µâs: Òq ç (µ x : X | p x ∑ [x, y, z : X | f x y z])Æ
    z_library rewrite: Òµ x1 : É ∑ x1.x ç X ± p x1.x ¥ {x1.x, q.y, q.z} Ä X
	 ± f x1.x q.y q.zÆ
    z_library_ext rewrite: Òµ x1 : É ∑ x1.x ç X ± p x1.x ¥ (x1.x ç X ± q.y ç X ± q.z ç X) 
	± f x1.x q.y q.zÆ
    z_library strip: Òµ x1 : É ∑ x1.x ç X ± p x1.x ¥ (x ¶ x1.x, y ¶ q.y, z ¶ q.z) 
	ç [x, y, z : X | f x y z]Æ
    z_library_ext strip: Òµ x1 : É ∑ x1.x ç X ± p x1.x ¥ (x ¶ x1.x, y ¶ q.y, z ¶ q.z) 
	ç [x, y, z : X | f x y z]Æ
µâs as predicate: Ò(µ x : X | p x ∑ [x, y, z : X | f x y z])Æ
    z_library rewrite: Òµ x1 : É ∑ x1.x ç X ± p x1.x ¥ {x1.x, y, z} Ä X 
	± f x1.x y zÆ
    z_library_ext rewrite: Òµ x1 : É ∑ x1.x ç X ± p x1.x ¥ (x1.x ç X ± y ç X ± z ç X) 
	± f x1.x y zÆ
    z_library strip: Òµ x1 : É ∑ x1.x ç X ± p x1.x ¥ (x ¶ x1.x, y ¶ y, z ¶ z) 
	ç [x, y, z : X | f x y z]Æ
    z_library_ext strip: Òµ x1 : É ∑ x1.x ç X ± p x1.x ¥ (x ¶ x1.x, y ¶ y, z ¶ z) 
	ç [x, y, z : X | f x y z]Æ
∂âs: Ò∂ x : X | p x ∑ [x, y, z : X | f x y z]Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç ∂âs: Òq ç (∂ x : X | p x ∑ [x, y, z : X | f x y z])Æ
    z_library rewrite: Ò∂ x1 : É ∑ (x1.x ç X ± p x1.x) ± {x1.x, q.y, q.z} Ä X 
	± f x1.x q.y q.zÆ
    z_library_ext rewrite: Ò∂ x1 : É ∑ (x1.x ç X ± p x1.x) ± (x1.x ç X ± q.y ç X 
	± q.z ç X) ± f x1.x q.y q.zÆ
    z_library strip: Ò∂ x1 : É ∑ (x1.x ç X ± p x1.x) ± (x ¶ x1.x, y ¶ q.y, z ¶ q.z) 
	ç [x, y, z : X | f x y z]Æ
    z_library_ext strip: Ò∂ x1 : É ∑ (x1.x ç X ± p x1.x) ± (x ¶ x1.x, y ¶ q.y, z ¶ q.z) 
	ç [x, y, z : X | f x y z]Æ
∂âs as predicate: Ò(∂ x : X | p x ∑ [x, y, z : X | f x y z])Æ
    z_library rewrite: Ò∂ x1 : É ∑ (x1.x ç X ± p x1.x) ± {x1.x, y, z} Ä X 
	± f x1.x y zÆ
    z_library_ext rewrite: Ò∂ x1 : É ∑ (x1.x ç X ± p x1.x) ± 
	(x1.x ç X ± y ç X ± z ç X) ± f x1.x y zÆ
    z_library strip: Ò∂ x1 : É ∑ (x1.x ç X ± p x1.x) ± (x ¶ x1.x, y ¶ y, z ¶ z) ç 
	[x, y, z : X | f x y z]Æ
    z_library_ext strip: Ò∂ x1 : É ∑ (x1.x ç X ± p x1.x) ± (x ¶ x1.x, y ¶ y, z ¶ z) ç 
	[x, y, z : X | f x y z]Æ
∂â1âs: Ò∂â1 x : X | p x ∑ [x, y, z : X | f x y z]Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç ∂â1âs: Òq ç (∂â1 x : X | p x ∑ [x, y, z : X | f x y z])Æ
    z_library rewrite: Ò∂â1 x1 : É ∑ (x1.x ç X ± p x1.x) ± {x1.x, q.y, q.z} Ä 
	X ± f x1.x q.y q.zÆ
    z_library_ext rewrite: Ò∂â1 x1 : É ∑ (x1.x ç X ± p x1.x) ± 
	(x1.x ç X ± q.y ç X ± q.z ç X) ± f x1.x q.y q.zÆ
    z_library strip: Ò∂â1 x1 : É ∑ (x1.x ç X ± p x1.x) ± (x ¶ x1.x, y ¶ q.y, z ¶ q.z)
	 ç [x, y, z : X | f x y z]Æ
    z_library_ext strip: Ò∂â1 x1 : É ∑ (x1.x ç X ± p x1.x) ± 
	(x ¶ x1.x, y ¶ q.y, z ¶ q.z) ç [x, y, z : X | f x y z]Æ
∂â1âs as predicate: Ò(∂â1 x : X | p x ∑ [x, y, z : X | f x y z])Æ
    z_library rewrite: Ò∂â1 x1 : É ∑ (x1.x ç X ± p x1.x) ± {x1.x, y, z} Ä X ± 
	f x1.x y zÆ
    z_library_ext rewrite: Ò∂â1 x1 : É ∑ (x1.x ç X ± p x1.x) ± 
	(x1.x ç X ± y ç X ± z ç X) ± f x1.x y zÆ
    z_library strip: Ò∂â1 x1 : É ∑ (x1.x ç X ± p x1.x) ± (x ¶ x1.x, y ¶ y, z ¶ z) ç 
	[x, y, z : X | f x y z]Æ
    z_library_ext strip: Ò∂â1 x1 : É ∑ (x1.x ç X ± p x1.x) ± 
	(x ¶ x1.x, y ¶ y, z ¶ z) ç [x, y, z : X | f x y z]Æ
preâs: Òpre [x, x', y, z : X | f x y z]Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç preâs: Òp ç (pre [x, x', y, z : X | f x y z])Æ
    z_library rewrite: Ò∂ x' : É ∑ {p.x, x', p.y, p.z} Ä X ± f p.x p.y p.zÆ
    z_library_ext rewrite: Ò∂ x' : É ∑ (p.x ç X ± x' ç X ± p.y ç X ± p.z ç X) 
	± f p.x p.y p.zÆ
    z_library strip: Òp ç [x : É; y : É; z : É | ∂ x' : É ∑ [x, x', y, z : X 
	| f x y z]]Æ
    z_library_ext strip: Òp ç [x : É; y : É; z : É | ∂ x' : É ∑ 
	[x, x', y, z : X | f x y z]]Æ
preâs as predicate: Ò(pre [x, x', y, z : X | f x y z])Æ
    z_library rewrite: Ò∂ x' : É ∑ {x, x', y, z} Ä X ± f x y zÆ
    z_library_ext rewrite: Ò∂ x' : É ∑ (x ç X ± x' ç X ± y ç X ± z ç X) ± f x y zÆ
    z_library strip: Ò(x ¶ x, y ¶ y, z ¶ z) ç [x : É; y : É; z : É | 
	∂ x' : É ∑ [x, x', y, z : X | f x y z]]Æ
    z_library_ext strip: Ò(x ¶ x, y ¶ y, z ¶ z) ç [x : É; y : É; z : É | 
	∂ x' : É ∑ [x, x', y, z : X | f x y z]]Æ
Ñâs: ÒÑ [x, y, z : X | f x y z]Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Ñâs: Òp ç (Ñ [x, y, z : X | f x y z])Æ
    z_library rewrite: Ò({p.x, p.y, p.z} Ä X ± f p.x p.y p.z) ± 
	{p.x', p.y', p.z'} Ä X ± f p.x' p.y' p.z'Æ
    z_library_ext rewrite: Ò((p.x ç X ± p.y ç X ± p.z ç X) ± f p.x p.y p.z) ± 
	(p.x' ç X ± p.y' ç X ± p.z' ç X) ± f p.x' p.y' p.z'Æ
    z_library strip: Òp ç [[x, y, z : X | f x y z]; ([x, y, z : X | f x y z])']Æ
    z_library_ext strip: Òp ç [[x, y, z : X | f x y z];
	 ([x, y, z : X | f x y z])']Æ
Ñâs as predicate: Ò(Ñ [x, y, z : X | f x y z])Æ
    z_library rewrite: Ò({x, y, z} Ä X ± f x y z) ± {x', y', z'} Ä X ± 
	f x' y' z'Æ
    z_library_ext rewrite: Ò((x ç X ± y ç X ± z ç X) ± f x y z) ± 
	(x' ç X ± y' ç X ± z' ç X) ± f x' y' z'Æ
    z_library strip: Ò(x ¶ x, x' ¶ x', y ¶ y, y' ¶ y', z ¶ z, z' ¶ z') ç 
	[[x, y, z : X | f x y z]; ([x, y, z : X | f x y z])']Æ
    z_library_ext strip: Ò(x ¶ x, x' ¶ x', y ¶ y, y' ¶ y', z ¶ z, z' ¶ z') ç 
	[[x, y, z : X | f x y z]; ([x, y, z : X | f x y z])']Æ
òâs: Òò [x, y, z : X | f x y z]Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç òâs: Òp ç (ò [x, y, z : X | f x y z])Æ
    z_library rewrite: Ò(({p.x, p.y, p.z} Ä X ± f p.x p.y p.z) ± 
	{p.x', p.y', p.z'} Ä X ± f p.x' p.y' p.z') ± p.x = p.x' ± 
	p.y = p.y' ± p.z = p.z'Æ
    z_library_ext rewrite: Ò(((p.x ç X ± p.y ç X ± p.z ç X) ± f p.x p.y p.z) 
	± (p.x' ç X ± p.y' ç X ± p.z' ç X) ± f p.x' p.y' p.z') ± 
	p.x = p.x' ± p.y = p.y' ± p.z = p.z'Æ
    z_library strip: Òp ç [[x, y, z : X | f x y z]; ([x, y, z : X | f x y z])' 
	|  [x, y, z : X | f x y z] =  ([x, y, z : X | f x y z])']Æ
    z_library_ext strip: Òp ç [[x, y, z : X | f x y z]; ([x, y, z : X | f x y z])' 
	|  [x, y, z : X | f x y z] =  ([x, y, z : X | f x y z])']Æ
òâs as predicate: Ò(ò [x, y, z : X | f x y z])Æ
    z_library rewrite: Ò(({x, y, z} Ä X ± f x y z) ± {x', y', z'} Ä X 
	± f x' y' z') ± x = x' ± y = y' ± z = z'Æ
    z_library_ext rewrite: Ò(((x ç X ± y ç X ± z ç X) ± f x y z) ± (x' ç X ± 
	y' ç X ± z' ç X) ± f x' y' z') ± x = x' ± y = y' ± z = z'Æ
    z_library strip: Ò(x ¶ x, x' ¶ x', y ¶ y, y' ¶ y', z ¶ z, z' ¶ z') ç
	 [[x, y, z : X | f x y z]; 
	([x, y, z : X | f x y z])' |  [x, y, z : X | f x y z] = 
	 ([x, y, z : X | f x y z])']Æ
    z_library_ext strip: Ò(x ¶ x, x' ¶ x', y ¶ y, y' ¶ y', z ¶ z, z' ¶ z') ç 
	[[x, y, z : X | f x y z]; ([x, y, z : X | f x y z])' 
	|  [x, y, z : X | f x y z] =  ([x, y, z : X | f x y z])']Æ
\âs: Ò[x, y, z : X | f x y z] \âs (y)Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç \âs: Òp ç ([x, y, z : X | f x y z] \âs (y))Æ
    z_library rewrite: Ò∂ y : É ∑ {p.x, y, p.z} Ä X ± f p.x y p.zÆ
    z_library_ext rewrite: Ò∂ y : É ∑ (p.x ç X ± y ç X ± p.z ç X) ± f p.x y p.zÆ
    z_library strip: Òp ç [x : É; z : É | ∂ y : É ∑ [x, y, z : X | f x y z]]Æ
    z_library_ext strip: Òp ç [x : É; z : É | ∂ y : É ∑ [x, y, z : X | f x y z]]Æ
\âs as predicate: Ò([x, y, z : X | f x y z] \âs (y))Æ
    z_library rewrite: Ò∂ y : É ∑ {x, y, z} Ä X ± f x y zÆ
    z_library_ext rewrite: Ò∂ y : É ∑ (x ç X ± y ç X ± z ç X) ± f x y zÆ
    z_library strip: Ò(x ¶ x, z ¶ z) ç [x : É; z : É | ∂ y : É ∑ [x, y, z : X | f x y z]]Æ
    z_library_ext strip: Ò(x ¶ x, z ¶ z) ç [x : É; z : É | ∂ y : É ∑ [x, y, z : X | f x y z]]Æ
ªâs: Ò[x, x', y : X | f x x' y] ªâs [x, y, z : X | g x y z]Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç ªâs: Òp ç ([x, x', y : X | f x x' y] ªâs [x, y, z : X | g x y z])Æ
    z_library rewrite: Ò∂ x1 : É ∑ ({p.x, x1, p.y} Ä X ± f p.x x1 p.y) ± 
	{x1, p.y, p.z} Ä X ± g x1 p.y p.zÆ
    z_library_ext rewrite: Ò∂ x1 : É ∑ ((p.x ç X ± x1 ç X ± p.y ç X) ± f p.x x1 p.y) ±
	 (x1 ç X ± p.y ç X ± p.z ç X) ± g x1 p.y p.zÆ
    z_library strip: Òp ç [x : É; y : É; z : É | ∂ x1 : É ∑ (x ¶ x, x' ¶ x1, y ¶ y) 
	ç [x, x', y : X | f x x' y] ± (x ¶ x1, y ¶ y, z ¶ z) ç [x, y, z : X | g x y z]]Æ
    z_library_ext strip: Òp ç [x : É; y : É; z : É | ∂ x1 : É ∑ 
	(x ¶ x, x' ¶ x1, y ¶ y) ç [x, x', y : X | f x x' y] 
	± (x ¶ x1, y ¶ y, z ¶ z) ç [x, y, z : X | g x y z]]Æ
ªâs as predicate: Ò([x, x', y : X | f x x' y] ªâs [x, y, z : X | g x y z])Æ
    z_library rewrite: Ò∂ x1 : É ∑ ({x, x1, y} Ä X ± f x x1 y) ± {x1, y, z} Ä X ± g x1 y zÆ
    z_library_ext rewrite: Ò∂ x1 : É ∑ ((x ç X ± x1 ç X ± y ç X) ± 
	f x x1 y) ± (x1 ç X ± y ç X ± z ç X) ± g x1 y zÆ
    z_library strip: Ò(x ¶ x, y ¶ y, z ¶ z) ç [x : É; y : É; z : É |
	 ∂ x1 : É ∑ (x ¶ x, x' ¶ x1, y ¶ y) ç [x, x', y : X | f x x' y] ± 
	(x ¶ x1, y ¶ y, z ¶ z) ç [x, y, z : X | g x y z]]Æ
    z_library_ext strip: Ò(x ¶ x, y ¶ y, z ¶ z) ç [x : É; y : É; z : É | ∂ x1 : É ∑ 
	(x ¶ x, x' ¶ x1, y ¶ y) ç [x, x', y : X | f x x' y] ± 
	(x ¶ x1, y ¶ y, z ¶ z) ç [x, y, z : X | g x y z]]Æ
Ω: Òs Ω tÆ
    z_library rewrite: Ò≥ s = tÆ
    z_library_ext rewrite: Ò≥ s = tÆ
    z_library strip: Ò≥ s = tÆ
    z_library_ext strip: Ò≥ s = tÆ
é: Òx é yÆ
    z_library rewrite: Ò≥ x ç yÆ
    z_library_ext rewrite: Ò≥ x ç yÆ
    z_library strip: Ò≥ x ç yÆ
    z_library_ext strip: Ò≥ x ç yÆ
ö: ÒöÆ
    z_library rewrite: Ò{}Æ
    z_library_ext rewrite: Ò{}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç ö: Òp ç öÆ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: ÒfalseÆ
    z_library strip: ÒfalseÆ
    z_library_ext strip: ÒfalseÆ
Ä: Òs Ä tÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òµ x1 : É ∑ x1 ç s ¥ x1 ç tÆ
   z_library strip:   N/C
    z_library_ext strip: Òµ x1 : É ∑ x1 ç s ¥ x1 ç tÆ
Simp Ä: Ò{} Ä tÆ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: ÒtrueÆ
    z_library_ext strip: ÒtrueÆ
Set Display Ä: Ò{1, 2} Ä tÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò1 ç t ± 2 ç tÆ
    z_library strip: Ò1 ç t ± 2 ç tÆ
    z_library_ext strip: Ò1 ç t ± 2 ç tÆ
†: Òs † tÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò(µ x1 : É ∑ x1 ç s ¥ x1 ç t) ± 
	≥ (µ x1 : É ∑ x1 ç s § x1 ç t)Æ
   z_library strip:   N/C
    z_library_ext strip: Òs Ä t ± s Ω tÆ
Simp †: Òt † {}Æ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: Ò(µ x1 : É ∑ ≥ x1 ç t) ± ≥ (µ x1 : É ∑ ≥ x1 ç t)Æ
    z_library strip: ÒfalseÆ
    z_library_ext strip: Òt Ä {} ± t Ω {}Æ
Set Display †: Ò{1, 2} † tÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò(1 ç t ± 2 ç t) ± ≥ (µ x1 : É ∑ x1 = 1 ≤ x1 = 2 § x1 ç t)Æ
   z_library strip:   N/C
    z_library_ext strip: Ò{1, 2} Ä t ± {1, 2} Ω tÆ
â1: Òâ1 sÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp â1: Òâ1 {}Æ
    z_library rewrite: Ò{}Æ
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç â1: Òt ç â1 sÆ
    z_library rewrite: Òt Ä s ± ≥ t = {}Æ
    z_library_ext rewrite: Ò(µ x1 : É ∑ x1 ç t ¥ x1 ç s) ± ≥
	(µ x1 : É ∑ ≥ x1 ç t)Æ
    z_library strip: Òt Ä s ± t Ω öÆ
    z_library_ext strip: Òt Ä s ± t Ω öÆ
°: Òs ° tÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp °: Ò{} ° tÆ
    z_library rewrite: Ò{}Æ
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç °: Òx ç s ° tÆ
    z_library rewrite: Òx ç s ± x ç tÆ
    z_library_ext rewrite: Òx ç s ± x ç tÆ
    z_library strip: Òx ç s ± x ç tÆ
    z_library_ext strip: Òx ç s ± x ç tÆ
¿: Òs ¿ tÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp ¿: Ò{} ¿ tÆ
    z_library rewrite: ÒtÆ
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç ¿: Òx ç s ¿ tÆ
    z_library rewrite: Òx ç s ≤ x ç tÆ
    z_library_ext rewrite: Òx ç s ≤ x ç tÆ
    z_library strip: Òx ç s ≤ x ç tÆ
    z_library_ext strip: Òx ç s ≤ x ç tÆ
\: Òs \ tÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp \: Ò{} \ tÆ
    z_library rewrite: Ò{}Æ
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç \: Òx ç s \ tÆ
    z_library rewrite: Òx ç s ± ≥ x ç tÆ
    z_library_ext rewrite: Òx ç s ± ≥ x ç tÆ
    z_library strip: Òx ç s ± x é tÆ
    z_library_ext strip: Òx ç s ± x é tÆ
•: Ò• sÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp •: Ò• {}Æ
    z_library rewrite: ÒÉÆ
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç •: Òx ç • sÆ
    z_library rewrite: Òµ S : É ∑ S ç s ¥ x ç SÆ
    z_library_ext rewrite: Òµ S : É ∑ S ç s ¥ x ç SÆ
    z_library strip: Òµ S : É ∑ S ç s ¥ x ç SÆ
    z_library_ext strip: Òµ S : É ∑ S ç s ¥ x ç SÆ
ﬁ: Òﬁ sÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp ﬁ: Òﬁ {}Æ
    z_library rewrite: Ò{}Æ
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç ﬁ: Òx ç ﬁ sÆ
    z_library rewrite: Ò∂ S : É ∑ S ç s ± x ç SÆ
    z_library_ext rewrite: Ò∂ S : É ∑ S ç s ± x ç SÆ
    z_library strip: Ò∂ S : É ∑ S ç s ± x ç SÆ
    z_library_ext strip: Ò∂ S : É ∑ S ç s ± x ç SÆ
first: Òfirst xÆ
    z_library rewrite: Òx.1Æ
    z_library_ext rewrite: Òx.1Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç first: Òp ç first xÆ
    z_library rewrite: Òp ç x.1Æ
    z_library_ext rewrite: Òp ç x.1Æ
   z_library strip:   N/C
   z_library_ext strip:   N/C
second: Òsecond xÆ
    z_library rewrite: Òx.2Æ
    z_library_ext rewrite: Òx.2Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç second: Òp ç second xÆ
    z_library rewrite: Òp ç x.2Æ
    z_library_ext rewrite: Òp ç x.2Æ
   z_library strip:   N/C
   z_library_ext strip:   N/C
Ì: Ò(a Ì b).1Æ
    z_library rewrite: ÒaÆ
    z_library_ext rewrite: ÒaÆ
    z_library strip:   N/A
    z_library_ext strip:   N/A
™: ÒX ™ YÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp ™: Ò{} ™ YÆ
    z_library rewrite: Ò{{}}Æ
    z_library_ext rewrite: Ò{{}}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç ™: Òx ç X ™ YÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òµ x1 : É; x2 : É ∑ (x1, x2) ç x ¥ x1 ç X ± x2 ç YÆ
   z_library strip:   N/C
    z_library_ext strip: Òx ç  (X ∏ Y)Æ
Simp ç ™: Òx ç {} ™ YÆ
    z_library rewrite: Òx = {}Æ
    z_library_ext rewrite: Òµ x1 : É; x2 : É ∑ ≥ (x1, x2) ç xÆ
    z_library strip: Òx ç {{}}Æ
    z_library_ext strip: Òx ç {{}}Æ
Domain: Òdom xÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Domain: Òdom {}Æ
    z_library rewrite: Ò{}Æ
    z_library_ext rewrite: Ò{}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Domain: Òp ç dom xÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò∂ y : É ∑ (p, y) ç xÆ
   z_library strip:   N/C
    z_library_ext strip: Ò∂ y : É ∑ (p, y) ç xÆ
Simp ç Domain: Òp ç dom {}Æ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: ÒfalseÆ
    z_library strip: Òp ç {}Æ
    z_library_ext strip: Òp ç {}Æ
Range: Òran xÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Range: Òran {}Æ
    z_library rewrite: Ò{}Æ
    z_library_ext rewrite: Ò{}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Range: Òp ç ran xÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò∂ x' : É ∑ (x', p) ç xÆ
   z_library strip:   N/C
    z_library_ext strip: Ò∂ x' : É ∑ (x', p) ç xÆ
Simp ç Range: Òp ç ran {}Æ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: ÒfalseÆ
    z_library strip: Òp ç {}Æ
    z_library_ext strip: Òp ç {}Æ
Identity: Òid xÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Identity: Òid {}Æ
    z_library rewrite: Ò{}Æ
    z_library_ext rewrite: Ò{}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Identity: Òp ç id xÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òp.1 ç x ± p.1 = p.2Æ
   z_library strip:   N/C
    z_library_ext strip: Òp ç {x' : É | x' ç x ∑ (x', x')}Æ
Simp ç Identity: Òp ç id {}Æ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: ÒfalseÆ
    z_library strip: Òp ç {}Æ
    z_library_ext strip: Òp ç {}Æ
Sequential Composition: Òf ª gÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Sequential Composition: Òx ç f ª gÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò∂ y : É ∑ (x.1, y) ç f ± (y, x.2) ç gÆ
   z_library strip:   N/C
    z_library_ext strip: Òx ç g o fÆ
Sequential Composition 1: Òf o gÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Sequential Composition 1 : Òx ç f o gÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò∂ y : É ∑ (x.1, y) ç g ± (y, x.2) ç fÆ
   z_library strip:   N/C
    z_library_ext strip: Ò∂ y : É ∑ (x.1, y) ç g ± (y, x.2) ç fÆ
Domain restriction: Òx Ú yÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Domain restriction: Ò{} Ú yÆ
    z_library rewrite: Ò{}Æ
    z_library_ext rewrite: Ò{}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Domain restriction: Òp ç x Ú yÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òp.1 ç x ± p ç yÆ
   z_library strip:   N/C
    z_library_ext strip: Òp.1 ç x ± p ç yÆ
Simp ç Domain restriction: Òp ç {} Ú yÆ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: ÒfalseÆ
    z_library strip: Òp ç {}Æ
    z_library_ext strip: Òp ç {}Æ
Range restriction: Òx í yÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Range restriction: Ò{} í yÆ
    z_library rewrite: Ò{}Æ
    z_library_ext rewrite: Ò{}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Range restriction: Òp ç x í yÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òp ç x ± p.2 ç yÆ
   z_library strip:   N/C
    z_library_ext strip: Òp ç x ± p.2 ç yÆ
Simp ç Range restriction: Òp ç {} í yÆ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: ÒfalseÆ
    z_library strip: Òp ç {}Æ
    z_library_ext strip: Òp ç {}Æ
Domain antirestriction: Òx · yÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Domain antirestriction: Ò{} · yÆ
    z_library rewrite: ÒyÆ
    z_library_ext rewrite: ÒyÆ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Domain antirestriction: Òp ç x · yÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò≥ p.1 ç x ± p ç yÆ
   z_library strip:   N/C
    z_library_ext strip: Ò≥ p.1 ç x ± p ç yÆ
Simp ç Domain antirestriction: Òp ç {} · yÆ
    z_library rewrite: Òp ç yÆ
    z_library_ext rewrite: Òp ç yÆ
    z_library strip: Òp ç yÆ
    z_library_ext strip: Òp ç yÆ
Range antirestriction: Òx Å yÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Range antirestriction: Ò{} Å yÆ
    z_library rewrite: Ò{}Æ
    z_library_ext rewrite: Ò{}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Range antirestriction: Òp ç x Å yÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òp ç x ± ≥ p.2 ç yÆ
   z_library strip:   N/C
    z_library_ext strip: Òp ç x ± ≥ p.2 ç yÆ
Simp ç Range antirestriction: Òp ç {} Å yÆ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: ÒfalseÆ
    z_library strip: Òp ç {}Æ
    z_library_ext strip: Òp ç {}Æ
Relational Image: Òs ® t ©Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Relational Image: Ò{} ® t ©Æ
    z_library rewrite: Ò{}Æ
    z_library_ext rewrite: Ò{}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Relational Image: Òx ç s ® t ©Æ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò∂ x' : É ∑ x' ç t ± (x', x) ç sÆ
   z_library strip:   N/C
    z_library_ext strip: Ò∂ x' : É ∑ x' ç t ± (x', x) ç sÆ
Simp ç Relational Image: Òx ç {} ® t ©Æ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: ÒfalseÆ
    z_library strip: Òx ç {}Æ
    z_library_ext strip: Òx ç {}Æ
Transitive Closure: Òx Á+ÍÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Transitive Closure: Ò{} Á+ÍÆ
    z_library rewrite: Ò{}Æ
    z_library_ext rewrite: Ò{}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Transitive Closure: Òp ç x Á+ÍÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òµ S : É ∑ (µ x1 : É; x2 : É ∑ (x1, x2) ç x ¥ 
	(x1, x2) ç S) ± (µ x1 : É; x2 : É ∑ (∂ y : É ∑ (x1, y) ç S ± 
	(y, x2) ç S) ¥ (x1, x2) ç S) ¥ p ç SÆ
   z_library strip:   N/C
    z_library_ext strip: Òp ç • {Q : É | x Ä Q ± Q ª Q Ä Q}Æ
Simp ç Transitive Closure: Òp ç {} Á+ÍÆ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: ÒfalseÆ
    z_library strip: Òp ç {}Æ
    z_library_ext strip: Òp ç {}Æ
Transitive-Reflexive Closure: Òx Á*ÍÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Transitive-Reflexive Closure: Ò{} Á*ÍÆ
    z_library rewrite: Ò(id _)Æ
    z_library_ext rewrite: Ò(id _)Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Transitive-Reflexive Closure: Òp ç x Á*ÍÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Òµ S : É ∑ (µ x1 : É; x2 : É ∑ x1 = x2 ¥ 
	(x1, x2) ç S) ± (µ x1 : É; x2 : É ∑ (x1, x2) ç x ¥ (x1, x2) ç S) 
	± (µ x1 : É; x2 : É ∑ (∂ y : É ∑ (x1, y) ç S ± (y, x2) ç S) ¥ 
	(x1, x2) ç S) ¥ p ç SÆ
   z_library strip:   N/C
    z_library_ext strip: Òp ç • {Q : É | (id _) Ä Q ± x Ä Q ± Q ª Q Ä Q}Æ
Simp ç Transitive-Reflexive Closure: Òp ç {} Á*ÍÆ
    z_library rewrite: Òp ç (id _)Æ
    z_library_ext rewrite: Òp.1 = p.2Æ
    z_library strip: Òp ç (id _)Æ
    z_library_ext strip: Òp ç (id _)Æ
Override: Òf ´ gÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Override: Òx ç f ´ gÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò≥ (∂ y : É ∑ (x.1, y) ç g) ± x ç f ≤ x ç gÆ
   z_library strip:   N/C
    z_library_ext strip: Òx ç dom g · f ¿ gÆ
Partial Functions: Òx ﬂ yÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Partial Functions: Ò{} ﬂ yÆ
    z_library rewrite: Ò{{}}Æ
    z_library_ext rewrite: Ò{{}}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Partial Functions: Òp ç x ﬂ yÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò(µ x1 : É; x2 : É ∑ (x1, x2) ç p ¥ x1 ç x ± 
	x2 ç y) ± (µ x' : É; y1, y2 : É | x' ç x ± y1 ç y ± y2 ç y ∑ 
	(x', y1) ç p ± (x', y2) ç p ¥ y1 = y2)Æ
   z_library strip:   N/C
    z_library_ext strip: Òp ç x ™ y ± (µ x' : É; y1, y2 : É | x' ç x ± 
	y1 ç y ± y2 ç y ∑ (x', y1) ç p ± (x', y2) ç p ¥ y1 = y2)Æ
ç Simp Partial Functions: Òp ç {} ﬂ yÆ
    z_library rewrite: Òp = {}Æ
    z_library_ext rewrite: Òµ x1 : É; x2 : É ∑ ≥ (x1, x2) ç pÆ
    z_library strip: Òp ç {{}}Æ
    z_library_ext strip: Òp ç {{}}Æ
Injections: Òx ˛ yÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Injections: Ò{} ˛ yÆ
    z_library rewrite: Ò{{}}Æ
    z_library_ext rewrite: Ò{{}}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Injections: Òp ç x ˛ yÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò((µ x1 : É; x2 : É ∑ (x1, x2) ç p ¥ x1 ç x 
	± x2 ç y) ± (µ x' : É; y1, y2 : É | x' ç x ± y1 ç y ± y2 ç y 
	∑ (x', y1) ç p ± (x', y2) ç p ¥ y1 = y2)) ± (µ x1, x2 : É | 
	(∂ y : É ∑ (x1, y) ç p) ± (∂ y : É ∑ (x2, y) ç p) ∑ p x1 = p x2 ¥ x1 = x2)Æ
   z_library strip:   N/C
    z_library_ext strip: Òp ç x ﬂ y ± (µ x1, x2 : É | x1 ç dom p ± 
	x2 ç dom p ∑ p x1 = p x2 ¥ x1 = x2)Æ
ç Simp Injections: Òp ç {} ˛ yÆ
    z_library rewrite: Òp = {}Æ
    z_library_ext rewrite: Òµ x1 : É; x2 : É ∑ ≥ (x1, x2) ç pÆ
    z_library strip: Òp ç {{}}Æ
    z_library_ext strip: Òp ç {{}}Æ
Surjections: Òx œ yÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Surjections: Ò{} œ yÆ
    z_library rewrite: Ò{x : É | x = {} ± y = {}}Æ
    z_library_ext rewrite: Ò{x : É | (µ x1 : É; x2 : É ∑ ≥ (x1, x2) ç x) ± 
	(µ x1 : É ∑ ≥ x1 ç y)}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Surjections: Òp ç x œ yÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò((µ x1 : É; x2 : É ∑ (x1, x2) ç p ¥ x1 ç x 
	± x2 ç y) ± (µ x' : É; y1, y2 : É | x' ç x ± y1 ç y ± y2 ç y 
	∑ (x', y1) ç p ± (x', y2) ç p ¥ y1 = y2)) ± (µ x1 : É ∑ (∂ x : É ∑ 
	(x, x1) ç p) § x1 ç y)Æ
   z_library strip:   N/C
    z_library_ext strip: Òp ç x ﬂ y ± ran p = yÆ
ç Simp Surjections: Òp ç {} œ yÆ
    z_library rewrite: Òy = {} ± {} = pÆ
    z_library_ext rewrite: Ò(µ x1 : É ∑ ≥ x1 ç y) ± (µ x1 : É; x2 : É ∑ ≥ (x1, x2) ç p)Æ
    z_library strip: Òp ç {x : É | x = {} ± y = {}}Æ
    z_library_ext strip: Òp ç {x : É | x = {} ± y = {}}Æ
Total Injections: Òx ‡ yÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Total Injections: Ò{} ‡ yÆ
    z_library rewrite: Ò{{}}Æ
    z_library_ext rewrite: Ò{{}}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Total Injections: Òp ç x ‡ yÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò(((µ x1 : É; x2 : É ∑ (x1, x2) ç p ¥ x1 ç x 
	± x2 ç y) ± (µ x' : É; y1, y2 : É | x' ç x ± y1 ç y ± y2 ç y ∑ 
	(x', y1) ç p ± (x', y2) ç p ¥ y1 = y2)) ± (µ x1 : É ∑ (∂ y : É ∑ 
	(x1, y) ç p) § x1 ç x)) ± (µ x1, x2 : É | (∂ y : É ∑ (x1, y) ç p) ± 
	(∂ y : É ∑ (x2, y) ç p) ∑ p x1 = p x2 ¥ x1 = x2)Æ
   z_library strip:   N/C
    z_library_ext strip: Òp ç x ≠ y ± (µ x1, x2 : É | x1 ç dom p ± 
	x2 ç dom p ∑ p x1 = p x2 ¥ x1 = x2)Æ
ç Simp Total Injections: Òp ç {} ‡ yÆ
    z_library rewrite: Òp = {}Æ
    z_library_ext rewrite: Òµ x1 : É; x2 : É ∑ ≥ (x1, x2) ç pÆ
    z_library strip: Òp ç {{}}Æ
    z_library_ext strip: Òp ç {{}}Æ
Total Surjections: Òx Ô yÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Total Surjections: Ò{} Ô yÆ
    z_library rewrite: Ò{x : É | x = {} ± y = {}}Æ
    z_library_ext rewrite: Ò{x : É | (µ x1 : É; x2 : É ∑ ≥ (x1, x2) ç x) ± 
	(µ x1 : É ∑ ≥ x1 ç y)}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Total Surjections: Òp ç x Ô yÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò(((µ x1 : É; x2 : É ∑ (x1, x2) ç p ¥ 
	x1 ç x ± x2 ç y) ± (µ x' : É; y1, y2 : É | x' ç x ± y1 ç y ± 
	y2 ç y ∑ (x', y1) ç p ± (x', y2) ç p ¥ y1 = y2)) ± (µ x1 : É ∑ 
	(∂ y : É ∑ (x1, y) ç p) § x1 ç x)) ± (µ x1 : É ∑ (∂ x : É ∑ (x, x1) ç p) 
	§ x1 ç y)Æ
   z_library strip:   N/C
    z_library_ext strip: Òp ç x ≠ y ± ran p = yÆ
ç Total Simp Surjections: Òp ç {} Ô yÆ
    z_library rewrite: Òy = {} ± {} = pÆ
    z_library_ext rewrite: Ò(µ x1 : É ∑ ≥ x1 ç y) ± (µ x1 : É; x2 : É ∑ ≥ (x1, x2) ç p)Æ
    z_library strip: Òp ç {x : É | x = {} ± y = {}}Æ
    z_library_ext strip: Òp ç {x : É | x = {} ± y = {}}Æ
Bijections: Òx è yÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Bijections: Ò{} è yÆ
    z_library rewrite: Ò{x : É | x = {} ± y = {}}Æ
    z_library_ext rewrite: Ò{x : É | (µ x1 : É; x2 : É ∑ ≥ (x1, x2) ç x) ± 
	(µ x1 : É ∑ ≥ x1 ç y)}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Bijections: Òp ç x è yÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò(((µ x1 : É; x2 : É ∑ (x1, x2) ç p ¥ 
	x1 ç x ± x2 ç y) ± (µ x' : É; y1, y2 : É | x' ç x ± y1 ç y ± 
	y2 ç y ∑ (x', y1) ç p ± (x', y2) ç p ¥ y1 = y2)) ± (µ x1 : É ∑ 
	(∂ y : É ∑ (x1, y) ç p) § x1 ç x)) ± (µ x1 : É ∑ (∂ x : É ∑ 
	(x, x1) ç p) § x1 ç y) ± (µ x1, x2 : É | (∂ y : É ∑ (x1, y) ç p) ± 
	(∂ y : É ∑ (x2, y) ç p) ∑ p x1 = p x2 ¥ x1 = x2)Æ
   z_library strip:   N/C
    z_library_ext strip: Òp ç x ≠ y ± ran p = y ± (µ x1, x2 : É | x1 ç dom p 
	± x2 ç dom p ∑ p x1 = p x2 ¥ x1 = x2)Æ
ç Simp Bijections: Òp ç {} è yÆ
    z_library rewrite: Òy = {} ± {} = pÆ
    z_library_ext rewrite: Ò(µ x1 : É ∑ ≥ x1 ç y) ± (µ x1 : É; x2 : É ∑ ≥ (x1, x2) ç p)Æ
    z_library strip: Òp ç {x : É | x = {} ± y = {}}Æ
    z_library_ext strip: Òp ç {x : É | x = {} ± y = {}}Æ
Total Functions: Òx ≠ yÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Total Functions: Ò{} ≠ yÆ
    z_library rewrite: Ò{{}}Æ
    z_library_ext rewrite: Ò{{}}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Total Functions: Òp ç x ≠ yÆ
   z_library rewrite:   N/C
    z_library_ext rewrite: Ò((µ x1 : É; x2 : É ∑ (x1, x2) ç p ¥ 
	x1 ç x ± x2 ç y) ± (µ x' : É; y1, y2 : É | x' ç x ± y1 ç y ± 
	y2 ç y ∑ (x', y1) ç p ± (x', y2) ç p ¥ y1 = y2)) ± (µ x1 : É ∑ 
	(∂ y : É ∑ (x1, y) ç p) § x1 ç x)Æ
   z_library strip:   N/C
    z_library_ext strip: Òp ç x ﬂ y ± dom p = xÆ
ç Simp Total Functions: Òp ç {} ≠ yÆ
    z_library rewrite: Òp = {}Æ
    z_library_ext rewrite: Òµ x1 : É; x2 : É ∑ ≥ (x1, x2) ç pÆ
    z_library strip: Òp ç {{}}Æ
    z_library_ext strip: Òp ç {{}}Æ
Ó: ÒÓÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Ó: Òp ç ÓÆ
    z_library rewrite: Ò0 º pÆ
    z_library_ext rewrite: Ò0 º pÆ
    z_library strip: Ò0 º pÆ
    z_library_ext strip: Ò0 º pÆ
ç Ó 1: Ò1 ç ÓÆ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: Ò0 º 1Æ
    z_library_ext strip: Ò0 º 1Æ
˙: Ò˙Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
˙ struct: Ò˙ ∏ ˙Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç ˙: Òp ç ˙Æ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: ÒtrueÆ
    z_library_ext strip: ÒtrueÆ
ç ˙ 1: Ò1 ç ˙Æ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: ÒtrueÆ
    z_library_ext strip: ÒtrueÆ
Addition: Òa + bÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Addition: Òa + 0Æ
    z_library rewrite: ÒaÆ
    z_library_ext rewrite: ÒaÆ
    z_library strip:   N/A
    z_library_ext strip:   N/A
Literal Addition: Ò2 + 3Æ
    z_library rewrite: Ò5Æ
    z_library_ext rewrite: Ò5Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
Negation: Òa - bÆ
    z_library rewrite: Òa + ~ bÆ
    z_library_ext rewrite: Òa + ~ bÆ
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Negation: Òa - 0Æ
    z_library rewrite: ÒaÆ
    z_library_ext rewrite: ÒaÆ
    z_library strip:   N/A
    z_library_ext strip:   N/A
Literal Negation: Ò2 - 3Æ
    z_library rewrite: Ò~ 1Æ
    z_library_ext rewrite: Ò~ 1Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
Multiplication: Òa * bÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Multiplication: Òa * 0Æ
    z_library rewrite: Ò0Æ
    z_library_ext rewrite: Ò0Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
Literal Multiplication: Ò2 * 3Æ
    z_library rewrite: Ò6Æ
    z_library_ext rewrite: Ò6Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
Integer divide: Òa div bÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Integer divide: Òa div 1Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Literal Integer divide: Ò5 div 3Æ
    z_library rewrite: Ò1Æ
    z_library_ext rewrite: Ò1Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
Modulus: Òa mod bÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Modulus: Òa mod 1Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Literal Modulus: Ò2 mod 3Æ
    z_library rewrite: Ò2Æ
    z_library_ext rewrite: Ò2Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
Unit negation: Ò~ aÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Unit negation: Ò~ 0Æ
    z_library rewrite: Ò0Æ
    z_library_ext rewrite: Ò0Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
Literal Unit negation: Ò~ 3Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Less: Òa < bÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
   z_library strip:   N/C
   z_library_ext strip:   N/C
Simp Less: Òa < aÆ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: ÒfalseÆ
    z_library strip: ÒfalseÆ
    z_library_ext strip: ÒfalseÆ
Literal Less: Ò2 < 3Æ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: ÒtrueÆ
    z_library_ext strip: ÒtrueÆ
Less or equal: Òa º bÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
   z_library strip:   N/C
   z_library_ext strip:   N/C
Simp Less or equal: Òa º aÆ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: ÒtrueÆ
    z_library_ext strip: ÒtrueÆ
Literal Less or equal: Ò2 º 3Æ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: ÒtrueÆ
    z_library_ext strip: ÒtrueÆ
Greater: Òa > bÆ
    z_library rewrite: Òb < aÆ
    z_library_ext rewrite: Òb < aÆ
    z_library strip: Òb < aÆ
    z_library_ext strip: Òb < aÆ
Simp Greater: Òa > aÆ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: ÒfalseÆ
    z_library strip: Òa < aÆ
    z_library_ext strip: Òa < aÆ
Literal Greater: Ò2 > 3Æ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: ÒfalseÆ
    z_library strip: Ò3 < 2Æ
    z_library_ext strip: Ò3 < 2Æ
Greater or equal: Òa æ bÆ
    z_library rewrite: Òb º aÆ
    z_library_ext rewrite: Òb º aÆ
    z_library strip: Òb º aÆ
    z_library_ext strip: Òb º aÆ
Simp Greater or equal: Òa æ aÆ
    z_library rewrite: ÒtrueÆ
    z_library_ext rewrite: ÒtrueÆ
    z_library strip: Òa º aÆ
    z_library_ext strip: Òa º aÆ
Literal Greater or equal: Ò2 æ 3Æ
    z_library rewrite: ÒfalseÆ
    z_library_ext rewrite: ÒfalseÆ
    z_library strip: Ò3 º 2Æ
    z_library_ext strip: Ò3 º 2Æ
Non-empty Ó: ÒÓâ1Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Non-empty Ó: Òx ç Óâ1Æ
    z_library rewrite: Ò0 < xÆ
    z_library_ext rewrite: Ò0 < xÆ
    z_library strip: Ò0 < xÆ
    z_library_ext strip: Ò0 < xÆ
succ: Òsucc 3Æ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Iterate: Òx Á 2 ÍÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Interval: Òa .. bÆ
   z_library rewrite:   N/C
   z_library_ext rewrite:   N/C
    z_library strip:   N/A
    z_library_ext strip:   N/A
Simp Interval: Ò1 .. 1Æ
    z_library rewrite: Ò{1}Æ
    z_library_ext rewrite: Ò{1}Æ
    z_library strip:   N/A
    z_library_ext strip:   N/A
ç Interval: Òx ç a .. bÆ
    z_library rewrite: Òa º x ± x º bÆ
    z_library_ext rewrite: Òa º x ± x º bÆ
    z_library strip: Òa º x ± x º bÆ
    z_library_ext strip: Òa º x ± x º bÆ
ç Simp Interval: Òx ç 1 .. 1Æ
    z_library rewrite: Òx = 1Æ
    z_library_ext rewrite: Òx = 1Æ
    z_library strip: Òx = 1Æ
    z_library_ext strip: Òx = 1Æ
*** Z System Version 1.61  *** 
=TEX
=THSML
summarize_td_results ();
val z_library_success = theory_check_success ();
=TEX
=DOC
(* Proof Context: €z_library1› *)
=DESCRIBE
A mild complete proof context for handling the manipulation of Z language and library expressions and predicates.
Its contents are chosen to be ``uncontroversial''.
That is, any effect is considered to be ``almost always the correct thing''.

It differs from $z\_library$ only in using $z\_numbers1$.

It consists of the merge of the proof contexts:
=GFT
"z_sets_alg", - simplification of set contructs, and Z language
"'z_rel_alg", - simplification of relational contructs
"'z_fun_alg", - simplification of function contructs
"'z_numbers1" - simplification of numeric contructs
=TEX
\paragraph{Usage Notes}
It requires theory $z\-\_bags$.

It is not intended to be mixed with HOL proof contexts
or ``z$\_$library$\_$ext'', which offers an aggressive
approach.
=ENDDOC
=DOC
(* Proof Context: €z_library1_ext› *)
=DESCRIBE
A agressive complete proof context for handling the manipulation of Z language and library expressions and predicates.
Its purpose is to strip or rewrite its input into the
Z predicate calculus.

It differs from $z\_library$ only in using $z\_numbers1$.

It consists of the merge of the proof contexts:
=GFT
"z_fun_ext", - extensional reasoning about functions (and
	realtions and sets)
"'z_numbers1" - simplification of numeric contructs
=TEX
\paragraph{Usage Notes}
It requires theory $z\-\_bags$.

It is not intended to be mixed with HOL proof contexts
or ``z$\_$library$\_$ext'', which offers an aggressive
approach.
=ENDDOC

\subsection{End of Structure}
=SML
end (* end of Signature ZLibrary *);
=TEX

\section{EPILOGUE}
=SML
reset_flag ("z_type_check_only");
reset_flag ("z_use_axioms");
=TEX
\section{TEST POLICY}
The module tests for this module are to follow the guidelines
laid down in the quality plan~\cite{DS/FMU/IED/PLN008}.

\twocolumn[\section{INDEX}]
\small
\printindex

\end{document}


=IGN
delete_const ¨$"z'_ ¿ _"Æ;

 ù[X]úúúúúúúúúúúúúúúú
 ‹ _ €¿› _ :  X ∏  X ≠  X
 ˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
 ‹µ x  :  X ∑ x ¿ x = X
 à¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸

dest_Zapp Ò x ¿ x Æ;
dest_app Ò x ¿ x Æ;

