=IGN
********************************************************************************
usr011.doc: this file is part of the PPZed system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
% usr011.doc   %Z% $Date: 2002/10/17 16:26:32 $ $Revision: 1.18 $ $RCSfile: usr011.doc,v $
=IGNORE
           % U s e f u l C o m m a n d s

cp  ~ied/rel001/latest/sun3hol.db example.db; chmod +w example.db

% the style file USR.sty is held in usr024.doc and may be extracted as follows:

docsml usr024.doc ; mv usr024.sml USR.sty

% the make file is held in wrk027.doc and is called usr006.mkf

hol -d ~ied/rel001/latest/zed
rm -f *.aux *.dvi *.idx *.log *.sid

make -f usr006.mkf usr011.dvi1

doctex usr011
texdvi usr011
texdvi usr011
bibtex usr011
texdvi usr011
dvipage usr011
doctex usr011 usr011A usr011X01 usr011X02 usr011X03; texdvi usr011
=TEX
% COPYRIGHT (c) Lemma 1 Ltd.

\documentstyle[hol1,11pt,fleqn,USR]{book}

\def\SCCSversion{$Revision: 1.18 $%
}
\def\SCCSdate{\FormatDate{$Date: 2002/10/17 16:26:32 $
}}

\USRmanual{Z Tutorial}
\USRref{USR011}
\USRisbns{151427728X}
\USRisbnl{978-1514277287}

\raggedbottom
\ftlinepenalty=9999
\makeindex

\begin{document}

\makeUSRfrontpage

\long\def\suppress#1{}

\long\def\ignore#1{}

% the following inhibits the interpretation of underscore for subscripting.
\underscoreoff
%\catcode`\_=\active
%\def\_{\kern.06em\vbox{\hrule height.1ex width.3em}\hskip0.1em\relax}

\ftlmargin=0.4in
\ftrmargin=0.4in

\chapter*{CONTENTS}

\tableofcontents

\pagebreak

\setcounter{chapter}{-1}

\chapter{ABOUT THIS PUBLICATION} \label{intro}
\section{Purpose}

This document is a tutorial on the use of \Product\ for formal reasoning about specifications in the Z language.

The objectives of this tutorial are:

\begin{itemize}
\item
to describe the basic principles and concepts underlying support for Z in {\Product}
\item
to enable the student to write simple specifications and undertake elementary proofs in Z using {\Product}
\item
to enable the student to make effective use of the reference documentation
\end{itemize}

\section{Readership}

This document is intended to be among the first to be read by new users of {\Product} wishing to use the specification language Z.

\section{Related Publications}

A bibliography is given at the end of this document.  Publications relating specifically to {\Product} include:

\begin{enumerate}
\item {\em \ {\TUTORIAL}};
\item {\em \ {\HTUTORIAL}};
\item {\em \ {\DESCRIPTION}};
\item {\em \ {\REFERENCE}};
\item {\em \ {\TYPESETTING}}.
\end{enumerate}

\section{Area Covered}

This tutorial is an introductory course on proof in Z using {\Product} which explains how \Product\ may be used for checking specifications and conducting proofs in Z.
After working through  this tutorial, the reader should be capable of using {\Product} with Z for simple tasks, and should be able to make effective use of the {\Product} documentation where necessary for approaching more difficult problems.

This tutorial supplements the {\TUTORIAL} and the {\HTUTORIAL} with material relating to the Z language.
The tutorial should enable users of \Product\ to become familiar with the following subjects:

\begin{enumerate}
\item
The dialect of Z supported by the \Product\ system (which we call \ProductZ{}) and its manipulation via the metalanguage.
\item
Forward proof and derived rules of inference for Z.
\item
Goal directed proof, and tactics and tacticals for Z.
\end{enumerate}

\section{Prerequisites}

The tutorial is not intended as an introduction to formal methods or to the language Z.

We assume a working knowledge of:

\begin{itemize}
\item
Z as a specification language.

\item
Use of \Product{} as used for specification and proof in HOL.

Ideally a reader who has not attended a course should read {\TUTORIAL} and work through the exercises in {\HTUTORIAL} before beginning this tutorial.

\end{itemize}


\section{How To Use This Tutorial}

It is intended that this document will allow {\Product} users who have not attended the {\Product} Z course to work through the course material independently.

The best way to learn about {\Product} is by doing things with it.

The two kinds of things which you can do while working through these tutorial notes are:

\begin{itemize}
\item
Do the set exercises.

To make it easier to do the exercises the installation procedure for {\Product} results in the establishment of a {\Product} database called `\verb!example_zed!', which contains the results of executing all of this tutorial document except the material in Chapter \ref{Solutions} where the solutions to the exercises may be found.
To do the exercises the reader should attempt to set up his own version of the solutions document (`\verb!usr011S.doc!') by working interactively in a {\Product} session using a copy of database `\verb!example_zed!'.

This is best done using a writeable copy of the database so that you can save the database after completing some of the exercises and then resume from that point later.
This can be done as follows:

\begin{verbatim}
  cp $PPHOME/db/example_zed.polydb .
  chmod +w example_zed.polydb
\end{verbatim}
Here, $\$PPHOME$ is an environment variable which should be set up to be the pathname of the directory in which {\Product} has been installed.

If you wish to use the X interface for {\Product}, {\tt xpp}, you can now
start your {\Product} session by starting X if necessary and then giving
the UNIX command:

\begin{verbatim}
  xpp -d example_zed
\end{verbatim}


\item
Replay the illustrative material.

This is best done using the source of the tutorial OHP transparencies, \verb!usr023_slides.doc!.
It can be done running on database \verb!example_zed!, though you will find that some of the material will be rejected because definitions have already been made in this database.
Alternatively you can work from a clean database (but then you may find problems if you miss out any of the material).
E.g., to work on the existing database using {\tt xpp}, you might use the command:

\begin{verbatim}
  xpp -f $PPHOME/doc/usr023_slides.doc -d example_zed
\end{verbatim}



\end{itemize}

Source documents are supplied for the exercises (Chapter \ref{Exercises} in file {\tt usr011X.doc}) and solutions (Chapter \ref{Solutions} in file {\tt usr011S.doc}).

It is best to build up your own document containing your solutions to the exercises and any experiments you might wish to undertake.
{\Product} does not keep a record of what you type into it, and so if you want to do it again you will need to keep a copy of your script.

\section{Acknowledgements}

ICL gratefully acknowledges its debt to the many researchers (both academic and industrial) who have provided intellectual capital on which ICL has drawn in the development of \Product.

We are particularly indebted to Mike Gordon of The University of Cambridge, for his leading role in some of the research on which the development of \Product\ has built, and for his positive attitude towards industrial exploitation of his work.

The \Product\ system is a proof tool for Higher Order Logic which builds upon ideas arising from research carried out at the Universities of Cambridge and Edinburgh, and elsewhere.
In particular the logic supported by the system is (at an abstract level) identical to that implemented in the Cambridge HOL system \cite{gordon93}, and the paradigm adopted for implementation of proof support for the language follows that adopted by Cambridge HOL, originating with the LCF system developed at Edinburgh \cite{gordon79}.
The functional language `Standard ML' used both for the implementation and as an interactive metalanguage for proof development, originates in work at Edinburgh, and has been developed to its present state by an international group of academic and industrial researchers.
The implementation of Standard ML on which \Product\ is based was itself originally implemented by David Matthews at the University of Cambridge, and is now commercially marketed by Abstract Hardware Limited.

The \Product{} system also supports specification and proof in the Z language, developed at the University of Oxford.
We are therefore also indebted to the research at Oxford (and elsewhere) which has contributed to the development of the Z language.

\pagebreak
\chapter{INTRODUCTION TO ProofPower-Z}

\section{Using ProofPower for Z}

\subsection{Setting Up}

A \Product{} system issued with the \Product-Z{} option will be provided with more than one database, not all of which will contain the Z support facilities.
These include a database called `zed' (full name `zed.polydb') will be available supporting the \Product-Z{} option, and a database called `example_zed' which contains the results of executing the formal material in Chapters 1-\ref{Exercises} of this tutorial.
This includes Chapter \ref{Exercises} containing the exercises but not Chapter \ref{Solutions} which contains the solutions to the exercises.

For undertaking application work with {\Product} it is first necessary to set up a new database as a child of the issued database `zed'.

This is done using `pp_make_database' as follows:

\begin{verbatim}
  pp_make_database -p zed databasename
\end{verbatim}

The environment variable \$PPHOME should be set to the directory in which {\Product} is installed, and the database whose filename is {\tt zed.polydb} will then be replicated in the local directory under the name {\tt databasename.polydb}.

{\Product} can then be invoked by the command:

\begin{verbatim}
  pp -d databasename
\end{verbatim}

Where {\it databasename} is the name given by the user to the database created in the previous step.

For the purpose of undertaking the exercises in this tutorial a special database (called `example_zed') is constructed during the {\Product} installation procedure containing material which has been pre-loaded from this document.
The user should make his own copy of this database with write access permission and use this database for doing the tutorial exercises.

Apart from selecting or setting up a database including the Z support facilities, entering and leaving \Product{} for work in Z is the same as for work in HOL.

\subsection{Formal Material in this Document}

In this document the behaviour of {\Product} is frequently illustrated by showing how the system responds to various inputs.
In these illustrations a line input to {\Product} is shown by a vertical line on the left, with `SML' at the head of the line, thus:

\vspace*{0.25in}

=SML

=TEX

`SML' is an acronym for {\it standard ML}, the `meta-language' in which the user of {\Product} communicates with the system.

The output from {\Product} usually displayed on the console in response to such an input will be marked by a vertical line on the left, thus:

\vspace*{0.25in}

=GFT ProofPower output

=TEX

Sometimes we omit parts of the output, and supply `...' to mark the point of such an omission.

\subsection{Setting the Context}

A \Product{} database supporting Z will also support HOL.
Though the system does support mixed language working, i.e. working at the same time with both of these languages, it is usual to work normally with a single language.
To do this smoothly the context needs to be set up correctly for that language.

The main aspect of context which is relevant is the current {\it theory}.
Associated with each theory is a language code, and the language code of the current theory influences the behaviour of the system.

The best place in the theory hierarchy to do work in Z is in a descendant of the theories which provide the Z ToolKit.
The theory $z_library$ should therefore be a parent of any theories which the user creates for work in Z.

=SML
open_theory "z_library";
new_theory "usr011";
=TEX

Theories inherit by default the language of their parent, so any theory created while $z_library$ is the current theory will have Z as its language.

A second important aspect of context is the $proof\ context$.
Many of the facilities provided by \Product{} work with either HOL or Z by access to information in the current proof context which may be set by a call to $set_pc$.
A proof context should therefore be chosen which supports Z.
Suitable candidates are $z_language$, which incorporates a knowledge of the Z language but not of the Z ToolKit and $z_library$, which includes knowledge of both.

=SML
set_pc "z_library";
=TEX

A further element of context of which the user should be aware is the current subgoal, when the subgoal package has been invoked.
The subgoal package keeps a record, known as the current `typing context', of the types of the variables which occur freely in the current subgoal.
This context is referred to when type-checking terms entered through the HOL or Z parsers.
If a subgoal relating to an incomplete proof is left on the goal stack, then this may cause terms entered into the system to fail to type-check if they may use of variables with types which disagree with the usage of the same variables in the subgoal.

To clear the goal stack the command:
=SML
repeat drop_main_goal;
=TEX
may be used.

The command $print_status$ will display information about the current context, e.g.:
=SML
print_status();
=GFT ProofPower output
Current theory name: usr011;
Current proof context name(s): [z_library];
The subgoal package is not in use;
There is no current goal.
val it = () : unit
=TEX

\chapter{THE Z LANGUAGE IN ProofPower}\label{ZLanguage}
\input{usr011A.tex}

\chapter{THE Z PREDICATE CALCULUS}\label{ZPredicateCalculus}
\input{usr011B.tex}

\chapter{Z EXPRESSIONS}\label{ZExpressions}
\input{usr011C.tex}

\chapter{Z PARAGRAPHS}\label{ZParagraphs}
\input{usr011D.tex}

\chapter{THE Z TOOLKIT IN ProofPower}\label{ToolKit}
\input{usr011T.tex}

\chapter{EXERCISES}\label{Exercises}
\input{usr011X.tex}

\chapter{SOLUTIONS TO EXERCISES}\label{Solutions}
\input{usr011S.tex}

\chapter*{REFERENCES}
\addcontentsline{toc}{chapter}{REFERENCES}

\bibliographystyle{fmu}
\bibliography{fmu}

\twocolumn
\chapter*{INDEX}
\addcontentsline{toc}{chapter}{INDEX}
\small
\printindex
\end{document}
