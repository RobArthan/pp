% imp047.doc  %Z% $Date$ $Revision$ $RCSfile$

doctex imp047 ; texdvi imp047
bibtex imp047

=TEX
% imp047.doc  %Z% $Date$ $Revision$ $RCSfile$
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST Project}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Implementation for Z Types and Terms}  %% Mandatory field
\def\TPPheadtitle{Implementation for Z Types and Terms}
\TPPref{DS/FMU/IED/IMP047}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{G.T.Scullard & MAN05}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.B.Jones & Project Manager}
\TPPabstract{}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{center}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{center}
\pagebreak
\section{Document Control}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History} 
\begin{description}
\item [Issue 1.19 (\TPPdate{\FormatDate{92/03/03}})]
First draft version.

\item [Issue \SCCSversion (\TPPdate{\FormatDate{$Date$
}})]
	Restructure function $dest\_z\_term$ to meet the needs of the
	pretty printer.  This is done by adding function
	$basic\_dest\_z\_term$ to do the actual destruction or production
	of error message arguments, this function is used by
	$dest\_z\_term$ and by the pretty printer. Changed handling for naming of
	projection functions (including a change to the interface of
	dest\_z\_name).

\end{description}
%\subsection{Changes Forecast}
\newpage
\section{GENERAL}
\subsection{Scope}
This document contains the implementation of the constructor, discriminator and destructor functions corresponding to the primitive constructors of Z.
The detailed design of these is found in \cite{DS/FMU/IED/DTD047}.
\subsection{Introduction}
\subsubsection{Purpose and Background}
This document gives the implementation of the functions mentioned above.
Additional functions, which are used in other parts of the Z system, may also be included here for convenience.
\subsubsection{Dependencies}
The functions in this document are dependent on the Release 1 HOL System.
\subsubsection{Deficiencies}
\section{ERROR REPORTING}
For performance reasons, the arguments of the various constructors below are not checked for well-formedness or suitability and
it will therefore be possible, indeed easy, to construct terms which are not legal in our extended Z syntax.
(The constructors might be bypassed entirely and the HOL constructors
used to generate terms with the names of Z~constants.) Such terms must
be handled by the pretty printer~\cite{DS/FMU/IED/DTD031} in a way that allows them to
be read back by the HOL and Z parsers and generate a term with the same
meaning.
Of course, where the term construction fails due to some error detected in the underlying HOL or ML, it is intecepted and reported as helpfully as possible.
\section{STRUCTURE PREAMBLE}
=SML
structure €ZTypesAndTerms› : ZTypesAndTerms = struct
=TEX
We open the structure containing the support package (see \cite{DS/FMU/IED/IMP048}).
=SML
open ZTypesAndTermsSupport;
=TEX
\section{DERIVED HOL CONSTRUCTORS}
The functions defined here are an ad-hoc collection of constructors, destructors and discriminators which, at the time of writing, were not provided by the ICL HOL system.
If they are added in future, they will be removed from here.
=SML
fun	€list_mk_≠_type› ((tyl,ty):TYPE list * TYPE) :TYPE = fold mk_≠_type tyl ty;
=TEX
\section{AUXILIARY FUNCTIONS}
\subsection{Name Destruction}
We need the inverse of the name construction functions (defined in
\cite{DS/FMU/IED/DTD048}).  Given a name formed as a simple identifier
followed by a sequence of name lists with each name list in square
brackets function $dest\_z\_name$ returns the identifier name plus a
list of lists.  Thus a name like

=GFT
	"abc[de,fg,hi][jk,lm][no][p,r,s]"
=TEX

is split into the following pieces

=GFT
	("abc",
	[	["de", "fg", "hi"],
		["jk", "lm"],
		["no"],
		["p", "r", "s"]
	], Nil)
=TEX

Projections are of the form
=GFT
	"abc[de,fg,hi]jk"
=TEX

which is split into the following:

=GFT
	("abc",
	[	["de", "fg", "hi"]
	], Value "jk")
=TEX


Function $dest\_z\_name$ splits up well formed names by interpreting the
square brackets and commas, it complains about mal-formed names.

=SML
fun	€dest_z_name› (s:string) :string * string list list * string OPT = (
let
	exception bad_name;

	fun	addnam (nil:string list) (cl:string list)
			: string list = cl
	|	addnam n cl = (implode(rev n)) :: cl
	;

	fun	aux(nil, Value _, _) = raise bad_name
	|	aux(nil, Nil, pl) = (rev pl, Nil)

	|	aux("["::t (*=]=*), Value _, _) = raise bad_name
	|	aux("["::t (*=]=*), Nil, pl) = aux(t, Value(nil, nil), pl)

	|	aux(","::t, Nil, _) = raise bad_name
	|	aux(","::t, Value(cn, cl), pl) = aux(t, Value(nil, addnam cn cl), pl)

	|	aux((*=[=*) "]"::t, Nil, _) = raise bad_name
	|	aux((*=[=*) "]"::t, Value(cn, cl), pl) = aux(t, Nil, (rev(addnam cn cl)) :: pl)

	|	aux(l as(ch::t), Nil, pl) = (
			case get_id(l, nil)
			of (nil, nam) => (rev pl, Value(implode(rev nam)))
			| _ => raise bad_name
		)
	|	aux(ch::t, Value(cn, cl), pl) = aux(t, Value(ch::cn, cl), pl)
	

	and	get_id(nil, prev) = (nil, prev)
	|	get_id(l as ("["::_ (*=]=*)), prev) = (l, prev)
	|	get_id(","::t, _) = raise bad_name
	|	get_id((*=[=*) "]"::t, _) = raise bad_name
	|	get_id(ch::t, prev) = get_id(t, ch :: prev)
	;
in
	let
		val (tail, front) = get_id(explode s, nil);
		val (boxed_lists, projector) = aux(tail, Nil, nil);
	in
		(implode(rev front), boxed_lists, projector)
	end
	handle Fail _ => fail "dest_z_name" 47000 [fn () => s]
	| bad_name => fail "dest_z_name" 47000 [fn () => s]
end
);
=TEX

=IGN
fun	€dest_z_name› (s:string) :string * string list list = (
let
	exception bad_name;

	fun	addnam (nil:string list) (cl:string list)
			: string list = cl
	|	addnam n cl = (implode(rev n)) :: cl
	;

	fun	aux(nil, Value _, _) = raise bad_name
	|	aux(nil, Nil, pl) = rev pl

	|	aux("["::t (*=]=*), Value _, _) = raise bad_name
	|	aux("["::t (*=]=*), Nil, pl) = aux(t, Value(nil, nil), pl)

	|	aux(","::t, Nil, _) = raise bad_name
	|	aux(","::t, Value(cn, cl), pl) = aux(t, Value(nil, addnam cn cl), pl)

	|	aux((*=[=*) "]"::t, Nil, _) = raise bad_name
	|	aux((*=[=*) "]"::t, Value(cn, cl), pl) = aux(t, Nil, (rev(addnam cn cl)) :: pl)

	|	aux(ch::t, Nil, _) = raise bad_name
	|	aux(ch::t, Value(cn, cl), pl) = aux(t, Value(ch::cn, cl), pl)
	;

	fun	get_id(nil, prev) = (nil, prev)
	|	get_id(l as ("["::_ (*=]=*)), prev) = (l, prev)
	|	get_id(","::t, _) = raise bad_name
	|	get_id((*=[=*) "]"::t, _) = raise bad_name
	|	get_id(ch::t, prev) = get_id(t, ch :: prev)
	;
in
	let
		val (tail, front) = get_id(explode s, nil)
	in
		(implode(rev front), aux(tail, Nil, nil))
	end
	handle Fail _ => fail "dest_z_name" 47000 [fn () => s]
	| bad_name => fail "dest_z_name" 47000 [fn () => s]
end
);
=TEX
\section{Z TYPES}
The following sections describe the constructor, discriminator and destructor functions for each of the five Z type constructors.
\subsection{The Datatype $Z\_TYPE$}

The general mapping functions $mk\_z\_type$, $is\_z\_type$ and
$dest\_z\_type$, which are declared later in this document, use this
datatype.

=SML
datatype	€Z_TYPE› = 	€Zgiven_t› of string
		|		€Zvar_t› of string
		|		€Zpower_t› of TYPE
		|		€Ztuple_t› of TYPE list
		|		€Zschema_t› of (string * TYPE) list;
=TEX
\subsection{The General Destructor Function}
This function converts a HOL type to the appropriate form of the above datatype (providing, of course, that it represents a valid Z type).
=SML
fun	€dest_z_type› (ty:TYPE) :Z_TYPE =
	case dest_simple_type ty of
		Vartype s => (
			case explode s of
				("'"::t) => Zvar_t(implode t)
			|	_ => fail "" 0 []
		)
	|	Ctype("SET",[ty1]) => Zpower_t ty1
	|	Ctype(s,tyl) => (
			case (dest_z_name s,tyl) of
				(("Z'T",[[n]], Nil),tyl) => 
					if string_of_int(length tyl) = n
					then Ztuple_t tyl
					else fail "" 0 []
			|	(("Z'S",[cl], Nil),tyl) => 
					Zschema_t(combine cl tyl)
			|	(_,[]) => Zgiven_t s
			|	_ => fail "" 0 []
		)
	handle Fail _ => type_fail "dest_z_type" 47800 [ty];
=TEX
\subsection{The General Discriminator Function}
=SML
fun	€is_z_type› (t:TYPE) :bool =
	let	val x = dest_z_type t
	in
		true
	end
	handle Fail _ => false;
=TEX
\subsection{Given Sets}
=SML
fun	€mk_z_given_t› (s:string) :TYPE = mk_ctype(s,[]);

fun	€is_z_given_t› (ty :TYPE) :bool = (
	case dest_z_type ty of	
		Zgiven_t _ => true
	|	_ => false
	)
	handle Fail _ => false;

fun	€dest_z_given_t› (ty :TYPE) :string = (
	case dest_z_type ty of
		Zgiven_t s => s
	|	_ => fail "" 0 []
	)
	handle Fail _ => type_fail "dest_z_given_t" 47010 [ty];
=TEX
\subsection{Generic Variables}
=SML
fun	€mk_z_var_t› (s:string) :TYPE = mk_vartype("'" ^ s);

fun	€is_z_var_t› (ty :TYPE) :bool = (
	case dest_z_type ty of	
		Zvar_t _ => true
	|	_ => false
	)
	handle Fail _ => false;

fun	€dest_z_var_t› (ty :TYPE) :string = (
	case dest_z_type ty of
		Zvar_t s => s
	|	_ => fail "" 0 []
	)
	handle Fail _ => type_fail "dest_z_var_t" 47020 [ty];
=TEX
\subsection{Set Types}
=SML
fun	€mk_z_power_t› (ty:TYPE) :TYPE = mk_ctype("SET",[ty]);

fun	€is_z_power_t› (ty :TYPE) :bool = (
	case dest_z_type ty of	
		Zpower_t _ => true
	|	_ => false
	)
	handle Fail _ => false;

fun	€dest_z_power_t› (ty :TYPE) :TYPE = (
	case dest_z_type ty of
		Zpower_t t => t
	|	_ => fail "" 0 []
	)
	handle Fail _ => type_fail "dest_z_power_t" 47030 [ty];
=TEX
\subsection{Cartesian Product Types}
=SML
fun	€mk_z_tuple_t› (tyl:TYPE list) :TYPE = 
		tuple_type tyl;

fun	€is_z_tuple_t› (ty :TYPE) :bool = (
	case dest_z_type ty of	
		Ztuple_t _ => true
	|	_ => false
	)
	handle Fail _ => false;

fun	€dest_z_tuple_t› (ty :TYPE) :TYPE list = (
	case dest_z_type ty of
		Ztuple_t tyl => tyl
	|	_ => fail "" 0 []
	)
	handle Fail _ => type_fail "dest_z_tuple_t" 47040 [ty];
=TEX
\subsection{Binding Types}
=SML
fun	€mk_z_schema_t› (itym:(string * TYPE) list) :TYPE =
		bind_type itym;

fun	€is_z_schema_t› (ty :TYPE) :bool = (
	case dest_z_type ty of	
		Zschema_t _ => true
	|	_ => false
	)
	handle Fail _ => false;

fun	€dest_z_schema_t› (ty :TYPE) :(string * TYPE) list = (
	case dest_z_type ty of
		Zschema_t itym => itym
	|	_ => fail "" 0 []
	)
	handle Fail _ => type_fail "dest_z_schema_t" 47050 [ty];
=TEX
\subsection{The General Constructor Function}
This function uses the constructors defined above to convert a $Z\_TERM$ to the corresponding $TERM$.
=SML
fun	€mk_z_type›	(Zgiven_t(s:string) :Z_TYPE) :TYPE = mk_z_given_t s
|	mk_z_type	(Zvar_t(s:string)) = mk_z_var_t s
|	mk_z_type	(Zpower_t(ty:TYPE)) = mk_z_power_t ty
|	mk_z_type	(Ztuple_t(tyl:TYPE list)) = mk_z_tuple_t tyl
|	mk_z_type	(Zschema_t(itym:(string * TYPE)list)) = mk_z_schema_t itym;
=TEX
\section{Z TERMS}
The following describes the constructor, discriminator and destructor functions for Z terms.
\subsection{The Datatype Z_TERM}

The general mapping functions $mk\-\_Z_TERM$, $is\-\_Z_TERM$ and
$dest\-\_Z_TERM$, which are declared later in this document, use this
datatype.

=SML
datatype	€Z_TERM›
		=	 	€Zdec› of TERM list * TERM
		|		€Zdecsexp› of TERM * string
		|		€Zdecl› of TERM list
		|		€Zeq› of TERM * TERM
		|		€Zç› of TERM * TERM
		|		€Ztrue›
		|		€Zfalse›
		|		€Z≥› of TERM
		|		€Z±› of TERM * TERM
		|		€Z≤› of TERM * TERM
		|		€Z¥› of TERM * TERM
		|		€Z§› of TERM * TERM
		|		€Z∂› of TERM * TERM * TERM
		|		€Z∂â1› of TERM * TERM * TERM
		|		€Zµ› of TERM * TERM * TERM
		|		€Zpredsexp› of TERM * string
		|		€Zlvar› of string * TYPE * TERM list
		|		€Zgvar› of string * TYPE * TERM list
		|		€Zint› of string
		|		€Zß¢› of TYPE * TERM list
		|		€Zsetd› of TYPE * TERM list
		|		€Zseta› of TERM * TERM * TERM
		|		€Z› of TERM
		|		€Ztuple› of TERM list
		|		€Z∏› of TERM list
		|		€Z › of TERM * string
		|		€Zsel› of TERM * string
		|		€Zapp› of TERM * TERM
		|		€ZÃ› of TERM * TERM * TERM
		|		€ZÕ› of TERM * TERM * TERM
		|		€Zâs› of TERM * TERM
		|		€Zdecâs› of TERM * string
		|		€Zpreâs› of TERM
		|		€Z≥âs› of TERM
		|		€Z±âs› of TERM * TERM
		|		€Z≤âs› of TERM * TERM
		|		€Z¥âs› of TERM * TERM
		|		€Z§âs› of TERM * TERM
		|		€Z˘âs› of TERM * TERM
		|		€Zhideâs› of TERM * string list
		|		€Z∂âs› of TERM * TERM * TERM
		|		€Z∂â1âs› of TERM * TERM * TERM
		|		€Zµâs› of TERM * TERM * TERM
		|		€ZÑâs› of TERM
		|		€Zòâs› of TERM
		|		€Zªâs› of TERM * TERM
		;
=TEX

\subsection{Result of Basic Destructor Function}

This function converts a HOL term to the appropriate form of the
datatype $Z\_TERM$, or to an encoding of why it could not be converted.
The encoded failure value is intended for use by the pretty
printer~\cite{DS/FMU/IED/DTD031,DS/FMU/IED/DTD064}, it contains values
showing how (in some cases) the term might be HOL if it were modified
slightly.  The return value from the basic destructor function is
in type $BDZ$ (named for `Basic Destroy Z').

=SML
datatype €BDZ›
	=	€bdz_ok›	of Z_TERM
	|	€bdz_not_Z›	of int
	|	€bdz_fail›	of {
			€bdz_f_code›	: int,
			€bdz_f_compc›	: int,
			€bdz_f_argc›	: int
		}
	;
=TEX

Successful destruction returns $bdz\_ok$ with the Z term.  Value
$bdz\_fail$ is returned when the term is similar to a Z~term (i.e., it
has a known constructor but the wrong number of arguments).  In this
case the $bdz\_f\_compc$ and $bdz\_f\_argc$ fields tell how many component
lists and arguments (respectively) are allowed in a well formed
Z~term.  Value $bdz\_not\_Z$ is returned when the term is not
recognisable as a Z~term.  In cases where insufficient component lists
or arguments are given to a known constructor either $bdz\_fail$ or
$bdz\_not\_Z$ may be returned.

\subsection{Destructor Utilities}

=SML
fun €zdest_0_0›(nil, nil, _, v) = bdz_ok v
| zdest_0_0(_, _, e, _) = bdz_not_Z 47900
;

fun €zdest_1_gt0›(_, nil, e, _) = bdz_not_Z 47900
| zdest_1_gt0(_::_, a, _, v) = bdz_ok(v a)
| zdest_1_gt0(_, _, e, _) = bdz_not_Z 47900
;

fun €zdest_0_1›(nil, [x], _, v) = bdz_ok(v x)
| zdest_0_1 (_, _::_::_, e, _) =
	bdz_fail{bdz_f_code=e, bdz_f_compc=0, bdz_f_argc=1}
| zdest_0_1(_, _, e, _) = bdz_not_Z 47900
;

fun €zdest_0_2›(nil, [x, y], _, v) = bdz_ok(v(x,y))
| zdest_0_2 (_, _::_::_::_, e, _) =
	bdz_fail{bdz_f_code=e, bdz_f_compc=0, bdz_f_argc=2}
| zdest_0_2(_, _, e, _) = bdz_not_Z 47900
;

fun €zdest_1_1›([_], [x], _, v) = bdz_ok(v x)
| zdest_1_1 (_, _::_::_, e, _) =
	bdz_fail{bdz_f_code=e, bdz_f_compc=1, bdz_f_argc=1}
| zdest_1_1(_, _, e, _) = bdz_not_Z 47900
;

fun €zdest_2_2›([_, _], [x, y], _, v) = bdz_ok(v(x, y))
| zdest_2_2 (_, _::_::_::_, e, _) =
	bdz_fail{bdz_f_code=e, bdz_f_compc=2, bdz_f_argc=2}
| zdest_2_2(_, _, e, _) = bdz_not_Z 47900
;
=IGN
fun €zdest_gt0_0›(nil, nil, e, _) = bdz_not_Z 47900
| zdest_gt0_0(_, nil, _, v) = bdz_ok v
| zdest_gt0_0(_, _, e, _) = bdz_not_Z 47900
;
=TEX

=SML
fun €dest_val_tuple›(name:string, ty: TYPE, constr:string * TYPE * TERM list -> Z_TERM,
		arg_tm:TERM, e:int) : BDZ = (
	let
		val (arg_fn, args) = strip_app arg_tm;
		val (arg_name, arg_ty) = dest_const arg_fn;
	in
		case dest_z_name arg_name
		of ("Z'Mk_T", [_], Nil) =>
			bdz_ok(constr(name, snd(dest_≠_type ty), args))
		| _ =>
			bdz_fail{bdz_f_code=e,
				bdz_f_compc=0, bdz_f_argc=0}
	end
	handle Fail _ =>
		bdz_fail{bdz_f_code=e, bdz_f_compc=0, bdz_f_argc=0}
);
=TEX

=SML
fun	€dest_abstraction› (t:TERM) :TERM list =
		snd(strip_app(snd(strip_Ã t)))
	handle Fail _ => term_fail "dest_z_term" 47901 [t];
=TEX

=SML
fun	€dest_∂body› (t:TERM) :TERM list =
		snd(strip_app(snd(strip_∂ t)))
	handle Fail _ => term_fail "dest_z_term" 47901 [t];
=TEX

=SML
fun	€dest_µbody› (t:TERM) :TERM list =
		snd(strip_app(snd(strip_µ t)))
	handle Fail _ => term_fail "dest_z_term" 47901 [t];
=TEX

\subsection{The Basic Destructor Function}

Function $basic\_dest\_z\_term$ does the work of destroying a term to
yield its Z~structure.  The arguments are in the result of applying
$strip\_app$ to a term.  (This parameterisation is of benefit to the
pretty printer~\cite{DS/FMU/IED/DTD031}.)

The main part of this function is a large case clause which switches
depending on the name of the constant at the head of the stripped
application, the other cases are simple and dealt with in the
immedaitely following block of code.

=SML
fun €basic_dest_z_term› (hdterm:TERM, args:TERM list) : BDZ = (
	case dest_simple_term hdterm
	of App _ => bdz_not_Z 47900
	| SimpleÃ _ => bdz_not_Z 47900
	| Var (name, ty) => (
		case args
		of nil => bdz_ok(Zlvar(name, ty,[]))
		| [tm] => dest_val_tuple(name, ty, Zlvar, tm, 47090)
		| _ => bdz_fail{bdz_f_code=47090,
				bdz_f_compc=0, bdz_f_argc=1}
	)
	| Const (name, ty) => (
		let
			val (identifier, comp_list, projector) = dest_z_name name;
		in
			case (identifier, projector) of
			("Z'S", Value s) => (
				case args of
				[x] => bdz_ok(Zsel(x,s))
				| _ => bdz_fail{bdz_f_code=47180, bdz_f_compc=2,
								bdz_f_argc=1}
				)
			| (x, Nil) => (
				case identifier
=TEX


The $case$ clause started on the line above opens up the Z~term based
on the names of the constant.  The various options are catered for in
the following sections, the end of the function is in
section~\ref{EndOfFunctionBDZ}.

=TEX

\subsubsection{Declarations}
First we look for declarations, beginning with variables.
=SML
of "Z'dec" => (
	case (comp_list, args)
	of ([],[x]) => (
		bdz_ok(Zdec((dest_list ** Combinators.I)(dest_pair x)))
		handle Fail _ => bdz_not_Z 47900
	)
	| _ => bdz_fail{bdz_f_code=47910, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX
Then schema declarations.
=SML
| "Z'SchemaDec" => (
	case (comp_list, args)
	of ([],[x]) => (
		let	val (bind,sch) = dest_pair x;
			val btym = map dest_var (snd(strip_app bind));
			val stym = dest_z_schema_t(dest_z_power_t(type_of sch));
			val d = implode(
					(explode(fst(hd btym))) from 
					(length(explode(fst(hd stym)))));
		in
			bdz_ok(Zdecsexp(sch,d))
		end
		handle Fail _ => bdz_not_Z 47911
		)
	| _ => bdz_fail{bdz_f_code=47911, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX
And composite declarations.
Note that all declarations used in other constructs must be of this
form, even if only one of the above forms is used (it is even possible
to have an empty declaration under certain circumstances).
=SML
| "Z'Decl" => (
	case (comp_list, args)
	of ([],[x]) => (
		bdz_ok(Zdecl(dest_list x))
		handle Fail _ => bdz_not_Z 47912
	)
	| _ => bdz_fail{bdz_f_code=47912, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX
\subsubsection{Predicates}

The logical connectives, `true' and `false', map directly on to the
equivalent HOL constants.

=SML
| "T"	=> zdest_0_0(comp_list, args, 47900, Ztrue)
| "F"	=> zdest_0_0(comp_list, args, 47900, Zfalse)
=TEX

Equality and equivalence both use the HOL `$=$' constant, they are distinguished by the
types of their operands.  Equivalence has both arguments of type $BOOL$.

=IGN
| "="	=> zdest_0_2(comp_list, args, 47220, Zeq)
| "§"	=> zdest_0_2(comp_list, args, 47280, Z§)
=SML
| "="	=> (
	case (comp_list, args)
	of (nil,[x, y]) => (
		bdz_ok(	(if type_of x =: BOOL andalso type_of y =: BOOL
			then Z§
			else Zeq
			)(x,y)
		)
	)
	| (_, _::_::_::_) =>
		bdz_fail{bdz_f_code=47220, bdz_f_compc=0, bdz_f_argc=2}
	| _ => bdz_not_Z 47900
)
=TEX

=SML
| "ç"	=> zdest_0_2(comp_list, args, 47230, Zç)
| "≥"	=> zdest_0_1(comp_list, args, 47240, Z≥)
| "±"	=> zdest_0_2(comp_list, args, 47250, Z±)
| "≤"	=> zdest_0_2(comp_list, args, 47260, Z≤)
| "¥"	=> zdest_0_2(comp_list, args, 47270, Z¥)
=TEX
=SML
| "Z'∂" => (
	case (comp_list, args)
	of ([],[x]) => (
		case dest_∂body x
		of	[d,p,v] => bdz_ok(Z∂(d,p,v))
		|	_ => fail "" 0 []
		handle Fail _ => bdz_not_Z 47920
	)
	| _ => bdz_fail{bdz_f_code=47920, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX
=SML
| "Z'∂â1" => (
	case (comp_list, args)
	of ([_],[x]) => (
		case dest_abstraction x of
			[d,p,v] => bdz_ok(Z∂â1(d,p,v))
		|	_ => fail "" 0 []
		handle Fail _ => bdz_not_Z 47921
	)
	| _ => bdz_fail{bdz_f_code=47921, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX
=SML
| "Z'µ" => (
	case (comp_list, args)
	of ([],[x]) => (
		case dest_µbody x of
			[d,p,v] => bdz_ok(Zµ(d,p,v))
		|	_ => fail "" 0 []
		handle Fail _ => bdz_not_Z 47922
	)
	| _ => bdz_fail{bdz_f_code=47922, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX
=SML
| "Z'SchemaPred" => (
	case (comp_list, args)
	of ([],[x]) => (
		let	val (bind,sch) = dest_pair x;
			val btym = map dest_var (snd(strip_app bind));
			val stym = dest_z_schema_t(dest_z_power_t(type_of sch));
			val d = implode(
					(explode(fst(hd btym))) from 
					(length(explode(fst(hd stym)))));
		in
			bdz_ok(Zpredsexp(sch,d))
		end
		handle Fail _ => bdz_not_Z 47923
	)
	| _ => bdz_fail{bdz_f_code=47923, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX
\subsubsection{Terms}

We must postpone the handling of local and global variables until the
end of the case clause because they do not have an easily identifiable
constant part.

=SML
| "Z'int" => (
	case (comp_list, args)
	of ([],[tm]) => (
		bdz_ok(Zint(fst(dest_const tm)))
		handle Fail _ => bdz_not_Z 47105
	)
	| _ => bdz_fail{bdz_f_code=47105, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX
=SML
| "Z'ß¢" => (
	case (comp_list, args)
	of ([],[x]) => (
		case dest_ctype(type_of x) of
			("LIST",[t]) => bdz_ok(Zß¢(t,dest_list x))
		|	_ => fail "" 0 []
		handle Fail _ => bdz_not_Z 47110
	)
	| _ => bdz_fail{bdz_f_code=47110, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX
=SML
| "Z'Setd" => (
	case (comp_list, args)
	of ([],[x]) => (
		case dest_ctype(type_of x) of
			("LIST",[t]) => bdz_ok(Zsetd(t,dest_list x))
		|	_ => fail "" 0 []
		handle Fail _ => bdz_not_Z 47120
	)
	| _ => bdz_fail{bdz_f_code=47120, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX
=SML
| "Z'seta" => (
	case (comp_list, args)
	of ([_],[x]) => (
		case dest_abstraction x of
			[d,p,v] => bdz_ok(Zseta(d,p,v))
		|	_ => fail "" 0 []
		handle Fail _ => bdz_not_Z 47130
	)
	| _ => bdz_fail{bdz_f_code=47130, bdz_f_compc=1, bdz_f_argc=1}
)
=TEX
=SML
| "Z'"	=> zdest_0_1	(comp_list, args, 47140, Z)
| "Z'Mk_T"	=> zdest_1_gt0	(comp_list, args, 47150, Ztuple)
| "Z'∏"	=> zdest_1_gt0	(comp_list, args, 47160, Z∏)
=TEX
=SML
| "Z' " => (
	case (comp_list, args)
	of ([],[x]) => (
		let	val (bind,sch) = dest_pair x;
			val btym = map dest_var (snd(strip_app bind));
			val stym = dest_z_schema_t(dest_z_power_t(type_of sch));
			val d = implode(
					(explode(fst(hd btym))) from 
					(length(explode(fst(hd stym)))));
		in
			bdz_ok(Z (sch,d))
		end
		handle Fail _ => bdz_not_Z 47170
	)
	| _ => bdz_fail{bdz_f_code=47170, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX
=SML
| "Z'Mk_S" => (
	bdz_fail{bdz_f_code=47180, bdz_f_compc=2, bdz_f_argc=1}
)

=SML
| "Z'app"	=> zdest_0_2(comp_list, args, 47190, Zapp)
=IGN
| "Z'app" => (
	case (comp_list, args)
	of ([],[x]) => (
		bdz_ok(Zapp(dest_pair x))
		handle Fail _ => bdz_not_Z 47190
	)
	| _ => bdz_fail{bdz_f_code=47190, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX
=SML
| "Z'Ã" => (
	case (comp_list, args)
	of ([_],[x]) => (
		case dest_abstraction x of
			[d,p,t,v] => bdz_ok(ZÃ(d,p,v))
		|	_ => fail "" 0 []
		handle Fail _ => bdz_not_Z 47200
	)
	| _ => bdz_fail{bdz_f_code=47200, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX
=SML
| "Z'Õ" => (
	case (comp_list, args)
	of ([_],[x]) => (
		case dest_abstraction x of
			[d,p,v] => bdz_ok(ZÕ(d,p,v))
		|	_ => fail "" 0 []
		handle Fail _ => bdz_not_Z 47936
	)
	| _ => bdz_fail{bdz_f_code=47936, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX
\subsubsection{Schemas}
=SML
| "Z'âs" => (
	case (comp_list, args)
	of ([_],[x]) => (
		case dest_abstraction x of
			[d,p] => bdz_ok(Zâs(d,p))
		|	_ => fail "" 0 []
		handle Fail _ => bdz_not_Z 47940
	)
	| _ => bdz_fail{bdz_f_code=47940, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX
=SML
| "Z'decâs" => (
	case (comp_list, args)
	of ([_,[]],[x]) => bdz_ok(Zdecâs(x,""))
	| ([_,[s]],[x]) => bdz_ok(Zdecâs(x,s))
	| _ => bdz_fail{bdz_f_code=47340, bdz_f_compc=1, bdz_f_argc=1}
)
=TEX
=SML
| "Z'Preâs"	=> zdest_1_1(comp_list, args, 47350, Zpreâs)
| "Z'≥âs"	=> zdest_0_1(comp_list, args, 47360, Z≥âs)
| "Z'±âs"	=> zdest_2_2(comp_list, args, 47370, Z±âs)
| "Z'≤âs"	=> zdest_2_2(comp_list, args, 47380, Z≤âs)
| "Z'¥âs"	=> zdest_2_2(comp_list, args, 47390, Z¥âs)
| "Z'§âs"	=> zdest_2_2(comp_list, args, 47400, Z§âs)
| "Z'˘âs"	=> zdest_2_2(comp_list, args, 47410, Z˘âs)
=TEX
=SML
| "Z'Hideâs" => (
	case (comp_list, args)
	of ([_,sl],[x]) => bdz_ok(Zhideâs(x,sl))
	| _ => bdz_fail{bdz_f_code=47420, bdz_f_compc=2, bdz_f_argc=1}
)
=TEX
=SML
| "Z'∂âs" => (
	case (comp_list, args)
	of ([_,_],[x,y]) => (
		case dest_abstraction x of
			[d,p] => bdz_ok(Z∂âs(d,p,y))
		|	_ => fail "" 0 []
		handle Fail _ => bdz_not_Z 47941
	)
	| _ => bdz_fail{bdz_f_code=47941, bdz_f_compc=2, bdz_f_argc=2}
)
=TEX
=SML
| "Z'∂â1âs" => (
	case (comp_list, args)
	of ([_,_],[x,y]) => (
		case dest_abstraction x of
			[d,p] => bdz_ok(Z∂â1âs(d,p,y))
		|	_ => fail "" 0 []
		handle Fail _ => bdz_not_Z 47942
	)
	| _ => bdz_fail{bdz_f_code=47942, bdz_f_compc=2, bdz_f_argc=2}
)
=TEX
=SML
| "Z'µâs" => (
	case (comp_list, args)
	of ([_,_],[x,y]) => (
		case dest_abstraction x of
			[d,p] => bdz_ok(Zµâs(d,p,y))
		|	_ => fail "" 0 []
		handle Fail _ => bdz_not_Z 47943
	)
	| _ => bdz_fail{bdz_f_code=47943, bdz_f_compc=2, bdz_f_argc=2}
)
=TEX
=SML
| "Z'Ñâs"	=> zdest_1_1(comp_list, args, 47460, ZÑâs)
| "Z'òâs"	=> zdest_1_1(comp_list, args, 47470, Zòâs)
| "Z'ªâs"	=> zdest_2_2(comp_list, args, 47480, Zªâs)
=TEX
\subsubsection{Local and Global Variables}
=SML
| _ => (
	case (comp_list, args)
	of (nil, nil) => (
		(	case unbind_gvar_name name
			of n => bdz_ok(Zgvar(n, ty,[]))
		) handle Fail _ => bdz_not_Z 47100
		)
	| (nil, [tm]) => (
		(	case unbind_gvar_name name
			of n => dest_val_tuple(n, ty, Zgvar, tm, 47100)
		) handle Fail _ => bdz_not_Z 47100
		)
	| _ => bdz_fail{bdz_f_code=47100, bdz_f_compc=0, bdz_f_argc=1}
)
=TEX

\subsubsection{End of the Basic Destructor Function}
\label{EndOfFunctionBDZ}

=SML
		)
		| (_, Value _) => bdz_not_Z 47100
		end (* of let in case Const *)
	) (* end of case Const (name, ty) => ... *)
	(* end of case dest_simple_term hdterm ... *)
	handle _ => bdz_not_Z 47100 
) (* end of function basic_dest_z_term *);
=TEX

\subsection{The General Z Destructor Function}

Function $dest\_z\_term$ provides the normal interface for
destroying arbitrary Z~terms.  

=SML
fun	€dest_z_term› (t:TERM) :Z_TERM = (
let
	val bdz_ans = basic_dest_z_term (strip_app t);
	fun sh(s, v) = diag_string("dest_z_term: ans is " ^ s ^ " " ^ (string_of_int v));
in
	case bdz_ans
	of bdz_ok zt => zt
	| bdz_not_Z e => term_fail "dest_z_term" e [t]
	| bdz_fail{bdz_f_code=e, ...} => term_fail "dest_z_term" e [t]
end
);
=TEX

\subsection{The General Z Discriminator Function}
=SML
fun	€is_z_term› (t:TERM) :bool =
	let	val x = dest_z_term t
	in
		true
	end
	handle Fail _ => false;
=TEX
\section{Constructor, Destructor and Discriminator Functions}

\subsection{Declaration Destructors}
=SML
fun	€dest_z_dec› (t:TERM) :(TERM list * TERM) =
	case dest_z_term t of
		Zdec(tml,tm) => (tml,tm)
	|	_ => fail "" 0 []
	handle Fail _ => term_fail "dest_z_dec" 47061 [t];

fun	€dest_z_decsexp› (t:TERM) :TERM * string =
	case dest_z_term t of
		Zdecsexp(tm,s) => (tm,s)
	|	_ => fail "" 0 []
	handle Fail _ => term_fail "dest_z_decsexp" 47071 [t];

fun	€dest_z_decl› (t:TERM) :TERM list =
	case dest_z_term t of
		Zdecl tml => tml
	|	_ => fail "" 0 []
	handle Fail _ => term_fail "dest_z_decl" 47912 [t];
=TEX
The following function, which produces a type map from a declaration, will frequently be required below.
=SML
local
fun	f ([] :TERM list) :(string * TYPE)list = []
|	f (h::t) = (
		map dest_var (fst(dest_z_dec h))
		handle Fail _ =>
		let val (sch,d) = dest_z_decsexp h
		in
			map 	(fn(s,ty)=>(pack_ident(s,d),ty)) 
				(dest_z_schema_t(dest_z_power_t(type_of sch)))
		end) @ (f t);
in
fun	€dest_decl› (t:TERM) :(string * TYPE)list =
		f (dest_z_decl t)
	handle Fail _ => term_fail "dest_decl" 47912 [t]
end;
=TEX
\subsection{Declaration Discriminators}
=SML
fun	€is_z_dec› (t:TERM) :bool =
	case dest_z_term t of
		Zdec(tml,tm) => true
	|	_ => false
	handle Fail _ => false;

fun	€is_z_decsexp› (t:TERM) :bool =
	case dest_z_term t of
		Zdecsexp(tm,s) => true
	|	_ => false
	handle Fail _ => false;

fun	€is_z_decl› (t:TERM) :bool =
	case dest_z_term t of
		Zdecl tml => true
	|	_ => false
	handle Fail _ => false;
=TEX
\subsection{Predicate Destructors}
=SML
fun	€dest_z_eq› (t:TERM) :TERM * TERM = 
	case dest_z_term t of 
		Zeq(tm1,tm2) => (tm1,tm2) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_eq" 47220 [t];

fun	€dest_z_ç› (t:TERM) :TERM * TERM = 
	case dest_z_term t of 
		Zç(tm1,tm2) => (tm1,tm2) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_ç" 47230 [t];

fun	€dest_z_≥› (t:TERM) :TERM = 
	case dest_z_term t of 
		Z≥(tm1) => (tm1) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_≥" 47240 [t];

fun	€dest_z_±› (t:TERM) :TERM * TERM = 
	case dest_z_term t of 
		Z±(tm1,tm2) => (tm1,tm2) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_±" 47250 [t];

fun	€dest_z_≤› (t:TERM) :TERM * TERM = 
	case dest_z_term t of 
		Z≤(tm1,tm2) => (tm1,tm2) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_≤" 47260 [t];

fun	€dest_z_¥› (t:TERM) :TERM * TERM = 
	case dest_z_term t of 
		Z¥(tm1,tm2) => (tm1,tm2) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_¥" 47270 [t];

fun	€dest_z_§› (t:TERM) :TERM * TERM = 
	case dest_z_term t of 
		Z§(tm1,tm2) => (tm1,tm2) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_§" 47280 [t];

fun	€dest_z_∂› (t:TERM) :TERM * TERM * TERM = 
	case dest_z_term t of 
		Z∂(d,p,v) => (d,p,v) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_∂" 47290 [t];

fun	€dest_z_∂â1› (t:TERM) :TERM * TERM * TERM = 
	case dest_z_term t of 
		Z∂â1(d,p,v) => (d,p,v) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_∂â1" 47300 [t];

fun	€dest_z_µ› (t:TERM) :TERM * TERM * TERM = 
	case dest_z_term t of 
		Zµ(d,p,v) => (d,p,v) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_µ" 47310 [t];

fun	€dest_z_predsexp› (t:TERM) :TERM * string = 
	case dest_z_term t of 
		Zpredsexp(tm1,s) => (tm1,s) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_predsexp" 47320 [t];
=TEX
\subsection{Predicate Discriminators}
=SML
fun	€is_z_eq› (t:TERM) :bool = 
	case dest_z_term t of 
		Zeq(tm1,tm2) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_ç› (t:TERM) :bool = 
	case dest_z_term t of 
		Zç(tm1,tm2) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_true› (t:TERM) :bool = 
	case dest_z_term t of 
		Ztrue => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_false› (t:TERM) :bool = 
	case dest_z_term t of 
		Zfalse => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_≥› (t:TERM) :bool = 
	case dest_z_term t of 
		Z≥(tm1) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_±› (t:TERM) :bool = 
	case dest_z_term t of 
		Z±(tm1,tm2) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_≤› (t:TERM) :bool = 
	case dest_z_term t of 
		Z≤(tm1,tm2) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_¥› (t:TERM) :bool = 
	case dest_z_term t of 
		Z¥(tm1,tm2) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_§› (t:TERM) :bool = 
	case dest_z_term t of 
		Z§(tm1,tm2) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_∂› (t:TERM) :bool = 
	case dest_z_term t of 
		Z∂(d,p,v) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_∂â1› (t:TERM) :bool = 
	case dest_z_term t of 
		Z∂â1(d,p,v) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_µ› (t:TERM) :bool = 
	case dest_z_term t of 
		Zµ(d,p,v) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_predsexp› (t:TERM) :bool = 
	case dest_z_term t of 
		Zpredsexp(tm1,s) => true 
	|	_ => false 
	handle Fail _ => false;
=TEX
\subsection{Term Destructors}
=SML
fun	€dest_z_lvar› (t:TERM) :string * TYPE * TERM list = 
	case dest_z_term t of 
		Zlvar(s,ty,tml) => (s,ty,tml) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_lvar" 47090 [t];

fun	€dest_z_gvar› (t:TERM) :string * TYPE * TERM list = 
	case dest_z_term t of 
		Zgvar(s,ty,tml) => (s,ty,tml) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_gvar" 47100 [t];

fun	€dest_z_int› (t:TERM) :string = 
	case dest_z_term t of 
		Zint(s) => (s) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_int" 47105 [t];

fun	€dest_z_ß¢› (t:TERM) :TYPE * TERM list = 
	case dest_z_term t of 
		Zß¢(ty,tml) => (ty,tml) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_ß¢" 47110 [t];

fun	€dest_z_setd› (t:TERM) :TYPE * TERM list = 
	case dest_z_term t of 
		Zsetd(ty,tml) => (ty,tml) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_setd" 47120 [t];

fun	€dest_z_seta› (t:TERM) :TERM * TERM * TERM = 
	case dest_z_term t of 
		Zseta(d,p,v) => (d,p,v) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_seta" 47130 [t];

fun	€dest_z_› (t:TERM) :TERM = 
	case dest_z_term t of 
		Z(tm) => (tm) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_" 47140 [t];

fun	€dest_z_tuple› (t:TERM) :TERM list = 
	case dest_z_term t of 
		Ztuple(tml) => (tml) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_tuple" 47150 [t];

fun	€dest_z_∏› (t:TERM) :TERM list = 
	case dest_z_term t of 
		Z∏(tml) => (tml) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_∏" 47160 [t];

fun	€dest_z_ › (t:TERM) :TERM * string = 
	case dest_z_term t of 
		Z (tm,s) => (tm,s) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_ " 47170 [t];

fun	€dest_z_sel› (t:TERM) :TERM * string = 
	case dest_z_term t of 
		Zsel(tm,s) => (tm,s) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_sel" 47180 [t];

fun	€dest_z_app› (t:TERM) :TERM * TERM = 
	case dest_z_term t of 
		Zapp(f,a) => (f,a) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_app" 47190 [t];

fun	€dest_z_Ã› (t:TERM) :TERM * TERM * TERM = 
	case dest_z_term t of 
		ZÃ(d,p,v) => (d,p,v) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_Ã" 47200 [t];

fun	€dest_z_Õ› (t:TERM) :TERM * TERM * TERM = 
	case dest_z_term t of 
		ZÕ(d,p,v) => (d,p,v) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_Õ" 47210 [t];
=TEX
\subsection{Term Discriminators}
=SML
fun	€is_z_lvar› (t:TERM) :bool = 
	case dest_z_term t of 
		Zlvar(s,ty,tml) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_gvar› (t:TERM) :bool = 
	case dest_z_term t of 
		Zgvar(s,ty,tml) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_int› (t:TERM) :bool = 
	case dest_z_term t of 
		Zint(s) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_ß¢› (t:TERM) :bool = 
	case dest_z_term t of 
		Zß¢(tml) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_setd› (t:TERM) :bool = 
	case dest_z_term t of 
		Zsetd(tml) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_seta› (t:TERM) :bool = 
	case dest_z_term t of 
		Zseta(d,p,v) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_› (t:TERM) :bool = 
	case dest_z_term t of 
		Z(tm) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_tuple› (t:TERM) :bool = 
	case dest_z_term t of 
		Ztuple(tml) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_∏› (t:TERM) :bool = 
	case dest_z_term t of 
		Z∏(tml) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_ › (t:TERM) :bool = 
	case dest_z_term t of 
		Z (tm,s) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_sel› (t:TERM) :bool = 
	case dest_z_term t of 
		Zsel(tm,s) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_app› (t:TERM) :bool = 
	case dest_z_term t of 
		Zapp(f,a) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_Ã› (t:TERM) :bool = 
	case dest_z_term t of 
		ZÃ(d,p,v) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_Õ› (t:TERM) :bool = 
	case dest_z_term t of 
		ZÕ(d,p,v) => true 
	|	_ => false 
	handle Fail _ => false;
=TEX
\subsection{Destructors for the Schema Calculus}
=SML
fun	€dest_z_âs› (t:TERM) :TERM * TERM = 
	case dest_z_term t of 
		Zâs(d,p) => (d,p) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_âs" 47940 [t];

fun	€dest_z_decâs› (t:TERM) :TERM * string = 
	case dest_z_term t of 
		Zdecâs(tm,s) => (tm,s) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_decâs" 47340 [t];

fun	€dest_z_preâs› (t:TERM) :TERM = 
	case dest_z_term t of 
		Zpreâs(tm) => (tm) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_preâs" 47350 [t];

fun	€dest_z_≥âs› (t:TERM) :TERM = 
	case dest_z_term t of 
		Z≥âs(tm) => (tm) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_≥âs" 47360 [t];

fun	€dest_z_±âs› (t:TERM) :TERM * TERM = 
	case dest_z_term t of 
		Z±âs(tm1,tm2) => (tm1,tm2) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_±âs" 47370 [t];

fun	€dest_z_≤âs› (t:TERM) :TERM * TERM = 
	case dest_z_term t of 
		Z≤âs(tm1,tm2) => (tm1,tm2) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_≤âs" 47380 [t];

fun	€dest_z_¥âs› (t:TERM) :TERM * TERM = 
	case dest_z_term t of 
		Z¥âs(tm1,tm2) => (tm1,tm2) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_¥âs" 47390 [t];

fun	€dest_z_§âs› (t:TERM) :TERM * TERM = 
	case dest_z_term t of 
		Z§âs(tm1,tm2) => (tm1,tm2) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_§âs" 47400 [t];

fun	€dest_z_˘âs› (t:TERM) :TERM * TERM = 
	case dest_z_term t of 
		Z˘âs(tm1,tm2) => (tm1,tm2) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_˘âs" 47410 [t];

fun	€dest_z_hideâs› (t:TERM) :TERM * string list = 
	case dest_z_term t of 
		Zhideâs(tm,sl) => (tm,sl) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_hideâs" 47420 [t];

fun	€dest_z_∂âs› (t:TERM) :TERM * TERM * TERM = 
	case dest_z_term t of 
		Z∂âs(d,p,v) => (d,p,v) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_∂âs" 47430 [t];

fun	€dest_z_∂â1âs› (t:TERM) :TERM * TERM * TERM = 
	case dest_z_term t of 
		Z∂â1âs(d,p,v) => (d,p,v) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_∂â1âs" 47440 [t];

fun	€dest_z_µâs› (t:TERM) :TERM * TERM * TERM = 
	case dest_z_term t of 
		Zµâs(d,p,v) => (d,p,v) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_µâs" 47450 [t];

fun	€dest_z_Ñâs› (t:TERM) :TERM = 
	case dest_z_term t of 
		ZÑâs(tm) => (tm) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_Ñâs" 47460 [t];

fun	€dest_z_òâs› (t:TERM) :TERM = 
	case dest_z_term t of 
		Zòâs(tm) => (tm) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_òâs" 47470 [t];

fun	€dest_z_ªâs› (t:TERM) :TERM * TERM = 
	case dest_z_term t of 
		Zªâs(tm1,tm2) => (tm1,tm2) 
	|	_ => fail "" 0 [] 
	handle Fail _ => term_fail "dest_z_ªâs" 47480 [t];
=TEX
\subsection{Discriminators for the Schema Calculus}
=SML
fun	€is_z_âs› (t:TERM) :bool = 
	case dest_z_term t of 
		Zâs(d,p) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_decâs› (t:TERM) :bool = 
	case dest_z_term t of 
		Zdecâs(tm,s) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_preâs› (t:TERM) :bool = 
	case dest_z_term t of 
		Zpreâs(tm) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_≥âs› (t:TERM) :bool = 
	case dest_z_term t of 
		Z≥âs(tm) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_±âs› (t:TERM) :bool = 
	case dest_z_term t of 
		Z±âs(tm1,tm2) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_≤âs› (t:TERM) :bool = 
	case dest_z_term t of 
		Z≤âs(tm1,tm2) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_¥âs› (t:TERM) :bool = 
	case dest_z_term t of 
		Z¥âs(tm1,tm2) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_§âs› (t:TERM) :bool = 
	case dest_z_term t of 
		Z§âs(tm1,tm2) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_˘âs› (t:TERM) :bool = 
	case dest_z_term t of 
		Z˘âs(tm1,tm2) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_hideâs› (t:TERM) :bool = 
	case dest_z_term t of 
		Zhideâs(tm,sl) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_∂âs› (t:TERM) :bool = 
	case dest_z_term t of 
		Z∂âs(d,p,v) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_∂â1âs› (t:TERM) :bool = 
	case dest_z_term t of 
		Z∂â1âs(d,p,v) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_µâs› (t:TERM) :bool = 
	case dest_z_term t of 
		Zµâs(d,p,v) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_Ñâs› (t:TERM) :bool = 
	case dest_z_term t of 
		ZÑâs(tm) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_òâs› (t:TERM) :bool = 
	case dest_z_term t of 
		Zòâs(tm) => true 
	|	_ => false 
	handle Fail _ => false;

fun	€is_z_ªâs› (t:TERM) :bool = 
	case dest_z_term t of 
		Zªâs(tm1,tm2) => true 
	|	_ => false 
	handle Fail _ => false;
=TEX
\subsection{Binding Construction}
There are three constructors below which generate systematically decorated bindings from schemas: schema references as declarations, schema references as predicates and theta terms.
We therefore provide the following general function for doing this.
=SML
local open ZTypesAndTermsSupport in
fun	€mk_binding› ((sch,d):TERM * string) :TERM =
	let	val itym = dest_z_schema_t(dest_z_power_t(type_of sch));
		val itym' = map (fn(s,t) => (pack_ident(s,d),t)) itym;
		val bcons = bind_cterm itym;
		val argl = map mk_var (dest_z_schema_t(mk_z_schema_t itym'));
	in
		list_mk_app(bcons,argl)
	end
	handle Fail _ => term_fail "mk_binding" 47940 [sch];
end;
=TEX
\subsection{Declaration Constructors}
=SML
fun 	€mk_z_dec› ((varl,set):TERM list * TERM) :TERM =
	let	val sty = type_of set;
		val ety = dest_z_power_t sty;
		val vl = mk_list varl
			handle X => reraise X "mk_z_dec";
		val decty = mk_≠_type(mk_∏_type(type_of vl,sty),¨:BOOLÆ);
		val dec = mk_const("Z'dec",decty);
	in
		mk_app(dec,mk_pair(vl,set))
	end
	handle X => (divert X "mk_z_dec"
			"dest_z_power_t" 47060 [fn() => string_of_term set]

	);
=TEX
=SML
fun	€mk_z_decsexp› ((sch,d):TERM * string) :TERM = 
	let	val bind = mk_binding(sch,d);
		val bty = type_of bind;
		val sty = type_of sch;
		val cty = mk_≠_type(mk_∏_type(bty,sty),BOOL);
		val con = mk_const("Z'SchemaDec",cty);
	in
		mk_app(con,mk_pair(bind,sch))
	end;
=TEX
=SML
fun	€mk_z_decl› (tml:TERM list) :TERM =
	let	val lis = mk_list tml;
		val decl = mk_const("Z'Decl",mk_≠_type(type_of lis,BOOL));
	in
		mk_app(decl,lis)
	end
	handle X => pass_on X "mk_list" "mk_z_decl";
=TEX
\subsection{Predicate Constructors}
=SML
val	€mk_z_eq› :(TERM * TERM) -> TERM = mk_eq
	handle X => pass_on X "mk_eq" "mk_z_eq";
=TEX
=SML
fun	€mk_z_ç› ((tm1,tm2):TERM * TERM) :TERM = 
	let	val ty = list_mk_≠_type([type_of tm1, mk_z_power_t (type_of tm1)],BOOL);
	in
		list_mk_app(mk_const("ç",ty),[tm1,tm2])
	end
	handle X => pass_on X "mk_app" "mk_z_ç";
=TEX
True and False and the logical connectives in Z map directly into the corresponding HOL constants.
=SML
val	€mk_z_true› :TERM = mk_const("T",BOOL);

val	€mk_z_false› :TERM = mk_const("F",BOOL);

val	€mk_z_≥› :TERM -> TERM = mk_≥
	handle X => pass_on X "mk_≥" "mk_z_≥";

val	€mk_z_±› :(TERM * TERM) -> TERM = mk_±
	handle X => pass_on X "mk_±" "mk_z_±";

val	€mk_z_≤› :(TERM * TERM) -> TERM = mk_≤
	handle X => pass_on X "mk_≤" "mk_z_≤";

val	€mk_z_¥› :(TERM * TERM) -> TERM = mk_¥
	handle X => pass_on X "mk_¥" "mk_z_¥";

val	€mk_z_§› :(TERM * TERM) -> TERM = mk_§
	handle X => pass_on X "mk_§" "mk_z_§";

fun	€mk_z_∂› ((d,p,v):TERM * TERM * TERM) :TERM = 
	let	val itym = dest_decl d
	in
		g2_∂ (d,p,v,itym)
	end
	handle X => reraise X "mk_z_∂";

fun	€mk_z_∂â1› ((d,p,v):TERM * TERM * TERM) :TERM = 
	let	val itym = dest_decl d
	in
		mk_app(∂â1_bterm itym,g2_abs(d,p,v,itym))
	end
	handle X => reraise X "mk_z_∂â1";

fun	€mk_z_µ› ((d,p,v):TERM * TERM * TERM) :TERM = 
	let	val itym = dest_decl d
	in
		g2_µ (d,p,v,itym)
	end
	handle X => reraise X "mk_z_µ";

fun	€mk_z_predsexp› ((sch,d):TERM * string) :TERM = 
	let	val bind = mk_binding(sch,d);
		val bty = type_of bind;
		val sty = type_of sch;
		val cty = mk_≠_type(mk_∏_type(bty,sty),BOOL);
		val con = mk_const("Z'SchemaPred",cty);
	in
		mk_app(con,mk_pair(bind,sch))
	end;
=TEX
\subsection{Term Constructors}
=SML
fun	€mk_z_ß¢› ((ty,tml):TYPE * TERM list) :TERM = 
	let	val listy = mk_ctype("LIST",[ty]);
		val seqty = mk_z_power_t(mk_z_tuple_t[mk_z_given_t "˙",ty]);
		val zseqty = mk_≠_type(listy,seqty);
		val zseq = mk_const("Z'ß¢",zseqty);
	in
		case tml of 
			[] => mk_app(zseq,mk_empty_list ty)
		|	_ => mk_app(zseq,mk_list tml)
	end;

fun	€mk_z_setd› ((ty,tml):TYPE * TERM list) :TERM = 
	let	val listy = mk_ctype("LIST",[ty]);
		val setty = mk_z_power_t ty;
		val zsetty = mk_≠_type(listy,setty);
		val zset = mk_const("Z'Setd",zsetty);
	in
		case tml of 
			[] => mk_app(zset,mk_empty_list ty)
		|	_ => mk_app(zset,mk_list tml)
	end;

fun	€mk_z_seta› ((d,p,v):TERM * TERM * TERM) :TERM = 
	let	val itym = dest_decl d;
		val vty = type_of v;
	in
		mk_app (seta_bterm itym vty, g2_abs(d,p,v,itym))
	end;
=TEX
$mk\_z\_$ only makes sense if its argument is a set, but we do not bother to check that here, since the type checker should catch this kind of thing and the definition of the constant $Z$ will prevent us from doing any damage.
=SML
fun	€mk_z_› (tm:TERM) :TERM = 
	let	val ty = type_of tm;
		val psetty = mk_z_power_t ty;
		val zpsetty = mk_≠_type(ty,psetty);
		val zpset = mk_const("Z'",zpsetty);
	in
		mk_app(zpset,tm)
	end;

fun	€mk_z_tuple› (tml:TERM list) :TERM = 
	let	val tyl = map type_of tml;
	in
		list_mk_app(tuple_cterm tyl,tml)
	end;

fun	€mk_z_∏› (tml:TERM list) :TERM = 
	let	val tyl = map (dest_z_power_t o type_of) tml;
	in
		list_mk_app(prod_cterm tyl,tml)
	end;

fun	€mk_z_ › ((sch,d):TERM * string) :TERM = 
	let	val bind = mk_binding(sch,d);
		val bty = type_of bind;
		val sty = type_of sch;
		val cty = mk_≠_type(mk_∏_type(bty,sty),bty);
		val con = mk_const("Z' ",cty);
	in
		mk_app(con,mk_pair(bind,sch))
	end;

fun	€mk_z_sel› ((tm,s):TERM * string) :TERM = 
	let	val tym = dest_z_schema_t(type_of tm);
	in
		mk_app(bind_pterm tym s,tm)
	end;

fun	€mk_z_app› ((tm1,tm2):TERM * TERM) :TERM = 
	let	val fty = type_of tm1;
		val aty = type_of tm2;
		val rty = 
			case dest_z_tuple_t(dest_z_power_t fty) of
				[_,r] => r
			|	_ => term_fail "mk_z_app" 0 [];
		val zappty = list_mk_≠_type([fty,aty],rty);
		val zapp = mk_const("Z'app",zappty);
	in
		list_mk_app (zapp, [tm1, tm2])
	end;
=TEX
=SML
local
fun	f ([]:Z_TERM list) :TERM list = []
|	f (Zdec(tml,_)::z_tml) = tml @ (f z_tml)
|	f (Zdecsexp(sch,d)::z_tml) = (mk_z_ (sch,d)) :: (f z_tml)
|	f _ = term_fail "mk_z_Ã" 0 [];

fun	chartuple ((Zdecl tml):Z_TERM) :TERM = (
		case (f (map dest_z_term tml)) of
			[] => fail "mk_z_Ã" 0 []
		|	[tm] => tm
		|	tml' => mk_z_tuple tml'
		)
|	chartuple _ = fail "mk_z_Ã" 0 [];
in
fun	€mk_z_Ã› ((d,p,v):TERM * TERM * TERM) :TERM =
	let	val t = chartuple(dest_z_term d);
		val tym = dest_decl d;
		val tty = type_of t;
		val vty = type_of v;
	in
		mk_app(Ã_bterm tym tty vty,g3_abs(t,d,p,v,tym))
	end
	handle	Fail _ => term_fail "mk_z_Ã" 47201 [d,p,v]
end;
=TEX
=SML
fun	€mk_z_Õ› ((d,p,v):TERM * TERM * TERM) :TERM = 
	let	val tym = dest_decl d;
		val vty = type_of v;
	in
		mk_app(Õ_bterm tym vty,g2_abs(d,p,v,tym))
	end;

fun	€mk_z_lvar› ((s,ty,tml):string * TYPE * TERM list) :TERM = 
		case tml of [] 	=> mk_var(s,ty)
		| _		=> 
			let	val cty = mk_≠_type(mk_z_tuple_t(map type_of tml),ty);
			in
				mk_app(mk_var(s,cty),mk_z_tuple tml)
			end;

fun	€mk_z_gvar› ((s,ty,tml):string * TYPE * TERM list) :TERM =
		case tml of [] 	=> bind_gvar_term (s,ty)
		| _		=> 
			let	val cty = mk_≠_type(mk_z_tuple_t(map type_of tml),ty);
			in
				mk_app(bind_gvar_term (s,cty),mk_z_tuple tml)
			end;

fun	€mk_z_int› (s:string) :TERM = 
	let	val nty = mk_ctype("Ó",[]);
		val zty = mk_ctype("˙",[]);
		val zint = mk_const("Z'int",mk_≠_type(nty,zty));
	in
		mk_app(zint,mk_const(s,nty))
	end;
=TEX
\subsection{Constructors for the Schema Calculus}
=SML
fun	€mk_z_âs› ((d,p):TERM * TERM) :TERM = 
	let	val itym = dest_decl d;
	in
		mk_app (schema_bterm itym, g1_abs(d,p,itym))
	end;

fun	€mk_z_decâs› ((tm,s):TERM * string) :TERM =
	let	val tym = dest_z_schema_t(dest_z_power_t(type_of tm));
	in
		mk_app(bind_decor_term tym s,tm)
	end;

fun	€mk_z_preâs› (tm:TERM) :TERM =
	let	val tym = dest_z_schema_t(dest_z_power_t(type_of tm));
	in
		mk_app(bind_pre_term tym,tm)
	end;

fun	€mk_z_≥âs› (tm:TERM) :TERM =
	let	val tym = dest_z_schema_t(dest_z_power_t(type_of tm));
	in
		mk_app(bind_≥_term tym,tm)
	end;

fun	€mk_z_±âs› ((tm1,tm2):TERM * TERM) :TERM =
	let	val tym1 = dest_z_schema_t(dest_z_power_t(type_of tm1));
		val tym2 = dest_z_schema_t(dest_z_power_t(type_of tm2));
	in
		list_mk_app(bind_±_term tym1 tym2,[tm1,tm2])
	end;

fun	€mk_z_≤âs› ((tm1,tm2):TERM * TERM) :TERM =
	let	val tym1 = dest_z_schema_t(dest_z_power_t(type_of tm1));
		val tym2 = dest_z_schema_t(dest_z_power_t(type_of tm2));
	in
		list_mk_app(bind_≤_term tym1 tym2,[tm1,tm2])
	end;

fun	€mk_z_¥âs› ((tm1,tm2):TERM * TERM) :TERM =
	let	val tym1 = dest_z_schema_t(dest_z_power_t(type_of tm1));
		val tym2 = dest_z_schema_t(dest_z_power_t(type_of tm2));
	in
		list_mk_app(bind_¥_term tym1 tym2,[tm1,tm2])
	end;

fun	€mk_z_§âs› ((tm1,tm2):TERM * TERM) :TERM =
	let	val tym1 = dest_z_schema_t(dest_z_power_t(type_of tm1));
		val tym2 = dest_z_schema_t(dest_z_power_t(type_of tm2));
	in
		list_mk_app(bind_§_term tym1 tym2,[tm1,tm2])
	end;

fun	€mk_z_˘âs› ((tm1,tm2):TERM * TERM) :TERM =
	let	val tym1 = dest_z_schema_t(dest_z_power_t(type_of tm1));
		val tym2 = dest_z_schema_t(dest_z_power_t(type_of tm2));
	in
		list_mk_app(bind_˘_term tym1 tym2,[tm1,tm2])
	end;

fun	€mk_z_hideâs› ((tm,sl):TERM * string list) :TERM =
	let	val tym = dest_z_schema_t(dest_z_power_t(type_of tm));
	in
		mk_app(bind_hide_term tym sl,tm)
	end;

fun	€mk_z_∂âs› ((d,p,v):TERM * TERM * TERM) :TERM =
	let	val dtym = dest_decl d;
		val vtym = dest_z_schema_t(dest_z_power_t(type_of v));
	in
		list_mk_app(∂âs_bterm dtym vtym,[g1_abs(d,p,dtym),v])
	end;

fun	€mk_z_∂â1âs› ((d,p,v):TERM * TERM * TERM) :TERM =
	let	val dtym = dest_decl d;
		val vtym = dest_z_schema_t(dest_z_power_t(type_of v));
	in
		list_mk_app(∂â1âs_bterm dtym vtym,[g1_abs(d,p,dtym),v])
	end;

fun	€mk_z_µâs› ((d,p,v):TERM * TERM * TERM) :TERM =
	let	val dtym = dest_decl d;
		val vtym = dest_z_schema_t(dest_z_power_t(type_of v));
	in
		list_mk_app(µâs_bterm dtym vtym,[g1_abs(d,p,dtym),v])
	end;

fun	€mk_z_Ñâs› (tm:TERM) :TERM =
	let	val tym = dest_z_schema_t(dest_z_power_t(type_of tm));
	in
		mk_app(bind_Ñ_term tym,tm)
	end;

fun	€mk_z_òâs› (tm:TERM) :TERM =
	let	val tym = dest_z_schema_t(dest_z_power_t(type_of tm));
	in
		mk_app(bind_ò_term tym,tm)
	end;

fun	€mk_z_ªâs› ((tm1,tm2):TERM * TERM) :TERM =
	let	val tym1 = dest_z_schema_t(dest_z_power_t(type_of tm1));
		val tym2 = dest_z_schema_t(dest_z_power_t(type_of tm2));
	in
		list_mk_app(bind_ª_term tym1 tym2,[tm1,tm2])
	end;
=TEX
\subsection{The General Constructor Function}
This function uses the constructors defined above to convert a $Z\_TERM$ to the corresponding $TERM$.
=SML
fun	€mk_z_term›	(Zdec(tml:TERM list,tm:TERM) :Z_TERM) :TERM = mk_z_dec(tml,tm)
|	mk_z_term	(Zdecsexp(tm:TERM,s:string)) = mk_z_decsexp(tm,s)
|	mk_z_term	(Zdecl(tml:TERM list)) = mk_z_decl tml
|	mk_z_term	(Zeq(tm1:TERM,tm2:TERM)) = mk_z_eq(tm1,tm2)
|	mk_z_term	(Zç(tm1:TERM,tm2:TERM)) = mk_z_ç(tm1,tm2)
|	mk_z_term	(Ztrue) = mk_z_true
|	mk_z_term	(Zfalse) = mk_z_false
|	mk_z_term	(Z≥(tm:TERM)) = mk_z_≥ tm
|	mk_z_term	(Z±(tm1:TERM,tm2:TERM)) = mk_z_±(tm1,tm2)
|	mk_z_term	(Z≤(tm1:TERM,tm2:TERM)) = mk_z_≤(tm1,tm2)
|	mk_z_term	(Z¥(tm1:TERM,tm2:TERM)) = mk_z_¥(tm1,tm2)
|	mk_z_term	(Z§(tm1:TERM,tm2:TERM)) = mk_z_§(tm1,tm2)
|	mk_z_term	(Z∂(tm1:TERM,tm2:TERM,tm3:TERM)) = mk_z_∂(tm1,tm2,tm3)
|	mk_z_term	(Z∂â1(tm1:TERM,tm2:TERM,tm3:TERM)) = mk_z_∂â1(tm1,tm2,tm3)
|	mk_z_term	(Zµ(tm1:TERM,tm2:TERM,tm3:TERM)) = mk_z_µ(tm1,tm2,tm3)
|	mk_z_term	(Zpredsexp(tm:TERM,s:string)) = mk_z_predsexp(tm,s)
|	mk_z_term	(Zlvar(s:string,ty:TYPE,tml:TERM list)) = mk_z_lvar(s,ty,tml)
|	mk_z_term	(Zgvar(s:string,ty:TYPE,tml:TERM list)) = mk_z_gvar(s,ty,tml)
|	mk_z_term	(Zint(s:string)) = mk_z_int(s)
|	mk_z_term	(Zß¢(ty:TYPE,tml:TERM list)) = mk_z_ß¢(ty,tml)
|	mk_z_term	(Zsetd(ty:TYPE,tml:TERM list)) = mk_z_setd(ty,tml)
|	mk_z_term	(Zseta(tm1:TERM,tm2:TERM,tm3:TERM)) = mk_z_seta(tm1,tm2,tm3)
|	mk_z_term	(Z(tm:TERM)) = mk_z_ tm
|	mk_z_term	(Ztuple(tml:TERM list)) = mk_z_tuple tml
|	mk_z_term	(Z∏(tml:TERM list)) = mk_z_∏ tml
|	mk_z_term	(Z (tm:TERM,s:string)) = mk_z_ (tm,s)
|	mk_z_term	(Zsel(tm:TERM,s:string)) = mk_z_sel(tm,s)
|	mk_z_term	(Zapp(tm1:TERM,tm2:TERM)) = mk_z_app(tm1,tm2)
|	mk_z_term	(ZÃ(tm1:TERM,tm2:TERM,tm3:TERM)) = mk_z_Ã(tm1,tm2,tm3)
|	mk_z_term	(ZÕ(tm1:TERM,tm2:TERM,tm3:TERM)) = mk_z_Õ(tm1,tm2,tm3)
|	mk_z_term	(Zâs(tm1:TERM,tm2:TERM)) = mk_z_âs(tm1,tm2)
|	mk_z_term	(Zdecâs(tm:TERM,s:string)) = mk_z_decâs(tm,s)
|	mk_z_term	(Zpreâs(tm:TERM)) = mk_z_preâs tm
|	mk_z_term	(Z≥âs(tm:TERM)) = mk_z_≥âs tm
|	mk_z_term	(Z±âs(tm1:TERM,tm2:TERM)) = mk_z_±âs(tm1,tm2)
|	mk_z_term	(Z≤âs(tm1:TERM,tm2:TERM)) = mk_z_≤âs(tm1,tm2)
|	mk_z_term	(Z¥âs(tm1:TERM,tm2:TERM)) = mk_z_¥âs(tm1,tm2)
|	mk_z_term	(Z§âs(tm1:TERM,tm2:TERM)) = mk_z_§âs(tm1,tm2)
|	mk_z_term	(Z˘âs(tm1:TERM,tm2:TERM)) = mk_z_˘âs(tm1,tm2)
|	mk_z_term	(Zhideâs(tm:TERM,sl:string list)) = mk_z_hideâs(tm,sl)
|	mk_z_term	(Z∂âs(tm1:TERM,tm2:TERM,tm3:TERM)) = mk_z_∂âs(tm1,tm2,tm3)
|	mk_z_term	(Z∂â1âs(tm1:TERM,tm2:TERM,tm3:TERM)) = mk_z_∂â1âs(tm1,tm2,tm3)
|	mk_z_term	(Zµâs(tm1:TERM,tm2:TERM,tm3:TERM)) = mk_z_µâs(tm1,tm2,tm3)
|	mk_z_term	(ZÑâs(tm:TERM)) = mk_z_Ñâs tm
|	mk_z_term	(Zòâs(tm:TERM)) = mk_z_òâs tm
|	mk_z_term	(Zªâs(tm1:TERM,tm2:TERM)) = mk_z_ªâs(tm1,tm2);
=TEX
Finally, we leave the structure open.
=SML
end (* of structure ZTypesAndTerms *);
open ZTypesAndTerms;
=TEX
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}

val d1 = mk_z_decl[mk_z_dec([mk_var("a",mk_z_given_t"A"),mk_var("x",mk_z_given_t"A")],mk_var("A",mk_z_power_t(mk_z_given_t"A")))];
val p1 = mk_z_true;
val sch1 = mk_z_âs(d1,p1);
val d2 = mk_z_decl[mk_z_dec([mk_var("y",mk_z_given_t"B"),mk_var("b",mk_z_given_t"B")],mk_var("B",mk_z_power_t(mk_z_given_t"B")))];
val p2 = mk_z_true;
val sch2 = mk_z_âs(d2,p2);
val d3 = mk_z_decl[mk_z_decsexp(sch1,"'"),mk_z_decsexp(sch2,"")];
val p3 = mk_z_true;
val sch3 = mk_z_âs(d3,p3);



val x = mk_z_lvar("x",mk_z_given_t "A",[]);
val y = mk_z_lvar("y",mk_z_given_t "A",[]);
val X = mk_z_lvar("X",mk_z_power_t(mk_z_given_t "A"),[]);
val Y = mk_z_lvar("Y",mk_z_power_t(mk_z_given_t "B"),[]);
val eq = mk_z_eq(x,y);
val mm = mk_z_ç(x,X);

val f = mk_z_∏[X,Y];

val zd = mk_const("Z'Ã",mk_≠_type(BOOL,BOOL));
val tm = mk_app(zd,p1);



