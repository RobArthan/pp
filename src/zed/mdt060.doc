%  mdt015.doc  %Z% $Date$ $Revision$ $RCSfile$
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Module Tests for Z Lexical Analyser}  %% Mandatory field
\TPPref{DS/FMU/IED/MDT060}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{
This document comprises test cases and test code/data for
testing the Z lexical analyser described in the document
DS/FMU/IED/DTD060.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library \\ R.D. Arthan\\ D.J. King}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issue \SCCSversion, \FormatDate{92/03/19} ] Initial Draft.

\end{description}
\subsection{Changes Forecast}

Correct test for quotation and antiquotation.

\pagebreak
\section{GENERAL}
\subsection{Scope}

This document comprises test cases and test code/data for
testing the Z lexical analyser specified in \cite{DS/FMU/IED/DTD060}.

\subsection{Introduction}

\subsubsection{Background and Purpose}
This document is intended to supply module test for the Z lexical
analyser as defined in \cite{DS/FMU/IED/DTD060} and implemented
in \cite{DS/FMU/IED/IMP060}. The tests are intended to meet
the requirements for tests identified in the quality plan
\cite{DS/FMU/IED/PLN008}.

We have only one function to test, namely $zlex$. The detailed design
refers to \cite{DS/FMU/IED/DEF007} for the behaviour of this function.
Therefore it is that document which largely defines the function to be tested.
The detailed design does indicate error conditions which should be
tested.

\subsubsection{Dependencies}

These tests depend on
the test harness as implemented in DS/FMU/IED/IMP013, and
its corresponding detailed design document, DS/FMU/IED/DTD013.

\subsubsection{Possible Enhancements}

None known.

\subsubsection{Deficiencies}

There are no known deficiencies.

\section{TEST HARNESS INITIALISATION}

=SML
usefile "dtd013.sml";
usefile "imp013.sml";
init_mt_results ();
=TEX

\section{TEST CASES}
\begin{description}
\item[ZLex.1]
Check that inputs consisting of a single punctuation character
and reserved words are handled correctly. Also check that
the empty string handles correctly.
\item[ZLex.2]
Check that various forms of white space are handled correctly.
\item[ZLex.3]
Check that inputs comprising of identifiers (alphanumeric,
greek, symbolic and subscripted punctuation) are
handled correctly.
\item[ZLex.4]
Exhibit the reachable errors identified in the detailed design.
\item[ZLex.5]
Check that inputs comprising of numbers
are handled correctly.
\item[ZLex.6]
Check that inputs comprising of decoration
are handled correctly.
\end{description}
\section{PREAMBLE}
=SML
open ZLex;
init_mt_results();
=TEX
\section{THE TESTS}
\subsection{Case 1}
=SML
val zlex_1 = zlex o (fn s => [Lex.Text s]);
=TEX
=SML
store_mt_results mt_run
[("ZLex.1.1", zlex_1, "Ã", [ZTÃ, ZTEos]),
("ZLex.1.2", zlex_1, "Õ", [ZTÕ, ZTEos]),
("ZLex.1.3", zlex_1, "µ", [ZTµ, ZTEos]),
("ZLex.1.4", zlex_1, "∂", [ZT∂, ZTEos]),
("ZLex.1.5", zlex_1, "∂â1", [ZT∂â1, ZTEos]),
("ZLex.1.6", zlex_1, "≥", [ZT≥, ZTEos]),
("ZLex.1.7", zlex_1, "pre", [ZTPre, ZTEos]),
("ZLex.1.8", zlex_1, "Ñ", [ZTÑ, ZTEos]),
("ZLex.1.9", zlex_1, "ò", [ZTò, ZTEos]),
("ZLex.1.10", zlex_1, ">>", [ZTPipe, ZTEos])];
=TEX
=SML
store_mt_results mt_run
[("ZLex.1.11", zlex_1, "˘", [ZT˘, ZTEos]),
("ZLex.1.12", zlex_1, "ª", [ZTª, ZTEos]),
("ZLex.1.13", zlex_1, "±", [ZT±, ZTEos]),
("ZLex.1.14", zlex_1, "≤", [ZT≤, ZTEos]),
("ZLex.1.15", zlex_1, "§", [ZT§, ZTEos]),
("ZLex.1.16", zlex_1, "¥", [ZT¥, ZTEos]),
("ZLex.1.17", zlex_1, "let", [ZTLet, ZTEos]),
("ZLex.1.18", zlex_1, "fun", [ZTFun, ZTEos]),
("ZLex.1.19", zlex_1, "gen", [ZTGen, ZTEos]),
("ZLex.1.20", zlex_1, "rel", [ZTRel, ZTEos])];
=TEX
=SML
store_mt_results mt_run
[("ZLex.1.21", zlex_1, "&", [ZTAmpersand, ZTEos]),
("ZLex.1.22", zlex_1, "open", [ZTOpen, ZTEos]),
("ZLex.1.23", zlex_1, "{", [ZTLbrace, ZTEos]),
("ZLex.1.24", zlex_1, "}", [ZTRbrace, ZTEos]),
("ZLex.1.25", zlex_1, "(", [ZTLbrack, ZTEos]),
("ZLex.1.26", zlex_1, ")", [ZTRbrack, ZTEos]),
("ZLex.1.27", zlex_1, "[", [ZTLsqbrack, ZTEos]),
("ZLex.1.28", zlex_1, "]", [ZTRsqbrack, ZTEos]),
("ZLex.1.29", zlex_1, "ß", [ZTß, ZTEos]),
("ZLex.1.30", zlex_1, "¢", [ZT¢, ZTEos])];
=TEX
=SML
store_mt_results mt_run
[("ZLex.1.31", zlex_1, ",", [ZTComma, ZTEos]),
("ZLex.1.32", zlex_1, "...", [ZTDots, ZTEos]),
("ZLex.1.33", zlex_1, ".", [ZTDot, ZTEos]),
("ZLex.1.34", zlex_1, "/", [ZTSlash, ZTEos]),
("ZLex.1.35", zlex_1, "\\", [ZTBSlash, ZTEos]),
("ZLex.1.36", zlex_1, "::=", [ZTFreeTyDef, ZTEos]),
("ZLex.1.37", zlex_1, ":", [ZTColon, ZTEos]),
("ZLex.1.38", zlex_1, ";", [ZTSemi, ZTEos]),
("ZLex.1.39", zlex_1, "|", [ZTVert, ZTEos]),
("ZLex.1.40", zlex_1, "?Ù", [ZTConjecture, ZTEos])];
=TEX
=SML
store_mt_results mt_run
[("ZLex.1.41", zlex_1, "¶", [ZT¶, ZTEos]),
("ZLex.1.42", zlex_1, "∑", [ZT∑, ZTEos]),
("ZLex.1.43", zlex_1, "∏", [ZT∏, ZTEos]),
("ZLex.1.44", zlex_1, " ", [ZT , ZTEos]),
("ZLex.1.45", zlex_1, "", [ZTEos])];
=TEX
\subsection{Case 2}
=SML
val zlex_2 = zlex_1;
=TEX
=SML
store_mt_results mt_run
[
 ("ZLex.2.1", zlex_2, "	 A        B	\n C D E	F", map ZTId (explode"ABCDEF") @ [ZTEos])
];
=TEX

\subsection{Case 3}
=SML
fun zlex_3 inp = (
	(case zlex_1 inp of
	[ZTId inp, ZTEos] => 1
	|other => 2
	)
);
=TEX
\subsubsection{Alphanumeric Identifiers}
=SML
store_mt_results mt_run
[("ZLex.3.1.1", zlex_3, "a", 1),
 ("ZLex.3.1.2", zlex_3, "ab", 1),
 ("ZLex.3.1.3", zlex_3, "abc123", 1),
 ("ZLex.3.1.4", zlex_3, "a_b", 1),
 ("ZLex.3.1.5", zlex_3, "a_1", 1),
 ("ZLex.3.1.6", zlex_3, "abc_123_def", 1),
 ("ZLex.3.1.7", zlex_3, "aâ1", 1),
 ("ZLex.3.1.8", zlex_3, "aâ1â±", 1),
 ("ZLex.3.1.9", zlex_3, "abc_123â1", 1),
 ("ZLex.3.1.10", zlex_3, "abc_123â1â±", 1)];
=TEX
=SML
store_mt_results mt_run
[("ZLex.3.1.11", zlex_3, "a_", 2),
 ("ZLex.3.1.12", zlex_3, "a_b_", 2),
 ("ZLex.3.1.13", zlex_3, "_abc123", 2),
 ("ZLex.3.1.14", zlex_3, "a_b c", 2),
 ("ZLex.3.1.15", zlex_3, "a±1", 2),
 ("ZLex.3.1.16", zlex_3, "abc&123_def", 2),
 ("ZLex.3.1.17", zlex_3, "aâ1_", 2),
 ("ZLex.3.1.18", zlex_3, "a_â1â±", 2),
 ("ZLex.3.1.19", zlex_3, "abc'_123â1", 2),
 ("ZLex.3.1.20", zlex_3, "abc_123â1â±'", 2)];
=TEX
\subsubsection{Greek Identifiers}
=SML
store_mt_results mt_run
[("ZLex.3.2.1", zlex_3, "¡", 1),
 ("ZLex.3.2.2", zlex_3, "¬", 1),
 ("ZLex.3.2.3", zlex_3, "«", 1),
 ("ZLex.3.2.4", zlex_3, "ƒ", 1),
 ("ZLex.3.2.5", zlex_3, "≈", 1),
 ("ZLex.3.2.6", zlex_3, "⁄", 1),
 ("ZLex.3.2.7", zlex_3, "»", 1),
 ("ZLex.3.2.8", zlex_3, " ", 2), (* ZT  *)
 ("ZLex.3.2.9", zlex_3, "…", 1),
 ("ZLex.3.2.10", zlex_3, "À", 1)];
=TEX
=SML
store_mt_results mt_run
[("ZLex.3.2.11", zlex_3, "Ã", 2), (* ZTÃ *)
 ("ZLex.3.2.12", zlex_3, "Õ", 2), (* ZTÕ *)
 ("ZLex.3.2.13", zlex_3, "Œ", 1),
 ("ZLex.3.2.14", zlex_3, "ÿ", 1),
 ("ZLex.3.2.15", zlex_3, "–", 1),
 ("ZLex.3.2.16", zlex_3, "“", 1),
 ("ZLex.3.2.17", zlex_3, "”", 1),
 ("ZLex.3.2.18", zlex_3, "‘", 1),
 ("ZLex.3.2.19", zlex_3, "’", 1),
 ("ZLex.3.2.20", zlex_3, "∆", 1)];
=TEX
=SML
store_mt_results mt_run
[("ZLex.3.2.21", zlex_3, "—", 1),
 ("ZLex.3.2.22", zlex_3, "Ÿ", 1),
 ("ZLex.3.2.23", zlex_3, "◊", 1),
 ("ZLex.3.2.24", zlex_3, "á", 1),
 ("ZLex.3.2.25", zlex_3, "Ñ", 2), (* ZTÑ *)
 ("ZLex.3.2.26", zlex_3, "ä", 1),
 ("ZLex.3.2.27", zlex_3, "å", 1),
 ("ZLex.3.2.28", zlex_3, "ò", 2), (* ZTò *)
 ("ZLex.3.2.29", zlex_3, "ê", 1),
 ("ZLex.3.2.30", zlex_3, "ì", 1)];
=TEX
=SML
store_mt_results mt_run
[("ZLex.3.2.31", zlex_3, "ï", 1),
 ("ZLex.3.2.32", zlex_3, "Ü", 1),
 ("ZLex.3.2.33", zlex_3, "ô", 1),
 ("ZLex.3.2.34", zlex_3, "ó", 1),
 ("ZLex.3.2.35", zlex_3, "¡", 1),
 ("ZLex.3.2.36", zlex_3, "¡â1", 1),
 ("ZLex.3.2.37", zlex_3, "Ñâò", 1),
 ("ZLex.3.2.38", zlex_3, "òâÑ", 1),
 ("ZLex.3.2.39", zlex_3, "òâµ", 1),
 ("ZLex.3.2.40", zlex_3, "òâµ", 1)];
=TEX
\subsubsection{Symbolic Identifiers}
=SMLLITERAL
store_mt_results mt_run
[("ZLex.3.3.1", zlex_3, "Á", 1),
 ("ZLex.3.3.2", zlex_3, "Í", 1),
 ("ZLex.3.3.3", zlex_3, "¿", 1),
 ("ZLex.3.3.4", zlex_3, "°", 1),
 ("ZLex.3.3.5", zlex_3, "ﬁ", 1),
 ("ZLex.3.3.6", zlex_3, "•", 1),
 ("ZLex.3.3.7", zlex_3, "Ä", 1),
 ("ZLex.3.3.8", zlex_3, "†", 1),
 ("ZLex.3.3.9", zlex_3, "ö", 1),
 ("ZLex.3.3.10", zlex_3, "é", 1)];
=TEX
=SML
store_mt_results mt_run
[("ZLex.3.3.11", zlex_3, "®", 1),
 ("ZLex.3.3.12", zlex_3, "©", 1),
 ("ZLex.3.3.13", zlex_3, "·", 1),
 ("ZLex.3.3.14", zlex_3, "Å", 1),
 ("ZLex.3.3.15", zlex_3, "Ú", 1),
 ("ZLex.3.3.16", zlex_3, "í", 1),
 ("ZLex.3.3.17", zlex_3, "Ù", 1),
 ("ZLex.3.3.19", zlex_3, "´", 1),
 ("ZLex.3.3.20", zlex_3, "ﬂ", 1)];
=TEX
=SML
store_mt_results mt_run
[("ZLex.3.3.21", zlex_3, "≠", 1),
 ("ZLex.3.3.22", zlex_3, "˛", 1),
 ("ZLex.3.3.23", zlex_3, "‡", 1),
 ("ZLex.3.3.24", zlex_3, "œ", 1),
 ("ZLex.3.3.25", zlex_3, "Ô", 1),
 ("ZLex.3.3.26", zlex_3, "è", 1),
 ("ZLex.3.3.27", zlex_3, "™", 1),
 ("ZLex.3.3.28", zlex_3, "Ó", 1),
 ("ZLex.3.3.29", zlex_3, "˙", 1),
 ("ZLex.3.3.30", zlex_3, "º", 1)];
=TEX
=SML
store_mt_results mt_run
[("ZLex.3.3.31", zlex_3, "æ", 1),
 ("ZLex.3.3.32", zlex_3, "<", 1),
 ("ZLex.3.3.33", zlex_3, ">", 1),
 ("ZLex.3.3.34", zlex_3, "Î", 1),
 ("ZLex.3.3.35", zlex_3, "ã", 1),
 ("ZLex.3.3.36", zlex_3, "Ω", 1),
 ("ZLex.3.3.37", zlex_3, "+", 1),
 ("ZLex.3.3.38", zlex_3, "-", 1),
 ("ZLex.3.3.39", zlex_3, "*", 1),
 ("ZLex.3.3.40", zlex_3, "#", 1)];
=TEX
=SML
store_mt_results mt_run
[("ZLex.3.3.41", zlex_3, ".", 2), (* gives ZTDot *)
 ("ZLex.3.3.42", zlex_3, "~", 1),
 ("ZLex.3.3.43", zlex_3, "Ç", 1),
 ("ZLex.3.3.44", zlex_3, "˚", 1),
 ("ZLex.3.3.45", zlex_3, "˝", 1)];
=TEX
\subsubsection{Subscripted Punctuation Identifiers}
=SML
store_mt_results mt_run
[("ZLex.3.4.1", zlex_3, ",â0", 1),
 ("ZLex.3.4.2", zlex_3, ";â0", 1),
 ("ZLex.3.4.3", zlex_3, ":â0", 1),
 ("ZLex.3.4.4", zlex_3, "(â0", 1),
 ("ZLex.3.4.5", zlex_3, ")â0", 1),
 ("ZLex.3.4.6", zlex_3, "[â0", 1),
 ("ZLex.3.4.7", zlex_3, "]â0", 1),
 ("ZLex.3.4.8", zlex_3, "{â0", 1),
 ("ZLex.3.4.9", zlex_3, "}â0", 1),
 ("ZLex.3.4.10", zlex_3, "ßâ0", 1)];
=TEX
=SML
store_mt_results mt_run
[("ZLex.3.4.11", zlex_3, "¢â0", 1),
 ("ZLex.3.4.12", zlex_3, "/â0", 1),
 ("ZLex.3.4.13", zlex_3, "\\â0", 1),
 ("ZLex.3.4.14", zlex_3, "_â0", 1),
 ("ZLex.3.4.15", zlex_3, "±â0", 1),
 ("ZLex.3.4.16", zlex_3, "≤â0", 1),
 ("ZLex.3.4.17", zlex_3, "≥â0", 1),
 ("ZLex.3.4.18", zlex_3, "¥â0", 1),
 ("ZLex.3.4.19", zlex_3, "§â0", 1),
 ("ZLex.3.4.20", zlex_3, "=â0", 1)];
=TEX
=SML
store_mt_results mt_run
[ ("ZLex.3.4.21", zlex_3, "çâ0", 1),
 ("ZLex.3.4.22", zlex_3, "µâ0", 1),
 ("ZLex.3.4.23", zlex_3, "∂â0", 1),
 ("ZLex.3.4.24", zlex_3, "∑â0", 1),
 ("ZLex.3.4.25", zlex_3, "â0", 1),
 ("ZLex.3.4.26", zlex_3, "∏â0", 1),
 ("ZLex.3.4.27", zlex_3, "¶â0", 1),
 ("ZLex.3.4.28", zlex_3, "&â0", 1),
 ("ZLex.3.4.29", zlex_3, "ªâ0", 1),
 ("ZLex.3.4.30", zlex_3, "˘â0", 1)];
=TEX
=SML
store_mt_results mt_run
[("ZLex.3.4.31", zlex_3, "::=â0", 1),
 ("ZLex.3.4.32", zlex_3, "?Ùâ0", 1),
 ("ZLex.3.4.33", zlex_3, "Êâ0", 1),
 ("ZLex.3.4.34", zlex_3, "|â0", 1)];
=TEX
=SML
store_mt_results mt_run
[ ("ZLex.3.4.35", zlex_3, "µâ0â0", 1),
 ("ZLex.3.4.36", zlex_3, "µâ0â0â0", 1)];
=TEX

\subsection{Case 4}
=SML
val zlex_4 = zlex_1;
=TEX
=SML
store_mt_results mt_run_fail
[ ("ZLex.4.1.1", zlex_4, "aâÁxÍ", gen_fail_msg "Z Lexical Analyser" 60007 [])];
=TEX

\subsection{Case 5}
=SML
fun zlex_5 inp = (
	(case zlex_1 inp of
	[ZTNumber inp, ZTEos] => 1
	|other => 2
	)
);
=TEX
=SML
store_mt_results mt_run
[ ("ZLex.5.1.1", zlex_5, "0", 1),
 ("ZLex.5.1.2", zlex_5, "42", 1),
 ("ZLex.5.1.3", zlex_5, "1234567890", 1),
 ("ZLex.5.1.4", zlex_5, "…", 2),
 ("ZLex.5.1.5", zlex_5, "l", 2),
 ("ZLex.5.1.6", zlex_5, "!", 2)];
=TEX

\subsection{Case 6}
=SML
fun zlex_6 inp = (
	(case zlex_1 inp of
	[ZTDecor inp, ZTEos] => 1
	|other => 2
	)
);
=TEX
=SML
store_mt_results mt_run
[ ("ZLex.6.1.1", zlex_6, "'", 1),
 ("ZLex.6.1.2", zlex_6, "?", 1),
 ("ZLex.6.1.3", zlex_6, "!", 1),
 ("ZLex.6.1.4", zlex_6, "'''", 1),
 ("ZLex.6.1.5", zlex_6, "?'", 1),
 ("ZLex.6.1.6", zlex_6, "?!'", 1),
 ("ZLex.6.1.7", zlex_6, "a", 2),
 ("ZLex.6.1.8", zlex_6, "¡", 2),
 ("ZLex.6.1.9", zlex_6, "¿", 2)];
=TEX


=TEX
\section{SUMMARY OF RESULTS}

=SML
diag_string(summarize_mt_results());
=TEX

\end{document}


