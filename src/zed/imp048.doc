=IGN
********************************************************************************
imp048.doc: this file is part of the PPZed system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
% imp048.doc %Z% $Date: 2005/09/09 17:00:29 $ $Revision: 1.36 $ $RCSfile: imp048.doc,v $
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST Project}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Implementation of Support for Z Types and Terms}  %% Mandatory field
\def\TPPheadtitle{Implementation of Support for Z Types and Terms}
\TPPref{DS/FMU/IED/IMP048}  %% Mandatory field
\def\SCCSversion{$Revision: 1.36 $%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2005/09/09 17:00:29 $%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{G.T.Scullard & MAN05}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.B.Jones & Project Manager}
\TPPabstract{}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year
\end{centering}
\pagebreak
\section{Document Control}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History} 
\begin{description}
\item [Issue 1.10 (28 April 1992)]
Added functions which support sets of things of type $(string * TYPE)$.

\item [Issue 1.13 (15 June 1992)]
Added functions which support distinguishing names for Z global variables.

\item [Issue 1.14 (29 June 1992)]
Changed date and issue back to SCCS keywords.

\item [Issue 1.16 (3 July 1992)]
Changed the binding and tuple constructors to $Z'Mk\_S$ and $Z'Mk\_T$.

\item [Issue 1.17 (July 16th 1992)]
Added support for schema renaming.
\item [Issue 1.22 (July 16th 1992)]
Stopped using local $list\_mk\_≠\_type$.
\item [Issue 1.24 (31st July 1992)]
Renamed $val\_setIDENT$, removed $bool\_type$ and
constrained with signature again.
\item[Issue 1.25,1.26  (10th December 1992)]
Global rename from wrk038.doc issue 1.9.
\item[Issue 1.27 (14th January 1993)]
Code optimization(?).
\item[Issue 1.28,1.29]
Bug fix (signature variable ordering).
\item[Issue 1.30]
Performance tweak to {\it unpack\_ident} and {\it flatpack}.
\item[Issue 1.31] Copyright and banner updates for open source release.
\item[Issue 1.32] PPZed-specific updates for open source release
\item[Issue 1.33] Liberalised schema quantification.
\item[Issue 1.34] Fixed bug in generation of names for set abstraction, unique existential quantification, $\lambda$ and $\mu$ when a declaration contains a repeated name.
\item[Issue 1.35] Fixed error handling in {\em unbind\_gvar\_name}.
\item[Issue 1.36] Made {\em unpack\_ident} work with new more general templates.
\item[Issue 1.37] {\em unpack\_ident} redesigned.
\end{description}
%\subsection{Changes Forecast}
\section{GENERAL}
\subsection{Scope}
This document provides the implementation of a set of support functions for the construction of HOL representations of Z types and terms.
The functions defined here are intended for use in \cite{DS/FMU/IED/IMP047}, the user accessible type and term constructors.
This document is called for in \cite{DS/FMU/IED/HLD017}; the detailed design may be found in \cite{DS/FMU/IED/DTD048}.
\subsection{Introduction}
\subsubsection{Purpose and Background}
\subsubsection{Dependencies}
The functions in this document are dependent on the Release 1 HOL System.
\subsubsection{Deficiencies}
\section{STRUCTURE}
=SML
structure €ZTypesAndTermsSupport› : ZTypesAndTermsSupport = struct
=TEX

\section{SUPPORT FOR SETS}
The following functions provide set operations for the non-equality type
$string * TYPE$.
=SML
infix 3 mem';
fun ((s,t): string * TYPE) €mem'› (((s',t') :: xs)  : (string * TYPE) list) : bool = (
	((s = s') andalso (t =: t')) orelse ((s,t) mem' xs)
) | _ mem' [] = false;
=TEX
=SML
infix 4 drop';
fun ((x :: xs) : (string * TYPE) list) €drop'› (cond : (string * TYPE)  -> bool) 
		: (string * TYPE) list = (
	if cond x
	then xs drop' cond
	else x :: (xs drop' cond)
) | [] drop' _ = [];
=TEX
=SML
infix 4 grab';
fun (lst : (string * TYPE) list) €grab'› (what : string * TYPE) = (
	if what mem' lst
	then lst
	else (what :: lst)
);
=TEX
=SML
infix 4 cup';
fun (list1 : (string * TYPE) list) €cup'› (list2 : (string * TYPE) list) : (string * TYPE) list = (
	fold (fn(x, xs) => xs grab' x) list1 list2
);
=TEX
$diff$ is the set difference operator for lists.
=SML
infix 4 diff';
fun (list1 : (string * TYPE) list) €diff'› (list2 : (string * TYPE) list) : (string * TYPE) list = (
	list1 drop' (fn x => x mem' list2)
);
=TEX

\section{NAME FORMATION}
As discussed in \cite{DS/FMU/IED/DTD048}, the types $IDENT$, $WORD$ and $DECOR$ are simply implemented as $string$s, but
we will frequently need to manipulate them as if they were in the more strongly typed form.
The following functions therefore survive.
=SML
fun	€pack_ident› ((w,d) :string * string) :string = (w ^ d);
=TEX
=SML
fun	€unpack_ident› (s :string) :string * string = (
	let	val sz = size s;
		fun is_dec_char #"'" = true
		|   is_dec_char #"?" = true
		|   is_dec_char #"!" = true
		|   is_dec_char _ = false;
		fun find_index i = (
			if	i >= 0
			andalso	is_dec_char(String.sub(s, i))
			then	find_index (i-1)
			else	(i + 1)
		);
		val index = find_index (sz - 1);
	in	(String.substring(s, 0, index), String.substring(s, index, sz - index))
	end
);
=TEX
=SML
fun z_sig_order (s1 : string) (s2 : string) : int = (
	let	val (n1, d1) = unpack_ident s1 handle Fail _ => (s1, "");
		val (n2, d2) = unpack_ident s2 handle Fail _ => (s2, "");
	in	if	n1 > n2
		then	1
		else if	 n1 < n2
		then	~1
		else 	case size d1 - size d2 of
			0 =>  (
				if	d1 < d2
				then	~1
				else if d1 = d2
				then	0
				else	1
			) |	x => x
	end
);
=TEX
=SML
fun	€idsetseq› (sl:string list) : string list = Sort.sort z_sig_order sl;
fun	€flatpack› (sl:string list) : string 	= (
	format_list Combinators.I sl ","
);
=TEX


=SML
fun 	€val_set_ident› (sl:string list) :string =
	"[" ^ flatpack(idsetseq sl) ^ "]";
fun	 €itymfunseq› (itym:(string * TYPE)list) :TYPE list =
	map (lassoc3 itym) (idsetseq(map fst itym));
=TEX


=SML
val	€number› :(int -> string) = string_of_int;
val	€val_numeral› :(string -> int) = nat_of_string;
=TEX


\section{BINDINGS AND TUPLES}

\subsection{binding types}


=SML
fun	€bind_tname› (fid :string list) :string = "Z'S" ^ (val_set_ident fid);
=TEX
=GFT Specification
fun 	€bind_type› (itym :(string * TYPE) list) :TYPE = 
		mk_ctype (bind_tname(map fst itym), itymfunseq itym);
=TEX
=SML
fun 	€bind_type› (itym :(string * TYPE) list) :TYPE = (
let	val components = (map fst itym);
	val sorted_components = (Sort.sort z_sig_order components);
	val packed_components = "[" ^ flatpack sorted_components ^ "]";
	val tname = "Z'S" ^ packed_components;
	val targs = map (lassoc3 itym) sorted_components;
in 
	mk_ctype (tname, targs)
end);
=TEX
The following may be used if $itym$ are sorted:
=SML
fun 	€sorted_bind_type› (itym :(string * TYPE) list) :TYPE = (
let	val components = (map fst itym);
	val packed_components = "[" ^ flatpack components ^ "]";
	val tname = "Z'S" ^ packed_components;
	val targs = map snd itym;
in 
	mk_ctype (tname, targs)
end);
=TEX

\subsection{tuple types}



=SML
fun	€tuple_tname› (tyl: TYPE list) :string = "Z'T[" ^ number(length tyl) ^ "]";
fun	€tuple_type› (tyl: TYPE list) :TYPE = mk_ctype(tuple_tname tyl,tyl);
=TEX

\subsection{binding constructors}


=SML
fun	€bind_cname› (fid :string list) :string = "Z'Mk_S" ^ (val_set_ident fid);
fun	€bind_ctype› (itym :(string * TYPE) list) :TYPE =
		list_mk_≠_type(itymfunseq itym @[ bind_type itym]);
=TEX
=GFT Specification
fun 	bind_cterm (itym :(string * TYPE) list) :TERM =
		mk_const (bind_cname (map fst itym), bind_ctype itym);
=TEX
Implementation:
=SML
fun 	€bind_cterm› (itym :(string * TYPE) list) :TERM = (
let	val components = map fst itym;
	val sort_components = Sort.sort z_sig_order components;
	val vsi_components = "[" ^ flatpack sort_components ^ "]";
	val bind_cname_res = "Z'Mk_S" ^ vsi_components;
	val sort_itym = map (lassoc3 itym) sort_components;
	val bind_tname_components = "Z'S" ^ vsi_components;
	val bind_type_itym = mk_ctype (bind_tname_components, sort_itym);
	val bind_ctype_res = list_mk_≠_type(sort_itym @[ bind_type_itym]);
in
		mk_const (bind_cname_res, bind_ctype_res)
end);
=TEX
The following may be used when the first's of $itym$ are sorted.
=SML
fun 	€sorted_bind_cterm› (itym :(string * TYPE) list) :TERM = (
let	val components = map fst itym;
	val vsi_components = "[" ^ flatpack components ^ "]";
	val bind_cname_res = "Z'Mk_S" ^ vsi_components;
	val sort_itym = map snd itym;
	val bind_tname_components = "Z'S" ^ vsi_components;
	val bind_type_itym = mk_ctype (bind_tname_components, sort_itym);
	val bind_ctype_res = list_mk_≠_type(sort_itym @[ bind_type_itym]);
in
		mk_const (bind_cname_res, bind_ctype_res)
end);
=TEX
\subsection{tuple constructors}


=SML
fun	€tuple_cname› (sty:TYPE list) :string = "Z'Mk_T[" ^ (number(length sty)) ^ "]";
fun	€tuple_ctype› (sty:TYPE list) :TYPE = list_mk_≠_type (sty @ [ tuple_type sty]);
fun	€tuple_cterm› (sty:TYPE list) :TERM = mk_const(tuple_cname sty,tuple_ctype sty);
=TEX

\subsection{cartesian products}


=SML
fun	€prod_cname› (sty: TYPE list) :string = "Z'∏[" ^ (number(length sty)) ^ "]";
fun	€prod_ctype› (sty: TYPE list) :TYPE = 
	let	val spty = map (fn t => mk_ctype("SET",[t])) sty;
	in
		list_mk_≠_type(spty @ [mk_ctype("SET",[tuple_type sty])])
	end;
fun	€prod_cterm› (sty: TYPE list) :TERM = mk_const(prod_cname sty, prod_ctype sty);
=TEX

\subsection{binding projections}


=SML
fun	€bind_pname› (fid:string list) (i:string) :string =
		"Z'S" ^ (val_set_ident fid) ^ i;
fun	€bind_ptype› (itym:(string * TYPE) list) (i:string) :TYPE =
		mk_≠_type(bind_type itym,lassoc3 itym i);
fun	€bind_pterm› (itym:(string * TYPE) list) (i:string) :TERM =
		mk_const (bind_pname (map fst itym) i, bind_ptype itym i);
=TEX

\subsection{tuple projections}

=SML
fun	€tuple_pname› (tyl:TYPE list) (i:int) :string =
		"Z'T" ^ (val_set_ident [
			string_of_int (length tyl)]) ^ (string_of_int i);
fun	€tuple_ptype› (tyl:TYPE list) (i:int) :TYPE =
		mk_≠_type(tuple_type tyl, nth (i-1) tyl)
			handle X => (
				divert X
					"nth"
					"tuple_ptype"
					48003
					[]);
fun	€tuple_pterm› (tyl:TYPE list) (i:int) :TERM =
		mk_const (tuple_pname tyl i, tuple_ptype tyl i);
=TEX

\section{SCHEMAS}


\subsection{schema types}


=SML
fun	€schema_type› (itym:(string * TYPE) list) :TYPE =
		mk_ctype("SET",[bind_type itym]);
=TEX

\subsection{schema negation}


=SML
fun	€bind_≥_type› (itym:(string * TYPE) list) :TYPE =
		mk_≠_type (schema_type itym, schema_type itym);
fun	€bind_≥_term› (itym:(string * TYPE) list) :TERM = 
		mk_const ("Z'≥âs", bind_≥_type itym);
=TEX

\subsection{schema precondition}


=SML
fun	€bind_pre_name› (fid:string list) :string = "Z'Preâs" ^ (val_set_ident fid);
fun	€bind_pre_type› (itym:(string * TYPE) list) :TYPE =
	let	fun	sch_res ((_,"'"),_) = true
		|	sch_res ((_,"!"),_) = true
		|	sch_res _ = false
	in
		mk_≠_type(
			schema_type itym,
			schema_type(itym drop (sch_res o (unpack_ident ** Combinators.I)))
		)
	end;
fun	€bind_pre_term› (itym:(string * TYPE) list) :TERM =
		mk_const (bind_pre_name (map fst itym), bind_pre_type itym);
=TEX

\subsection{simple dyadic schema operations}


=SML
fun	€bind_dysc_name› (n:string) (fid1:string list) (fid2:string list) :string = 
		n ^ (val_set_ident fid1) ^ (val_set_ident fid2);
fun	€bind_dysc_type› (itym1:(string * TYPE)list) (itym2:(string * TYPE)list) :TYPE = 
		list_mk_≠_type
			[schema_type itym1,
			schema_type itym2,
			schema_type (itym1 cup' itym2)];
fun	€bind_dysc_term› (n:string) (itym1:(string * TYPE)list) (itym2:(string * TYPE)list) :TERM = 
		mk_const (	bind_dysc_name n (fst(split itym1)) (fst(split itym2)),
				bind_dysc_type itym1 itym2);
val	€bind_±_term› :(string * TYPE) list -> (string * TYPE) list -> TERM =
		bind_dysc_term "Z'±âs";
val	€bind_≤_term› :(string * TYPE) list -> (string * TYPE) list -> TERM =
		bind_dysc_term "Z'≤âs";
val	€bind_¥_term› :(string * TYPE) list -> (string * TYPE) list -> TERM =
		bind_dysc_term "Z'¥âs";
val	€bind_§_term› :(string * TYPE) list -> (string * TYPE) list -> TERM =
		bind_dysc_term "Z'§âs";
=TEX
\subsection{schema projection}


=SML
fun	€bind_˘_name› (fid1:string list) (fid2:string list) :string =
		"Z'˘âs" ^ (val_set_ident fid1) ^ (val_set_ident fid2);
fun	€bind_˘_type› (itym1:(string * TYPE) list) (itym2:(string * TYPE) list) :TYPE =
		list_mk_≠_type
			[schema_type itym1,
			schema_type itym2,
			schema_type itym2];

fun	€bind_˘_term› (itym1:(string * TYPE) list) (itym2:(string * TYPE) list) :TERM =
		mk_const (
			bind_˘_name (fst(split itym1)) (fst(split itym2)),
			bind_˘_type itym1 itym2);
=TEX

\subsection{schema hiding}


=SML
fun	€bind_hide_name› (fid1:string list) (fid2:string list) :string =
		"Z'Hideâs" ^ (val_set_ident fid1) ^ (val_set_ident fid2);
fun	€bind_hide_type› (itym:(string * TYPE) list) (fid2:string list) :TYPE =
		mk_≠_type(
			schema_type itym,
			schema_type(itym drop (fn(s,_)=> s mem fid2))
		);
fun	€bind_hide_term› (itym:(string * TYPE) list) (fid2:string list) :TERM =
		mk_const (
			bind_hide_name (map fst itym) fid2, 
			bind_hide_type itym fid2
		);
=TEX

\subsection{decoration}


=SML
fun	€bind_decor_name› (fid:string list) (s:string) :string =
		"Z'Decâs" ^ (val_set_ident fid) ^ "[" ^ s ^ "]";
fun	€bind_decor_type› (itym:(string * TYPE) list) (s:string) :TYPE =
		mk_≠_type(
			schema_type itym,
			schema_type(map(fn(id,ty)=>(id^s,ty))itym)
		);
fun	€bind_decor_term› (itym:(string * TYPE) list) (s:string) :TERM =
		mk_const (bind_decor_name (map fst itym) s, bind_decor_type itym s);
=TEX

\subsection{the delta operation}


=SML
fun	€bind_Ñ_name› (fid:string list) :string = "Z'Ñâs" ^ (val_set_ident fid);
fun	€bind_Ñ_type› (itym:(string * TYPE) list) :TYPE =
		mk_≠_type(
			schema_type itym,
			schema_type(itym @ (map (fn(id,ty)=>(id^"'",ty)) itym))
		);
fun	€bind_Ñ_term› (itym:(string * TYPE) list) :TERM =
		mk_const (bind_Ñ_name (map fst itym), bind_Ñ_type itym);
=TEX

\subsection{the $\Xi$ operation}


=SML
fun	€bind_ò_name› (fid:string list) :string = "Z'òâs" ^ (val_set_ident fid);
val	€bind_ò_type› :(string * TYPE) list -> TYPE = bind_Ñ_type;
fun	€bind_ò_term› (itym:(string * TYPE) list) :TERM =
		mk_const (bind_ò_name (map fst itym), bind_ò_type itym);
=TEX

\subsection{schema composition}


=SML
fun	€bind_ª_name› (fid1:string list) (fid2:string list) :string =
		"Z'ªâs" ^ (val_set_ident fid1) ^ (val_set_ident fid2);
fun	€bind_ª_type› (itym1:(string * TYPE) list) (itym2:(string * TYPE) list) :TYPE =
	let	val itym2' = map (fn(s,ty)=>(s^"'",ty)) itym2;
		val itym =	(itym1 drop (fn(s,_) => (s mem (fst(split itym2')))))
					@
				(itym2 drop (fn(s,_) => ((s^"'") mem (fst(split itym1)))));
	in
		list_mk_≠_type
			[schema_type itym1, 
			schema_type itym2,
			schema_type itym]
	end;
fun	€bind_ª_term› (itym1:(string * TYPE) list) (itym2:(string * TYPE) list) :TERM =
		mk_const (
			bind_ª_name (fst(split itym1)) (fst(split itym2)),
			bind_ª_type itym1 itym2
		);
=TEX
\subsection{schema renaming}
The following function, used in analysing the 2nd list of names
in the argument of $Z'Renameâs$ requires a name with a single
bar, ``$|$'', surrounded one either side by at least one character.
In addition subscripted or subscripting bars, which are allowed parts
of identifiers, are not considered to be splitting points.

This code duplicates that found in imp047.doc.
=SML
fun €split_on_bar› (s:string) : string * string = (
=SMLLITERAL
let	fun aux acc ("|" :: rest) = (
		if is_nil rest
		then fail "split_on_bar" 0 []
		else if hd rest = "â"
		then aux ("â" :: "|" :: acc) (tl rest)
		else (implode(rev acc),implode rest)
	) |  aux acc ("â" :: a :: rest) = (
		aux (a :: "â" :: acc) rest
	) | aux acc ("â" :: rest) = fail "split_on_bar" 0 []
	| aux acc (a :: rest) = aux (a :: acc) rest
	| aux acc [] = fail "split_on_bar" 0 [];
	val ss = explode s;
	val dummy = if is_nil ss
		then fail "split_on_bar" 0 []
		else ();
in
	aux [hd ss] (tl ss)
end);
=TEX
The checking that the name formation can be
undone might be removed in later releases when there is more
confidence in the setup.
=SML
fun	€bind_rename_name› (fid:string list)(ididl:(string * string)list) :string = (
let	val ididl' = (map (fn (x,y) => implode [x,"|",y]) ididl);
	val nm = "Z'Renameâs" ^ (val_set_ident fid) ^ (val_set_ident 
		ididl');
	val dummy = if (map split_on_bar ididl') ~= ididl
			then ()
			else fail "bind_rename_term" 48011 []
in
	nm
end);

fun	€bind_rename_type› (itym:(string * TYPE) list) (ididl:(string * string)list) :TYPE =
	mk_≠_type(
		schema_type itym,
		schema_type(map (fn (nm,ty) =>
			(rassoc1 ididl nm, ty)) itym)
	);
fun	€bind_rename_term› (itym:(string * TYPE) list) (ididl:(string * string)list)  :TERM =
	mk_const (bind_rename_name (map fst itym) ididl , 
		bind_rename_type itym ididl);
=TEX

\section{GLOBAL VARIABLES}

=SML
fun	€bind_gvar_name› (s : string) : string = "z'" ^ s;
fun	€bind_gvar_term› ((s,ty) : string * TYPE) : TERM =
		mk_const (bind_gvar_name s, ty);

fun	€unbind_gvar_name› (s : string) : string =
 	case explode s of
	("z"::"'"::rest) => implode rest
	|_ => fail "unbind_gvar_name" 48012 [fn () => s];

fun	€unbind_gvar_term› (term : TERM) : (string * TYPE) =
	let	val (s, ty) = dest_const term;
	in
		(unbind_gvar_name s, ty)
	end;
=TEX


\section{VARIABLE BINDING CONSTRUCTS}


\subsection{group 1 packs}


=SML
val	€g1_bind_sig› :(string * TYPE) list = [
		("d",BOOL),
		("p",BOOL)];
val	€g1_bind_cterm›	:TERM = bind_cterm g1_bind_sig;
val	€g1_bind_type› :TYPE = bind_type g1_bind_sig;
=TEX
\subsection{group 2 packs}


=SML
fun	€g2_bind_sig› (ty:TYPE) :(string * TYPE) list = [
		("d",BOOL),
		("p",BOOL),
		("v",ty)];
fun	€g2_bind_cterm› (ty:TYPE) :TERM = sorted_bind_cterm (g2_bind_sig ty);
fun	€g2_bind_type› (ty:TYPE) :TYPE = sorted_bind_type (g2_bind_sig ty);
=TEX
\subsection{group 3 packs}


=SML
fun	€g3_bind_sig› (ty1:TYPE) (ty2:TYPE) :(string * TYPE) list = [
		("d",BOOL),
		("p",BOOL),
		("t",ty1),
		("v",ty2)];
fun	€g3_bind_cterm› (ty1:TYPE) (ty2:TYPE) :TERM = sorted_bind_cterm (g3_bind_sig ty1 ty2);
fun	€g3_bind_type› (ty1:TYPE) (ty2:TYPE) :TYPE = sorted_bind_type (g3_bind_sig ty1 ty2);
=TEX

\subsection{bindings yielding schema expressions}


\subsubsection{schemas}


=SML
fun	€schema_bname› (fid:string list) :string =
		"Z'âs" ^ (val_set_ident fid);
fun	€schema_btype› (itym:(string * TYPE) list) :TYPE =
		mk_≠_type(
			list_mk_≠_type (itymfunseq itym @[ g1_bind_type]),
			schema_type itym
		);
fun	€schema_bterm› (itym:(string * TYPE) list) :TERM =
		mk_const (schema_bname (map fst itym), schema_btype itym);
=TEX

\subsubsection{schema existential quantification}


=SML
fun	€∂âs_bname› (fid1:string list) (fid2:string list) :string =
		"Z'∂âs" ^
		(val_set_ident fid1) ^
		(val_set_ident fid2);
fun	€∂âs_btype› (itym1:(string * TYPE) list) (itym2:(string * TYPE) list) :TYPE =
		list_mk_≠_type[
			list_mk_≠_type (itymfunseq itym1 @[ g1_bind_type]),
			schema_type itym2,
			schema_type (itym2 diff' itym1)];
fun	€∂âs_bterm› (itym1:(string * TYPE) list) (itym2:(string * TYPE) list) :TERM =
		mk_const (
			∂âs_bname (fst(split itym1)) (fst(split itym2)),
			∂âs_btype itym1 itym2
		);
=TEX

\subsubsection{schema unique existential quantification}


=SML
fun	€∂â1âs_bname› (fid1:string list) (fid2:string list) :string =
		"Z'∂â1âs" ^
		(val_set_ident fid1) ^
		(val_set_ident fid2);
fun	€∂â1âs_btype› (itym1:(string * TYPE) list) (itym2:(string * TYPE) list) :TYPE =
		∂âs_btype itym1 itym2;
fun	€∂â1âs_bterm› (itym1:(string * TYPE) list) (itym2:(string * TYPE) list) :TERM =
		mk_const (
			∂â1âs_bname (fst(split itym1)) (fst(split itym2)),
			∂â1âs_btype itym1 itym2
		);
=TEX

\subsubsection{schema universal quantification}


=SML
fun	€µâs_bname› (fid1:string list) (fid2:string list) :string =
		"Z'µâs" ^
		(val_set_ident fid1) ^
		(val_set_ident fid2);
fun	€µâs_btype› (itym1:(string * TYPE) list) (itym2:(string * TYPE) list) :TYPE =
		∂âs_btype itym1 itym2;
fun	€µâs_bterm› (itym1:(string * TYPE) list) (itym2:(string * TYPE) list) :TERM =
		mk_const (
			µâs_bname (fst(split itym1)) (fst(split itym2)),
			µâs_btype itym1 itym2
		);
=TEX

\subsubsection{existential quantification}


=SML
val	€∂_bname› : string = "Z'∂";
val	€∂_bterm› : TERM =
		mk_const (∂_bname, mk_≠_type (BOOL,BOOL));
val	€∂body_bterm› : TERM =
		mk_const ("Z'∂Body", list_mk_≠_type [BOOL,BOOL,BOOL,BOOL]);
=TEX

\subsubsection{unique existential quantification}

=SML
local
val g2_bind_type_bool = g2_bind_type BOOL;
in
fun	€∂â1_bname› (fid:string list) :string = 
		"Z'∂â1[" ^ (number(length (idsetseq fid))) ^ "]";
fun	€∂â1_btype› (itym:(string * TYPE) list) :TYPE =
		mk_≠_type
			(list_mk_≠_type (itymfunseq itym @[ g2_bind_type_bool]), BOOL);
fun	€∂â1_bterm› (itym:(string * TYPE) list) :TERM =
		mk_const (∂â1_bname (map fst itym), ∂â1_btype itym);
end;
=TEX

\subsubsection{universal quantification}

=SML
val	€µ_bname› : string = "Z'µ";
val	€µ_bterm› : TERM =
		mk_const (µ_bname, mk_≠_type (BOOL,BOOL));
val	€µbody_bterm› : TERM =
		mk_const ("Z'µBody", list_mk_≠_type [BOOL,BOOL,BOOL, BOOL]);
=TEX


\subsubsection{set abstraction}


=SML
fun	€seta_bname› (fid:string list) :string = 
		"Z'Seta[" ^ (number(length (idsetseq fid))) ^ "]";
fun	€seta_btype› (itym:(string * TYPE) list) (ty:TYPE) :TYPE =
		mk_≠_type(
			list_mk_≠_type(
				itymfunseq itym @
				[g2_bind_type ty]
			),
			mk_ctype ("SET",[ty])
		);
fun	€seta_bterm› (itym:(string * TYPE) list) (ty:TYPE) :TERM =
		mk_const (seta_bname (map fst itym), seta_btype itym ty);
=TEX

\subsubsection{lambda abstraction}



=SML
fun	€Ã_bname› (fid:string list) :string = 
		"Z'Ã[" ^ (number(length (idsetseq fid))) ^ "]";
fun	€Ã_btype› (itym:(string * TYPE) list) (t_ty:TYPE) (v_ty:TYPE) :TYPE =
		mk_≠_type(
			list_mk_≠_type(
				itymfunseq itym @
				[g3_bind_type t_ty v_ty]
			),
			mk_ctype ("SET",[tuple_type [t_ty,v_ty]])
		);
fun	€Ã_bterm› (itym:(string * TYPE) list) (t_ty:TYPE) (v_ty:TYPE) :TERM =
		mk_const (Ã_bname (map fst itym), Ã_btype itym t_ty v_ty);
=TEX
\subsubsection{definite description}


=SML
fun	€Õ_bname› (fid:string list) :string = 
		"Z'Õ[" ^ (number(length (idsetseq fid))) ^ "]";
fun	€Õ_btype› (itym:(string * TYPE) list) (ty:TYPE) :TYPE =
		mk_≠_type(
			list_mk_≠_type(
				itymfunseq itym @
				[g2_bind_type ty]
			),
			ty
		);
fun	€Õ_bterm› (itym:(string * TYPE) list) (ty:TYPE) :TERM =
		mk_const (Õ_bname (map fst itym), Õ_btype itym ty);
=TEX

\subsection{Computing the Abstractions}


=SML
fun	€schema_abs› (itym:(string * TYPE) list) (ft:TERM) :TERM =
	let	val sl = idsetseq(map fst itym);
		val tyl = map (lassoc3 itym) sl;
	in
		list_mk_simple_Ã (map mk_var (combine sl tyl),ft)
	end;
=TEX


=SML
fun	€schema_∂› (itym:(string * TYPE) list) (ft:TERM) :TERM =
	let	val sl = idsetseq(map fst itym);
		val tyl = map (lassoc3 itym) sl;
	in
		mk_app (∂_bterm, list_mk_simple_∂(map mk_var (combine sl tyl), ft))
	end;
=TEX
=SML
fun	€schema_µ› (itym:(string * TYPE) list) (ft:TERM) :TERM =
	let	val sl = idsetseq(map fst itym);
		val tyl = map (lassoc3 itym) sl;
	in
		mk_app (µ_bterm, list_mk_simple_µ(map mk_var (combine sl tyl),ft))
	end;
=TEX


\subsubsection{group 1 abstractions}

=SML
fun	€g1_abs› (ft2:TERM,ft3:TERM,itym:(string * TYPE) list)	= 
		schema_abs itym (list_mk_app (g1_bind_cterm,[ft2,ft3]))
	handle X => (
		divert 	X 
			"list_mk_app" 
			"g1_abs" 
			48002 
			[fn() => string_of_term ft2,fn() => string_of_term ft3]
	);
=TEX

\subsubsection{group 2 abstractions}

=SML
fun	€g2_abs› (ft2:TERM,ft3:TERM,ft4:TERM,itym:(string * TYPE) list) = 
		schema_abs 
			itym 
			(list_mk_app (g2_bind_cterm (type_of ft4), [ft2, ft3, ft4]))
	handle X => (
		divert 	X 
			"list_mk_app" 
			"g2_abs" 
			48002 
			[fn() => string_of_term ft2,fn() => string_of_term ft3]
	);
=TEX
\subsubsection{group 3 abstractions}

=SML
fun	€g3_abs› (ft1:TERM,ft2:TERM,ft3:TERM,ft4:TERM,itym:(string * TYPE) list) = 
		schema_abs 
			itym 
			(list_mk_app (g3_bind_cterm (type_of ft1) (type_of ft4), [ft2, ft3, ft1, ft4]))
	handle X => (
		divert 	X 
			"list_mk_app" 
			"g3_abs" 
			48002 
			[fn() => string_of_term ft2,fn() => string_of_term ft3]
	);
=TEX
\subsubsection{group 2 quantification}

=SML
fun	€g2_∂› (ft2:TERM,ft3:TERM,ft4:TERM,itym:(string * TYPE) list) = (
	schema_∂ itym 
		(list_mk_app (∂body_bterm, [ft2, ft3, ft4]))
	handle X => (
		divert 	X 
			"list_mk_app" 
			"g2_quant" 
			48002 
			[fn() => string_of_term ft2,fn() => string_of_term ft3]
	)
);
=TEX

=SML
fun	€g2_µ› (ft2:TERM,ft3:TERM,ft4:TERM,itym:(string * TYPE) list) = (
	schema_µ itym 
		(list_mk_app (µbody_bterm, [ft2, ft3, ft4]))
	handle X => (
		divert 	X 
			"list_mk_app" 
			"g2_quant" 
			48002 
			[fn() => string_of_term ft2,fn() => string_of_term ft3]
	)
);
=TEX

\section{END OF SIGNATURE}
=SML
end (* end of structure ZTypesAndTermsSupport *);
=TEX
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}
