=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design of Z Primitive Constants in the Theory ``Z''}  %% Mandatory field
\def\TPPheadtitle{Detailed Design of Z Primitive Constants \cr in the Theory ``Z''}
\TPPref{DS/FMU/IED/DTD052}  %% Mandatory field
\def\SCCSversion{$Revision$ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{G.M.Prout&WIN01}  %% Mandatory field
%\TPPauthors{G.T.Scullard&WIN01\\G.M.Prout&WIN01 }
\TPPauthorisation{R.B.Jones & Project Manager}
\TPPabstract{This document contains the detailed design of the Z primitive constants in the theory ``Z'' of the Z Proof Support Subsystem.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history} 
\begin{description}
\item [Issue 1.1] 
First draft version.
\item [Issue 1.2] (\TPPdate{\FormatDate{$Date$
}})
Constant names altered to comply with \cite{DS/FMU/IED/DTD047}.
\end{description}
%\subsection{Changes forecast}
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for the 
Z primitive constants in the theory ``Z'' of
the Z Proof Support System (see \cite{DS/FMU/IED/HLD015}).
This is called for in \cite{DS/FMU/IED/HLD017}.
The design is
implemented in \cite{DS/FMU/IED/IMP052}.
\subsection{Introduction}
\subsubsection{Purpose and Background}
In the Z Proof Support Subsystem, two types of constants have been identified:
\begin{enumerate}
\item
 Constants defined as primitive  in the system.
\item 
Constants that belong to infinite families and thus cannot be defined as primitive, see \cite{DS/FMU/IED/DTD050}. 
\end{enumerate}
This document gives the detailed design for the theory ``Z'' which contains the constants of type (1). 
\subsubsection{Dependencies}
The functions in this document are dependent on the Release 1 ICL HOL System and the theory design tools of \cite{DS/FMU/IED/DTD035}.
\subsubsection{Notation}
All constants that are used in the Z semantic mapping described in \cite{DS/FMU/IED/HLD015} are preceded by $Z'$. These constants should not be used by the user of the Z proof support system {\bf unless} the user is prepared to drop out of Z into HOL.
=IGN
\subsubsection{Deficiencies}
\section{ERROR REPORTING}
=TEX
\section{THE THEORY  ``Z''}
\subsection{Design of the Theory ``Z''}
=THDOC
req_name "Z" (Value "char");
=DESCRIBE
The theory ``‚Z·'' defines the primitive constants of the Z Proof Support System.
=ENDDOC

=THDOC
req_type("T_[1]",1);
req_const("Z'T[1]",ª:'1 ã '1 $"T_[1]"º);
req_type("T_[2]",2);
req_const("Z'T[2]",ª:'1 ã '2 ã ('1,'2)$"T_[2]"º);
=DESCRIBE
The types ``‚T\_[1]·'' and ``‚T\_[2]·'' are tuple types  constructed by $mk\_ZtupleT$ of \cite{DS/FMU/IED/DTD047}.
 Their definitions are generated by the function $tuple\_type\_definition$, described in \cite{DS/FMU/IED/DTD050}, and stored under $‚T\_1\_def·$ and $‚T\_2\_def·$ respectively. The constants ``‚Z'T[1]·'' and ``‚Z'T[2]·'' are the corresponding tuple constructors, also  generated by the function $tuple\_type\_definition$. Their definitions are stored under $‚Z'T\_1\_def·$ and $‚Z'T\_2\_def·$ respectively.
They are required by some of the constants defined below.
=ENDDOC
=THDOC
req_const ("Z'IsëRep",ª:('a ã BOOL) ã BOOLº);
req_defn("Z'IsëRep",([],ªçP:'a ã BOOLéTº));
=DESCRIBE
The representation type of sets, as given by
``‚Z'IsëRep·'' is just any function from
the type of objects of the set to ª:BOOLº.
Its definition is saved under the key ``Z'IsëRep''.
=ENDDOC
=THDOC
req_type("ë",1);
req_defn("ë",([],ªÑ P:'a ë ã 'a ã BOOLé TypeDefn $"Z'IsëRep" Pº));
=DESCRIBE
The  type of sets ``‚ë·'' is given by the representation
function Z'IsëRep.
=ENDDOC
Same as the  type of sets $SET$ in ICL HOL.
=THDOC
req_const("Z'absë",ª:('a ã BOOL) ã 'a ëº);
req_const("ù",ª:'a ã 'a ë ã BOOLº);
req_infix(230,"ù");
list_req_defn(["Z'absë","ù"],
	([],ªÉ x p S1 S2é (x ù $"Z'absë" p Ç p x) Ä
  (S1 = S2 Ç (É xé x ù S1 Ç x ù S2))º));
=DESCRIBE
The constant ``‚Z'absë·'' is the set abstraction function.
The constant ``‚ù·'' is the set membership relation. 
=ENDDOC
``ù'' is the same as $ù$ in ICL HOL.
=THDOC
req_const("Z'§",ª:'a ëº);
req_defn("Z'§",([],ªÉ x é å(x ù $"Z'§")º));
req_const("Z'°",ª:'a ë ã 'a ë ã 'a ëº);
req_defn("Z'°",([],ªÉ (x:'a) (S1:'a ë) (S2 : 'a ë) é x ù ($"Z'°" S1 S2) Ç (x ù S1) Å (x ù S2)º));
req_const("Z'SingletonSet",ª:'a ã 'a ëº);
req_defn("Z'SingletonSet",([],ªÉ x yé y ù Z'SingletonSet x Ç y = xº));
=DESCRIBE
The constant ``‚Z'§·'' is the empty set and ``‚Z'°·'' is the set union operator. ``‚Z'SingletonSet·'' is the construnction function for a set containing a single element. These constants are used in the formation of the power set and sequence constructors that follow.
=ENDDOC
``Z'§'' , ``Z'°'' and ``Z'SingletonSet'' are the same as $§$, $°$ and  $\{\}$ respectively in ICL HOL.
=THDOC
req_thm("Z'ë_clauses",([], ª
	É (x : 'a) (y : 'a)(p:'a ã BOOL) (S1: 'a ë) (S2 : 'a ë)é
	(x ù ($"Z'absë" p) Ç p x) Ä
	((S1 = S2) Ç (É x:'aé x ù S1 Ç x ù S2)) Ä
	å(x ù $"Z'§") Ä
	 (x ù ($"Z'°" S1 S2) Ç x ù S1 Å x ù S2) Ä
	(y ù Z'SingletonSet x Ç y = x)º));
=DESCRIBE
``‚Z'ë\_clauses·'' is a miscellaneous collection of theorems about sets, drawn from the definitions,   
which are appropriate for rewriting.
=ENDDOC

=THDOC
req_const("true",ª:BOOLº);
req_defn("true",([],ªtrue = Tº));
req_const("false",ª:BOOLº);
req_defn("false",([],ªfalse = Fº));
req_const("bool",ª:BOOL ëº);
req_defn("bool",([],ªÉ xé x ù bool Ç (x Ç true) Å (x Ç false)º));
=DESCRIBE
The constants ``‚true·'', ``‚false·''  and ``‚bool·'' are equivalent to $T$, $F$ and $BOOL$ 
respectively in ICL HOL. Their definitions are stored under $‚true\_def·$, $‚false\_def·$ and $‚bool\_def·$.
=ENDDOC
=THDOC
req_const("Z'dec",ª:('a LIST â 'a ë )ã BOOLº);
req_defn("Z'dec",([],ªÉ vs é Z'dec ([], vs) Ä 
	(É v vl é Z'dec ((Cons v vl), vs) Ç v ù vs Ä Z'dec (vl, vs))º));
req_const("Z'decsexp",ª:'a ã 'a ë ã BOOLº);
req_defn("Z'decsexp",([],ªZ'decsexp = $ùº));
req_const("Z'decl",ª:BOOL LIST ã BOOLº);
req_defn("Z'decl",([],ªZ'decl [] Ä 
	(É b blé Z'decl (Cons b bl) Ç b Ä Z'decl bl)º));
=DESCRIBE
``‚Z'dec·'' takes a list of variables and a set of the same type as the variables in the list and returns a simple declaration. Its definition is stored under $‚Z'dec\_def·$.
``‚Z'decsexp·'' has the same meaning as the constant ``ù'', except it is not declared as infix. It is required 
for the invisible membership assertions which occur when a schema designator is used as a declaration. Its definition is stored under $‚Z'decsexp\_def·$.
``‚Z'decl·'' takes a declaration list and returns a term of type $BOOL$, the conjuntion of the declarations in 
the list. Its definition is stored under $‚Z'decl\_def·$.
=ENDDOC
=THDOC
req_const("Z'totality",ª:'a ë º);
req_defn("Z'totality",([],ªÉx:'aéx ù Z'totalityº));
req_const("U",ª:('1)$"T_[1]" ã '1º);
req_defn("U",([],ªÉxé U ($"Z'T[1]" x) = xº));
=DESCRIBE
The constant ``‚Z'totality·'' is the set of all members of a type. It is used by the type inference system and 
its definition is stored under $‚Z'totality\_def·$. 
``‚U·'' represents the universal type; its definition is stored under $‚U\_def·$. 
=ENDDOC

=THDOC
req_type("Ì", 0);
req_const("Ü_to_Ì",ª:Ü ã Ìº);
=DESCRIBE
???
=ENDDOC


=THDOC
req_const("Z'ë",ª:'a ë ã ('a ë)ëº);
req_defn("Z'ë",([],ªÉ X Sé X ù $"Z'ë" S Ç (É xé x ù X ä x ù S)º));
req_const("Z'setd",ª:'a LIST ã 'a ëº);
req_defn("Z'setd",([],ªZ'setd Nil = $"Z'§"
	Ä É h t é Z'setd (Cons  h t) = $"Z'°" (Z'setd t)(Z'SingletonSet h)º));
req_const("Z'NumList",ª:('a LIST â Ü ) ã (((Ì, 'a)$"T_[2]") ë)º);
req_defn("Z'NumList",([],ªÉn:ÜéZ'NumList ([],n) = $"Z'§"
	Ä (É a list é Z'NumList  ((Cons  a list),n) = 
		$"Z'°" (Z'NumList (list,n + 1)) 
			(Z'SingletonSet	($"Z'T[2]" (Ü_to_Ì(n + 1))a)))º));
req_const("Z'æø",ª:'a LIST ã ((Ì, 'a)$"T_[2]")ëº);
req_defn("Z'æø",([],ªÉlé$"Z'æø" l =  Z'NumList (l,0)º));
=DESCRIBE
The constants ``‚Z'ë·'' and ``‚Z'setd·'' are the power set and set constructors. 
Their definitions are stored under $‚Z'ë\_def·$ and $‚Z'setd\_def·$. 
``‚Z'NumList·'' is an auxiliary constant used in the definition of ``‚Z'æø·'', the sequence constructor. 
$Z'NumList$ is stored under $‚Z'NumList\_def·$, and $Z'æø$ under $‚Z'æø\_def·$.
=ENDDOC


=THDOC
req_const("Z'á",ª:('a ã BOOL) ã 'aº);
req_defn("Z'á",([],ªÉ f t é ((f = (çxéx = t)) ä ($"Z'á" f = t))º));
req_const("Z'app",ª:(('a,'b)$"T_[2]")ë ã 'a ã 'b º);
req_defn("Z'app",([],ªÉf (x:'a) é Z'app  f x = 
	$"Z'á"(çy:'bé($"Z'T[2]" x y) ù f)º));
=DESCRIBE
``‚Z'á·'' is the definite description constant. Its definition is stored under $‚Z'á\_def·$.  ``‚Z'app·'' forms an application of one Z term to another. Its definition is stored under $‚Z'app\_def·$. 
=ENDDOC
=THDOC
req_const("Z'≠",ª:'a ã 'b ã 'aº);
req_defn("Z'≠",([],ªÉ x y é $"Z'≠" x y = xº));
req_const("Z'predsexp",ª:'a ã 'a ë ã BOOLº);
req_defn("Z'predsexp",([],ªZ'predsexp = $ùº));
=DESCRIBE
The constant ``‚Z'≠·'' has the same meaning as $CombK$, the deletion combinator in ICL HOL. Its definition is stored under $‚Z'≠\_def·$. 
``‚Z'predsexp·'' has the same meaning as the constant ``ù'', except it is not declared as infix. It is required 
for the invisible membership assertions which occur when a schema designator is used as a predicate. 
Its definition is stored under $‚Z'predsexp\_def·$. 
=ENDDOC
=THDOC
req_const("Z'å%down%s",ª:'a ë ã 'a ëº);
req_defn("Z'å%down%s",([],ªÉ x s é x ù $"Z'å%down%s" s Ç å(x ù s)º));
=DESCRIBE
The constant ``‚Z'å\%down\%s·'' is schema negation. Its definition is stored under $‚Z'å\%down\%s\_def·$.
=ENDDOC
\subsection{End of the Design of the Theory ``Z''}
=THSML
summarize_td_results ();
val Z_success = theory_check_success ();
=TEX
\subsection{Signature of the theory ``Z''}
=DOC
signature ‚ZTheory· = sig
	val ‚T_1_def· : THM;
	val ‚T_2_def· : THM;
	val ‚Z'T_1_def· : THM;
	val ‚Z'T_2_def· : THM;
	val ‚Z'ë_clauses· : THM;
	val ‚true_def· : THM;
	val ‚false_def· : THM;
	val ‚bool_def· : THM;
	val ‚Z'dec_def· : THM;
	val ‚Z'decsexp_def· : THM;
	val ‚Z'decl_def· : THM;
	val ‚Z'totality_def· : THM;
	val ‚U_def· : THM;
	val ‚Z'ë_def· : THM;
	val ‚Z'setd_def· : THM;
	val ‚Z'NumList_def· : THM;
	val ‚Z'æø_def· : THM;
	val ‚Z'á_def· : THM;
	val ‚Z'app_def· : THM;
	val ‚Z'≠_def· : THM;
	val ‚Z'predsexp_def· : THM;
	val ‚Z'å%down%s_def· : THM;
	
=DESCRIBE
The theorems which define the Z primitive constants and associated types are packaged into this signature.
=ENDDOC


\subsection{End of the Signature of the Theory ``Z''}
=SML
end (* end of signature ZTheory*);
=TEX
\section{TEST POLICY}
Any functions given in this document should be tested according to the
general criteria set out in \cite{DS/FMU/IED/PLN008}, using the
tests in \cite{DS/FMU/IED/MDT052}.
In \cite{DS/FMU/IED/MDT052} the theory produced is checked by the theory design tools
of \cite{DS/FMU/IED/DTD035}, against the theory design provided.
=TEX
\newpage
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}
