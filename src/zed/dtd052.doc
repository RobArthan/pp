=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design of Z Primitive Constants in the Theory ``Z''}  %% Mandatory field
\def\TPPheadtitle{Detailed Design of Z Primitive Constants \cr in the Theory ``Z''}
\TPPref{DS/FMU/IED/DTD052}  %% Mandatory field
\def\SCCSversion{$Revision$ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{G.M.Prout&WIN01}  %% Mandatory field
%\TPPauthors{G.T.Scullard&WIN01\\G.M.Prout&WIN01 }
\TPPauthorisation{R.B.Jones & Project Manager}
\TPPabstract{This document contains the detailed design of the Z primitive constants in the theory ``Z'' of the Z Proof Support Subsystem.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History} 
\begin{description}
\item [Issue 1.1] 
First draft version.
\item [Issue 1.2] 
Constant names altered to comply with \cite{DS/FMU/IED/DTD047}.
\item [Issue 1.3]
More alterations to names. Theorems removed from signature.
\item [Issue 1.4] (\TPPdate{\FormatDate{$Date$
}})
Projection functions for tuple types included; definition of $U$ changed.
\item [Issue 1.5] (\TPPdate{\FormatDate{$Date$
}})
Changed to new fonts
\end{description}
%\subsection{Changes Forecast}
\section{GENERAL}
\subsection{Scope}
This document contains the detailed design for the 
Z primitive constants in the theory ``Z'' of
the Z Proof Support System (see \cite{DS/FMU/IED/HLD015}).
This is called for in \cite{DS/FMU/IED/HLD017}.
The design is
implemented in \cite{DS/FMU/IED/IMP052}.
\subsection{Introduction}
\subsubsection{Purpose and Background}
In the Z Proof Support Subsystem, two types of constants have been identified:
\begin{enumerate}
\item
 Constants defined as primitive  in the system.
\item 
Constants that belong to infinite families and thus cannot be defined as primitive, see \cite{DS/FMU/IED/DTD050}. 
\end{enumerate}
This document gives the detailed design for the theory ``Z'' which contains the constants of type (1). 
\subsubsection{Dependencies}
The functions in this document are dependent on the Release 1 ICL HOL System and the theory design tools of \cite{DS/FMU/IED/DTD035}.
\subsubsection{Notation}
All constants that are used in the Z semantic mapping described in \cite{DS/FMU/IED/HLD015} are preceded by $Z'$. These constants should not be used by the user of the Z proof support system {\bf unless} the user is prepared to drop out of Z into HOL.
=IGN
\subsubsection{Deficiencies}
\section{ERROR REPORTING}
=TEX
\section{THE THEORY  ``Z''}
\subsection{Design of the Theory ``Z''}
=THDOC
req_name "z_language" (Value "z");
=DESCRIBE
The theory €z_language› defines the primitive constants of the Z Proof Support System.
=ENDDOC

=THDOC
req_type("Z'T[1]",1);
req_const("Z'Mk_T[1]",¨:'1 ≠ '1 $"Z'T[1]"Æ);
req_const("Z'T[1]1",¨:'1 $"Z'T[1]" ≠ '1Æ);
req_type("Z'T[2]",2);
req_const("Z'Mk_T[2]",¨:'1 ≠ '2 ≠ ('1,'2)$"Z'T[2]"Æ);
=DESCRIBE
The types €Z'T[1]› and €Z'T[2]› are tuple types. Their definitions are generated by $labelled\_product\_spec$, 
described in \cite{DS/FMU/IED/DTD059}, and stored under $Z'T[1]$ and $Z'T[2]$ respectively. The constants
 €Z'Mk\_T[1]› and €Z'Mk\_T[2]› are the corresponding tuple constructors. The tuple projection €Z'T[1]1› 
 for the one tuple is also required. These three constants are also  generated by $labelled\_product\_spec$. 
The defining theorem for both €Z'Mk\_T[1]› and €Z'T[1]1› 
is stored under the keys $Z'Mk\_T[1]$ and  $Z'T[1]1$. 
The defining theorem for €Z'Mk\_T[2]› (and the projections 
€Z'T[2]1› and €Z'T[2]2› ,although they are not needed here)
 is stored under the key $Z'Mk\_T[2]$ (and also the keys
 $Z'T[2]1$ and $Z'T[2]1$).
These types and their associated constants are required by some of the constants defined below.
€ç› is the same as $ç$ in ICL HOL.
=THDOC
req_const("true",¨:BOOLÆ);
req_defn("true",([],¨true = TÆ));
req_const("false",¨:BOOLÆ);
req_defn("false",([],¨false = FÆ));
req_const("bool",¨:BOOL Æ);
req_defn("bool",([],¨µ x∑ x ç bool § (x § true) ≤ (x § false)Æ));
=DESCRIBE
The constants €true›, €false›  and €bool› are equivalent to $T$, $F$ and $BOOL$ 
respectively in ICL HOL. Their definitions are stored under the keys $true$, $false$ and $bool$ respectively.
=ENDDOC
=THDOC
req_const("Z'dec",¨:('a LIST ∏ 'a SET )≠ BOOLÆ);
req_defn("Z'dec",([],¨µ vs ∑ Z'dec ([], vs) ± 
	(µ v vl ∑ Z'dec ((Cons v vl), vs) § v ç vs ± Z'dec (vl, vs))Æ));
req_const("Z'decsexp",¨:'a ≠ 'a SET ≠ BOOLÆ);
req_defn("Z'decsexp",([],¨Z'decsexp = $çÆ));
req_const("Z'decl",¨:BOOL LIST ≠ BOOLÆ);
req_defn("Z'decl",([],¨Z'decl [] ± 
	(µ b bl∑ Z'decl (Cons b bl) § b ± Z'decl bl)Æ));
=DESCRIBE
€Z'dec› takes a list of variables and a set of the same type as the variables in the list and returns a simple declaration. Its definition is stored under the key $Z'dec$.
€Z'decsexp› has the same meaning as the constant ç, except it is not declared as infix. It is required 
for the invisible membership assertions which occur when a schema designator is used as a declaration. Its definition is stored under the key $Z'decsexp$.
€Z'decl› takes a declaration list and returns a term of type $BOOL$, the conjuntion of the declarations in 
the list. Its definition is stored under the key $Z'decl$.
=ENDDOC
=THDOC
req_const("Z'Totality",¨:'a SET Æ);
req_defn("Z'Totality",([],¨µx:'a∑x ç Z'totalityÆ));
req_const("U",¨:('1)$"Z'T[1]" ≠ '1Æ);
req_defn("U",([],¨U = $"Z'T[1]1"Æ));
=DESCRIBE
The constant €Z'totality› is the set of all members of a type. It is used by the type inference system and 
its definition is stored under the key $Z'totality$. 
€U› represents the universal type; its definition is stored under the key $U$. 
=ENDDOC

=THDOC
req_type("˙", 0);
req_const("Ó_to_˙",¨:Ó ≠ ˙Æ);
=DESCRIBE
???
=ENDDOC


=THDOC
req_const("Z'",¨:'a SET ≠ ('a SET)SETÆ);
req_defn("Z'",([],¨µ X S∑ X ç $"Z'" S § (µ x∑ x ç X ¥ x ç S)Æ));
req_const("Z'setd",¨:'a LIST ≠ 'a SETÆ);
req_defn("Z'setd",([],¨Z'setd Nil = {}
	± µ h t ∑ Z'setd (Cons  h t) = (Z'setd t) ¿ {h}Æ));
req_const("Z'NumList",¨:('a LIST ∏ Ó) ≠ (((˙, 'a)$"Z'T[2]") SET)Æ);
req_defn("Z'NumList",([],¨µn:Ó∑Z'NumList ([],n) = {}
	± (µ a list ∑ Z'NumList  ((Cons  a list), n) = 
		(Z'NumList (list,n + 1)) ¿
			{$"Z'Mk_T[2]" (Ó_to_˙(n + 1)) a})Æ));
req_const("Z'ß¢",¨:'a LIST ≠ ((˙, 'a)$"Z'T[2]")SETÆ);
req_defn("Z'ß¢",([],¨µl∑$"Z'ß¢" l =  Z'NumList (l,0)Æ));
=DESCRIBE
The constants €Z'› and €Z'setd› are the power set and set constructors. 
Their definitions are stored under the keys $Z'$ and $Z'setd$. 
€Z'NumList› is an auxiliary constant used in the definition of €Z'ß¢›, the sequence constructor. 
$Z'NumList$ is stored under the key $Z'NumList$, and $Z'ß¢$ under the key $Z'ß¢$.
=ENDDOC


=THDOC
req_const("Z'Õ",¨:('a ≠ BOOL) ≠ 'aÆ);
req_defn("Z'Õ",([],¨µ f t ∑ ((f = (Ãx∑x = t)) ¥ ($"Z'Õ" f = t))Æ));
req_const("Z'app",¨:(('a,'b)$"Z'T[2]")SET ≠ 'a ≠ 'b Æ);
req_defn("Z'app",([],¨µf (x:'a) ∑ Z'app  f x = 
	$"Z'Õ"(Ãy:'b∑($"Z'Mk_T[2]" x y) ç f)Æ));
=DESCRIBE
€Z'Õ› is the definite description constant. Its definition is stored under the key $Z'Õ$.  €Z'app› forms an application of one Z term to another. Its definition is stored under the key $Z'app$. 
=ENDDOC
=THDOC
req_const("Z' ",¨:'a ≠ 'b ≠ 'aÆ);
req_defn("Z' ",([],¨µ x y ∑ $"Z' " x y = xÆ));
req_const("Z'predsexp",¨:'a ≠ 'a SET ≠ BOOLÆ);
req_defn("Z'predsexp",([],¨Z'predsexp = $çÆ));
=DESCRIBE
The constant €Z' › has the same meaning as $CombK$, the deletion combinator in ICL HOL. Its definition is stored under the key $Z' $. 
€Z'predsexp› has the same meaning as the constant ç, except it is not declared as infix. It is required 
for the invisible membership assertions which occur when a schema designator is used as a predicate. 
Its definition is stored under the key $Z'predsexp$. 
=ENDDOC
=THDOC
req_const("Z'≥%down%s",¨:'a SET ≠ 'a SETÆ);
req_defn("Z'≥%down%s",([],¨µ x s ∑ x ç $"Z'≥%down%s" s § ≥(x ç s)Æ));
=DESCRIBE
The constant €Z'≥\%down\%s› is schema negation. Its definition is stored under the key $Z'≥\%down\%s$.
=ENDDOC
\subsection{End of the Design of the Theory ``ZLanguage''}
=THSML
summarize_td_results ();
val Z_success = theory_check_success ();
=TEX
\subsection{Signature of the theory ``ZLanguage''}
=DOC
signature €ZLanguage› = sig
=DESCRIBE

=ENDDOC


\subsection{End of the Signature of the Theory ``ZLanguage''}
=SML
end (* end of signature ZLanguage *);
=TEX
\section{TEST POLICY}
Any functions given in this document should be tested according to the
general criteria set out in \cite{DS/FMU/IED/PLN008}, using the
tests in \cite{DS/FMU/IED/MDT052}.
In \cite{DS/FMU/IED/MDT052} the theory produced is checked by the theory design tools
of \cite{DS/FMU/IED/DTD035}, against the theory design provided.
\newpage
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}


