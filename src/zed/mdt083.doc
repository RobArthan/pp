=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
\TPPtitle{Module Tests for Z Library Relations}
\TPPref{DS/FMU/IED/MDT083}  %% Mandatory field
\def\SCCSversion{$Revision$
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}  %% Mandatory field
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{K.~Blackburn & WIN01}  %% Mandatory field
% \TPPauthors{K.~Blackburn & WIN01}
\TPPauthorisation{R.D.Arthan & FST Team Leader}
\TPPabstract{This document gives the module tests for the 
Z Library Proof Support.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Project Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item [Issue 1.1]
First version.
\item [Issue 1.2 (@7th October 1992)]
Changes after comments - reorganisation of material
from 078 and 083.
\end{description}
\subsection{Changes Forecast}
None known.
\section{GENERAL}
\subsection{Scope}
This document contains the module tests for the material
whose detailed design is given in in \cite{DS/FMU/IED/DTD083}.
\subsection{Introduction}
This document contains the module tests for the material
whose detailed design is given in in \cite{DS/FMU/IED/DTD083}.
This consists of demonstrating at least the simpler uses of the 
functions in question.
\subsubsection{Dependencies}
The tests depend upon \cite{DS/FMU/IED/IMP083} and \cite{DS/FMU/IED/IMP013}.
In addition, testing by the subgoal package (section \ref{subgoalpackage})
depends on \cite{DS/FMU/IED/IMP030}.
\subsubsection{Deficiencies}
Only doing theory testing at present.
\section{TEST CASES}
The functions are tested in their order of presentation in the detailed design.
\section{PREAMBLE}
=SML
open_theory "z_relations";
delete_theory "temp" handle _ => ();
new_theory "temp";
use_file "dtd013";
use_file "imp013";
init_mt_results();
(* set_flag("subgoal_package_quiet",true); *)
repeat drop_main_goal;
set_flag("check_is_z",true);
=TEX

\subsection{Utilities}
=SML
fun €list_eq› (eq:'a * 'a -> bool) ((a :: x), (b :: y)) : bool = (
	eq(a,b) andalso list_eq eq (x, y)
) | list_eq eq ([], []) = true
| list_eq _ _ = false;
=TEX
If two terms types are equal, break them apart until they differ.
=SML
fun €differ_where› itm1 itm2 = (
let	fun aux tm1 tm2 (App(f1,x1)) (App(f2,x2)) = (
		Value(force_value(aux f1 f2 (dest_simple_term f1) (dest_simple_term f2)))
		handle _ =>
		aux x1 x2 (dest_simple_term x1) (dest_simple_term x2))
	| aux tm1 tm2 (Const(nm1,ty1)) (Const(nm2,ty2)) = (
		if nm1 = nm2 andalso ty1 =: ty2
		then Nil
		else Value(tm1,tm2))
	| aux tm1 tm2 (Var(nm1,ty1)) (Var(nm2,ty2)) = (
		if nm1 = nm2 andalso ty1 =: ty2
		then Nil
		else Value(tm1,tm2))
	| aux tm1 tm2 (SimpleÃ(x1,b1)) (SimpleÃ(x2,b2)) = (
		if x1 =$ x2 
		then aux b1 b2 (dest_simple_term b1) (dest_simple_term b2)
		else Value(tm1,tm2))
	| aux tm1 tm2 _ _ = Value(tm1,tm2);
in
	aux itm1 itm2 (dest_simple_term itm1) (dest_simple_term itm2)
end);
=TEX
\subsection{Testing Using Subgoal Package}
\label{subgoalpackage}
The following functions apply a tactic to a selected goal
and returns the resulting top goal. 
This of course doesn't fully test tactics that return multiple
goals.
The functions differ in that $tac\_res1$ inputs and outputs
both assumptions and conclusion, while $tac\_res$
just assumes an empty assumption list.
=SML
fun €tac_res› tac goal = (push_goal([],goal);
		a tac;
		let val (seqasms,gl) = top_goal()
		in
			(drop_main_goal();
			gl)
		end);
fun €tac_res› tac goal = (push_goal([],goal);
		a tac;
		let val (seqasms,gl) = top_goal()
		in
			(drop_main_goal();
			gl)
		end);
fun €tac_res1› tac (seqasms, goal) = (
		push_goal(seqasms,goal);
		a tac;
		let val (rasms,gl) = top_goal()
		in
			(drop_main_goal();
			(rasms,gl))
		end);
=TEX
Now a function that returns the multiple goals for the case when a tactic causes multiple goals:
=SML
fun €tac_ress› tac n (seqasms, goal) = (
		push_goal(seqasms,goal);
		a tac;
		let val gll = map (top_labelled_goal o string_of_int)
			(interval 1 n)
		in
			(drop_main_goal();
			gll)
		end);
=TEX
This function tests that a tactic proves a goal:
=SML
fun €tac_solve› tac (seqasms, goal) = (
	dest_thm (tac_proof ((seqasms,goal),tac))
	=#
	(seqasms, goal)
);
=TEX
This function tests that a tactic fails on a goal:
=SML
fun €tac_fail› tac (seqasms, goal) = (
	push_goal(seqasms,goal);
	a tac
	handle complaint =>
	(drop_main_goal();
	reraise complaint (area_of complaint))
);
=TEX
\subsection{Some Useful Values}
ˇTEST_SCHEMA¸
x:U;
y:U
à
=SML
val aset = Ò{a,b:X; c:Y | a Ω b ∑ (a,b,c)}Æ;
val (asetd, asetp, asetv) = dest_z_seta aset;
val atuple3 = Ò(¨p:'aÆ,¨q:'aÆ,¨r:'bÆ)Æ;
val notz = ¨∂ x ∑ x = yÆ;
val trues = string_of_term mk_t;
val notzs = string_of_term notz;
=TEX
\section{TESTS}
=TEX
\section{TUPLES}
=SML
store_mt_results (mt_runf (op =$)) [("z_tuple_eq_conv a",
	snd o dest_eq o concl o z_tuple_eq_conv,
	Ò(a,b) = (1,2)Æ,
	Òa = 1 ± b = 2Æ),
	("z_tuple_eq_conv b",
	snd o dest_eq o concl o z_tuple_eq_conv,
	Ò(a Ì b) = (1 Ì 2)Æ,
	Òa = 1 ± b = 2Æ)];
store_mt_results mt_run_fail [("z_tuple_eq_conv 42003",
	z_tuple_eq_conv,
	mk_t,
	gen_fail_msg "z_tuple_eq_conv" 42003 [trues])
	];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_tuple_selection_conv a",
	snd o dest_eq o concl o z_tuple_selection_conv,
	Ò(1,2,3).2Æ,
	Ò2Æ),
	("z_tuple_selection_conv b",
	snd o dest_eq o concl o z_tuple_selection_conv,
	Ò(1 Ì 2).2Æ,
	Ò2Æ)];
store_mt_results mt_run_fail [("z_tuple_selection_conv 47185",
	z_tuple_selection_conv,
	mk_t,
	gen_fail_msg "z_tuple_selection_conv" 47185 [trues]),
	("z_tuple_selection_conv 42006",
	z_tuple_selection_conv,
	mk_z_selât (mk_var("t",type_of Ò(1,2,3)Æ),2),
	gen_fail_msg "z_tuple_selection_conv" 42006 [
		string_of_term(mk_z_selât (mk_var("t",type_of Ò(1,2,3)Æ),2))])
	];
=TEX
=SML
let
	val atuple = mk_var("t",type_of Ò(1,2)Æ);
in
store_mt_results (mt_runf (op =$)) [
	("z_tuple_intro_conv a",
	snd o dest_eq o concl o z_tuple_intro_conv,
	Ò(ëatupleÆ.1,ëatupleÆ.2)Æ,
	atuple),
	("z_tuple_intro_conv b",
	snd o dest_eq o concl o z_tuple_intro_conv,
	Ò(ëatupleÆ.1 Ì ëatupleÆ.2)Æ,
	atuple)]
end;
store_mt_results mt_run_fail [("z_tuple_intro_conv 42005 a",
	z_tuple_intro_conv,
	mk_t,
	gen_fail_msg "z_tuple_intro_conv" 42005 [trues]),
	("z_tuple_intro_conv 42005 b",
	z_tuple_intro_conv,
	Ò(1,2,3)Æ,
	gen_fail_msg "z_tuple_intro_conv" 42005 [
		string_of_term Ò(1,2,3)Æ])
,
	("z_tuple_intro_conv 42005 c",
	z_tuple_intro_conv,
	Ò((1,2,3).1,(1,2,3).2)Æ,
	gen_fail_msg "z_tuple_intro_conv" 42005 [
		string_of_term Ò((1,2,3).1,(1,2,3).2)Æ])
	];
=TEX
\subsection{Simplifying Universals}
=SML
store_mt_results (mt_runf (op =$)) [("u_lib_conv",
	snd o dest_eq o concl o u_lib_conv,
	ÒU ™ UÆ,
	Ò[a,b] U ∫ ( (a ∏ b))Æ)];
store_mt_results mt_run_fail [("u_lib_conv 41060",
	u_lib_conv,
	mk_t,
	gen_fail_msg "u_lib_conv" 41060 [trues])];
=TEX
\section{PROOF CONTEXTS}
The following test requires both new proof contexts:
=SML
val input_term = Ò[X,Y] (R ç X ™ Y) ¥ (µ x : X ∑ x ç dom R § (∂ y : Y ∑ (x,y) ç R))Æ;
set_merge_pcs["z_predicates","'z_ç_set_lang","'z_ç_set_lib",
	"'z_sets_ext_lang","'z_sets_ext_lib","'z_tuples","'z_ç_rel"];
store_mt_results (mt_runf (op =$)) [("Proof Context Check",
	concl o prove_rule[] ,
	input_term,
	input_term)];
=TEX

\section{CHECK THE THEORY DESIGN}
=SML
use_file "dtd083.tch";
store_mt_results mt_run [("theory design of Z Library Relations",
	theory_check_success,
	(),
	true)];
=TEX
\section{END OF TESTS}
=SML
(* set_flag("subgoal_package_quiet",false); *)
diag_string(summarize_mt_results ());
=TEX
\end{document}
=IGN
***********COPY**************
store_mt_results (mt_runf (op =$)) [("",
	tac_res ,
	ÒÆ,
	ÒÆ)];
store_mt_results (mt_runf (op =$)) [("",
	snd o dest_eq o concl o  ,
	ÒÆ,
	ÒÆ)];
store_mt_results mt_run_fail [("",
	,
	,
	gen_fail_msg ""  [])];
store_mt_results (mt_runf (op =#)) [("",
	tac_res1 ,
	([ÒÆ],ÒÆ),
	([ÒÆ],ÒÆ))];
store_mt_results (mt_runf (list_eq(op =#))) [("",
	tac_ress  2,
	([ÒÆ],ÒÆ),
	[([ÒÆ],ÒÆ),([ÒÆ],ÒÆ)])];
store_mt_results mt_runf [
	("",
	tac_solve ,
	([],ÒÆ),
	true),
];
store_mt_results mt_run_fail [("",
	tac_fail ,
	([],ÒÆ),
	gen_fail_msg ""  [])];

store_mt_results mt_run [("",
	,
	,
	)];
store_mt_results mt_run_fail [("",
	,
	,
	gen_fail_msg ""  [])];

