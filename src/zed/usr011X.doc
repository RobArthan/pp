% usr011X.doc   %Z% $Date$ $Revision$ $RCSfile$
% this should form a Chapter of the document
% Exercises
=TEX
\section{Introduction}
\input{usr011X01.tex}

\section{Propositional Logic in Z}\label{PropEx}

\subsection{Introduction}

The methods of proof to be illustrated in these first exercises are:

\begin{enumerate}
\item
Forward proof using elementary rules.
\item
Goal oriented proof by stripping.
\item
Goal oriented automatic proof.
\end{enumerate}

These methods are described in each of the following subsections, and then a selection of examples are provided which may be attempted by any of the above methods.

\subsubsection{Forward proof using elementary rules}

Special exercises are provided to illustrate the use of a small selection of propositional rules.

The rules required for the exercises are:

\begin{description}
\item
$asm\_rule$
make or use an assumption
\item
$´\_elim$
use an implication (modus ponens)
\item
$´\_intro$
prove an implication
\item
$strip\_±$
split up a conjunction
\item
$±\_intro$
create a conjunction
\end{description}

\subsubsection{Proof by stripping}

In suitable proof contexts (which is almost all of them) many of the exercises can be completed using only ``stripping'' facilities.

In such cases a proof of the form:

=GFT SML
set_goal([],ñ conjecture ®);
a contr_tac;
=TEX

will suffice.

In this proof method the conjecture is negated and ``stripped'' into the assumptions, which process is sometimes sufficient to discharge the result without further intervention by the user.

It is however instructive to undertake such proofs in a more piecemeal way, so as to get an understanding of how these stripping facilities work.

To achieve this a proof of the form:

=GFT SML
set_goal([],ñ conjecture ®);
a z_strip_tac;  (* repeat as often as necessary *)
=TEX
 may be used.
 
In this proof the conclusion of the current goal is stripped a step at a time.
Whenever an assumption is added to the list of assumptions in the current goal, this assumption is completely stripped.
If the original goal was completely well formed Z, (and the proof context is appropriate for reasoning in Z) then this stripping process should result only in subgoals which are also well formed Z.
If the original subgoal was true, so will be any subgoals obtained by this stripping process, so if an evidently false subgoal appears the original conjecture must have been false.

To get an idea of how the assumptions are being stripped a tactic are available which performs step-by-step stripping on new assumptions before they are taken out of the conclusion.

=GFT SML
set_goal([],ñ conjecture ®);
a step_strip_tac;  (* repeat as often as necessary *)
=TEX

This method strips in such small steps that HOL quantifiers are temporarily introduced when Z quantifiers are being eliminated.

\subsubsection{Automatic Proof}

An automatic proof procedure is provided for each proof context which is often capable of solving results reducible to the pure predicate caluculus.
Even when it fails it may have resulted in more simplification than would be obtained by other methods.

=GFT SML
set_goal([],ñ conjecture®);
a (prove_tac[]); (* once only *)
=TEX

If subgoals are left by $prove\_tac$ then they will not normally be further progressed by repeated application of the tactic.

$prove\_tac$ should be used only when the current goal has no assumptions, or where it is expected that it can completely discharge the current goal without making use of the assumptions.

If the assumptions must be used to obtain the proof, or if there are assumptions and $prove\_tac$ is likely to leave some outstanding subgoals, then instead of $prove\_tac$, $asm\_prove\_tac$ should be used:

=GFT SML
a (asm_prove_tac[]); (* once only *)
=TEX

If $prove\_tac$ is used in these circumstances then it may fail.

\input{usr011X02.tex}

\section{Z Predicate Calculus}

\subsection{Introduction}

The following exercises concern proof in the predicate calculus in Z.

The methods of proof to be illustrated in these exercises are:

They are:

\begin{enumerate}
\item
Proof by stripping.
\item
Automatic proof.
\item
Proof by the ``two tactic method''.
\item
Proof using forward chaining.
\end{enumerate}

The first two methods, which were complete for propositional logic may fail to solve some results in the pure predicate calculus.
For these a simple and systematic and simple approach known as the `two-tactic' approach will sufffice, or alternatively forward chaining, may suffice to obtain the result with less efort on the part of the user.

These two new methods are described in each of the following subsections, and then a selection of examples are provided which may be attempted by any of the above methods.


\subsection{The Two Tactic Method}

Proof by stripping is effective in discharging a goal only where the reasoning is mainly propositional.
Where the proof will depend either on appropriate specialisation of universally quantified assumptions, or on the choice of a suitable witness for proving an existential conclusion stripping will not suffice.

The two tactic method injects into the proof process based on stripping, user directed specialisation of universal assumptions.
In the context of a proof by contradiction (in which existential conclusions will not arise) this is sufficient to discharge any goals which are reduce to reasoning in the pure first order predicate calculus.

The method is therefore as follows:
=GFT SML
set_goal([],conjecture);
a contr_tac; 	(* once suffices *)
a (z_spec_asm_tac ñ assumption ® ñ value®);
		(* as many times as necessary *)
=TEX
The choice of universal assumption and the value to specialise to depends on the user identifying one or more specialisations which will result in the derivation of a contradiction from the assumptions. 


\subsection{Forward Chaining}

Forward chaining facilities often provide an easier way of achieving proofs requiring instantiation of universal assumptions.

When a proof fails to be solved by $contr\_tac$ alone, $asm\_fc\_tac$ may be capable progressing the proof.

$asm\_fc\_tac$ will attempt to instantiate universally quantified assumptions which are effectively implications to values which will enable forward inference to take place.
This is achieved by matching the antecedent of the implication against other assumptions.

If $contr\_tac$ leaves goals outstanding, try progressing the proof using:

=GFT SML
set_goal([],ñ conjecture®);
a contr_tac;	(* once *)
a (asm_fc_tac[]); (* a small number of times *)
=TEX

This may lead to the derivation of a contradiction with less effort from the user, however it will sometimes fail to solve a goal (and often generate a lot of irrelevant new asumptions).
If forward chaining is not heading anywhere useful, revert to the two tactic method.

The proof context used for these examples is a proof context including knowledge of all constructs in the Z language, but with very little knowledge of the ``Z ToolKit''.

\input{usr011X03.tex}

\section{Expressions}

\input{usr011X04.tex}

\section{Schema Calculus}

\input{usr011X05.tex}

\section{Paragraphs}

\input{usr011X06.tex}

\section{Sets}

\input{usr011X07.tex}

\section{Relations}

\input{usr011X08.tex}

\section{Numbers and Finiteness}

\input{usr011X09.tex}

\section{Sequences}

\input{usr011X10.tex}

\section{Bags}
