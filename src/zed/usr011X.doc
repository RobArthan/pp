% usr011X.doc   %Z% $Date$ $Revision$ $RCSfile$
% this should form a Chapter of the document
% Exercises
=TEX
\section{Introduction}

These exercises are organised around:

\begin{itemize}
\item
Parts of the Language:
\begin{itemize}
\item
Propositional Logic
\item
Predicate Calculus
\item
Expressions
\item
Schema Calculus
\item
Z Paragraphs
\end{itemize}
\item
Theories in the `Z ToolKit'
\begin{itemize}
\item
Sets
\item
Relations
\item
Numbers and Finiteness
\item
Sequences
\item
Bags
\end{itemize}
%\item
%Special Proof Methods
\end{itemize}


\section{Propositional Reasoning Exercises}\label{PropositionalReasoningExercises}

Using the methods described in \ref{PropositionalReasoning} prove a selection of the following results.

=SML
open_theory "z_language_ps";
set_pc "z_predicates";

(* FORWARD PROOF EXERCISES *)

(*

Using ¥_elim, asm_rule and ¥_intro prove:

	(a)	b¥c, a¥b, a Ù c
	(b)	a¥b¥c, a, b Ù c
	(c)	a¥b¥c, b Ù a¥c
	(c)	Ù (a¥b¥c)¥b¥(a¥c)

*)

(* GOAL ORIENTED PROOF EXERCISES *)

(* bits and pieces for use by  cut and paste

a contr_tac;
a z_strip_tac;
a strip_tac;
a step_strip_tac;
prove_rule[]

*)

(* The following results are taken from Principia Mathematica *2,
and are shown together with their reference numbers. *)

set_goal([],Ò (* *2.02 *) q ¥ ( p ¥ q)Æ);
set_goal([],Ò (* *2.03 *) (p ¥ ≥ q) ¥ (q ¥ ≥ p)Æ);
set_goal([],Ò (* *2.15 *) (≥ p ¥ q) ¥ (≥ q ¥ p)Æ);
set_goal([],Ò (* *2.16 *) (p ¥ q) ¥ (≥ q ¥ ≥ p)Æ);
set_goal([],Ò (* *2.17 *) (≥ q ¥ ≥ p) ¥ (p ¥ q)Æ);
set_goal([],Ò (* *2.04 *) (p ¥ q ¥ r) ¥ (q ¥ p ¥ r)Æ);
set_goal([],Ò (* *2.05 *) (q ¥ r) ¥ (p ¥ q) ¥ (p ¥ r)Æ);
set_goal([],Ò (* *2.06 *) (p ¥ q) ¥ (q ¥ r) ¥ (p ¥ r)Æ);
set_goal([],Ò (* *2.08 *) p ¥ pÆ);
set_goal([],Ò (* *2.21 *) ≥ p ¥ (p ¥ q)Æ);

(* The following are from Principia Mathematica *3 *)

set_goal([],(* *3.01 *) Ò p ± q § ≥(≥ p ≤ ≥ q)Æ);
set_goal([],(* *3.2  *) Ò p ¥ q ¥ p ± qÆ);
set_goal([],(* *3.26 *) Ò p ± q ¥ pÆ);
set_goal([],(* *3.27 *) Ò p ± q ¥ qÆ);
set_goal([],(* *3.3  *) Ò (p ± q ¥ r) ¥ (p ¥ q ¥ r)Æ);
set_goal([],(* *3.31 *) Ò (p ¥ q ¥ r) ¥ (p ± q ¥ r)Æ);
set_goal([],(* *3.35 *) Ò (p ± (p ¥ q)) ¥ qÆ);
set_goal([],(* *3.43 *) Ò (p ¥ q) ± (p ¥ r) ¥ (p ¥ q ± r)Æ);
set_goal([],(* *3.45 *) Ò (p ¥ q) ¥ (p ± r ¥ q ± r)Æ);
set_goal([],(* *3.47 *) Ò (p ¥ r) ± (q ¥ s) ¥ (p ± q ¥ r ± s)Æ);

(* Results from Principia Mathematica *4 *)

set_goal([],(* *4.1  *) Ò p ¥ q § ≥ q ¥ ≥ pÆ);
set_goal([],(* *4.11 *) Ò (p § q) § (≥ p § ≥ q)Æ);
set_goal([],(* *4.13 *) Ò p § ≥ ≥ pÆ);
set_goal([],(* *4.2  *) Ò p § pÆ);
set_goal([],(* *4.21 *) Ò (p § q) § (q § p)Æ);
set_goal([],(* *4.22 *) Ò (p § q) ± (q § r) ¥ (p § r)Æ);
set_goal([],(* *4.24 *) Ò p § p ± pÆ);
set_goal([],(* *4.25 *) Ò p § p ≤ pÆ);
set_goal([],(* *4.3  *) Ò p ± q § q ± pÆ);
set_goal([],(* *4.31 *) Ò p ≤ q § q ≤ pÆ);
set_goal([],(* *4.33 *) Ò (p ± q) ± r § p ± (q ± r)Æ);
set_goal([],(* *4.4  *) Ò p ± (q ≤ r) § (p ± q) ≤ (p ± r)Æ);
set_goal([],(* *4.41 *) Ò p ≤ (q ± r) § (p ≤ q) ± (p ≤ r)Æ);
set_goal([],(* *4.71 *) Ò (p ¥ q) § (p § (p ± q))Æ);
set_goal([],(* *4.73 *) Ò q ¥ (p § (p ± q))Æ);

(* Results from Principia Mathematica *5 *)

set_goal([],(* *5.1  *) Ò p ± q ¥ (p § q)Æ);
set_goal([],(* *5.32 *) Ò (p ¥ (q § r)) ¥ ((p ± q) § (p ± r))Æ);
set_goal([],(* *5.6  *) Ò (p ± ≥ q ¥ r) ¥ (p ¥ (q ≤ r))Æ);

\section{Z Predicate Calculus}

\subsection{Introduction}

The following exercises concern proof in the predicate calculus in Z.

The methods of proof to be illustrated in these exercises are:

\begin{enumerate}
\item
Proof by stripping.
\item
Automatic proof.
\item
Proof by the ``two tactic method''.
\item
Proof using forward chaining.
\end{enumerate}

These methods are described in Chapter \ref{ZPredicateCalculus}.

=SML
open_theory "z_bags";
set_pc "z_language";

(* PREDICATE CALCULUS FORWARD PROOF EXERCISES *)

(*
1. Using z_µ_elim with z_Ó_≥_plus1_thm prove:
	(a)	0 ç Ó ± true ¥ ≥ 0 + 1 = 0   
	(b)	x * x ç Ó ± true ¥ ≥ x * x + 1 = 0  
 
2. Using prove_rule with z_º_trans_thm prove:
		i º j ± j º k ¥ i º k : THM

3. Using prove_rule and with z_Ó_≥_plus1_thm
	and z_0_Ó_thm prove:
	(a)	≥ 0 + 1 = 0   
	(b)	x * x ç Ó ¥ ≥ x * x + 1 = 0 
 
4. Using z_µ_elim prove:
	(a) (with z_≥_less_thm)
		≥ 0 < 1 § 1 º 0
	(b) (with º_trans_thm)
		µ n∑ 3 º x * x ± x * x º n ¥ 3 º n
	  
5. Using all_µ_elim, strip_±_rule, nth, all_µ_intro:

	(a)(with º_clauses)
		µ i m n∑ i + m º i + n § m º n
	(b)(using list_µ_intro)
		µ m i n∑ i + m º i + n § m º n

*)

(* bits and pieces for use by cut and paste 

a contr_tac;
a z_strip_tac;
a strip_tac;
a step_strip_tac;
a (prove_tac[]);
a (asm_prove_tac[]);
a (z_spec_asm_tac Ò Æ Ò Æ);
a (z_spec_nth_asm_tac 1 Ò Æ);

*)

(* PREDICATE CALCULUS GOAL DIRECTED PROOF EXERCISES *)

(* Principia Mathematica *9 *)

set_goal([], (* *9.01 *) Ò [X](≥ (µx:X∑ ∆x)) § (∂x: X∑ ≥ ∆x)Æ);
set_goal([], (* *9.02 *) Ò [X](≥ (∂x:X∑ ∆x) § (µx:X∑ ≥ ∆x))Æ);
set_goal([], (* *9.03 *) Ò [X](µx:X∑ ∆x ≤ p) § (µx:X∑ ∆x) ≤ pÆ);
set_goal([], (* *9.04 *) Ò [X]p ≤ (µx:X∑ ∆x) § (µx:X∑ p ≤ ∆x)Æ);
set_goal([], (* *9.05 *) Ò [X](∂ x:X∑true) ¥ ((∂x:X∑ ∆x ≤ p) § (∂x:X∑ ∆x) ≤ p)Æ);
set_goal([], (* *9.06 *) Ò [X]p ≤ (∂x:X∑ ∆x) § p ≤ (∂x:X∑ ∆x)Æ);
set_goal([], (* *9.07 *) Ò [X,Y](∂y:Y∑true)
	¥ ((µx:X∑ ∆x) ≤ (∂y:Y∑ Ÿy) § (µx:X∑∂y:Y∑ ∆x ≤ Ÿy))Æ);
set_goal([], (* *9.08 *) Ò [X,Y](∂y:Y∑true)
	¥ ((∂y:Y∑ Ÿy) ≤ (µx:X∑ ∆x) § (µx:X∑∂y:Y∑ Ÿy ≤ ∆x))Æ);

(* Principia Mathematica *10 *)

set_goal([], (* *10.01  *) Ò [X](∂x:X∑ ∆x) § ≥ (µy:X∑ ≥ ∆y)Æ);
set_goal([], (* *10.1   *) Ò (µx:U∑ ∆x) ¥ ∆yÆ);
set_goal([], (* *10.21  *) Ò [X](µx:X∑ p ¥ ∆x) § p ¥ (µy:X∑ ∆y)Æ);
set_goal([], (* *10.22  *) Ò [X](µx:X∑ ∆x ± Ÿx) § (µy:X∑ ∆y) ± (µz:X∑ Ÿz)Æ);
set_goal([], (* *10.24  *) Ò [X](µx:X∑ ∆x ¥ p) § (∂y:X∑ ∆y) ¥ pÆ);
set_goal([], (* *10.27  *) Ò [X](µx:X∑ ∆x ¥ Ÿx) ¥ ((µy:X∑ ∆y) ¥ (µz:X∑ Ÿz))Æ);
set_goal([], (* *10.28  *) Ò [X](µx:X∑ ∆x ¥ Ÿx) ¥ ((∂y:X∑ ∆y) ¥ (∂z:X∑ Ÿz))Æ);
set_goal([], (* *10.35  *) Ò [X](∂x:X∑ p ± ∆x) § p ± (∂y:X∑ ∆y)Æ);
set_goal([], (* *10.42  *) Ò [X](∂x:X∑ ∆x) ≤ (∂y:X∑ Ÿy) § (∂z:X∑ ∆z ≤ Ÿz)Æ);
set_goal([], (* *10.5   *) Ò [X](∂x:X∑ ∆x ± Ÿx) ¥ (∂y:X∑ ∆y) ± (∂z:X∑ Ÿz)Æ);
set_goal([], (* *10.51  *) Ò [X](≥ (∂x:X∑ ∆x ± Ÿx) ¥ (µy:X∑ ∆y ¥ ≥ Ÿy))Æ);

(* Principia Mathematica *11 *)

set_goal([], (* *11.1  *) Ò (µx, y:U∑ ∆(x,y)) ¥ ∆(z,w)Æ);
set_goal([], (* *11.2  *) Ò [X](µx, y:X∑ ∆(x,y)) § (µy, x:X∑ ∆(x,y))Æ);
set_goal([], (* *11.3  *) Ò [Y](p ¥ (µx, y:Y∑ ∆(x,y)))
		§ (µx, y:Y∑ p ¥ ∆(x,y))Æ);
set_goal([], (* *11.35 *) Ò [Y](µx, y:Y∑ ∆(x,y) ¥ p) § (∂x, y:Y∑ ∆(x,y)) ¥ pÆ);
set_goal([], (* *11.32 *) Ò [Y](µx, y:Y∑ ∆(x,y) ¥ Ÿ(x,y))
		¥ (µx, y:Y∑ ∆(x,y)) ¥ (µx, y:Y∑ Ÿ(x,y))Æ);
set_goal([], (* *11.45 *) Ò [Y](∂x, y:Y∑ true) ¥ ((∂x, y:Y∑ p ¥ ∆(x,y))
		§ (p ¥ (∂x, y:Y∑ ∆(x,y))))Æ);
set_goal([], (* *11.54 *) Ò [Y](∂x, y:Y∑ ∆x ± Ÿy) § (∂x:Y∑ ∆x) ± (∂y:Y∑ Ÿy)Æ);
set_goal([], (* *11.55 *) Ò [Y](∂x, y:Y∑ ∆x ± Ÿ(x,y))
		§ (∂x:Y∑ ∆x ± (∂y:Y∑ Ÿ(x,y)))Æ);
set_goal([], (* *11.6  *) Ò [X](∂x:X∑ (∂y:Y∑ ∆(x,y) ± Ÿy) ± —x)
		§ (∂y:Y∑ (∂x:X∑ ∆(x,y) ± —x) ± Ÿy)Æ);
set_goal([], (* *11.62 *) Ò (µx:X; y:Y∑ ∆x ± Ÿ(x,y) ¥ —(x,y))
  		§ (µx:X∑ ∆x ¥ (µy:Y∑ Ÿ(x,y) ¥ —(x,y)))Æ);
=TEX

\section{Expressions}

\section{Schema Calculus}
\subsection{Propositional Schema Calculus}

=SML

(* PROPOSITIONAL SCHEMA CALCULUS OPERATORS *)

(* 

1.  Define four schemas with distinct but compatible signatures
called P Q R and S and then prove the following goals showing that
the schema calculus operators behave in the same way as the ordinary
logical connectives.

*)

open_theory "z_bags";
new_theory "exercises5";
set_pc "z_language";

=SML

(* The following results are analogous to theorems taken from Principia Mathematica *2,
and are shown together with their reference numbers. *)

val sp_tac = pure_rewrite_tac[z'schema_pred_def]
	THEN REPEAT (once_rewrite_tac[]
		THEN conv_tac (MAP_C z_selâs_conv))
	THEN contr_tac;
a (pure_rewrite_tac[z'schema_pred_def]);
a (once_rewrite_tac[]);
a (conv_tac (MAP_C z_selâs_conv));
a contr_tac;
a z_strip_tac;
a sp_tac;
a (prove_tac[]);
prove_rule[] 

set_goal([],Ò (* *2.02 *) ê((Q ¥ (P ¥ Q))∫U)Æ);
set_goal([],Ò (* *2.03 *) ê(((P ¥ ≥ Q) ¥ (Q ¥ ≥ P))∫U)Æ);
set_goal([],Ò (* *2.15 *) ê(((≥ P ¥ Q) ¥ (≥ Q ¥ P))∫U)Æ);
set_goal([],Ò (* *2.16 *) ê(((P ¥ Q) ¥ (≥ Q ¥ ≥ P))∫U)Æ);
set_goal([],Ò (* *2.17 *) ê(((≥ Q ¥ ≥ P) ¥ (P ¥ Q))∫U)Æ);
set_goal([],Ò (* *2.04 *) ê(((P ¥ Q ¥ R) ¥ (Q ¥ P ¥ R))∫U)Æ);
set_goal([],Ò (* *2.05 *) ê(((Q ¥ R) ¥ (P ¥ Q) ¥ (P ¥ R))∫U)Æ);
set_goal([],Ò (* *2.06 *) ê(((P ¥ Q) ¥ (Q ¥ R) ¥ (P ¥ R))∫U)Æ);
set_goal([],Ò (* *2.08 *) ê((P ¥ P)∫U)Æ);
set_goal([],Ò (* *2.21 *) ê((≥ P ¥ (P ¥ Q))∫U)Æ);

(* The following are analogous to Principia Mathematica *3 *)

set_goal([],(* *3.01 *) Ò ê((P ± Q § ≥(≥ P ≤ ≥ Q))∫U)Æ);
set_goal([],(* *3.2  *) Ò ê((P ¥ Q ¥ P ± Q)∫U)Æ);
set_goal([],(* *3.26 *) Ò ê((P ± Q ¥ P)∫U)Æ);
set_goal([],(* *3.27 *) Ò ê((P ± Q ¥ Q)∫U)Æ);
set_goal([],(* *3.3  *) Ò ê(((P ± Q ¥ R) ¥ (P ¥ Q ¥ R))∫U)Æ);
set_goal([],(* *3.31 *) Ò ê(((P ¥ Q ¥ R) ¥ (P ± Q ¥ R))∫U)Æ);
set_goal([],(* *3.35 *) Ò ê(((P ± (P ¥ Q)) ¥ Q)∫U)Æ);
set_goal([],(* *3.43 *) Ò ê(((P ¥ Q) ± (P ¥ R) ¥ (P ¥ Q ± R))∫U)Æ);
set_goal([],(* *3.45 *) Ò ê(((P ¥ Q) ¥ (P ± R ¥ Q ± R))∫U)Æ);
set_goal([],(* *3.47 *) Ò ê(((P ¥ R) ± (Q ¥ S) ¥ (P ± Q ¥ R ± S))∫U)Æ);

(* Results analogous to Principia Mathematica *4 *)

set_goal([],(* *4.1  *) Ò (P ¥ Q) = (≥ Q ¥ ≥ P)Æ);
set_goal([],(* *4.11 *) Ò (P § Q) = (≥ P § ≥ Q)Æ);
set_goal([],(* *4.13 *) Ò ê((P § (≥ ≥ P))∫U)Æ);
set_goal([],(* *4.2  *) Ò P = PÆ);
set_goal([],(* *4.21 *) Ò (P § Q) = (Q § P)Æ);
set_goal([],(* *4.22 *) Ò ê(((P § Q) ± (Q § R) ¥ (P § R))∫U)Æ);
set_goal([],(* *4.24 *) Ò ê((P § (P ± P))∫U)Æ);
set_goal([],(* *4.25 *) Ò ê((P § (P ≤ P))∫U)Æ);
set_goal([],(* *4.3  *) Ò ê((P ± Q § Q ± P)∫U)Æ);
set_goal([],(* *4.31 *) Ò ê((P ≤ Q § Q ≤ P)∫U)Æ);
set_goal([],(* *4.33 *) Ò ê(((P ± Q) ± R § P ± (Q ± R))∫U)Æ);
set_goal([],(* *4.4  *) Ò ê((P ± (Q ≤ R) § (P ± Q) ≤ (P ± R))∫U)Æ);
set_goal([],(* *4.41 *) Ò ê((P ≤ (Q ± R) § (P ≤ Q) ± (P ≤ R))∫U)Æ);
set_goal([],(* *4.41 *) Ò (P ≤ (Q ± R)) = ((P ≤ Q) ± (P ≤ R))Æ);
set_goal([],(* *4.71 *) Ò ê(((P ¥ Q) § (P § (P ± Q)))∫U)Æ);
set_goal([],(* *4.73 *) Ò ê((Q ¥ (P § (P ± Q)))∫U)Æ);

(* Results analogous to Principia Mathematica *5 *)

set_goal([],(* *5.1  *) Ò ê((P ± Q ¥ (P § Q))∫U)Æ);
set_goal([],(* *5.32 *) Ò ê(((P ¥ (Q § R)) ¥ ((P ± Q) § (P ± R)))∫U)Æ);
set_goal([],(* *5.6  *) Ò ê(((P ± ≥ Q ¥ R) ¥ (P ¥ (Q ≤ R)))∫U)Æ);


\section{Paragraphs}

\section{Sets}

The following problems are all in the theory of elementary sets as defined in section 4.1 of {\it The Z Notation} \cite{spivey92}.
Following \cite{spivey92} we have used free-variable formulations, though this is not usually recommended, since universally quantified results (over \verb!"U"!) are usually needed for rewriting.
Proofs of the results quantified over U are very similar.

All the results are provable in the theory \verb!z_sets! using the proof context \verb!z_sets_ext! (which provides for extensional proofs of results in elementary set theory).
=SML
open_theory "z_sets";
set_pc "z_sets_ext";
=TEX
\subsubsection{Results Provable by Stripping}
=SML
val ZRM1 = [
Ò a ¿ a = a ¿ {} = a ° a = a \ {} = aÆ,
Ò a ° {} = a \ a = {} \ a = {}Æ,
Ò a ¿ b = b ¿ aÆ,
Ò a ° b = b ° aÆ,
Ò a ¿ (b ¿ c) = (a ¿ b) ¿ cÆ,
Ò a ° (b ° c) = (a ° b) ° cÆ,
Ò a ¿ (b ° c) = (a ¿ b) ° (a ¿ c)Æ,
Ò a ° (b ¿ c) = (a ° b) ¿ (a ° c)Æ,
Ò (a ° b) ¿ (a \ b) = aÆ,
Ò ((a \ b) ° b) = {}Æ,
Ò a \ (b \ c) = (a \ b) ¿ (a ° c)Æ,
Ò (a \ b) \ c = a \ (b ¿ c)Æ,
Ò a ¿ (b \ c) = (a ¿ b) \ (c \ a)Æ,
Ò a ° (b \ c) = (a ° b) \ cÆ,
Ò (a ¿ b) \ c = (a \ c) ¿ (b \ c)Æ];
map (fn x => tac_proof (([],x),contr_tac)) ZRM1;
map (prove_rule []) ZRM1;
=TEX
\vfill
=SML
val ZRM2 = [
Ò a \ (b ° c) = (a \ b) ¿ (a \ c)Æ,
Ò ≥ x ç {}Æ,
Ò a Ä aÆ,
Ò ≥ a † aÆ,
Ò {} Ä aÆ,
Ò ﬁ {} = {}Æ,
Ò • {} = UÆ];
map (fn x => tac_proof (([],x),contr_tac)) ZRM2;
map (prove_rule[]) ZRM2;
=TEX
\subsubsection{Results Not Provable by Stripping}
For the following stripping alone will not suffice.
The ``two tactic method'' will solve them all, so will ``prove\_tac''.
=SML
val ZRM3 = [
Ò a Ä b § a ç  bÆ,
Ò a Ä b ± b Ä a § a = bÆ,
Ò ≥ (a † b ± b † a)Æ,
Ò a Ä b ± b Ä c ¥ a Ä cÆ,
Ò a † b ± b † c ¥ a † cÆ,
Ò {} † a § ≥ a = {}Æ,
Ò ﬁ (a ¿ b) = (ﬁ a) ¿ (ﬁ b)Æ,
Ò • (a ¿ b) = (• a) ° (• b)Æ,
Ò  a Ä b ¥ ﬁ a Ä ﬁ b Æ,
Ò  a Ä b ¥ • b Ä • a Æ];
map (prove_rule[]) ZRM3;
map (merge_pcs_rule1["z_sets_ext","'z_fc"]prove_rule[]) ZRM3;
=TEX
\vfill
=SML
val ZRM3b = [
Ò a Ä b ± b Ä a § a = bÆ,
Ò a † b ± b † c ¥ a † cÆ,
Ò {} † a § ≥ a = {}Æ
];
map (prove_rule[]) ZRM3b;
map (merge_pcs_rule1["z_sets_ext","'z_fc"]prove_rule[]) ZRM3b;
=TEX

\section{Relations}


\section{Numbers and Finiteness}


\section{Sequences}


\section{Bags}
