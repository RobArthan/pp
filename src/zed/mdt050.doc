=IGN
********************************************************************************
mdt050.doc: this file is part of the PPZed system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
%  mdt050.doc %Z% $Date: 2005/08/05 12:40:21 $ $Revision: 1.13 $ $RCSfile: mdt050.doc,v $

=TEX
%%%%% YOU MAY WANT TO CHANGE POINT SIZE IN THE FOLLOWING:
\documentclass[a4paper,11pt]{article}

%%%%% YOU CAN ADD OTHER PACKAGES AS NEEDED BELOW:
\usepackage{A4}
\usepackage{Lemma1}
\usepackage{ProofPower}
\usepackage{latexsym}
\usepackage{epsf}
\makeindex

%%%%% YOU WILL WANT TO CHANGE THE FOLLOWING TO SUIT YOU AND YOUR DOCUMENT:

\def\Title{Module Tests for Z Generated Constants}

\def\AbstractText{This document comprises test cases and test data for the Z constant generation package.}

\def\Reference{DS/FMU/IED/MDT050}

\def\Author{D.J. King}


\def\EMail{C/O {\tt rda@lemma-one.com}}

\def\Phone{C/O +44 7497 030682}

\def\Abstract{\begin{center}{\bf Abstract}\par\parbox{0.7\hsize}
{\small \AbstractText}
\end{center}}

%%%%% YOU MAY WANT TO CHANGE THE FOLLOWING TO GET A NICE FRONT PAGE:
\def\FrontPageTitle{ {\huge \Title } }
\def\FrontPageHeader{\raisebox{16ex}{\begin{tabular}[t]{c}
\bf Copyright \copyright\ : Lemma 1 Ltd \number\year\\\strut\\
\end{tabular}}}

%%%%% THE FOLLOWING DEFAULTS WILL GENERALLY BE RIGHT:

\def\Version{\VCVersion}
\def\Date{\FormatDate{\VCDate}}

%% LaTeX2e port: =TEX
%% LaTeX2e port: % TQtemplate.tex
%% LaTeX2e port: \documentstyle[hol1,11pt,TQ]{article}
%% LaTeX2e port: \ftlinepenalty=9999
\def\Hide#1{}
%% LaTeX2e port: \def\Bool{``$\it{:}bool\,$''}
%% LaTeX2e port: \makeindex
%% LaTeX2e port: \TPPproject{FST PROJECT}  %% Mandatory field
%% LaTeX2e port: %\TPPvolume{}
%% LaTeX2e port: %\TPPpart{}
%% LaTeX2e port: \TPPtitle{Module Tests for Z Generated Constants}  %% Mandatory field
%% LaTeX2e port: \TPPref{DS/FMU/IED/MDT050}  %% Mandatory field
%% LaTeX2e port: \def\SCCSversion{$Revision: 1.13 $%
%% LaTeX2e port: }
%% LaTeX2e port: \TPPissue{\SCCSversion}  %% Mandatory field
%% LaTeX2e port: \TPPdate{\FormatDate{$Date: 2005/08/05 12:40:21 $%
%% LaTeX2e port: }}  %% Mandatory field (with sensible default)
%% LaTeX2e port: \TPPstatus{Draft}
%% LaTeX2e port: %\TPPstatus{Approved}
%% LaTeX2e port: \TPPtype{Specification}
%% LaTeX2e port: \TPPkeywords{HOL, Z}
%% LaTeX2e port: \TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%% LaTeX2e port: %\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
%% LaTeX2e port: \TPPauthorisation{R.D.~Arthan & FST Team Leader}
%% LaTeX2e port: \TPPabstract{
%% LaTeX2e port: This document comprises test cases and test data for
%% LaTeX2e port: the Z constant generation package.}
%% LaTeX2e port: %\TPPabstractB{}
%% LaTeX2e port: %\TPPabstractC{}
%% LaTeX2e port: %\TPPabstractD{}
%% LaTeX2e port: %\TPPabstractE{}
%% LaTeX2e port: %\TPPabstractF{}
%% LaTeX2e port: \TPPdistribution{\parbox[t]{4.0in}{%
%% LaTeX2e port:       Library \\ R.D. Arthan\\ D.J. King}}
%% LaTeX2e port: 
%% LaTeX2e port: %\TPPclass{CLASSIFICATION}
%% LaTeX2e port: %\def\TPPheadlhs{}
%% LaTeX2e port: %\def\TPPheadcentre{}
%% LaTeX2e port: %def\TPPheadrhs{}
%% LaTeX2e port: %\def\TPPfootlhs{}
%% LaTeX2e port: %\def\TPPfootcentre{}
%% LaTeX2e port: %\def\TPPfootrhs{}
%% LaTeX2e port: 
%% LaTeX2e port: \begin{document}
%% LaTeX2e port: \TPPsetsizes
%% LaTeX2e port: \makeTPPfrontpage
%% LaTeX2e port: 
%% LaTeX2e port: \vfill
%% LaTeX2e port: \begin{centering}
%% LaTeX2e port: 
%% LaTeX2e port: \bf Copyright \copyright\ : Lemma 1 Ltd. \number\year
%% LaTeX2e port: 
%% LaTeX2e port: \end{centering}

\begin{document}

\headsep=0mm
\FrontPage
\headsep=10mm

\setcounter{section}{-1}

\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issue 1.1 (1992/08/13) (4th August 1992)]
Initial Draft
\item[Issue 1.2 (1992/08/21) (21st August 1992)]
First complete version.
\item[Issue 1.3 (1992/10/15) (15th October 1992)]
Added tests of message 50001.
\item[Issue 1.4 (1992/12/09) (9th December 1992)]
Bug fixing.
\item[Issue 1.5 (1992/12/10) (10th December 1992)]
Global rename from wrk038.doc issue 1.9.
\item[Issue 1.6 (1993/01/08) (8th January 1993)]
Added test of 50004.
\item[Issue 1.8 (1997/04/30) (30th April 1997)]
Added tests for cache clashes.
\item[Issue 1.9 (2002/10/17)] Copyright and banner updates for open source release.
\item[Issue 1.10 (2002/10/17)] PPZed-specific updates for open source release
\item[Issue 1.11 (2005/05/17)] Adjustments to allow for tidier error-handling.
\item[Issue 1.12 (2005/08/04)] Now tests schema projection with operands having same signatures; also changed to work in child database.
\item[Issue 1.13 (2005/08/05)] Liberalised schema quantification.
\item[Issue 1.14 (2006/01/25)] The name of the decoration operator is now based on the stem {\em decor} throughout, rather than {\em decor} in some places and {\em dec} in others.
\item[2014/07/23]
Augmented old RCS version numbers in the changes history with dates.
Dates will be used in place of version numbers in future.

%%%% END OF CHANGES HISTORY %%%%
\end{description}
\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}

The module tests provided in this document test the
Z Constant Generation defined in \cite{DS/FMU/IED/DTD050}.


\subsection{Introduction}

\subsubsection{Background and Purpose}

The purpose of this document is to test
the functions in accordance with the test policy in
\cite{DS/FMU/IED/DTD050} and the guidelines laid out in the
quality plan, \cite{DS/FMU/IED/PLN008}.

\subsubsection{Dependencies}

This document depends on the signature $ZGeneratedConstants$ specified
in \cite{DS/FMU/IED/DTD050}, and the structure $ZGeneratedConstants$
specified in \cite{DS/FMU/IED/IMP050}. It makes use of the
module test harness described in \cite{DS/FMU/IED/DTD013} and
\cite{DS/FMU/IED/IMP013}.

\subsubsection{Possible Enhancements}

None.

\subsubsection{Deficiencies}

None Known.

\section{INITIALISATION}

Initialise the test harness.

=SML
use_file "dtd013.sml";
use_file "imp013.sml";
init_mt_results ();
=TEX
=SML
open	ZGeneratedConstants;
=TEX

Next, we make the parser and Z type inferrer
directly available to the tests.
=SML
open_theory"z_language";
delete_theory"mdt050" handle _ => ();
new_theory"mdt050";
val cache_theory = hd(get_cache_theories());
if cache_theory mem get_ancestors "-"
then ()
else new_parent cache_theory;
=TEX

\section{SUPPORTING TEST FUNCTIONS}
=SML
fun get_cached_defn thing = (
	let	fun aux [] = get_defn "-" thing
		|   aux (thy :: more) = (
			get_defn thy thing
			handle Fail _ => aux more
		);
	in	aux (get_cache_theories())
	end
);
=TEX
The functions introduced in this section are using in testing the Z type
inferrer. Their provision enables the test cases to be implemented in a concise
(and hopefully readable) form.

The function $type\_infer$ is a general interface to the type inferrer, taking
a Z term in string form and producing an inferred Z paragraph.

=SML
local
	open ZTermGenerator ZTypesAndTermsSupport;
	open ZUserInterfaceSupport ZTypeInference;
in

fun Ûtype_inferÝ {quot : bool, standard : bool} (s : string) : Z_INFERRED = (
let	val parsed = ZParser.z_parser {is_quot=quot}
			(ZLex.z_lex [Lex.Text s]);
in
	type_check_z_para {standard = standard, allow_frees = not standard} parsed
end);

fun Ûz_tm_of_stringÝ  (s : string) : Z_TM = (
	case type_infer {quot=true, standard = false} s of
	ZInferred p => (
		case p of
		ZParaTerm (_, tm, _) => tm
		|_ => fail "" 0 []
		)
	|ZTypeError info => (print_z_error info)
);
=SML
val Ûgenerate_termÝ : string -> TERM =
	 (do_in_theory cache_theory term_of_z_tm) o z_tm_of_string;
=TEX
=SML
fun Ûz_decl_of_stringÝ (s : string)  = (
let	val s1 = "Ì"^s^"·true";
in
	case (z_tm_of_string s1) of
	ZTmÌ((dl,t, _), _) => list_term_of_z_dec dl
	|_ => fail "mdt050" 0 []
end);
=TEX

=SML
fun ÛcrossÝ (a::rest1) rest2 =
let	fun aux a (b::rest) = (a, b)::aux a rest
	  | aux a _ = [];
in
	 aux a rest2@cross rest1 rest2
end
  | cross _ _ = [];
=TEX
=SML
fun Ûgen_listsÝ lst = (
let	val is = interval 1 (length lst-1);
in
	map (fn i => lst to i) is
end);
=TEX
=SML
fun join_string (a::b::rest) = a^","^join_string (b::rest)
  | join_string [a] = a
  | join_string _ = "";
=SML
val labelref : int ref = ref 0;
fun next_name () = (
let	val lab = !labelref;
in
	(labelref := lab+1; lab)
end);
fun ÛlabelÝ s = "mdt050."^s
	(*
	^"."^(string_of_int o next_name)()
	*);
=TEX
=SML
fun Ûapply1Ý ((mapping, cgen, cons1), (cons2, decl)) = (
let	val tm = mapping decl;
	val thm = do_in_theory cache_theory cgen tm;
	val constr = cons1^cons2;
	val flag = ((get_cached_defn constr;true)
			handle Fail _ => false);
in
	(label constr, flag)
end);
=TEX
=SML
fun Ûapply2Ý v ((mapping, cgen, cons1), (cons2, decl)) = (
let	val tm = mapping (decl, mk_z_true, v);
	val thm = do_in_theory cache_theory cgen tm;
	val constr = cons1^cons2;
	val flag = (get_cached_defn constr;true
			handle Fail _ => false);
in
	(label constr, flag)
end);
=TEX

=SML
fun Ûzd_in_xÝ (s : string) = z_decl_of_string (s^":X");
fun Ûzd_in_yÝ (s : string) = z_decl_of_string (s^":Y");
fun ÛnargsÝ s = (length o explode) s div 2 + 1;
fun ÛsqbrkÝ s = (
let	val name = "Z'S["^s^"]";
	val names =
		case dest_z_name name of
		(_,[names],_) => names
		|_ => fail "donames" 0 [];
	val snames = idsetseq names;
	val name' = bind_tname snames;
in
		case explode name' of
		("Z"::"'"::"S"::rest) =>
			implode rest
		|_ => fail "donames" 0 []
end);
=TEX
=SML
fun Ûmake_mdt050_ndsÝ (sl : string list) (ty: string) = (
let	val nums = map nargs sl;
	val decls = map (fn s=> z_decl_of_string(s^":"^ty)) sl;
	val schs = map (((switch o curry) mk_z_h_schema) mk_z_true) decls;
in
	(nums, decls, schs)
end);

fun Ûmake_mdt050_declsÝ (sl : string list) (ty: string) = (
let
	val (nums, decls, _) = make_mdt050_nds sl ty;
	val ndecls = combine (map (sqbrk o string_of_int) nums) decls;
	val sdecls = combine (map sqbrk sl) decls;
in
	(ndecls, sdecls)
end);

fun Ûmake_mdt050_schsÝ (sl : string list) (ty: string) = (
let
	val (nums, _, schs) = make_mdt050_nds sl ty;
	val nschs = combine (map (sqbrk o string_of_int) nums) schs;
	val sschs = combine (map sqbrk sl) schs;
in
	(nschs, sschs)
end);

fun Ûmake_mdt050_varsÝ (sl : string list) = (
let	val s = (sqbrk o string_of_int o length) sl;
in

	(s, map generate_term sl)
end);

fun Ûmake_mdt050_setsÝ (sl : string list) = (
	(make_mdt050_vars(map (fn s => "ð"^s) sl))
);
=TEX
=SML
end (* of local ... in ... *);
=TEX
\section{TEST CASES AND TEST DATA}

\subsection{Common Test Input}

=SML
val simple_names = ["a","b","c","d","e"];
val decl_names = ["a","a,b","a,b,c","a,b,c,d","a,b,c,d,e"];
val decor_names = ["'","?","!","''","'?","'!"];
=TEX
\subsection{Numerically Indexed Families}
=SML
val grp_1 =
[
(mk_z_¸, ¸_gen_semantic_const, "Z'¸"),
(mk_z_tuple, tuple_gen_semantic_const, "Z'T")
];
val data_1 = map make_mdt050_sets
	(gen_lists simple_names);
fun do_grp_1 () = map apply1 (cross grp_1 data_1);
=TEX

=SML
val grp_2 =
[
(mk_z_Ì, Ì_gen_semantic_const, "Z'Ì"),
(mk_z_Í, Í_gen_semantic_const, "Z'Í"),
(mk_z_seta, seta_gen_semantic_const, "Z'Seta"),
(mk_z_¶1, ¶1_gen_semantic_const, "Z'¶1")
];

val data_2 = fst (make_mdt050_decls decl_names "X");
fun do_grp_2 () = map (apply2 mk_z_true) (cross grp_2 data_2);
=TEX

\subsection{Families Denoted by a Single Index}

=SML
val grp_3 =
[
(mk_z_s, s_gen_semantic_const, "Z's"),
(mk_z_s, s_gen_semantic_const, "Z's")
];
val data_3 = snd (make_mdt050_schs decl_names "X");
fun do_grp_3 () = map apply1 (cross grp_3 data_3);
=TEX

=SML
val grp_4 =
[
(mk_z_pres, pres_gen_semantic_const, "Z'Pres")
];
val data_4 =
let
	val predata = ["a,b'", "a,b',c", "a,b',c,d'", "a,b',c,d',e"];
in
	snd (make_mdt050_schs predata "X")
end;
fun do_grp_4 () = map apply1 (cross grp_4 data_4);
=TEX

=SML
val grp_5 =
[
(mk_z_h_schema, schema_gen_semantic_const, "Z's")
];
val data_5 = map (fn (s, sc)=> (s, dest_z_h_schema sc)) data_3;
fun do_grp_5 () = map apply1 (cross grp_5 data_5);
=TEX

\subsection{Families Denoted by Two Indices}
=SML
val grp_6 =
[
(mk_z_decors, decors_gen_semantic_const, "Z'Decors")
];
val data_6 = map (fn d =>
		let	val (s, sch) = hd data_3;
		in
			(s^sqbrk d, (sch, d))
		end) decor_names;
fun do_grp_6 () = map apply1 (cross grp_6 data_6);
=TEX

=SML
val grp_7 =
[
(mk_z_±s, dyops_gen_semantic_const, "Z'±s"),
(mk_z_²s, dyops_gen_semantic_const, "Z'²s"),
(mk_z_´s, dyops_gen_semantic_const, "Z'´s"),
(mk_z_¤s, dyops_gen_semantic_const, "Z'¤s")
];
val d_7a = snd (make_mdt050_schs ["x", "x,y", "x,y,z"] "ú");
val d_7b = snd (make_mdt050_schs ["a,p", "a,p,q"] "X");
val d_7 = data_3@d_7a@d_7b;
val data_7 = map (fn ((s1,sc1),(s2,sc2)) =>
	(s1^s2, (sc1,sc2)))(combine d_7 (rev d_7));
fun do_grp_7 () = map apply1 (cross grp_7 data_7);
=TEX

=SML
val grp_8 =
[
(mk_z_µs, quants_gen_semantic_const, "Z'µs"),
(mk_z_¶s, quants_gen_semantic_const, "Z'¶s"),
(mk_z_¶1s, quants_gen_semantic_const, "Z'¶1s")
];
val sch_8 = (snd o hd o tl o tl o rev) data_3;
val data_8 =
let
	val decls = map snd ((rev o tl o rev) data_2);
	val dns = map sqbrk ((rev o tl o rev) decl_names);
	val dn2 = sqbrk"a,b,c";
	val dnames = map (fn n => n ^ dn2) dns;
in
	combine dnames decls
end;
fun do_grp_8 () = map (apply2 sch_8)(cross grp_8 data_8);
=TEX
=SML
val grp_9 =
[
(mk_z_hides, hides_gen_semantic_const, "Z'Hides")
];
val data_9 =
let
	val (ns, schs) = split (tl data_3);
	val hides = (rev o tl o rev) decl_names;
	val hides1 = map (fn s =>
		explode s drop (fn s' => s' = ",")) hides;
	val dns = map fst ((rev o tl o rev) data_3);
	val dnames = map (op ^) (combine ns dns);
in
	combine dnames (combine schs hides1)
end;
fun do_grp_9 () = map apply1 (cross grp_9 data_9);
=TEX

=SML
val grp_10 =
[
(mk_z_ùs, ùs_gen_semantic_const, "Z'ùs")
];
val data_10 =
let
	val (ns, schs) = split data_3;
	val (ss, sch) = (hd o rev) data_3;
	val sprojnames = map (fn s => ss^s) ns;
	val sprojs = map (fn s => (sch, s)) schs;
in
	combine sprojnames sprojs
end;
fun do_grp_10 () = map (apply1)(cross grp_10 data_10);
=TEX

=SML
val grp_11 =
[
(mk_z_»s, »s_gen_semantic_const, "Z'»s")
];
val data_11 =
let
	val postdata = ["a!,b", "a!,b,c!", "a!,b,c!,d", "a!,b,c!,d,e!"];
	val (dns, schs) = split (snd (make_mdt050_schs postdata "X"));
	val (dns1, sch1) = split data_4;
	val dnames = map (op ^) (combine dns1 dns);
in
	combine dnames (combine sch1 schs)
end;
fun do_grp_11 () = map (apply1)(cross grp_11 data_11);
=TEX

=SML
val grp_12 =
[
(mk_z_renames, renames_gen_semantic_const, "Z'Renames")
];
val sch_12 = (snd o hd o rev) data_3;
val data_12 =
let	val olds = (rev o tl o rev) decl_names;
	val olds1 = map (fn s =>
		explode s drop (fn s' => s' = ",")) olds;
	val news = map (map (fn s => ("new_"^s, s))) olds1;
	val (n, s) = (hd o rev) data_3;
	val args = map (fn ren => (sch_12, ren)) news;
	val rens = map (map (fn (s1,s2) => s1^"|"^s2))
			(map snd args);
	val rens1 = map join_string rens;
	val rens2 = map (fn ren => n^(sqbrk ren)) rens1;
in
	combine rens2 args
end;
fun do_grp_12 () = map (apply1)(cross grp_12 data_12);
=TEX

=SML
val grp_13 =
[
(mk_z_binding, binding_gen_semantic_const, "Z'Mk_S")
];
val data_13 =
let
	val dns = map (fn s =>
		explode s drop (fn s' => s' = ",")) decl_names;
	val (sn, sch) = hd data_3;
	val args = map (map (fn d => (d, sch))) dns;
	val names1 = map join_string dns;
	val names2 = map (fn ren => (sqbrk ren)) names1;
in
	 combine names2 args
end;
fun do_grp_13 () = map apply1 (cross grp_13 data_13);
=TEX
\section{ERROR TESTING}
We now check that the constant generator functions
fail correctly.
=SML
val trues = string_of_term ñtrue®;
val bools = string_of_type BOOL®;
store_mt_results mt_run_fail [
	("tuple_gen_semantic_const 47040",
	tuple_gen_semantic_const,
	mk_t,
	gen_fail_msg "tuple_gen_semantic_const" 47040 [bools]),
	("seta_gen_semantic_const 50001",
	seta_gen_semantic_const,
	mk_t,
	gen_fail_msg "seta_gen_semantic_const" 50001 [trues]),
	("Ì_gen_semantic_const 50001",
	Ì_gen_semantic_const,
	mk_t,
	gen_fail_msg "Ì_gen_semantic_const" 50001 [trues]),
	("¸_gen_semantic_const 50001",
	¸_gen_semantic_const,
	mk_t,
	gen_fail_msg "¸_gen_semantic_const" 50001 [trues]),
	("Í_gen_semantic_const 50001",
	Í_gen_semantic_const,
	mk_t,
	gen_fail_msg "Í_gen_semantic_const" 50001 [trues]),
	("binding_gen_semantic_const 47050",
	binding_gen_semantic_const,
	mk_t,
	gen_fail_msg "binding_gen_semantic_const" 47050 [bools]),
	("¶1_gen_semantic_const 50001",
	¶1_gen_semantic_const,
	mk_t,
	gen_fail_msg "¶1_gen_semantic_const" 50001 [trues]),
	("schema_gen_semantic_const 50001",
	schema_gen_semantic_const,
	mk_t,
	gen_fail_msg "schema_gen_semantic_const" 50001 [trues]),
	("pres_gen_semantic_const 50001",
	pres_gen_semantic_const,
	mk_t,
	gen_fail_msg "pres_gen_semantic_const" 50001 [trues]),
	("s_gen_semantic_const 50001",
	s_gen_semantic_const,
	mk_t,
	gen_fail_msg "s_gen_semantic_const" 50001 [trues]),
	("s_gen_semantic_const 50001",
	s_gen_semantic_const,
	mk_t,
	gen_fail_msg "s_gen_semantic_const" 50001 [trues]),
	("decors_gen_semantic_const 50001",
	decors_gen_semantic_const,
	mk_t,
	gen_fail_msg "decors_gen_semantic_const" 50001 [trues]),
	("dyops_gen_semantic_const 50001",
	dyops_gen_semantic_const,
	mk_t,
	gen_fail_msg "dyops_gen_semantic_const" 50001 [trues]),
	("ùs_gen_semantic_const 50001",
	ùs_gen_semantic_const,
	mk_t,
	gen_fail_msg "ùs_gen_semantic_const" 50001 [trues]),
	("hides_gen_semantic_const 50001",
	hides_gen_semantic_const,
	mk_t,
	gen_fail_msg "hides_gen_semantic_const" 50001 [trues]),
	("quants_gen_semantic_const 50001",
	quants_gen_semantic_const,
	mk_t,
	gen_fail_msg "quants_gen_semantic_const" 50001 [trues]),
	("»s_gen_semantic_const 50001",
	»s_gen_semantic_const,
	mk_t,
	gen_fail_msg "»s_gen_semantic_const" 50001 [trues]),
	("renames_gen_semantic_const 50001",
	renames_gen_semantic_const,
	mk_t,
	gen_fail_msg "renames_gen_semantic_const" 50001 [trues])
	];
=TEX
=SML
val a_var = mk_var("banana", BOOL);
val a_s = string_of_term a_var;
store_mt_results mt_run_fail [
	("tuple_gen_semantic_const 50001",
	tuple_gen_semantic_const,
	a_var,
	gen_fail_msg "tuple_gen_semantic_const" 50001 [a_s]),
	("seta_gen_semantic_const 50001 a",
	seta_gen_semantic_const,
	a_var,
	gen_fail_msg "seta_gen_semantic_const" 50001 [a_s]),
	("Ì_gen_semantic_const 50001 a",
	Ì_gen_semantic_const,
	a_var,
	gen_fail_msg "Ì_gen_semantic_const" 50001 [a_s]),
	("¸_gen_semantic_const 50001 a",
	¸_gen_semantic_const,
	a_var,
	gen_fail_msg "¸_gen_semantic_const" 50001 [a_s]),
	("Í_gen_semantic_const 50001 a",
	Í_gen_semantic_const,
	a_var,
	gen_fail_msg "Í_gen_semantic_const" 50001 [a_s]),
	("binding_gen_semantic_const 50001",
	binding_gen_semantic_const,
	a_var,
	gen_fail_msg "binding_gen_semantic_const" 50001 [a_s]),
	("¶1_gen_semantic_const 50001 a",
	¶1_gen_semantic_const,
	a_var,
	gen_fail_msg "¶1_gen_semantic_const" 50001 [a_s]),
	("schema_gen_semantic_const 50001 a",
	schema_gen_semantic_const,
	a_var,
	gen_fail_msg "schema_gen_semantic_const" 50001 [a_s]),
	("pres_gen_semantic_const 50001 a",
	pres_gen_semantic_const,
	a_var,
	gen_fail_msg "pres_gen_semantic_const" 50001 [a_s]),
	("s_gen_semantic_const 50001 a",
	s_gen_semantic_const,
	a_var,
	gen_fail_msg "s_gen_semantic_const" 50001 [a_s]),
	("s_gen_semantic_const 50001 a",
	s_gen_semantic_const,
	a_var,
	gen_fail_msg "s_gen_semantic_const" 50001 [a_s]),
	("decors_gen_semantic_const 50001 a",
	decors_gen_semantic_const,
	a_var,
	gen_fail_msg "decors_gen_semantic_const" 50001 [a_s]),
	("dyops_gen_semantic_const 50001 a",
	dyops_gen_semantic_const,
	a_var,
	gen_fail_msg "dyops_gen_semantic_const" 50001 [a_s]),
	("ùs_gen_semantic_const 50001 a",
	ùs_gen_semantic_const,
	a_var,
	gen_fail_msg "ùs_gen_semantic_const" 50001 [a_s]),
	("hides_gen_semantic_const 50001 a",
	hides_gen_semantic_const,
	a_var,
	gen_fail_msg "hides_gen_semantic_const" 50001 [a_s]),
	("quants_gen_semantic_const 50001 a",
	quants_gen_semantic_const,
	a_var,
	gen_fail_msg "quants_gen_semantic_const" 50001 [a_s]),
	("»s_gen_semantic_const 50001 a",
	»s_gen_semantic_const,
	a_var,
	gen_fail_msg "»s_gen_semantic_const" 50001 [a_s]),
	("renames_gen_semantic_const 50001 a",
	renames_gen_semantic_const,
	a_var,
	gen_fail_msg "renames_gen_semantic_const" 50001 [a_s])
	];
=TEX
=SML
store_mt_results mt_run_fail [
	("seta_gen_semantic_const 50001 a",
	seta_gen_semantic_const,
	mk_const("Z'Seta[x]",BOOL),
	gen_fail_msg "seta_gen_semantic_const" 50001 [string_of_term(mk_const("Z'Seta[x]",BOOL))]),
	("Ì_gen_semantic_const 50001 a",
	Ì_gen_semantic_const,
	mk_const("Z'Ì[x]",BOOL),
	gen_fail_msg "Ì_gen_semantic_const" 50001 [string_of_term(mk_const("Z'Ì[x]",BOOL))]),
	("¸_gen_semantic_const 50001 a",
	¸_gen_semantic_const,
	mk_const("Z'¸[x]",BOOL),
	gen_fail_msg "¸_gen_semantic_const" 50001 [string_of_term(mk_const("Z'¸[x]",BOOL))]),
	("Í_gen_semantic_const 50001 a",
	Í_gen_semantic_const,
	mk_const("Z'Í[x]",BOOL),
	gen_fail_msg "Í_gen_semantic_const" 50001 [string_of_term(mk_const("Z'Í[x]",BOOL))]),
	("¶1_gen_semantic_const 50001 a",
	¶1_gen_semantic_const,
	mk_const("Z'¶1[x]",BOOL),
	gen_fail_msg "¶1_gen_semantic_const" 50001 [string_of_term(mk_const("Z'¶1[x]",BOOL))]),
	("schema_gen_semantic_const 50001 a",
	schema_gen_semantic_const,
	mk_const("Z's[x]",BOOL),
	gen_fail_msg "schema_gen_semantic_const" 50001 [string_of_term(mk_const("Z's[x]",BOOL))]),
	("pres_gen_semantic_const 50001 a",
	pres_gen_semantic_const,
	mk_const("Z'Pres[x][y]",BOOL),
	gen_fail_msg "pres_gen_semantic_const" 50001 [string_of_term(mk_const("Z'Pres[x][y]",BOOL))]),
	("s_gen_semantic_const 50001 a",
	s_gen_semantic_const,
	mk_const("Z's[x][y]",BOOL),
	gen_fail_msg "s_gen_semantic_const" 50001 [string_of_term(mk_const("Z's[x][y]",BOOL))]),
	("s_gen_semantic_const 50001 a",
	s_gen_semantic_const,
	mk_const("Z's[x][y]",BOOL),
	gen_fail_msg "s_gen_semantic_const" 50001 [string_of_term(mk_const("Z's[x][y]",BOOL))]),
	("decors_gen_semantic_const 50001 a",
	decors_gen_semantic_const,
	mk_const("Z'Decors[x,xy,y]['']",BOOL),
	gen_fail_msg "decors_gen_semantic_const" 50001 [string_of_term(mk_const("Z'Decors[x,xy,y]['']",BOOL))]),
	("dyops_gen_semantic_const 50001 a",
	dyops_gen_semantic_const,
	mk_const("Z'±s[x,y][p,q]",BOOL),
	gen_fail_msg "dyops_gen_semantic_const" 50001 [string_of_term(mk_const("Z'±s[x,y][p,q]",BOOL))]),
	("dyops_gen_semantic_const 50001 b",
	dyops_gen_semantic_const,
	mk_const("Z'rubbers[x,y][p,q]",BOOL),
	gen_fail_msg "dyops_gen_semantic_const" 50001 [string_of_term(mk_const("Z'rubbers[x,y][p,q]",BOOL))]),
	("ùs_gen_semantic_const 50001 a",
	ùs_gen_semantic_const,
	mk_const("Z'ùs[x][y]",BOOL),
	gen_fail_msg "ùs_gen_semantic_const" 50001 [string_of_term(mk_const("Z'ùs[x][y]",BOOL))]),
	("hides_gen_semantic_const 50001 a",
	hides_gen_semantic_const,
	mk_const("Z'Hides[x][y]",BOOL),
	gen_fail_msg "hides_gen_semantic_const" 50001 [string_of_term(mk_const("Z'Hides[x][y]",BOOL))]),
	("quants_gen_semantic_const 50001 a",
	quants_gen_semantic_const,
	mk_const("Z'µs[x][x]",BOOL),
	gen_fail_msg "quants_gen_semantic_const" 50001 [string_of_term(mk_const("Z'µs[x][x]",BOOL))]),
	("»s_gen_semantic_const 50001 a",
	»s_gen_semantic_const,
	mk_const("Z'»s[p][p]",BOOL),
	gen_fail_msg "»s_gen_semantic_const" 50001 [string_of_term(mk_const("Z'»s[p][p]",BOOL))]),
	("renames_gen_semantic_const 50001 a",
	renames_gen_semantic_const,
	mk_const("Z'ùs[a,b][a]",BOOL),
	gen_fail_msg "renames_gen_semantic_const" 50001 [string_of_term(mk_const("Z'ùs[a,b][a]",BOOL))])
	];
=TEX
=SML
let
val schema = mk_z_h_schema(mk_z_decl[mk_z_dec([¬x:'X®],mk_u 'X SET®)],mk_t);
val duff_tm = mk_z_hides(schema,["y"]);
in
store_mt_results mt_run_fail[("hides_gen_semantic_const 50004",
	hides_gen_semantic_const,
	duff_tm,
	gen_fail_msg "hides_gen_semantic_const" 50004 ["y",string_of_term duff_tm]
	)]
end;
=TEX
\section{EXECUTION OF TESTS}

=SML
diag_string "Module testing will take a few moments...";
store_mt_results do_grp_1 ();
store_mt_results do_grp_2 ();
store_mt_results do_grp_3 ();
store_mt_results do_grp_4 ();
store_mt_results do_grp_5 ();
store_mt_results do_grp_6 ();
store_mt_results do_grp_7 ();
store_mt_results do_grp_8 ();
store_mt_results do_grp_9 ();
store_mt_results do_grp_10 ();
store_mt_results do_grp_11 ();
store_mt_results do_grp_12 ();
store_mt_results do_grp_13 ();
=TEX
\section{CACHE THEORIES}
This is an additional set of tests to address caching problems.
=SML
open	ZGeneratedConstants;
open_theory cache_theory;
force_delete_theory "cachetest_mdt050" handle _ => ();
new_theory "cachetest_mdt050";
mapfilter lock_theory (get_cache_theories());
set_cache_theories ("cachetest_mdt050" :: get_cache_theories());
open_theory cache_theory;
force_delete_theory "cachetest_mdt050_1" handle _ => ();
new_theory "cachetest_mdt050_1";
local val decs = mk_z_dec(
	(map (fn n => mk_var(n ^ "ZYX", 'X®)) ["a","b","c","d"]),
	mk_u 'X SET®);
	val schema = mk_z_h_schema(mk_z_decl[decs],mk_t);
in
val sch_res = schema_gen_semantic_const schema;
end;
val seta_res = seta_gen_semantic_const
	(mk_z_seta(ñdecl_ofñ[get, cache, theory, test, a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r : X]®®®,
	mk_z_true, mk_z_true));
open_theory cache_theory;
force_delete_theory "cachetest_mdt050_2" handle _ => ();
new_theory "cachetest_mdt050_2";
=TEX
We now have got to the point where versions before 1.40 of \cite{ISS/HAT/DAZ/IMP050} would fail.
=SML

let val decs = mk_z_dec(
	(map (fn n => mk_var(n ^ "ZYX", 'X®)) ["a","b","c","d"]),
	mk_u 'X SET®);
	val schema = mk_z_h_schema(mk_z_decl[decs],mk_t);
in
store_mt_results_show (mt_runf (op =$)) [(
	"Cached Schema",
	concl o schema_gen_semantic_const,
	schema,
	concl sch_res)]
end;
store_mt_results_show (mt_runf (op =$)) [(
	"Cached seta",
	concl o seta_gen_semantic_const ,
	(mk_z_seta(ñdecl_ofñ[get, cache, theory, test, a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r  : X]®®®,
	mk_z_true, mk_z_true)),
	concl seta_res)];
=IGN
open_theory "cachetest_mdt050";
open_theory "cachetest_mdt050_1";
z_print_theory "cachetest_mdt050";
z_print_theory "cachetest_mdt050_1";
z_print_theory "cachetest_mdt050_2";
get_cache_theory();
get_cache_theories();
=TEX
\section{EPILOGUE}
=SML
diag_string (summarize_mt_results());
=TEX

%\newpage
%\twocolumn[\section{INDEX OF DEFINED TERMS}]
%\printindex
\end{document}

