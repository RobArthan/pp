=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Implementation of Z Primitive Constants in the Theory ``Z''}  %% Mandatory field
\def\TPPheadtitle{Implementation of Z Primitive Constants \cr in the Theory ``Z''}
\TPPref{DS/FMU/IED/DTD052}  %% Mandatory field
\def\SCCSversion{$Revision$ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{G.M.Prout&WIN01}  %% Mandatory field
%\TPPauthors{G.T.Scullard&WIN01\\G.M.Prout&WIN01 }
\TPPauthorisation{R.B.Jones & Project Manager}
\TPPabstract{This document contains the implementation of the Z primitive constants in the theory ``Z'' of the Z Proof Support Subsystem.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes history} 
\begin{description}
\item [Issue 1.1] (\TPPdate{\FormatDate{$Date$
}})
First draft version.
\end{description}
%\subsection{Changes forecast}
\section{GENERAL}
\subsection{Scope}
This document contains an implementation of the 
Z primitive constants in the theory ``Z'' of
the Z Proof Support System (see \cite{DS/FMU/IED/HLD015}).
This is called for in \cite{DS/FMU/IED/HLD017}.
The design is in \cite{DS/FMU/IED/DTD052}.
\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains an implementation of the 
Z primitive constants in the theory ``Z'' of
the Z Proof Support System.
\subsubsection{Dependencies}
This document takes its signature from \cite{DS/FMU/IED/DTD052},
and also requires the theory ``char'' defined in
\cite{DS/FMU/IED/DTD040}.
\subsubsection{Deficiencies}
\subsection{Design of the Theory ``Z''}
\subsubsection{Possible Enhancements}
\section{THE THEORY  ``Z''}
=SML
structure ‚ZTheory· : ZTheory = struct
val _ = open_theory "char";
val _ = new_theory "Z";
=TEX
=SML
val _ = new_specification(["IsT1Rep"],1, (
push_goal([],ªÑ IsT1Rep:'1 ã BOOL é
	IsT1Rep = ç x: '1é Tº);
a(Ñ_tac ªç x:'1é Tº THEN rewrite_tac[]);
pop_thm()));
=TEX
=SML
val ‚T_1_def· = new_type_defn("T_[1]","T_[1]",["'1"],(
push_goal([],ªÑ f: '1 é IsT1Rep fº);
a(rewrite_tac[get_specification"IsT1Rep"]);
pop_thm()));
=TEX
=SML
val _ = new_specification(["IsT2Rep"],1, (
push_goal([],ªÑ IsT2Rep:'1 â '2 ã BOOL é
	IsT2Rep = ç x: '1  â '2 é Tº);
a(Ñ_tac ªç x:'1 â '2é Tº THEN rewrite_tac[]);
pop_thm()));
=TEX
=SML
val ‚T_2_def· = new_type_defn("T_[2]","T_[2]",["'1","'2"],(
push_goal([],ªÑ f: '1 â '2 é IsT2Rep fº);
a(rewrite_tac[get_specification"IsT2Rep"]);
pop_thm()));
=TEX
=SML
val Z'T_1_def = new_specification(["Z'T[1]"],1,(
push_goal([],ªÑ $"Z'T[1]":'1 ã '1 $"T_[1]" é
	(É p  : '1 $"T_[1]" é 
		Ñ x é p = $"Z'T[1]" x)
	Ä 
	É x yé
		$"Z'T[1]" x = $"Z'T[1]" y Ç (x = y)º);
a (strip_asm_tac (rewrite_rule [get_specification"IsT1Rep"]
	(simple_ä_match_mp_rule type_lemmas_thm T_1_def)));
a(Ñ_tac	ªç x é abs xº THEN rewrite_tac[] THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(Ñ_tac	ªrep pº THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(POP_ASM_T (ante_tac o ap_fun_rule ªrepº));
a(asm_rewrite_tac[]);
(* *** Goal "3" *** *)
a(POP_ASM_T (ante_tac o ap_fun_rule ªabsº));
a(asm_rewrite_tac[]);
pop_thm()));
=TEX
=SML
val Z'T_2_def = new_specification(["Z'T[2]"],1,(
push_goal([],ªÑ $"Z'T[2]":'1 ã '2 ã ('1,'2) $"T_[2]" é
	(É p  : ('1, '2) $"T_[2]" é 
		Ñ x1 x2 é p = $"Z'T[2]" x1 x2)
	Ä 
	É x1 x2 y1 y2é
		$"Z'T[2]" x1 x2 = $"Z'T[2]" y1 y2 Ç (x1 = y1) Ä (x2 = y2)º);
a (strip_asm_tac (rewrite_rule [get_specification"IsT2Rep"]
	(simple_ä_match_mp_rule type_lemmas_thm T_2_def)));
a(Ñ_tac	ªç x é Curry abs xº THEN rewrite_tac[pair_clauses] THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(MAP_EVERY Ñ_tac
	[ªFst(rep p)º,
	ªSnd(rep p)º]THEN asm_rewrite_tac[pair_clauses]);
(* *** Goal "2" *** *)
a(POP_ASM_T (ante_tac o ap_fun_rule ªrepº));
a(asm_rewrite_tac[pair_clauses]);
a(ä_T rewrite_thm_tac);
(* *** Goal "3" *** *)
a(POP_ASM_T (ante_tac o ap_fun_rule ªrepº));
a(asm_rewrite_tac[pair_clauses]);
a(ä_T rewrite_thm_tac);
(* *** Goal "4" *** *)
a(LEMMA_Tª(x1, x2) =(y1, y2)º(ante_tac o ap_fun_rule ªabsº));
(* *** Goal "4.1" *** *)
a(asm_rewrite_tac[pair_clauses]);
(* *** Goal "4.2" *** *)
a(rewrite_tac[]);
pop_thm()));
=TEX
=SML
val _ = new_specification(["IsëRep"],1, (
push_goal([],ªÑ $"IsëRep":('a ã BOOL) ã BOOL é
	$"IsëRep" = ç P: 'a ã BOOLé Tº);
a(Ñ_tac ªç x:'a ã BOOLé Tº THEN rewrite_tac[]);
pop_thm()));
=TEX
=SML
val ‚ë_def· = new_type_defn("ë","ë",["'a"],(
push_goal([],ªÑ x: 'a ã BOOL é $"IsëRep" xº);
a(rewrite_tac[get_specification"IsëRep"]);
pop_thm()));
=TEX
=SML
val _ = declare_infix (230,"ù");

val _ = new_specification(["Z'absë","ù"],2,(
push_goal([],ªÑ ($"Z'absë":('a ã BOOL) ã 'a ë)
	($ù : 'a ã 'a ë ã BOOL) é
	É (x : 'a) (p:'a ã BOOL)(S1: 'a ë) (S2 : 'a ë) é
	(x ù ($"Z'absë" p) Ç p x) Ä
	(S1 = S2 Ç (É x:'aé x ù S1 Ç x ù S2))º);
a (strip_asm_tac (rewrite_rule [get_specification"IsëRep"]
	(simple_ä_match_mp_rule type_lemmas_thm ë_def)));
a(MAP_EVERY Ñ_tac
	[ªç x é abs xº,
	ªç x S é (rep S) xº]);
a(asm_rewrite_tac[]);
a(rewrite_tac[all_É_intro(eq_sym_rule(all_simple_É_elim ext_thm))]);
a(REPEAT simple_É_tac THEN Ç_tac);
(* *** Goal "1" *** *)
a(asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(POP_ASM_T (ante_tac o ap_fun_rule ªabsº));
a(asm_rewrite_tac[]);
pop_thm()));
=TEX
=SML
val _= new_specification(["Z'§"],1,(
push_goal([],ªÑ $"Z'§":'a ë é É x:'a é å(x ù $"Z'§")º);
a(Ñ_tac ª$"Z'absë"(çXéF)º THEN rewrite_tac[get_specification"Z'absë"]);
pop_thm()));
=TEX
=SML
val _ = new_specification(["Z'°"],1,(
push_goal([],ªÑ $"Z'°": 'a ë ã 'a ë ã 'a ë é
	É (x:'a) (S1 : 'a ë) (S2 : 'a ë) é 
	x ù $"Z'°" S1 S2 Ç x ù S1 Å x ù S2º);
a(Ñ_tac ªç S1 S2 é $"Z'absë"(çxéx ù S1 Å x ù S2)º
	THEN rewrite_tac[get_specification"Z'absë"]);
pop_thm()));
=TEX
=SML
val _ = new_specification(["Z'SingletonSet"],1,(
push_goal([],ªÑ Z'SingletonSet: 'a ã 'a ë é
	Éx yéy ù Z'SingletonSet x Ç (y = x)º);
a(Ñ_tac ªçyé$"Z'absë"(çxéx = y)º
	THEN rewrite_tac[get_specification"Z'absë"]);
pop_thm()));
=TEX
=SML
val ‚Z'ë_clauses· = save_thm("Z'ë_clauses",(
push_goal([],ªÉ (x : 'a) (y : 'a)(p:'a ã BOOL) (S1: 'a ë) (S2 : 'a ë)é
	(x ù ($"Z'absë" p) Ç p x) Ä
	((S1 = S2) Ç (É x:'aé x ù S1 Ç x ù S2)) Ä
	å(x ù $"Z'§") Ä
	 (x ù ($"Z'°" S1 S2) Ç x ù S1 Å x ù S2) Ä
	(y ù Z'SingletonSet x Ç y = x)º);
a(rewrite_tac[get_specification"Z'absë",
	get_specification"Z'§",
	get_specification"Z'°",
	get_specification"Z'SingletonSet"]);
pop_thm()));
=TEX
=SML
val ‚true_def· = simple_new_defn("true","true",ªTº);
val ‚false_def· = simple_new_defn("false","false",ªFº);
val ‚bool_def· = new_specification(["bool"],1,(
push_goal([],ªÑ bool:BOOL ë é
	Éx:BOOLé(x ù bool)  Ç (x = true) Å (x = false)º);
a(Ñ_tac ª$"Z'absë"(çx é (x = true) Å (x = false))º
	THEN rewrite_tac[Z'ë_clauses]);
pop_thm()));
=TEX
=SML
val ‚Z'dec_def· = new_specification(["Z'dec"],1,(
push_goal([],ªÑ Z'dec:('a LIST â 'a ë )ã BOOL é
	É vs é Z'dec ([], vs) Ä (É v vl é Z'dec ((Cons v vl), vs) Ç v ù vs Ä Z'dec (vl, vs))º);
a(strip_asm_tac (list_É_elim
	[ªç vs:'a ë é Tº,ª(ç (v:'a) b (vl:'a LIST)(vs:'a ë)é  (v ù vs) Ä (b vs))º]
	(inst_type_rule[(ª:'a ë ã BOOLº,ª:'bº)] list_prim_rec_thm)));
a(Ñ_tac ªUncurry fº  THEN asm_rewrite_tac[pair_clauses]);
pop_thm()));
=TEX
=SML
val ‚Z'decsexp_def· = simple_new_defn("Z'decsexp","Z'decsexp",ª$ùº);
=TEX
=SML
val ‚Z'decl_def· = new_specification(["Z'decl"],1,(
push_goal([],ªÑ Z'decl:BOOL LIST ã BOOL é
	Z'decl Nil
	Ä É b bl é Z'decl (Cons  b bl) = (b Ä (Z'decl bl))º);
a(strip_asm_tac (list_É_elim
	[ªTº,ª(ç (b:BOOL) a (c: BOOL LIST) é  b Ä a)º]
	(inst_type_rule[(ª:BOOLº,ª:'aº),(ª:BOOLº,ª:'bº)] list_prim_rec_thm)));
a(Ñ_tac ªfº  THEN asm_rewrite_tac[]);
pop_thm()));
=TEX
=SML
val ‚Z'totality_def· = new_specification(["Z'totality"],1,(
push_goal([],ªÑ Z'totality:'a ë é Éx:'aéx ù Z'totalityº);
a(Ñ_tac ª$"Z'absë"(çxéT)º  THEN rewrite_tac[Z'ë_clauses]);
pop_thm()));
=TEX
=SML
val ‚U_def· = new_specification(["U"],1,(
push_goal([],ªÑ U:('1)$"T_[1]" ã '1 é
	Éxé U ($"Z'T[1]" x) = xº);
a(strip_asm_tac(Z'T_1_def));
a(Ñ_tac ªçtéáxé$"Z'T[1]" x =t º) ;
a(asm_rewrite_tac[] THEN strip_tac);
a(LEMMA_T ªÑx'éx' = xº (accept_tac o Ñ_á_rule));
a(Ñ_tac ªxº THEN rewrite_tac[]) ;
pop_thm()));
=TEX
=SML
val _ = new_type("Ì", 0);
val _ = new_const("Ü_to_Ì",ª:Ü ã Ìº);
=TEX
=SML
val ‚Z'ë_def· = new_specification(["Z'ë"],1,(
push_goal([],ªÑ $"Z'ë":'a ë ã ('a ë) ë é
	É (X : 'a ë) (S: 'a ë) é 
	X ù $"Z'ë" S Ç (Éxéx ù X ä x ù S)º);
a(Ñ_tac ªç S é$"Z'absë"(çXéÉxéx ù X ä x ù S)º
	THEN rewrite_tac[Z'ë_clauses]);
pop_thm()));
=TEX
=SML
val ‚Z'setd_def· = new_specification(["Z'setd"],1,(
push_goal([],ªÑ Z'setd:'a LIST ã 'a ë é
	Z'setd Nil = $"Z'§"
	Ä É h t é Z'setd (Cons  h t) = $"Z'°" (Z'setd t) (Z'SingletonSet h)º);
a(strip_asm_tac (list_É_elim
	[ª$"Z'§"º,ª(ç (h:'a) b (c: 'a LIST) é$"Z'°" b (Z'SingletonSet h))º
]
	(inst_type_rule[(ª:'a ëº,ª:'bº)] list_prim_rec_thm)));
a(Ñ_tac ªfº  THEN asm_rewrite_tac[]);
pop_thm()));
=TEX
=SML
val ‚Z'NumList_def· = new_specification(["Z'NumList"],1,(
push_goal([],ªÑ Z'NumList:('a LIST â Ü ) ã (((Ì, 'a)$"T_[2]") ë)é
	Én:ÜéZ'NumList ([],n) = $"Z'§"
	Ä (É a list é Z'NumList  ((Cons  a list),n) = 
		$"Z'°" (Z'NumList (list,n + 1)) 
			(Z'SingletonSet	($"Z'T[2]" (Ü_to_Ì(n + 1))a)))º);
a(strip_asm_tac (list_É_elim
	[ªçn:Üé$"Z'§":((Ì, 'a)$"T_[2]") ëº,
	ªç (a:'a) (b:Ü  ã (((Ì, 'a)$"T_[2]") ë)) (c: 'a LIST)(n:Ü)é$"Z'°"  (b (n + 1))
	(Z'SingletonSet	($"Z'T[2]" (Ü_to_Ì(n + 1))a))º]
	(inst_type_rule[(ª:Ü  ã (((Ì, 'a)$"T_[2]") ë)º,ª:'bº)] list_prim_rec_thm)));
a(Ñ_tac ªUncurry fº  THEN asm_rewrite_tac[pair_clauses]);
pop_thm()));
=TEX
=SML
val ‚Z'æø_def· = new_specification(["Z'æø"],1,(
push_goal([],ªÑ $"Z'æø":'a LIST ã ((Ì, 'a)$"T_[2]")ë é
	Élé$"Z'æø" l =  Z'NumList (l,0)º);
a(Ñ_tac ªçléZ'NumList (l,0)º  THEN rewrite_tac[]);
pop_thm()));
=TEX
=SML
val ‚Z'á_def· = new_specification(["Z'á"],1,(
push_goal([],ªÑ $"Z'á":('a ã BOOL) ã 'a é
	É f t é ((f = (çxéx = t)) ä ($"Z'á" f = t))º);
a(Ñ_tac ªçf:('a ã BOOL)éáx:'aé f xº  THEN rewrite_tac[]);
a(REPEAT strip_tac THEN asm_rewrite_tac[]);
a(LEMMA_TªÑxéx=tº(strip_asm_tac o  Ñ_á_rule));
a(Ñ_tac ªtº THEN rewrite_tac[]);
pop_thm()));
=TEX
=SML
val ‚Z'app_def· = new_specification(["Z'app"],1,(
push_goal([],ªÑ $"Z'app":(('a,'b)$"T_[2]")ë ã 'a ã 'b é
	Éf (x:'a) é Z'app  f x = 
	$"Z'á"(çy:'bé($"Z'T[2]" x y) ù f)º);

a(Ñ_tac ªç(f:(('a,'b)$"T_[2]")ë)(x:'a)é $"Z'á" (ç y:'bé $"Z'T[2]" x y ù f)º  THEN rewrite_tac[]);
pop_thm()));
=TEX
=SML
val ‚Z'≠_def· = new_specification(["Z'≠"],1,(
push_goal([],ªÑ $"Z'≠":'a ã 'b ã 'a é	É x y é $"Z'≠" x y = xº);
a(Ñ_tac ªç(x:'a)(y:'b)éxº  THEN rewrite_tac[]);
pop_thm()));
=TEX
=SML
val ‚Z'predsexp_def· = simple_new_defn("Z'predsexp","Z'predsexp",ª$ùº);
=TEX
=SML
val ‚Z'å%down%s_def· = new_specification(["Z'å%down%s"],1,(
push_goal([],ªÑ $"Z'å%down%s":'a ë ã 'a ë é
	É x s é  x ù $"Z'å%down%s" s Ç å(x ù s)º);
a(Ñ_tac ªçs:'a ëé$"Z'absë"(çx:'aéå(x ù s))º  THEN rewrite_tac[get_specification"Z'absë"]);
pop_thm()));
=TEX
\section{END OF THEORY ``Z''}
=SML
end; (* of structure ZTheory *)
open ZTheory;
=TEX
\newpage
\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}
