=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design for the Z Schema Calculus}  %% Mandatory field
\TPPref{DS/FMU/IED/DTD043}  %% Mandatory field
\def\SCCSversion{$Revision$
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPclass{}
\TPPkeywords{}
% \TPPauthor{G.~Prout & WIN01}  %% Mandatory field
\TPPauthors{G.~Prout & WIN01\\K.~Blackburn & WIN01}
\TPPauthorisation{R.B.~Jones & FMU Manager}
\TPPabstract{This document contains the detailed design for the 
 Z schema calculus in the Z Proof Support System.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    R.B.~Jones
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}
\subsection{Changes History} 
\begin{description}
\item [Issue 1.1] First issue.
\item [Issue 1.2] 
Heavily reworked by KB.
\end{description}
\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains a detailed design for the 
derived rules of inference for
the Z Proof Support System schema calculus.
This is called for in \cite{DS/FMU/IED/HLD016}.
The design is
implemented in \cite{DS/FMU/IED/IMP043}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains a detailed design for the 
initial set of rules and conversions for the schema calculus of the Z Proof Support System. Section \ref{CONVANDRULE} describes the main conversions and rules for the Z schema calculus. This section has been subdivided into: 
\begin{description}
\item[section \ref{ZCONV}]
Conversions which take Z terms and return theorems in Z.
\item[section \ref{EXTZCONV}]
Z conversions that support the extended Z syntax.   
\end{description}

The extended Z language supported is documented in the 
Z User Interface subsystem, \cite{DS/FMU/IED/HLD???}.

Section \ref{OTHERCONV} contains the design for conversions  which take the user out of Z into HOL. 
It is anticipated that this material be used in the 
construction of user defined conversions and tactics.

\subsubsection{Dependencies}
Loading this document is dependent on those
files indicated as preceding it in the Z proof support system makefile.
\pagebreak
\section{Z SCHEMA CALCULUS}
=DOC
signature €ZSchemaCalculus› = sig
=DESCRIBE
This provides the rules of inference for schema calculus in the Z proof support system.
=ENDDOC
\section{CONVERSIONS AND RULES}\label{CONVANDRULE}
\subsection{Z conversions}\label{ZCONV}
=DOC
val €z_ _ç_schema_conv› : CONV;
=DESCRIBE
A conversion from a predicate asserting that the $ $-term of a schema is a member of the schema to a schema reference.
=FRULE 1 Conversion
z_ _ç_schema_conv ¨ S ç SÆ
˜
˜
Ù  S ç S = S
=TEX
or
=FRULE 1 Conversion
z_ _ç_schema_conv ¨ [D|P] ç [D|P]Æ
˜
˜
Ù  [D|P] ç [D|P] = [D|P] 
=TEX
Note that the schemas cannot be decorated, as the type of
$Ò \ S\ 'Æ$ is the same as the type of $Ò \ SÆ$.
=SEEALSO
$z\_ \_ç\_schema\_intro\_conv$, and
$pred\_dec\_conv$, which subsumes this conversion.
=FAILURE
43002	?0 is not of the form ¨ S ç SÆ where ¨SÆ is a schema
=ENDDOC
=DOC
val €z_ç_schema_conv› : CONV;
=DESCRIBE
A conversion from a predicate asserting  membership of a horizontal schema to an existential quantification.  
=FRULE 1 Conversion
z_ç_schema_conv
¨x ç [D|P]Æ
˜
˜
Ù x ç [D|P] = ∂D|P∑ [D] = x
=SEEALSO
$z\_ç\_schema\_conv1$ for a faster, if more untidy conversion simplifying the same category of terms.
$z\_schema\_conv$ if no membership is present.
=FAILURE
43003	?0 is not of the form ¨x ç [D|P]Æ 
=ENDDOC
=DOC
val €z_ç_schema_conv1› : CONV;
=DESCRIBE
A conversion from a predicate asserting  membership of a horizontal schema to an existential quantification.  
=FRULE 1 Conversion
z_ç_schema_conv1
¨v ç [D|P]Æ
˜
˜
Ù v ç [D|P] = D' ± P'
=TEX
where, if $D$ binds $xâ1$, $xâ2$,...,
then $D'$ is 
=GFT
``D[xâ1 \ v.xâ1, ...] as a predicate''
=TEX
and $P'$ is
=GFT
P[xâ1 \ v.xâ1, ...]
=TEX
Though this conversion gives a rather ``untidy'' result,
especially for documentary purposes,
it evaluates faster than $z\_ç\_schema\_conv$,
and is probably of more practical value in a proof.
=SEEALSO
$z\_ç\_schema\_conv1$
=FAILURE
43003	?0 is not of the form ¨x ç [D|P]Æ 
=ENDDOC

=DOC
val €z_schema_conv› : CONV;
=DESCRIBE
A conversion from a horizontal schema to a set comprehension.  
=FRULE 1 Conversion
z_schema_conv ¨[D|P]Æ
˜
˜
Ù [D|P] = {D|P∑ D}
=SEEALSO
$z\_ç\_schema\_conv$ and $z\_ç\_schema\_conv1$, which are
more appropriate if the schema expression occurs as a 
subterm of a membership expression.
=FAILURE
43004	?0 is not a horizontal schema 
=ENDDOC

=DOC
val €z_binding_eq_conv› : CONV;
val €z_binding_eq_conv1› : CONV;
=DESCRIBE
A conversion for eliminating bindings over equality.  
=FRULE 1 Conversion
z_binding_eq_conv 
¨bâ1 = bâ2Æ
˜
˜
Ù (bâ1 = bâ2) = (bâ1.sâ1 = bâ2.sâ1) ±
	(bâ1.sâ2 = bâ2.sâ2) ± ...
=TEX
where $bâ1$ (and thus $bâ2$) has a binding type equal
to the type of something of the form
=INLINEFT
Ò(sâ1 ¶ ..., sâ2 ¶ ..., ...)Æ
=TEX
{}.

$z\_bind\_eq\_conv1$ first applies conversion
$z\_bind\_eq\_conv$, and then, if either
or both of $bâ1$ and $bâ2$ are actual bindings it then
eliminates the projection functions, in a manner 
similar to $z\_bind\_proj\_conv$.
=FAILURE
43005	?0  is not of the form ¨binding = bindingÆ
=ENDDOC

=DOC
val €z_binding_proj_conv› : CONV;
=DESCRIBE
A conversion for eliminating binding projections.  
=FRULE 1 Conversion
z_binding_proj_conv ¨(nâ1 ¶ tâ1,nâ2 ¶ tâ2,..).nâcÆ
˜
˜
Ù (nâ1 ¶ tâ1,nâ2 ¶ tâ2,..).nâc = tâc
=SEEALSO
$z\_bind\_eq\_conv1$ for an optimised special case.
=FAILURE
43006	?0  is not a binding projection
=ENDDOC

=DOC
val €z_norm_schema_conv› : CONV;
=DESCRIBE
A conversion for normalising horizontal schemas.  

=FRULE 1 Conversion
z_norm_schema_conv 
¨[D|P]Æ
˜
˜
Ù [D|P] = [DU|D1 ± P]
=TEX
D1 is the implicit predicate formed from D by 
=INLINEFT
DECL_C dec_pred_conv
=TEX
{}. Conjuncts that are
provable by $ç\_u\_conv$, q.v., are not included in D1.
DU is the signature formed from the remaining variables of D, all of type U.
=FAILURE
43004	?0 is not a horizontal schema 
=ENDDOC

=DOC
val €z_expand_schema_ref_conv› : CONV;
=DESCRIBE
A conversion which expands schema references that are predicates, using their stored definitions, if any. 
$z\-\_norm\-\_schema\-\_conv$ could be used in conjunction with this
to eliminate schema references in a schema declaration.
The schema reference may be decorated.
=FAILURE
43011	?0 is not a schema reference as a predicate
=ENDDOC

=DOC
val €z_pre_schema_conv› : CONV;
=DESCRIBE
Schema precondition elimination. 
=FRULE 1 Conversion
z_pre_schema_conv ¨pre[D|P]Æ
˜
˜
Ù pre [D|P] =  [DU|(∂D1|true ∑ D2 ± P)]
=TEX
or
=FRULE 1 Conversion
z_pre_schema_conv ¨pre SÆ
˜
˜
Ù pre S = [DU|(∂D1|true ∑ D2 ± P)] 
=TEX
In the first example, D is the declaration part of the horizontal schema. In the second example, the declaration part of the schema S is referred to as D. The primed and output variables of D  (i.e. those ending in $'$ or $!$) become the existentially quantified variables in D1; DU is the signature formed from the remaining variables of D, all of type U. D2 is the simplified implicit predicate formed from D, as described in $z\_norm\_conv$.

=FAILURE
43007	?0 is not a schema precondition
=ENDDOC

\subsection{Z conversions using extended Z syntax }\label{EXTZCONV}
=DOC
val €z_ _ç_schema_intro_conv› : CONV;
=DESCRIBE
A conversion from a schema reference (i.e. a schema promoted to  a predicate) to the predicate asserting that its $ $-term is a member of the schema.
=FRULE 1 Conversion
z_ _ç_schema_intro_conv ¨S ∫ boolÆ
˜
˜
Ù S =  S ç S 
=TEX
or
=FRULE 1 Conversion
z_ _ç_schema_intro_conv ¨[D|P] ∫ boolÆ
˜
˜
Ù [D|P] =  [D|P] ç [D|P] 
=SEEALSO
$z\_ \_ç\_schema\_conv$
=FAILURE
43008	?0 is not a schema reference
=ENDDOC

=DOC
val €z_schema_ref_conv› : CONV;
=DESCRIBE
A conversion for eliminating a schema reference.  
=FRULE 1 Conversion
z_schema_ref_conv ¨[D|P] ∫ boolÆ
˜
˜
Ù [D|P] = D1 ± P
=TEX
or
=FRULE 1 Conversion
z_schema_ref_conv ¨S ∫ boolÆ
˜
˜
Ù S = D1 ± P
=TEX
In the first example, D is the declaration part of the horizontal schema. In the second example, the declaration part of the schema S is referred to as D. D1 is the simplified implicit predicate formed from D, as described in $z\_norm\_conv$.

=FAILURE
43008	?0 is not a schema reference
=ENDDOC


=DOC
val €z_pre_schema_ref_conv› : CONV;
=DESCRIBE
A conversion for eliminating a schema precondition reference.  
=FRULE 1 Conversion
z_pre_schema_ref_conv ¨(pre[D|P]) ∫ boolÆ
˜
˜
Ù pre[D|P] = (∂ DU|true∑D1 ± P)
=TEX
or
=FRULE 1 Conversion
z_pre_schema_ref_conv ¨(pre S) ∫ boolÆ
˜
˜
Ù pre S = (∂ DU|true∑D1 ± P)
=TEX
In the first example, D is the declaration part of the horizontal schema. In the second example, the declaration part of the schema S is referred to as D. D1 is the implicit predicate formed from D , as described in $z\_norm\_conv$. DU is the signature formed from the primed and output variables of D (i.e. those ending in $'$ or $!$), all of type U.

=FAILURE
43009	?0 is not a precondition schema reference
=ENDDOC

=DOC
val €z_pre_schema_ref_simp› : CONV;
=DESCRIBE
A conversion for simplifying a schema precondition reference.This conversion first applies the conversion $z\_pre\_schema\_ref\_conv$ and then attempts to remove all or some of the existentially quantified variables in the resulting existential quantification.  A witness is supplied for an existentially quantified variable v if the body of the existential contains v = tm or tm = v. 
=FAILURE
43009	?0 is not a precondition schema reference
=ENDDOC



\subsection{Other Conversions}\label{OTHERCONV}
=DOC
val €z_ _schema_conv› : CONV;
=DESCRIBE
A conversion from a $ $-term to the HOL binding constructor for the schema.
=FRULE 1 Conversion
z_ _schema_conv ¨ SÆ
˜
˜
Ù  S = (nâ1 = nâ1) ± (nâ2 = nâ2) ±...
=FAILURE
43010	?0 is not a $ $-term
=ENDDOC
=IGN
 =DOC
val €z_schema_conv1› : CONV;
 =DESCRIBE
A conversion from a schema to a HOL term, the set of bindings that represent the schema.
Where the schema is referred to by name, its definition is first obtained from the relevant theory.
 =FRULE 1 Conversion
z_schema_conv ¨[D|P]Æ
 ˜
 ˜
Ù [D|P] = ABS_ ...
 =TEX
or
 =FRULE 1 Conversion
z_schema_conv ¨SÆ
 ˜
 ˜
Ù S = ABS_ ...

 =FAILURE
43001	?0 is not a schema
 =ENDDOC
=TEX

\section{END OF THE SIGNATURE}
=SML
end; (* signature of ZSchemaCalculus *)
=TEX
\section{TEST POLICY}
The functions in this document should be tested as described in
\cite{DS/FMU/IED/PLN008}.

\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}


