=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design for the Z Schema Calculus}  %% Mandatory field
\TPPref{DS/FMU/IED/DTD043}  %% Mandatory field
\def\SCCSversion{$Revision$
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPclass{}
\TPPkeywords{}
\TPPauthor{G.~Prout  & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.B.~Jones & FMU Manager}
\TPPabstract{This document contains the detailed design for the 
 Z schema calculus in the Z Proof Support System.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    R.B.~Jones
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}
\subsection{Changes history} 
\begin{description}
\item [Issue 1.1] First issue.
\item [Issue \SCCSversion (\TPPdate{\FormatDate{$Date$
}})] 
\end{description}
\subsection{Changes forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains a detailed design for the 
derived rules of inference for
the Z Proof Support System schema calculus.
This is called for in \cite{DS/FMU/IED/HLD016}.
The design is
implemented in \cite{DS/FMU/IED/IMP043}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains a detailed design for the 
initial set of rules and conversions for the schema calculus of the Z Proof Support System. Section \ref{CONVANDRULE} describes the main conversions and rules for the Z schema calculus. This section has been subdivided into: 
\begin{description}
\item[section \ref{ZCONV}]
Conversions which take Z terms and return theorems in Z.
\item[section \ref{EXTZCONV}]
Z conversions   that support the extended Z syntax.   
\end{description}

The extended Z language supported is documented in the 
Z User Interface subsystem, \cite{DS/FMU/IED/HLD???}.

Section \ref{OTHERCONV} contains the design for conversions  which take the user out of Z into HOL. 
It is anticipated that this material be used in the 
construction of user defined conversions and tactics.

\subsubsection{Dependencies}
Loading this document is dependent on those
files indicated as preceding it in the Z proof support system makefile.
\pagebreak
\section{Z SCHEMA CALCULUS}
=DOC
signature‚ZSchemaCalculus· = sig
=DESCRIBE
This provides the rules of inference for schema calculus in the Z proof support system.
=ENDDOC
\section{CONVERSIONS AND RULES}\label{CONVANDRULE}
\subsection{Z conversions}\label{ZCONV}
=DOC
val ‚Z≠_ù_schema_elim_conv· : CONV;
=DESCRIBE
A conversion from a predicate asserting that the theta term of a schema is a member of the schema to a schema reference.
=CONVERSION
Z≠_ù_schema_elim_conv ª≠S ù Sº
…
…
Ö ≠S ù S = S
=TEX
or
=CONVERSION
Z≠_ù_schema_elim_conv ª≠[D|P] ù [D|P]º
…
…
Ö ≠[D|P] ù [D|P] = [D|P]  
=SEEALSO 
$Z≠\_ù\_schema\_intro\_conv$
=FAILURE
43002	?0 is not of the form ª≠S ù Sº where ªSº is a schema
=ENDDOC
=DOC
val ‚Zù_schema_elim_conv· : CONV;
=DESCRIBE
A conversion from a predicate asserting  membership of a horizontal schema to an existential quantification.  
=CONVERSION
Zù_schema_elim_conv ªx ù [D|P]º
…
…
Ö x ù [D|P] = ÑD|Pé≠D = x
=FAILURE
43003	?0 is not of the form ªx ù [D|P]º 
=ENDDOC

=DOC
val ‚Zschema_elim_conv· : CONV;
=DESCRIBE
A conversion from a horizontal schema to a set comprehension.  
=CONVERSION
Zschema_elim_conv ª[D|P]º
…
…
Ö [D|P] = {D|Pé≠D}
=FAILURE
43004	?0 is not a horizontal schema 
=ENDDOC

=DOC
val ‚Zbind_eq_conv· : CONV;
=DESCRIBE
The conversion for eliminating bindings over equality.  
=CONVERSION
Zbind_eq_conv ª≠S = ≠S'º
…
…
Ö (≠S = ≠S') = (x = x') Ä (y = y') Ä...
=FAILURE
43005	?0  is not of the form ª≠S = ≠S'º
=ENDDOC

=DOC
val ‚Zbind_proj_conv· : CONV;
=DESCRIBE
The conversion for eliminating binding projections.  
=CONVERSION
Zbind_proj_conv ª{n∞ = t∞,n¨ = t¨,..}.n∏º
…
…
Ö {n∞ = t∞,n¨ = t¨,..}.n∏ = t∏
=FAILURE
43006	?0  is not a binding projection
=ENDDOC

=DOC
val ‚Znorm_conv· : CONV;
=DESCRIBE
The conversion for normalising horizontal schemas.  

=CONVERSION
Znorm_conv ª[D|P]º
…
…
Ö [D|P] = [DU|D1 Ä P]
=TEX
D1 is the implicit predicate formed from D. Predicates of the form ªx ù GivenSetº, ªx ù Uº and ªx ù Xº, where X is a type constructed from $U$ (or any given set) and the type constructors $ë$, $â$ and $ê$, are automatically proven $true$ and not included in D1.   DU is the signature formed from the remaining variables of D, all of type U.
=FAILURE
43004	?0 is not a horizontal schema 
=ENDDOC

=DOC
val ‚Zexpand_schema· : CONV;
=DESCRIBE
A conversion which expands schema references in a horizontal schema. The schema is first normalised to ensure that schema references only occur in the predicate part of the schema.  

=FAILURE
43004	?0 is not a horizontal schema 
=ENDDOC

=DOC
val ‚Zpre_elim_conv· : CONV;
=DESCRIBE
Schema precondition elimination. 
=CONVERSION
Zpre_elim_conv ªpre[D|P]º
…
…
Ö pre [D|P] =  [DU|(ÑD1|true é D2 Ä P)]
=TEX
or
=CONVERSION
Zpre_elim_conv ªpre Sº
…
…
Ö pre S = [DU|(ÑD1|true é D2 Ä P)] 
=TEX
In the first example, D is the declaration part of the horizontal schema. In the second example, the declaration part of the schema S is referred to as D. The primed and output variables of D  (i.e. those ending in $'$ or $!$) become the existentially quantified variables in D1; DU is the signature formed from the remaining variables of D, all of type U. D2 is the simplified implicit predicate formed from D, as described in $Znorm\_conv$.

=FAILURE
43007	?0 is not a schema precondition
=ENDDOC

\subsection{Z conversions using extended Z syntax }\label{EXTZCONV}
=DOC
val ‚Z≠_ù_schema_intro_conv· : CONV;
=DESCRIBE
A conversion from a schema reference (i.e. a schema promoted to  a predicate) to the predicate asserting that its theta term is a member of the schema.
=CONVERSION
Z≠_ù_schema_intro_conv ªS ∫ boolº
…
…
Ö S = ≠S ù S 
=TEX
or
=CONVERSION
Z≠_ù_schema_intro_conv ª[D|P] ∫ boolº
…
…
Ö [D|P] = ≠[D|P] ù [D|P] 
=SEEALSO 
$Z≠\_ù\_schema\_elim\_conv$
=FAILURE
43008	?0 is not a schema reference
=ENDDOC

=DOC
val ‚Zschema_ref_conv· : CONV;
=DESCRIBE
The conversion for eliminating a schema reference.  
=CONVERSION
Zschema_ref_conv ª[D|P] ∫ boolº
…
…
Ö [D|P] = D1 Ä P
=TEX
or
=CONVERSION
Zschema_ref_conv ªS ∫ boolº
…
…
Ö S = D1 Ä P
=TEX
In the first example, D is the declaration part of the horizontal schema. In the second example, the declaration part of the schema S is referred to as D. D1 is the simplified implicit predicate formed from D, as described in $Znorm\_conv$.

=FAILURE
43008	?0 is not a schema reference
=ENDDOC


=DOC
val ‚Zpre_schema_ref_conv· : CONV;
=DESCRIBE
The conversion for eliminating a schema precondition reference.  
=CONVERSION
Zpre_schema_ref_conv ª(pre[D|P]) ∫ boolº
…
…
Ö pre[D|P] = (Ñ DU|trueéD1 Ä P)
=TEX
or
=CONVERSION
Zpre_schema_ref_conv ª(pre S) ∫ boolº
…
…
Ö pre S = (Ñ DU|trueéD1 Ä P)
=TEX
In the first example, D is the declaration part of the horizontal schema. In the second example, the declaration part of the schema S is referred to as D. D1 is the implicit predicate formed from D , as described in $Znorm\_conv$. DU is the signature formed from the primed and output variables of D (i.e. those ending in $'$ or $!$), all of type U.

=FAILURE
43009	?0 is not a precondition schema reference
=ENDDOC

=DOC
val ‚Zpre_schema_ref_simp· : CONV;
=DESCRIBE
The conversion for simplifying a schema precondition reference.This conversion first applies the conversion $Zpre\_schema\_ref\_conv$ and then attempts to remove all or some of the existentially quantified variables in the resulting existential quantification.  A witness is supplied for an existentially quantified variable v if the body of the existential contains v = tm or tm = v. 
=FAILURE
43009	?0 is not a precondition schema reference
=ENDDOC



\subsection{Other Conversions}\label{OTHERCONV}
=DOC
val ‚Z≠_elim_conv· : CONV;
=DESCRIBE
A conversion from a theta term to the HOL binding constructor for the schema.
=CONVERSION
Z≠_elim_conv ª≠Sº
…
…
Ö ≠S = (n∞ = n∞) Ä (n¨ = n¨) Ä...
=FAILURE
43010	?0 is not a theta term
=ENDDOC

=DOC
val ‚Zschema_conv· : CONV;
=DESCRIBE
A conversion from a schema to a HOL term, the set of bindings that represent the schema.
Where the schema is referred to by name, its definition is first obtained from the relevant theory.
=CONVERSION
Zschema_conv ª[D|P]º
…
…
Ö [D|P] = ABS_ë ...
=TEX
or
=CONVERSION
Zschema_conv ªSº
…
…
Ö S = ABS_ë ...

=FAILURE
43001	?0 is not a schema
=ENDDOC


\section{END OF THE SIGNATURE}
=SML
end; (* signature of ZSchemaCalculus *)
=TEX
\section{TEST POLICY}
The functions in this document should be tested as described in
\cite{DS/FMU/IED/PLN008}.

\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}
