=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Detailed Design for the Z Set Theory}  %% Mandatory field
\TPPref{DS/FMU/IED/DTD042}  %% Mandatory field
\def\SCCSversion{$Revision$
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPclass{}
\TPPkeywords{}
\TPPauthor{G.~Prout  & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.B.~Jones & FMU Manager}
\TPPabstract{This document contains the detailed design for the 
derived rules of inference, conversions and theorems for the Z set theory, lambda and mu expressions, tuples and cartesian products in the Z Proof Support System.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    R.B.~Jones
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents list}
\tableofcontents
\subsection{Document cross references}
\bibliographystyle{fmu}
\bibliography{fmu}
\subsection{Changes history} 
\begin{description}

\item [Issue \SCCSversion (\TPPdate{\FormatDate{$Date$
}})]  First draft.
\end{description}
\subsection{Changes forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains a detailed design for some of the 
derived rules of inference, conversions and theorems for
the Z Proof Support System, described in \cite{DS/FMU/IED/HLD015}. The rules and theorems cover set theory and associated constructs.
This is called for in \cite{DS/FMU/IED/HLD016}.
The design is
implemented in \cite{DS/FMU/IED/IMP042}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains a detailed design for the 
initial set of rules, conversions and theorems for the set theory of the Z proof support system. This covers :
\begin{itemize}
\item
set abstractions
\item
set displays
\item
lambda expressions
\item
mu expressions
\item
tuples and cartesian products
\item
function application
\end{itemize}
\subsubsection{Dependencies}
Loading this document is dependent on those
files indicated as preceding it in the Z proof support system makefile.


\section{CONVERSIONS, RULES AND THEOREMS}
=DOC
signature‚ZSetTheory· = sig
=DESCRIBE
This provides the rules of inference, conversions and theorems for set theory, lambda and mu expressions, tuples and cartesian products in the Z proof support system.
=FAILURE
=ENDDOC
\subsection{Reflexivity}
The reflexivity of equality considered as a conversion is implemented by $refl\_conv$ in HOL, see \cite{DS/FMU/IED/DTD007}
. This conversion may also be used for Z terms. 
\subsection{Extensionality}
=DOC
val ‚Z_set_eq_thm· : THM;
=DESCRIBE
The extensionality theorem for the equality of two sets.
=THEOREM
Z_set_eq_thm
…
…
(x = y) = Éz: U é ((z ù x) Ç (z ù y))
=TEX
=ENDDOC

=DOC
val ‚Z_set_eq_conv· : CONV;
val ‚Z_set_eq_sym_conv· : CONV;
=DESCRIBE
The two symmetric conversions corresponding to the extentionality theorem.
=ENDDOC
=TEX

\subsection{Power Set}
=DOC
val ‚Z_ë_thm· : THM;
=DESCRIBE
The definitional theorem for power set, $ë$.
=THEOREM
Z_ë_thm
…
…
(t ù ë u) = Éz: U é ((z ù t) ä (z ù u))
=TEX
=ENDDOC
=DOC
val ‚Z_ë_conv· : CONV;
val ‚Z_ë_sym_conv· : CONV;
=DESCRIBE
The two symmetric conversions corresponding to $Zë\_thm$. 
=ENDDOC
=TEX
\subsection{Set Abstraction}
=DOC
val ‚Z_seta_elim_conv· : CONV;
=DESCRIBE
A conversion from membership of a Z set abstraction to a Z existential quantification. Bound variables in the existential quantification are renamed as necessary.
=CONVERSION
Z_seta_elim_conv 
ªt ù { D | P é T}º
…

…
Ö (t ù { D | P é T}) = (Ñ D | P é T = t)
=TEX
=FAILURE
	term is not a set abstraction
=ENDDOC
=TEX
\subsection{Set Display}
=DOC
val ‚Z_setd_elim_conv· : CONV;
=DESCRIBE
A conversion from membership of a Z set display to equality with a member of the set.
=CONVERSION
Z_setd_elim_conv 
ªt ù { t∞, t¨, ...}º
…

…
Ö (t = t∞) Å (t = t¨) ...
=TEX
=FAILURE
	term is not a set display
=ENDDOC
=TEX
\subsection{Lambda Expressions}
=DOC
val ‚Z_ç_elim_conv· : CONV;
=DESCRIBE
The conversion for eliminating lambda expressions.

=CONVERSION
Z_ç_elim_conv ªçD | P é Eº
…
…
Ö (çD | P é E) = {D | P é (˜(D),E)}
=TEX
where $˜(D)$ is the characteristic tuple of D.
=FAILURE
=ENDDOC
\subsection{Definite Description}
=DOC
val ‚Z_á_intro· : THM -> THM -> THM ;
=DESCRIBE
The rule for $á$ introduction.
=RULE
Z_á_intro
…
ˆ∞ Ö ÑD é P	ˆ¨ Ö ÉD|P é (E = t)
…
ˆ∞ ° ˆ¨ Ö (áD|P é E) = t
=TEX
=FAILURE
	Wrong number of hypotheses
=ENDDOC
=TEX


\subsection{Tuples}
=DOC
val ‚Z_tuple_eq_conv· : CONV;
=DESCRIBE
The conversion for eliminating tuples over equality.
=CONVERSION
Ztuple_elim_conv 
ª(t∞,t¨,...) = (u∞,u¨,...)º
…

…
Ö (t∞,t¨,...) = (u∞,u¨,...) Ç 
((t∞ = u∞) Ä (t¨ = u¨) Ä ...) 
=TEX
=FAILURE
	term not an equality
	term must be `t1 = t2', where t1 and t2 are tuples
=ENDDOC
=SML
=TEX
\subsection{Cartesian Products}
=DOC
val ‚Z_â_elim_conv· : CONV;
=DESCRIBE
The conversion for eliminating cartesian products.
=CONVERSION
Z_â_elim_conv ª(T∞ â T¨ â ...)º
…

…
Ö (T∞ â T¨ â ...) = {t∞:T∞; t¨:T¨; ...}
=TEX
=FAILURE
=ENDDOC
=TEX
\subsection{Function Application}
=DOC
val ‚Z_apply_thm· : THM;
=DESCRIBE
The theorem for rewriting function application.
=THEOREM
Z_apply_thm
…
…
( f a ) = (áx:U|(a,x) ù f)
=TEX
=ENDDOC

=DOC
val ‚Z_apply_conv· : CONV;
=DESCRIBE
The  conversion corresponding to the function application  theorem.
=ENDDOC
=TEX

\section{END OF THE SIGNATURE}
=SML
end; (* signature of ZSetTheory *)
=TEX
\section{TEST POLICY}
The functions in this document should be tested as described in
\cite{DS/FMU/IED/PLN008}.

\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}
