=TEX
% TQtemplatetex
\documentstyle[hol1,11pt,TQ]{article}
\makeindex
% The following macro is used to insert temporary notes
% in the document.
\def\TempNote#1{{\tiny#1}}
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Implementation of Z Type Inferrer}  %% Mandatory field
\TPPref{DS/FMU/IED/IMP062}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}                    %% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{Z, HOL}
\TPPauthor{D.J.~King&WIN01}
%\TPPauthors{R.D.~Arthan&WIN01\\D.J.~King&WIN01\\G.T.~Scullard&MAN05}
\TPPauthorisation{R.D.~Arthan & FMU Manager}
\TPPabstract{A type inference mechanism for Z}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	  R.D.~Arthan \\ R.B.~Jones \\ G.T. Scullard
}}
 
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List} \tableofcontents
\subsection{Document Cross References}\bibliographystyle{fmu}
\bibliography{fmu}
\subsection{Changes History}
\begin{description}
\item[\SCCSversion (3 March 1992)] Initial version.

\end{description}
\subsection{Changes Forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}
\subsection{Introduction}
\subsubsection{Purpose and Background}
\subsubsection{Dependencies}
\subsubsection{Interface}
\subsubsection{Algorithms}
\subsubsection{Possible Enhancements}
\subsubsection{Deficiencies}
\section{PREAMBLE}
SML
structure €ZTypeInference› : ZTypeInference = struct
=TEX
=SML
	open Unification ZLex;
	open icl'ZTypesAndTerms;

=TEX

\section{MISCELLANEOUS STUBS}
=SML
fun €get_template_info› tmp = Nil;
=TEX


\subsection{Flags and Switches}
=SML
val €extended_z› = ref true;

=TEX
=SML
val €zarray_size› = 100;
val €zti_subs› = new_subs zarray_size;
=TEX

\section{FORMATTING Z SCHEMA TEXT AND TERMS}

=SML
fun €format_template› (TmplNon (s, Nil)) = (
	s
) | format_template t = PolyML.makestring t;

fun €format_fancy_fix› (f : 'a -> string) (tmp : TEMPLATE) (decor : DECOR) (args : 'a list)
 = "";
=TEX

=SML
fun €format_ident› ((tmp, d) : IDENT) : string = (
	(format_template tmp)^d
);

fun €format_zdec› (dec : Z_DEC) = (
	case dec of
		ZDec (idl, tm) => (format_list format_ident idl ";")^":"^
			(format_ztm tm)
	|	ZSchemaDec tm => format_ztm tm
)

and €format_zschtext› (sch as (dl, Value tm) : Z_SCH_TEXT) = (
	(format_list format_zdec dl " ")^"|"^(format_ztm tm)
) | format_zschtext (sch as (dl, Nil)) = (
	format_list format_zdec dl " "
)
=TEX
=SML
and €format_ztm› (tm : Z_TM) : string = (
	case tm of
		ZTmß¢ (_, tml) => "ß"^(format_list format_ztm tml ",")^"¢"
	|	ZTmSetd (_, tml) => "{"^(format_list format_ztm tml ",")^"}"
	|	ZTmSeta1 sch => "{"^(format_zschtext sch)^"}"
	|	ZTmSeta2 (sch,tm) => "{"^(format_zschtext sch)^"∑"^(format_ztm tm)^"}"
	|	ZTm tm => ""^(format_ztm tm)
	|	ZTmTuple tml => "("^(format_list format_ztm tml ",")^")"
	|	ZTm∏ tml => "("^(format_list format_ztm tml "∏")^")"
	|	ZTm  (tm, d) => " ("^(format_ztm tm)^")"^d
	|	ZTmSelâB (tm, (tmp, d)) => (format_ztm tm)^"."^(format_template tmp)
	|	ZTmApp (tm1, tm2) => (format_ztm tm1)^" "^(format_ztm tm2)
	|	ZTmÃ (sch, tm) => "Ã"^(format_zschtext sch)^"∑"^(format_ztm tm)
	|	ZTmÕ1 sch => "Õ"^(format_zschtext sch)
	|	ZTmÕ2 (sch, tm) => "Õ"^(format_zschtext sch)^"∑"^(format_ztm tm)
	|	ZTmHorizSchema sch => "["^(format_zschtext sch)^"]"
	|	ZTmDecor (tm, d) => (format_ztm tm)^d
	|	ZTmPre tm => "pre "^(format_ztm tm)
	|	ZTm≥âF tm => "≥"^(format_ztm tm)
	|	ZTmLogInOpâF (inop, tm1, tm2) => (format_ztm tm1)^(
			case inop of
			ZLogInOp± => "±"
			|ZLogInOp≤ => "≤"
			|ZLogInOp¥ => "¥"
			|ZLogInOp§ => "§"
			|ZLogInOpSemi => ";"
			)^(format_ztm tm2)
	|	ZTm≥âS tm => "≥"^(format_ztm tm)
	|	ZTmLogInOpâS (inop, tm1, tm2) => (format_ztm tm1)^(
			case inop of
			ZLogInOp± => "±"
			|ZLogInOp≤ => "≤"
			|ZLogInOp¥ => "¥"
			|ZLogInOp§ => "§"
			|ZLogInOpSemi => ";"
			)^(format_ztm tm2)
	|	ZTm˘ (tm1, tm2) => (format_ztm tm1)^"˘"^(format_ztm tm2)
	|	ZTmHide (tm, idl) => (format_ztm tm)^"\\"^(format_list format_ident idl ",")
	|	ZTmQuantâF (q, sch, tm) => (
			case q of
			ZQuantµ => "µ"	|ZQuant∂ => "∂"	|ZQuant∂â1 => "∂â1"
			)^(format_zschtext sch)^"∑"^(format_ztm tm)
	|	ZTmQuantâS (q, sch, tm) => (
			case q of
			ZQuantµ => "µ"	|ZQuant∂ => "∂"	|ZQuant∂â1 => "∂â1"
			)^(format_zschtext sch)^"∑"^(format_ztm tm)

	|	ZTmÑ tm => "Ñ"^(format_ztm tm)
	|	ZTmò tm => "ò"^(format_ztm tm)
	|	ZTmTruth true => "true"
	|	ZTmTruth false => "false"
	|	ZTmEq (tm1, tm2) => (format_ztm tm1)^"="^(format_ztm tm2)
	|	ZTmç (tm1, tm2) => (format_ztm tm1)^"ç"^(format_ztm tm2)
	|	ZTmª (tm1, tm2) => (format_ztm tm1)^"ª"^(format_ztm tm2)
	|	ZTmPipe (tm1, tm2) => (format_ztm tm1)^">>"^(format_ztm tm2)
	|	ZTm˙ n => string_of_int n
	|	ZTmConstrained (tm1, tm2) => (format_ztm tm1)^"∫"^(format_ztm tm2)
	|	ZTmLVar (id, tml) => (format_ident id)^"["^(format_list format_ztm tml ",")^"]"
	|	ZTmGVar (id, tml) => (format_ident id)^"["^(format_list format_ztm tml ",")^"]"
	|	ZTmBracketed tm => "("^(format_ztm tm)^")"
);
=TEX

=SML
fun €format_extype› (ExVartype ty : EXTYPE) : string = (
	case ty of
	Known name => "'"^name
	|Unknown tvn => "'"^(string_of_int tvn)
) | format_extype (ExType ("", [ExType ("∏", [ty1, ty2])])) = (
	(format_extype ty1)^"™"^(format_extype ty2)
) | format_extype (ExType ("", [tyl])) = (
	"("^(format_extype tyl)^")"
) | format_extype (ExType ("∏", tyl)) = (
	let	fun aux (ty1::ty2::rest) = (
		(format_extype ty1)^"∏"^(format_extype ty2)
		^(aux rest)
		) | aux [ty] = format_extype ty
		  | aux [] = "";
	in
		aux tyl
	end
) | format_extype (ExType (name, tyl)) = (
	let	fun brkt (s : string) : string = (
		if size s = 0
		then s
		else "(" ^ s ^ ")");
	in
		brkt (format_list format_extype tyl ", ")^name
	end
);
=TEX



\section{SUPPORTING FUNCTIONS}

\subsection{The Environment}

=SML
type €ZENV› = IDENT -> (bool * EXTYPE);
=TEX
=SML
local	val table:(IDENT * EXTYPE) list ref = ref [];
in
fun €init_zenv› (genformals : IDENT list) : ZENV = (
let	val dummy = start_again()
in	(
	table := (map (fn x => (x,ExType("",[ExVartype(Known("'"^((format_template o
		fst) x)))]))) genformals);
	fn id as (s,d) => (
	case lassoc5 (!table) id of
		Nil => (case get_template_info s of
			Nil =>	(
				let val x = ExVartype(Unknown(next_name()))
				in
					((table := (id,x) :: !table);
					(false,x))
				end
							)
			| Value(ty,_) => (true,replaced ty))
		|Value tty => (false,tty))
		)
end
)
=TEX
=SML
and	€env_formals› () : IDENT list = (
let	fun 	f [] = []
	|	f (h::t) = (
			case h of 	(x,ExType("",[ExVartype(Known(_))])) => (x::(f t))
			|		_ => (f t))
in
	f (!table)
end)
=TEX
=SML
and €show_env› () : (IDENT * EXTYPE)list = (
	!table
);
end (* of local ... in *);
=TEX

\subsection{Auxiliary Functions}
=SML
fun €ex_› t = ExType ("", [t]);
val €ex_˙› = ExType ("˙", []);
val €ex_string› = ExType ("LIST", [ExType ("CHAR",[])]);
fun €ex_™› (f, a) = ExType ("™", [f, a]);
val €ex_bool› = ExType ("BOOL", []);
=TEX
=SML
fun €sub_ty› (env:ZENV) : ZENV = (
	fn id =>
		let	val (flag,tty) = env id
		in
			(flag, sub_type zti_subs tty)
		end
);
=TEX



\section{ERROR HANDLING AND REPORTING}

=SML
datatype €Z_TM_ERROR_INFO›	=
		Failedß¢ of Z_TM list * EXTYPE list
	|	FailedSetd of Z_TM list * EXTYPE list
	|	FailedSeta of Z_TM * EXTYPE * int
	|	Failed of Z_TM * EXTYPE
	|	Failed∏ of Z_TM list * EXTYPE list
	|	Failed  of Z_TM * EXTYPE
	|	FailedSel1 of Z_TM * IDENT
	|	FailedSel2 of Z_TM * EXTYPE
	|	FailedSel3 of Z_TM * int
	|	FailedDec of Z_TM * EXTYPE
	|	Failed≥ of Z_TM * EXTYPE
	|	FailedEq of Z_TM * Z_TM * EXTYPE * EXTYPE
	|	Failedç1 of Z_TM * EXTYPE
	|	Failedç2 of Z_TM * EXTYPE
	|	FailedConstrained of Z_TM * EXTYPE * Z_TM
	|	Failed;

=TEX
The following type definition is visible via the signature
$ZTypeInference$.
=SML
datatype €LOCAL_ERROR_INFO› =
		FailedZTm of Z_TM * ZENV * Z_TM_ERROR_INFO
	|	FailedZSchText of Z_SCH_TEXT * ZENV * Z_TM * EXTYPE
	|	FailedZDec of Z_DEC * ZENV * Z_TM * EXTYPE;

type €ERROR_INFO›	=	LOCAL_ERROR_INFO;
=TEX
=SML
exception €ZExn› of LOCAL_ERROR_INFO;
=TEX

=SML
fun €report› (msg : int) (inserts : string list) : unit = (
	diag_string (get_error_message msg inserts)
);
=TEX

=SML
fun €print_zerrlistinfo› (tml : Z_TM list) (tyl : EXTYPE list) : unit = (
let	
	fun plu (x1::x2::rest) = "s"
	  | plu [x1] = ""
	  | plu nil = error "print_zerrlistinfo" 62998 [
		fn()=>"plu"];
	fun sort1 (i1 : int, (tm1:string, ty1:string)) (i2, (tm2, ty2)) =
		if ty1 = ty2 then
			if tm1 = tm2 then 0
			else i1 - i2
		else	Sort.string_order ty1 ty2;
	fun grpaux ((ty1, tmlist1)::rest1) ((tm2, ty2)::rest2) =
		if ty1 = ty2
		then grpaux ((ty1, tmlist1@[[tm2]])::rest1) rest2
		else grpaux ((ty2, [[tm2]])::(ty1,tmlist1)::rest1) rest2
	  | grpaux res _ = res;	

	fun grp ((tm, ty)::rest) = grpaux [(ty, [[tm]])] rest
	  | grp _ = error "print_zerrlistinfo" 62999 [];
	fun do_errmsgs ((ty, tmlist)::rest) = (
		report 62012 [ty, plu tmlist];
		map (report 62013) tmlist;
		do_errmsgs rest
	) | do_errmsgs nil = nil;
	val stml = map format_ztm tml;
	val styl = map format_extype tyl;
	val tmty = (combine stml styl);
	val itmty = combine (interval 1 (length styl)) tmty;
	val stmty = (map snd) (Sort.sort sort1 (rev itmty));
in
	(do_errmsgs (grp stmty);()
	)
end);
=TEX

=SML
fun €print_zerrß¢› (tml : Z_TM list) (tyl : EXTYPE list) : unit = (
	report 62011 ["sequence"];
	print_zerrlistinfo tml tyl
);
=TEX

=SML
fun €print_zerrsetd› (tml : Z_TM list) (tyl : EXTYPE list) : unit = (
	report 62011 ["set"];
	print_zerrlistinfo tml tyl
);
=TEX

=SML
fun €print_zerrseta› (tm : Z_TM) (ty : EXTYPE) (ierr : int) : unit = (
	report ierr [];
	report 62032 ["predicate"];
	report 62033 [format_ztm tm, format_extype ty]
);
=TEX

=SML
fun €print_zerr› (tm : Z_TM) (ty : EXTYPE) : unit = (
	report 62041 [];
	report 62032 ["set"];
	report 62033 [format_ztm tm, format_extype ty]
);
=TEX

=SML
fun €print_zerr∏› (tml : Z_TM list) (tyl : EXTYPE list) : unit = (
	report 62061 [];
	print_zerrlistinfo tml tyl
);
=TEX

=SML
fun €print_zerr › (tm : Z_TM) (ty : EXTYPE) : unit = (
	report 62071 [];
	report 62032 ["schema"];
	report 62033 [format_ztm tm, format_extype ty]
);
=TEX

=SML
fun €print_zerrsel1› (tm : Z_TM) (id : IDENT) : unit = (
	report 62081 [];
	report 62082 [format_ident id];
	report 62083 [format_ztm tm]
);
=TEX

=SML
fun €print_zerrsel2› (tm : Z_TM) (ty : EXTYPE) : unit = (
	report 62084 [];
	report 62032 ["binding"];
	report 62033 [format_ztm tm, format_extype ty]
);
=TEX

=SML
fun €print_zerrsel3› (tm : Z_TM) (i : int) : unit = (
	report 62084 [];
	report 62032 ["binding"];
	report 62032 ["TBS"]
);
=TEX

=SML
fun €print_zerrdec› (tm : Z_TM) (ty : EXTYPE) : unit = (
	report 62131 [];
	report 62032 ["schema"];
	report 62033 [format_ztm tm, format_extype ty]
);
=TEX

=SML
fun €print_zerr≥› (tm : Z_TM) (ty : EXTYPE) : unit = (
	report 62151 [];
	report 62032 ["predicate"];
	report 62033 [format_ztm tm, format_extype ty]
);
=TEX

=SML
fun €print_zerreq› (tm1 : Z_TM) (tm2 : Z_TM) (ty1 : EXTYPE) (ty2 : EXTYPE) : unit = (
	report 62251 [];
	report 62255 [];
	report 62033 [format_ztm tm1, format_extype ty1];
	report 62033 [format_ztm tm2, format_extype ty2]
);
=TEX

=SML
fun €print_zerrç1› (tm : Z_TM) (ty : EXTYPE) : unit = (
	report 62252 [];
	report 62032 ["set"];
	report 62033 [format_ztm tm, format_extype ty]
);
=TEX

=SML
fun €print_zerrç2› (tm : Z_TM) (ty : EXTYPE) : unit = (
	report 62253 [];
	report 62254 [];
	report 62033 [format_ztm tm, format_extype ty]
);
=TEX

=SML
fun €print_zerrconstrained› (tm1 : Z_TM) (ty : EXTYPE) (tm2 : Z_TM) : unit = (
	report 62261 [];
	report 62262 [format_ztm tm1, format_extype ty];
	report 62263 [format_ztm tm2]
);
=TEX

=SML
fun €print_zerror› ((FailedZTm (term, env, details)) : ERROR_INFO) = (
	report 62001 [format_ztm term];
	(case details of
	Failedß¢ (tml, tyl) => (
		print_zerrß¢ tml tyl
	) | FailedSetd (tml, tyl) => (
		print_zerrsetd tml tyl
	) | FailedSeta (tm, ty, ierr) => (
		print_zerrseta tm ty ierr
	) | Failed (tm, ty) => (
		print_zerr tm ty
	) | Failed∏ (tml, tyl) => (
		print_zerr∏ tml tyl
	) | Failed  (tm, ty) => (
		print_zerr  tm ty
	) | FailedSel1 (tm, id) => (
		print_zerrsel1 tm id
	) | FailedSel2 (tm, ty) => (
		print_zerrsel2 tm ty
	) | FailedSel3 (tm, i) => (
		print_zerrsel3 tm i
	) | FailedDec (tm, ty) => (
		print_zerrdec tm ty
	) | Failed≥ (tm, ty) => (
		print_zerr≥ tm ty
	) | FailedEq (tm1, tm2, ty1, ty2) => (
		print_zerreq tm1 tm2 ty1 ty2
	) | Failedç1 (tm, ty) => (
		print_zerrç1 tm ty
	) | Failedç2 (tm, ty) => (
		print_zerrç2 tm ty
	) | FailedConstrained (tm1, ty, tm2) => (
		print_zerrconstrained tm1 ty tm2
	) | _ => (
		error "print_ztmerror" 62998 [fn()=>"TBS"]
	)
	) (* end case *);
	fail "Z-Parser" 62000 []
) | print_zerror (FailedZSchText (schtext, env, tm, ty)) = (
	report 62001 [format_zschtext schtext];
	report 62502 [];
	report 62254 [];
	report 62033 [format_ztm tm, format_extype ty];
	fail "Z-Parser" 62000 []
) | print_zerror (FailedZDec (dec, env, tm, ty)) = (
	report 62001 [format_zdec dec];
	report 62501 [];
	report 62032 ["set"];
	report 62033 [format_ztm tm, format_extype ty];
	fail "Z-Parser" 62000 []
);
=TEX
\section{SUPPORT FOR SCHEMAS}

=SML
fun string_to_ident s : IDENT = (TmplNon ("w",Nil),"");
=TEX

=SML
datatype €MANIFEST_EXTYPE› =
		NotManifest
	|	TupleType of EXTYPE list
	|	BindingType of (IDENT * EXTYPE) list
	|	SchemaType of (IDENT * EXTYPE) list;
=TEX
=SML
fun €bind_extype› (itm : (IDENT * EXTYPE) list) : EXTYPE = (
let	fun aux ((tmp, d), ty) = (
	let	val holtype = extype_to_type zti_subs [] ty
			handle Fail msg =>
			error "bind_extype" 62998 [fn()=>
				"Type unknown is not allowed"];
	in
		(format_ident (tmp, d), holtype)
	end);
	val side = e_enter 
in
	type_to_extype (bind_type (map aux itm))
end);
=TEX
bind_extype[((w,"?"),type_to_extype BOOL),((x,""),type_to_extype Ó)];

=SML
fun €unbind_extype› (ty : EXTYPE) : (IDENT * EXTYPE) list = (
let	val holtype = extype_to_type zti_subs [] ty
		handle Fail msg =>
		error "unbind_extype" 62998 [fn()=>
			"Type unknown is not allowed"];
	val itm = dest_ZschemaT holtype;
in
	map (fn (n, t) => ((string_to_ident n), type_to_extype t)) itm
end);
=TEX

=SML
fun €tuple_extype› (tyl : EXTYPE list) : EXTYPE = (
let	val holtypes = map (extype_to_type zti_subs []) tyl
		handle Fail msg =>
		error "tuple_extype" 62998 [fn()=>
			"Type unknown is not allowed"];
in
	type_to_extype (tuple_type (holtypes))
end);
=TEX

=SML
fun €untuple_extype› (ty : EXTYPE) : EXTYPE list = (
let	val holtype = extype_to_type zti_subs [] ty
		handle Fail msg =>
		error "untuple_extype" 62998 [fn()=>
			"Type unknown is not allowed"];
	val itm = dest_ZtupleT holtype;
in
	map type_to_extype itm
end);
=TEX


=SML
fun  €manifest› (ty:EXTYPE) : MANIFEST_EXTYPE = (
	case ty of

	ExType("",[ty']) => (
	   	SchemaType (unbind_extype ty')
		handle Fail _ => NotManifest

	)|ExType(_,_) => (
		TupleType (untuple_extype ty)
		handle Fail _ =>
			BindingType (unbind_extype ty)
			handle Fail _ => NotManifest
	)|_ => NotManifest
);
=TEX
=SML
fun €chartuple› ((decls, tm) : Z_SCH_TEXT) : Z_TM = (
let	fun f (ZDec(ids, tm)) = (
		map (fn id => ZTmLVar(id,[])) ids
	) | f (ZSchemaDec (ZTmDecor (tm1, d))) = (
		[ZTm (tm1, d)]
	) | f (ZSchemaDec tm1) = (
		[ZTm (tm1, "")]
	);
in
	case decls of
	[] => error "chartuple" 62998 [fn()=>"empty declaration"]
	|[decl] => (case f decl of
			[tm] => tm
			|tms => ZTmTuple tms)
	|decls => ZTmTuple(flat (map f decls)
	)
end);
=TEX

=SML
local
fun f [] tym1 tym2 = Value []
  | f (c::cl) tym1 tym2 = (
	case f cl tym1 tym2 of 
	Nil => Nil
	|Value tym => (
		case (lassoc5 tym1 c,lassoc5 tym2 c) of
		(Nil,Value ty) => Value((c,ty)::tym)
		|(Value ty,Nil) => Value((c,ty)::tym)
		|(Value ty1,Value ty2) => (
			let	val side = unify zti_subs (ty1, ty2)
					handle Fail msg =>
					error "f" 62998 [fn()=>"unify error"];
			in
					Value((c,sub_type zti_subs ty1)::tym)
			end
			)
		|_ => Nil
		)
	)
in
=TEX
=SML
fun €compatible› ((tty1,tty2):EXTYPE * EXTYPE) : EXTYPE OPT = (
let	val idtyl1 = unbind_extype tty1;
	val idtyl2 = unbind_extype tty2;
	val cl = (list_cup o (map(map fst))) [idtyl1,idtyl2];
in
	case f cl idtyl1 idtyl2 of
	Nil => Nil
	|Value tym => (
			Value(bind_extype tym)
		)
end)
=TEX
=SML
and €includes› ((tty1,tty2):EXTYPE * EXTYPE) : EXTYPE OPT = (
let	val idtyl1 = unbind_extype tty1;
	val idtyl2 = unbind_extype tty2;
	val (cl1, tyl1) = split idtyl1;
	val (cl2, tyl2) = split idtyl2;
in
	if cl1 = (cl1 cup cl2)
	then
		case f cl1 idtyl1 idtyl2 of
		Nil => Nil
		|Value tym => (
			let	val tym' = tym drop (fn (s,_) => s mem cl2)
			in
				Value(bind_extype tym')
			end)
	else
		Nil
end);
end (* of local ... in ... *);
=TEX

\section{INFERRING TYPES IN Z DECLARATIONS}
=IGN
fun ti_ztm env tm = (tm, type_to_extype BOOL);
=SML
fun €ti_zdec› (env : ZENV) (zdec as ZDec (ids, tm): Z_DEC) : Z_DEC * ZENV * IDENT list = (
let	val (tm', ty') = ti_ztm env tm;
	val uty = ExVartype(Unknown (next_name()));
	val side = unify zti_subs (ty', ExType("",[uty]))
		handle Fail msg =>
		raise ZExn (FailedZDec (zdec, env, tm', ty'));
	val idty = sub_type zti_subs uty;
	val env' = sub_ty env;
	fun env'' id' = (if id' mem ids then (false, idty) else env' id');
in
	(ZDec(ids, tm'), env'', ids)
end)
=TEX
=SML
  | ti_zdec env (ZSchemaDec tm) = (
let	val (tm', ty') = ti_ztm env tm;
	val schty = sub_type zti_subs ty';
in
	case manifest schty of
	SchemaType idtyl => (
	   let	fun env' id = (
			case lassoc5 idtyl id of
			Nil => env id
			|Value x => (false,x)
		);
	   in
		(ZSchemaDec tm', env', map fst idtyl)
	   end)
	|_ => error "ti_zdec" 62998 [fn()=>"ZSchemaDec (not a schema)"]
end)
=TEX
=SML
and €list_ti_zdec› env ([]:Z_DEC list) : Z_DEC list * ZENV * IDENT list = (
	([], env, [])
) | list_ti_zdec env (d::ds) = (
let	val (d', env', ids') = ti_zdec env d
	val (ds'', env'', ids'') = list_ti_zdec (sub_ty env') ds
in
	(d'::ds'', sub_ty env'', ids'@ids'')
end)
=TEX
\section{INFERRING TYPES IN Z SCHEMAS}

Note that if the predicate part of a schema text is
not boolean, then this constitutes a type checking error.
The caller of $ti\_zschtext$ should make this check, as
it is likely
to have more contextual information for reporting informative
error messages than $ti\_zschtext$. 

=SML
and €ti_zschtext› (env : ZENV) (schtext : Z_SCH_TEXT as (ds, otm)) : Z_SCH_TEXT * ZENV * (IDENT * EXTYPE) list = (
let	val (ds', env', ids) = list_ti_zdec env ds;
	val env'' = sub_ty env';
	val idtyl = combine ids (map snd (map env'' ids));

in
	case otm of
	Nil =>		((ds', Nil), env'', idtyl)
	|Value tm => (
		let	val (tm', ty') = ti_ztm env'' tm;
			val side = unify zti_subs (ty', ex_bool)
				handle Fail msg =>
				raise ZExn (FailedZSchText (schtext, env, tm', ty'));
		in
			((ds', Value tm'), env'', idtyl)
		end)
end)
=TEX

\section{INFERRING TYPES IN Z TERMS}

\subsection{Sequence Display}

=SML
and €ti_ztm› (env : ZENV) (term as ZTmß¢ (oty, tl)) : Z_TM * EXTYPE = (
let	val tmlist = list_ti_ztm env tl;
	val (tml, tyl) = split tmlist;
	val side = list_unify zti_subs tyl
		handle Fail msg =>
		raise ZExn (FailedZTm (term, env, Failedß¢(tl, tyl)));
	val ty = 
		(case tyl of
		  [] => ExVartype(Unknown(next_name()))
		  | _ => hd tyl
		);
	val resty = ex_ (tuple_extype [ex_˙, sub_type zti_subs ty]);
	val side = case oty of
		Nil => ()
		|Value ty => (
			unify zti_subs (ty, resty)
			handle Fail msg =>
			error "ti_ztm" 62998 [fn()=>"ZTmß¢ (cannot unify type constraint)"]);
in
	(ZTmß¢ (Value resty, tml), resty)
end)
=TEX
\subsection{Set Display}
=SML
  | ti_ztm env(term as ZTmSetd (oty, tl)) = (
let	val tmlist = list_ti_ztm env tl;
	val (tml, tyl) = split tmlist;
	val side = list_unify zti_subs tyl
		handle Fail msg =>
		raise ZExn (FailedZTm (term, env, FailedSetd(tl, tyl)));
	val ty = 
		(case tyl of
		  [] => ExVartype(Unknown(next_name()))
		  | _ => hd tyl
		);
	val resty = ex_ (sub_type zti_subs ty);
	val side = case oty of
		Nil => ()
		|Value ty => (
			unify zti_subs (ty, resty)
			handle Fail msg =>
			error "ti_ztm" 62998 [fn()=>"ZTmSetd (cannot unify type constraint)"]);
in
	(ZTmSetd (Value resty, tml), resty)
end)
=TEX

\subsection{Set Abstraction}
=SML
  | ti_ztm env (term as ZTmSeta1 schtext) = (
let	val ctm = chartuple schtext;
	val (schtext', env', _) = ti_zschtext env schtext
		handle ZExn (FailedZSchText (_, env, tm', ty')) =>
		raise ZExn (FailedZTm (term, env, FailedSeta(tm',ty',62031)));
	val (_, ty') = ti_ztm (sub_ty env') ctm;
in
	(ZTmSeta1 schtext', ty')
end)
=TEX
=SML
  | ti_ztm env (term as ZTmSeta2 (schtext, tm)) = (
let	val (schtext', env', _) = ti_zschtext env schtext
		handle ZExn (FailedZSchText (_, env, tm', ty')) =>
		raise ZExn (FailedZTm (term, env, FailedSeta(tm',ty',62034)));
	val (tm', ty') = ti_ztm (sub_ty env') tm;
in
	(ZTmSeta2(schtext', tm'), ty')
end)
=TEX

\subsection{Powerset}
=SML
  | ti_ztm env (term as ZTm tm) = (
let	val (tm', ty') = ti_ztm env tm;
	val side = case ty' of
		ExType ("", _) => ()
		|_ => raise ZExn (FailedZTm (term, env, Failed (tm', ty')));
in
	(ZTm tm, ex_ ty')
end)
=TEX

\subsubsection{Tuple Display}
=SML
  | ti_ztm env (ZTmTuple []) = error "ti_ztm" 62998
		[fn()=>"ZTmTuple (Zero length tuple)"]
  | ti_ztm env (ZTmTuple [tm]) = error "ti_ztm" 62998
		[fn()=>"ZTmTuple (Unit length tuple)"]
  | ti_ztm env (ZTmTuple tml) = (
let	fun f [] n nl = nl
	  | f (h::t) n nl = f t (n+1) ((string_of_int n, "")::nl);
	val tmlist = list_ti_ztm env tml;
	val (tml', tyl') = split tmlist;
	val unkl = map (fn x => ExVartype (Unknown(next_name()))) tml';
	val side = map (unify zti_subs) (combine unkl tyl')
		handle Fail msg =>
		error "ti_ztm" 62998
			[fn()=>"ZTmTuple (Unification error)"];
	val ty = tuple_extype (map (sub_type zti_subs) unkl);
in
	(ZTmTuple tml', ty)
end)
=TEX
\subsubsection{Product}
=SML
  | ti_ztm env (ZTm∏ []) = error "ti_ztm" 62998
		[fn()=>"ZTm∏ (Zero length tuple)"]
  | ti_ztm env (ZTm∏ [tm]) = error "ti_ztm" 62998
		[fn()=>"ZTm∏ (Unit length tuple)"]
  | ti_ztm env (term as ZTm∏ tml) = (
let	fun f [] n nl = nl
	  | f (h::t) n nl = f t (n+1) ((string_of_int n, "")::nl);
	fun get_unify_failures ((tm, (ty1, ty2))::rest) = (
	let	val res = (unify zti_subs (ty1, ty2);true)
			handle Fail msg => false;
	in
		if res then get_unify_failures rest
		else (tm,ty2)::get_unify_failures rest
	end
	) | get_unify_failures [] = [];
	val tmlist = list_ti_ztm env tml;
	val (tml', tyl') = split tmlist;
	val unkl = map (fn x => ex_ (ExVartype
			(Unknown(next_name())))) tml';
	val typairs = combine unkl tyl';
	val side = case get_unify_failures (combine tml' typairs) of
		[] => ()
		|failures =>
		   (let	val(ftml, ftyl) = split failures;
		   in
			raise ZExn (FailedZTm (term, env, Failed∏ (ftml, ftyl)))
		   end);
	val ty =  ex_ (tuple_extype (map (sub_type zti_subs) unkl));

in
	(ZTm∏ tml', ty)
end)
=TEX
\subsubsection{Theta}
=SML
  | ti_ztm env (term as ZTm  (tm, decor)) = (
let	val (tm', ty') = ti_ztm env tm;
in
	case manifest ty' of
	SchemaType _ =>
		let	val bty = (
				case ty' of
				ExType ("", [x]) => x
				|_ => error "ti_ztm" 62998 [fn()=>
					"ZTm "]
			);
		in
			(ZTm (tm', decor), bty)
		end
	|_ => raise ZExn (FailedZTm (term, env, Failed  (tm', ty')))
end)
=TEX

\subsubsection{Selection}
=SML
  | ti_ztm env (term as ZTmSelâB (tm, id)) = (
let	val (tm', ty') = ti_ztm env tm;
in
	case manifest ty' of
	BindingType idtyl => (
		case lassoc5 idtyl id of
		Nil => raise ZExn (FailedZTm  (term, env, FailedSel1 (tm', id)))
		|Value ty'' =>
			(ZTmSelâB(tm', id), sub_type zti_subs ty'')
		)
	|_ => raise ZExn (FailedZTm (term, env, FailedSel2 (tm', ty')))
end)
=TEX

=SML
  | ti_ztm env (term as ZTmSelâT (tm, i)) = (
let	val (tm', ty') = ti_ztm env tm;
in
	case manifest ty' of
	TupleType tyl => (
		let	val ty'' = nth (i-1) tyl
				handle Fail _ =>
				raise ZExn (FailedZTm  (term, env, FailedSel3 (tm', i)));
		in
			(ZTmSelâT(tm', i), sub_type zti_subs ty'')
		end)
	|_ => raise ZExn (FailedZTm (term, env, FailedSel2 (tm', ty')))
end)
=TEX

\subsubsection{Application}
SML
  | ti_ztm env (term as ZTmApp (tmf,tma)) = (
let	val gen_args = ( 
		case tmf of ZTmLVar(id as (s,d), _ ,_) =>(
			case get_fixity s of
			Lex.Infix ~3 => 2
			|Lex.Infix ~5 => 1
			|_ => 0)
		|_ => 0);
in
	case gen_args of 
	0 => (
		let	val (ttmf, tyf) = ti_ztm env tmf;
			val (ttma, tya) = ti_ztm (sub_ty env) tma;
			val tvn = next_name();
			val tyr = ExVartype(Unknown tvn);
			val side = unify zti_subs (tyf, ex_ (tuple_extype([tya,tyr])));
		in
			case ttmf of ZTmGVar(id as (s,d), _, tml) => (
				case get_fixity s of 
				Lex.Infix ~2 => raise ZExn (FailedZTm (term, env, Failedor)
				|_ => (ZTmApp(ttmf,ttma), sub_type zti_subs tyr)
			)
			|_ => (ZTmApp(ttmf,ttma), sub_type zti_subs tyr)
		end
		handle ZExn (FailedZTm _ => (
		let	val (ttmf, tyf) = ti_ztm env tmf;
			val (ttma, tya) = ti_ztm (sub_ty env) tma;
			val side = unify zti_subs (tyf, ex_ ex_bool);
		in
			(ZTmApp(ttmf,ttma), ex_ ex_bool)
		end))
=TEX
SML
	|1 => (
		let	val tmf' = (	case (tmf,tma) of (ZTmLVar(s, oty, _),_) =>
						ZTmLVar(s, oty, [tma])
					| _ => error "ti_ztm" 62998
						[fn()=>"ti_ZTmApp (This should be impossible)"]);
			val (ttma, tya) = ti_ztm env tma;
			val (ttmf, tyf) = ti_ztm (sub_ty env) tmf';
		in
			(ttmf, tyf)
		end)
	|_ => (
		let	val tmf' = (case (tmf,tma) of
				(ZTmLVar(s, oty, _), ZTmTuple tml) =>
					ZTmLVar(s, oty, tml)
				|_ => error "ti_ztm" 62998
					[fn()=>"ti_ZTmApp (This should be impossible)"]);
			val (ttma, tya) = ti_ztm env tma;
			val (ttmf, tyf) = ti_ztm (sub_ty env) tmf';
		in
			(ttmf, tyf)
		end)
end)
=TEX

\subsubsection{$\lambda$-abstraction}
=SML
 | ti_ztm env (term as ZTmÃ (sch, tm)) = (
let	val ctm = chartuple sch;
	val (sch', env', _) = ti_zschtext env sch;
	val env2 = sub_ty env';
	val (tm', ty') = ti_ztm env2 tm;
	val env3 = sub_ty env2;
	val (tm2, ty2) = ti_ztm (sub_ty env3) ctm;
	val ty = ex_ (tuple_extype [ty2, ty']);
in
	(ZTmÃ (sch', tm'), ty)
end)
=TEX

\subsubsection{Definite Description}
=SML
 | ti_ztm env (ZTmÕ1 sch) = (
let	val ctm = chartuple sch;
	val (sch',env', _) = ti_zschtext env sch;
	val (_, ty') = ti_ztm (sub_ty env') ctm;
in
	(ZTmÕ1 sch', ty')
end)
=TEX
=SML
 | ti_ztm env (ZTmÕ2 (sch, tm)) = (
let	val (sch',env', _) = ti_zschtext env sch;
	val (tm', ty') = ti_ztm (sub_ty env') tm;
in
	(ZTmÕ2 (sch', tm'), ty')
end)
=TEX

\subsection{Schema Text as a Term}

=SML
  | ti_ztm env (term as ZTmHorizSchema sch) = (
let	val (sch', env', idtyl) = ti_zschtext env sch;
	val ty = ex_ (bind_extype idtyl);
in
	(ZTmHorizSchema sch', ty)
end)
=TEX

\subsubsection{Decoration}
=SML
 | ti_ztm env (term as ZTmDecor (tm, d)) = (
let	val (tm', ty') = ti_ztm env tm;
in
	case manifest ty' of
	SchemaType _ => (ZTmDecor(tm',d), ty')
	| _ => raise ZExn (FailedZTm (term, env, FailedDec (tm', ty')))
end)
=TEX
\subsubsection{Precondition}
=SML
  | ti_ztm env (term as ZTmPre tm) = (
let	val (tm', ty') = ti_ztm env tm
in
	case manifest ty' of
	SchemaType idtyl => (
		let	val cmap = idtyl drop (fn((n,d), ty) => (
			let	val c=hd(rev(explode d))
					handle Fail _ => "";
			in
				(c="'") orelse
				(c="!")
			end));
			val idm = map (fn((n,d),t)=> ((n,""), t)) cmap;
			val ty'' = ex_ (bind_extype idm);
		in
			(ZTmPre tm', ty'')
		end)
	| _ => raise ZExn (FailedZTm (term, env, FailedDec (tm', ty')))
end)
=TEX
\subsubsection{Negation}
=SML
 | ti_ztm env (term as ZTm≥âF tm) = (
let	val (tm', ty') = ti_ztm env tm
	val side = (
		case manifest ty' of
		SchemaType _ =>
			raise ZExn (FailedZTm (term, env, Failed≥ (tm', ty')))
		|_ => unify  zti_subs(ty', ex_bool)
			handle Fail msg =>
			raise ZExn (FailedZTm (term, env, Failed≥ (tm', ty')))
		)
in
	(ZTm≥âF tm', ty')
end)
=TEX

=SML
 | ti_ztm env (term as ZTm≥âS tm) = (
let	val (tm', ty') = ti_ztm env tm
	val side = (
		case manifest ty' of
		SchemaType _ 	=> ()
		|_ => 	raise ZExn (FailedZTm (term, env, Failed≥ (tm', ty')))
		)
in
	(ZTm≥âS tm', ty')
end)
=TEX

\subsubsection{Ñ and ò}
=SML
  | ti_ztm env (term as ZTmÑ tm) = (
let	val(tm', ty') = ti_ztm env tm;
in
	case manifest ty' of
	SchemaType _ => (ZTmÑ tm', ty')
	|_ => raise ZExn (FailedZTm (term, env, Failed))
end)
=TEX

=SML
  | ti_ztm env (term as ZTmò tm) = (
let	val(tm', ty') = ti_ztm env tm;
in
	case manifest ty' of
	SchemaType _ => (ZTmò tm', ty')
	|_ => raise ZExn (FailedZTm (term, env, Failed))
end)
=TEX
\subsubsection{Quantification}
SML
  | ti_ztm env (term as ZTmQuantâS (sch, tm)) = (
let	val (sch', env', idtyl) = ti_zschtext env sch;
	val (tm', ty') = ti_ztm (sub_ty env') ztm;
in
	case sub_type zti_subs ty' of
	ExType("bool",[]) => (
		ZTm∂(tsch,ttm)
	)| _ => (
		let	val tschtm = ti_ztm (sub_ty env') (ZTmHorizSchema tsch)
			val ty1 = (	case sub_type zti_subs (get_type ttm) of 
					ExType("",[ty]) => ty
				| _ => raise Z_TYPE_INF )
				val ty2 = (	case sub_type zti_subs (get_type tschtm) of 
							ExType("",[ty]) => ty
						| _ => raise Z_TYPE_INF )
			in
				case includes (ty1,ty2) of
					Nil => raise Z_TYPE_INF 
				|	Value tty => 
						ZTm∂(tsch,ttm)
			end)
	end)
=TEX

\subsection{Integers}
=SML
  | ti_ztm env (ZTm˙ i) = (
	(ZTm˙ i, ex_˙)
)
=TEX
\subsection{String Quotation}
=SML
  | ti_ztm env (ZTmString s ) = (
	(ZTmString s, ex_string)
)
=TEX
\subsection{Term Quotation}
=SML
  | ti_ztm env (ZTmQuotation holtm) = (
	(ZTmQuotation holtm, (type_to_extype o type_of) holtm)
)
=TEX
\subsection{Predicates}
=SML
  | ti_ztm env (term as ZTmSchemaPred tm) = (
let	val (tm', ty') = ti_ztm env tm;
in
	case manifest ty' of
		SchemaType _ => (ZTmSchemaPred tm', ex_bool)
		| _ => raise ZExn (FailedZTm (term, env, Failed))
end
)
=TEX
\subsection{Predicates}
=SML
  | ti_ztm env (ZTmTruth true) = (
	(ZTmTruth true, ex_bool)
)
=TEX
=SML
  | ti_ztm env (ZTmTruth false) = (
	(ZTmTruth false, ex_bool)
)
=TEX
=SML
  | ti_ztm env (term as ZTmEq (t1, t2)) = (
let	val (tm1, ty1) = ti_ztm env t1;
	val (tm2, ty2) = ti_ztm (sub_ty env) t2;
	val ty1' = sub_type zti_subs ty1;
	val ty2' = sub_type zti_subs ty2;
	val side = unify zti_subs (ty1', ty2')
		handle Fail msg =>
		raise ZExn (FailedZTm (term, env, FailedEq (tm1, tm2, ty1', ty2')));
in
	(ZTmEq(tm1, tm2), ex_bool)
end)
=TEX
=SML
  | ti_ztm env (term as ZTmç (t1, t2)) = (
let	val (tm1, ty1) = ti_ztm env t1;
	val (tm2, ty2) = ti_ztm (sub_ty env) t2;
	val ty1' = sub_type zti_subs ty1;
	val ty2' = sub_type zti_subs ty2;
	val unk = ExVartype (Unknown (next_name()));
	val side = unify zti_subs (ty2', ex_ unk)
		handle Fail msg =>
		raise ZExn (FailedZTm (term, env, Failedç1 (tm1, ty1')));
	val side = unify zti_subs (ty1', unk)
		handle Fail msg =>
		raise ZExn (FailedZTm (term, env, Failedç2 (tm1, ty1')));
in
	(ZTmç(tm1,tm2), ex_bool)
end)
=TEX
\subsubsection{Type Constraints}
=SML
  | ti_ztm env (term as ZTmConstrained (tm1, tm2)) = (
let	val (tm1', ty1') = ti_ztm env tm1;
	val (tm2', ty2') = ti_ztm (sub_ty env) tm2;
in
	case (manifest ty1', ty2') of
	(SchemaType _,ExType("",[ExType("BOOL",[])])) => (
		(* This needs to be re-visited... *)
		let	val ty = ExType("BOOL",[])
		in
			(ZTmConstrained(tm1',tm2'), ty)
		end)
	|_ => (
		let	val side = unify zti_subs (ex_ ty1', ty2')
			handle Fail msg =>
			raise ZExn (FailedZTm (term, env, FailedConstrained (tm1', ty1', tm2')));
		in
			(ZTmConstrained(tm1',tm2'), sub_type  zti_subs ty1')
		end)
	end)
=TEX

\subsubsection{Local Variables}
=SML
 | ti_ztm env (term as ZTmLVar (id as (n, d), tml)) = (
let	val (is_con, ty) = env id;
in
	if is_con andalso d <> "" andalso (case manifest ty of
				SchemaType _ => true
			|	_ => false)
	then ti_ztm env (ZTmDecor (ZTmLVar((n, ""), tml), d))
	else if is_con
	then  ti_ztm env (ZTmGVar (id, tml))
	else (
		case tml of	[] => (
		(ZTmLVar(id, []), ty)
		)|_ =>
			let	val ttmlist = list_ti_ztm env tml;
				val (ttml,tyl) = split ttmlist
				val argty = tuple_extype tyl;
				val tvn = next_name();
				val resty = ExVartype(Unknown tvn);
				val side = unify zti_subs (ty, ex_ (tuple_extype [argty, resty]))
					handle Fail msg =>
					error "ti_ztm" 62998 [fn ()=>
					"ZTmLVar (message to be supplied later)"];
				val ty' = sub_type zti_subs ty;
			in
				(ZTmLVar(id, ttml), ty')
			end)
end
)
=TEX

\subsection{Type Inferring Lists of Z Terms}
=SML
  | ti_ztm env other = (
	error "ti_ztm" 62998 [fn()=>"Not yet implemented"]
)
and
€list_ti_ztm› (env : ZENV) (tml : Z_TM list) : (Z_TM * EXTYPE) list = (
	let	fun list_ti_aux env nil = nil
		  | list_ti_aux env (tm::rest) = (
		let	val (titerm as (tm, ty)) = ti_ztm env tm;
			val newenv = sub_ty env;
			val next = list_ti_aux newenv rest;
		in
			(titerm::next)
		end);
	in
		list_ti_aux env tml
	end
);
=TEX

=TEX
\section{INFERRING TYPES IN Z PARAGRAPHS}

The paragraph datatype includes a constructor for
Z terms. This is a convenient place to include Z terms,
and avoids having another data type which comprises
paragraphs or Z terms.
=SML
datatype €ZINFERRED› =	Inferred of Z_PARA * SUBS 
		|	TypeError of ERROR_INFO;
=TEX
=SML
fun €ti_zpara› (p as ZParaAbbDef (id, formals, tm, Nil): Z_PARA) : ZINFERRED = (
let	val env = init_zenv formals;
	val (tm', ty') = ti_ztm env tm;
in
	Inferred (ZParaAbbDef (id, formals, tm', Value ty'), zti_subs)

end
) | ti_zpara (ZParaAbbDef (_, _, _, Value _)) = (
	error "ti_zpara" 62998 [fn()=>"ZParaAbbDef (Unexpected type)"]
=TEX
=SML
) | ti_zpara (p as ZParaSchBox (id, formals, sch, Nil)) = (
let	val env = init_zenv formals;
	val (sch', env', idtyl) = ti_zschtext env sch;
	val ty = ex_ (bind_extype idtyl);
in
	Inferred (ZParaSchBox (id, formals, sch', Value ty), zti_subs)

end
=TEX
=SML
) | ti_zpara (p as ZParaSchBox (_, _, _, Value _)) = (
	error "ti_zpara" 62998 [fn()=>"ZParaSchBox (Unexpected type)"]
=TEX
=SML
) | ti_zpara  (ZParaAxDes (formals, sch, Nil)) = (
let	val env = init_zenv formals;
	val (sch', env', idtyl) = ti_zschtext env sch;
in
	Inferred (ZParaAxDes (formals, sch', Value idtyl), zti_subs)
end
) | ti_zpara (ZParaAxDes (_, _, Value _)) = error "ti_zpara" 62998
	[fn()=>"ZParaAxDes (Unexpected term-type list)"]
=TEX
=SML
  | ti_zpara  (p as ZParaFreeType _) = (
	Inferred (p, zti_subs)
=TEX

=SML
) | ti_zpara (p as ZParaGivenSet (idl, Nil)) = (
	Inferred (p, zti_subs)
) | ti_zpara (p as ZParaGivenSet (idl, Value (formals, tm))) = (
let	val env = init_zenv (idl@formals);
	val (tm', ty') = ti_ztm env tm;
	val side = unify zti_subs (ty', ex_bool)
		handle Fail msg =>
		error "ti_zpara" 62998 [fn()=>"ZParaGivenSet"];
in
	Inferred (p, zti_subs)
end
=TEX
=SML
) | ti_zpara (p as ZParaConstraint (idl, tm)) = (
let	val env = init_zenv idl;
	val (tm', ty') = ti_ztm env tm;
	val side = unify zti_subs (ty', ex_bool)
		handle Fail msg =>
		error "ti_zpara" 62998 [fn()=>"Constraint"];
in
	Inferred (ZParaConstraint (idl, tm'), zti_subs)
end
=TEX
=SML
) | ti_zpara (p as ZParaConjecture (id, formals, tm)) = (
let	val env = init_zenv [];
	val (tm', ty') = ti_ztm env tm;
	val side = unify zti_subs (ty', ex_bool)
		handle Fail msg =>
		error "ti_zpara" 62998 [fn()=>"Conjecture"];
in
	Inferred (ZParaConjecture (id, formals, tm'), zti_subs)
end
=TEX
=SML
) | ti_zpara (p as ZParaTerm (formals, tm, Nil)) = (
let	val env = init_zenv formals;
	val (tm', ty') = ti_ztm env tm
in
	Inferred (ZParaTerm (formals, tm', Value ty'), zti_subs)
end
=TEX
=SML
) | ti_zpara (p as ZParaTerm (_, _, Value _)) = (
	error "ti_zpara" 62998 [fn()=>"ZParaTerm (Unexpected type)"]
=TEX
=SML
) | ti_zpara (p as ZParaFixity _) = (
	error "ti_zpara" 62998 [fn()=>"ZParaFixity (Invalid type of Z paragraph)"]
);
=TEX
=SML
fun €type_check_zparagraph› (langchecks : string) (p:Z_PARA) : ZINFERRED = (
let	val side = init_subs zti_subs;
	val side = (extended_z :=
		(case langchecks of
		"standard" =>	false
		|"extended" =>	true
		|_		=> false));
in
	ti_zpara p
		handle ZExn info => TypeError(info)
end);
=TEX
=SML
fun €z_term_recogniser› (start:string, lang:string, value:INPUT list, finish:string) = (
let	val side_effect =
		if	is_same_symbol(start, "StartZTerm")
			andalso	is_same_symbol(finish, ">")
			andalso	(lang = "")
		then	()
		else
			fail "z_term_recogniser" 49010 [
				fn () => start,
				fn () => lang,
				fn () => finish];
	val tokens = zlex value;
	val parsed = zparser {is_quot = true, standard = true} tokens;
	val type_checked = (
		case type_check_zparagraph "standard" parsed of
		Inferred x => (diag_line "OK!";x)
		|TypeError e => print_zerror e
		);
in	type_checked
end);
=TEX
\section{EPILOGUE}
SML
end (* of structure ZTypeInference *);
=TEX
\pagebreak
\section{BACKEND}
To be supplied.

\end{document}

----------------------------------------------------
\subsubsection{Constants}
SML
and	€ti_ZTmGVar› (env:ZENV) (id:IDENT, ztml:Z_TM list) : Z_TM = (
	case (env id,ztml,id) of 
		((true,ExType("≠",[domty,ranty])),[],("U","")) => 
			let	val (bnam,gentyl) = (	case domty of ExType(b,l) => (b,l)
							| _ => scream "ti_ZTmGVar" "Bad generic constant")
				val ztml' = map (fn x => ZTmGVar(("totality",""),[])) gentyl
			in
				ti_ZTmGVar env (id,ztml')
			end
	|	((true,ExType("≠",[domty,ranty])),[],_) => 
			let	val (bnam,gentyl) = (	case domty of ExType(b,l) => (b,l)
							| _ => scream "ti_ZTmGVar" "Bad generic constant")
				val ztml' = map (fn x => ZTmGVar(("U",""),[])) gentyl
			in
				ti_ZTmGVar env (id,ztml')
			end
	|	((true,ExType("≠",[domty,ranty])),_,_) =>
			let	val ttml = list_ti_ztm env ztml
				val tyl = map ((sub_type zti_subs) o get_type) ttml
				val argty = tuple_extype tyl
				val tvn = next_name()
				val resty = ExVartype(Unknown tvn)
				val msg = [	ZUmsg ("generic constant "),
						ZUmsg (	"the previously defined type of " ^ 
							(pack_IDENT id) ^ 
							" is a mapping from"),
						ZUtyp (domty,zti_subs),
						ZUmsg ("to"),
						ZUtyp (ranty,zti_subs),
						ZUmsg ("which cannot be unified with"),
						ZUtyp (argty,zti_subs),
						ZUmsg ("to"),
						ZUtyp (resty,zti_subs)]
				val side = z_unify msg (Funt domty ranty,Funt argty resty)
			in
				ZTmGVar(id,ttml)
			end
	|	((true,ty),[],_) =>
			ZTmGVar(id,[])
	|	_ => raise Z_TYPE_INF [	ZUmsg ("constant" ^ (pack_IDENT id))]
)
TEX
\subsubsection{Propositional Calculus}
SML
and	€ti_ZTm±› (env:ZENV) ((ztm1,ztm2):Z_TM * Z_TM) : Z_TM = (
	let	val ttm1 = ti_ztm env ztm1
		val ttm2 = ti_ztm (sub_ty env) ztm2
		val tty1 = sub_type zti_subs (get_type ttm1)
		val tty2 = sub_type zti_subs (get_type ttm2)
	in
		case (manifest tty1,manifest tty2) of
			(SchemaType _, SchemaType _) => (
			let	val bty1 = (	case tty1 of ExType("",[ty]) => ty
						| _ => scream "ti_ZTm±" "Design error")
				val bty2 = (	case tty2 of ExType("",[ty]) => ty
						| _ => scream "ti_ZTm±" "Design error")
			in
				case compatible (bty1,bty2) of
					Nil => raise Z_TYPE_INF [	ZUmsg "±",
									ZUtrm(ttm1,zti_subs),
									ZUtrm(ttm2,zti_subs),
									ZUmsg "compatible"]
				|	Value tty => ZTm±(ttm1,ttm2)
			end
			handle Z_TYPE_INF _ => (
				raise Z_TYPE_INF [	ZUmsg "±",
							ZUtrm(ttm1,zti_subs),
							ZUtrm(ttm2,zti_subs),
							ZUmsg "unify"]
			))
		|	(SchemaType _,_) => (
			let	val msg = [	ZUmsg "±",
						ZUtrm(ttm2,zti_subs),
						ZUmsg "bool",
						ZUmsg "unify"]
				val side = z_unify msg (tty2,ExType("bool",[]))
			in
				ZTm±(ttm1,ttm2)
			end)
=TEX
SML
		|	(_,SchemaType _) => (
			let	val msg = [	ZUmsg "±",
						ZUtrm(ttm1,zti_subs),
						ZUmsg "bool",
						ZUmsg "unify"]
				val side = z_unify msg (tty1,ExType("bool",[]))
			in
				ZTm±(ttm1,ttm2)
			end)
		|	_ => (
			let	val msg = [	ZUmsg "±",
						ZUtrm(ttm1,zti_subs),
						ZUmsg "bool",
						ZUmsg "unify"]
				val side = z_unify msg (tty1,ExType("bool",[]))
				val msg = [	ZUmsg "±",
						ZUtrm(ttm2,zti_subs),
						ZUmsg "bool",
						ZUmsg "unify"]
				val side = z_unify msg (tty2,ExType("bool",[]))
			in
				ZTm±(ttm1,ttm2)
			end)
	end)
=TEX
SML
\subsubsection{Projection}
SML
and	€ti_ZTm˘› (env:ZENV) (ztm1:Z_TM,ztm2:Z_TM) : Z_TM = (
	let	val ttm1 = ti_ztm env ztm1
		val ttm2 = ti_ztm (sub_ty env) ztm2
		val ty1 = sub_type zti_subs (get_type ttm1)
		val ty2 = sub_type zti_subs (get_type ttm2)
	in
	case (manifest ty1,manifest ty2) of
		(SchemaType(cl1,ttyl1),SchemaType(cl2,ttyl2)) => (
			let	val idl1 = map (fn s => (s,"")) cl1
				val idl2 = map (fn s => (s,"")) cl2
				val bty1 = bind_extype(combine idl1 ttyl1)
				val bty2 = bind_extype(combine idl2 ttyl2)
			in
				case compatible (bty1,bty2) of
					Value ty =>
						ZTm˘(ttm1,ttm2)
				| _ => raise Z_TYPE_INF [	ZUmsg "˘",
								ZUtrm (ttm1,zti_subs),
								ZUtrm (ttm2,zti_subs),
								ZUmsg "compatible"]
			end
=TEX
SML
			handle Z_TYPE_INF _ => (
				raise Z_TYPE_INF [	ZUmsg "˘",
							ZUtrm (ttm1,zti_subs),
							ZUtrm (ttm2,zti_subs),
							ZUmsg "unify"]
			))
		| _ => raise Z_TYPE_INF [	ZUmsg "˘",
						ZUtrm (ttm1,zti_subs),
						ZUtrm (ttm2,zti_subs),
						ZUmsg "manifest"]
	end)
=TEX
\subsubsection{Hiding}
SML
and	€ti_ZTmHide› (env:ZENV) (ztm:Z_TM,idl:IDENT list) : Z_TM = (
	let	val ttm = ti_ztm env ztm
		val ty = sub_type zti_subs (get_type ttm)
	in
		case manifest ty of
			SchemaType(cl,ttyl) => (
			let	val cl' = map (fn s => (s,"")) cl
				val idm = (combine cl' ttyl) drop (fn(c,ty) => (c mem idl))
			in
				ZTmHide(ttm,idl)
			end)
		| _ => raise Z_TYPE_INF [	ZUmsg "",
						ZUtrm (ttm,zti_subs),
						ZUmsg "manifest"]
	end)
=TEX
\subsubsection{Quantification}
SML
and	€ti_ZTm∂› (env:ZENV) ((zsch,ztm):Z_SCH_TEXT * Z_TM) : Z_TM = (
	let	val (tsch,env',_) = ti_zschtext env zsch
		val ttm = ti_ztm (sub_ty env') ztm
	in
		case sub_type zti_subs (get_type ttm) of
			ExType("bool",[]) => (
				ZTm∂(tsch,ttm)			)
		|	_ => (
			let	val tschtm = ti_ztm (sub_ty env') (ZTmHorizSchema tsch)
				val ty1 = (	case sub_type zti_subs (get_type ttm) of 
							ExType("",[ty]) => ty
						| _ => raise Z_TYPE_INF [	ZUmsg "∂",
										ZUtrm (tschtm,zti_subs),
										ZUmsg "not bool or schema"])
				val ty2 = (	case sub_type zti_subs (get_type tschtm) of 
							ExType("",[ty]) => ty
						| _ => raise Z_TYPE_INF [	ZUmsg "∂",
										ZUtrm (tschtm,zti_subs),
										ZUmsg "not schema text"])
			in
				case includes (ty1,ty2) of
					Nil => raise Z_TYPE_INF [	ZUmsg "∂",
									ZUtrm (tschtm,zti_subs),
									ZUtrm (ttm,zti_subs),
									ZUmsg "bound variable not in schema"]
				|	Value tty => 
						ZTm∂(tsch,ttm)
			end)
	end)
=TEX
\subsubsection{Schema Composition}
SML
and	€ti_ZTmª› (env:ZENV) (ztm1:Z_TM,ztm2:Z_TM) : Z_TM = (
	let	fun	f msg [] [] _ = []
		|	f msg [] (h::t) tym1 = (
				case h of ((s,""),ty2) => (
					case lassoc5 tym1 (s,"'") of
						Value ty1 => (
						let	val dl = f msg [] t tym1
							val side = z_unify msg (ty1,ty2)
						in
							dl
						end)
					|	Nil => raise Z_TYPE_INF msg)
				| _ => f msg [] t tym1)
		|	f msg (h::t) tym2 tym1 = (
				case h of ((s,"'"),ty1) => (
					case lassoc5 tym2 (s,"") of
						Value ty2 => (
						let	val dl = f msg t tym2 tym1
							val side = z_unify msg (ty1,ty2)
						in
							(s,"")::dl
						end)
					|	Nil => raise Z_TYPE_INF msg)
				| _ => f msg t tym2 tym1)
		val ttm1 = ti_ztm env ztm1
		val ttm2 = ti_ztm (sub_ty env) ztm2
		val tty1 = sub_type zti_subs (get_type ttm1)
		val tty2 = sub_type zti_subs (get_type ttm2)
=TEX
SML
	in
		case (manifest tty1,manifest tty2) of
			(SchemaType(cl1,tyl1),SchemaType(cl2,tyl2)) => (
			let	val idl1 = map unpack_IDENT cl1
				val idl2 = map unpack_IDENT cl2
				val idtym1 = combine idl1 tyl1
				val idtym2 = combine idl2 tyl2
				val msg = [	ZUmsg "ª",
						ZUtrm (ttm1,zti_subs), ZUtrm (ttm2,zti_subs),
						ZUmsg "compatible"]
				val dropl = f msg idtym1 idtym2 idtym1
				val idtym1' = idtym1 drop (fn ((s,d),ty) => (d = "'") andalso (s,"") mem dropl)
				val idtym2' = idtym2 drop (fn ((s,d),ty) => (d = "") andalso (s,"") mem dropl)
				val idtym = idtym1' cup idtym2'
			in
				ZTmª(ttm1,ttm2)
			end)
		| _ => raise Z_TYPE_INF [	ZUmsg "ª",
						ZUtrm (ttm1,zti_subs), ZUtrm (ttm2,zti_subs),
						ZUmsg "manifest"]
	end)
=TEX
=IGN
open ZTypeInference;


fun fp (p,s) = case p of
	ZParaTerm (_, tm, _) => format_ztm tm
	|_ => error "fp" 62999 [];


fp Òß1¢Æ;
fp Òß1,2,3¢Æ;
fp Òß¢Æ;
fp Ò{1}Æ;
fp Ò{1,2,3}Æ;
fp Ò{}Æ;
fp Ò{x | true}Æ;
fp Ò{x | x > y ∑ true}Æ;









































exception OOPS;

fun d tm = (
	case type_check_zparagraph "" (ZParaTerm ([], tm, Nil)) of
		Inferred (ZParaTerm (_, tm', Value ty'), subs) => (tm', ty', subs)
		|TypeError info => print_zerror info
		|_ => raise OOPS);


fun mk_template s = TmplNon (s,Nil);
val f=format_ztm;
val fs=format_zschtext;
val fd=map format_zdec;

val a = mk_template "a";
val w = mk_template "w";
val x = mk_template "x";
val y = mk_template "y";
val z = mk_template "z";

val set_1 = ZTmSetd (Nil, [ZTmTruth true, ZTmTruth false]);
val set_2 = ZTmSetd (Nil, [ZTm˙ 0,ZTm˙ 1,ZTm˙ 2,ZTm˙ 3]);

val decl_1 = [ZDec ([(a,"")], set_1)];
val decl_2 = [ZDec ([(x,""),(y,""),(z,"")], set_2)];
val decl_3 = [ZDec ([(w,""),(x,"?"),(y,"'"),(z,"!")], set_2)];
val decl_4 = decl_1@decl_2;

val decl_1f = [ZDec ([(a,"")],ZTmTruth true)];

val schtext_1 = (decl_1, ZTmTruth true);
val schtext_2 = (decl_2, ZTmEq (ZTmLVar ((a,""),[]),ZTm˙ 0));
val schtext_3 = (decl_3, ZTmTruth true);

val schtext_1f = (decl_1f, ZTmTruth true);
val schtext_2f = (decl_1, ZTm˙ 0);


val c1_1 = ZTmß¢ (Nil, [ZTm˙ 3]);
val c1_2 = ZTmß¢ (Nil, [ZTmTruth true, ZTmTruth false]);

val c2_1 = ZTmSetd (Nil, [ZTm˙ 3]);
val c2_2 = ZTmSetd (Nil, []);
val c2_1f = ZTmSetd (Nil, [ZTm˙ 3,ZTmTruth true]);

val c3_1 = ZTmSeta1 (decl_1, ZTmTruth true);

val c3_1f = ZTmSeta1 (decl_2, set_1);
val c3_2f = ZTmSeta1 (decl_1f,ZTmTruth true);
val c3_1error = ZTmSeta1 ([ZDec ([],c2_1)],ZTmTruth true);

val c4_1 = ZTm (c2_1);

val c4_1f = ZTm (ZTm˙ 1);

val c5_1 = ZTmTuple [c1_1, c1_2, ZTmTruth true];

val c6_1 = ZTm∏ [c1_1, c1_2, c2_1];

val c6_1f = ZTm∏ [c1_1, c1_2, ZTm˙ 0];
val c6_2f = ZTm∏ [ZTm˙ 0,c1_1, ZTm˙ 2, c1_2, ZTmTruth true];

val c7_1 = ZTm  (ZTmHorizSchema schtext_2, "'");
val c7_1f = ZTm  (ZTm˙ 1, "");

val c8_1 = ZTmSelâB (ZTm  ((ZTmHorizSchema schtext_2),""), (x,""));

val c8_1f = ZTmSelâB (ZTm  ((ZTmHorizSchema schtext_2),""), ("A",""));
val c8_2f = ZTmSelâB (ZTmHorizSchema schtext_2, ("Y",""));

val c10_1 = ZTmÃ (schtext_2, ZTmTruth true);

val c10_1f = ZTmÃ (schtext_1, ZTmEq (ZTmLVar(("a",""),Nil,[]), ZTm˙ 0));

val c11a_1 = ZTmÕ1 schtext_2;
val c11b_1 = ZTmÕ2 (schtext_2, ZTm˙ 0);

val c11b_1f = ZTmÕ2 (schtext_1, ZTmEq (ZTmLVar(("a",""),Nil,[]), ZTm˙ 0));
;

val c12_1 = ZTmHorizSchema ([ZDec ([("Q","")],ZTm (ZTm˙ 0))],ZTmTruth true);
val c12_2 = ZTmHorizSchema ([ZDec ([("Q","")],ZTm (ZTm˙ 0))],
		ZTmEq (ZTm˙ 0, ZTmLVar (("Q",""), Nil, [])));
val c12_3 = ZTmHorizSchema ([ZDec ([("Q","")],ZTm (ZTmTruth true))],ZTmTruth true);

val c12_1f = ZTmHorizSchema ([ZDec ([("Q","")],ZTmTruth true)],ZTmTruth true);
val c12_2f = ZTmHorizSchema ([ZDec ([("Q","")],ZTm (ZTm˙ 0))],
		ZTmEq (ZTmTruth true, ZTmLVar (("Q",""), Nil, [])));

val c13_1 = ZTmDecor (ZTmHorizSchema ([ZDec ([("Y","")],ZTm (ZTm˙ 0))],ZTmTruth true), "'");
val c13_1f = ZTmDecor(ZTm˙ 1, "");

val c14_1 = ZTmPre (ZTmHorizSchema schtext_2);
val c14_2 = ZTmPre (ZTmHorizSchema schtext_3);

val c15_1 = ZTm≥âF (c12_1);
val c15_1f = ZTm≥âF (ZTm˙ 0);

val c24_1 = ZTm˚˝ (Nil, [ZTm˙ 3]);
val c24_2 = ZTm˚˝ (Nil, [ZTmTruth true, ZTmfalse]);
val c24_1f = ZTm˚˝ (Nil, [ZTm˙ 3, ZTmTruth true]);

val c25a_1 = ZTmç (ZTmTruth true, ZTm (ZTmTruth false));
val c25b_1 = ZTmEq (ZTmTruth true, ZTmTruth false);

val c25a_1f = ZTmç (ZTmTruth true, ZTm˙ 3);
val c25a_2f = ZTmç (ZTmTruth true, ZTmSetd (Nil, [ZTm˙ 3]));
val c25a_3f = ZTmç ((ZTmHorizSchema ([ZDec ([("X","")],
		ZTm (ZTm˙ 0))],ZTmTruth true)),ZTmTruth true);
val c25b_1f = ZTmEq (ZTmTruth true, ZTm˙ 3);
val c25b_2f = ZTmEq (ZTm˙ 3, ZTm (ZTm˙ 3));

val c26_1 = ZTmConstrained (ZTm˙ 0, ZTm (ZTm˙ 0));
val c26_2 = ZTmConstrained (ZTmTruth true, ZTm (ZTmTruth true));

val c26_1f = ZTmConstrained (ZTm˙ 0, ZTmTruth true);

val c27_1 = ZTmLVar (("X",""),Nil, [ZTmSetd (Nil,[ZTm˙ 3])
