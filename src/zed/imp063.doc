=IGN
********************************************************************************
imp063.doc: this file is part of the PPZed system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
% imp063.doc	%Z% 2004/01/19 12:44:00 1.26 imp063.doc,v
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Implementation of the Z Term Generator}  %% Mandatory field
\TPPref{DS/FMU/IED/IMP063}  %% Mandatory field
\def\SCCSversion{1.26%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{2004/01/19 12:44:00%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{D.J.~King & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{This document contains the implementation of
the term generator for HOL/Z.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
      Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issue 1.1, \FormatDate{92/03/19} ] Initial Draft.

\item [Issue 1.9 (17th July 1992)]
Now uses real $mk\_z\_renameâs$.
\item [Issue 1.10 (20th July 1992)] Added binding display. 
\item [Issue 1.11 (21st July 1992)]
Activated $renameâs\_const\_spec$.
\item [Issue 1.12-15 (31st July 1992)]
Added calls to a few more semantic constant generation functions. Tidied up the documentation side.
\item [Issue 1.18 (28th October 1992)]
Amended treatment of term quotations.
\item [Issue 1.19 (29th October 1992)]
Fixed bug in decoration in declarations.
\item [Issue 1.20 (3rd November 1992)]
Capture of free variables by global variables now handled.
\item[Issue 1.21 (10th December 1992)]
Global rename from wrk038.doc issue 1.9.
\item[Issue 1.22 (7th May 1994)]
Added the local function $type\_defn\_of\_z\_extype$ which is now used during term generation to ensure that all the types which are required are introduced into the current cache theory. Where the flag ``standard\_z\_paras'' is set to false, the following paragraph now correctly type checks.
πIZAX
fruit :  (É ∫ [apple, banana, crabapple : ˙])
∞
\item[1.23] Update for new INTEGER type.
\item[Issue 1.24] Copyright and banner updates for open source release.
\item[Issue 1.25] PPZed-specific updates for open source release
\item[Issue 1.26] The Z universal set is now called É.
\item[Issue 1.27--1.29] Performance enhancements.
\item[Issue 1.30] Let expressions.
\item[Issue 1.31] Option to require distinguishing subscripts on all schema operations.
\item[Issue 1.32] Fixed missing semantic constant generation for the Õ inside a let expression.
\item[Issue 1.33] The name of the decoration operator is now based on the stem {\em decor} throughout, rather than {\em decor} in some places and {\em dec} in others.
\item[Issue 1.34] Added support for floating point literals.
\item[Issue 1.35] Allowed for the new predicate context constructor.
\item[Issue 1.36] Fixed bug with decorations in forming characteristic tuples.
\end{description}
\subsection{Changes Forecast}
The function $do\_in\_theory$ will be moved into the
underlying HOL system in due course.
\section{GENERAL}
\subsection{Scope}
This document contains the implementation
of the term generator for HOL/Z meeting the detailed design
given in \cite{DS/FMU/IED/DTD063}.
\subsection{Introduction}
\subsection{Purpose and Background}
See \cite{DS/FMU/IED/DTD063}.
\subsection{Dependencies}
The structure $ZTermGenerator$ depends on the structure
$ZUserInterfaceSupport$ for the types of the Z abstract syntax
tree, $ZTypeInference$ for the function $type\_of\_z_extype$
amd $ZGeneratedConstants$ for the functions which introduce
generated semantic constants.
\subsection{Interface}
The structure $ZTermGenerator$ is constrained by the signature
$ZTermGenerator$ defined in \cite{DS/FMU/IED/DTD063}.
\subsection{Possible Enhancements}
None.
\subsection{Deficiencies}
None known.

\section{PREAMBLE}
=SML
structure €ZTermGenerator› : ZTermGenerator = struct
local
	open Unification ZUserInterfaceSupport
	open ZTypeInference ZGeneratedConstants;
in
=TEX

\section{CALLING THE GENERATED SEMANTIC CONSTANT INTERFACES}

=SML
fun €new_seta_defn› ((dec, pred, t) : (TERM * TERM * TERM)) : TERM = (
let	val res = mk_z_seta (dec, pred, t);
	val thm = seta_gen_semantic_const res;
in
	res
end);
=TEX
=SML
fun €new_tuple_defn› (tms : (TERM list)) : TERM = (
let	val tm = mk_z_tuple tms;
	val side = tuple_gen_semantic_const tm;
in
	tm
end);
=TEX
=SML
fun €new_Õ_defn› ((dec, pred, t) : (TERM * TERM * TERM)) : TERM = (
let	val tm = mk_z_Õ (dec, pred, t);
	val thm = Õ_gen_semantic_const tm;
in
	tm
end);
=TEX
=SML
fun €new_let_defn› ((defs, body) : ((string * TERM) list * TERM)) : TERM = (
let	val tm = mk_z_let (defs, body);
	val mu_tm = snd(dest_app(tm));
	val thm = Õ_gen_semantic_const mu_tm;
in	tm
end);
=TEX
=SML
fun €new_∏_defn› (tms : (TERM list)) : TERM = (
let	val tm = mk_z_∏ tms;
	val side = ∏_gen_semantic_const tm;
in
	tm
end);
=TEX
=SML
fun €new_Ã_defn› ((dec, pred, t) : (TERM * TERM * TERM)) : TERM = (
let	val tm = mk_z_Ã (dec, pred, t);
	val thm = Ã_gen_semantic_const tm;
in
	tm
end);
=TEX
=SML
fun €new_renaming_defn› ((tm, ididl) : TERM * (string * string) list) : TERM = (
let	val tm' = mk_z_renameâs (tm, ididl);
	val thm = renameâs_gen_semantic_const tm';
in
	tm'
end);
=TEX
=SML
fun €new_binding_defn› (stl : (string * TERM) list) : TERM = (
let	val tm' = mk_z_binding stl;
	val thm = binding_gen_semantic_const tm';
in
	tm'
end);
=TEX
=SML
fun €new_∂â1_defn› ((dec, pred, t) : (TERM * TERM * TERM)) : TERM = (
let	val res = mk_z_∂â1 (dec, pred, t);
	val thm = ∂â1_gen_semantic_const res;
in
	res
end);
=TEX
=SML
fun €new_âs_defn› ((tm1, tm2) : (TERM * TERM)) : TERM = (
let	val tm' = mk_z_h_schema (tm1, tm2);
	val thm = schema_gen_semantic_const tm';
in
	tm'
end);
=TEX
=SML
fun €new_decorâs_defn› ((tm1, d) : (TERM * string)) : TERM = (
let	val tm' = mk_z_decorâs (tm1, d);
	val thm = decorâs_gen_semantic_const tm';
in
	tm'
end);
=TEX
=SML
fun €new_preâs_defn› (tm : TERM) : TERM = (
let	val tm' = mk_z_preâs tm;
	val thm = preâs_gen_semantic_const tm';
in
	tm'
end);
=TEX
=SML
fun €new_˘âs_defn› ((tm1, tm2) : (TERM * TERM)) : TERM = (
let	val tm' = mk_z_˘âs (tm1, tm2);
	val thm = ˘âs_gen_semantic_const tm';
in
	tm'
end);
=TEX
=SML
fun €new_hideâs_defn› ((tm, idl) : (TERM * string list)) : TERM = (
let	val tm' = mk_z_hideâs (tm, idl);
	val thm = hideâs_gen_semantic_const tm';
in
	tm'
end);
=TEX
=SML
fun €new_dyopâs_defn› (inop : Z_LOG_IN_OP) ((tm1, tm2) : (TERM * TERM)) : TERM = (
let	val tm' = case inop of
		ZLogInOp± _ => mk_z_±âs  (tm1, tm2)
		|ZLogInOp≤ _ => mk_z_≤âs (tm1, tm2)
		|ZLogInOp¥ _ => mk_z_¥âs (tm1, tm2)
		|ZLogInOp§ _ => mk_z_§âs (tm1, tm2)
		|ZLogInOpSemi => mk_z_±âs (tm1, tm2);
	val thm = dyopâs_gen_semantic_const tm';
in
	tm'
end);
=TEX
=SML
fun €new_quantâs_defn› (quant : Z_QUANT) 
	((dec, pred, t) : (TERM * TERM * TERM)) : TERM = (
let	val tm = case quant of
		ZQuant∂ _ => mk_z_∂âs (dec, pred, t)
		|ZQuantµ _ => mk_z_µâs (dec, pred, t)
		|ZQuant∂â1 _ => mk_z_∂â1âs (dec, pred, t);
	val thm = quantâs_gen_semantic_const tm;
in
	tm
end);
=TEX
=SML
fun €new_Ñâs_defn› (tm : TERM) : TERM = (
let	val tm' = mk_z_Ñâs tm;
	val thm = Ñâs_gen_semantic_const tm';
in
	tm'
end);
=TEX
=SML
fun €new_òâs_defn› (tm : TERM) : TERM = (
let	val tm' = mk_z_òâs tm;
	val thm = òâs_gen_semantic_const tm';
in
	tm'
end);
=TEX
=SML
fun €new_ªâs_defn› ((tm1, tm2) : (TERM * TERM)) : TERM = (
let	val tm' = mk_z_ªâs (tm1, tm2);
	val thm = ªâs_gen_semantic_const tm';
in
	tm'
end);
=TEX

\section{UTILITIES}
=SML
local
val ˙_ty = mk_ctype("˙", []);
val minus_ty = mk_z_power_type(mk_z_tuple_type[˙_ty, ˙_ty]);
val zminus = mk_z_gvar("~ _", minus_ty, []);
in
fun €mk_nat› (n : INTEGER) : TERM = (
	mk_z_int(string_of_integer n)
);
fun €mk_exp› (e : INTEGER) : TERM = (
	if	e @>= zero
	then	mk_nat e
	else	mk_z_app(zminus, mk_nat(@~ e))
);
end;
=TEX

\section{GENERATING HOL TERMS}

\subsection{Z Declarations}

=SML
fun €tm_of_z_dec› (dec : Z_DEC) : TERM = (
	case dec of
	ZDDec (idl, tm, Value ty) =>
		let	val set = tm_of_z_tm tm;
			val holty = type_of_z_extype ty;
			val vars = map (fn id =>
				mk_z_lvar (string_of_ident id, holty, [])) idl;
		in
			mk_z_dec (vars, set)
		end
	|ZDDec (_, _, Nil) =>
		fail "tm_of_z_dec" 63001 []
	|ZDSchemaDec (ZTmDecor (tm, d, _), _) =>
		mk_z_schema_dec (tm_of_z_tm tm, d)
	|ZDSchemaDec (tm, _) =>
		mk_z_schema_dec (tm_of_z_tm tm, "")
)
=TEX
=SML
and €list_tm_of_z_dec› (decl : Z_DEC list) : TERM = (
	mk_z_decl (map (fn zd => tm_of_z_dec zd) decl)
)
=TEX

\subsection{Z Schema Texts}

=SML
and €tm_of_z_schtext› (sch as (dec, Value pred, Value ty)
	: Z_SCH_TEXT) : (TERM * TERM OPT) = (
	(list_tm_of_z_dec dec, Value (tm_of_z_tm pred))
) | tm_of_z_schtext (dec, _, _) = (
	(list_tm_of_z_dec dec, Nil)
) 
=TEX

\subsection{Z Terms}

=SML
and €tm_of_z_tm› ((term as ZTmß¢ (Value ty, tml)) : Z_TM) : TERM = (
let	val elty = hd (tl (dest_z_tuple_type (type_of_z_extype ty)));
in
	mk_z_ß¢ (elty, list_tm_of_z_tm tml)
end
) | tm_of_z_tm (ZTmß¢ (Nil, _)) = (
		fail "tm_of_z_tm" 63001 []
) | tm_of_z_tm (term as ZTmSetd (Value ty, tml)) = (
let	val elty = type_of_z_extype ty;
in
	mk_z_setd (elty, list_tm_of_z_tm tml)
end
) | tm_of_z_tm (ZTmSetd (Nil, _)) = (
		fail "tm_of_z_tm" 63001 []
) | tm_of_z_tm (term as ZTmSeta1 sch) = (
	let	val (tm', ty') = make_chartuple sch;
		val (dec, opred) = tm_of_z_schtext sch;
		val pred = case opred of
			Nil => mk_z_true
			|Value zp => zp;
		val t = tm_of_z_tm tm';
	in
		new_seta_defn (dec, pred, t)
	end
) | tm_of_z_tm (term as ZTmSeta2 (sch, tm)) = (
	let	val (dec, opred) = tm_of_z_schtext sch;
		val pred = case opred of
			Nil => mk_z_true
			|Value zp => zp;
		val t = tm_of_z_tm tm;
	in
		new_seta_defn (dec, pred, t)
	end
) | tm_of_z_tm (term as ZTm tm) = (
	mk_z_ (tm_of_z_tm tm)
) | tm_of_z_tm (term as ZTmTuple tml) = (
	new_tuple_defn (list_tm_of_z_tm tml)
) | tm_of_z_tm (term as ZTmBinding stl) = (
	new_binding_defn (map (string_of_ident ** tm_of_z_tm) stl)
) | tm_of_z_tm (term as ZTm∏ tml) = (
	new_∏_defn (list_tm_of_z_tm tml)
) | tm_of_z_tm (term as ZTm  (tm, d)) = (
	mk_z_  (tm_of_z_tm tm, d)
) | tm_of_z_tm (term as ZTmSelâT (tm, i)) = (
	mk_z_selât (tm_of_z_tm tm, i)
) | tm_of_z_tm (term as ZTmSelâB (tm, id)) = (
	mk_z_selâs (tm_of_z_tm tm, string_of_ident id)
) | tm_of_z_tm (term as ZTmApp (tm1, tm2)) = (
	mk_z_app (tm_of_z_tm tm1, tm_of_z_tm tm2)
) | tm_of_z_tm (term as ZTmFancyApp (id, tm)) = (
	fail "tm_of_z_tm" 63003 []
=TEX
=SML
) | tm_of_z_tm (term as ZTmÃ (sch, tm)) = (
	let	val (dec, opred) = tm_of_z_schtext sch;
		val pred = case opred of
			Nil => mk_z_true
			|Value zp =>  zp;
		val t = tm_of_z_tm tm;
	in
		new_Ã_defn (dec, pred, t)
	end
) | tm_of_z_tm (term as ZTmÕ1 sch) = (
	let	val (tm', ty') = make_chartuple sch;
		val (dec, opred) = tm_of_z_schtext sch;
		val pred = case opred of
			Nil => mk_z_true
			|Value zp => zp;
		val t = tm_of_z_tm tm';
	in
		new_Õ_defn (dec, pred, t)
	end
) | tm_of_z_tm (term as ZTmÕ2 (sch, tm)) = (
	let	val (dec, opred) = tm_of_z_schtext sch;
		val pred = case opred of
			Nil => mk_z_true
			|Value zp => zp;
		val t = tm_of_z_tm tm;
	in
		new_Õ_defn (dec, pred, t)
	end
) | tm_of_z_tm (term as ZTmPredContext tm) = (
	tm_of_z_tm tm
) | tm_of_z_tm (term as ZTmTruth true) = (
	mk_z_true
) | tm_of_z_tm (term as ZTmTruth false) = (
	mk_z_false
) | tm_of_z_tm (term as ZTm≥âF tm) = (
	mk_z_≥ (tm_of_z_tm tm)
) | tm_of_z_tm (term as ZTmLogInOpâF (inop, tm1, tm2)) = (
	let	val htm1 = tm_of_z_tm tm1;
		val htm2 = tm_of_z_tm tm2;
	in
		case inop of
		ZLogInOp± _ => mk_z_± (htm1, htm2)
		|ZLogInOp≤ _ => mk_z_≤ (htm1, htm2)
		|ZLogInOp¥ _ => mk_z_¥ (htm1, htm2)
		|ZLogInOp§ _ => mk_z_§ (htm1, htm2)
		|ZLogInOpSemi => mk_z_± (htm1, htm2)
	end
) | tm_of_z_tm (term as ZTmQuantâF (quant, sch, tm)) = (
	let	val (dec, opred) = tm_of_z_schtext sch;
		val pred = case opred of
			Nil => mk_z_true
			|Value zp => zp;
		val t = tm_of_z_tm tm;
	in
		case quant of
		ZQuant∂ _ => mk_z_∂ (dec, pred, t)
		|ZQuantµ _ => mk_z_µ (dec, pred, t)
		|ZQuant∂â1 _ => new_∂â1_defn (dec, pred, t)
	end
=TEX
=SML
) | tm_of_z_tm (term as ZTmSchemaPred tm) = (
	mk_z_schema_pred (tm_of_z_tm tm, "")
) | tm_of_z_tm (term as ZTmHorizSchema sch) = (
	let	val (dec, opred) = tm_of_z_schtext sch;
		val pred = case opred of
			Nil => mk_z_true
			|Value zp => zp;
	in
		new_âs_defn (dec, pred)
	end
) | tm_of_z_tm (term as ZTmDecor (tm, d, _)) = (
	new_decorâs_defn (tm_of_z_tm tm, d)
) | tm_of_z_tm (term as ZTmPre tm) = (
	new_preâs_defn (tm_of_z_tm tm)
) | tm_of_z_tm (term as ZTm≥âS tm) = (
	mk_z_≥âs (tm_of_z_tm tm)
) | tm_of_z_tm (term as ZTmLogInOpâS (inop, tm1, tm2)) = (
	let	val htm1 = tm_of_z_tm tm1;
		val htm2 = tm_of_z_tm tm2;
	in
		new_dyopâs_defn inop (htm1, htm2)
	end
) | tm_of_z_tm (term as ZTm˘ (tm1, tm2)) = (
	 new_˘âs_defn (tm_of_z_tm tm1, tm_of_z_tm tm2)
) | tm_of_z_tm (term as ZTmHide (tm, idl)) = (
	 new_hideâs_defn (tm_of_z_tm tm, map string_of_ident idl)
) | tm_of_z_tm (term as ZTmQuantâS (quant, sch, tm)) = (
	let	val (dec, opred) = tm_of_z_schtext sch;
		val pred = case opred of
			Nil => mk_z_true
			|Value zp => zp;
		val t = tm_of_z_tm tm;
	in
		new_quantâs_defn quant (dec,pred,t)
	end
=TEX
=SML
) | tm_of_z_tm (term as ZTmÑ tm) = (
	new_Ñâs_defn (tm_of_z_tm tm)
) | tm_of_z_tm (term as ZTmò tm) = (
	 new_òâs_defn (tm_of_z_tm tm)
) | tm_of_z_tm (term as ZTmEq (tm1, tm2)) = (
	mk_z_eq (tm_of_z_tm tm1, tm_of_z_tm tm2)
) | tm_of_z_tm (term as ZTmç (tm1, tm2)) = (
	mk_z_ç (tm_of_z_tm tm1, tm_of_z_tm tm2)
) | tm_of_z_tm (term as ZTmª (tm1, tm2)) = (
	 new_ªâs_defn (tm_of_z_tm tm1, tm_of_z_tm tm2)
) | tm_of_z_tm (term as ZTmPipe (tm1, tm2)) = (
	fail "tm_of_z_tm" 63002 [fn()=>"schema piping"]
) | tm_of_z_tm (term as ZTm˙ i) = (
	mk_z_int (string_of_integer i)
) | tm_of_z_tm (term as ZTmString s) = (
	mk_z_string s
) | tm_of_z_tm (term as ZTmFloat (x, p, e)) = (
	mk_z_float (mk_nat x, mk_nat p, mk_exp e)
) | tm_of_z_tm (term as ZTmLVar (id, Value ty, tml)) = (
	mk_z_lvar (string_of_ident id, type_of_z_extype ty, list_tm_of_z_tm tml)
) | tm_of_z_tm (ZTmLVar (_, Nil, _)) = (
		fail "tm_of_z_tm" 63001 []
) | tm_of_z_tm (term as ZTmGVar (id, Value ty, tml)) = (
let	val gv = string_of_ident id;
	val ty' = type_of_z_extype ty;
in
	case gv of
	"Totality" => mk_const (gv, ty')
	|_ => 
		mk_z_gvar (gv, ty', list_tm_of_z_tm tml)
end
) | tm_of_z_tm (ZTmGVar (_, Nil, _)) = (
	fail "tm_of_z_tm" 63001 []
) | tm_of_z_tm (term as ZTmLet (ds, b)) = (
	let	val defs = map (string_of_ident ** tm_of_z_tm) ds;
		val body = tm_of_z_tm b;
	in	new_let_defn (defs, body)
	end
) | tm_of_z_tm (term as ZTmRename (tm, ididl)) = (
let	val term = tm_of_z_tm tm;	
	val s = map (fn (id1, id2) =>
			(string_of_ident id1, string_of_ident id2)) ididl
in
	new_renaming_defn (term, s)
end
) | tm_of_z_tm (term as ZTmBracketed tm) = (
	tm_of_z_tm tm
) | tm_of_z_tm (term as (ZTmQuotation (tm, Value exty))) = (
	let	val nltyl = map dest_var (frees tm);
		val ty' = type_of_z_extype exty;
		val tyl = map snd nltyl;
		val ty = mk_ctype("", type_of tm :: tyl);
		val tm' = inst [] (type_match ty' ty) tm
			handle Fail msg => fail "tm_of_z_tm" 63004 [];
	in	tm'
	end
) | tm_of_z_tm (term as (ZTmQuotation (tm, Nil))) = (
		fail "tm_of_z_tm" 63001 [])
=TEX
=SML
and €list_tm_of_z_tm› ((tm::tml) : Z_TM list) : TERM list = (
	(tm_of_z_tm tm)::(list_tm_of_z_tm tml)
)
  | list_tm_of_z_tm [] = [];
=TEX
\subsection{Global Variable Capture}
=SML
fun €do_gvar_subst› (tm : TERM) : TERM = (
	subst (gvar_subst tm) tm
);
=TEX
\section{DEFINING TYPES INSERTED BY THE TYPE INFERRER}
=SML
fun €type_defn_of_z_extype› (ety as ExType(_, args) : EXTYPE) : unit = (
	gen_z_semantic_type ety;
	map type_defn_of_z_extype args;
	()
) | type_defn_of_z_extype _ = ();
=TEX
=SML
fun €do_types_to_define› (x : 'a) : 'a = (
	map type_defn_of_z_extype (get_types_to_define());
	x
);
=TEX
\section{INTERFACES}
=SML
val €term_of_z_dec› : Z_DEC -> TERM = do_gvar_subst o tm_of_z_dec o do_types_to_define;
val €list_term_of_z_dec› : Z_DEC list -> TERM = do_gvar_subst o list_tm_of_z_dec o do_types_to_define;
val €term_of_z_schtext› : Z_SCH_TEXT -> TERM * TERM OPT = (fn tm =>
	case tm_of_z_schtext tm of
		(t1, Nil) => (do_gvar_subst t1, Nil)
	|	(t1, Value t2) => (do_gvar_subst t1, Value(do_gvar_subst t2))
) o do_types_to_define;
val €term_of_z_tm› : Z_TM -> TERM = do_gvar_subst o tm_of_z_tm o do_types_to_define;
val €list_term_of_z_tm› : Z_TM list -> TERM list = map do_gvar_subst o list_tm_of_z_tm o do_types_to_define;
=TEX

\section{EPILOGUE}
=SML
end (* local ... in *);
end (* of structure ZTermGenerator *);
=TEX

\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}

