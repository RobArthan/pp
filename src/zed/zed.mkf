######################################################################
#
#	zed.mkf from $Id: zed.mkf,v 1.64 2014/06/01 16:20:56 rda Exp rda $
#
#	makefile for the ZED database for ProofPower
#
######################################################################

# suppress the automatic 'sccs get' rule
.SCCS_GET:

# suffixes known
.SUFFIXES: .db .doc .dvi .ldd .log .lot .pp .sh .tex .tch

# Control for RCS checking out: expand keywords to values only
# (needed for document dates)
COFLAGS=-kv

# default make target.  displays a list of more useful targets

default:
	@echo "The following are some of the more useful make commands:"
	@echo " "
	@echo "make -f zed.mkf inst           - builds and installs the zed files"
	@echo "make -f zed.mkf srcrel         - makes the zed source release"
	@echo "make -f zed.mkf src            - makes the Z source files"
	@echo "make -f zed.mkf bin            - makes binaries plus what is needed to use them"
	@echo "make -f zed.mkf doc            - makes Z documents "
	@echo "make -f zed.mkf test           - runs the tests"
	@echo "make -f zed.mkf testclean      - prepare to re-run the tests"
	@echo "make -f zed.mkf build          - builds the binaries in the current directory"
	@echo "make -f zed.mkf clean          - prepare to build again"
	@echo "make -f zed.mkf packinglist    - list the Z source file names"
	@echo " "
	@echo "Various environment variables influence the behaviour:"
	@echo " "
	@echo "    PPCOMPILER  - compiler to use (POLYML or SMLNJ)"
	@echo "    PPTARGETDIR - target installation directory"
	@echo "                  (../../bld if not set)"
	@echo "    PPVER       - product version"
	@echo "                  (taken from file version if not set)"
	@echo " "
	@echo "The makefile depends on the PPTex, PPDev and PPHol packages"

######################################################################
#
#	Makefile Definitions
#
######################################################################

export PPCHARSET=utf8
PRODNAME=PPZed
SHORTNAME=zed
PRODUCT=$(PRODNAME)-$(PPVER)
VERSION=$(shell echo $${PPVER:-`cat version  2>/dev/null || echo XXX.YYY.ZZZ`})
RELDIR=$(shell echo "$${PPTARGETDIR:-../../bld}")
CWD=$(shell pwd)
HAVERCS=$(shell (test -d RCS && echo y ) || echo n)

CACHE_SIZE=$(shell echo $${PPCACHESIZE:-50})

# Compiler specifics:
ifeq ($(PPCOMPILER), POLYML)
# Architecture type (used as a file-name suffix for images)
HEAP_SUFFIX=		polydb
# Command to run ML
RUNML="pp-ml"
MLDBPFX=""
# Command to garbage-collect the database
DBGC="pp-ml"
DBGCARG="-c"
else
ifeq ($(PPCOMPILER), SMLNJ)
# Architecture type (used as a file-name suffix for images by NJML)
HEAP_SUFFIX=		$(shell eval `.arch-n-opsys`; echo $$HEAP_SUFFIX)
# Command to run ML
RUNML="sml"
MLDBPFX="@SMLload="
# Command to garbage-collect the database
DBGC="echo"
DBGCARG="database garbage collection not needed with SML/NJ"
endif
endif
# Distinctive tag for binary distribution file
BINTAG=$(shell eval `arch-os`; echo $$ARCH-$$OS-$$PPCOMPILER | dd conv=lcase 2>/dev/null)

# database names
ZEDDBNAME=	zed
ZEDDB=		$(ZEDDBNAME).$(HEAP_SUFFIX)
ZEDDBLDD=	$(ZEDDBNAME).ldd
HOLDB=		hol.$(HEAP_SUFFIX)

ifeq ($(PPTESTMASTERDB), y)
TESTDB=		$(ZEDDB)
else
TESTDB=		zedchild.$(HEAP_SUFFIX)
endif

# Makefiles
ZEDMKF=		zed.mkf

# Detailed designs and Implementations
ZEDSMLDOCS =	dtd048.pp imp048.pp # Support for Z Abstract Machine
ZEDSMLDOCS +=	dtd047.pp imp047.pp # Z Abstract Machine
ZEDSMLDOCS +=	dtd079.pp imp079.pp # Support for Z U.I.
ZEDSMLDOCS +=	dtd064.pp imp064.pp # Z Pretty Printer
ZEDSMLDOCS +=	dtd060.pp imp060.pp # Z Lexical analyser
ZEDSMLDOCS +=	dtd061.pp imp061.pp # Z Parser
ZEDSMLDOCS +=	dtd062.pp imp062.pp # Z Type Checker
ZEDSMLDOCS +=	dtd052.pp imp052.pp # Z Primitive Constants
ZEDSMLDOCS +=	dtd050.pp imp050.pp # Z Generic Constants
ZEDSMLDOCS +=	dtd063.pp imp063.pp # Z Term generator
ZEDSMLDOCS +=	dtd049.pp imp049.pp # Z Paragraph Processor
ZEDSMLDOCS +=	dtd041.pp imp041.pp # Z Predicate Calculus
ZEDSMLDOCS +=	dtd042.pp imp042.pp # Z Language Expressions
ZEDSMLDOCS +=	dtd043.pp imp043.pp # Z Language Schema Calculus
ZEDSMLDOCS +=	dtd065.pp imp065.pp # Z theory lister
ZEDSMLDOCS +=	dtd078.pp imp078.pp # Z Library Sets
ZEDSMLDOCS +=	dtd083.pp imp083.pp # Z Library Relations
ZEDSMLDOCS +=	dtd085.pp imp085.pp # Z Library Functions
ZEDSMLDOCS +=	dtd086.pp imp086.pp # Z Library Numbers
ZEDSMLDOCS +=	dtd106.pp imp106.pp # Z Arithmetic Tools
ZEDSMLDOCS +=	dtd087.pp imp087.pp # Z Library Sequences
ZEDSMLDOCS +=	dtd088.pp imp088.pp # Z Library Bags
ZEDSMLDOCS +=	dtd107.pp imp107.pp # Z Library Finiteness and Sequences
ZEDSMLDOCS +=	dtd117.pp imp117.pp # Z Library Real Numbers

# Shell script for running the thing

SHELLSCRIPTS += zed

# Module tests
ZEDMDTDOCS =	mdt041.pp
ZEDMDTDOCS +=	mdt042.pp
ZEDMDTDOCS +=	mdt043.pp
ZEDMDTDOCS +=	mdt047.pp
ZEDMDTDOCS +=	mdt049.pp
ZEDMDTDOCS +=	mdt050.pp
ZEDMDTDOCS +=	mdt060.pp
ZEDMDTDOCS +=	mdt061.pp
ZEDMDTDOCS +=	mdt062.pp
ZEDMDTDOCS +=	mdt063.pp
ZEDMDTDOCS +=	mdt064.pp
ZEDMDTDOCS +=	mdt065.pp
ZEDMDTDOCS +=	mdt078.pp
ZEDMDTDOCS +=	mdt079.pp
ZEDMDTDOCS +=	mdt083.pp
ZEDMDTDOCS +=	mdt085.pp
ZEDMDTDOCS +=	mdt086.pp
ZEDMDTDOCS +=	mdt087.pp
ZEDMDTDOCS +=	mdt088.pp
ZEDMDTDOCS +=	mdt106.pp
ZEDMDTDOCS +=	mdt107.pp
ZEDMDTDOCS +=	mdt117.pp
ZEDMDTDOCS +=	int002.pp
ZEDMDTDOCS +=	int003.pp
ZEDMDTDOCS +=	int004.pp
ZEDMDTDOCS +=	wrk051_zed.pp

WRK051DOCS=usr011A.pp
WRK051DOCS+=usr011B.pp
WRK051DOCS+=usr011C.pp
WRK051DOCS+=usr011D.pp
WRK051DOCS+=usr011E.pp
WRK051DOCS+=usr011T.pp
WRK051DOCS+=usr011S.pp
WRK051DOCS+=usr011X.pp
WRK051DOCS+=usr023_slides.pp

# Variations on the documents
ZEDSMLFILES=	$(ZEDSMLDOCS:.pp=.sml)
ZEDLDDFILES=	$(ZEDSMLDOCS:.pp=.ldd)
ZEDMDTSMLS=	$(ZEDMDTDOCS:.pp=.sml)
ZEDMDTTTDS=	$(ZEDMDTDOCS:.pp=.ttd)

# Detailed Design and implementation of the IED test harness
IEDTESTDOCS=	dtd013.pp imp013.pp
IEDTESTSMLS=	$(IEDTESTDOCS:.pp=.sml)

# database initialisation commands

ZCACHECMD= "\
	open_theory \"fin_set\"; \
	new_theory \"z_language\"; \
	set_cache_theories [\"z_language\",\"hol\", \"basic_hol\"]; \
	save_and_quit (); "

ZEDBANNERCMD= "\
	open_theory \"z_library\"; \
	pp'set_banner (Value (\"ProofPower \"^system_version^\" [HOL/Z Database]\")); \
	save_and_quit (); "

ZSETTHEORIESCMD= "\
	open_theory \"z_language\"; \
	cached_labelled_product_rule $(CACHE_SIZE); \
	open_theory \"z_language_ps\"; \
	repeat pop_pc; \
	push_pc \"z_predicates\"; \
	save_and_quit ();"

# document files
DOCFILES += usr005.pp usr005A.pp usr005B.pp usr005C.pp usr005D.pp
DOCFILES += usr030.pp
DOCFILES += usr011.pp usr011S.pp usr011X.pp usr011A.pp usr011B.pp
DOCFILES += usr011C.pp usr011D.pp usr011E.pp usr011T.pp
DOCFILES += usr023.pp usr023_slides.pp
DOCFILES += usr024.pp
DOCFILES += wrk050.pp
DOCFILES += wrk051.pp

# release files
RELEASEDOCFILES += usr005.dvi
RELEASEDOCFILES += usr030.dvi
RELEASEDOCFILES += usr011.pp usr011A.pp usr011B.pp usr011C.pp usr011D.pp
RELEASEDOCFILES += usr011E.pp usr011T.pp usr011S.pp usr011X.pp usr011.dvi
RELEASEDOCFILES += usr023.pp usr023.dvi usr023S.pp usr023_slides.pp
RELEASEDOCFILES += wrk050.pp wrk050.dvi
RELEASEDOCFILES += wrk051.pp wrk051.dvi

# release scripts
RELEASESCRIPTS = install_zeddemo

DESCDOCS = def001A.pp
DESCDOCS += def001B.pp
DESCDOCS += def001C.pp
DESCDOCS += def001D.pp
DESCDOCS += def001E.pp
DESCDOCS += def007A.pp
DESCDOCS += def007.skw

# packing list for the source release (target src)
PACKINGLIST=
PACKINGLIST+= def001A.pp
PACKINGLIST+= def001B.pp
PACKINGLIST+= def001C.pp
PACKINGLIST+= def001D.pp
PACKINGLIST+= def001E.pp
PACKINGLIST+= def007.skw
PACKINGLIST+= def007A.pp
PACKINGLIST+= dtd001.pp
PACKINGLIST+= dtd002.pp
PACKINGLIST+= dtd003.pp
PACKINGLIST+= dtd004.pp
PACKINGLIST+= dtd006.pp
PACKINGLIST+= dtd007.pp
PACKINGLIST+= dtd008.pp
PACKINGLIST+= dtd009.pp
PACKINGLIST+= dtd010.pp
PACKINGLIST+= dtd012.pp
PACKINGLIST+= dtd013.pp
PACKINGLIST+= dtd015.pp
PACKINGLIST+= dtd020.pp
PACKINGLIST+= dtd025.pp
PACKINGLIST+= dtd026.pp
PACKINGLIST+= dtd027.pp
PACKINGLIST+= dtd028.pp
PACKINGLIST+= dtd029.pp
PACKINGLIST+= dtd030.pp
PACKINGLIST+= dtd033.pp
PACKINGLIST+= dtd035.pp
PACKINGLIST+= dtd036.pp
PACKINGLIST+= dtd041.pp
PACKINGLIST+= dtd042.pp
PACKINGLIST+= dtd043.pp
PACKINGLIST+= dtd047.pp
PACKINGLIST+= dtd048.pp
PACKINGLIST+= dtd049.pp
PACKINGLIST+= dtd050.pp
PACKINGLIST+= dtd051.pp
PACKINGLIST+= dtd052.pp
PACKINGLIST+= dtd060.pp
PACKINGLIST+= dtd061.pp
PACKINGLIST+= dtd062.pp
PACKINGLIST+= dtd063.pp
PACKINGLIST+= dtd064.pp
PACKINGLIST+= dtd065.pp
PACKINGLIST+= dtd067.pp
PACKINGLIST+= dtd076.pp
PACKINGLIST+= dtd078.pp
PACKINGLIST+= dtd079.pp
PACKINGLIST+= dtd081.pp
PACKINGLIST+= dtd083.pp
PACKINGLIST+= dtd084.pp
PACKINGLIST+= dtd085.pp
PACKINGLIST+= dtd086.pp
PACKINGLIST+= dtd087.pp
PACKINGLIST+= dtd088.pp
PACKINGLIST+= dtd099.pp
PACKINGLIST+= dtd100.pp
PACKINGLIST+= dtd103.pp
PACKINGLIST+= dtd106.pp
PACKINGLIST+= dtd107.pp
PACKINGLIST+= dtd108.pp
PACKINGLIST+= dtd110.pp
PACKINGLIST+= dtd117.pp
PACKINGLIST+= dtd121.pp
PACKINGLIST+= holutf8.svf
PACKINGLIST+= imp013.pp
PACKINGLIST+= imp018.pp
PACKINGLIST+= imp035.pp
PACKINGLIST+= imp041.pp
PACKINGLIST+= imp042.pp
PACKINGLIST+= imp043.pp
PACKINGLIST+= imp047.pp
PACKINGLIST+= imp048.pp
PACKINGLIST+= imp049.pp
PACKINGLIST+= imp050.pp
PACKINGLIST+= imp052.pp
PACKINGLIST+= imp054.pp
PACKINGLIST+= imp060.pp
PACKINGLIST+= imp061.pp
PACKINGLIST+= imp062.pp
PACKINGLIST+= imp063.pp
PACKINGLIST+= imp064.pp
PACKINGLIST+= imp065.pp
PACKINGLIST+= imp078.pp
PACKINGLIST+= imp079.pp
PACKINGLIST+= imp083.pp
PACKINGLIST+= imp085.pp
PACKINGLIST+= imp086.pp
PACKINGLIST+= imp087.pp
PACKINGLIST+= imp088.pp
PACKINGLIST+= imp106.pp
PACKINGLIST+= imp107.pp
PACKINGLIST+= imp113.pp
PACKINGLIST+= imp117.pp
PACKINGLIST+= install_zeddemo.sh
PACKINGLIST+= int002.pp
PACKINGLIST+= int003.pp
PACKINGLIST+= int004.pp
PACKINGLIST+= mdt041.pp
PACKINGLIST+= mdt042.pp
PACKINGLIST+= mdt043.pp
PACKINGLIST+= mdt047.pp
PACKINGLIST+= mdt049.pp
PACKINGLIST+= mdt050.pp
PACKINGLIST+= mdt060.pp
PACKINGLIST+= mdt061.pp
PACKINGLIST+= mdt062.pp
PACKINGLIST+= mdt063.pp
PACKINGLIST+= mdt064.pp
PACKINGLIST+= mdt065.pp
PACKINGLIST+= mdt078.pp
PACKINGLIST+= mdt079.pp
PACKINGLIST+= mdt083.pp
PACKINGLIST+= mdt085.pp
PACKINGLIST+= mdt086.pp
PACKINGLIST+= mdt087.pp
PACKINGLIST+= mdt088.pp
PACKINGLIST+= mdt106.pp
PACKINGLIST+= mdt107.pp
PACKINGLIST+= mdt117.pp
PACKINGLIST+= usr005.pp
PACKINGLIST+= usr005A.pp
PACKINGLIST+= usr005B.pp
PACKINGLIST+= usr005C.pp
PACKINGLIST+= usr005D.pp
PACKINGLIST+= usr011.pp
PACKINGLIST+= usr011A.pp
PACKINGLIST+= usr011B.pp
PACKINGLIST+= usr011C.pp
PACKINGLIST+= usr011D.pp
PACKINGLIST+= usr011E.pp
PACKINGLIST+= usr011S.pp
PACKINGLIST+= usr011T.pp
PACKINGLIST+= usr011X.pp
PACKINGLIST+= usr023.pp
PACKINGLIST+= usr023_slides.pp
PACKINGLIST+= usr023S.pp
PACKINGLIST+= usr024.pp
PACKINGLIST+= usr024_data.txt
PACKINGLIST+= usr030.pp
PACKINGLIST+= wrk050.pp
PACKINGLIST+= wrk051.pp
PACKINGLIST+= zed.mkf
PACKINGLIST+= mtreport.sh
PACKINGLIST+= zed.sh

# packing list for user source release
DISTPACKINGLIST=$(PACKINGLIST)

######################################################################
#
#	Rules for making the documents
#
######################################################################

usr024_data.tex: usr024_data.txt
	@sed	-e /PRODUCT/s#PRODUCT#$(PRODUCT)#g \
		-e "/DATETIME/s#DATETIME#`date +'%H:%M:%S %d/%m/%Y'`"#g \
		-e "/YEAR/s#YEAR#`date +'%Y'`"#g \
		<usr024_data.txt >usr024_data.tex


USR.sty: usr024.pp usr024.sml usr024_data.tex
	@LC_ALL=C LANG=C LANGUAGE=C sed -e 's/[ 	]%.*$$//' \
	-e 's/^[ 	][ 	]*//' \
	-e 's/[ 	][ 	]*$$//' usr024.sml > USR.sty
	
hol1.sty: imp054.pp imp054.sml
	@LC_ALL=C LANG=C LANGUAGE=C sed -e 's/[ 	]%.*$$//' \
	-e 's/^[ 	][ 	]*//' \
	-e 's/[ 	][ 	]*$$//' imp054.sml > hol1.sty

######################################################################
#	usr005 - Product description
######################################################################

USR005PPS = usr005.pp
USR005PPS += usr005A.pp
USR005PPS += usr005B.pp
USR005PPS += usr005C.pp
USR005PPS += usr005D.pp
USR005PPS += def001A.pp
USR005PPS += def001B.pp
USR005PPS += def001C.pp
USR005PPS += def001D.pp
USR005PPS += def001E.pp
USR005PPS += def007A.pp
USR005TEXS = $(USR005PPS:.pp=.tex)

usr005.dvi: hol1.sty USR.sty $(USR005PPS) $(USR005TEXS) usr024_data.tex
	texdvi -b usr005 > usr005.dvi.ldd1 </dev/null
	texdvi usr005 > usr005.dvi.ldd2 </dev/null
	texdvi usr005
usr005.dvi1: hol1.sty USR.sty $(USR005PPS) $(USR005TEXS)
	texdvi usr005

def007A.tex: def007A.pp def007.skw
	pptex -f holutf8.svf -k def007.skw def007A

######################################################################
#	usr030 - Reference manual
######################################################################

export LC_ALL=en_GB.UTF-8
export LANG=en_GB.UTF-8
export LANGUAGE=en_GB.UTF-8

SORT = pp_file_conv -u | awk -f 0.as1 | pp_file_conv | sort -f | pp_file_conv -u | awk -f 0.as2 | pp_file_conv
UNBOX = ( sed '/[ 	][ 	]*$$/s/[ 	]*$$//' \
	| sed -n '/^\=DOC/,/^\=ENDDOC/p' )

# The following list better be in order, or else consistency checks will fail
USR030DOCS = dtd001.pp
USR030DOCS += dtd002.pp
USR030DOCS += dtd003.pp
USR030DOCS += dtd004.pp
USR030DOCS += dtd006.pp
USR030DOCS += dtd007.pp
USR030DOCS += dtd008.pp
USR030DOCS += dtd009.pp
USR030DOCS += dtd010.pp
USR030DOCS += dtd012.pp
USR030DOCS += dtd015.pp
USR030DOCS += dtd020.pp
USR030DOCS += dtd025.pp
USR030DOCS += dtd026.pp
USR030DOCS += dtd027.pp
USR030DOCS += dtd028.pp
USR030DOCS += dtd029.pp
USR030DOCS += dtd030.pp
USR030DOCS += dtd033.pp
USR030DOCS += dtd036.pp
USR030DOCS += dtd041.pp
USR030DOCS += dtd042.pp
USR030DOCS += dtd043.pp
USR030DOCS += dtd047.pp
USR030DOCS += dtd051.pp
USR030DOCS += dtd065.pp
USR030DOCS += dtd067.pp
USR030DOCS += dtd076.pp
USR030DOCS += dtd078.pp
USR030DOCS += dtd081.pp
USR030DOCS += dtd083.pp
USR030DOCS += dtd084.pp
USR030DOCS += dtd085.pp
USR030DOCS += dtd086.pp
USR030DOCS += dtd087.pp
USR030DOCS += dtd088.pp
USR030DOCS += dtd099.pp
USR030DOCS += dtd100.pp
USR030DOCS += dtd103.pp
USR030DOCS += dtd106.pp
USR030DOCS += dtd107.pp
USR030DOCS += dtd108.pp
USR030DOCS += dtd110.pp
USR030DOCS += dtd117.pp
USR030DOCS += dtd121.pp
TEXFILES  = 3.tex 5.tex 6.tex 7.tex 8.tex 9a.tex
TEXFILES += 9b.tex 10.tex 12.tex 15.tex 16.tex
TEXFILES += 25.tex 30.tex 31.tex 32.tex 33.tex
TEXFILES += 34.tex 35.tex 36.tex 37.tex 38.tex
TEXFILES += 39.tex 40.tex 41.tex 43.tex 44.tex
TEXFILES += 45.tex 46.tex 47.tex 48.tex 49.tex
TEXFILES += 55.tex 56.tex 53.tex 54.tex 58.tex


GROUP1TEX = \
		1a.tex 1b.tex 1c.tex 1d.tex \
		1e.tex 1f.tex 1g.tex 1h.tex \
		1i.tex 1j.tex 1k.tex 1l.tex \
		1m.tex 1n.tex 1o.tex 1p.tex \
		1q.tex

GROUP1SCR = $(GROUP1TEX:.tex=.scr)

1%.tex: 1%.scr 0.as1 0.as2
	$(UNBOX)  < $< |${SORT} >1$*.pp
	pptex -f holutf8.svf 1$*
	rm -f 1$*.pp


$(GROUP1SCR): dtd001.pp 0.es1.A 0.es1.B
	@sed -n -e "`cat 0.es1.A`" dtd001.pp
	@sed -n -e "`cat 0.es1.B`" dtd001.pp

GROUP2SCR = 2a.scr 2b.scr

GROUP2TEX = $(GROUP2SCR:.scr=.tex)

2%.tex: 2%.scr 0.as1 0.as2
	$(UNBOX)  < $< |${SORT} >2$*.pp
	pptex -f holutf8.svf 2$*
	rm -f 2$*

$(GROUP2SCR): dtd002.pp 0.es2
	@sed -n -e "`cat 0.es2`" dtd002.pp

3.tex: 3.003 3.004 0.as1 0.as2
	cat 3.003 3.004 | ${SORT} > 3.pp
	pptex -f holutf8.svf 3
	rm -f 3.pp

3.00% : dtd00%.pp
	${UNBOX}  < $< >$@

GROUP4SCR = 4a.scr 4b.scr 4c.scr

GROUP4TEX = $(GROUP4SCR:.scr=.tex)

4a.scr : dtd006.pp 0.es3
	@sed -n -e "`cat 0.es3`" dtd006.pp

4a.tex: 4a.scr 0.as1 0.as2
	${UNBOX} <4a.scr | ${SORT} >4a.pp
	pptex -f holutf8.svf 4a
	rm -f 4a.pp

4b.tex:	dtd012.pp 0.as1 0.as2
	${UNBOX} <dtd012.pp | ${SORT} >4b.pp
	pptex -f holutf8.svf 4b
	rm -f 4b.pp

4c.tex:	dtd033.pp 0.as1 0.as2
	${UNBOX} <dtd033.pp | ${SORT} >4c.pp
	pptex -f holutf8.svf 4c
	rm -f 4c.pp

5.tex: 5.007 5.scr.026 5.027 0.as1 0.as2
	${UNBOX} <5.scr.026 >5.026
	cat 5.007 5.026 5.027 |${SORT} >5.pp
	pptex -f holutf8.svf 5
	rm -f 5.pp

5.0%: dtd0%.pp 0.as1 0.as2
	${UNBOX} < $< |${SORT} >$@

5.scr.026: dtd026.pp
	@sed -e '/section{Tactics}/,/section{BASIC REWRITES}/d' \
	dtd026.pp > 5.scr.026

6.tex: 6.009 6.028 6.029 6.scr.026 0.as1 0.as2
	${UNBOX} <6.scr.026 >6.026
	cat 6.009 6.028 6.029 6.026 |${SORT} >6.pp
	pptex -f holutf8.svf 6
	rm -f 6.pp

6.0%: dtd0%.pp 0.as1 0.as2
	${UNBOX} < $< |${SORT} >$@

6.scr.026: dtd026.pp
	@sed -e '/section{Tactics}/,/section{BASIC REWRITES}/!d' \
	dtd026.pp > 6.scr.026

7.tex: dtd030.pp 0.as1 0.as2
	${UNBOX} <dtd030.pp |${SORT} >7.pp
	pptex -f holutf8.svf 7
	rm -f 7.pp

8.tex: dtd008.pp 0.as1 0.as2
	${UNBOX} <dtd008.pp |${SORT} >8.pp
	pptex -f holutf8.svf 8
	rm -f 8.pp

9a.tex: dtd020.pp 0.as1 0.as2
	${UNBOX} <dtd020.pp|${SORT} >9a.pp
	pptex -f holutf8.svf 9a
	rm -f 9a.pp

9b.tex: dtd103.pp 0.as1 0.as2
	${UNBOX} <dtd103.pp|${SORT} >9b.pp
	pptex -f holutf8.svf 9b
	rm -f 9b.pp

10.tex: dtd051.pp 0.as1 0.as2
	${UNBOX} <dtd051.pp|${SORT} >10.pp
	pptex -f holutf8.svf 10
	rm -f 10.pp

12.tex: dtd036.pp 0.as1 0.as2
	${UNBOX} <dtd036.pp|${SORT} >12.pp
	pptex -f holutf8.svf 12
	rm -f 12.pp

15.pp: zed.thl.pp 0.15_sed
	@sed -f 0.15_sed zed.thl.pp > 15.pp

16.tex: dtd067.pp 0.as1 0.as2
	${UNBOX} <dtd067.pp|${SORT} >16.pp
	pptex -f holutf8.svf 16
	rm -f 16.pp

25.tex: dtd099.pp 0.as1 0.as2
	${UNBOX} <dtd099.pp|${SORT} >25.pp
	pptex -f holutf8.svf 25
	rm -f 25.pp

30.tex: dtd076.pp 0.as1 0.as2
	${UNBOX} <dtd076.pp|${SORT} >30.pp
	pptex -f holutf8.svf 30
	rm -f 30.pp

31.tex: dtd100.pp 0.as1 0.as2
	${UNBOX} <dtd100.pp|${SORT} >31.pp
	pptex -f holutf8.svf 31
	rm -f 31.pp

32.tex: dtd041.pp 0.as1 0.as2
	${UNBOX} <dtd041.pp|${SORT} >32.pp
	pptex -f holutf8.svf 32
	rm -f 32.pp

33.tex: dtd042.pp 0.as1 0.as2
	${UNBOX} <dtd042.pp|${SORT} >33.pp
	pptex -f holutf8.svf 33
	rm -f 33.pp

34.tex: dtd043.pp 0.as1 0.as2
	${UNBOX} <dtd043.pp|${SORT} >34.pp
	pptex -f holutf8.svf 34
	rm -f 34.pp

35.tex: dtd047.pp 0.as1 0.as2
	${UNBOX} <dtd047.pp|${SORT} >35.pp
	pptex -f holutf8.svf 35
	rm -f 35.pp

36.tex: dtd078.pp 0.as1 0.as2
	${UNBOX} <dtd078.pp|${SORT} >36.pp
	pptex -f holutf8.svf 36
	rm -f 36.pp

37.tex: dtd083.pp 0.as1 0.as2
	${UNBOX} <dtd083.pp|${SORT} >37.pp
	pptex -f holutf8.svf 37
	rm -f 37.pp

38.tex: dtd085.pp 0.as1 0.as2
	${UNBOX} <dtd085.pp|${SORT} >38.pp
	pptex -f holutf8.svf 38
	rm -f 38.pp

39.tex: dtd086.pp 0.as1 0.as2
	${UNBOX} <dtd086.pp|${SORT} >39.pp
	pptex -f holutf8.svf 39
	rm -f 39.pp

40.tex: dtd087.pp 0.as1 0.as2
	${UNBOX} <dtd087.pp|${SORT} >40.pp
	pptex -f holutf8.svf 40
	rm -f 40.pp

41.tex: dtd088.pp 0.as1 0.as2
	${UNBOX} <dtd088.pp|${SORT} >41.pp
	pptex -f holutf8.svf 41
	rm -f 41.pp

43.tex: dtd084.pp 0.as1 0.as2
	${UNBOX} <dtd084.pp|${SORT} >43.pp
	pptex -f holutf8.svf 43
	rm -f 43.pp

44.tex: dtd081.pp 0.as1 0.as2
	${UNBOX} <dtd081.pp|${SORT} >44.pp
	pptex -f holutf8.svf 44
	rm -f 44.pp

45.tex: dtd025.pp 0.as1 0.as2
	${UNBOX} <dtd025.pp|${SORT} >45.pp
	pptex -f holutf8.svf 45
	rm -f 45.pp

46.tex: dtd010.pp 0.as1 0.as2
	${UNBOX} <dtd010.pp|${SORT} >46.pp
	pptex -f holutf8.svf 46
	rm -f 46.pp

47.tex: dtd110.pp 0.as1 0.as2
	${UNBOX} <dtd110.pp|${SORT} >47.pp
	pptex -f holutf8.svf 47
	rm -f 47.pp

48.tex: dtd015.pp 0.as1 0.as2
	${UNBOX} <dtd015.pp|${SORT} >48.pp
	pptex -f holutf8.svf 48
	rm -f 48.pp

49.tex: dtd065.pp 0.as1 0.as2
	${UNBOX} <dtd065.pp|${SORT} >49.pp
	pptex -f holutf8.svf 49
	rm -f 49.pp

55.tex: dtd117.pp 0.as1 0.as2
	${UNBOX} <dtd117.pp|${SORT} >55.pp
	pptex -f holutf8.svf 55

56.tex: dtd106.pp 0.as1 0.as2
	${UNBOX} <dtd106.pp|${SORT} >56.pp
	pptex -f holutf8.svf 56
	rm -f 56.pp

53.tex: dtd107.pp 0.as1 0.as2
	${UNBOX} <dtd107.pp|${SORT} >53.pp
	pptex -f holutf8.svf 53
	rm -f 53.pp

54.tex: dtd108.pp 0.as1 0.as2
	sed -e "/section{Compiler/,/section{String/d" dtd108.pp | \
	${UNBOX} |${SORT} >54.pp
	pptex -f holutf8.svf 54
	rm -f 54.pp

58.tex: dtd121.pp 0.as1 0.as2 holutf8.svf
	${UNBOX} <dtd121.pp|${SORT} >58.pp
	pptex -f holutf8.svf 58
	rm -f 58.pp

################
#
#  Scripts for massaging index entries etc.
#
################

0.15_sed 0.idx_sed1 0.trim_sed 0.ptx_sed1 0.ptx_sed2 0.ptx_sed3 0.ptx_sed4 0.asa 0.es1.A 0.es1.B 0.as1 0.as2 0.es2 0.es3 0.fgrep 0idx_begin.pp 0idx_end.pp: imp113.pp
	ppsml -f holutf8.svf imp113

################

0_idx_raw: $(USR030DOCS) 0.fgrep 15.pp
	@grep `cat 0.fgrep` $(USR030DOCS) 15.pp > 0_idx_raw
	
0_idx_all: 0_idx_raw 0.idx_sed1
	@sed -e "`cat 0.idx_sed1`" 0_idx_raw | sort -u | nl -ba -nrz > 0_idx_all

0idx.pp : 0idx_begin.pp 0_idx_all 0idx_end.pp
	@echo "% 0idx.pp" > 0idx.pp
	@echo "=TEX" >> 0idx.pp
	cat 0idx_begin.pp >> 0idx.pp
	@echo "=SML" >> 0idx.pp
	cat 0_idx_all >> 0idx.pp
	@echo "=TEX" >> 0idx.pp
	cat 0idx_end.pp >> 0idx.pp

0idx.idx : 0idx.pp
	pptex -f holutf8.svf 0idx
	texdvi 0idx
	rm -f 0idx.aux 0idx.dvi 0idx.tex 0idx.log 0idx.sid

0_idx_trimmed : 0idx.idx 0.trim_sed
	@sed -e 's/^\\indexentry{\(.*\)}{[0-9]*}$$/\1/' \
		-f 0.trim_sed \
		0idx.idx \
	| nl -ba -nrz \
	> 0_idx_trimmed

0_idx_keyword : 0_idx_trimmed 0_idx_all
	join -o "1.2 2.2" '-t	' 0_idx_trimmed 0_idx_all \
	| sort -u \
	> 0_idx_keyword

030_entries : usr030.idx 0.trim_sed
	@sed	-e 's/^\\indexentry{\(.*\)}{ *\([0-9]*\)}$$/\1	\2/' \
		-f 0.trim_sed \
		usr030.idx \
	| sort -u \
	> 030_entries

0_kwic_source : 0_idx_keyword 030_entries
	join -o "1.2 2.2" '-t	' 030_entries 0_idx_keyword | sort -u > 0_kwic_source

0kwic.pp : 0_kwic_source 0.ptx_sed1 0.asa 0.ptx_sed2 0kwic.warn 0.ptx_sed3 0.ptx_sed4
	@echo =TEX > 0kwic.pp
	@sed -e "`cat 0.ptx_sed1`"  0_kwic_source \
	| awk -f 0.asa \
	| sed -f 0.ptx_sed2 \
	| sort -u \
	| sed -f 0.ptx_sed3 \
	| sort -f \
	| sed -f 0.ptx_sed4 \
	>> 0kwic.pp

0kwic.tex : 0kwic.pp
	pptex -f holutf8.svf 0kwic
0kwic.warn : 0_idx_keyword1c 030_entries1c usr030.idx
	@echo 'Index status' > 0kwic.warn
	@echo '' >> 0kwic.warn
	@echo `wc -l < usr030.idx`' Index entry requests in usr030.idx.' >> 0kwic.warn
	@echo '' >> 0kwic.warn
	@echo `wc -l < 030_entries1c`' Distinct index entries in usr030.idx.' >> 0kwic.warn
	@echo ' ' >> 0kwic.warn
	@comm -12 0_idx_keyword1c 030_entries1c > 0kwic.matched
	@echo `wc -l < 0kwic.matched`' Entries matched' >> 0kwic.warn
	@echo '' >> 0kwic.warn
	@comm -23 0_idx_keyword1c 030_entries1c > 0kwic.unnecessary
	@echo `wc -l < 0kwic.unnecessary`' Unnecessary entries from "0_idx_keyword1c".' >> 0kwic.warn
	@echo '		These entries are indexed in the DTD documents,' >> 0kwic.warn
	@echo '		but are not needed in usr030.' >> 0kwic.warn
	echo '' >> 0kwic.warn
	@comm -13 0_idx_keyword1c 030_entries1c > 0kwic.warn_030_lost
	@echo `wc -l < 0kwic.warn_030_lost`' Index entries lost from usr030.idx.' >> 0kwic.warn
	@echo '		This count should, ideally, be zero.  It indicates' >> 0kwic.warn
	@echo '		index entry requests in usr030 that have not been' >> 0kwic.warn
	@echo '		satisfied by the index entry creation mechanisms.' >> 0kwic.warn
	@echo '		File \"0kwic.warn_030_lost\" gives the lost entries.' >> 0kwic.warn
	@echo ''
	@fmt -c < 0kwic.warn | sed -e '/^$$/d'
	@echo ''
	
0_idx_keyword1c : 0_idx_keyword
	@sed -e 's/	.*$$//' 0_idx_keyword  | sort -u > 0_idx_keyword1c

030_entries1c : 030_entries
	@sed -e 's/	.*$$//' 030_entries  | sort -u > 030_entries1c


usr030.dvi1  : hol1.sty USR.sty usr030.pp 0kwic.tex \
		$(GROUP1TEX:+=) 1a.scr \
		$(GROUP2TEX:+=) $(GROUP4TEX:+=) \
		$(TEXFILES) usr024_data.tex
	pptex -f holutf8.svf usr030
	if egrep "\\cite" [0-9]*.tex> 0cite.temp ; \
	then \
		echo Warning: unexpected citations found > 0cite.warn ; \
		cat 0cite.temp >> 0cite.warn ; \
	fi
	rm -f 0cite.temp
	rm -f usr030.dvi usr030.log
	texdvi -b usr030 > usr030.dvi.ldd0 </dev/null
	$(MAKE) -f $(ZEDMKF) 0kwic.tex
	@touch 0cite.warn
	@cat 0cite.warn

usr030.log usr030.dvi: usr030.dvi1
	@rm -f 0cite.warn
	texdvi usr030  > usr030.dvi.ldd1 </dev/null
	@rm -f usr030.dvi
	$(MAKE) -f $(ZEDMKF) 0kwic.tex
	texdvi usr030 > usr030.dvi.ldd2 </dev/null
	@rm -f usr030.dvi
	$(MAKE) -f $(ZEDMKF) 0kwic.tex
	texdvi usr030
	$(MAKE) -f $(ZEDMKF) 0kwic.tex
	touch 0cite.warn
	cat 0cite.warn

usr030.idx :
	touch usr030.idx

######################################################################
#	usr011 - Z tutorial
######################################################################

USR011DOCS  = usr011.pp
USR011DOCS += usr011A.pp
USR011DOCS += usr011B.pp
USR011DOCS += usr011C.pp
USR011DOCS += usr011D.pp
USR011DOCS += usr011E.pp
USR011DOCS += usr011T.pp
USR011DOCS += usr011X.pp
USR011DOCS += usr011S.pp

USR011TEXS = $(USR011DOCS:.pp=.tex)
	
#usr011.dvi1: hol1.sty USR.sty $(USR011DOCS) $(USR011TEXS)
#	texdvi usr011

usr011.dvi: hol1.sty USR.sty $(USR011DOCS) $(USR011TEXS) usr024_data.tex
	texdvi -b usr011 > usr011.dvi.ldd1 </dev/null
	texdvi usr011 > usr011.dvi.ldd2 </dev/null
	texdvi usr011
usr011.th: $(ZTUTDB) usr011A.pp usr011B.pp usr011C.pp usr011D.pp\
			usr011A.sml usr011B.sml usr011C.sml usr011D.sml
	pp -d $(ZTUTDB) -i force_delete_usr011.sml -i usr011A.sml \
			-i usr011B.sml -i usr011C.sml -i usr011D.sml \
			< save_and_quit.sml
	touch usr011.th
usr011.zexercises: usr011.th usr011X.pp usr011S.pp \
			usr011X.sml usr011S.sml
	pp -d $(ZTUTDB) -i force_delete_zexercises.sml \
		-i usr011X.sml < save_and_quit.sml
	touch usr011.zexercises
usr011.solutions: usr011.zexercises usr011S.pp usr011X.sml usr011S.sml
	pp -d $(ZTUTDB) -i usr011S.sml < save_and_quit.sml
	touch usr011.solutions


######################################################################
#	usr023 - ZED Tutorial slides
######################################################################

usr023.dvi: usr023.pp usr023_slides.pp usr023.tex usr023_slides.tex usr024_data.tex
	latex usr023
	latex usr023
	latex usr023

usr023.th: $(ZTUTDB) usr023_slides.pp usr023_slides.sml
	pp -d $(ZTUTDB) -i force_delete_usr023.sml \
	        -i usr023_slides < save_and_quit.sml
	touch usr023.th


######################################################################
#	wrk050 - Methods and tools for verification of criticial properties
######################################################################

wrk050.dvi: wrk050.pp
	pptex -f holutf8.svf wrk050
	texdvi -b wrk050 > wrk050.dvi.ldd1 </dev/null
	texdvi wrk050 > wrk050.dvi.ldd2 </dev/null
	texdvi wrk050

wrk050.th: $(ZTUTDB) wrk050.pp wrk050.sml
	pp -d $(ZTUTDB) -i force_delete_wrk050.sml \
	        -i wrk050.sml < save_and_quit.sml
	touch wrk050.th

######################################################################
#	wrk051
######################################################################

wrk051.dvi: wrk051.pp
	pptex -f holutf8.svf wrk051
	texdvi -b wrk051  > wrk051.dvi.ldd1 </dev/null
	texdvi wrk051 > wrk051.dvi.ldd2 </dev/null
	texdvi wrk051

######################################################################
#	 Theory Listing
######################################################################

all.theories:
	pp_list -d $(ZEDDB) > all.theories

hol.theories:
	pp_list -d hol > hol.theories

zed.theories: all.theories hol.theories
	comm -23 all.theories hol.theories > zed.theories

zed.thl.pp: zed.theories
	pp_list -d $(ZEDDB) `cat zed.theories` > zed.thl.pp

######################################################################
#
# Dependencies - determining the order of compilation
#
######################################################################
imp048.ldd: dtd048.ldd
imp047.ldd: dtd047.ldd
imp079.ldd: dtd079.ldd
imp064.ldd: dtd064.ldd imp060.ldd
imp060.ldd: dtd060.ldd imp047.ldd
imp061.ldd: dtd061.ldd imp047.ldd
imp062.ldd: dtd062.ldd
imp052.ldd: dtd052.ldd
imp050.ldd: dtd050.ldd
imp063.ldd: dtd063.ldd
imp049.ldd: dtd049.ldd
imp041.ldd: dtd041.ldd
imp042.ldd: dtd042.ldd
imp043.ldd: dtd043.ldd
imp065.ldd: dtd065.ldd
imp078.ldd: dtd078.ldd
imp083.ldd: dtd083.ldd
imp085.ldd: dtd085.ldd
imp086.ldd: dtd086.ldd
imp106.ldd: dtd106.ldd
imp087.ldd: dtd087.ldd
imp088.ldd: dtd088.ldd
imp107.ldd: dtd107.ldd
imp117.ldd: dtd117.ldd

dtd048.ldd: $(ZEDDBLDD)
dtd060.ldd: $(ZEDDBLDD)
dtd047.ldd: imp048.ldd
dtd079.ldd: imp047.ldd
dtd064.ldd: imp079.ldd
dtd061.ldd: imp060.ldd imp064.ldd
dtd062.ldd: imp061.ldd
dtd052.ldd: imp062.ldd
dtd050.ldd: imp052.ldd
dtd063.ldd: imp050.ldd
dtd049.ldd: imp063.ldd
dtd041.ldd: imp049.ldd
dtd042.ldd: imp041.ldd
dtd043.ldd: imp042.ldd
dtd065.ldd: imp043.ldd
dtd078.ldd: imp065.ldd
dtd083.ldd: imp078.ldd
dtd085.ldd: imp083.ldd
dtd086.ldd: imp085.ldd
dtd106.ldd: imp086.ldd
dtd087.ldd: imp106.ldd
dtd088.ldd: imp087.ldd
dtd107.ldd: imp088.ldd
dtd117.ldd: imp086.ldd

dtd061.sml dtd061.grm.sml: dtd061.pp holutf8.svf
	ppsml -f holutf8.svf dtd061

imp061.sml: imp061.pp imp018.sml dtd061.grm.sml holutf8.svf
	ppsml -f holutf8.svf imp061

mdt035.ttd: dtd035.sml imp035.sml

mdt042.ttd: mdt042.sml dtd042.tch $(IEDTESTSMLS)
mdt078.ttd: mdt078.sml dtd078.tch $(IEDTESTSMLS)
mdt083.ttd: mdt083.sml dtd083.tch $(IEDTESTSMLS)
mdt085.ttd: mdt085.sml dtd085.tch $(IEDTESTSMLS)
mdt086.ttd: mdt086.sml dtd086.tch $(IEDTESTSMLS)
mdt087.ttd: mdt087.sml dtd087.tch $(IEDTESTSMLS)
mdt088.ttd: mdt088.sml dtd088.tch $(IEDTESTSMLS)
mdt106.ttd: mdt106.sml dtd106.tch $(IEDTESTSMLS)
mdt107.ttd: mdt107.sml dtd107.tch $(IEDTESTSMLS)
mdt117.ttd: mdt117.sml dtd117.tch $(IEDTESTSMLS)

######################################################################
#
#	Building the ZED database
#
######################################################################

allsmls: $(ZEDSMLFILES)

zedldds: $(ZEDDBLDD) $(ZEDLDDFILES)
	@rm -f zedbuilt.ldd

zedbuilt.ldd: $(ZEDDBLDD) $(ZEDLDDFILES)
	@rm -f zedbuilt.ldd
	$(DBGC) $(DBGCARG) $(ZEDDB)
	echo $(ZSETTHEORIESCMD) | \
		PPDATABASENAME=zed $(RUNML) $(MLDBPFX)$(ZEDDB) > zcache.ldd
	$(DBGC) $(DBGCARG) $(ZEDDB) > zedtheories.discgarb.ldd
	echo $(ZEDBANNERCMD) | \
		PPDATABASENAME=zed $(RUNML) $(MLDBPFX)$(ZEDDB)
	grep '+++ Compiled' $(ZEDLDDFILES)
	touch zedbuilt.ldd
	echo Done.

$(ZEDDB) $(ZEDDBLDD):
		rm -f $(ZEDDB)
		cp "`findfile $(HOLDB) "$(PPDATABASEPATH)"`" $(ZEDDB)
		chmod u+wr $(ZEDDB)
		echo "PPBuild.pp'save_name := \"$(ZEDDBNAME)\"; save_and_quit();" | pp -d $(ZEDDB)
		echo $(ZCACHECMD) | \
			PPDATABASENAME=zed $(RUNML) $(MLDBPFX)$(ZEDDB)
		@touch $(ZEDDBLDD)

######################################################################
#
#	Testing the ZED database
#
######################################################################

wrk051.mkf: wrk051.pp holutf8.svf
	ppsml -f holutf8.svf wrk051

wrk051_zed.pp: wrk051.pp
	cat wrk051.pp >wrk051_zed.pp

ifeq ($(PPTESTMASTERDB), y)
wrk051_zed.ttd:
	@echo Demonstration scripts are not tested when PPTESTMASTERDB=y
	@echo All module tests passed. > wrk051_zed.ttd
	@echo Warning: no module tests run. >> wrk051_zed.ttd
else
$(TESTDB):	$(ZEDDB)
		cat $(ZEDDB) >zedparent.$(HEAP_SUFFIX)
		pp_make_database -f -p zedparent zedchild

wrk051_zed.ttd: wrk051_zed.sml usr023S.sml $(TESTDB) $(WRK051DOCS)
	rm -f wrk051_zed.flag
	PPZEDPARENT=zedparent make -f wrk051.mkf all_zed > wrk051_zed.ttd
endif

test: $(ZEDDBLDD) $(ZEDMDTTTDS) mtreport
	@-grep 'module' $(ZEDMDTTTDS)
	@-grep 'abandoning file|+++ Compiled.*Failed' $(ZEDMDTTTDS) || true
	mtreport $(ZEDMDTTTDS)

testclean: wrk051.mkf
	make -f wrk051.mkf clean_examples
	rm -f $(ZEDMDTSMLS) $(ZEDMDTTTDS)
	rm -f $(IEDTESTSMLS) 
	rm -f wrk051_zed* usr011.tutorial usr011.zexercises wrk051.mkf

retest: testclean test
	

######################################################################
#
#	Constructing release directories
#
######################################################################

reldir:
	if [ "$${PPTARGETDIR:-}" = "" ]; \
	then \
		rm -rf "$(RELDIR)"; \
	fi
	[ -d   "$(RELDIR)" ] || mkdir "$(RELDIR)"
	
bindir:	reldir
	[ -d   "$(RELDIR)"/bin ] || mkdir "$(RELDIR)"/bin
	
dbdir:	reldir
	[ -d   "$(RELDIR)"/db ] || mkdir "$(RELDIR)"/db

docdir:	reldir
	[ -d   "$(RELDIR)"/doc ] || mkdir "$(RELDIR)"/doc

srcdir:	reldir
	[ -d   "$(RELDIR)"/src ] || mkdir "$(RELDIR)"/src

binrel: bindir $(SHELLSCRIPTS)
	cp $(SHELLSCRIPTS) "$(RELDIR)"/bin
	chmod -R a-w "$(RELDIR)"
	chmod -R g-w "$(RELDIR)"
	chmod -R u+w "$(RELDIR)"

dbrel: dbdir zedbuilt.ldd $(SHELLSCRIPTS)
	cp zed.$(HEAP_SUFFIX) "$(RELDIR)"/db
	chmod -R a-w "$(RELDIR)"
	chmod -R g-w "$(RELDIR)"
	chmod -R u+w "$(RELDIR)"

build: zedbuilt.ldd $(SHELLSCRIPTS)

docrel: docdir  $(RELEASEDOCFILES) $(RELEASESCRIPTS)
	cp $(RELEASEDOCFILES) "$(RELDIR)"/doc
	cp $(RELEASESCRIPTS) "$(RELDIR)"
	chmod -R a-w "$(RELDIR)"
	chmod -R g-w "$(RELDIR)"
	chmod -R u+w "$(RELDIR)"

bin:	binrel
	cd "$(RELDIR)" && tar cvf "$(CWD)"/$(PRODUCT).bin.tar ./*
	cd "$(CWD)" && gzip $(PRODUCT).bin.tar && \
	mv $(PRODUCT).bin.tar.gz $(PRODUCT).$(BINTAG).bin.tgz

doc:	docrel
	cd "$(RELDIR)" && tar cvf "$(CWD)"/$(PRODUCT).pp.tar ./*
	cd "$(CWD)" && gzip $(PRODUCT).pp.tar && \
	mv $(PRODUCT).pp.tar.gz $(PRODUCT).pp.tgz

bininst:	binrel dbrel

inst:	bininst docrel

# useful target to print out the names of all the source file names
packinglist:
	@echo $(PACKINGLIST)

######################################################################
#
#	Tidying Up
#
######################################################################

clean: testclean
	rm -f $(ZEDSMLFILES) $(ZEDLDDFILES) $(SHELLSCRIPTS)
	rm -f *.aux *.bbl *.blg *.idx *.log *.lot *.sid *.sml *.tex *.toc *.ldd
	rm -f [0-9]* zed.thl.pp $(ZEDDB) $(ZEDDBLDD) zed zed.theories
	rm -f *.dvi *.dvi.* hol hol_common hol.theories install_zeddemo *.tch
	rm -f pp pp_list pp_make_database all.theories hol1.sty
	rm -f *.grm.run *.grm.txt USR.sty
	rm -f *.th mtreport *.polydb zed_course* *.thy.pp

######################################################################
#
#	Generic Rules
#
######################################################################

%.ldd: %.sml
	@rm -f $@ $*.err 2>/dev/null
	@echo "Compiling (code)" $<
	@pp -d $(ZEDDB) -f $< >$*.err
	@mv $*.err $@

%.ttd: %.sml $(IEDTESTSMLS) $(TESTDB)
	@rm -f $@ $.err 2>/dev/null
	@echo "Compiling (test)" $<
	@echo "use_file \"$<\"; quit();" | \
		PPDATABASENAME=zed $(RUNML) $(MLDBPFX)$(TESTDB) > $*.err
	@mv $*.err $@

#%.ppsml: %.pp holutf8.svf
#	ppsml -f holutf8.svf $*
#	mv $*.sml $*.ppsml

%.sml: %.pp holutf8.svf
	@ppsml -f holutf8.svf $*

#%.pptex: %.pp
#	pptex $*
#	mv $*.tex $*.pptex

%.tex: %.pp
	pptex -f holutf8.svf $*

%.dvi: %.tex
	texdvi -b $* >/dev/null </dev/null
	texdvi $* >/dev/null </dev/null
	texdvi $*

#%.pptch: %.pp  dtd035.sml imp035.sml
#	doctch $*
#	mv $*.tch $*.pptch

%.tch: %.pp holutf8.svf dtd035.sml imp035.sml
	pptch -f holutf8.svf $*

ZEDALLSMLFILES=$(ZEDSMLFILES) $(ZEDMDTSMLFILES)
ZEDPPFILES=$(ZEDALLSMLFILES:.sml=.pp)
ZEDDOCSMLFILES=$(ZEDSMLFILES:.sml=.ppsml)
ZEDDIFFFILES=$(ZEDSMLFILES:.sml=.diff)

$(ZEDDIFFFILES): %.diff: %.ppsml %.sml
		 diff $*.ppsml $*.sml >$*.diff

diffs: $(ZEDDIFFFILES)
