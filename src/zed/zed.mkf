######################################################################
#
#	zed.mkf from %Z% $Date: 2000/08/01 16:16:11 $ $Revision: 1.5 $ $RCSfile: zed.mkf,v $
#
#	makefile for the ZED database for ProofPower
#
######################################################################

# suppress the automatic 'sccs get' rule
.SCCS_GET:

# suffixes known
.SUFFIXES: .db .doc .dvi .ldd .log .lot .sh .doc .tex .tch

# default make target.  displays a list of more useful targets
PRODNAME=PPZed
default:
	@echo "The following are some of the more useful make commands:"
	@echo " "
	@echo "make -f zed.mkf rel                   - makes the release directory"
	@echo "make -f zed.mkf tgz                   - makes the distribution"
	@echo "make -f zed.mkf zed_test              - runs the tests"

######################################################################
#
#	Makefile Definitions
#
######################################################################

PRODUCT=$(PRODNAME)$(PPVER)
CWD=$(shell pwd)

# Architecture type (used as file-name suffix for images by NJML)
HEAP_SUFFIX=		$(shell eval `.arch-n-opsys`; echo $$HEAP_SUFFIX)

# database names
ZEDDBNAME=	zed
HOLDB=		hol.$(HEAP_SUFFIX)
ZEDDB=		$(ZEDDBNAME).$(HEAP_SUFFIX)
ZEDDBLDD=	$(ZEDDBNAME).ldd

# Makefiles
ZEDMKF=		zed.mkf

# Detailed designs and Implementations
ZEDSMLDOCS =	dtd048.doc imp048.doc # Support for Z Abstract Machine
ZEDSMLDOCS +=	dtd047.doc imp047.doc # Z Abstract Machine
ZEDSMLDOCS +=	dtd079.doc imp079.doc # Support for Z U.I.
ZEDSMLDOCS +=	dtd064.doc imp064.doc # Z Pretty Printer
ZEDSMLDOCS +=	dtd060.doc imp060.doc # Z Lexical analyser
ZEDSMLDOCS +=	dtd061.doc imp061.doc # Z Parser
ZEDSMLDOCS +=	dtd062.doc imp062.doc # Z Type Checker
ZEDSMLDOCS +=	dtd052.doc imp052.doc # Z Primitive Constants
ZEDSMLDOCS +=	dtd050.doc imp050.doc # Z Generic Constants
ZEDSMLDOCS +=	dtd063.doc imp063.doc # Z Term generator
ZEDSMLDOCS +=	dtd049.doc imp049.doc # Z Paragraph Processor
ZEDSMLDOCS +=	dtd041.doc imp041.doc # Z Predicate Calculus
ZEDSMLDOCS +=	dtd042.doc imp042.doc # Z Language Expressions
ZEDSMLDOCS +=	dtd043.doc imp043.doc # Z Language Schema Calculus
ZEDSMLDOCS +=	dtd065.doc imp065.doc # Z theory lister
ZEDSMLDOCS +=	dtd078.doc imp078.doc # Z Library Sets
ZEDSMLDOCS +=	dtd083.doc imp083.doc # Z Library Relations
ZEDSMLDOCS +=	dtd085.doc imp085.doc # Z Library Functions
ZEDSMLDOCS +=	dtd086.doc imp086.doc # Z Library Numbers
ZEDSMLDOCS +=	dtd106.doc imp106.doc # Z Arithmetic Tools
ZEDSMLDOCS +=	dtd087.doc imp087.doc # Z Library Sequences
ZEDSMLDOCS +=	dtd088.doc imp088.doc # Z Library Bags
ZEDSMLDOCS +=	dtd107.doc imp107.doc # Z Library Finiteness and Sequences

# Shell scripts for running the thing

SHELLSCRIPTS += zed
SHELLSCRIPTS += zed_list

# Module tests
ZEDMDTDOCS =	mdt041.doc
ZEDMDTDOCS +=	mdt042.doc
ZEDMDTDOCS +=	mdt043.doc
ZEDMDTDOCS +=	mdt047.doc
ZEDMDTDOCS +=	mdt049.doc
ZEDMDTDOCS +=	mdt050.doc
ZEDMDTDOCS +=	mdt060.doc
ZEDMDTDOCS +=	mdt061.doc
ZEDMDTDOCS +=	mdt062.doc
ZEDMDTDOCS +=	mdt063.doc
ZEDMDTDOCS +=	mdt064.doc
ZEDMDTDOCS +=	mdt065.doc
ZEDMDTDOCS +=	mdt078.doc
ZEDMDTDOCS +=	mdt079.doc
ZEDMDTDOCS +=	mdt083.doc
ZEDMDTDOCS +=	mdt085.doc
ZEDMDTDOCS +=	mdt086.doc
ZEDMDTDOCS +=	mdt087.doc
ZEDMDTDOCS +=	mdt088.doc
ZEDMDTDOCS +=	mdt106.doc
ZEDMDTDOCS +=	mdt107.doc
ZEDMDTDOCS +=	int002.doc
ZEDMDTDOCS +=	int003.doc


# Variations on the documents
ZEDSMLFILES=	$(ZEDSMLDOCS:.doc=.sml)
ZEDLDDFILES=	$(ZEDSMLDOCS:.doc=.ldd)
ZEDMDTSMLS=	$(ZEDMDTDOCS:.doc=.sml)
ZEDMDTTTDS=	$(ZEDMDTDOCS:.doc=.ttd)

# Detailed Design and implementation of the IED test harness
IEDTESTDOCS=	dtd013.doc imp013.doc
IEDTESTSMLS=	$(IEDTESTDOCS:.doc=.sml)

# Testing tools

TESTTOOLS=	doctch \
		doctds

# Flags for ML compiler.  Currently none
MLFLAGS=

# database initialisation commands

CACHE_SIZE=	50

ZCACHECMD= "\
	open_theory \"fin_set\"; \
	new_theory \"z_language\"; \
	set_cache_theories [\"z_language\",\"hol\", \"basic_hol\"]; \
	save_and_quit (); "

ZEDBANNERCMD= "\
	icl'set_banner (Value (\"ProofPower \"^system_version^\" [HOL/Z Database]\")); \
	save_and_quit (); "

ZSETTHEORIESCMD= "\
	open_theory \"z_language\"; \
	cached_labelled_product_rule $(CACHE_SIZE); \
	open_theory \"z_language_ps\"; \
	repeat pop_pc; \
	push_pc \"z_predicates\"; \
	save_and_quit ();"

######################################################################
#
# Dependencies - determining the order of compilation
#
######################################################################
imp048.ldd: dtd048.ldd
imp047.ldd: dtd047.ldd
imp079.ldd: dtd079.ldd
imp064.ldd: dtd064.ldd
imp060.ldd: dtd060.ldd
imp061.ldd: dtd061.ldd
imp062.ldd: dtd062.ldd
imp052.ldd: dtd052.ldd
imp050.ldd: dtd050.ldd
imp063.ldd: dtd063.ldd
imp049.ldd: dtd049.ldd
imp041.ldd: dtd041.ldd
imp042.ldd: dtd042.ldd
imp043.ldd: dtd043.ldd
imp065.ldd: dtd065.ldd
imp078.ldd: dtd078.ldd
imp083.ldd: dtd083.ldd
imp085.ldd: dtd085.ldd
imp086.ldd: dtd086.ldd
imp106.ldd: dtd106.ldd
imp087.ldd: dtd087.ldd
imp088.ldd: dtd088.ldd
imp107.ldd: dtd107.ldd

dtd048.ldd: $(ZEDDBLDD)
dtd047.ldd: imp048.ldd
dtd079.ldd: imp047.ldd
dtd064.ldd: imp079.ldd
dtd060.ldd: imp064.ldd
dtd061.ldd: imp060.ldd
dtd062.ldd: imp061.ldd
dtd052.ldd: imp062.ldd
dtd050.ldd: imp052.ldd
dtd063.ldd: imp050.ldd
dtd049.ldd: imp063.ldd
dtd041.ldd: imp049.ldd
dtd042.ldd: imp041.ldd
dtd043.ldd: imp042.ldd
dtd065.ldd: imp043.ldd
dtd078.ldd: imp065.ldd
dtd083.ldd: imp078.ldd
dtd085.ldd: imp083.ldd
dtd086.ldd: imp085.ldd
dtd106.ldd: imp086.ldd
dtd087.ldd: imp106.ldd
dtd088.ldd: imp087.ldd
dtd107.ldd: imp088.ldd

dtd061.sml dtd061.grm.sml: dtd061.doc
	docsml -f hol.svf dtd061

imp061.sml: imp061.doc imp018.sml dtd061.grm.sml
	docsml -f hol.svf imp061

mdt035.ttd: dtd035.sml imp035.sml

mdt042.ttd: mdt042.sml dtd042.tch $(IEDTESTSMLS)
mdt078.ttd: mdt078.sml dtd078.tch $(IEDTESTSMLS)
mdt083.ttd: mdt083.sml dtd083.tch $(IEDTESTSMLS)
mdt085.ttd: mdt085.sml dtd085.tch $(IEDTESTSMLS)
mdt086.ttd: mdt086.sml dtd086.tch $(IEDTESTSMLS)
mdt087.ttd: mdt087.sml dtd087.tch $(IEDTESTSMLS)
mdt088.ttd: mdt088.sml dtd088.tch $(IEDTESTSMLS)
mdt106.ttd: mdt106.sml dtd106.tch $(IEDTESTSMLS)
mdt107.ttd: mdt107.sml dtd107.tch $(IEDTESTSMLS)

######################################################################
#
#	Building the ZED database
#
######################################################################

zedbuilt.ldd: $(ZEDDBLDD) $(ZEDLDDFILES)
	@rm -f zedbuilt.ldd
	make -f $(ZEDMKF) zcachecmd
	make -f $(ZEDMKF) ztheoriescmd
	make -f $(ZEDMKF) zbannercmd
	grep '+++ Compiled' $(ZEDLDDFILES)
	touch zedbuilt.ldd
	echo Done.

zed zedbuild: zed.ldd

zcachecmd:
	echo $(ZCACHECMD) | sml @SMLload=$(ZEDDB)
ztheoriescmd:
#	discgarb -c $(ZEDDB)
	echo $(ZSETTHEORIESCMD) | sml @SMLload=$(ZEDDB) > zcache.ldd
#	discgarb -c $(ZEDDB) > zedtheories.discgarb.ldd

zbannercmd:
	echo $(ZEDBANNERCMD) | sml @SMLload=$(ZEDDB) $(ZEDDB)

$(ZEDDB) $(ZEDDBLDD):
		rm -f $(ZEDDB)
		cp `findfile $(HOLDB) $(PATH)` $(ZEDDB)
		chmod u+wr $(ZEDDB)
		echo "PPBuild.pp'save_name := \"$(ZEDDBNAME)\"; save_and_quit();" | pp -d $(ZEDDB)
		@touch $(ZEDDBLDD)


######################################################################
#
#	Building the shell scripts
#
######################################################################

$(SHELLSCRIPTS): imp111.doc
	sieve sml < imp111.doc

######################################################################
#
#	Testing the ZED database
#
######################################################################

$(TESTTOOLS): imp100.doc
	docsml imp100

zed_test: $(ZEDDBLDD) $(ZEDMDTTTDS)
	@grep 'module' $(ZEDMDTTTDS)
	@-grep 'abandoning file' $(ZEDMDTTTDS)

######################################################################
#
#	Constructing release directories
#
######################################################################

dirs:
	rm -rf release
	mkdir release
	mkdir release/bin

rel: dirs zedbuilt.ldd $(SHELLSCRIPTS) README.zed
	cp zed.$(HEAP_SUFFIX) release/bin
	cp $(SHELLSCRIPTS) release/bin
	cp README.zed release
	chmod -R a-w release
	chmod -R g-w release
	chmod -R u+w release


$(PRODUCT).tgz: rel
	cd release && tar cvf ../$(PRODUCT).tar .
	cd $(CWD) && gzip $(PRODUCT).tar && mv $(PRODUCT).tar.gz $(PRODUCT).tgz

tgz: $(PRODUCT).tgz

######################################################################
#
#	Tidying Up
#
######################################################################

clean:
	@rm -f $(ZEDSMLDOCS) $(ZEDSMLFILES) $(ZEDLDDFILES)
	@rm -f $(ZEDMDTDOCS) $(ZEDMDTSMLS) $(ZEDMDTTTDS)
	@rm -f $(IEDTESTDOCS) $(IEDTESTSMLS)

veryclean: clean
	@rm -f $(ZEDDB) $(ZEDDBLDD)

######################################################################
#
#	Generic Rules
#
######################################################################

%.ldd: %.sml
	@rm -f $@ $*.err 2>/dev/null
	@echo "Compiling (code)" $<
	@pp -d $(ZEDDB) -f $< -- $(MLFLAGS) >$*.err
	@mv $*.err $@

%.ttd: %.sml $(IEDTESTSMLS) $(TESTTOOLS)
	@rm -f $@ $.err 2>/dev/null
	@echo "Compiling (test)" $<
	@echo "use_file \"$<\"; quit();" | sml $(MLFLAGS) @SMLload=$(ZEDDB) > $*.err
	@mv $*.err $@

%.sml: %.doc hol.svf
	docsml -f hol.svf $*

%.tch: %.doc  dtd035.sml imp035.sml
	doctch $*
