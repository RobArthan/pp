######################################################################
#
#	zed.mkf from %Z% $Date: 2002/10/16 16:48:00 $ $Revision: 1.28 $ $RCSfile: zed.mkf,v $
#
#	makefile for the ZED database for ProofPower
#
######################################################################

# suppress the automatic 'sccs get' rule
.SCCS_GET:

# suffixes known
.SUFFIXES: .db .doc .dvi .ldd .log .lot .sh .doc .tex .tch

# Control for RCS checking out: expand keywords to values only
# (needed for document dates)
COFLAGS=-kv

# default make target.  displays a list of more useful targets

default:
	@echo "The following are some of the more useful make commands:"
	@echo " "
	@echo "make -f hol.mkf inst           - builds and installs the hol files"
	@echo "make -f hol.mkf srcrel         - makes the hol source release"
	@echo "make -f zed.mkf src            - makes the Z source files"
	@echo "make -f zed.mkf bin            - makes binaries plus what is needed to use them"
	@echo "make -f zed.mkf doc            - makes Z documents "
	@echo "make -f zed.mkf test           - runs the tests"
	@echo "make -f zed.mkf packinglist    - list the Z source file names"
	@echo " "
	@echo "Various environment variables influence the behaviour:"
	@echo " "
	@echo "    PPCOMPILER  - compiler to use (POLYML or SMLNJ)"
	@echo "    PPTARGETDIR - target installation directory"
	@echo "                  (creates a clean directory called release if not set)"
	@echo "    PPVER       - product version"
	@echo "                  (taken from file version if not set)"

######################################################################
#
#	Makefile Definitions
#
######################################################################

PRODNAME=PPZed
SHORTNAME=zed
PRODUCT=$(PRODNAME)-$(PPVER)
VERSION=$(shell echo $${PPVER:-`cat version  2>/dev/null || echo XXX.YYY.ZZZ`})
RELDIR=$(shell echo $${PPTARGETDIR:-release})
CWD=$(shell pwd)
HAVERCS=$(shell (test -d RCS && echo y ) || echo n)

# Compiler specifics:
ifeq ($(PPCOMPILER), POLYML)
# Architecture type (used as a file-name suffix for images)
HEAP_SUFFIX=		"polydb"
# Command to run ML
RUNML="poly"
MLDBPFX=""
# Command to garbage-collect the database
DBGC="poly"
DBGCARG="-d"
else
ifeq ($(PPCOMPILER), SMLNJ)
# Architecture type (used as a file-name suffix for images by NJML)
HEAP_SUFFIX=		$(shell eval `.arch-n-opsys`; echo $$HEAP_SUFFIX)
# Command to run ML
RUNML="sml"
MLDBPFX="@SMLload="
# Command to garbage-collect the database
DBGC="echo"
DBGCARG="database garbage collection not needed with SML/NJ"
endif
endif
# Distinctive tag for binary distribution file
BINTAG=$(shell eval `arch-os`; echo $$ARCH-$$OS-$$PPCOMPILER | dd conv=lcase 2>/dev/null)

# database names
ZEDDBNAME=	zed
ZEDDB=		$(ZEDDBNAME).$(HEAP_SUFFIX)
ZEDDBLDD=	$(ZEDDBNAME).ldd
HOLDB=		hol.$(HEAP_SUFFIX)

# Makefiles
ZEDMKF=		zed.mkf

# Detailed designs and Implementations
ZEDSMLDOCS =	dtd048.doc imp048.doc # Support for Z Abstract Machine
ZEDSMLDOCS +=	dtd047.doc imp047.doc # Z Abstract Machine
ZEDSMLDOCS +=	dtd079.doc imp079.doc # Support for Z U.I.
ZEDSMLDOCS +=	dtd064.doc imp064.doc # Z Pretty Printer
ZEDSMLDOCS +=	dtd060.doc imp060.doc # Z Lexical analyser
ZEDSMLDOCS +=	dtd061.doc imp061.doc # Z Parser
ZEDSMLDOCS +=	dtd062.doc imp062.doc # Z Type Checker
ZEDSMLDOCS +=	dtd052.doc imp052.doc # Z Primitive Constants
ZEDSMLDOCS +=	dtd050.doc imp050.doc # Z Generic Constants
ZEDSMLDOCS +=	dtd063.doc imp063.doc # Z Term generator
ZEDSMLDOCS +=	dtd049.doc imp049.doc # Z Paragraph Processor
ZEDSMLDOCS +=	dtd041.doc imp041.doc # Z Predicate Calculus
ZEDSMLDOCS +=	dtd042.doc imp042.doc # Z Language Expressions
ZEDSMLDOCS +=	dtd043.doc imp043.doc # Z Language Schema Calculus
ZEDSMLDOCS +=	dtd065.doc imp065.doc # Z theory lister
ZEDSMLDOCS +=	dtd078.doc imp078.doc # Z Library Sets
ZEDSMLDOCS +=	dtd083.doc imp083.doc # Z Library Relations
ZEDSMLDOCS +=	dtd085.doc imp085.doc # Z Library Functions
ZEDSMLDOCS +=	dtd086.doc imp086.doc # Z Library Numbers
ZEDSMLDOCS +=	dtd106.doc imp106.doc # Z Arithmetic Tools
ZEDSMLDOCS +=	dtd087.doc imp087.doc # Z Library Sequences
ZEDSMLDOCS +=	dtd088.doc imp088.doc # Z Library Bags
ZEDSMLDOCS +=	dtd107.doc imp107.doc # Z Library Finiteness and Sequences
ZEDSMLDOCS +=	dtd117.doc imp117.doc # Z Library Real Numbers

# Shell scripts for running the thing

SHELLSCRIPTS += zed
SHELLSCRIPTS += zed_list

# Module tests
ZEDMDTDOCS =	mdt041.doc
ZEDMDTDOCS +=	mdt042.doc
ZEDMDTDOCS +=	mdt043.doc
ZEDMDTDOCS +=	mdt047.doc
ZEDMDTDOCS +=	mdt049.doc
ZEDMDTDOCS +=	mdt050.doc
ZEDMDTDOCS +=	mdt060.doc
ZEDMDTDOCS +=	mdt061.doc
ZEDMDTDOCS +=	mdt062.doc
ZEDMDTDOCS +=	mdt063.doc
ZEDMDTDOCS +=	mdt064.doc
ZEDMDTDOCS +=	mdt065.doc
ZEDMDTDOCS +=	mdt078.doc
ZEDMDTDOCS +=	mdt079.doc
ZEDMDTDOCS +=	mdt083.doc
ZEDMDTDOCS +=	mdt085.doc
ZEDMDTDOCS +=	mdt086.doc
ZEDMDTDOCS +=	mdt087.doc
ZEDMDTDOCS +=	mdt088.doc
ZEDMDTDOCS +=	mdt106.doc
ZEDMDTDOCS +=	mdt107.doc
ZEDMDTDOCS +=	mdt117.doc
ZEDMDTDOCS +=	int002.doc
ZEDMDTDOCS +=	int003.doc


# Variations on the documents
ZEDSMLFILES=	$(ZEDSMLDOCS:.doc=.sml)
ZEDLDDFILES=	$(ZEDSMLDOCS:.doc=.ldd)
ZEDMDTSMLS=	$(ZEDMDTDOCS:.doc=.sml)
ZEDMDTTTDS=	$(ZEDMDTDOCS:.doc=.ttd)

# Detailed Design and implementation of the IED test harness
IEDTESTDOCS=	dtd013.doc imp013.doc
IEDTESTSMLS=	$(IEDTESTDOCS:.doc=.sml)

# Testing tools

TESTTOOLS=	doctch \
		doctds

# Flags for ML compiler.  Currently none
MLFLAGS=

# database initialisation commands

CACHE_SIZE=	50

ZCACHECMD= "\
	open_theory \"fin_set\"; \
	new_theory \"z_language\"; \
	set_cache_theories [\"z_language\",\"hol\", \"basic_hol\"]; \
	save_and_quit (); "

ZEDBANNERCMD= "\
	open_theory \"z_library\"; \
	icl'set_banner (Value (\"ProofPower \"^system_version^\" [HOL/Z Database]\")); \
	save_and_quit (); "

ZSETTHEORIESCMD= "\
	open_theory \"z_language\"; \
	cached_labelled_product_rule $(CACHE_SIZE); \
	open_theory \"z_language_ps\"; \
	repeat pop_pc; \
	push_pc \"z_predicates\"; \
	save_and_quit ();"

# document files
DOCFILES += usr005.doc usr005A.doc usr005B.doc usr005C.doc usr005D.doc
DOCFILES += usr030.doc
DOCFILES += usr011.doc usr011S.doc usr011X.doc usr011A.doc usr011B.doc
DOCFILES += usr011C.doc usr011D.doc usr011E.doc usr011T.doc
DOCFILES += usr015.doc usr015a.doc usr015.sh usr015.svf
DOCFILES += usr023.doc usr023_slides.doc
DOCFILES += usr024.doc
DOCFILES += wrk050.doc
DOCFILES += wrk051.doc

# release files
RELEASEDOCFILES += usr005.dvi
RELEASEDOCFILES += usr030.dvi
RELEASEDOCFILES += usr011.doc usr011A.doc usr011B.doc usr011C.doc usr011D.doc
RELEASEDOCFILES += usr011E.doc usr011T.doc usr011S.doc usr011X.doc usr011.dvi
RELEASEDOCFILES += usr015.dvi
RELEASEDOCFILES += usr023.doc usr023.dvi usr023S.doc usr023_slides.doc
RELEASEDOCFILES += wrk050.doc wrk050.dvi
RELEASEDOCFILES += wrk051.doc wrk051.dvi

# release scripts
RELEASESCRIPTS = install_zeddemo

DESCDOCS = def001A.doc
DESCDOCS += def001B.doc
DESCDOCS += def001C.doc
DESCDOCS += def001D.doc
DESCDOCS += def001E.doc
DESCDOCS += def007A.doc
DESCDOCS += def007.skw

# packing list for the source release (target src)
PACKINGLIST=
PACKINGLIST+= README.zed.src
PACKINGLIST+= def001A.doc
PACKINGLIST+= def001B.doc
PACKINGLIST+= def001C.doc
PACKINGLIST+= def001D.doc
PACKINGLIST+= def001E.doc
PACKINGLIST+= def007.skw
PACKINGLIST+= def007A.doc
PACKINGLIST+= dtd001.doc
PACKINGLIST+= dtd002.doc
PACKINGLIST+= dtd003.doc
PACKINGLIST+= dtd004.doc
PACKINGLIST+= dtd006.doc
PACKINGLIST+= dtd007.doc
PACKINGLIST+= dtd008.doc
PACKINGLIST+= dtd009.doc
PACKINGLIST+= dtd010.doc
PACKINGLIST+= dtd012.doc
PACKINGLIST+= dtd013.doc
PACKINGLIST+= dtd015.doc
PACKINGLIST+= dtd020.doc
PACKINGLIST+= dtd025.doc
PACKINGLIST+= dtd026.doc
PACKINGLIST+= dtd027.doc
PACKINGLIST+= dtd028.doc
PACKINGLIST+= dtd029.doc
PACKINGLIST+= dtd030.doc
PACKINGLIST+= dtd033.doc
PACKINGLIST+= dtd035.doc
PACKINGLIST+= dtd036.doc
PACKINGLIST+= dtd041.doc
PACKINGLIST+= dtd042.doc
PACKINGLIST+= dtd043.doc
PACKINGLIST+= dtd047.doc
PACKINGLIST+= dtd048.doc
PACKINGLIST+= dtd049.doc
PACKINGLIST+= dtd050.doc
PACKINGLIST+= dtd051.doc
PACKINGLIST+= dtd052.doc
PACKINGLIST+= dtd060.doc
PACKINGLIST+= dtd061.doc
PACKINGLIST+= dtd062.doc
PACKINGLIST+= dtd063.doc
PACKINGLIST+= dtd064.doc
PACKINGLIST+= dtd065.doc
PACKINGLIST+= dtd067.doc
PACKINGLIST+= dtd076.doc
PACKINGLIST+= dtd078.doc
PACKINGLIST+= dtd079.doc
PACKINGLIST+= dtd081.doc
PACKINGLIST+= dtd083.doc
PACKINGLIST+= dtd084.doc
PACKINGLIST+= dtd085.doc
PACKINGLIST+= dtd086.doc
PACKINGLIST+= dtd087.doc
PACKINGLIST+= dtd088.doc
PACKINGLIST+= dtd099.doc
PACKINGLIST+= dtd100.doc
PACKINGLIST+= dtd103.doc
PACKINGLIST+= dtd106.doc
PACKINGLIST+= dtd107.doc
PACKINGLIST+= dtd108.doc
PACKINGLIST+= dtd110.doc
PACKINGLIST+= dtd117.doc
PACKINGLIST+= fmu.bib
PACKINGLIST+= hol.svf
PACKINGLIST+= imp013.doc
PACKINGLIST+= imp018.doc
PACKINGLIST+= imp035.doc
PACKINGLIST+= imp041.doc
PACKINGLIST+= imp042.doc
PACKINGLIST+= imp043.doc
PACKINGLIST+= imp047.doc
PACKINGLIST+= imp048.doc
PACKINGLIST+= imp049.doc
PACKINGLIST+= imp050.doc
PACKINGLIST+= imp052.doc
PACKINGLIST+= imp054.doc
PACKINGLIST+= imp060.doc
PACKINGLIST+= imp061.doc
PACKINGLIST+= imp062.doc
PACKINGLIST+= imp063.doc
PACKINGLIST+= imp064.doc
PACKINGLIST+= imp065.doc
PACKINGLIST+= imp078.doc
PACKINGLIST+= imp079.doc
PACKINGLIST+= imp083.doc
PACKINGLIST+= imp085.doc
PACKINGLIST+= imp086.doc
PACKINGLIST+= imp087.doc
PACKINGLIST+= imp088.doc
PACKINGLIST+= imp100.doc
PACKINGLIST+= imp106.doc
PACKINGLIST+= imp107.doc
PACKINGLIST+= imp111.doc
PACKINGLIST+= imp113.doc
PACKINGLIST+= imp117.doc
PACKINGLIST+= install_zeddemo.sh
PACKINGLIST+= int002.doc
PACKINGLIST+= int003.doc
PACKINGLIST+= mdt041.doc
PACKINGLIST+= mdt042.doc
PACKINGLIST+= mdt043.doc
PACKINGLIST+= mdt047.doc
PACKINGLIST+= mdt049.doc
PACKINGLIST+= mdt050.doc
PACKINGLIST+= mdt060.doc
PACKINGLIST+= mdt061.doc
PACKINGLIST+= mdt062.doc
PACKINGLIST+= mdt063.doc
PACKINGLIST+= mdt064.doc
PACKINGLIST+= mdt065.doc
PACKINGLIST+= mdt078.doc
PACKINGLIST+= mdt079.doc
PACKINGLIST+= mdt083.doc
PACKINGLIST+= mdt085.doc
PACKINGLIST+= mdt086.doc
PACKINGLIST+= mdt087.doc
PACKINGLIST+= mdt088.doc
PACKINGLIST+= mdt106.doc
PACKINGLIST+= mdt107.doc
PACKINGLIST+= mdt117.doc
PACKINGLIST+= usr001A.doc
PACKINGLIST+= usr005.doc
PACKINGLIST+= usr005A.doc
PACKINGLIST+= usr005B.doc
PACKINGLIST+= usr005C.doc
PACKINGLIST+= usr005D.doc
PACKINGLIST+= usr011.doc
PACKINGLIST+= usr011A.doc
PACKINGLIST+= usr011B.doc
PACKINGLIST+= usr011C.doc
PACKINGLIST+= usr011D.doc
PACKINGLIST+= usr011E.doc
PACKINGLIST+= usr011S.doc
PACKINGLIST+= usr011T.doc
PACKINGLIST+= usr011X.doc
PACKINGLIST+= usr015.doc
PACKINGLIST+= usr015.sh
PACKINGLIST+= usr015.svf
PACKINGLIST+= usr015a.doc
PACKINGLIST+= usr023.doc
PACKINGLIST+= usr023_slides.doc
PACKINGLIST+= usr023S.doc
PACKINGLIST+= usr024.doc
PACKINGLIST+= usr024_data.txt
PACKINGLIST+= usr030.doc
PACKINGLIST+= wrk050.doc
PACKINGLIST+= wrk051.doc
PACKINGLIST+= zed.mkf

# packing list for user source release (they get the computed README file not the master)
DISTPACKINGLIST=$(subst README.$(SHORTNAME).src,README.$(SHORTNAME), $(PACKINGLIST))

######################################################################
#
#	Rules for making the documents
#
######################################################################

usr024_data.tex: usr024_data.txt
	@sed	-e /PRODUCT/s#PRODUCT#$(PRODUCT)#g \
		-e "/DATETIME/s#DATETIME#`date +'%H:%M:%S %d/%m/%Y'`"#g \
		<usr024_data.txt >usr024_data.tex


USR.sty: usr024.doc usr024.sml usr024_data.tex
	@sed -e 's/[ 	]%.*$$//' \
	-e 's/^[ 	][ 	]*//' \
	-e 's/[ 	][ 	]*$$//' usr024.sml > USR.sty
	
hol1.sty: imp054.doc imp054.sml
	@sed -e 's/[ 	]%.*$$//' \
	-e 's/^[ 	][ 	]*//' \
	-e 's/[ 	][ 	]*$$//' imp054.sml > hol1.sty


######################################################################
#	usr001A - part of the document preparation guide that 
#	is used in other documents
#####################################################################

usr001A.tex: usr001A.doc
	doctex usr001A

######################################################################
#	usr005 - Product description
######################################################################

USR005DOCS = usr005.doc
USR005DOCS += usr005A.doc
USR005DOCS += usr005B.doc
USR005DOCS += usr005C.doc
USR005DOCS += usr005D.doc
USR005DOCS += def001A.doc
USR005DOCS += def001B.doc
USR005DOCS += def001C.doc
USR005DOCS += def001D.doc
USR005DOCS += def001E.doc
USR005DOCS += def007A.doc
USR005TEXS = $(USR005DOCS:.doc=.tex)

usr005.dvi: hol1.sty USR.sty $(USR005DOCS) $(USR005TEXS) usr024_data.tex fmu.bib
	texdvi usr005 > usr005.dvi.ldd1 </dev/null
	- bibtex usr005
	texdvi usr005 > usr005.dvi.ldd2 </dev/null
	texdvi usr005
usr005.dvi1: hol1.sty USR.sty $(USR005DOCS) $(USR005TEXS)
	texdvi usr005 

def007A.tex: def007A.doc def007.skw
	doctex -k def007.skw def007A

######################################################################
#	usr030 - Reference manual
######################################################################

export LC_COLLATE=C

SORT = awk -f 0.as1 | sort -f | awk -f 0.as2
UNBOX = ( sed '/[ 	][ 	]*$$/s/[ 	]*$$//' \
	| sed -n '/^\=DOC/,/^\=ENDDOC/p' )

# The following list better be in order, or else consistency checks will fail
USR030DOCS = dtd001.doc
USR030DOCS += dtd002.doc
USR030DOCS += dtd003.doc
USR030DOCS += dtd004.doc
USR030DOCS += dtd006.doc
USR030DOCS += dtd007.doc
USR030DOCS += dtd008.doc
USR030DOCS += dtd009.doc
USR030DOCS += dtd010.doc
USR030DOCS += dtd012.doc
USR030DOCS += dtd015.doc
USR030DOCS += dtd020.doc
USR030DOCS += dtd025.doc
USR030DOCS += dtd026.doc
USR030DOCS += dtd027.doc
USR030DOCS += dtd028.doc
USR030DOCS += dtd029.doc
USR030DOCS += dtd030.doc
USR030DOCS += dtd033.doc
USR030DOCS += dtd036.doc
USR030DOCS += dtd041.doc
USR030DOCS += dtd042.doc
USR030DOCS += dtd043.doc
USR030DOCS += dtd047.doc
USR030DOCS += dtd051.doc
USR030DOCS += dtd065.doc
USR030DOCS += dtd067.doc
USR030DOCS += dtd076.doc
USR030DOCS += dtd078.doc
USR030DOCS += dtd081.doc
USR030DOCS += dtd083.doc
USR030DOCS += dtd084.doc
USR030DOCS += dtd085.doc
USR030DOCS += dtd086.doc
USR030DOCS += dtd087.doc
USR030DOCS += dtd088.doc
USR030DOCS += dtd099.doc
USR030DOCS += dtd100.doc
USR030DOCS += dtd103.doc
USR030DOCS += dtd106.doc
USR030DOCS += dtd107.doc
USR030DOCS += dtd108.doc
USR030DOCS += dtd110.doc
USR030DOCS += dtd117.doc
TEXFILES  = 3.tex 5.tex 6.tex 7.tex 8.tex 9a.tex
TEXFILES += 9b.tex 10.tex 12.tex 15.tex 16.tex
TEXFILES += 25.tex 30.tex 31.tex 32.tex 33.tex
TEXFILES += 34.tex 35.tex 36.tex 37.tex 38.tex
TEXFILES += 39.tex 40.tex 41.tex 43.tex 44.tex
TEXFILES += 45.tex 46.tex 47.tex 48.tex 49.tex
TEXFILES += 51.tex 52.tex 53.tex 54.tex


GROUP1TEX = 1a.tex 1b.tex 1c.tex 1d.tex \
		1e.tex 1f.tex 1g.tex 1h.tex \
		1i.tex 1j.tex 1k.tex 1l.tex \
		1m.tex 1n.tex

GROUP1SCR = $(GROUP1TEX:.tex=.scr)

1%.tex: 1%.scr 0.as1 0.as2
	$(UNBOX)  < $< |${SORT} >1$*.doc
	doctex 1$*
	rm -f 1$*.doc


$(GROUP1SCR): dtd001.doc 0.es1.A 0.es1.B
	@sed -n -f 0.es1.A dtd001.doc
	@sed -n -f 0.es1.B dtd001.doc

GROUP2SCR = 2a.scr 2b.scr

GROUP2TEX = $(GROUP2SCR:.scr=.tex)

2%.tex: 2%.scr 0.as1 0.as2
	$(UNBOX)  < $< |${SORT} >2$*.doc
	doctex 2$*
	rm -f 2$*

$(GROUP2SCR): dtd002.doc 0.es2
	@sed -n -f 0.es2 dtd002.doc

3.tex: 3.003 3.004 0.as1 0.as2
	cat 3.003 3.004 | ${SORT} > 3.doc
	doctex 3
	rm -f 3.doc

3.00% : dtd00%.doc
	${UNBOX}  < $< >$@

GROUP4SCR = 4a.scr 4b.scr 4c.scr

GROUP4TEX = $(GROUP4SCR:.scr=.tex)

4a.scr : dtd006.doc 0.es3
	@sed -n -f 0.es3 dtd006.doc

4a.tex: 4a.scr 0.as1 0.as2
	${UNBOX} <4a.scr | ${SORT} >4a.doc
	doctex 4a
	rm -f 4a.doc

4b.tex:	dtd012.doc 0.as1 0.as2
	${UNBOX} <dtd012.doc | ${SORT} >4b.doc
	doctex 4b
	rm -f 4b.doc

4c.tex:	dtd033.doc 0.as1 0.as2
	${UNBOX} <dtd033.doc | ${SORT} >4c.doc
	doctex 4c
	rm -f 4c.doc

5.tex: 5.007 5.scr.026 5.027 0.as1 0.as2
	${UNBOX} <5.scr.026 >5.026
	cat 5.007 5.026 5.027 |${SORT} >5.doc
	doctex 5
	rm -f 5.doc

5.0%: dtd0%.doc 0.as1 0.as2
	${UNBOX} < $< |${SORT} >$@

5.scr.026: dtd026.doc
	@sed -e '/section{Tactics}/,/section{BASIC REWRITES}/d' \
	dtd026.doc > 5.scr.026

6.tex: 6.009 6.028 6.029 6.scr.026 0.as1 0.as2
	${UNBOX} <6.scr.026 >6.026
	cat 6.009 6.028 6.029 6.026 |${SORT} >6.doc
	doctex 6
	rm -f 6.doc

6.0%: dtd0%.doc 0.as1 0.as2
	${UNBOX} < $< |${SORT} >$@

6.scr.026: dtd026.doc
	@sed -e '/section{Tactics}/,/section{BASIC REWRITES}/!d' \
	dtd026.doc > 6.scr.026

7.tex: dtd030.doc 0.as1 0.as2
	${UNBOX} <dtd030.doc |${SORT} >7.doc
	doctex 7
	rm -f 7.doc

8.tex: dtd008.doc 0.as1 0.as2
	${UNBOX} <dtd008.doc |${SORT} >8.doc
	doctex 8
	rm -f 8.doc

9a.tex: dtd020.doc 0.as1 0.as2
	${UNBOX} <dtd020.doc|${SORT} >9a.doc
	doctex 9a
	rm -f 9a.doc

9b.tex: dtd103.doc 0.as1 0.as2
	${UNBOX} <dtd103.doc|${SORT} >9b.doc
	doctex 9b
	rm -f 9b.doc

10.tex: dtd051.doc 0.as1 0.as2
	${UNBOX} <dtd051.doc|${SORT} >10.doc
	doctex 10
	rm -f 10.doc

12.tex: dtd036.doc 0.as1 0.as2
	${UNBOX} <dtd036.doc|${SORT} >12.doc
	doctex 12
	rm -f 12.doc

15.doc: zed.thl.doc 0.15_sed
	@sed -f 0.15_sed zed.thl.doc > 15.doc

16.tex: dtd067.doc 0.as1 0.as2
	${UNBOX} <dtd067.doc|${SORT} >16.doc
	doctex 16
	rm -f 16.doc

25.tex: dtd099.doc usr001A.tex 0.as1 0.as2
	${UNBOX} <dtd099.doc|${SORT} >25.doc
	doctex 25
	rm -f 25.doc

30.tex: dtd076.doc 0.as1 0.as2
	${UNBOX} <dtd076.doc|${SORT} >30.doc
	doctex 30
	rm -f 30.doc

31.tex: dtd100.doc 0.as1 0.as2
	${UNBOX} <dtd100.doc|${SORT} >31.doc
	doctex 31
	rm -f 31.doc

32.tex: dtd041.doc 0.as1 0.as2
	${UNBOX} <dtd041.doc|${SORT} >32.doc
	doctex 32
	rm -f 32.doc

33.tex: dtd042.doc 0.as1 0.as2
	${UNBOX} <dtd042.doc|${SORT} >33.doc
	doctex 33
	rm -f 33.doc

34.tex: dtd043.doc 0.as1 0.as2
	${UNBOX} <dtd043.doc|${SORT} >34.doc
	doctex 34
	rm -f 34.doc

35.tex: dtd047.doc 0.as1 0.as2
	${UNBOX} <dtd047.doc|${SORT} >35.doc
	doctex 35
	rm -f 35.doc

36.tex: dtd078.doc 0.as1 0.as2
	${UNBOX} <dtd078.doc|${SORT} >36.doc
	doctex 36
	rm -f 36.doc

37.tex: dtd083.doc 0.as1 0.as2
	${UNBOX} <dtd083.doc|${SORT} >37.doc
	doctex 37
	rm -f 37.doc

38.tex: dtd085.doc 0.as1 0.as2
	${UNBOX} <dtd085.doc|${SORT} >38.doc
	doctex 38
	rm -f 38.doc

39.tex: dtd086.doc 0.as1 0.as2
	${UNBOX} <dtd086.doc|${SORT} >39.doc
	doctex 39
	rm -f 39.doc

40.tex: dtd087.doc 0.as1 0.as2
	${UNBOX} <dtd087.doc|${SORT} >40.doc
	doctex 40
	rm -f 40.doc

41.tex: dtd088.doc 0.as1 0.as2
	${UNBOX} <dtd088.doc|${SORT} >41.doc
	doctex 41
	rm -f 41.doc

43.tex: dtd084.doc 0.as1 0.as2
	${UNBOX} <dtd084.doc|${SORT} >43.doc
	doctex 43
	rm -f 43.doc

44.tex: dtd081.doc 0.as1 0.as2
	${UNBOX} <dtd081.doc|${SORT} >44.doc
	doctex 44
	rm -f 44.doc

45.tex: dtd025.doc 0.as1 0.as2
	${UNBOX} <dtd025.doc|${SORT} >45.doc
	doctex 45
	rm -f 45.doc

46.tex: dtd010.doc 0.as1 0.as2
	${UNBOX} <dtd010.doc|${SORT} >46.doc
	doctex 46
	rm -f 46.doc

47.tex: dtd110.doc 0.as1 0.as2
	${UNBOX} <dtd110.doc|${SORT} >47.doc
	doctex 47
	rm -f 47.doc

48.tex: dtd015.doc 0.as1 0.as2
	${UNBOX} <dtd015.doc|${SORT} >48.doc
	doctex 48
	rm -f 48.doc

49.tex: dtd065.doc 0.as1 0.as2
	${UNBOX} <dtd065.doc|${SORT} >49.doc
	doctex 49
	rm -f 49.doc

51.tex: dtd117.doc 0.as1 0.as2
	${UNBOX} <dtd117.doc|${SORT} >51.doc
	doctex 51

52.tex: dtd106.doc 0.as1 0.as2
	${UNBOX} <dtd106.doc|${SORT} >52.doc
	doctex 52
	rm -f 52.doc

53.tex: dtd107.doc 0.as1 0.as2
	${UNBOX} <dtd107.doc|${SORT} >53.doc
	doctex 53
	rm -f 53.doc

54.tex: dtd108.doc 0.as1 0.as2
	sed -e "/section{Compiler/,/section{String/d" dtd108.doc | \
	${UNBOX} |${SORT} >54.doc
	doctex 54
	rm -f 54.doc

################
#
#  Scripts for massaging index entries etc.
#
################

0.15_sed 0.idx_sed1 0.trim_sed 0.ptx_sed1 0.ptx_sed2 0.ptx_sed3 0.ptx_sed4 0.asa 0.es1.A 0.es1.B 0.as1 0.as2 0.es2 0.es3 0.fgrep 0idx_begin.doc 0idx_end.doc: imp113.doc
	docsml imp113

################

0_idx_raw: $(USR030DOCS) 0.fgrep 15.doc
	@grep `cat 0.fgrep` $(USR030DOCS) 15.doc > 0_idx_raw
	
0_idx_all: 0_idx_raw 0.idx_sed1
	@sed -f 0.idx_sed1 0_idx_raw | sort -u | nl -ba -nrz > 0_idx_all

0idx.doc : 0idx_begin.doc 0_idx_all 0idx_end.doc
	@echo "% 0idx.doc" > 0idx.doc
	@echo "=TEX" >> 0idx.doc
	cat 0idx_begin.doc >> 0idx.doc
	@echo "=SML" >> 0idx.doc
	cat 0_idx_all >> 0idx.doc
	@echo "=TEX" >> 0idx.doc
	cat 0idx_end.doc >> 0idx.doc

0idx.idx : 0idx.doc
	doctex 0idx
	texdvi 0idx
	rm -f 0idx.aux 0idx.dvi 0idx.tex 0idx.log 0idx.sid

0_idx_trimmed : 0idx.idx 0.trim_sed
	@sed -e 's/^\\indexentry{\(.*\)}{[0-9]*}$$/\1/' \
		-f 0.trim_sed \
		0idx.idx \
	| nl -ba -nrz \
	> 0_idx_trimmed

0_idx_keyword : 0_idx_trimmed 0_idx_all
	join -o 1.2 2.2 '-t	' 0_idx_trimmed 0_idx_all \
	| sort -u \
	> 0_idx_keyword

030_entries : usr030.idx 0.trim_sed
	@sed	-e 's/^\\indexentry{\(.*\)}{ *\([0-9]*\)}$$/\1	\2/' \
		-f 0.trim_sed \
		usr030.idx \
	| sort -u \
	> 030_entries

0_kwic_source : 0_idx_keyword 030_entries
	join -o 1.2 2.2 '-t	' 030_entries 0_idx_keyword | sort -u > 0_kwic_source

0kwic.doc : 0_kwic_source 0.ptx_sed1 0.asa 0.ptx_sed2 0kwic.warn 0.ptx_sed3 0.ptx_sed4
	@echo =TEX > 0kwic.doc
	@sed -f 0.ptx_sed1 0_kwic_source \
	| awk -f 0.asa \
	| sed -f 0.ptx_sed2 \
	| sort -u \
	| sed -f 0.ptx_sed3 \
	| sort -f \
	| sed -f 0.ptx_sed4 \
	>> 0kwic.doc

0kwic.tex : 0kwic.doc
	doctex 0kwic
0kwic.warn : 0_idx_keyword1c 030_entries1c usr030.idx
	@echo 'Index status' > 0kwic.warn
	@echo '' >> 0kwic.warn
	@echo `wc -l < usr030.idx`' Index entry requests in usr030.idx.' >> 0kwic.warn
	@echo '' >> 0kwic.warn
	@echo `wc -l < 030_entries1c`' Distinct index entries in usr030.idx.' >> 0kwic.warn
	@echo ' ' >> 0kwic.warn
	@comm -12 0_idx_keyword1c 030_entries1c > 0kwic.matched
	@echo `wc -l < 0kwic.matched`' Entries matched' >> 0kwic.warn
	@echo '' >> 0kwic.warn
	@comm -23 0_idx_keyword1c 030_entries1c > 0kwic.unnecessary
	@echo `wc -l < 0kwic.unnecessary`' Unnecessary entries from "0_idx_keyword1c".' >> 0kwic.warn
	@echo '		These entries are indexed in the DTD documents,' >> 0kwic.warn
	@echo '		but are not needed in usr030.' >> 0kwic.warn
	echo '' >> 0kwic.warn
	@comm -13 0_idx_keyword1c 030_entries1c > 0kwic.warn_030_lost
	@echo `wc -l < 0kwic.warn_030_lost`' Index entries lost from usr030.idx.' >> 0kwic.warn
	@echo '		This count should, ideally, be zero.  It indicates' >> 0kwic.warn
	@echo '		index entry requests in usr030 that have not been' >> 0kwic.warn
	@echo '		satisfied by the index entry creation mechanisms.' >> 0kwic.warn
	@echo '		File \"0kwic.warn_030_lost\" gives the lost entries.' >> 0kwic.warn
	@echo ''
	@fmt -c < 0kwic.warn | sed -e '/^$$/d'
	@echo ''
	
0_idx_keyword1c : 0_idx_keyword
	@sed -e 's/	.*$$//' 0_idx_keyword  | sort -u > 0_idx_keyword1c

030_entries1c : 030_entries
	@sed -e 's/	.*$$//' 030_entries  | sort -u > 030_entries1c


usr030.dvi1  : hol1.sty USR.sty usr030.doc 0kwic.tex \
		$(GROUP1TEX:+=) 1a.scr \
		$(GROUP2TEX:+=) $(GROUP4TEX:+=) \
		$(TEXFILES) usr024_data.tex fmu.bib
	doctex usr030
	if egrep "\\cite" [0-9]*.tex> 0cite.temp ; \
	then \
		echo Warning: unexpected citations found > 0cite.warn ; \
		cat 0cite.temp >> 0cite.warn ; \
	fi
	rm -f 0cite.temp
	rm -f usr030.dvi usr030.log
	texdvi usr030 > usr030.dvi.ldd0 </dev/null
	$(MAKE) -f $(ZEDMKF) 0kwic.tex
	@echo "starting bibtex"
	-bibtex  usr030
	@echo "finished bibtex"
	@touch 0cite.warn
	@cat 0cite.warn

usr030.log usr030.dvi: usr030.dvi1 
	@rm -f 0cite.warn
	texdvi usr030  > usr030.dvi.ldd1 </dev/null
	@rm -f usr030.dvi
	$(MAKE) -f $(ZEDMKF) 0kwic.tex
	texdvi usr030 > usr030.dvi.ldd2 </dev/null
	@rm -f usr030.dvi
	$(MAKE) -f $(ZEDMKF) 0kwic.tex
	texdvi usr030
	$(MAKE) -f $(ZEDMKF) 0kwic.tex
	touch 0cite.warn
	cat 0cite.warn

usr030.idx :
	touch usr030.idx

######################################################################
#	usr011 - Z tutorial
######################################################################

USR011DOCS  = usr011.doc
USR011DOCS += usr011A.doc
USR011DOCS += usr011B.doc
USR011DOCS += usr011C.doc
USR011DOCS += usr011D.doc
USR011DOCS += usr011E.doc
USR011DOCS += usr011T.doc
USR011DOCS += usr011X.doc
USR011DOCS += usr011S.doc

USR011TEXS = $(USR011DOCS:.doc=.tex)
	
usr011.dvi1: hol1.sty USR.sty $(USR011DOCS) $(USR011TEXS)
	texdvi usr011 
usr011.dvi: hol1.sty USR.sty $(USR011DOCS) $(USR011TEXS) usr024_data.tex fmu.bib
	texdvi usr011 > usr011.dvi.ldd1 </dev/null
	- bibtex usr011
	texdvi usr011 > usr011.dvi.ldd2 </dev/null
	texdvi usr011
usr011.th:	$(ZTUTDB) usr011A.doc usr011B.doc usr011C.doc usr011D.doc\
			usr011A.sml usr011B.sml usr011C.sml usr011D.sml
	pp -d $(ZTUTDB) -i force_delete_usr011.sml -i usr011A.sml \
			-i usr011B.sml -i usr011C.sml -i usr011D.sml \
			< save_and_quit.sml
	touch usr011.th
usr011.zexercises: usr011.th usr011X.doc usr011S.doc \
			usr011X.sml usr011S.sml
	pp -d $(ZTUTDB) -i force_delete_zexercises.sml \
		-i usr011X.sml < save_and_quit.sml
	touch usr011.zexercises
usr011.solutions:	usr011.zexercises usr011S.doc\
			 usr011X.sml usr011S.sml
	pp -d $(ZTUTDB) -i usr011S.sml < save_and_quit.sml
	touch usr011.solutions


######################################################################
#	usr015 - Known Error Log
######################################################################

# although this document is in the release, is it made at the time the
# databases are secured.

USR015DOCS  = usr015.doc
USR015DOCS += usr015.sh
USR015DOCS += usr015.svf
USR015DOCS += usr015a.doc

usr015.dvi: hol1.sty USR.sty $(USR015DOCS) usr024_data.tex fmu.bib
	doctex usr015
	chmod a+x usr015.sh
	sed -e 's/^/	/' -e '/^	=KE/s/	//' -e '/^	=CO/s/	//' \
		<usr015a.doc | \
		RELEASE=$(VERSION) sieve -f usr015.svf tex | \
		sieve tex > usr015.KEL
	texdvi usr015 > usr015.dvi.ldd1 </dev/null
	- bibtex usr015
	texdvi usr015 > usr015.dvi.ldd2 </dev/null
	texdvi usr015

######################################################################
#	usr023 - ZED Tutorial slides
######################################################################

usr023.dvi: usr023.doc usr023_slides.doc usr023.tex usr023_slides.tex usr024_data.tex
	latex usr023
	latex usr023
	latex usr023

usr023.th: $(ZTUTDB) usr023_slides.doc usr023_slides.sml
	pp -d $(ZTUTDB) -i force_delete_usr023.sml \
	        -i usr023_slides < save_and_quit.sml
	touch usr023.th


######################################################################
#	wrk050 - Methods and tools for verification of criticial properties
######################################################################

wrk050.dvi: wrk050.doc fmu.bib
	doctex wrk050
	texdvi wrk050 > wrk050.dvi.ldd1 </dev/null
	- bibtex wrk050
	texdvi wrk050 > wrk050.dvi.ldd2 </dev/null
	texdvi wrk050

wrk050.th: $(ZTUTDB) wrk050.doc wrk050.sml
	pp -d $(ZTUTDB) -i force_delete_wrk050.sml \
	        -i wrk050.sml < save_and_quit.sml
	touch wrk050.th

######################################################################
#	wrk051
######################################################################

wrk051.dvi: wrk051.doc fmu.bib
	doctex wrk051
	texdvi wrk051  > wrk051.dvi.ldd1 </dev/null
	- bibtex wrk051
	texdvi wrk051 > wrk051.dvi.ldd2 </dev/null
	texdvi wrk051

######################################################################
#	 Theory Listing
######################################################################

all.theories:
	pp_list -d $(ZEDDB) > all.theories

hol.theories:
	pp_list -d hol > hol.theories

zed.theories: all.theories hol.theories
	comm -23 all.theories hol.theories > zed.theories

zed.thl.doc: zed.theories
	pp_list -d $(ZEDDB) `cat zed.theories`  > zed.thl.doc

######################################################################
#
# Dependencies - determining the order of compilation
#
######################################################################
imp048.ldd: dtd048.ldd
imp047.ldd: dtd047.ldd
imp079.ldd: dtd079.ldd
imp064.ldd: dtd064.ldd
imp060.ldd: dtd060.ldd
imp061.ldd: dtd061.ldd
imp062.ldd: dtd062.ldd
imp052.ldd: dtd052.ldd
imp050.ldd: dtd050.ldd
imp063.ldd: dtd063.ldd
imp049.ldd: dtd049.ldd
imp041.ldd: dtd041.ldd
imp042.ldd: dtd042.ldd
imp043.ldd: dtd043.ldd
imp065.ldd: dtd065.ldd
imp078.ldd: dtd078.ldd
imp083.ldd: dtd083.ldd
imp085.ldd: dtd085.ldd
imp086.ldd: dtd086.ldd
imp106.ldd: dtd106.ldd
imp087.ldd: dtd087.ldd
imp088.ldd: dtd088.ldd
imp107.ldd: dtd107.ldd
imp117.ldd: dtd117.ldd

dtd048.ldd: $(ZEDDBLDD)
dtd047.ldd: imp048.ldd
dtd079.ldd: imp047.ldd
dtd064.ldd: imp079.ldd
dtd060.ldd: imp064.ldd
dtd061.ldd: imp060.ldd
dtd062.ldd: imp061.ldd
dtd052.ldd: imp062.ldd
dtd050.ldd: imp052.ldd
dtd063.ldd: imp050.ldd
dtd049.ldd: imp063.ldd
dtd041.ldd: imp049.ldd
dtd042.ldd: imp041.ldd
dtd043.ldd: imp042.ldd
dtd065.ldd: imp043.ldd
dtd078.ldd: imp065.ldd
dtd083.ldd: imp078.ldd
dtd085.ldd: imp083.ldd
dtd086.ldd: imp085.ldd
dtd106.ldd: imp086.ldd
dtd087.ldd: imp106.ldd
dtd088.ldd: imp087.ldd
dtd107.ldd: imp088.ldd

dtd061.sml dtd061.grm.sml: dtd061.doc hol.svf
	docsml -f hol.svf dtd061

imp061.sml: imp061.doc imp018.sml dtd061.grm.sml hol.svf
	docsml -f hol.svf imp061

mdt035.ttd: dtd035.sml imp035.sml

mdt042.ttd: mdt042.sml dtd042.tch $(IEDTESTSMLS)
mdt078.ttd: mdt078.sml dtd078.tch $(IEDTESTSMLS)
mdt083.ttd: mdt083.sml dtd083.tch $(IEDTESTSMLS)
mdt085.ttd: mdt085.sml dtd085.tch $(IEDTESTSMLS)
mdt086.ttd: mdt086.sml dtd086.tch $(IEDTESTSMLS)
mdt087.ttd: mdt087.sml dtd087.tch $(IEDTESTSMLS)
mdt088.ttd: mdt088.sml dtd088.tch $(IEDTESTSMLS)
mdt106.ttd: mdt106.sml dtd106.tch $(IEDTESTSMLS)
mdt107.ttd: mdt107.sml dtd107.tch $(IEDTESTSMLS)
mdt117.ttd: mdt117.sml dtd117.tch $(IEDTESTSMLS)

######################################################################
#
#	Building the ZED database
#
######################################################################

allsmls: $(ZEDSMLFILES)

zedldds: $(ZEDDBLDD) $(ZEDLDDFILES)
	@rm -f zedbuilt.ldd

zedbuilt.ldd: $(ZEDDBLDD) $(ZEDLDDFILES)
	@rm -f zedbuilt.ldd
	$(DBGC) $(DBGCARG) $(ZEDDB)
	echo $(ZSETTHEORIESCMD) | $(RUNML) $(MLDBPFX)$(ZEDDB) > zcache.ldd
	$(DBGC) $(DBGCARG) -c $(ZEDDB) > zedtheories.discgarb.ldd
	echo $(ZEDBANNERCMD) | $(RUNML) $(MLDBPFX)$(ZEDDB) $(ZEDDB)
	grep '+++ Compiled' $(ZEDLDDFILES)
	touch zedbuilt.ldd
	echo Done.

zed zedbuild: zed.ldd

$(ZEDDB) $(ZEDDBLDD):
		rm -f $(ZEDDB)
		cp `findfile $(HOLDB) $(PATH)` $(ZEDDB)
		chmod u+wr $(ZEDDB)
		echo "PPBuild.pp'save_name := \"$(ZEDDBNAME)\"; save_and_quit();" | pp -d $(ZEDDB)
		echo $(ZCACHECMD) | $(RUNML) $(MLDBPFX)$(ZEDDB)
		@touch $(ZEDDBLDD)


######################################################################
#
#	Building the shell scripts
#
######################################################################

$(SHELLSCRIPTS): imp111.doc hol.svf
	sieve -f hol.svf sml < imp111.doc

######################################################################
#
#	Testing the ZED database
#
######################################################################

$(TESTTOOLS): imp100.doc
	docsml imp100

test: $(ZEDDBLDD) $(ZEDMDTTTDS)
	@grep 'module' $(ZEDMDTTTDS)
	@-grep 'abandoning file' $(ZEDMDTTTDS)

######################################################################
#
#	Making the README file
#
######################################################################

ifeq ($(HAVERCS), y)
README.zed: README.zed.src
	sed -e '/$$PPVER/s/$$PPVER/'"$$PPVER/g" \
			< README.zed.src > README.zed
endif

######################################################################
#
#	Constructing release directories
#
######################################################################

reldir:
	if [ "$${PPTARGETDIR:-\"\"}" = "" ]; \
	then \
		rm -rf $(RELDIR); \
	fi
	-mkdir $(RELDIR)
	
bindir:	reldir
	-mkdir $(RELDIR)/bin

docdir:	reldir
	-mkdir $(RELDIR)/doc

srcdir:	reldir
	-mkdir $(RELDIR)/src


binrel: bindir zedbuilt.ldd $(SHELLSCRIPTS) README.zed
	cp zed.$(HEAP_SUFFIX) $(RELDIR)/bin
	cp $(SHELLSCRIPTS) $(RELDIR)/bin
	cp README.zed $(RELDIR)
	chmod -R a-w $(RELDIR)
	chmod -R g-w $(RELDIR)
	chmod -R u+w $(RELDIR)

docrel: docdir  $(RELEASEDOCFILES) $(RELEASESCRIPTS) README.zed
	cp $(RELEASEDOCFILES) $(RELDIR)/doc
	cp $(RELEASESCRIPTS) $(RELDIR)
	cp README.zed $(RELDIR)
	chmod -R a-w $(RELDIR)
	chmod -R g-w $(RELDIR)
	chmod -R u+w $(RELDIR)

# useful target to print out the names of all the files in the source $(RELDIR)
packinglist:
	@echo $(PACKINGLIST)

rcsrel:	srcdir
	-mkdir $(RELDIR)/src/RCS
	@for f in $(PACKINGLIST); \
	do \
		cp RCS/$$f,v $(RELDIR)/src/RCS/$$f,v; \
	done
	chmod -R a-w $(RELDIR)
	chmod -R g-w $(RELDIR)
	chmod -R u+w $(RELDIR)

bin:	binrel
	cd $(RELDIR) && tar cvf $(CWD)/$(PRODUCT).bin.tar ./*
	cd $(CWD) && gzip $(PRODUCT).bin.tar && \
	mv $(PRODUCT).bin.tar.gz $(PRODUCT).$(BINTAG).bin.tgz

doc:	docrel
	cd $(RELDIR) && tar cvf $(CWD)/$(PRODUCT).doc.tar ./*
	cd $(CWD) && gzip $(PRODUCT).doc.tar && \
	mv $(PRODUCT).doc.tar.gz $(PRODUCT).doc.tgz

inst:	binrel docrel

src:	rcsrel
	cd $(RELDIR) && tar cvf $(CWD)/$(PRODUCT).src.tar ./*
	cd $(CWD) && gzip $(PRODUCT).src.tar && \
	mv $(PRODUCT).src.tar.gz $(PRODUCT).src.tgz

srcrel: srcdir $(DISTPACKINGLIST)
	@for f in $(DISTPACKINGLIST); \
	do \
		cp $$f $(RELDIR)/src/$$f; \
	done
	echo $(VERSION) > $(RELDIR)/src/version
	chmod -R a-w $(RELDIR)
	chmod -R g-w $(RELDIR)
	chmod -R u+w $(RELDIR)

######################################################################
#
#	Tidying Up
#
######################################################################

clean:
	@rm -f $(ZEDSMLDOCS) $(ZEDSMLFILES) $(ZEDLDDFILES)
	@rm -f $(ZEDMDTDOCS) $(ZEDMDTSMLS) $(ZEDMDTTTDS)
	@rm -f $(IEDTESTDOCS) $(IEDTESTSMLS)
	rm -f *.aux *.bbl *.blg *.idx *.log *.lot *.sid *.sml *.tex *.toc
	rm -f [0-9]*

veryclean: clean
	@rm -f $(ZEDDB) $(ZEDDBLDD)
	rm -f *.doc *.dvi *.sty

######################################################################
#
#	Generic Rules
#
######################################################################

%.ldd: %.sml
	@rm -f $@ $*.err 2>/dev/null
	@echo "Compiling (code)" $<
	@pp -d $(ZEDDB) -f $< -- $(MLFLAGS) >$*.err
	@mv $*.err $@

%.ttd: %.sml $(IEDTESTSMLS) $(TESTTOOLS)
	@rm -f $@ $.err 2>/dev/null
	@echo "Compiling (test)" $<
	@echo "use_file \"$<\"; quit();" | $(RUNML) $(MLFLAGS) $(MLDBPFX)$(ZEDDB) > $*.err
	@mv $*.err $@

%.sml: %.doc hol.svf
	docsml -f hol.svf $*

%.tex: %.doc
	doctex $*

%.dvi: %.tex
	texdvi $* >/dev/null
	bibtex $*
	texdvi $* >/dev/null
	texdvi $*

%.tch: %.doc  dtd035.sml imp035.sml
	doctch $*
