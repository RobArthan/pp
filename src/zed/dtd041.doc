=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
\TPPtitle{Detailed Design for the Z Predicate Calculus}  %% Mandatory field
\def\TPPheadtitle{Detailed Design for the Z Predicate Calculus}
\TPPref{DS/FMU/IED/DTD041}  %% Mandatory field
\def\SCCSversion{$Revision$
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}  %% Mandatory field
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{K.~Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{G.~Prout & WIN01\\K.~Blackburn & WIN01}
\TPPauthorisation{R.D.Arthan & FST Team Leader}
\TPPabstract{This document contains the detailed design for the 
derived rules of inference, conversions and tactics for the ProofPower Z predicate calculus.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    FST Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item [Issue 1.1]
First version.
\item [Issue 1.2]
Removed $Z\_STRIP\_GOAL\_T$, $Z\_STRIP\_THM\_THEN$, $Z\_strip\_tac$, \newline $Z\_strip\_asm\_tac$, $Z\_check\_asm\_tac$, $Z\_³\_IN\_THEN$ and $Z\_³\_in\_tac$.

Tidied up theorems and conversion about $U$ into a single conversion $Z\_U\_true\_conv$ (for use in stripping and rewriting).
\item [Issue 1.3 (9th July 1992)]
Taken over by KB, and reworked, new fonts.
\item [Issue 1.4 (14th July 1992)]
Significant changes after RBJ, RDA comments.
\item [Issue 1.5 (16th July 1992)]
Changes after RDA comments.
\item [Issue 1.6-1.8]
Changes during implementation.
\item [Issue 1.9 (20th August 1992)]
Added further Z checking functions.
\item [Issue 1.9 (8th September 1992)]
Minor corrections in text.
\item [Issue 1.11 (10th September 1992)]
Corrections after comments.
\item [Issue 1.12 (29th September 1992)]
More changes after comments,
stopped using $z\-\_µ\-\_elim\-\_conv1$ in striping theorems,
added $µ\-\_rewrite\-\_thm$ to $'z\-\_predicates$.
\item [Issue 1.13 (6th October 1992)]
Introduced $z\_basic\_prove\_tac$ and associates.
\item [Issue 1.14 (6th October 1992)]
$z_quantifiers_elim_tac$ changed to do slightly
more.
Other minor typos fixed.
\end{description}
\subsection{Changes Forecast}
\section{GENERAL}
\subsection{Scope}
This document contains a detailed design for the 
derived rules of inference, conversions and tactics for
the ProofPower Z (see \cite{DS/FMU/IED/HLD015}) predicate calculus.
This is called for in \cite{DS/FMU/IED/HLD016}.
The design is
implemented in \cite{DS/FMU/IED/IMP041}.
\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains a detailed design for the 
initial set of rules, conversions and tactics for the predicate calculus of the ProofPower Z.
\subsubsection{Dependencies}
Loading this document is dependent on 
the Z Library \cite{DS/FMU/IED/DTD078} and Z Term generator
\cite{DS/FMU/IED/DTD063}.
\subsubsection{Deficiencies}
The coverage in initial releases of ProofPower Z is aimed at the basic reasoning
tools, rather than a full coverage.
Thus we aim only to cover:
\begin{itemize}
\item
Rewriting
\item
Stripping conclusions and theorems (including assumptions)
\item
$µ$ elimination as inference rule
\item
Contradiction tactics
\item
$¶\_tac$
\end{itemize}
plus some of the auxiliary functions necessary for implementing these.
Thus, initial releases of the ProofPower Z tools will be
deficient in many areas in which reasoning is supported
for HOL.
\section{OVERLAP WITH HOL}
Some functions operating on Z have the same purpose
as an equivalent for HOL,
but perhaps different functionality.

Where this happens we will:
\begin{itemize}
\item
By preference use the HOL function, with, if necessary, parameterisation
changes provided by proof contexts (or, more rarely,
if at all, by other parameterisation).
In particular, if the functionality is the same, use the 
same function (e.g. $±\_tac$).
\item
Otherwise we will provide a separately named function for Z work.
The Z name will usually be formed by prefixing by
``$z\_$'', ``$Z\_$'' or ``Z'' (according to naming convention case and atom composition rules
followed by the object's name)
to indicate the object of
concern in the Z variant of the object.
\end{itemize}
Later releases might provide structures whose sole purpose is to
override HOL (i.e. primary language) objects by
their Z equivalents, and to undo this step.
There are both benefits and problems with this, and the final
approach is yet to be decided.
\section{LANGUAGE OVERLAP BETWEEN Z AND HOL}\label{ZCAVEAT}
Many of the functions below that generate results involving expressions and predicates
are stated to ``remain within the Z language''
(indicated by their results being in $ñ\ ...\ ®$ or
left without any such brackets at all - this document assumes
Z as the default language, HOL terms are explicitly quoted).
This should be taken to mean that in so far as the original
input was within the Z language (i.e. the range of the Z mapping)
the results will also be
(except for certain renaming problems, etc).
This will be checked by some derivative of $is\_z$, unless
otherwise noted, informing the user
if Z has been left.
Later releases will use $Á\_to\_z\_conv$ to correct
what problems it can.

Legitimately, we use HOL universal quantification
to represent generic formals.
However we will also allow arbitrary outer HOL universal quantified terms to be considered ``within the Z language'' 
where this is convenient, though this is avoided where possible.
\section{Z PREDICATE CALCULUS}
=DOC
signature ÛZPredicateCalculusÝ = sig
=DESCRIBE
This provides a set of rules of inference, conversions and tactics sufficient for reasoning about the Z predicate calculus in ProofPower.
This structure declares the theory $z\_set\_theory$,
which is also used by structure $ZSetTheory$.
=ENDDOC
As theory $z\_set\_theory$ is also used by structure
$ZSetTheory$ we delay its theory design until 
\cite{DS/FMU/IED/DTD042}.
\subsection{Subsidiary Functions}
\subsubsection{What is Z}
The following are extensions of work done in \cite{DS/FMU/IED/DTD047},
and perhaps some of this material should be moved to that document.

Errors start with 4100.
=DOC
val Ûfull_dest_z_termÝ : TERM -> Z_TERM;
=DESCRIBE
This function acts as $dest\_z\_term$ on terms
(i.e. expressions and predicates)
in the Z language, but checks the full form of the
outermost Z syntactic construction in a
term to see whether it is in the Z language.
Thus, if the constituents of the construction
are valid Z, of appropriate syntactic classes,
then the overall term is also valid Z.
This is in contrast to $dest\_z\_term$ whose
intended purpose is to categorise Z terms,
and it only detects that terms are outside of the Z language if
the categorisation fails.

The function does not check that the constituents of the outermost Z syntactic construction
are as required.
For example, it does not check that the constituents
of a Z $decl$ are individually in the syntactic category $dec$.
=USES
To replace $dest\_z\_term$ when a term may be ``almost Z'',
but must not be categorised as Z.
=FAILURE
41002	Not within the Z language due to subterm ?0
=ENDDOC
=DOC
val Ûis_zÝ : TERM -> bool;
val Ûis_all_z_typeÝ : TYPE -> bool;
=DESCRIBE
If the term (i.e. expression or predicate) or type given is in the range of the Z mapping
for a term or type respectively
then these functions will return true.
They will otherwise return false, unless the
only form of incorrectness is
that the constituents of a Z syntactic construction
are not as required.
For example, it does not check that the constituents
of a Z $decl$ are individually in the syntactic category $dec$.

The test traverses the provided object 
by using $full\_dest\_z\-\_term$ or $dest\_z\-\_type$ - the test is passed
if the entire term can be broken into non-type and non-term parts
(i.e. primitives such as strings or integers).
Otherwise it will fail with the given error message.

Note that a term is a subterm of itself for these purposes.
=FAILURE
41002	Not within the Z language due to subterm ?0
41003	Not within the Z language due to containing type ?0
=ENDDOC
The above test is not complete, later releases may
include a complete test for being Z.

We use the name $is\_all\_z\_type$ to distinguish
from the previously defined $is\_z\_type$.
=DOC
val Ûnot_z_subtermsÝ : TERM -> TERM list;
=DESCRIBE
This function will return a list (perhaps empty)
of all the subterms that prevent a term (i.e. expression or predicate) being within the
Z language (by the checks of $is\_z$, q.v.), starting with the rightmost subterm that is not Z.
The subterms given will be maximal in the sense that subterms of those given will not be included in the list.
=ENDDOC
=DOC
(* Ûcheck_is_zÝ : boolean flag *)
=DESCRIBE
This flag, if true (the default), will cause all Z inference rules and tactics that claim to remain in the Z language
to check any terms they change (i.e. assumptions and conclusions) for remaining within the Z 
language.
If any fail then the informational message 41004 is used
to output text to the user.
If the flag is false, no such checks are made.
The checks are computationally expensive,
and the results may be excessively verbose if terms are not 
all Z.
=FAILURE
41004	The following subterms in the result are not in the Z language: ?0
=ENDDOC
Actually, the flag be defaulted to true during initial work,
it perhaps later should be defaulted to false.
=DOC
val Ûcheck_is_z_thmÝ : string -> THM -> THM;
val Ûcheck_is_z_goalÝ : string -> GOAL -> GOAL;
val Ûcheck_is_z_termÝ : string -> TERM -> TERM;
val ÛCHECK_IS_Z_TÝ : string -> TACTIC -> TACTIC;
val Ûcheck_is_z_conv_resultÝ : string -> THM -> THM;
=DESCRIBE
For $check\_is\_z\_thm$,
if flag $check\_is\_z$ is true then the conclusion and
assumptions of the provided theorem are checked for being 
within the Z language (except for outermost HOL universal quantification), and informational message 41005 used if not.
The string argument is used as the name of the calling function in the error message.
If the flag is false then there is no effect.
In either case the theorem is passed through unchanged.

$check\_is\_z\_goal$ and $check\_is\_z\_term$ are analogous.
$CHECK\-\_IS\-\_Z\-\_T$ checks each of the subgoals
a tactic requests.

$check\-\_is\-\_z\-\_conv\-\_result$ checks
that the RHS of the resulting equational theorem,
and any assumptions are within the
Z language.
This allows the RHS side of the equation to have outer HOL 
universal quantification, and the LHS not to be Z (e.g. in an Z introduction conversion) without complaint.
=FAILURE
41005	In the result of ?0 the following subterms are not in the Z language: ?1
=ENDDOC

\subsubsection{Adjustment after Á-conversion}
Errors start with 4110.

If a substitution via $var\_subst$ is made upon a term in Z (that may be
part of a theorem or subgoal) by the 
many important functions that call $var\_subst$
(e.g. rewriting and $µ$ elimination),
and if this substitution causes bound variable renaming, the
resulting term may no longer be in the Z language.
This may be because either the types of 
$decl$-style bindings
(see \cite{DS/FMU/IED/ZED002}, the section upon ``Variable Binding Constructs'') may no longer match the variable names bound,
or because the variables in the binding have ceased being in a canonical order.
Either of these two problems can be ``fixed'' by post-processing.
The problems may be adjusted back to Z by using
Z renaming constructs, reordering of quantifiers or by $Á$-conversion,
returning the term to being within
the Z language.

Other ProofPower functions, such as $inst$ may also cause
undesirable renaming.

The following two functions fulfil this need:
=DOC
val ÛÁ_to_zÝ : TERM -> TERM;
=DESCRIBE
This function will adjust all sub-terms that fail to be 
Z because either:
\begin{itemize}
\item
The subterm is involves a $decl$-style binding, and the type of the binding
does not match the names of the variables bound.
This is adjusted using the Z renaming construct.
\item
The subterm is a $decl$-style binding whose bound variables are not
in the canonical ordering that would result from the Z mapping.
This is adjusted by reorganising the order of abstractions and arguments.
\end{itemize}
If a HOL $Á$-conversion will suffice then that will be
used instead.

Subterms that are not covered by these two cases will be traversed and their own subterms checked, regardless of their language.

NOT YET IMPLEMENTED.
=SEEALSO
$Á\_to\_z\_conv$
=FAILURE
41100	No adjustment took place
=ENDDOC
=DOC
val ÛÁ_to_z_convÝ : CONV;
=DESCRIBE
This function will return the equality theorem between a term
and one that adjusts all sub-terms that fail to be 
Z because either:
\begin{itemize}
\item
The subterm is a $decl$-style binding, and the type of the binding
does not match the names of the variables bound.
This is adjusted using the Z renaming construct.
\item
The subterm is a $decl$-style binding whose bound variables are not
in the canonical ordering that would result from the Z mapping.
This is adjusted by reorganising the order of abstractions and arguments.
\end{itemize}
If a HOL $Á$-conversion will suffice then that will be
used instead.

Subterms that are not covered by these two cases will be traversed and their own subterms checked, regardless of their language.

NOT YET IMPLEMENTED.
=SEEALSO
$Á\-\_to\_z$
=FAILURE
41100	No adjustment took place
=ENDDOC
\subsubsection{Concerning Generic Formals}
These are represented by HOL universals and may thus
be manipulated by $µ\_elim$, etc.

\subsection{Concerning The Universe, U} \label{U}
Errors start with 4106.

In \cite{DS/FMU/IED/DTD078} the following definition is given.
 
¹ U[X]
Ü U : ð X
÷
Ü U = X


This definition is supplied purely for convenience. 
If a generic global variable appears without any supplied generic actuals then the variable is taken to be generic 
in $ñU®$.
This leads to terms which are polymorphic, rather than truly set generic. The following material about $U$ is provided to facilitate discharging the proof obligation of implicit predicates in Z declarations.
=DOC
val Ûu_convÝ : CONV;
=DESCRIBE
Simplify an expression made from solely from $U$, and one of: $ð$, arbitrary sized cartesian products, set abstractions, schemas, and $ª$. 
Remains within the Z language, though this is not checked.
=FRULE 1 Conversion
u_conv
ñStructure[U]®
÷
÷
ô Structure[U] = U
=TEX
by one application of one of the following:
=GFT
ô ð U = U
ô (U ¸ U ¸ ...) = U
ô {lab1 : U; lab2 : U; lab3,lab4 : U; ... } = U
ô [lab1 : U; lab2 : U; lab3,lab4 : U; ... ] = U
ô (U ª U) = U
=TEX
=USES
In the rewriting section of a proof context,
and to simplify declarations as predicates, while preserving
their declaration as predicate form.
=SEEALSO
$\_u\_conv$
=FAILURE
41060	?0 cannot be proven equal to ñU® in one step
=ENDDOC
Later releases may react to introduced generic type abbreviations
that collapse to Universe, introduced given sets
(which are defined to be equal to Universe),
and schema selection from Universe.
=DOC
val Û_u_convÝ : CONV;
=DESCRIBE
Simplifies to $true$ a predicate of the form 
=INLINEFT
ñx  S[U]®
=TEX
{} or 
=INLINEFT
ñx  S[U]®
=TEX
{} or  a schema as an expression:
=INLINEFT
ñ[a,b: S[U]; c : S'[U]; ...]®
=TEX
{}, where
$S[U]$ and $S'[U]$ are structures made solely from $U$, arbitrary sized cartesian products, set abstractions, schemas, $ª$ and $ð$.
Remains within the Z language, though this is not checked.
=FRULE 1 Conversion
_u_conv
ñx  S[U]®
÷
÷
ô x  S[U] ¤ true
=TEX
=FRULE 1 Conversion
_u_conv
ñx  S[U]®
÷
÷
ô x  S[U] ¤ true
=TEX
=FRULE 1 Conversion
_u_conv
ñ[a,b: S[U]; c : S'[U]; ...]®
÷
÷
ô [a,b: S[U]; c : S'[U]; ...] ¤ true
=TEX
based on recursively using
=GFT
ô ð U = U
ô (U ¸ U ¸ ...) = U
ô {lab1 : U; lab2 : U; lab3,lab4 : U; ... } = U
ô [lab1 : U; lab2 : U; lab3,lab4 : U; ... ] = U
ô (U ª U) = U
ô µ x· x  U
ô µ x· x  U
=TEX
=USES
In stripping proof contexts, and in eliminating redundant declarations that have been
converted to predicates.
=SEEALSO
$u\_conv$
=FAILURE
41061	?0 cannot be proven true
41062	?0 is not of the form ñx  s®, ñx  s® or a schema as a predicate
=ENDDOC
Later releases may react to introduced generic type abbreviations
that collapse to Universe, introduced given sets
(which are defined to be equal to Universe),
and schema selection from Universe.

\subsection{Concerning Z Universal Quantification}
Errors start with  4102 or 4107
=DOC
val Ûz_µ_elimÝ : TERM -> THM -> THM;
=DESCRIBE
Specialise all Z universally quantified variables 
in a single universal binding to given values of the right type in a binding.
=FRULE 1 Rule
z_µ_elim
ñ(x1 ¦ t1, ... )®
÷
 ô µ D[x1,...] | P1[x1,...]· P2[x1,...]
÷
 ô "D'[t1,...] as predicate"
    ± P1'[t1,...] ´ P2'[t1,...]
=TEX
where $D$ is a declaration that binds the $xi$,
that is converted to a predicate form, by 
=INLINEFT
DECL_C dec_pred_conv
=TEX
. 
The theorem may be type instantiated or require bound variable renaming to allow the 
specialisation to be valid, thus the priming in the result.

If both the supplied binding and the declaration are
recognisably ``empty'' then the universal quantification will be eliminated.

If instead the theorem's conclusion has a single universally quantified variable and the theorem can be type instantiated to match the supplied argument, then that supplied argument will be used directly.
=FRULE 1 Rule
z_µ_elim
ñt®
÷
 ô µ x:X | P1[x]· P2[x]
÷
 ô t  X' ± P1'[t] ´ P2'[t]
=TEX

If neither of the above apply then the supplied binding may instead be 
anything else that has an appropriate binding type.
In such cases projection functions will be used:
=FRULE 2 Tactic
z_µ_elim
ñt®
÷
 ô µ D[x1,...] | P1[x1,...]· P2[x1,...]
÷
 ô "D[t.x1,...] as predicate" ± 
	P1'[t.x1,...] ´ P2'[t.x1,...]
=TEX
Remains within the Z language.
=SEEALSO
$z\_µ\_elim\_conv$
=FAILURE
47310	?0 is not a Z universal quantification
41021	?0 cannot be interpreted as a binding that matches ?1
=ENDDOC
Later releases may include $z\_µ\_elim1$ that simplifies
the antecedent of the resulting implication,
and an $all\_z\_µ\_elim$.
=DOC
val Ûz_µ_introÝ :  THM -> THM;
=DESCRIBE
A rule to introduce a Z universal quantification. The variables to be quantified over must not occur free in the assumptions, and are determined from the form of the input theorem.
=FRULE 1 Rule
z_µ_intro
÷
 ô "D as predicate" ± P1 ´ P2
÷
 ô µ D | P1· P2
=TEX
where D is converted to a declaration by
=INLINEFT
DECL_INTRO_C pred_dec_conv
=TEX
.
As a special case (applicable whenever the entire antecedent of the implication
can be interpreted as a declaration):
=FRULE 1 Rule
z_µ_intro
÷
 ô "D as predicate" ´ P
÷
 ô µ D | true· P
=TEX

An arbitrary conjunctive structure is allowed in $D$,
including repeated bindings of single variables: only the ordering,
as opposed to the nesting is significant in the
conjunctive structure.

This rule will not introduce empty bindings.

Remains within the Z language.
=SEEALSO
$Z\_µ\_intro1$ for implicit $xi\ \ U$ conjuncts,
$all\-\_Z\-\_µ\-\_intro$,
$z\_µ\_intro\_conv$.
=FAILURE
6005	?0 occurs free in assumption list
41026	?0 not of the form ` ô Decl ± P1 ´ P2` or ` ô Decl ´ P2`
41027	?0 cannot be made into a binding
=ENDDOC
This rule, and the following are included in the initial release from a belief that they are likely to be necessary at some point,
rather than any more rigorous requirement.
=DOC
val Ûz_µ_intro1Ý :  TERM list -> THM -> THM;
=DESCRIBE
A rule to introduce a Z universal quantification. The variables to be quantified over must not occur free in the assumptions,
and are determined from the form of the input theorem,
with additional variables from the supplied list.
=FRULE 1 Rule
z_µ_intro1
[ñxi®,...]
÷
 ô "D as predicate" ± P1 ´ P2
÷
 ô µ D;xi:U;... | P1· P2
=TEX
where D is converted to a declaration by
=INLINEFT
DECL_INTRO_C pred_dec_conv
=TEX
.
As special cases:
=FRULE 1 Rule
z_µ_intro1
[ñxi®,...]
÷
 ô P1 ´ P2
÷
 ô µxi:U;... | P1· P2
=TEX
I.e. an antecedent that is not a conjunction is taken 
to be a predicate, not, unlike $z\-\_µ\-\_intro$, a declaration.
=FRULE 1 Rule
z_µ_intro1
[ñxi®,...]
÷
 ô P
÷
 ô µxi:U;... | true· P2
=TEX
An arbitrary conjunctive structure is allowed,
including repeated bindings of single variables: the
order of the resulting binding is canonical, rather than dependent on the conjunctive structure.

This rule will not introduce empty bindings.

Remains within the Z language.
=SEEALSO
$Z\_µ\_intro$ for use without additional $xi\ \ U$,
$all\-\_Z\-\_µ\-\_intro$,
$z\-\_µ\-\_intro\-\_conv$.
=FAILURE
3007	?0 is not a term variable
6005	?0 occurs free in assumption list
41027	?0 cannot be made into a binding
41028	?0 has no declaration part, and no declarations are requested in term list argument
=ENDDOC
This could be extended to accept predicates of the form $ñx  X®$,
to indicate that a type constraint other than $ñU®$ is desired.
=DOC
val Ûz_µ_elim_convÝ : CONV;
val Ûz_µ_intro_convÝ : CONV;
=DESCRIBE
$z\_µ\_elim\_conv$ turns a Z universally quantified predicate into
a HOL universally quantified term.
The result fails to be in the Z language because it contains
a declaration used as a predicate, which Z does not allow.
=FRULE 1 Conversion
z_µ_elim_conv
ñµ D[x1,...] | P1· P2®
÷
÷
ô (µ D[x1,...] | P1· P2) ¤
	¬µ x1 ...·
	ñD[x1,...]® ± ñP1® ´ ñP2®®
=TEX
The order of the resulting universally quantified variables
will be in a sorted order, rather than what the declaration
part might suggest.
 
$Z\_µ\_intro\_conv$ undoes this process, returning a theorem
whose RHS should be in the Z language.
=FRULE 1 Conversion
z_µ_intro_conv
¬µ x1 ...·
ñD[x1,...] ± P1 ´ P2®®
÷
÷
ô ¬µ x1 ...·
	D[x1,...] ± P1 ´ P2® ¤
  ñ(µ D[x1,...] | P1· P2)®	
=TEX
=USES
Used in the Z form of $strip\_tac$,
and handling negations with quantifiers.
It will handle paired quantifiers, and quantifiers in any order, so long as the quantifiers and declaration can be matched
in names and types.
=SEEALSO
$z\_µ\_elim\_conv1$ and $z\_µ\_elim\_conv2$
=FAILURE
41022	?0 is not of the form: ñµ D | P1· P2®
41023	?0 is not of the form: ¬µ x1 ...· Decl ± P1 ´ P2®
41024	?0 is not of the form: ¬µ x1 ...· Decl ± P1 ´ P2®
	where the ¬xi® do not match the declaration
=ENDDOC
=DOC
val Ûall_z_µ_introÝ : THM -> THM;
=DESCRIBE
This will Z universally quantify all free variables in the conclusion
of a theorem, that don't occur in the assumptions.
The declaration part will state the variables are of type $Universe$,
and the predicate part will just be $true$.
If no variables can be introduced then the original theorem will be returned.

Remains within the Z language.
=ENDDOC
=DOC
val Ûz_µ_elim_conv1Ý : CONV;
=DESCRIBE
Turn a Z universally quantified predicate into
a HOL universally quantified term,
eliminating the declaration part of the original quantification using $\_u\_conv$.
The function fails if the declaration cannot be eliminated.
=FRULE 1 Conversion
z_µ_elim_conv1
ñµ D[x1,...] | P1· P2®
÷
÷
ô (µ D[x1,...] | P1· P2) ¤
	¬µ x1 ...· ñP1 ´ P2®®
=TEX
The order of the resulting universally quantified variables
will be in a sorted order, rather than what the declaration
part might suggest.
 
Simplifications based on $Pi$ being $true$ or $false$
will also be applied.

Remains within the Z language (with the caveat of using outer HOL universal quantification).
=USES
For stripping in proof contexts.
=SEEALSO
$z\_µ\_elim\_conv$ and $z\_µ\_elim\_conv2$
=FAILURE
41022	?0 is not of the form: ñµ D | P1· P2®
41071	?0 is of the form: ñµ D | P1· P2® but D non-trivial
=ENDDOC
=DOC
val Ûz_µ_elim_conv2Ý : CONV;
=DESCRIBE
Turn a Z universally quantified predicate into
a HOL universally quantified term,
converting the declaration part of the original quantification into a predicate.
=FRULE 1 Conversion
z_µ_elim_conv1
ñµ D[x1,...] | P1· P2®
÷
÷
ô (µ D[x1,...] | P1· P2) ¤
	¬µ x1 ...· 
		ñ"D[x1,...] as a predicate" 
		± P1 ´ P2®®
=TEX
The order of the resulting universally quantified variables
will be in a sorted order, rather than what the declaration
part might suggest.

Remains within the Z language (with the caveat of using outer HOL universal quantification).
=FAILURE
41022	?0 is not of the form: ñµ D | P1· P2®
=ENDDOC
=DOC
val Ûz_µ_inv_convÝ : CONV;
=DESCRIBE
Simplifies a Z universal quantification whose predicate or
constraint is invariant w.r.t. the free variables bound by the declaration. 
=FRULE 1 Conversion
z_µ_inv_conv
ñµ D | P1· P2®
÷
÷
ô µ D | P1· P2 ¤ 
	(µ D | P1· false) ² P2
=TEX
if $P2$ has no free variables bound by $D$, and
=FRULE 1 Conversion
z_µ_inv_conv
ñµ D | P1· P2®
÷
÷
ô µ D | P1· P2 ¤ 
	P1 ´ (µ D | true· P2)
=TEX
if $P1$ has no free variables bound by $D$, and
=FRULE 1 Conversion
z_µ_inv_conv
ñµ D | P1· P2®
÷
÷
ô µ D | P1· P2 ¤ 
	P1 ´ (µ D | true· false) ² P2
=TEX
if both have no free variables bound by $D$.
The appropriate simplification will be avoided where the predicate $P1$, is $ñtrue®$ or the value, $P2$ is $ñfalse®$.

Remains within the Z language.
=SEEALSO
$Z\_¶\_inv\_conv$
=FAILURE
47310	?0 is not a Z universal quantification
41025	?0 is not of the form ñµ D | P1· P2® where at least
	one of P1 or P2 are unbound by D
=ENDDOC
=DOC
val Ûz_intro_µ_tacÝ : TERM -> TACTIC;
=DESCRIBE
Introduce a Z universal with reference to a binding.
=FRULE 2 Tactic
z_intro_µ_tac
ñ(x1 ¦ t1, ...)®
÷
{  } t
÷
{  } µ x1:U; ... | true· t[x1/t1,...]
=TEX
Remains within the Z language.
=FAILURE
41029	?0 cannot be interpreted to be of the form: ñ(x1 ¦ t1, ...)®
=ENDDOC
Something like the following could be added:

``If the supplied expression is a schema object then:
=FRULE 2 Tactic
z_intro_µ_tac
ñS®
÷
{  } t
÷
{  } µ S· t[x1/S.x1,...]
=TEX
where the $S.xi$ substituted for are the actual values 
bound by the schema, or the expression $¬S.xi®$.''

=DOC
val Ûz_spec_asm_tacÝ : TERM -> TERM -> TACTIC;
val Ûz_spec_nth_asm_tacÝ : int -> TERM -> TACTIC;
=DESCRIBE
These are two methods of specialising a Z universally quantified assumption.
Both leave the old assumption in place, and place the
 instantiated assumption onto the assumption list using $strip\_asm\_tac$.
If the desired behaviour differs from any of those supplied
then use $GET\_ASM\_T$ and its cousins to create the desired functionality.
=FRULE 2 Tactic
z_spec_asm_tac
ñµ D[x1,...] | P1· P2®
ñ(x1 ¦ t1, ...)®
÷
{ , ñµ D[x1,...] | P1· P2® } t
÷
{strip ¬ñD'[t1,...]® ± ñP1'® ´ ñP2'®®, 
, ñµ D | P1· P2®} t1
=TEX
where $D'$, $P1'$ and $P2'$ are specialised, and if necessary have bound variable renaming done, appropriately.
Remains within the Z language
(though failure to do this will be reported to be from
$z\_µ\_elim$).

$z\_spec\_nth\_asm\_tac$ uses an assumption number rather than an explicit statement of the assumption to be specialised.
=FAILUREC
\paragraph{Errors}
As the constituents of the implementing functions
(e.g. $GET\_ASM\_T$ and $z\_µ\_elim$).
=ENDDOC
\subsection{Concerning Z Existential Quantification}
Errors start with 4104
=DOC
val Ûz_¶_elim_convÝ : CONV;
val Ûz_¶_intro_convÝ : CONV;
=DESCRIBE
$z\_¶\_elim\_conv$ turns a Z existentially quantified predicate into
a HOL existentially quantified term.
The result fails to be in the Z language because it contains
a declaration used as a predicate, which Z does not allow,
as well as 
the outer HOL existential quantification.
=FRULE 1 Conversion
z_¶_elim_conv
ñ¶ D[x1,...] | P1· P2®
÷
÷
ô (¶ D[x1,...] | P1· P2) ¤
	¬¶ x1 ...·
	ñD[x1,...]® ± ñP1® ± ñP2®®
=TEX
The order of the resulting existentially quantified variables
will be in a sorted order, rather than what the declaration
part might suggest.
 

$Z\_¶\_intro\_conv$ undoes this process,
returning a theorem whose RHS should be in the Z language
(though this is not checked for).
=FRULE 1 Conversion
z_¶_intro_conv
¬¶ x1 ...·
	D[x1,...] ± P1 ± P2®
÷
÷
ô ¬¶ x1 ...·
	D[x1,...] ± P1 ± P2® ¤
  (¶ D[x1,...] | P1· P2)
=TEX
=USES
Used in the Z form of $strip\_tac$,
and handling negations with quantifiers.
=SEEALSO
$z\_¶\_elim\_conv1$, $z\_¶\_elim\_conv2$ and
$z\_¶\_intro\_conv1$
=FAILURE
41044	?0 is not of the form: ñ¶ D | P1· P2®
41045	?0 is not of the form: ¬¶ x1 ...· D[x1,...] ± P1 ± P2®
41041	?0 is not of the form: ¬µ x1 ...· D ± P1 ´ P2®
	where the ¬xi® do not match the declaration
=ENDDOC
=DOC
val Ûz_¶_intro_conv1Ý : CONV;
=DESCRIBE
$Z\_¶\_intro\_conv1$ converts an arbitrary simple HOL existentially quantified term into the corresponding Z,
returning a theorem whose RHS should be in the Z language
(though this is not checked for).
=FRULE 1 Conversion
z_¶_intro_conv1
¬¶ x1 ...· P®
÷
÷
ô ¬¶ x1 ...· P® ¤
  (¶ x1:U; ... | true· P)
=TEX
=SEEALSO
$z\_¶\_intro\_conv$
=FAILURE
41046	?0 is not of the form ¬¶ x1 ... · P®
=ENDDOC
=DOC
val Ûz_¶_elim_conv1Ý : CONV;
=DESCRIBE
Turn a Z existentially quantified predicate into
a HOL existentially quantified term,
eliminating the declaration part of the original quantification using $\_u\_conv$.
The function fails if the declaration cannot be eliminated.
=FRULE 1 Conversion
z_¶_elim_conv1
ñ¶ D[x1,...] | P1· P2®
÷
÷
ô (¶ D[x1,...] | P1· P2) ¤
	¬¶ x1 ...· ñP1 ± P2®®
=TEX
The order of the resulting existentially quantified variables
will be in a sorted order, rather than what the declaration
part might suggest.
 
Simplifications based on $Pi$ being $true$ or $false$
will also be applied.
=USES
For stripping proof contexts.
=FAILURE
41042	?0 is not of the form: ñ¶ D | P1· P2®
41043	?0 is of the form: ñ¶ D | P1· P2®, but D non-trivial
=ENDDOC
=DOC
val Ûz_¶_elim_conv2Ý : CONV;
=DESCRIBE
Turn a Z existentially quantified predicate into
a HOL existentially quantified term,
converting the declaration part of the original quantification into a predicate.
=FRULE 1 Conversion
z_¶_elim_conv1
ñ¶ D[x1,...] | P1· P2®
÷
÷
ô (¶ D[x1,...] | P1· P2) ¤
	¬¶ x1 ...· 
	ñ"D[x1,...] as a predicate" ±
	 P1 ± P2®®
=TEX
The order of the resulting existentially quantified variables
will be in a sorted order, rather than what the declaration
part might suggest.

The result fails to be within the Z language,
but only due to the outer HOL existential quantification.
=FAILURE
41042	?0 is not of the form: ñ¶ D | P1· P2®
=ENDDOC

=DOC
val Ûz_¶1_convÝ : CONV;
=DESCRIBE
Converts a Z unique existential quantification to a Z existential quantification. 
=FRULE 1 Conversion
z_¶1_conv 
ñ¶1 D | P1· P2®
÷
÷
ô (¶1 D | P1· P2) 
¤ 
(¶ D | P1· P2 ±
(µ D' | P1' ± P2'· 
"characteristic tuples 
 component-wise equal"))
=TEX
where the $Pi'$ are variants of the $Pi$, to
correspond to the difference between $D$ and $D'$.

Additional decoration may be introduced as necessary to 
avoid free variable names, while maintaining an ``even'' decoration.

Remains within the Z language.
=EXAMPLE
z_¶1_conv ñ ¶1 [x,y : X; z:Y] | x = x' y· z = f x®;
  -->
ô (¶1 [x, y : X; z : Y | true] | x = x' y· z = f x)
  ¤ (¶ [x, y : X; z : Y | true]
    | (x = x' y) ± (z = f x)
· µ [x, y : X; z : Y | true]''
      | (x'' = x' y'') ± (z'' = f x'')
· (x'' = x) ± (y'' = y) ± (z'' = z))
=FAILURE
41122	?0 is not of the form: ñ¶1D | P1· P2®
=ENDDOC
=DOC
val Ûz_¶_tacÝ : TERM -> TACTIC ;
=DESCRIBE
Given a binding of identifiers to witnesses,
accept this as a ``group witness'' for a Z existentially
quantified goal.
=FRULE 2 Tactic
z_¶_tac
ñ(x1 ¦ t1,...) ®
÷
{  } ¶ D[x1,...] | P1[x1,...]· P2[x1,...]
÷
{  } "D[t1',...] as predicate" ± 
	P1'[t1',...] ± P2'[t1',...]
=TEX
where the $ti'$ are appropriately type instantiated
forms of the $ti$.
Renaming of bound variables may be necessary, thus $P1'$
rather than $P1$, etc.
See $dec\_pred\_conv$ for the conversion of a declaration to a predicate.

Remains within the Z language.

An empty declaration may be given an empty binding.

If the goal's conclusion has a single Z existentially bound variable, and the supplied argument can be type instantiated to match that, then it will be used as a witness.
=FRULE 2 Tactic
z_¶_tac
ñt®
÷
{  } ¶ x:X | P1[x1]· P2[x1]
÷
{  } t'  X ± P1'[t'] ± P2'[t']
=TEX
where $t'$ is an appropriately type instantiated
form of the $t$.

Finally, if none of the above apply, the supplied binding may instead be 
anything else that can be type instantiated to the appropriate binding type.
In such cases projection functions will be used:
=FRULE 2 Tactic
z_¶_tac
ñt®
÷
{  } ¶ D[x1,...] | P1[x1,...]· P2[x1,...]
÷
{  } "D[t.x1',...] as predicate" ± 
	P1'[t'.x1,...] ± P2'[t'.x1,...]
=TEX
where $t'$ is an appropriately type instantiated
form of the $t$.
=FAILURE
47290	?0 is not a Z existential quantification
41021	?0 cannot be interpreted as a binding that matches ?1
=ENDDOC
=DOC
val Ûz_¶_inv_convÝ : CONV;
=DESCRIBE
Simplifies a Z existential quantification whose predicate or
constraint is invariant w.r.t. the free variables bound by the declaration. 
=FRULE 1 Conversion
z_¶_inv_conv
ñ¶ D | P1· P2®
÷
÷
ô ¶ D | P1· P2 ¤
	 (¶ D | P1· true) ± P2
=TEX
if $P2$  has no free variables bound by $D$, and
=FRULE 1 Conversion
z_¶_inv_conv
ñ¶ D | P1· P2®
÷
÷
ô ¶ D | P1· P2 ¤ 
	P1 ± (¶ D | true· P2)
=TEX
if $P1$  has no free variables bound by $D$, and
=FRULE 1 Conversion
z_¶_inv_conv
ñ¶ D | P1· P2®
÷
÷
ô ¶ D | P1· P2 ¤ 
	P1 ± (¶ D | true· true) ± P2
=TEX
if both have no free variables bound by $D$.

Remains within the Z language.

$P1$ nor $P2$ will be ``extracted'' if identical to $true$.
=SEEALSO
$Z\_µ\_inv\_conv$
=FAILURE
47290	?0 is not a Z existential quantification
41040	?0 is not of the form ñ¶ D | P1· P2® where at least
	one of P1 or P2 are unbound by D
=ENDDOC

\subsection{Concerning Í}
=DOC
val Ûz_Í_ruleÝ : TERM -> THM;
=DESCRIBE
This rule is given a Z $Í$ expression (i.e. a Z definite description), and returns a theorem
that states what is required for this $Í$ expression
to be equal to some value, $x$.
The requirement is
that if any value satisfies the schema text of the $Í$ expression
then it must equal $x$,
and that $x$ satisfies the schema text of the $Í$ expression.
=FRULE 1 Rule
z_Í_rule
ñÍ D | P· V®
÷
÷
ô ¬µ x·
 ñ (µ D' | P'· V' = x) ±
   (¶ D' | P'· V' = x)
   ´
   (Í D | P· V) = x®®
=TEX
Remains within the Z language.
The result may require bound variable renaming and thus the priming of $D$, etc.
=FAILURE
47210	?0 is not a Z Í term
=ENDDOC
There may be a flaw in the mapping that allows us to do this!
\subsection{Concerning Function Application}
Errors start with 4109
=DOC
val Ûz_app_convÝ : CONV;
=DESCRIBE
A function to convert a Z application into the
corresponding $Í$ expression (i.e. definite description).
=FRULE 1 Conversion
z_app_conv
ñf a®
÷
÷
ô f a = (Í f_a :U | (a,f_a)  f· f_a) 
=TEX
Remains within the Z language though this is not checked.
=SEEALSO 
$z\_app\_rule$, $z\_app\_tac$
=FAILURE
47190	?0 is not a Z function application
=ENDDOC
=DOC
val Ûz_app_ruleÝ : TERM -> THM;
=DESCRIBE
A rule that, given a Z application, returns a theorem that states sufficient conditions to prove that the application
is equal to an arbitrary variable.
=FRULE 1 Rule
z_app_rule
ñf a®
÷
÷
ô ¬µ x· 
  ñµ f_a : U | (a, f_a)  f· f_a = x ± 
     (a, x)  f
      ´ f a = x®®
=TEX
$x$ will be renamed to be distinct from any variables in the
supplied expression.

Remains within the Z language.
=USES
In implementing methods of reasoning about applications.
=SEEALSO
$z\_app\_conv$, $z\_app\_tac$
=FAILURE
47190	?0 is not a Z function application
=ENDDOC
=DOC
val Ûz_app_tacÝ : TACTIC;
=DESCRIBE
Reduces a subgoal that states a Z application is equal to
something to sufficient conditions for this to be provable.
The conditions are not ``necessary'' only because they
ignore the fact that in ProofPower Z every predicate or expression is 
equal to itself, and other vacuous variants of this.
=FRULE 2 Tactic
z_app_tac
÷
{} f a = v
÷
{} (µ f_a : U | (a, f_a)  f· f_a = v)
	± (a,v)  f
=TEX
If this does not match the pattern of the goal then
=FRULE 2 Tactic
z_app_tac
÷
{} v = f a
÷
{} (µ f_a : U | (a, f_a)  f· f_a = v)
	± (a,v)  f
=TEX
will be tried instead.
In addition an implicit ``$=\ true$'' will be used
if the conclusion of the goal is an application.

Remains within the Z language.
=FAILURE
41090	Goal is not of the forms: ñf a = v® or ñv = f a®
=ENDDOC
There may be a flaw in the mapping that allows us to do these!
\subsection{Concerning Ì}
Errors begin with 4111
=DOC
val Ûz_Ì_convÝ : CONV;
=DESCRIBE
Convert a Z $Ì$ abstraction into a set abstraction.
=FRULE 1 Conversion
z_Ì_conv
ñÌ D | P· V®
÷
÷
ô (Ì D | P· V) = { D | P· (charD,V)}
=TEX
Where $charD$ is the characteristic tuple of $D$.

Remains within the Z language.
=SEEALSO
$z\_Â\_rule$, $z\_Â\_tac$
=FAILURE
47200	?0 is not a Z Ì abstraction
=ENDDOC
=DOC
val Ûz_Â_ruleÝ : TERM -> THM;
=DESCRIBE
Given a Z $Â$ redex this function will return a theorem
stating sufficient conditions for this redex
to be proven equal to some arbitrary value.
=FRULE 1 Rule
z_Â_rule
ñ(Ì D | P· V) t®
÷
÷
ô ¬µ x· ñ(µ f_a :U | (¶ D' | P'· 
charD' = t ± V' = f_a) · f_a = x)
  ±
  (¶ D' | P'· (charD' = t) ± V' = x)
  ´
  (Ì D | P· V) t = x®®
=TEX
Remains within the Z language.
Some renaming of bound variables may occur, thus the priming
of $D$, etc.
=FAILURE
41110	?0 is not of the form ñ(Ì D | P· V) t®
=ENDDOC
=DOC
val Ûz_Â_convÝ : CONV;
=DESCRIBE
Given a simple Z $Â$ redex this function will return a theorem
stating sufficient conditions for this redex
to be proven equal to some arbitrary value.
The $Ì$ must have only a single variable in its declaration
part. 
=FRULE 1 Conversion
z_Â_conv
ñ(Ì x:X | P[x]· V[x]) t®
÷
÷
t  X,
P[t]
ô  (Ì x:X | P[x]· V[x]) t = V'[t]
=TEX
The assumptions will be eliminated if trivial
(i.e. if the first assumption can be proven true by $\_u\_conv$,
the second if the assumption is just $ñtrue®$).
Some renaming of bound variables may occur, thus the priming
of $V$.
Remains within the Z language.
=FAILURE
41111	?0 is not of the form ñ(Ì x:X | P· V) t®
=ENDDOC
Later releases could make this function more intelligent.

\subsection{Conversions between Z Universal and Existential Quantifications}
Errors start with 4105
=DOC
val Ûz_³_µ_convÝ : CONV;
val Ûz_³_¶_convÝ : CONV;
=DESCRIBE
$z\_³\_µ\_conv$ converts a negated Z universal quantification to a Z existential quantification.
=FRULE 1 Conversion
³_z_µ_conv 
ñ³(µ D | P1· P2)®
÷
÷
ô ³(µ D | P1· P2) ¤ 
	(¶ D | P1· ³ P2)
=TEX
The dual is $z\_³\_¶\_conv$:
=FRULE 1 Conversion
z_³_¶_conv 
ñ³(¶ D | P1· P2)®
÷
÷
ô ³(¶ D | P1· P2) ¤ 
	(µ D | P1· ³ P2)
=TEX
These two functions remain within the Z language, though this is not checked.
=FAILURE
41050	?0 not of the form: ñ³(µ D | P1· P2)®
41051	?0 not of the form: ñ³(¶ D | P1· P2)®
=ENDDOC
We are not immediately interested in providing support for pulling
out $³$.

We are now in a position to give:
=DOC
val Ûz_³_in_convÝ : CONV;
=DESCRIBE
This is a conversion which moves an outermost negation inside other Z predicate
calculus connectives using whichever of the following rules applies:
=GFT
		³³t			=	t
		³(t1 ± t2)		=	³t1 ² ³t2
		³(t1 ² t2)		=	³t1 ± ³t2
		³(t1 ´ t2)		=	t1 ± ³t2
		³(t1 ¤ t1)		=	false
		³(t1 ¤ t2)		=	(t1 ± ³t2) ² (t2 ± ³t1)
		³(t1 = t1)		=	false
		³(µ D | P· V) 	=	¶ D | P· ³ V
		³(¶D | P· V)		=	µ D | P· ³ V
		³(¶1 D|P· V)	=	µD|P·³(V ± µD'|P'·V' ´ D = D')
		³true			=	false
		³false			=	true
=TEX
Remains within the Z language.
=USES
Tactic and conversion programming.
=FAILURE
47240	?0 is not a Z negation
28131	No applicable rules for the term ?0
=ENDDOC

\subsection{Conversions betweens Declarations and Predicates}
Errors start with 4101.
=DOC
val Ûdec_pred_convÝ : CONV;
=DESCRIBE
A conversion which rewrites a $dec$ type of declaration to a predicate. A $decsexp$ type of declaration remains unchanged (since $decsexp$ and $predsexp$ are, in fact, the same thing). 
=FRULE 1 Conversion
dec_pred_conv 
¬x : X®
÷
÷
ô ¬(x : X)® ¤ x  X
=TEX
and
=FRULE 1 Conversion
dec_pred_conv 
¬x1, ... : X®
÷
÷
ô ¬(x1, ... : X)® ¤ {x1,...}  X
=TEX
and
=FRULE 1 Conversion
dec_pred_conv 
ñS® 
÷
÷
ô S ¤ S
=TEX
where S is a schema (here promoted to a predicate).

Note that a declaration on its own is not a Z expression,
though it may be correctly embedded within certain
forms of Z expressions.
=SEEALSO
$pred\_dec\_conv$
=FAILURE
41010	?0 is not a declaration
=ENDDOC

=DOC
val ÛDECL_CÝ : CONV -> CONV;
=DESCRIBE
$DECL\_C$ applies the supplied conversion to each member of a declaration and returns the conjunction of the results.
It fails if its conversion fails on any member of the declaration.

=INLINEFT
DECL_C dec_pred_conv
=TEX
{} will convert a valid Z declaration into a Z predicate.
=FAILURE
47912	?0 is not a Z declaration
41012	Supplied conversion failed on one or more members of ?0
=ENDDOC

=DOC
val Ûpred_dec_convÝ : CONV;
=DESCRIBE
A conversion which rewrites to declarations the four cases: set membership, subsetting, schema promoted to predicate and $Ê$ expression.
=FRULE 1 Conversion
pred_dec_conv ñx  X®
÷
÷
ô x  X ¤ (x : X)
=TEX
where the $x$ must be variable,
and
=FRULE 1 Conversion
pred_dec_conv ñ{x1,...}  X®
÷
÷
ô {x1,...}  X ¤ (x1,... : X)
=TEX
where the $xi$ must be variables,
and
=FRULE 1 Conversion
pred_dec_conv ñS® 
÷
÷
ô S ¤ S
=TEX
and
=FRULE 1 Conversion
pred_dec_conv ñÊS  S® 
÷
÷
ô (ÊS  S) ¤ S
=TEX
=SEEALSO
$dec\_pred\_conv$
=FAILURE
41011	?0 cannot be rewritten to a declaration
=ENDDOC

=DOC
val ÛDECL_INTRO_CÝ : CONV -> CONV;
=DESCRIBE
$DECL\_INTRO\_C$ applies the supplied conversion to each conjunct of a predicate, flattening the conjunctive structure.
If this is successful, it attempts to produce a declaration from the results.

=INLINEFT
DECL_INTRO_C pred_dec_conv
=TEX
{} will convert certain Z predicates into Z declarations,
and otherwise will fail.
=FAILURE
41013	?0 not of the form: ñ c1 ± ...® where all the ci
	may have the supplied conversion applied
41014	?0 when converted to ?1 cannot be viewed as a declaration
=FAILUREC
The conversion fails if the supplied conversion fails on any conjunct,
returning the error message of that conversion application.
=ENDDOC
The following two functions are introduced here
to allow reasoning about
set displays derived from declarations.
They would otherwise be put in \cite{DS/FMU/IED/DTD042}.
=DOC
val Ûz__setd_convÝ : CONV;
=DESCRIBE
A conversion of membership of a Z set display into equality with a member of the set.
=FRULE 1 Conversion
Z__setd_conv 
ñt  { t1, t2, ...}®
÷
÷
ô t  { t1, t2, ...} =
((t = t1) ² (t = t2) ...)
=TEX
Remains within the Z language.
=SEEALSO
$z\_\_setd\_conv1$
=FAILURE
42002	?0 is not of the form: ñx  {t1,...}®
42008	?0 is an ill-formed fragment of the membership of a set display
=ENDDOC

=DOC
val Ûz_setd__convÝ : CONV
=DESCRIBE
Expand out expressions that state that a set display
is a subset of some other set.
This is particularly aimed at processing declarations
of the form 
=INLINEFT
x1,...,xn : X
=TEX
{}.
=FRULE 1 Conversion
z_setd__conv
ñ{x1,...}  X®
÷
÷
ñ{x1,...}  X ¤
(x1  X ± ...) 
=TEX
and
=FRULE 1 Conversion
z_setd__conv
ñ{}  X®
÷
÷
ñ{}  X ¤ true
=TEX
The conversion will all simplify certain subterms involving
$true$ or terms of the form $x\_=\_x$.

Remains within the Z language.
=FAILURE
42010	?0 is not of the form ñ{x1,...}  X®
=ENDDOC

\subsection{Eliminating Z Quantifiers}
=DOC
val Ûz_quantifiers_elim_tacÝ : TACTIC;
=DESCRIBE
This tactic eliminates all Z $µ$, $¶$ and $¶1$ quantifiers
in both conclusion and assumptions,
in favour of HOL $µ$ and $¶$,
using $z\-\_µ\-\_elim\-\_conv$, $z\-\_¶\-\_elim\-\_conv$,
 $z\-\_¶1\-\_conv1$.
All declarations introduced will be converted to Z predicates,
and the following simplifications also done throughout: 
=GFT
ñ{x,y,...}  s®  ---> ¬x  s ± y  s ± ...® 
	(* only when the set display contains just variables *)
ñx ± true®  ---> ¬x®
ñtrue ± x®  ---> ¬x®
ñx ´ true®  ---> ¬true®
=TEX
All assumptions will be stripped back into the assumption
list, regardless of whether they were modified,
using the current proof context.

This is done to prepare for some further processing, such 
as resolution.
The result is unlikely to be in the Z language,
and is only intended for implementing automated proof
procedures.
It has no effect 
(rather than failing) if there are no conversions to be done.
=ENDDOC
\section{Z REWRITING}
\subsection{Canonicalisation}
Errors begin with 4108
=DOC
val Ûz_defn_canonÝ : CANON;
val Ûz_defn_convÝ : CONV;
=DESCRIBE
Some definitions entered by the Z parser have ``markers''
applied to the rest of the theorem body to indicate their origin.
$z\-\_defn\-\_canon$ is a canonicalistisation function that removes these markers,
$z\-\_defn\-\_conv$ is a conversion that removes them.

The following are instances in which markers are used:
=GFT
Constraint Definitions
Free Type Definitions
Given Set Definitions
Axiomatic Definitions
Schema Boxes
Abbreviation Definitions
=TEX
Remains within the Z language, though this is not checked.
=FAILURE
41080	No Z markers found applied to conclusion body of ?0
41082	No Z markers found applied to body of ?0
=ENDDOC
=DOC
val Ûz_µ_rewrite_canonÝ : CANON;
=DESCRIBE
Take a possibly Z universally quantified theorem and
make it into, as far as possible, a HOL universally quantified
theorem usable for rewriting.
Simplifications due to $U$ and $true$ will be carried out.
=FRULE 1 Canon
z_µ_rewrite_canon
÷
 ô ñ(µ D[x1,...] | P1· P2)®
÷
[ ô ¬µ x1 ...· 
	ñ"D[x1,...] as predicate"
	± P1 ´ P2®®]
=TEX
where if any portion of the body of the result can be simplified away due to $U$, $true$ or $false$ it will be.

Remains within the Z language
(under the relaxation that allows outermost HOL universals), though this is not checked.
=SEEALSO
$z\_defn\_canon$
=FAILURE
41081	?0 is not of the form: ñ(µ D | P1· P2)®
=ENDDOC
=DOC
val Ûz_³_rewrite_canonÝ : THM -> THM list
=DESCRIBE
This is a canonicalisation function used for breaking theorems up into
lists of equations for use in rewriting. It performs the following
transformations:
=GFT
z_³_rewrite_canon	( ô ³(t1 ² t2))	= ( ô ³t1 ± ³t2)	
z_³_rewrite_canon	( ô ³¶D | P· V)	= ( ô µD | P· ³V)	
z_³_rewrite_canon	( ô ³³t)		= ( ô t)
z_³_rewrite_canon	( ô ³t)		= ( ô t ¤ false)	
=TEX
Remains within the Z language, though this is not checked.
=SEEALSO
$simple\_³\_rewrite\_canon$, $simple\_µ\_rewrite\_canon$.
=FAILURE
26201	Failed as requested
=FAILUREC
The area given by the failure will be $fail\_canon$.
=ENDDOC
Should this recognise 
=INLINEFT
ô ³ (¶1 ...)
=TEX
?

\subsection{Conditional Rewriting}
This is a yet to be implemented part of the HOL system,
that may have some Z specific features.
\section{Z STRIPPING AND PROOF CONTEXTS}
=DOC
val Ûz_basic_prove_tacÝ : THM list -> TACTIC;
=DESCRIBE
This is the tactic used for the automated proof tactic (the $pr\_tac$ field) of most
supplied Z proof contexts,
and is a reasonable, general-purpose, automatic proof tactic
for Z.

In summary it will:
\begin{enumerate}
\item
Extract the assumption list, rewrite each extracted assumption with the current
default rewrite rules and given theorems, and strip the results back into the assumption list.
\item
Attempt to rewrite the resulting goal's conclusions with the current
default rewrite rules and given theorems.
\item
Repeatedly apply $strip\_tac$ to the conclusions of the resulting goals.
\item
In all resulting goals replace all Z quantifiers by their HOL equivalents in both assumptions and goal. 
This has no effect on any resulting goal if it is unsolved.
\item
Apply $all\_asm\_fc\_tac$ once to each resulting goal.
\item
Attempt to prove each of the resulting goals with resolution for up to 3 resolution steps, with goal's negated conclusion
as a resolvant that must be used, and the assumptions as possible
other resolvants.
This has no effect on any resulting goal if it is unsolved.
\item
Attempt to prove each of the resulting goals with resolution for up to 3 resolution steps amongst
just the assumptions.
This has no effect on any resulting goal if it is unsolved.
\end{enumerate}

Note that either stripping step may result in more than one subgoal, and thus the plural ``resulting goals''.

Under the current interface to
resolution this is
=GFT
fun z_basic_prove_tac thms =
DROP_ASMS_T (MAP_EVERY (strip_asm_tac o rewrite_rule thms) o rev) THEN
(TRY_T (rewrite_tac thms)) THEN
REPEAT strip_tac THEN_TRY
(z_quantifiers_elim_tac
 THEN basic_res_tac2 3 [ô µ x · x = x] 
 ORELSE_T basic_res_tac3 3 [ô µ x · x = x]);
=TEX
=ENDDOC
The ``3 resolution steps'' is a fixed number of steps, chosen as a compromise between finding all possible resolution proofs
and the costs of such attempts.
For finer tuning, use the resolution package more directly.
=DOC
val Ûz_basic_prove_convÝ : THM list -> CONV;
=DESCRIBE
This is the conversion used for the automatic proof conversion ($pr\_tac$ field) of most
supplied proof contexts,
and is a reasonable, general-purpose, automatic proof conversion.
It will either prove the theorem with the given conclusion, or fail.

In summary it will:
\begin{enumerate}
\item
Set the term as the goal of the subgoal package.
\item
Attempt to rewrite the term with the current
default rewrite rules and given theorems.
\item
Repeatedly apply $strip\_tac$ to the goal.
\item
In all resulting goals replace all Z quantifiers by their HOL equivalents in both assumptions and goal.
\item
Apply $all\_asm\_fc\_tac$ once to each resulting goal.
\item
Attempt to prove the resulting goals with resolution for up to 3 resolution steps, with goal's negated conclusion
as a resolvant that must be used, and the assumptions as possible
other resolvants.
\item
Attempt to prove the resulting goals with resolution for up to 3 resolution steps amongst
just the assumptions.
\item
If the proof is successful, return 
=INLINEFT
ô term ¤ T
=TEX
{} and otherwise fail.
\end{enumerate}

Note that in the stripping step may result in more than one subgoal, and thus the plural ``resulting goals''.

Under the current interface to
resolution this equivalent to:
=GFT
fun z_basic_prove_conv thms tm =
¤_t_intro (
tac_proof(([],tm),
	TRY_T (rewrite_tac thms)  THEN 
	REPEAT strip_tac THEN
	(z_quantifiers_elim_tac THEN
	basic_res_tac2 3 [ô µ x · x = x] 
	ORELSE_T basic_res_tac3 3 [ô µ x · x = x]))
);
=TEX
In the implementation however, partial evaluation with just the theorems is allowed.
=FAILURE
76001	Could not prove theorem with conclusion ?0
=ENDDOC

=DOC
(* Proof Context: Ûz_predicatesÝ *)
=DESCRIBE
A complete proof context for handling the requirements of the Z predicates of the Z language
(as opposed to the mathematical tool-kit).
\paragraph{Contents}\ 

Rewriting:
=GFT
¤_rewrite_thm, ³_rewrite_thm,  eq_rewrite_thm, ±_rewrite_thm, ²_rewrite_thm, 
µ_rewrite_thm, ´_rewrite_thm, _u_thm, u_conv, z_µ_inv_conv, 
z_¶_inv_conv, simplifications as z_defn_canon
=TEX
Stripping theorems:
=GFT
z_³_in_conv, z_¶_elim_conv, z_¶1_conv, 
_u_conv, _u_conv pushed in ³, z_µ_inv_conv, 
DECL_C dec_pred_conv, ´_thm, ¤_thm, µ_rewrite_thm, eq_rewrite_thm, 
simplifications as z_defn_canon
=TEX
Note that we only break apart a Z $µ$ into HOL quantifiers
if the declaration will be eliminated.

Stripping conclusions:
=GFT
z_µ_elim_conv THEN_C 
	ALL_SIMPLE_µ_C(LEFT_C(LEFT_C(DECL_C dec_pred_conv)))),
z_¶1_conv, z_³_in_conv, _u_conv, _u_conv pushed in ³,
z_¶_inv_conv, ¤_thm, eq_rewrite_thm,
`ô µa b·(a ² ³b) ¤ (b ´ a)`, `ô µ a b· ³ a ² b ¤ a ´ b`
`ô µ a b· a ² b ¤ ³ a ´ b`
simplifications as z_defn_canon
=TEX
Note that we never break apart a Z $¶$ into HOL quantifiers.

Rewriting canonicalisation:
=GFT
µ_rewrite_canon, z_³_rewrite_canon, ±_rewrite_canon, 
f_rewrite_canon, z_µ_rewrite_canon, z_defn_canon
=TEX
Notice in particular the use of the HOL $µ\_rewrite\_canon$.

Automatic proof procedures are respectively $z\-\_basic\-\_prove\-\_tac$,
$z\-\_basic\-\_prove\-\_conv$,
and
the list
=GFT
z_¶_elim_conv,
ALL_SIMPLE_¶_C ``simplifications as z_defn_canon'',
basic_prove_¶_conv
=TEX
\paragraph{Usage Notes}
It requires theory $z\-\_predicate\-\_calculus$.
It is not intended to be mixed with HOL proof contexts.
Use with proof context ``$'$z$\_$decl'' to handle declarations
properly.
=ENDDOC

This proof context
will allow $strip\_tac$ to remain within the Z language
on each of its steps, though with the caveat noted in \ref{ZCAVEAT}.

$step\_strip\_tac$ is able to
leave the Z language, which it does for 
stripping
a Z existentially quantified antecedent to an implication.
However, 
=INLINEFT
REPEAT step_strip_tac
=TEX
{} will remain within the Z language if its argument starts there.

Note that rewriting does not expand Z $¶1$-terms.

The proof context does not concern itself with schema references,
though these are Z language predicates.

Treating the universal set, $U$, in this proof context is 
apparently not in keeping with the context's theme,
but it is useful to handle trivial quantifier
declarations. Such material could be moved to proof context ``$'$z$\_$decl''.

=DOC
(* Proof Context: Û'z_declÝ *)
=DESCRIBE
A component proof context for handling the requirements of Z declarations as predicates, due to this introducing a small 
portion of set theoretic reasoning.
\paragraph{Contents}\ 

Rewriting:
=GFT
=TEX
Stripping theorems:
=GFT
z_setd__conv when the set display contains only variables,
and this pushed in through $³$.
=TEX

Stripping conclusions:
=GFT
z_setd__conv when the set display contains only variables,
and this pushed in through $³$.
=TEX
Note that we never break apart a Z $¶$ into HOL quantifiers.

Rewriting canonicalisation:
=GFT
=TEX
Automatic proof procedures are respectively $z\-\_basic\-\_prove\-\_tac$,
$z\-\_basic\-\_prove\-\_conv$,
and
no existence provers.
\paragraph{Usage Notes}
It requires theory $z\-\_predicate\-\_calculus$.
It is not intended to be mixed with HOL proof contexts.
Used with proof context ``z$\_$predicates'' to handle declarations
properly.
=ENDDOC

\subsection{Z Contradiction Tactics}
The tactics supplied for HOL contradiction tactics extend to Z without
change, if appropriate proof contexts are used.
\section{END OF THE SIGNATURE}

=SML
end; (* signature of ZPredicateCalculus *)
=TEX

\section{TEST POLICY}
The functions in this document should be tested as described in
\cite{DS/FMU/IED/PLN008}.

\twocolumn[\section{INDEX}]
\small
\printindex
\end{document}







