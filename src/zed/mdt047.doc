=TEX
\documentstyle[hol,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Module Tests for Z Types and Terms}  %% Mandatory field
\def\TPPheadtitle{Module Tests for Types and Terms}
\TPPref{DS/FMU/IED/MDT047}  %% Mandatory field
\def\SCCSversion{$Revision$ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$ %
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{ML Literate Script}
\TPPkeywords{}
\TPPauthor{G.T.Scullard & MAN05}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.Arthan & FST Team Leader}
\TPPabstract{A set of module tests are given for the 
the constructors, destructors and discriminators of Z terms and types.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Library
}}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : International Computers Ltd \number\year
\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History} 
\begin{description}
\item [Issue \SCCSversion (\TPPdate{\FormatDate{$Date$
}})]
First drafts.
\end{description}
%\subsection{Changes Forecast}
\section{GENERAL}
\subsection{Scope}
This document contains the module testing of the type and term constructors, destructors and discriminators for Z in ICL HOL}.
The design is in \cite{DS/FMU/IED/DTD473}
and it is
implemented in \cite{DS/FMU/IED/IMP473}.

\subsection{Introduction}
\subsubsection{Purpose and Background}
This document contains the module testing of the material given a design in \cite{DS/FMU/IED/DTD047},
following the test policy given in that document and the general policy given in \cite{DS/FMU/IED/PLN008}.

\subsubsection{Dependencies}
This document is derived from the detailed design in \cite{DS/FMU/IED/DTD047},
and is further influenced by the implementation, in  \cite{DS/FMU/IED/IMP047}.
It relies on a term pretty-printer being present to format
the results of error messages.
\subsubsection{Deficiencies}
None known.
\section{TEST CASES}
We test each function of the signature of \cite{DS/FMU/IED/DTD047}
in turn, where possible in the same order as in the design document,
except for those exceptions noted in section \ref{untested}.
\section{TEST HARNESS MATERIAL}
=SML
usefile "dtd013.sml";
usefile "imp013.sml";
init_mt_results ();
=TEX
\section{TEST DATA}
This section contains data used in the test, that
in themselves are not part of the tests.
However, they may fail if the functions tested are ill-formed.
=SML
=TEX
\section{THE TESTS}
\subsection{Name Destruction}
We check that the names of our internally generated constants, types etc. can be correctly analysed into basic name and component names.
=SML
store_mt_results mt_run [(
	"dest_Z_name 1",
	dest_Z_name,
	"Abcd",
	("Abcd",[])
	),(
	"dest_Z_name 2",
	dest_Z_name,
	"Abcd[]",
	("Abcd",[[]])
	),(
	"dest_Z_name 3",
	dest_Z_name,
	"Abcd[w]",
	("Abcd",[["w"]])
	),(
	"dest_Z_name 4",
	dest_Z_name,
	"Abcd[w,x,y,z]",
	("Abcd",[["w","x","y","z"]])
	),(
	"dest_Z_name 5",
	dest_Z_name,
	"Abcd[w,x,y,z][p,q,r]",
	("Abcd",[["w","x","y","z"],["p","q","r"]])
	),(
	"dest_Z_name 6",
	dest_Z_name,
	"Abcd[w,x,y,z][]",
	("Abcd",[["w","x","y","z"],[]])
	),(
	"dest_Z_name 7",
	dest_Z_name,
	"Abcd[][p,q,r]",
	("Abcd",[[],["p","q","r"]])
	)
];
=TEX
\subsection{Tests on Types}
\subsubsection{mk\_ZgivenT}
=SML
store_mt_results mt_run [(
	"mk_ZgivenT 1",
	mk_ZgivenT,
	"a",
	mk_ctype("a",[])
	)
];
=TEX
\subsubsection{is\_ZgivenT}
=SML
store_mt_results mt_run [(
	"is_ZgivenT 1",
	is_ZgivenT,
	mk_ctype("a",[]),
	true
	),(
	"is_ZgivenT 2",
	is_ZgivenT,
	mk_ctype("a",[mk_vartype "'a"]),
	false
	),(
	"is_ZgivenT 3",
	is_ZgivenT,
	mk_vartype "'a",
	false
	)
];
=TEX
\subsubsection{dest\_ZgivenT}
=SML
store_mt_results mt_run [(
	"dest_ZgivenT 1",
	dest_ZgivenT,
	mk_ctype("a",[]),
	"a"
	)
];
store_mt_results mt_run_fail [(
	"dest_ZgivenT f1",
	dest_ZgivenT,
	mk_ctype("a",[mk_vartype "'a"]),
	gen_fail_msg "dest_ZgivenT" 47010 ["»:'a a¼"]
	),(
	"dest_ZgivenT f2",
	dest_ZgivenT,
	mk_vartype "'a",
	gen_fail_msg "dest_ZgivenT" 47010 ["»:'a¼"]
	)
];
=TEX
\subsubsection{mk\_ZvarT}
=SML
store_mt_results mt_run [(
	"mk_ZvarT 1",
	mk_ZvarT,
	"a",
	mk_vartype "'a"
	)
];
=TEX
\subsubsection{is\_ZvarT}
=SML
store_mt_results mt_run [(
	"is_ZvarT 1",
	is_ZvarT,
	mk_vartype "'a",
	true
	),(
	"is_ZvarT 2",
	is_ZvarT,
	mk_ctype("a",[]),
	false
	),(
	"is_ZvarT 3",
	is_ZvarT,
	mk_ctype("a",[mk_vartype "'a"]),
	false
	)
];
=TEX
\subsubsection{dest\_ZvarT}
=SML
store_mt_results mt_run [(
	"dest_ZvarT 1",
	dest_ZvarT,
	mk_vartype "'a",
	"a"
	)
];
store_mt_results mt_run_fail [(
	"dest_ZvarT f1",
	dest_ZvarT,
	mk_ctype("a",[]),
	gen_fail_msg "dest_ZvarT" 47020 ["»:a¼"]
	),(
	"dest_ZvarT f2",
	dest_ZvarT,
	mk_ctype("a",[mk_vartype "'a"]),
	gen_fail_msg "dest_ZvarT" 47020 ["»:'a a¼"]
	)
];
=TEX
\subsubsection{mk\_ZpowerT}
=SML
store_mt_results mt_run [(
	"mk_ZpowerT 1",
	mk_ZpowerT,
	mk_ctype("a",[]),
	mk_ctype("‘",[mk_ctype("a",[])])
	)
];
=TEX
\subsubsection{is\_ZpowerT}
=SML
store_mt_results mt_run [(
	"is_ZpowerT 1",
	is_ZpowerT,
	mk_ctype("‘",[mk_ctype("a",[])]),
	true
	),(
	"is_ZpowerT 2",
	is_ZpowerT,
	mk_ctype("a",[]),
	false
	),(
	"is_ZpowerT 3",
	is_ZpowerT,
	mk_ctype("a",[mk_vartype "'a"]),
	false
	)
];
=TEX
\subsubsection{dest\_ZpowerT}
=SML
store_mt_results mt_run [(
	"dest_ZpowerT 1",
	dest_ZpowerT,
	mk_ctype("‘",[mk_ctype("a",[])]),
	mk_ctype("a",[]))
];
store_mt_results mt_run_fail [(
	"dest_ZpowerT f1",
	dest_ZpowerT,
	mk_ctype("a",[]),
	gen_fail_msg "dest_ZpowerT" 47030 ["»:a¼"]
	),(
	"dest_ZpowerT f2",
	dest_ZpowerT,
	mk_ctype("a",[mk_vartype "'a"]),
	gen_fail_msg "dest_ZpowerT" 47030 ["»:'a a¼"]
	)
];
=TEX
\subsubsection{mk\_ZtupleT}
=SML
store_mt_results mt_run [(
	"mk_ZtupleT 1",
	mk_ZtupleT,
	[mk_ctype("a",[])],
	mk_ctype("Z'T[1]",[mk_ctype("a",[])])
	),(
	"mk_ZtupleT 2",
	mk_ZtupleT,
	[mk_ctype("a",[]),mk_ctype("b",[])],
	mk_ctype("Z'T[2]",[mk_ctype("a",[]),mk_ctype("b",[])])
	),(
	"mk_ZtupleT 3",
	mk_ZtupleT,
	[mk_ctype("c",[]),mk_ctype("a",[]),mk_ctype("b",[])],
	mk_ctype("Z'T[3]",[mk_ctype("c",[]),mk_ctype("a",[]),mk_ctype("b",[])])
	)
];
=TEX
\subsubsection{is\_ZtupleT}
=SML
store_mt_results mt_run [(
	"is_ZtupleT 1",
	is_ZtupleT,
	mk_ctype("‘",[mk_ctype("a",[])]),
	true
	),(
	"is_ZtupleT 2",
	is_ZtupleT,
	mk_ctype("a",[]),
	false
	),(
	"is_ZtupleT 3",
	is_ZtupleT,
	mk_ctype("a",[mk_vartype "'a"]),
	false
	)
];
=TEX
\subsubsection{dest\_ZtupleT}
=SML
store_mt_results mt_run [(
	"dest_ZtupleT 1",
	dest_ZtupleT,
	mk_ctype("‘",[mk_ctype("a",[])]),
	mk_ctype("a",[]))
];
store_mt_results mt_run_fail [(
	"dest_ZtupleT f1",
	dest_ZtupleT,
	mk_ctype("a",[]),
	gen_fail_msg "dest_ZtupleT" 47040 ["»:a¼"]
	),(
	"dest_ZtupleT f2",
	dest_ZtupleT,
	mk_ctype("a",[mk_vartype "'a"]),
	gen_fail_msg "dest_ZtupleT" 47040 ["»:'a a¼"]
	)
];
=TEX
\subsection{Tests on Terms}
\subsection{End of Tests}
=SML
diag_string(summarize_mt_results ());
=TEX
\section{UNTESTED ERROR MESSAGES}
\label{untested}
\end{document}
