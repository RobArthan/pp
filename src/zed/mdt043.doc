=IGN
********************************************************************************
mdt043.doc: this file is part of the PPZed system

Copyright (c) 2002 Lemma 1 Ltd.

See the file LICENSE for your rights to use and change this file.

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
\TPPtitle{Module Tests for Z Language Schema Calculus}
\TPPref{DS/FMU/IED/MDT043}  %% Mandatory field
\def\SCCSversion{$Revision: 1.23 $ %
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 2002/10/17 16:26:32 $ %
}}  %% Mandatory field
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{SML Literate Script}
\TPPkeywords{}
\TPPauthor{K.~Blackburn & WIN01}  %% Mandatory field
%\TPPauthors{R.D.~Arthan & WIN01 \\ K.~Blackburn & WIN01}
\TPPauthorisation{R.D.Arthan & FST Team Leader}
\TPPabstract{This document gives the module tests for the 
Z Language Schema Calculus and their proof support.}
\TPPdistribution{\parbox[t]{4.0in}{%
	    Project Library
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}
\begin{document}
\makeTPPfrontpage
\vfill
\begin{centering}
\bf Copyright \copyright\ : Lemma 1 Ltd. \number\year
\end{centering}
\pagebreak
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}
\begin{description}
\item [Issue 1.1,1.2]
First version.
\item[Issue 1.3 (2nd November 1992)]
Changes due to parser changes for $Ò(S[É])'Æ$ in a declaration.
\item [Issue 1.4, 11th November 1992] 
Changes as a consequence of changes in dependences.
\item [Issue 1.5, 20th November 1992] 
Completing the Schema Calculus.
\item [Issue 1.6, 1st December 1992] 
Improving schema quantification.
\item [Issue 1.7, 3rd December 1992] 
Lost $ç\_C$, and $Z\-\_ç\-\_ELIM\-\_C$.
\item [Issue 1.8, 7th December 1992] 
Fixing problems from changes to generic formals.
\item[Issue 1.9 (8th December 1992)]
Improvements to handling of schemas as predicates,
bindings.
Removed proof context for extensional treatment of schemas.
\item[Issue 1.11 (10th December 1992)]
Global rename from wrk038.doc issue 1.9.
\item[Issue 1.12 (18th December 1992)]
Changed treatment of $ªâs$.
\item[Issue 1.13 (20th January 1993)]
Gained $z\_strip\_tac$.
\item[Issue 1.14 (25th January 1993)]
Reacting to improved variable introduction.
\item[Issue 1.16 (10th February 1993)]
Reacting to changes in proof contexts, et al.
\item[Issue 1.17 (23rd February 1993)]
Properly tested a documented failing of 
$z\_ç\_h\_schema\_conv1$, rather than calling it a known bug.
\item[Issue 1.18 (7th July 1993)]
Corrected test for
$z\_h\_schema\_pred\_conv$, which previously allowed for a bug in the abstract
machine, which has now been fixed.
\item[Issue 1.18 (4th November 1994)]
Tested new conversion for massaging ill-formed schemas-as-declarations back into Z.
\item[Issue 1.20]
Added tests for message 43035.
\item[Issue 1.22] Copyright and banner updates for open source release.
\item[Issue 1.23] PPZed-specific updates for open source release
\item[Issue 1.24] The Z universal set is now called É.
\end{description}
\subsection{Changes Forecast}
None known.
\section{GENERAL}
\subsection{Scope}
This document contains the module tests for the material
whose detailed design is given in in \cite{DS/FMU/IED/DTD043}.
\subsection{Introduction}
This document contains the module tests for the material
whose detailed design is given in in \cite{DS/FMU/IED/DTD043}.
This consists of demonstrating at least the simpler uses of the 
functions in question.
\subsubsection{Dependencies}
The tests depend upon \cite{DS/FMU/IED/IMP043} and \cite{DS/FMU/IED/IMP013}.
They also unfortunately rely on the definitions of $∫$ and $ê$
from \cite{DS/FMU/IED/DTD078}.
In addition, testing by the subgoal package (section \ref{subgoalpackage})
depends on \cite{DS/FMU/IED/IMP030}.
\subsubsection{Deficiencies}
None known.
\section{TEST CASES}
The functions are, where appropriate, tested in their order of presentation in the detailed design.
\section{PREAMBLE}
=SML
open_theory "z_sets";
delete_theory "temp" handle _ => ();
new_theory "temp";
push_pc "z_predicates";
use_file "dtd013";
use_file "imp013";
init_mt_results();
(* set_flag("subgoal_package_quiet",true); *)
repeat drop_main_goal;
set_flag("check_is_z",true);
=TEX

\subsection{Utilities}
=SML
fun €list_eq› (eq:'a * 'a -> bool) ((a :: x), (b :: y)) : bool = (
	eq(a,b) andalso list_eq eq (x, y)
) | list_eq eq ([], []) = true
| list_eq _ _ = false;
=TEX
If two terms types are equal, break them apart until they differ.
=SML
fun €differ_where› itm1 itm2 = (
let	fun aux tm1 tm2 (App(f1,x1)) (App(f2,x2)) = (
		Value(force_value(aux f1 f2 (dest_simple_term f1) (dest_simple_term f2)))
		handle _ =>
		aux x1 x2 (dest_simple_term x1) (dest_simple_term x2))
	| aux tm1 tm2 (Const(nm1,ty1)) (Const(nm2,ty2)) = (
		if nm1 = nm2 andalso ty1 =: ty2
		then Nil
		else Value(tm1,tm2))
	| aux tm1 tm2 (Var(nm1,ty1)) (Var(nm2,ty2)) = (
		if nm1 = nm2 andalso ty1 =: ty2
		then Nil
		else Value(tm1,tm2))
	| aux tm1 tm2 (SimpleÃ(x1,b1)) (SimpleÃ(x2,b2)) = (
		if x1 =$ x2 
		then aux b1 b2 (dest_simple_term b1) (dest_simple_term b2)
		else Value(tm1,tm2))
	| aux tm1 tm2 _ _ = Value(tm1,tm2);
in
	aux itm1 itm2 (dest_simple_term itm1) (dest_simple_term itm2)
end);
=TEX
\subsection{Testing Using Subgoal Package}
\label{subgoalpackage}
The following functions apply a tactic to a selected goal
and returns the resulting top goal. 
This of course doesn't fully test tactics that return multiple
goals.
The functions differ in that $tac\_res1$ inputs and outputs
both assumptions and conclusion, while $tac\_res$
just assumes an empty assumption list.
=SML
fun €tac_res› tac goal = (push_goal([],goal);
		a tac;
		let val (seqasms,gl) = top_goal()
		in
			(drop_main_goal();
			gl)
		end);
fun €tac_res› tac goal = (push_goal([],goal);
		a tac;
		let val (seqasms,gl) = top_goal()
		in
			(drop_main_goal();
			gl)
		end);
fun €tac_res1› tac (seqasms, goal) = (
		push_goal(seqasms,goal);
		a tac;
		let val (rasms,gl) = top_goal()
		in
			(drop_main_goal();
			(rasms,gl))
		end);
=TEX
Now a function that returns the multiple goals for the case when a tactic causes multiple goals:
=SML
fun €tac_ress› tac n (seqasms, goal) = (
		push_goal(seqasms,goal);
		a tac;
		let val gll = map (top_labelled_goal o string_of_int)
			(interval 1 n)
		in
			(drop_main_goal();
			gll)
		end);
=TEX
This function tests that a tactic proves a goal:
=SML
fun €tac_solve› tac (seqasms, goal) = (
	dest_thm (tac_proof ((seqasms,goal),tac))
	=#
	(seqasms, goal)
);
=TEX
This function tests that a tactic fails on a goal:
=SML
fun €tac_fail› tac (seqasms, goal) = (
	push_goal(seqasms,goal);
	a tac
	handle complaint =>
	(drop_main_goal();
	reraise complaint (area_of complaint))
);
=TEX
\subsection{Some Useful Values}
ˇTEST_SCHEMA¸
x:É;
y:É
à
πZ
rel	px _,py _, pz _
∞
ù[X]
px _ :  X;
py _ :  X;
pz _ :  X
à

ˇS[X]¸
x:X
˜
px x
à
ˇR[X]¸
y:X
˜
py y
à
ˇQ[X]¸
z:X
˜
pz z
à
ˇDS[X]¸
x:X;
x':X
˜
px x ± px x'
à

=SML
val aset = Ò{a,b:X; c:Y | ≥(a = b) ∑ (a,b,c)}Æ;
val (asetd, asetp, asetv) = dest_z_seta aset;
val atuple3 = Ò((p ∫ a),(q ∫ a),(r ∫ b))Æ;
val notz = ¨∂ x ∑ x = yÆ;
val trues = string_of_term mk_t;
val notzs = string_of_term notz;
val ss=string_of_term ÒSÆ;
val ç_ss=string_of_term Ò(x ¶ x1) ç SÆ;
=TEX
\section{TESTS}
=TEX
\subsection{Stripping}
=SML
store_mt_results (mt_runf (op =$)) [
	("z_strip_tac 1",
	tac_res z_strip_tac,
	(snd(strip_µ Ò[X,Y] (µ x:X; y,z:Y | p x ∑ y = z)Æ)),
	(snd(strip_µ Ò[X,Y] (x ç X ± {y,z} Ä Y) ± p x ¥ y = zÆ))),
	("z_strip_tac 2",
	tac_res z_strip_tac,
	Òtrue ¥ (a ¶ a, b ¶ b) ç [a,b:É]Æ,
	Òê [a,b:É]Æ)
	];
store_mt_results mt_run_fail [
	("z_strip_tac 28003",
	z_strip_tac,
	([],mk_f),
	gen_fail_msg "z_strip_tac" 28003 [string_of_term mk_f])];
=TEX
\subsection{Horizontal Schemas}
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_h_schema_conv1 1",
	snd o dest_eq o concl o z_ç_h_schema_conv1,
	(snd(strip_µ Ò[X] y ç [z:X; S[X]; (S[X])'| x = z]Æ)),
	(snd(strip_µ Ò[X] (∂ z : X; S[X]; (S[X])' | x = z ∑ 
		 [z : X; S[X]; (S[X])'] = y)Æ)))
	];
let val fail_term = Ò(x ¶ x, x' ¶ x', z ¶ z) ç 
	[z : X; (S[X]); (S[X])' | x = z]Æ;
in
store_mt_results mt_run_fail [("z_ç_h_schema_conv1 43033",
	snd o dest_eq o concl o z_ç_h_schema_conv1,
	(snd(strip_µ Ò[X] (ê [z:X; S[X]; (S[X])'| x = z])Æ)),
	gen_fail_msg "z_ç_h_schema_conv1" 43033 [string_of_term fail_term])]
end;
store_mt_results mt_run_fail [("z_ç_h_schema_conv1 43003",
	z_ç_h_schema_conv1,
	mk_t,
	gen_fail_msg "z_ç_h_schema_conv1" 43003 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_h_schema_conv 1",
	snd o dest_eq o concl o z_ç_h_schema_conv,
	(snd(strip_µ Ò[X] y ç [z:X; S[X]; ((S[X])')| x = z]Æ)),
	(snd(strip_µ Ò[X] ((y∫[z:X; S[X]; ((S[X])')]).z ç X ± 
		(x ¶ y.x) ç S[X] ± 
		(x' ¶ y.x') ç (S[X])') 
	± y.x = y.zÆ))),
	("z_ç_h_schema_conv 2",
	snd o dest_eq o concl o z_ç_h_schema_conv,
	(snd(strip_µ Ò[X] (ê [z:X; S[X]; ((S[X])')| x = z])Æ)),
	(snd(strip_µ Ò[X] (z ç X ± 
		(x ¶ x) ç S[X] ± 
		(x' ¶ x') ç (S[X])') 
	± x = zÆ)))];
store_mt_results mt_run_fail [("z_ç_h_schema_conv 43003",
	z_ç_h_schema_conv,
	mk_t,
	gen_fail_msg "z_ç_h_schema_conv" 43003 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_h_schema_conv",
	snd o dest_eq o concl o z_h_schema_conv,
	Ò[z:X; S[X]; (S[X])'| x = z]Æ,
	Ò{z : X; S[X]; (S[X])' | x = z ∑  [z : X; S[X]; (S[X])']}Æ)];
store_mt_results mt_run_fail [("z_h_schema_conv 43004",
	z_h_schema_conv,
	mk_t,
	gen_fail_msg "z_h_schema_conv" 43004 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_norm_h_schema_conv",
	snd o dest_eq o concl o z_norm_h_schema_conv,
	Ò[x,y1:X; z: Y; p,q : É; r : É; S[X]; ((S[X])') | x1 = x]Æ,
	inst [] [(î'dÆ,î'cÆ), (î'cÆ,î'bÆ), (î'cÆ,î'aÆ), 
		(î'aÆ,î'dÆ), (î'bÆ,î'eÆ)]
	Ò[p : É; q : É; r : É; x : É; x' : É; y1 : É; z : É
      | (({x, y1} Ä X) ± z ç Y ± (x ¶ x) ç S[X] ± 
		(x' ¶ x') ç (S[X])') ± x1 = x]Æ)];
store_mt_results mt_run_fail [("z_norm_h_schema_conv 43004",
	z_norm_h_schema_conv,
	mk_t,
	gen_fail_msg "z_norm_h_schema_conv" 43004 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_h_schema_pred_conv a",
	snd o dest_eq o concl o z_h_schema_pred_conv,
	(snd(strip_µ Ò[X] ëmk_z_schema_pred( Ò[z:X; S[X]; 
		((S[X])')| x = z]Æ,"")ÆÆ)),
	(snd(strip_µ Ò[X] (z ç X
      ± (x ¶ x) ç S[X]
      ± (x' ¶ x') ç (S[X])')
      ± x = z Æ))),
	("z_h_schema_pred_conv b",
	snd o dest_eq o concl o z_h_schema_pred_conv,
	(snd(strip_µ Ò[X] ë(mk_z_schema_pred( Ò[zz,z:X; S[X]; 
		((S[X])')| x = z]Æ,"'"))ÆÆ)),
	(snd(strip_µ Ò[X] (({zz', z'} Ä X)
      ± (x ¶ x') ç S[X]
      ± (x' ¶ x'') ç (S[X])')
      ± x'
        = z'Æ))),
	("z_h_schema_pred_conv c",
	snd o dest_eq o concl o z_h_schema_pred_conv,
	(snd(strip_µ Ò[X] ë(mk_z_schema_pred( 
		mk_z_decâs(Ò[z:X; S[X]; ((S[X])')| x = z]Æ,"'"),""))ÆÆ)),
	(snd(strip_µ Ò[X](z' ç X
      ± (x ¶ x') ç S[X]
      ± (x' ¶ x'') ç (S[X])')
      ± x' = z'Æ)))
];
store_mt_results mt_run_fail [("z_h_schema_pred_conv 43012",
	z_h_schema_pred_conv,
	mk_t,
	gen_fail_msg "z_h_schema_pred_conv" 43012 [trues])];
=TEX
\subsection{Operators on Schemas}
=SML
store_mt_results (mt_runf (op =$)) [("z_ _ç_schema_conv",
	snd o dest_eq o concl o z_ _ç_schema_conv,
	Ò S ç SÆ,
	mk_z_schema_dec(ÒSÆ,""))];
store_mt_results mt_run_fail [("z_ _ç_schema_conv 43002",
	z_ _ç_schema_conv,
	mk_t,
	gen_fail_msg "z_ _ç_schema_conv" 43002 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ _ç_schema_intro_conv a",
	snd o dest_eq o concl o z_ _ç_schema_intro_conv,
	(mk_z_schema_pred( ÒSÆ,"")),
	Ò S ç SÆ),
	("z_ _ç_schema_intro_conv b",
	snd o dest_eq o concl o z_ _ç_schema_intro_conv,
	(mk_z_schema_pred( ÒSÆ,"'")),
	Ò S' ç SÆ),
	("z_ _ç_schema_intro_conv c",
	snd o dest_eq o concl o z_ _ç_schema_intro_conv,
	(mk_z_schema_pred( mk_z_decâs((inst [] 
		[(î'XÆ,î'aÆ)] ÒS[X]Æ),"'"),"")),
	(snd(strip_µ Ò[X] ëmk_z_ (Ò(S[X])'Æ,"")Æ ç ((S[X])')Æ)))];
store_mt_results mt_run_fail [("z_ _ç_schema_intro_conv 43014",
	z_ _ç_schema_intro_conv,
	mk_t,
	gen_fail_msg "z_ _ç_schema_intro_conv" 43014 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_schema_pred_conv a",
	snd o dest_eq o concl o z_schema_pred_conv,
	(mk_z_schema_pred( ÒSÆ,"")),
	Ò S ç SÆ),
	("z_schema_pred_conv b",
	snd o dest_eq o concl o z_schema_pred_conv,
	(mk_z_schema_pred( ÒSÆ,"'")),
	Ò S' ç SÆ),
	("z_schema_pred_conv c",
	snd o dest_eq o concl o z_schema_pred_conv,
	(mk_z_schema_pred( mk_z_decâs(inst [] [(î'XÆ,î'aÆ)] 
		ÒS[X]Æ,"'"),"")),
	(snd(strip_µ Ò[X] ëmk_z_ (inst [] [(î'XÆ,î'aÆ)]
		Ò(S[X])'Æ,"")Æ ç ((S[X])')Æ)))];
store_mt_results mt_run_fail [("z_schema_pred_conv 43014",
	z_schema_pred_conv,
	mk_t,
	gen_fail_msg "z_ _ç_schema_intro_conv" 43014 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ _conv",
	snd o dest_eq o concl o z_ _conv,
	Ò  DSÆ,
	Ò(x ¶ (x ∫ a), x' ¶ (x' ∫ a))Æ)];
store_mt_results mt_run_fail [("z_ _conv 43010",
	z_ _conv,
	mk_t,
	gen_fail_msg "z_ _conv" 43010 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ _conv1",
	snd o dest_eq o concl o z_ _conv1,
	¨$"Z' " Ò(x ¶ 1, y ¶ 2)Æ Ò[x,y:X]ÆÆ,
	Ò(x ¶ 1, y ¶ 2)Æ)];
store_mt_results mt_run_fail [("z_ _conv1 43011",
	z_ _conv1,
	Ò  DSÆ,
	gen_fail_msg "z_ _conv1" 43011 [string_of_term Ò  DSÆ])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ _eq_conv a",
	snd o dest_eq o concl o z_ _eq_conv,
	Ò  TEST_SCHEMA =   (TEST_SCHEMA) 'Æ,
	Òx = x' ± y = y'Æ),
	("z_ _eq_conv b",
	snd o dest_eq o concl o z_ _eq_conv,
	Ò(x ¶ 1, y ¶ 2) =   (TEST_SCHEMA) 'Æ,
	Ò1 = x' ± 2 = y'Æ)
	];

=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_decâs_conv 1",
	snd o dest_eq o concl o z_ç_decâs_conv,
	(snd(strip_µ Ò[X] p ç ë(mk_z_decâs(inst [] 
		[(î'XÆ,î'cÆ)] Ò[z:X; S[X]; (S[X])'| x = z]Æ,"'"))ÆÆ)),
	(snd(strip_µ Ò[X] (x ¶ (p ∫ [x',x'':X; z':X]).x', 
		x' ¶ p.x'', z ¶ p.z') ç [z : X; S[X]; (S[X])' | x = z]Æ))),
	("z_ç_decâs_conv 2",
	snd o dest_eq o concl o z_ç_decâs_conv,
	(snd(strip_µ Ò[X] (ê ëmk_z_schema_pred(mk_z_decâs
		(inst [] [(î'XÆ,î'cÆ)] 
		Ò[z:X; S[X]; (S[X])'| x = z]Æ,"'"),"")Æ)Æ)),
	(snd(strip_µ Ò[X] (x ¶ x', x' ¶ x'', z ¶ z') ç 
		[z : X; S[X]; (S[X])' | x = z]Æ)))];
store_mt_results mt_run_fail [("z_ç_decâs_conv 43015",
	z_ç_decâs_conv,
	mk_t,
	gen_fail_msg "z_ç_decâs_conv" 43015 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_decâs_conv",
	snd o dest_eq o concl o z_decâs_conv,
	(mk_z_decâs(Ò[z:X; S[X]; (S[X])'| x = z]Æ,"'")),
	Ò{x1 : É; x2 : É; x3 : É
      | (x ¶ x1, x' ¶ x2, z ¶ x3) ç [z : X; (S[X]); (S[X])' | x = z]
      ∑ (x' ¶ x1, x'' ¶ x2, z' ¶ x3)}Æ)];
store_mt_results mt_run_fail [("z_decâs_conv 42027",
	z_decâs_conv,
	mk_t,
	gen_fail_msg "Z_ç_ELIM_C" 42027 [trues]),
	("z_decâs_conv 43015",
	z_decâs_conv,
	ÒSÆ,
	gen_fail_msg "z_ç_decâs_conv" 43015 [ç_ss])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_preâs_conv",
	snd o dest_eq o concl o z_preâs_conv,
	Ò(pre (DS[X]))Æ,
	Ò[x:(É ∫  X) | ∂ x' :(É ∫  X) ∑ DS[X]]Æ
		)];

store_mt_results mt_run_fail [("z_preâs_conv 43007",
	z_preâs_conv,
	mk_t,
	gen_fail_msg "z_preâs_conv" 43007 [trues]),
	("z_preâs_conv 43009",
	z_preâs_conv,
	mk_z_preâs ÒSÆ,
	gen_fail_msg "z_preâs_conv" 43009 
		[string_of_term (mk_z_preâs ÒSÆ)])];

store_mt_results (mt_runf (op =$)) [("z_ç_preâs_conv 1",
	snd o dest_eq o concl o z_ç_preâs_conv,
	(snd(strip_µ Ò[X]v ç (pre [x,x':X | x = x'])Æ)),
	(snd(strip_µ Ò[X]v ç [x:(É ∫  X) | ∂ x' :(É ∫  X) ∑
		 [x,x':X | x = x']]Æ))
	),
	("z_ç_preâs_conv 2",
	snd o dest_eq o concl o z_ç_preâs_conv,
	(snd(strip_µ Ò[X] (ê (pre [x,x':X | x = x']))Æ)),
	(snd(strip_µ Ò[X] (x ¶ x) ç [x:(É ∫  X) | ∂ x' :(É ∫  X) ∑
		 [x,x':X | x = x']]Æ))
		)];

val duff = mk_z_ç (mk_var("v", dest_z_power_type(type_of(mk_z_preâs ÒSÆ))), 
		mk_z_preâs ÒSÆ);

store_mt_results mt_run_fail [
	("z_ç_preâs_conv 42028",
	z_ç_preâs_conv,
	mk_t,
	gen_fail_msg "ç_C" 42028 [trues]),
	("z_ç_preâs_conv 43007",
	z_ç_preâs_conv,
	Òx ç SÆ,
	gen_fail_msg "z_preâs_conv" 43007 [ss]),
	("z_ç_preâs_conv 43009",
	z_ç_preâs_conv,
	duff,
	gen_fail_msg "z_preâs_conv" 43009 [string_of_term 
		(snd(dest_z_ç duff))])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_Ñâs_conv",
	snd o dest_eq o concl o z_Ñâs_conv,
	ÒÑ S[X]Æ,
	Ò[S[X];S'[X]]Æ
	)];
store_mt_results mt_run_fail [("z_Ñâs_conv 43022",
	z_Ñâs_conv,
	mk_t,
	gen_fail_msg "z_Ñâs_conv" 43022 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_Ñâs_conv 1",
	snd o dest_eq o concl o z_ç_Ñâs_conv,
	Òp ç (Ñ S[X])Æ,
	Òp ç [S[X];S'[X]]Æ
	),
	("z_ç_Ñâs_conv 2",
	snd o dest_eq o concl o z_ç_Ñâs_conv,
	Òê (Ñ S[X])Æ,
	Ò(x ¶ x, x' ¶ x') ç [S[X];S'[X]]Æ
	)];
store_mt_results mt_run_fail [
	("z_ç_Ñâs_conv 42028",
	z_ç_Ñâs_conv,
	mk_t,
	gen_fail_msg "ç_C" 42028 [trues]),
	("z_ç_Ñâs_conv 43022",
	z_ç_Ñâs_conv,
	Òx ç SÆ,
	gen_fail_msg "z_Ñâs_conv" 43022 [ss])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_òâs_conv",
	snd o dest_eq o concl o z_òâs_conv,
	Òò S[X]Æ,
	Ò[(S[X]); (S[X])' |  (S[X]) =  (S[X])']Æ
	)];
store_mt_results mt_run_fail [("z_òâs_conv 43023",
	z_òâs_conv,
	mk_t,
	gen_fail_msg "z_òâs_conv" 43023 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_òâs_conv 1",
	snd o dest_eq o concl o z_ç_òâs_conv,
	Òp ç (ò S[X])Æ,
	Òp ç [(S[X]); (S[X])' |  (S[X]) =  (S[X])']Æ
	),
	("z_ç_òâs_conv 2",
	snd o dest_eq o concl o z_ç_òâs_conv,
	Òê (ò S[X])Æ,
	Ò(x ¶ x, x' ¶ x') ç [(S[X]); (S[X])' |  (S[X]) =  (S[X])']Æ
	)];
store_mt_results mt_run_fail [
	("z_ç_òâs_conv 42028",
	z_ç_òâs_conv,
	mk_t,
	gen_fail_msg "ç_C" 42028 [trues]),
	("z_ç_òâs_conv 43023",
	z_ç_òâs_conv,
	Òx ç SÆ,
	gen_fail_msg "z_òâs_conv" 43023 [ss])];
=TEX

\section{SCHEMA CALCULUS PREDICATES}
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_±âs_conv 1",
	snd o dest_eq o concl o z_ç_±âs_conv,
	Òp ç (([x:É; y:É| f x y] ± [y:É;z:É | g y z])∫É)Æ,
	Ò(x ¶ (p∫[x:É;y:É;z:É]).x, y ¶ p.y) ç [x : É; y : É | f x y]
	 ± (y ¶ p.y, z ¶ p.z) ç [y : É; z : É | g y z]Æ),
	("z_ç_±âs_conv 2",
	snd o dest_eq o concl o z_ç_±âs_conv,
	Òê (([x:É; y:É| f x y] ± [y:É;z:É | g y z])∫É)Æ,
	Ò(x ¶ x, y ¶ y) ç [x : É; y : É | f x y]
	 ± (y ¶ y, z ¶ z) ç [y : É; z : É | g y z]Æ)];
store_mt_results mt_run_fail [("z_ç_±âs_conv 43001",
	z_ç_±âs_conv,
	mk_t,
	gen_fail_msg "z_ç_±âs_conv" 43001 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_±âs_conv",
	snd o dest_eq o concl o z_±âs_conv,
	Ò(([x:É; y:É| f x y] ± [y:É;z:É | g y z])∫É)Æ,
	Ò{x1 : É; x2 : É; x3 : É
  | (x ¶ x1, y ¶ x2) ç [x : É; y : É | f x y]
    ± (y ¶ x2, z ¶ x3) ç [y : É; z : É | g y z]
  ∑ (x ¶ x1, y ¶ x2, z ¶ x3)}Æ)];
store_mt_results mt_run_fail [("z_±âs_conv 42027",
	z_±âs_conv,
	mk_t,
	gen_fail_msg "Z_ç_ELIM_C" 42027 [trues]),
	("z_±âs_conv 43001",
	z_±âs_conv,
	ÒSÆ,
	gen_fail_msg "z_ç_±âs_conv" 43001 [ç_ss])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_≤âs_conv 1",
	snd o dest_eq o concl o z_ç_≤âs_conv,
	Òp ç (([x:É; y:É| f x y] ≤ [y:É;z:É | g y z])∫É)Æ,
	Ò(x ¶ (p∫[x:É;y:É;z:É]).x, y ¶ p.y) ç [x : É; y : É | f x y]
	 ≤ (y ¶ p.y, z ¶ p.z) ç [y : É; z : É | g y z]Æ),
	("z_ç_≤âs_conv 2",
	snd o dest_eq o concl o z_ç_≤âs_conv,
	Òê (([x:É; y:É| f x y] ≤ [y:É;z:É | g y z])∫É)Æ,
	Ò(x ¶ x, y ¶ y) ç [x : É; y : É | f x y]
	 ≤ (y ¶ y, z ¶ z) ç [y : É; z : É | g y z]Æ)];

store_mt_results mt_run_fail [("z_ç_≤âs_conv 43005",
	z_ç_≤âs_conv,
	mk_t,
	gen_fail_msg "z_ç_≤âs_conv" 43005 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_≤âs_conv",
	snd o dest_eq o concl o z_≤âs_conv,
	Ò(([x:É; y:É| f x y] ≤ [y:É;z:É | g y z])∫É)Æ,
	Ò{x1 : É; x2 : É; x3 : É
  | (x ¶ x1, y ¶ x2) ç [x : É; y : É | f x y]
    ≤ (y ¶ x2, z ¶ x3) ç [y : É; z : É | g y z]
  ∑ (x ¶ x1, y ¶ x2, z ¶ x3)}Æ)];
store_mt_results mt_run_fail [("z_≤âs_conv 42027",
	z_≤âs_conv,
	mk_t,
	gen_fail_msg "Z_ç_ELIM_C" 42027 [trues]),
	("z_≤âs_conv 43005",
	z_≤âs_conv,
	ÒSÆ,
	gen_fail_msg "z_ç_≤âs_conv" 43005 [ç_ss])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_¥âs_conv 1",
	snd o dest_eq o concl o z_ç_¥âs_conv,
	Òp ç (([x:É; y:É| f x y] ¥ [y:É;z:É | g y z])∫É)Æ,
	Ò(x ¶ (p∫[x:É;y:É;z:É]).x, y ¶ p.y) ç [x : É; y : É | f x y]
	 ¥ (y ¶ p.y, z ¶ p.z) ç [y : É; z : É | g y z]Æ),
	("z_ç_¥âs_conv 2",
	snd o dest_eq o concl o z_ç_¥âs_conv,
	Òê (([x:É; y:É| f x y] ¥ [y:É;z:É | g y z])∫É)Æ,
	Ò(x ¶ x, y ¶ y) ç [x : É; y : É | f x y]
	 ¥ (y ¶ y, z ¶ z) ç [y : É; z : É | g y z]Æ)];
store_mt_results mt_run_fail [("z_ç_¥âs_conv 43006",
	z_ç_¥âs_conv,
	mk_t,
	gen_fail_msg "z_ç_¥âs_conv" 43006 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_¥âs_conv",
	snd o dest_eq o concl o z_¥âs_conv,
	Ò(([x:É; y:É| f x y] ¥ [y:É;z:É | g y z])∫É)Æ,
	Ò{x1 : É; x2 : É; x3 : É
  | (x ¶ x1, y ¶ x2) ç [x : É; y : É | f x y]
    ¥ (y ¶ x2, z ¶ x3) ç [y : É; z : É | g y z]
  ∑ (x ¶ x1, y ¶ x2, z ¶ x3)}Æ)
	];
store_mt_results mt_run_fail [("z_¥âs_conv 42027",
	z_¥âs_conv,
	mk_t,
	gen_fail_msg "Z_ç_ELIM_C" 42027 [trues]),
	("z_¥âs_conv 43006",
	z_¥âs_conv,
	ÒSÆ,
	gen_fail_msg "z_ç_¥âs_conv" 43006 [ç_ss])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_§âs_conv 1",
	snd o dest_eq o concl o z_ç_§âs_conv,
	Òp ç (([x:É; y:É| f x y] § [y:É;z:É | g y z])∫É)Æ,
	Ò(x ¶ (p∫[x:É;y:É;z:É]).x, y ¶ p.y) ç 
		[x : É; y : É | f x y]
	 § (y ¶ p.y, z ¶ p.z) ç [y : É; z : É | g y z]Æ),
	("z_ç_§âs_conv 2",
	snd o dest_eq o concl o z_ç_§âs_conv,
	Òê (([x:É; y:É| f x y] § [y:É;z:É | g y z])∫É)Æ,
	Ò(x ¶ x, y ¶ y) ç [x : É; y : É | f x y]
	 § (y ¶ y, z ¶ z) ç [y : É; z : É | g y z]Æ)];
store_mt_results mt_run_fail [("z_ç_§âs_conv 43016",
	z_ç_§âs_conv,
	mk_t,
	gen_fail_msg "z_ç_§âs_conv" 43016 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_§âs_conv",
	snd o dest_eq o concl o z_§âs_conv,
	Ò(([x:É; y:É| f x y] § [y:É;z:É | g y z])∫É)Æ,
	Ò{x1 : É; x2 : É; x3 : É
  | (x ¶ x1, y ¶ x2) ç [x : É; y : É | f x y]
    § (y ¶ x2, z ¶ x3) ç [y : É; z : É | g y z]
  ∑ (x ¶ x1, y ¶ x2, z ¶ x3)}Æ)];
store_mt_results mt_run_fail [("z_§âs_conv 42027",
	z_§âs_conv,
	mk_t,
	gen_fail_msg "Z_ç_ELIM_C" 42027 [trues]),
	("z_§âs_conv 43016",
	z_§âs_conv,
	ÒSÆ,
	gen_fail_msg "z_ç_§âs_conv" 43016 [ç_ss])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_≥âs_conv 1",
	snd o dest_eq o concl o z_ç_≥âs_conv,
	Òp ç ((≥ [y:É;z:É | g y z])∫É)Æ,
	Ò≥ p ç [y : É; z : É | g y z]Æ),
	("z_ç_≥âs_conv 2",
	snd o dest_eq o concl o z_ç_≥âs_conv,
	Òê ((≥ [y:É;z:É | g y z])∫É)Æ,
	Ò≥ (y ¶ y, z ¶ z) ç [y : É; z : É | g y z]Æ)];
store_mt_results mt_run_fail [("z_ç_≥âs_conv 43017",
	z_ç_≥âs_conv,
	mk_t,
	gen_fail_msg "z_ç_≥âs_conv" 43017 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_≥âs_conv",
	snd o dest_eq o concl o z_≥âs_conv,
	Ò((≥ [y:É;z:É | g y z])∫É)Æ,
	Ò{x1 : É; x2 : É | ≥
	(y ¶ x1, z ¶ x2) ç [y : É; z : É | g y z]
 	 ∑ (y ¶ x1, z ¶ x2)}Æ)];
store_mt_results mt_run_fail [("z_≥âs_conv 42027",
	z_≥âs_conv,
	mk_t,
	gen_fail_msg "Z_ç_ELIM_C" 42027 [trues]),
	("z_≥âs_conv 43017",
	z_≥âs_conv,
	ÒSÆ,
	gen_fail_msg "z_ç_≥âs_conv" 43017 [ç_ss])];
=TEX
\section{SCHEMA QUANTIFICATION}
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_∂âs_conv 1",
	snd o dest_eq o concl o z_ç_∂âs_conv,
	(snd(strip_µ Ò[X,W] p ç ((∂ x:X; w:W | q x w ∑ 
		[x,y:X;w,z:W | r x y z w])∫É)Æ)),
	(snd(strip_µ Ò[X,W] (∂ x1 : É ∑
	(((x1∫[x:X;w:W]).x ç X
	± x1.w ç W)
	± q x1.x x1.w)
	± (w ¶ x1.w, x ¶ x1.x, y ¶ (p∫[y:X;z:W]).y, z ¶ p.z)
	  ç [x, y : X; w, z : W
	    | r x y z w])Æ))),
	("z_ç_∂âs_conv 2",
	snd o dest_eq o concl o z_ç_∂âs_conv,
	(snd(strip_µ Ò[X,W] (ê((∂ x:X; w:W | q x w ∑
		 [x,y:X;w,z:W | r x y z w])∫É))Æ)),
	(snd(strip_µ Ò[X,W] (∂ x1 : É ∑
	(((x1∫[x:X;w:W]).x ç X
	± x1.w ç W)
	± q x1.x x1.w)
	± (w ¶ x1.w, x ¶ x1.x, y ¶ y, z ¶ z)
	  ç [x, y : X; w, z : W
	    | r x y z w])Æ)))];
store_mt_results mt_run_fail [("z_ç_∂âs_conv 43020",
	z_ç_∂âs_conv,
	mk_t,
	gen_fail_msg "z_ç_∂âs_conv" 43020 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_∂âs_conv",
	snd o dest_eq o concl o z_∂âs_conv,
	Ò((∂ x:X; w:W | q x w ∑ [x,y:X;w,z:W | r x y z w])∫É)Æ,
	Ò{x1 : É; x2 : É
	  | ∂ x3 : É
	    ∑ (((x3∫([x:X;w:W])).x ç X
	      ± x3.w ç W)
	      ± q x3.x x3.w)
	      ± (w ¶ x3.w, x ¶ x3.x, y ¶ x1, z ¶ x2)
 	       ç [x, y : X; w, z : W
	          | r x y z w]
	  ∑ (y ¶ x1, z ¶ x2)}Æ),
	("z_ç_∂âs_conv 3",
	snd o dest_eq o concl o z_ç_∂âs_conv,
	(snd(strip_µ Ò[X] p ç ((∂ S[X] ∑ DS[X]) ∫ É)Æ)),
	(snd(strip_µ Ò[X](∂ x1 : É
      ∑ ((x ¶ (x1∫[x:X]).x) ç S[X]
        ± true)
        ± (x ¶ x1.x, x' ¶ (p∫[x':X]).x') ç DS[X])Æ)))];
store_mt_results mt_run_fail [("z_∂âs_conv 42027",
	z_∂âs_conv,
	mk_t,
	gen_fail_msg "Z_ç_ELIM_C" 42027 [trues]),
	("z_∂âs_conv 43020",
	z_∂âs_conv,
	ÒSÆ,
	gen_fail_msg "z_ç_∂âs_conv" 43020 [ç_ss])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_µâs_conv 1",
	snd o dest_eq o concl o z_ç_µâs_conv,
	(snd(strip_µ Ò[X,W] p ç ((µ x:X; w:W | q x w ∑
		 [x,y:X;w,z:W | r x y z w])∫É)Æ)),
	(snd(strip_µ Ò[X,W] (µ x1 : É ∑
	(((x1∫[x:X;w:W]).x ç X
	± x1.w ç W)
	± q x1.x x1.w)
	¥ (w ¶ x1.w, x ¶ x1.x, y ¶ (p∫[y:X;z:W]).y, z ¶ p.z)
	  ç [x, y : X; w, z : W
	    | r x y z w])Æ))),
	("z_ç_µâs_conv 2",
	snd o dest_eq o concl o z_ç_µâs_conv,
	(snd(strip_µ Ò[X,W] (ê ((µ x:X; w:W | q x w ∑ 
		[x,y:X;w,z:W | r x y z w])∫É))Æ)),
	(snd(strip_µ Ò[X,W] (µ x1 : É ∑
	(((x1∫[x:X;w:W]).x ç X
	± x1.w ç W)
	± q x1.x x1.w)
	¥ (w ¶ x1.w, x ¶ x1.x, y ¶ y, z ¶ z)
	  ç [x, y : X; w, z : W
	    | r x y z w])Æ))),
	("z_ç_µâs_conv 3",
	snd o dest_eq o concl o z_ç_µâs_conv,
	(snd(strip_µ Ò[X] p ç ((µ S[X] ∑ DS[X]) ∫ É)Æ)),
	(snd(strip_µ Ò[X](µ x1 : É
      ∑ ((x ¶ (x1∫[x:É]).x) ç S[X]
        ± true)
        ¥ (x ¶ x1.x, x' ¶ (p∫[x':É]).x') ç DS[X])Æ)))];
store_mt_results mt_run_fail [("z_ç_µâs_conv 43030",
	z_ç_µâs_conv,
	mk_t,
	gen_fail_msg "z_ç_µâs_conv" 43030 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_µâs_conv",
	snd o dest_eq o concl o z_µâs_conv,
	Ò((µ x:X; w:W | q x w ∑ [x,y:X;w,z:W | r x y z w])∫É)Æ,
	Ò{x1 : É; x2 : É
	  | µ x3 : É
	    ∑ (((x3∫([x:X;w:W])).x ç X
	      ± x3.w ç W)
	      ± q x3.x x3.w)
	      ¥ (w ¶ x3.w, x ¶ x3.x, y ¶ x1, z ¶ x2)
	        ç [x, y : X; w, z : W
	          | r x y z w]
	  ∑ (y ¶ x1, z ¶ x2)}Æ)];

store_mt_results mt_run_fail [("z_µâs_conv 42027",
	z_µâs_conv,
	mk_t,
	gen_fail_msg "Z_ç_ELIM_C" 42027 [trues]),
	("z_µâs_conv 43030",
	z_µâs_conv,
	ÒSÆ,
	gen_fail_msg "z_ç_µâs_conv" 43030 [ç_ss])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_∂â1âs_conv",
	snd o dest_eq o concl o z_ç_∂â1âs_conv,
	(snd(strip_µ Ò[X,W] p ç ((∂â1 x:X; w:W | q x w ∑ 
		[x,y:X;w,z:W | r x y z w])∫É)Æ)),
	(snd(strip_µ Ò[X,W] (∂â1 x1 : É ∑
	(((x1∫[x:X;w:W]).x ç X
	± x1.w ç W)
	± q x1.x x1.w)
	± (w ¶ x1.w, x ¶ x1.x, y ¶ (p∫[y:X;z:W]).y, z ¶ p.z)
	  ç [x, y : X; w, z : W
	    | r x y z w])Æ))),
	("z_ç_∂â1âs_conv 2",
	snd o dest_eq o concl o z_ç_∂â1âs_conv,
	(snd(strip_µ Ò[X,W] (ê ((∂â1 x:X; w:W | q x w ∑ 
		[x,y:X;w,z:W | r x y z w])∫É))Æ)),
	(snd(strip_µ Ò[X,W] (∂â1 x1 : É ∑
	(((x1∫[x:X;w:W]).x ç X
	± x1.w ç W)
	± q x1.x x1.w)
	± (w ¶ x1.w, x ¶ x1.x, y ¶ y, z ¶ z)
	  ç [x, y : X; w, z : W
	    | r x y z w])Æ))),
	("z_ç_∂â1âs_conv 1",
	snd o dest_eq o concl o z_ç_∂â1âs_conv,
	(snd(strip_µ Ò[X] p ç ((∂â1 S[X] ∑ DS[X]) ∫ É)Æ)),
	(snd(strip_µ Ò[X](∂â1 x1 : É
      ∑ ((x ¶ (x1∫[x:É]).x) ç S[X]
        ± true)
        ± (x ¶ x1.x, x' ¶ (p∫[x':É]).x') ç DS[X])Æ)))];
store_mt_results mt_run_fail [("z_ç_∂â1âs_conv 43021",
	z_ç_∂â1âs_conv,
	mk_t,
	gen_fail_msg "z_ç_∂â1âs_conv" 43021 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_∂â1âs_conv",
	snd o dest_eq o concl o z_∂â1âs_conv,
	Ò((∂â1 x:X; w:W | q x w ∑ [x,y:X;w,z:W | r x y z w])∫É)Æ,
	Ò{x1 : É; x2 : É
  | ∂â1 x3 : É
    ∑ (((x3∫[x:X;w:W]).x ç X
      ± x3.w ç W)
      ± q x3.x x3.w)
      ± (w ¶ x3.w, x ¶ x3.x, y ¶ x1, z ¶ x2)
        ç [x, y : X; w, z : W
          | r x y z w]
  ∑ (y ¶ x1, z ¶ x2)}Æ)];
store_mt_results mt_run_fail [("z_∂â1âs_conv 42027",
	z_∂â1âs_conv,
	mk_t,
	gen_fail_msg "Z_ç_ELIM_C" 42027 [trues]),
	("z_∂â1âs_conv 43021",
	z_∂â1âs_conv,
	ÒSÆ,
	gen_fail_msg "z_ç_∂â1âs_conv" 43021 [ç_ss])];
=TEX
\section{OTHER SCHEMA CALCULUS OPERATORS}
=SML
store_mt_results (mt_runf (op =$)) [("z_˘âs_conv",
	snd o dest_eq o concl o z_˘âs_conv,
	Ò[x,y,z:X| p x y z] ˘âs [y:X]Æ,
	Ò([x,y,z:X| p x y z] ± [y:X]) \âs (x,z)Æ
	)];
store_mt_results mt_run_fail [("z_˘âs_conv 43019",
	z_˘âs_conv,
	mk_t,
	gen_fail_msg "z_˘âs_conv" 43019 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_˘âs_conv 1",
	snd o dest_eq o concl o z_ç_˘âs_conv,
	Òp ç ([x,y,z:X| r x y z] ˘âs [y:X])Æ,
	Òp ç (([x,y,z:X| r x y z] ± [y:X]) \âs (x,z))Æ
	),
	("z_ç_˘âs_conv 2",
	snd o dest_eq o concl o z_ç_˘âs_conv,
	Òê ([x,y,z:X| r x y z] ˘âs [y:X])Æ,
	Ò(y ¶ y) ç (([x,y,z:X| r x y z] ± [y:X]) \âs (x,z))Æ
	)];
store_mt_results mt_run_fail [
	("z_ç_˘âs_conv 42028",
	z_ç_˘âs_conv,
	mk_t,
	gen_fail_msg "ç_C" 42028 [trues]),
	("z_ç_˘âs_conv 43019",
	z_ç_˘âs_conv,
	Òx ç SÆ,
	gen_fail_msg "z_˘âs_conv" 43019 [ss])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_hideâs_conv",
	snd o dest_eq o concl o z_hideâs_conv,
	Ò[x,y,z:X;w:W| p x y z] \âs (x,w) Æ,
	Ò[y:(É∫ X);z:(É∫ X) | ∂ w:(É∫ W);x:(É∫ X) ∑ 
		[x,y,z:X;w:W| p x y z]]Æ
	)];
store_mt_results mt_run_fail [("z_hideâs_conv 43018",
	z_hideâs_conv,
	mk_t,
	gen_fail_msg "z_hideâs_conv" 43018 [trues])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_hideâs_conv 1",
	snd o dest_eq o concl o z_ç_hideâs_conv,
	Òp ç ([x,y,z:X;w:W| r x y z] \âs (x,w))Æ,
	Òp ç ([y:(É∫ X);z:(É∫ X) | ∂ w:(É∫ W);x:(É∫ X) ∑ 
		[x,y,z:X;w:W| r x y z]])Æ
	),
	("z_ç_hideâs_conv 2",
	snd o dest_eq o concl o z_ç_hideâs_conv,
	Òê ([x,y,z:X;w:W| r x y z] \âs (x,w))Æ,
	Ò(y ¶ y, z ¶ z) ç ([y:(É∫ X);z:(É∫ X) | ∂ w:(É∫ W);x:(É∫ X) ∑ 
		[x,y,z:X;w:W| r x y z]])Æ
	)];
store_mt_results mt_run_fail [
	("z_ç_hideâs_conv 42028",
	z_ç_hideâs_conv,
	mk_t,
	gen_fail_msg "ç_C" 42028 [trues]),
	("z_ç_hideâs_conv 43018",
	z_ç_hideâs_conv,
	Òx ç SÆ,
	gen_fail_msg "z_hideâs_conv" 43018 [ss])];
=TEX
=SML
z_ªâs_conv Ò[y,y':X| f y y'] ªâs [y,y':X | g y y']Æ;
store_mt_results (mt_runf (op =$)) [("z_ªâs_conv",
	snd o dest_eq o concl o z_ªâs_conv,
	Ò[x,y,y':X| f x y y'] ªâs [z,y,y':X | g z y y']Æ,
	Ò[x:É;y:É;y':É;z:É | ∂ x1:É ∑
		(x ¶ x, y ¶ y, y' ¶ x1) ç [x,y,y':X| f x y y'] ±
		(z ¶ z, y ¶ x1, y' ¶ y') ç [z,y,y':X | g z y y']]Æ
	)];
store_mt_results mt_run_fail [("z_ªâs_conv 43025",
	z_ªâs_conv,
	mk_t,
	gen_fail_msg "z_ªâs_conv" 43025 [trues])];
=TEX
=SML
z_ç_ªâs_conv Òv ç ([y,y':X| f y y'] ªâs [y,y':X | g y y'])Æ;
z_ç_ªâs_conv Òê ([y,y':X| f y y'] ªâs [y,y':X | g y y'])Æ;
store_mt_results (mt_runf (op =$)) [("z_ç_ªâs_conv 1",
	snd o dest_eq o concl o z_ç_ªâs_conv,
	Òv ç ([x,y,y':X| f x y y'] ªâs [z,y,y':X | g z y y'])Æ,
	Òv ç [x:É;y:É;y':É;z:É | ∂ x1:É ∑
		(x ¶ x, y ¶ y, y' ¶ x1) ç [x,y,y':X| f x y y'] ±
		(z ¶ z, y ¶ x1, y' ¶ y') ç [z,y,y':X | g z y y']]Æ
	),
	("z_ç_ªâs_conv 2",
	snd o dest_eq o concl o z_ç_ªâs_conv,
	Òê ([x,y,y':X| f x y y'] ªâs [z,y,y':X | g z y y'])Æ,
	Ò(x ¶ x, y ¶ y, y' ¶ y', z ¶ z) ç
	 [x:É;y:É;y':É;z:É | ∂ x1:É ∑
		(x ¶ x, y ¶ y, y' ¶ x1) ç [x,y,y':X| f x y y'] ±
		(z ¶ z, y ¶ x1, y' ¶ y') ç [z,y,y':X | g z y y']]Æ
	)
	];
store_mt_results mt_run_fail [
	("z_ç_ªâs_conv 42028",
	z_ç_ªâs_conv,
	mk_t,
	gen_fail_msg "ç_C" 42028 [trues]),
	("z_ç_ªâs_conv 43025",
	z_ç_ªâs_conv,
	Òx ç SÆ,
	gen_fail_msg "z_ªâs_conv" 43025 [ss])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_ç_renameâs_conv 1",
	snd o dest_eq o concl o z_ç_renameâs_conv,
	(snd(strip_µ Ò[X,W] p ç [x,y:X;w,z:W | r x y z w][q/x,s/y]Æ)),
	(snd(strip_µ Ò[X,W] (x ¶ (p∫[q,s:X;w,z:W]).q, y ¶ p.s, 
		w ¶ p.w, z ¶ p.z) ç 
		[x,y:X;w,z:W | r x y z w]Æ))),
	("z_ç_renameâs_conv 2",
	snd o dest_eq o concl o z_ç_renameâs_conv,
	(snd(strip_µ Ò[X,W] (ê [x,y:X;w,z:W | r x y z w][q/x,s/y])Æ)),
	(snd(strip_µ Ò[X,W] (x ¶ q, y ¶ s, w ¶ w, z ¶ z) ç 
		[x,y:X;w,z:W | r x y z w]Æ)))];
store_mt_results mt_run_fail [
	("z_ç_renameâs_conv 43031 a",
	z_ç_renameâs_conv,
	mk_t,
	gen_fail_msg "z_ç_renameâs_conv" 43031 [trues]),
	("z_ç_renameâs_conv 43031 b",
	z_ç_renameâs_conv,
	Òx1 ç SÆ,
	gen_fail_msg "z_ç_renameâs_conv" 43031 [string_of_term Òx1 ç SÆ])];
store_mt_results mt_run_fail [("z_ç_renameâs_conv 43035",
	z_ç_renameâs_conv,
	Òp ç [x,x':X; y,z,w':Y| f w' x x' z y][p/x,y/x',r/s]Æ,
	gen_fail_msg "z_ç_renameâs_conv" 43035 
		[string_of_term 
		Ò[x,x':X; y,z,w':Y| f w' x x' z y][p/x,y/x',r/s]Æ])];
=TEX
=SML
store_mt_results (mt_runf (op =$)) [("z_renameâs_conv",
	snd o dest_eq o concl o z_renameâs_conv,
	Ò([x,y:X;w,z:W | r x y z w][q/x,s/y])Æ,
	Ò{x1 : É; x2 : É; x3 : É; x4 : É
	  | (w ¶ x3, x ¶ x1, y ¶ x2, z ¶ x4) ç [x, y : X; w, z : W | r x y z w]
	  ∑ (q ¶ x1, s ¶ x2, w ¶ x3, z ¶ x4)}Æ)];
store_mt_results mt_run_fail [("z_renameâs_conv 42027",
	z_renameâs_conv,
	mk_t,
	gen_fail_msg "Z_ç_ELIM_C" 42027 [trues]),
	("z_renameâs_conv 43031",
	z_renameâs_conv,
	ÒSÆ,
	gen_fail_msg "z_ç_renameâs_conv" 43031 [ç_ss])];
store_mt_results mt_run_fail [("z_renameâs_conv 43035",
	z_renameâs_conv,
	Ò[x,x':X; y,z,w':Y| f w' x x' z y][p/x,y/x',r/s]Æ,
	gen_fail_msg "z_ç_renameâs_conv" 43035 
		[string_of_term 
		Ò[x,x':X; y,z,w':Y| f w' x x' z y][p/x,y/x',r/s]Æ])];

=TEX
\section{OTHERS}
=TEX
=SML
let
val tm1 = Ò{[x, y : BOOL] | x = z}Æ;
val tm2 = subst[(Òx ≤ uÆ, Òz ∫ BOOLÆ)] tm1;
val tm3 = (hd o dest_z_decl) let val (d, _, _) = dest_z_seta tm2 in d end;
val tm4 = (hd o dest_z_decl) let val (d, _, _) = dest_z_seta tm1 in d end;
in
store_mt_results (mt_runf (op =$)) [
	("z_dec_renameâs_conv",
	snd o dest_eq o concl o z_dec_renameâs_conv,
	tm3,
	ëdec_ofÒ[([x, y : BOOL] [x'/x])]ÆÆ)
	];
store_mt_results mt_run_fail [("z_dec_renameâs_conv 43060",
	z_dec_renameâs_conv,
	tm4,
	gen_fail_msg "z_dec_renameâs_conv" 43060
		[string_of_termëdec_ofÒ[[x, y : BOOL]]ÆÆ])
	]
end;
=TEX
\section{PROOF CONTEXTS}
The following is hardly a full test, but is a starting point:
=SML
push_merge_pcs ["z_predicates","'z_ç_set_lang", 
	"'z_tuples_lang", "'z_bindings","'z_schemas"];

ˇI[X]¸
y:X
˜
py y
à
ˇO[X]¸
z:X
˜
pz z
à
=SML
push_goal([],Ò[X] (∂[[S[X];(S[X])']; I[X];O[X]] | p x x' y z∑ true) §
	(∂ S[X];(S[X])'; I[X];O[X] | p x x' y z∑ true)Æ);
a(REPEAT strip_tac);
(* 1 *)
a(z_∂_tac Ò( [[S[X];(S[X])']; I[X];O[X]])Æ);
a(rewrite_tac[]);
a(REPEAT z_strip_tac);
(* *** Goal "2" *** *)
a(z_∂_tac Ò( [S[X];(S[X])'; I[X];O[X]])Æ);
a(rewrite_tac[]);
a(REPEAT z_strip_tac);
store_mt_results (mt_runf (op =$)) [("schema_proof_contexts",
	concl o pop_thm,
	(),
	Ò[X] (∂[[S[X];(S[X])']; I[X];O[X]] | p x x' y z∑ true) §
	(∂ S[X];(S[X])'; I[X];O[X] | p x x' y z∑ true)Æ)
	];
=TEX
=SML
push_merge_pcs ["z_predicates","'z_ç_set_lang","'z_sets_ext_lang", 
	"'z_tuples_lang", "'z_bindings","'z_schemas"];

push_goal([],Ò ([s,s' :É | s' § ≥ s] ªâs [s,s' :É | s' § ≥ s]) = [s,s' : É | s § s']Æ);
a(REPEAT strip_tac);
(* *** Goal "1" *** *)
a(asm_rewrite_tac[]);
a(prove_tac[]);
(* *** Goal "2" *** *)
a(asm_rewrite_tac[]);
a(z_∂_tac ÒfalseÆ);
a(rewrite_tac[]);
store_mt_results (mt_runf (op =$)) [("schema_proof_contexts 2",
	concl o pop_thm,
	(),
	Ò([s,s' :É | s' § ≥ s] ªâs [s,s' :É | s' § ≥ s]) = [s,s' : É | s § s']Æ)
	];
=TEX
=SML
push_goal([],Ò(≥ (µ [x,y:X| r x y] | p x ∑ [x,y,z:X | q x y z]) ∫ É)
 =
	((∂ [x,y:X| r x y] | p x ∑ ≥ [x,y,z:X | q x y z]) ∫ É)Æ);
a(rewrite_tac[]);
a(REPEAT strip_tac);
(* *** Goal "1" *** *)
a(z_∂_tac Òx2Æ THEN REPEAT strip_tac);
(* *** Goal "2" *** *)
a(z_∂_tac Òx2Æ THEN REPEAT strip_tac);
(* *** Goal "3" *** *)
a(z_∂_tac Òx2Æ THEN REPEAT strip_tac);
(* *** Goal "4" *** *)
a(z_∂_tac Òx2Æ THEN REPEAT strip_tac);

store_mt_results (mt_runf (op =$)) [("schema_proof_contexts 3",
	concl o pop_thm,
	(),
	Ò(≥ (µ [x,y:X| r x y] | p x ∑ [x,y,z:X | q x y z]) ∫ É)
 =
	((∂ [x,y:X| r x y] | p x ∑ ≥ [x,y,z:X | q x y z]) ∫ É)Æ)
	];
=TEX

Check everything is there:
=SML
push_pc "'z_schemas";
pop_pc();
=TEX
\section{END OF TESTS}
=SML
(* set_flag("subgoal_package_quiet",false); *)
diag_string(summarize_mt_results ());
=TEX
\end{document}
=IGN
***********COPY**************
store_mt_results (mt_runf (op =$)) [("",
	tac_res ,
	ÒÆ,
	ÒÆ)];
store_mt_results (mt_runf (op =$)) [("",
	snd o dest_eq o concl o  ,
	ÒÆ,
	ÒÆ)];
store_mt_results mt_run_fail [("",
	,
	,
	gen_fail_msg ""  [])];
store_mt_results (mt_runf (op =#)) [("",
	tac_res1 ,
	([ÒÆ],ÒÆ),
	([ÒÆ],ÒÆ))];
store_mt_results (mt_runf (list_eq(op =#))) [("",
	tac_ress  2,
	([ÒÆ],ÒÆ),
	[([ÒÆ],ÒÆ),([ÒÆ],ÒÆ)])];
store_mt_results mt_runf [
	("",
	tac_solve ,
	([],ÒÆ),
	true),
];
store_mt_results mt_run_fail [("",
	tac_fail ,
	([],ÒÆ),
	gen_fail_msg ""  [])];

store_mt_results mt_run [("",
	,
	,
	)];
store_mt_results mt_run_fail [("",
	,
	,
	gen_fail_msg ""  [])];

