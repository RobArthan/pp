% imp061.doc   %Z% $Date$ $Revision$ $RCSfile$
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{FST PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Implementation of the Z Parser}  %% Mandatory field
\TPPref{DS/FMU/IED/IMP061}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{HOL}
\TPPauthor{D.J.~King & WIN01 \\ R.D. Arthan & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.D.~Arthan & FST Team Leader}
\TPPabstract{
This document contains the implementation for the
parser for HOL/Z.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	Library}}

%\TPPclass{CLASSIFICATION}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section{DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu}

\subsection{Changes History}  % to get section number `0.3'
\begin{description}

\item[Issue \SCCSversion, \FormatDate{$Date$%
} ] Initial Draft.

\end{description}
\subsection{Changes Forecast}
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document contains the implementation for the parser for
HOL/Z.
The detailed design for this material is in \cite{DS/FMU/IED/DTD061}.
\subsection{Introduction}

\subsection{Purpose and Background}
See \cite{DS/FMU/IED/DTD061}.

\subsection{Dependencies}
The parser is dependent on the Z lexical analyser, \cite{DS/FMU/IED/DTD060}, 
and on the HOL symbol table, \cite{DS/FMU/IED/DTD020}.
\subsection{Possible Enhancements}
The error messages could be improved by using a hand-coded function to
print out the parsing stack.
\subsection{Deficiencies}
The parser accepts a slightly larger language than that specified in
\cite{DS/FMU/IED/DEF007} in that it allows infix, prefix and
postfix syntax and type constraints in local function definitions.
It also allows antiquotation in local definitions and bound variable
declarations.

The error report for errors in varstructs and local definitions
does not indicate the position of the error as accurately as one might
like. The error marker appears immediately after the $let$-term or
abstraction (or similar) containing the error. To fix this would require
quite a lot of work (one would probably have to label the $TM$s with
token numbers so that the code which makes the checks when the
entire containing phrase has been recognised
could calculate where the error in the input arose from).
As the second line of the error report does print out the rogue construct
in full, the situation as is is not intolerable.
\section{PREAMBLE}
SML
structure €ZParser› : ZParser = struct
=TEX
We need to include the SLRP driver code at this point:
=TEX
=SML
open ZLex;
=INCLUDE
imp018.sml
=SML
open SlrpDriver;
=TEX
\section{DATA TYPES}
We require data types to represent the result of a context-free parse
using the grammar of \cite{DS/FMU/IED/DTD061}. The result is used to
generate a value of type $ZTM$ as required by the type inferrer.

The following types are used for identifiers and decoration:
=SML
type €ID›			= string;
type €DECOR›		= string;
=TEX
We represent precedences using 
the integers:
=SML
type €PREC›		= int;
=TEX
The following types are used for the templates which
record information about fancy-fix operators:
=SML
datatype €STUB›		= 	€StubUS›		(* _ *)
			|	€StubEll›		(* ... *);

type €CORE›		=	ID * ((STUB * ID) list * (STUB * ID)) OPT;

datatype €TEMPLATE›	=	€TmplNon› of	CORE
					(* id, {stub, id} *)
			|	€TmplIn› of	(STUB * CORE * STUB)
					(* stub, id, {stub, id}, stub *)	
			|	€TmplPre› of	(CORE * STUB)
					(* id, {stub, id}, stub *)
			|	€TmplPost› of	(STUB * CORE)
					(* {stub, id}, stub, id *);
=TEX
Logical and schema operators are represented using the following
data types:
=SML
datatype €LOG_IN_OP›	= €And› | €Or› | €Implies› | €Iff›;

datatype €SCH_IN_OP›	= €Pipe› | €Filter› | €Comp›;

datatype €SCH_PRE_OP›	= €Pre› | €Delta› | €Xi›;
=TEX
Most of the complexity of the parsing process arises in the treatment of
predicates, schemas and expressions. These are all mapped onto the
data type $PRED$. The type contains a constructor corresponding to
each of the alternatives for $Pred$, $Pred1$, $Pred2$, $Pred3$,
$Schema2$, $Schema3$, $Schema4$, $Expr0$, $Expr1$, $Expr2$, $Expr3$
and $Expr4$, with the exceptions that (i) no constructor is required
for alternatives comprising a single non-terminal, and (ii) in most cases
where one alternative may be obtained from another by omitting part of it,
the data type has a single constructor with optional components in its
operand type.
=SML
datatype €PRED›		= €Semi› of PRED list
			| €Quantifier› of DECL * (PRED OPT) * PRED
			| €Let› of EQ_DEF list * PRED
			| €LogInOp› of PRED * LOG_IN_OP * PRED
			| €Not› of PRED
			| €SchInOp› of PRED * SCH_IN_OP * PRED
			| €SchPreOp› of SCH_PRE_OP * PRED
			| €SchemaHiding› of PRED * (PRED list)
			| €Mu› of DECL * (PRED OPT) * (PRED OPT)
			| €Lambda› of DECL * (PRED OPT) * (PRED OPT)
			| €FancyFix› of TEMPLATE * DECOR * (PRED list)
			| €CrossProduct› of PRED list
			| €Pow› of PRED
			| €Application› of PRED * PRED
			| €Theta› of PRED
			| €Selection› of PRED * PRED
			| €IdDec› of ID * DECOR
			| €PlaceHolder› of STUB
			| €Number› of int
			| €String› of string
			| €Tuple› of PRED list
			| €SetDisplay› of PRED list
			| €SetComp› of DECL * (PRED OPT) * (PRED OPT)
			| €HorizSchema› of  DECL * (PRED OPT)
			| €GenInst› of PRED list
			| €RenameList› of (PRED * PRED) list
			| €Bracketed› of PRED * DECOR
			| €Error› of PRED
=TEX
The above definition uses the following type abbreviations which correspond
to the non-terminals $Decl$ and $EqDef$ in the grammar. Note that
a declaration is much simpler here than in the grammar (which is
complicated by a need to single out declarations consisting of a single
schema expression as a special case).
=SML
withtype €DECL›		= (PRED * PRED OPT) list
and €EQ_DEF›		= PRED * PRED;
=TEX
The following type abbreviations and data types correspond to the
various sorts of paragraph:
=SML
type €FIXITY›		= CLASS * (TEMPLATE list);

type €GENERAL_TERM›	= PRED * (PRED OPT);

datatype €ABB_DEF›	= €ADEqDef› of EQ_DEF
			| €ADSchemaBox› of PRED * DECL * (PRED OPT);

type €FREE_TYPE_DEF›	= (PRED * (PRED list)) list;

type €AX_BOX›		= (PRED list) * DECL * (PRED OPT);

type €CONJECTURE›		= (ID OPT) * PRED;
=TEX
The overall result of a context-free parse of a single Z paragraph
is then represented by the following data type:
=SML
datatype €PARAGRAPH›	= €ParFixity› of FIXITY
			| €ParGeneralTerm› of GENERAL_TERM
			| €ParAbbDef› of ABB_DEF
			| €ParFreeTypeDef› of FREE_TYPE_DEF
			| €ParAxBox› of AX_BOX
			| €ParConjecture› of CONJECTURE;
=TEX
The partially parsed input as held on the parsing stack is of the
type $PP$, for which we use an additional type abbreviation for the
values obtained by reducing the second alternative for the
non-terminal $CoreExpr$.
=SML
type €CORE_EXPR›		= PRED list * ((ID * (PRED list))list);

datatype €PP›		= PPParagraph of PARAGRAPH
			| PPTemplates of TEMPLATE list
			| PPTemplate of TEMPLATE
			| PPEqDef of EQ_DEF
			| PPPred of PRED
			| PPDecl of DECL
			| PPCoreExpr of CORE_EXPR
			| PPSomeExprs of PRED list
			| PPIdDec of (ID * DECOR);
=TEX
\section{TEMPLATE FUNCTIONS}
We need various functions for operating on templates.
These are collected together in this section.

=TEX
We maintain a dictionary mapping names onto templates and
the $ZFIXITY$s. (This should actually be loaded from the theory
database.)
=TEX
=SML
val tmpl_ref : (ID * ZFIXITY * TEMPLATE) list ref = ref [];
=TEX
Given a template the following function returns
the corresponding list of name-$ZFIXITY$ pairs. The list is in no
particular order.
=SML
fun tmpl_ids (tmpl : TEMPLATE) (cl : CLASS): (ID * ZFIXITY) list = (
	let	val aux = map (fn (_, id) => (id, (ZFFThenOp, cl)));
	in	case tmpl of
		TmplNon (id, Nil) => (
			raise SYNTAX_ERROR
		) |	TmplNon (id1, Value (stids, (_, id2))) =>(
			(id1, (ZFFBeginOp, cl)) :: (id2, (ZFFEndOp, cl)) :: aux stids
		) |	TmplIn (_, (id, Nil), _) => (
			[(id, (ZFFInOp, cl))]
		) |	TmplIn (_, (id1, Value (stids, (_, id2))), _) => (
			(id1, (ZFFPostBeginOp, cl)) :: (id2, (ZFFPreEndOp, cl)) :: aux stids
		) |	TmplPre ((id, Nil), _) => (
			[(id, (ZFFPreOp, cl))]
		) |	TmplPre ((id1, Value (stids, (_, id2))), _) => (
			(id1, (ZFFBeginOp, cl)) :: (id2, (ZFFPreEndOp, cl)) :: aux stids
		) |	TmplPost (_, (id, Nil)) =>(
			[(id, (ZFFPostOp, cl))]
		) |	TmplPost (_, (id1, Value (stids, (_, id2)))) => (
			(id1, (ZFFPostBeginOp, cl)) :: (id2, (ZFFEndOp, cl)) :: aux stids
		)
	end
);
=TEX
=SML
fun €declare_template› ((cl, tmpl) : CLASS * TEMPLATE) :  unit  = (
	let	fun mapper (id, zfix) = (
			tmpl_ref :=  (id, zfix, tmpl)::(!tmpl_ref)
		);
	in
		map mapper (tmpl_ids tmpl cl); ()
	end
);
=TEX
=SML
fun €get_template› (id : ID) : (TEMPLATE * ZFIXITY) list = (
	let	val tmps = (!tmpl_ref) drop (fn (id',_,_) => id<>id');
	in
		map (fn (_, zfix, tmpl)=> (tmpl, zfix)) tmps  
	end
);
=TEX
\section{DIAGNOSTICS}
If errors are detected during the transformation to $ZTM$, then values
of type $PARAGRAPH$ etc. have to be printed in the diagnostic report.
The following functions are used to do this:
=TEX
=SML
fun €format_stub› StubUS = " _ "
|    format_stub StubEll = " ... ";
=TEX
=SML
fun €format_core› ( (first, Value (middle, last)) : CORE ) : string = (
	let	fun format_stub_id (stub, id) = (
			format_stub stub ^ id
		);
	in		first
		^	format_list format_stub_id middle ""
		^	format_stub_id last
	end
) | format_core ( (first, Nil) ) = first;
=TEX
=SML
fun €format_template› ((TmplNon core) : TEMPLATE) : string =
	" " ^ format_core core ^ " "
|   format_template (TmplIn (st1, core, st2)) =
	format_stub st1 ^ format_core core ^ format_stub st2
|   format_template (TmplPre (core, st)) =
	format_core core ^ format_stub st
|   format_template (TmplPost (st, core)) =
	format_stub st ^ format_core core;
=TEX
=SML
fun €format_log_in_op› (And : LOG_IN_OP) : string = "±"
|   format_log_in_op (Or : LOG_IN_OP) = "≤"
|   format_log_in_op (Implies : LOG_IN_OP) = "¥"
|   format_log_in_op (Iff : LOG_IN_OP) = "§";
=TEX
=SML
fun €format_sch_in_op› (Pipe : SCH_IN_OP) = ">>"
|   format_sch_in_op (Filter : SCH_IN_OP) = "˘"
|   format_sch_in_op (Comp : SCH_IN_OP) = "ª";
=TEX
=SML
fun €format_sch_pre_op› (Pre : SCH_PRE_OP) = "pre"
|   format_sch_pre_op (Delta : SCH_PRE_OP) = "Ñ"
|   format_sch_pre_op (Xi : SCH_PRE_OP) = "ò";
=TEX
=SML
fun €format_fancy_fix›
	(format_item : 'a -> string)
	(tmpl : TEMPLATE)
	(decor : DECOR)
	(items : 'a list) = (
	let	
		val rids = rev (map fst (tmpl_ids tmpl ZClRel));
		val ids = rev (hd rids ^ decor :: tl rids);
		fun aux1 ns its = (
			(format_list
			Combinators.I
			(map (fn (a,b) => a ^ " " ^ b)(combine ns (map format_item its)))
			" ")
		);
		fun aux2 ns its = (
			(format_list
			Combinators.I
			(map (fn (a,b) => a ^ " " ^ b)(combine (map format_item its) ns))
			" ")
		);
	in	case tmpl of
			TmplNon _ => (
				hd ids ^ aux2 (tl ids) items
		) |	TmplIn _ => (
				format_item (hd items)  ^ aux1 ids (tl items)
		) |	TmplPre _ => (
				aux1 ids items
		) |	TmplPost _ => (
				aux2 ids items
		)
	end
	handle (Fail _) => raise PARSER_ERROR "invalid call of format_fancy_fix"
);
=TEX
=SML
fun €format_pred› (pred : PRED) : string = (
	case pred of
		Semi preds => format_list format_pred preds "; "
	|	Quantifier (decl, Value pred1, pred2) =>
			format_decl decl ^ " | " ^ format_pred pred1 ^ " ∑ " ^ format_pred pred2
	|	Quantifier (decl, Nil, pred2) =>
			format_decl decl ^ " ∑ " ^ format_pred pred2
	|	Let (eqdefs, pred) =>
			format_list format_eq_def eqdefs "," ^ format_pred pred
	|	LogInOp (pred1, rator, pred2) =>
			format_pred pred1 ^ format_log_in_op rator ^ format_pred pred2
	|	Not pred => "≥ " ^ format_pred pred
	|	SchInOp (pred1, rator, pred2) =>
			format_pred pred1 ^ format_sch_in_op rator ^ format_pred pred2
	|	SchPreOp (rator, pred) =>
			format_sch_pre_op rator ^ format_pred pred
	|	SchemaHiding (pred, preds) =>
			format_pred pred ^ "\\[" ^ format_list format_pred preds ", " ^ "]"
	|	Mu body => "Õ " ^ format_decl_bar_pred_dot_pred body
	|	Lambda body => "Ã " ^ format_decl_bar_pred_dot_pred body
	|	FancyFix (tmpl, decor, preds) => format_fancy_fix format_pred tmpl decor preds
	|	CrossProduct preds => format_list format_pred preds " ∏ "
	|	Pow pred => " " ^ format_pred pred
	|	Application (pred1, pred2) =>  format_pred pred1 ^ " " ^ format_pred pred2
	|	Theta pred => "  " ^ format_pred pred
	|	Selection (pred1, pred2) =>  format_pred pred1 ^ "." ^ format_pred pred2
	|	IdDec (id, decor) => id ^ " " ^ decor
	|	PlaceHolder st => format_stub st
	|	Number n => string_of_int n
	|	String s => "\"" ^ s ^ "\""
	|	Tuple preds => "(" ^ format_list format_pred preds ", " ^ ")"
	|	SetDisplay preds  => "{" ^ format_list format_pred preds ", " ^ "}"
	|	SetComp body => "{" ^ format_decl_bar_pred_dot_pred body ^ "}"
	|	HorizSchema (decl, predopt) =>
			"[" ^ format_decl_bar_pred_dot_pred(decl, predopt, Nil) ^ "]"
	|	GenInst preds => "[" ^ format_list format_pred preds ", " ^ "]"
	|	RenameList renames =>
			"["
		^	format_list
			(fn (pred1, pred2) => format_pred pred1 ^ " / " ^ format_pred pred2)
			renames
			", "
		^	"]"
	|	Bracketed (pred, decor) => "(" ^ format_pred pred ^ ")" ^ decor
	|	Error pred => "<?>" ^ format_pred pred
)
and €format_decl› (decs : DECL) : string = (
	let	fun format_dec (pred, Nil) =  format_pred pred
		|   format_dec (pred1, Value pred2) =
			format_pred pred1 ^ " : " ^ format_pred pred2;
	in	format_list format_dec decs "; "
	end
)
=TEX
=SML
and €format_eq_def› ((pred1, pred2) : EQ_DEF) : string = (
	format_pred pred1 ^ " ¶ " ^ format_pred pred2
)
=TEX
=SML
and €format_decl_bar_pred_dot_pred›
	(body : DECL * (PRED OPT) * (PRED OPT))
	: string = (
	case body of
		(decl, Value pred1, Value pred2) =>
			format_decl decl ^ " | " ^ format_pred pred1 ^ " ∑ " ^ format_pred pred2
	|	(decl, Nil, Value pred) =>
			format_decl decl ^ " ∑ " ^ format_pred pred
	|	(decl, Value pred, Nil) =>
			format_decl decl ^ " | " ^ format_pred pred
	|	(decl, Nil, Nil) =>
			format_decl decl
);
=TEX
=SML
fun €format_class› ((ZClFun n) : CLASS) : string = "fun " ^ string_of_int n
|   format_class  (ZClGen n) = "gen " ^ string_of_int n
|   format_class  (ZClRel) = "rel";
=TEX
=SML
fun €format_fixity› ((cl, tmpls) : FIXITY) : string = (
	format_class cl ^ " " ^ format_list format_template tmpls ", "
);
=TEX
=SML
fun €format_general_term› ((pred1, Value pred2) : GENERAL_TERM) : string = (
	format_pred pred1 ^ " & " ^ format_pred pred2
) | format_general_term (pred1, Nil) = format_pred pred1;
=TEX
=SML
fun €format_abb_def› (ADEqDef eqdef : ABB_DEF) : string = format_eq_def eqdef
=SMLLITERAL
|   format_abb_def (ADSchemaBox (pred1, decl, Value pred2)) = (
	"  " ^ format_pred pred1 ^ "¸" ^ format_decl decl ^ " ˜ " ^ format_pred pred2 ^ " à"
) | format_abb_def (ADSchemaBox (pred, decl, Nil)) = (
	"ˇ " ^ format_pred pred ^ " ¸ " ^ format_decl decl ^ " à"
);
=TEX
=SML
fun €format_free_type_def› (ftd : FREE_TYPE_DEF) : string = (
	let	fun aux (pred, preds) = (
			format_pred pred ^ " ::= " ^
			format_list format_pred preds " | "
		);
	in 	format_list aux ftd " & "
	end
);
=TEX
=SML
fun €format_ax_box› ((preds as _::_, decl, Value pred) : AX_BOX) : string = (
=SMLLITERAL
	"ù[ " ^ format_list format_pred preds ", " ^ " ]ú " ^
	format_decl decl ^ " ˜ " ^ format_pred pred ^ " à"
) | format_ax_box ([], decl, Value pred) = (
	"πZAX"  ^ format_decl decl ^ " ˜ " ^ format_pred pred ^ " à"
) | format_ax_box ((preds as _::_, decl, Nil) : AX_BOX) = (
	"ù[ " ^ format_list format_pred preds ", " ^ " ]ú " ^
	format_decl decl ^ " à"
) |  format_ax_box ([], decl, Nil) = (
	"πZAX"  ^ format_decl decl ^ " à"
);
=TEX
=SML
fun €format_conjecture› ((Value id, pred) : CONJECTURE) : string = (
	id ^ " Ù " ^ format_pred pred
) | format_conjecture (Nil, pred) = (
	"Ù " ^ format_pred pred
);
=TEX
=SML
fun €format_paragraph› (para : PARAGRAPH) : string = (
	case para of
		ParFixity f => format_fixity f
	|	ParGeneralTerm gt => format_general_term gt
	|	ParAbbDef ad => format_abb_def ad
	|	ParFreeTypeDef ftd => format_free_type_def ftd
	|	ParAxBox ab => format_ax_box ab
	|	ParConjecture c => format_conjecture c
);
=TEX
=SML
fun €format_core_expr› ((preds, idpreds) : CORE_EXPR) : string = (
	let	fun aux (id, ps) = (
			id ^ " " ^ format_list format_pred ps ", "
		);
	in	format_list format_pred preds ", " ^ format_list aux idpreds " "
	end
);
=TEX
=SML
fun €format_pp› (pp : PP) : string = (
	case pp of
		PPParagraph para => format_paragraph para
	|	PPTemplates tmpls => format_list format_template tmpls ", "
	|	PPTemplate tmpl => format_template tmpl
	|	PPEqDef eqdef => format_eq_def eqdef
	|	PPPred pred => format_pred pred
	|	PPDecl decl => format_decl decl
	|	PPCoreExpr ce =>  format_core_expr ce
	|	PPSomeExprs es => format_list format_pred es ", "
	|	PPIdDec (id, dec) => id ^ dec
);
=TEX
\section{LEXICAL CLASSES}
The following data type represents the lexical classes which are the
terminals of the grammar:
=SML
datatype Z_LEX_CLASS	= Ampersand
			| Quotation
			| Ax
			| BBoldP
			| BackSlash
			| Bar
			| Bars
			| BeginOp
			| Colon
			| ColonsEq
			| Comma
			| Cross
			| Decor
			| Dot
			| EndOp
			| Eos
			| EqHat
			| FixityClass
			| Id
			| InOp
			| Is
			| LBrace
			| LBrk
			| LSeqBrk
			| LSqBrk
			| Let
			| LogInOp
			| MuLambda
			| Not
			| Number
			| PostBeginOp
			| PostOp
			| PreEndOp
			| PreOp
			| Quant
			| RBrace
			| RBrk
			| RSeqBrk
			| RSqBrk
			| Sch
			| SchInOp
			| SchPreOp
			| Semi
			| Slash
			| Spot
			| St
			| String
			| Stub
			| ThenOp
			| Theta
			| TurnStile
			| UnderBar;
=TEX
There are two classification functions: $classify2$ for use in processing
fixity paragraphs and $classify$ for use everywhere else.
=SML
fun €classify1›  (tok : ZTOKEN) : Z_LEX_CLASS = (
	case tok of
		ZTAqTm _	=>	Quotation
	|	ZTId "_"	=> 	Stub
	|	ZTId _		=> 	Id
	|	ZTBeginOp _	=> 	BeginOp
	|	ZTEndOp _	=> 	EndOp
	|	ZTInOp _	=>	InOp
	|	ZTPostBeginOp _ =>	PostBeginOp
	|	ZTThenOp _	=> 	ThenOp
	|	ZTPostOp _	=>	PostOp
	|	ZTPreEndOp _	=>	PreEndOp
	|	ZTPreOp _	=>	PreOp
	|	ZTDecor _	=>	Decor
	|	ZTChar	_	=>	raise PARSER_ERROR "unexpected token"
	|	ZTString _	=>	String
	|	ZTNumber _	=>	Number
	|	ZTAx		=>	Ax
	|	ZTSch		=>	Sch
	|	ZTEnd		=>	raise PARSER_ERROR "unexpected token"
	|	ZTOpen		=>	raise PARSER_ERROR "unexpected token"
	|	ZTIs		=>	Is
	|	ZTSt		=>	St
	|	ZTBar		=>	Bar
	|	ZTAmpersand	=>	Ampersand
	|	ZTÃ		=>	MuLambda
	|	ZTÕ		=>	MuLambda
	|	ZTµ		=>	Quant
	|	ZT∂		=>	Quant
	|	ZT∂â1		=>	Quant
	|	ZT≥		=>	Not
	|	ZT±		=>	LogInOp
	|	ZT≤		=>	LogInOp
	|	ZT§		=>	LogInOp
	|	ZT¥		=>	LogInOp
	|	ZTPre		=>	SchPreOp
	|	ZTÑ		=>	SchPreOp
	|	ZTò		=>	SchPreOp
	|	ZTPipe		=>	SchInOp
	|	ZT˘		=>	SchInOp
	|	ZTª		=>	SchInOp
	|	ZTLet		=>	Let
	|	ZTFun		=>	FixityClass
	|	ZTGen		=>	FixityClass
	|	ZTRel		=>	FixityClass
	|	ZTLbrace	=>	LBrace
	|	ZTRbrace	=>	RBrace
	|	ZTLbrack	=>	LBrk
	|	ZTRbrack	=>	RBrk
	|	ZTLsqbrack	=>	LSqBrk
	|	ZTRsqbrack	=>	RSqBrk
	|	ZTß		=>	LSeqBrk
	|	ZT¢		=>	RSeqBrk
	|	ZTComma		=>	Comma
	|	ZTDots		=>	Stub
	|	ZTDot		=>	Dot
	|	ZTSlash		=>	Slash
	|	ZTBSlash	=>	BackSlash
	|	ZTFreeTyDef	=>	ColonsEq
	|	ZTColon		=>	Colon
	|	ZTSemi		=>	Semi
	|	ZTVert		=>	Bar
	|	ZTConjecture	=>	TurnStile
	|	ZT¶		=>	EqHat
	|	ZT∑		=>	Spot
	|	ZT∏		=>	Cross
	|	ZT 		=>	Theta
	|	ZTEos		=>	Eos
);
=TEX
=SML
fun €classify2›  (tok : ZTOKEN) : Z_LEX_CLASS = (
	case tok of
		ZTId _ => Id
	|	_ => classify1 tok
);
=TEX
\section{ERROR HANDLING}
=SML
fun €format_z_token›  (tok : ZTOKEN) : string = (
=SMLLITERAL
	case tok of
		ZTAqTm _	=>	"<term-quotation>"
	|	ZTId s		=> 	s
	|	ZTBeginOp (s,_)	=> 	s
	|	ZTEndOp (s,_)	=> 	s
	|	ZTInOp (s,_)	=>	s
	|	ZTPostBeginOp (s,_) =>	s
	|	ZTThenOp (s,_)	=> 	s
	|	ZTPostOp (s,_)	=>	s
	|	ZTPreEndOp (s,_)=>	s
	|	ZTPreOp (s,_)	=>	s
	|	ZTDecor s	=>	s
	|	ZTChar s	=>	"<unexpected token: " ^ s ^ ">"
	|	ZTString s	=>	"\"" ^ s ^ "\""
	|	ZTNumber n	=>	string_of_int n
	|	ZTAx		=>	"πZAX"
	|	ZTSch		=>	"ˇ"
	|	ZTEnd		=>	"<unexpected token: ZTEnd>"
	|	ZTOpen		=>	"<unexpected token: ZTOpen>"
	|	ZTIs		=>	"<Is>"
	|	ZTSt		=>	"˜"
	|	ZTBar		=>	"‹"
	|	ZTAmpersand	=>	"&"
	|	ZTÃ		=>	"Ã"
	|	ZTÕ		=>	"Õ"
	|	ZTµ		=>	"µ"
	|	ZT∂		=>	"∂"
	|	ZT∂â1		=>	"∂â1"
	|	ZT≥		=>	"≥"
	|	ZT±		=>	"±"
	|	ZT≤		=>	"≤"
	|	ZT§		=>	"§"
	|	ZT¥		=>	"¥"
	|	ZTPre		=>	"pre"
	|	ZTÑ		=>	"Ñ"
	|	ZTò		=>	"ò"
	|	ZTPipe		=>	">>"
	|	ZT˘		=>	"˘"
	|	ZTª		=>	"ª"
	|	ZTLet		=>	"let"
	|	ZTFun		=>	"fun"
	|	ZTGen		=>	"gen"
	|	ZTRel		=>	"rel"
	|	ZTLbrace	=>	"{"
	|	ZTRbrace	=>	"}"
	|	ZTLbrack	=>	"("
	|	ZTRbrack	=>	")"
	|	ZTLsqbrack	=>	"["
	|	ZTRsqbrack	=>	"]"
	|	ZTß		=>	"ß"
	|	ZT¢		=>	"¢"
	|	ZTComma		=>	","
	|	ZTDots		=>	"..."
	|	ZTDot		=>	"."
	|	ZTSlash		=>	"/"
	|	ZTBSlash	=>	"\\"
	|	ZTFreeTyDef	=>	"::="
	|	ZTColon		=>	":"
	|	ZTSemi		=>	";"
	|	ZTVert		=>	"|"
	|	ZTConjecture	=>	"Ù"
	|	ZT¶		=>	"¶"
	|	ZT∑		=>	"∑"
	|	ZT∏		=>	"∏"
	|	ZT 		=>	" "
	|	ZTEos		=>	"<end-of-input>"
);
=TEX
=SML
fun €format_parse_stack› (stk : (ZTOKEN, Z_LEX_CLASS, PP)INPUT_STACK) : string = (
	let	fun aux (Parsed pp) = format_pp pp
		|   aux (Token (tok, _)) = format_z_token tok;
	in	format_list aux stk " "
	end
);
=TEX
$red\_error$ is for use during context-free parsing when a user-error is detected.
The first two arguments give the two inserts for message 61001.
The other two parameters give the message to print after the 61001 lines.
After the diagnostic print-out the function fails with message 61000
and area "Z-Parser".
=SML
fun €red_error›
	(okpart : (ZTOKEN, Z_LEX_CLASS, PP)INPUT_STACK)
	(badpart : (ZTOKEN, Z_LEX_CLASS, PP)INPUT_STACK)
	(msg : int)
	(inserts : string list) : 'a = (
	diag_string (get_error_message
			61001
			[format_parse_stack okpart,  format_parse_stack badpart]);
	diag_string (get_error_message msg inserts);
	fail "Z-Parser" 61000 []
);
=TEX
$stack\_error$ is for use during context-free parsing when the parsing stack
is corrupt.
=SML
fun €stack_error› (insert : string) : 'a = (
	error "Z-Parser"  19005 [fn() => insert]
);
=TEX
\section{REDUCTION FUNCTIONS}
As with the HOL parser, adding type constraints to the reductions functions
would be both unhelpful and very time-consuming and so in this section
we deliberately suspend that aspect of the coding standards of
\cite{DS/FMU/IED/PLN007}.

We give the reduction functions in the order of their appearance
in the grammar of \cite{DS/FMU/IED/DTD061}. When several reduction
functions would be the same, we use $val$ bindings for the various
instances.
=SML
fun €red_para› (Parsed para) _ = (para
) | red_para _ _ = stack_error "red_para";
=TEX
=SML
val €red_fixity› = red_para;
val €red_general_term› = red_para;
val €red_abb_def› = red_para;
val €red_free_type_def› = red_para;
val €red_ax_box› = red_para;
val €red_conjecture› = red_para;
=TEX
=SML
fun €red_templates› (Token (tk, _)) (Parsed (PPTemplates tmpls)) _ = (
	PPParagraph
	(case tk of
		ZTFun => ParFixity(ZClFun 0, tmpls)
	|	ZTGen => ParFixity(ZClGen 0, tmpls)
	|	ZTRel => ParFixity(ZClRel, tmpls)
	|	_ => stack_error "red_templates(1)")
) | red_templates _ _ _ = stack_error "red_templates(2)";
=TEX
=SML
fun €red_prec_templates› (Token (tk, c1)) (Token (ZTNumber p, c2))
	(Parsed (PPTemplates tmpls)) stk = (
	PPParagraph
	(case tk of
		ZTFun => ParFixity(ZClFun p, tmpls)
	|	ZTGen => ParFixity(ZClGen p, tmpls)
	|	ZTRel =>
			red_error
			((Token (tk, c1)) :: stk) [Token (ZTNumber p, c2)]
			61010 []
	|	_ => stack_error "red_prec_templates(1)")
) | red_prec_templates _ _ _ _ = stack_error "red_prec_templates(2)";
=TEX
=SML
fun €red_accept› (Parsed pp) _ = (pp
) | red_accept _ _ = stack_error "red_accept";
=TEX
=SML
val €red_template› = red_accept;
=TEX
=SML
fun €red_template_templates›
	(Parsed(PPTemplates [tmpl])) _ (Parsed(PPTemplates tmpls)) _ = (
	PPTemplates (tmpl :: tmpls)
) | red_template_templates _ _ _ _ = stack_error "red_template_templates";
=TEX
=TEX
=SML
val €red_stub_ids› = red_accept;
=TEX
=SML
val €red_id_stubs› = red_accept;
=TEX
=SML
fun dest_stub (ZTDots : ZTOKEN) = StubUS
|   dest_stub (ZTId "_") = StubEll
|   dest_stub _ = stack_error "dest_stub";
=TEX
=SML
fun €red_stub_id› (Token(st, _)) (Token((ZTId nm), _)) _ = (
	PPTemplates[TmplPost(dest_stub st, (nm, Nil))]
) | red_stub_id _ _ _ = stack_error "red_stub_id";
=TEX
=SML
fun €red_stub_id_stub›
	(Token(st1, _))
	(Token(ZTId nm, _))
	(Token(st2, _)) _ =
	PPTemplates[TmplIn(dest_stub st1, (nm, Nil), dest_stub st2)]
|   red_stub_id_stub _ _ _ _ = stack_error "red_stub_id_stub";
=TEX
=SML
fun €red_stub_id_stub_ids› (Token(st1, _)) (Token((ZTId nm), _))
		(Parsed(PPTemplates[(TmplIn(st2, (nm2, Nil), st3))])) _ = (
	PPTemplates[TmplIn(dest_stub st1, (nm, Value([], (st2, nm2))), st3)]
) | red_stub_id_stub_ids (Token(st1, _)) (Token((ZTId nm1), _))
		(Parsed(PPTemplates[(TmplIn(st2, (nm2, Value (stids, stid)), st3))])) _ = (
	PPTemplates[TmplIn(dest_stub st1, (nm1, Value((st2, nm2) :: stids, stid)), st3)]
) | red_stub_id_stub_ids (Token(st1, _)) (Token((ZTId nm1), _))
		(Parsed(PPTemplates[(TmplPost(st2, (nm2, Nil)))])) _ = (
	PPTemplates[TmplPost(dest_stub st1, (nm1, Value([], (st2, nm2))))]
) | red_stub_id_stub_ids (Token(st1, _)) (Token((ZTId nm1), _))
		(Parsed(PPTemplates[(TmplPost(st2, (nm2, Value (stids, stid))))])) _ = (
	PPTemplates[TmplPost(dest_stub st1, (nm1, Value((st2, nm2) :: stids, stid)))]
) | red_stub_id_stub_ids _ _ _ _ = stack_error "red_stub_id_stub_ids";
=TEX
=SML
fun €red_id_stub› (Token((ZTId nm), _)) (Token(st, _)) _ =  (
	PPTemplates[TmplPre((nm, Nil), dest_stub st)]
) | red_id_stub _ _ _ = stack_error "red_id_stub";
=TEX
=SML
fun €red_id_stub_id› (Token((ZTId nm1), _)) (Token(st, _)) (Token((ZTId nm2), _)) _ = (
	PPTemplates[TmplNon((nm1, Value([], (dest_stub st, nm2))))]
) | red_id_stub_id _ _ _ _ = stack_error "red_id_stub_id";
=TEX
=SML
fun red_id_stub_id_stubs (Token((ZTId nm1), _)) (Token(st1, _))
		(Parsed(PPTemplates[(TmplPre((nm2, Nil), st2))])) _ = (
	PPTemplates[TmplPre((nm1, Value([], (dest_stub st1, nm2))), st2)]
) | red_id_stub_id_stubs (Token((ZTId nm1), _)) (Token(st1, _))
		(Parsed(PPTemplates[(TmplPre((nm2, Value(stids, stid)), st2))])) _ = (
	PPTemplates[TmplPre((nm1, Value((dest_stub st1, nm2) :: stids, stid)), st2)]
) | red_id_stub_id_stubs (Token((ZTId nm1), _)) (Token(st1, _))
		(Parsed(PPTemplates[(TmplNon((nm2, Nil)))])) _ = (
	PPTemplates[TmplNon(nm1, Value([], (dest_stub st1, nm2)))]
) | red_id_stub_id_stubs (Token((ZTId nm1), _)) (Token(st1, _))
		(Parsed(PPTemplates[(TmplNon((nm2, Value(stids, stid))))])) _ = (
	PPTemplates[TmplNon(nm1, Value((dest_stub st1, nm2) :: stids, stid))]
) | red_id_stub_id_stubs _ _ _ _ = stack_error "red_id_stub_id_stubs";
=TEX
=SML
fun €red_pred› _ = (raise PARSER_ERROR "not implemented"
) | red_pred _ = stack_error "red_pred";
=TEX
=SML
fun €red_pred_constraint› _ = (raise PARSER_ERROR "not implemented"
) | red_pred_constraint _ = stack_error "red_pred_constraint";
=TEX
=SML
fun €red_eq_def› _ = (raise PARSER_ERROR "not implemented"
) | red_eq_def _ = stack_error "red_eq_def";
=TEX
=SML
fun €red_schema› _ = (raise PARSER_ERROR "not implemented"
) | red_schema _ = stack_error "red_schema";
=TEX
=SML
fun €red_schema_no_pred› _ = (raise PARSER_ERROR "not implemented"
) | red_schema_no_pred _ = stack_error "red_schema_no_pred";
=TEX
=SML
fun €red_deflhs_pred› _ = (raise PARSER_ERROR "not implemented"
) | red_deflhs_pred _ = stack_error "red_deflhs_pred";
=TEX
=SML
fun €red_expr1_as_def_lhs› _ = (raise PARSER_ERROR "not implemented"
) | red_expr1_as_def_lhs _ = stack_error "red_expr1as_def_lhs";
=TEX
=SML
fun €red_a_free_type› _ = (raise PARSER_ERROR "not implemented"
) | red_a_free_type _ = stack_error "red_a_free_type";
=TEX
=SML
fun €red_free_types› _ = (raise PARSER_ERROR "not implemented"
) | red_free_types _ = stack_error "red_free_types";
=TEX
=SML
fun €red_pred_as_branch› _ = (raise PARSER_ERROR "not implemented"
) | red_pred_as_branch _ = stack_error "red_pred_as_branch";
=TEX
=SML
fun €red_branches› _ = (raise PARSER_ERROR "not implemented"
) | red_branches _ = stack_error "red_branches";
=TEX
=SML
fun €red_ax_box_no_pred› _ = (raise PARSER_ERROR "not implemented"
) | red_ax_box_no_pred _ = stack_error "red_ax_box_no_pred";
=TEX
=SML
fun €red_gen_ax_box_no_pred› _ = (raise PARSER_ERROR "not implemented"
) | red_gen_ax_box_no_pred _ = stack_error "red_gen_ax_box_no_pred";
=TEX
=SML
fun €red_ax_box_pred› _ = (raise PARSER_ERROR "not implemented"
) | red_ax_box_pred _ = stack_error "red_ax_box_pred";
=TEX
=SML
fun €red_gen_ax_box› _ = (raise PARSER_ERROR "not implemented"
) | red_gen_ax_box _ = stack_error "red_gen_ax_box";
=TEX
=SML
fun €red_conjecture› _ = (raise PARSER_ERROR "not implemented"
) | red_conjecture _ = stack_error "red_conjecture";
=TEX
=SML
fun €red_id_conjecture› _ = (raise PARSER_ERROR "not implemented"
) | red_id_conjecture _ = stack_error "red_id_conjecture";
=TEX
=SML
fun €red_pred1_as_pred› _ = (raise PARSER_ERROR "not implemented"
) | red_pred1_as_pred _ = stack_error "red_pred1_as_pred";
=TEX
=SML
fun €red_pred_semi_pred› _ = (raise PARSER_ERROR "not implemented"
) | red_pred_semi_pred _ = stack_error "red_pred_semi_pred";
=TEX
=SML
fun €red_pred2_as_pred1› _ = (raise PARSER_ERROR "not implemented"
) | red_pred2_as_pred1 _ = stack_error "red_pred2_as_pred1";
=TEX
=SML
fun €red_quant› _ = (raise PARSER_ERROR "not implemented"
) | red_quant _ = stack_error "red_quant";
=TEX
=SML
fun €red_quant_no_bar› _ = (raise PARSER_ERROR "not implemented"
) | red_quant_no_bar _ = stack_error "red_quant_no_bar";
=TEX
=SML
fun €red_let› _ = (raise PARSER_ERROR "not implemented"
) | red_let _ = stack_error "red_let";
=TEX
=SML
fun €red_pred3_as_pred2› _ = (raise PARSER_ERROR "not implemented"
) | red_pred3_as_pred2 _ = stack_error "red_pred3_as_pred2";
=TEX
=SML
fun €red_log_in_op› _ = (raise PARSER_ERROR "not implemented"
) | red_log_in_op _ = stack_error "red_log_in_op";
=TEX
=SML
fun €red_schema2_as_pred3› _ = (raise PARSER_ERROR "not implemented"
) | red_schema2_as_pred3 _ = stack_error "red_schema2_as_pred3";
=TEX
=SML
fun €red_neg› _ = (raise PARSER_ERROR "not implemented"
) | red_neg _ = stack_error "red_neg";
=TEX
=SML
fun €red_schema3_as_schema2› _ = (raise PARSER_ERROR "not implemented"
) | red_schema3_as_schema2 _ = stack_error "red_schema3_as_schema2";
=TEX
=SML
fun €red_sch_in_op› _ = (raise PARSER_ERROR "not implemented"
) | red_sch_in_op _ = stack_error "red_sch_in_op";
=TEX
=SML
fun €red_schema4_as_schema3› _ = (raise PARSER_ERROR "not implemented"
) | red_schema4_as_schema3 _ = stack_error "red_schema4_as_schema3";
=TEX
=SML
fun €red_sch_pre_op› _ = (raise PARSER_ERROR "not implemented"
) | red_sch_pre_op _ = stack_error "red_sch_pre_op";
=TEX
=SML
fun €red_expr0_as_schema4› _ = (raise PARSER_ERROR "not implemented"
) | red_expr0_as_schema4 _ = stack_error "red_expr0_as_schema4";
=TEX
=SML
fun €red_schema_hiding› _ = (raise PARSER_ERROR "not implemented"
) | red_schema_hiding _ = stack_error "red_schema_hiding";
=TEX
=SML
fun €red_rename_list› _ = (raise PARSER_ERROR "not implemented"
) | red_rename_list _ = stack_error "red_rename_list";
=TEX
=SML
fun €red_rename› _ = (raise PARSER_ERROR "not implemented"
) | red_rename _ = stack_error "red_rename";
=TEX
=SML
fun €red_renames› _ = (raise PARSER_ERROR "not implemented"
) | red_renames _ = stack_error "red_renames";
=TEX
=SML
fun €red_decl_minus_pred› _ = (raise PARSER_ERROR "not implemented"
) | red_decl_minus_pred _ = stack_error "red_decl_minus_pred";
=TEX
=SML
fun €red_pred1_as_decl› _ = (raise PARSER_ERROR "not implemented"
) | red_pred1_as_decl _ = stack_error "red_pred1_as_decl";
=TEX
=SML
fun €red_decl_semi_var_decs_pred1› _ = (raise PARSER_ERROR "not implemented"
) | red_decl_semi_var_decs_pred1 _ = stack_error "red_decl_semi_var_decs_pred1";
=TEX
=SML
fun €red_decl_semi_pred1› _ = (raise PARSER_ERROR "not implemented"
) | red_decl_semi_pred1 _ = stack_error "red_decl_semi_pred1";
=TEX
=SML
fun €red_var_decs_pred1› _ = (raise PARSER_ERROR "not implemented"
) | red_var_decs_pred1 _ = stack_error "red_var_decs_pred1";
=TEX
=SML
fun €red_var_decs_pred1› _ = (raise PARSER_ERROR "not implemented"
) | red_var_decs_pred1 _ = stack_error "red_var_decs_pred1";
=TEX
=SML
fun €red_pred1_as_decl› _ = (raise PARSER_ERROR "not implemented"
) | red_pred1_as_decl _ = stack_error "red_pred1_as_decl";
=TEX
=SML
fun €red_decl_semi_var_decs_pred1› _ = (raise PARSER_ERROR "not implemented"
) | red_decl_semi_var_decs_pred1 _ = stack_error "red_decl_semi_var_decs_pred1";
=TEX
=SML
fun €red_decl_semi_pred1_semi› _ = (raise PARSER_ERROR "not implemented"
) | red_decl_semi_pred1_semi _ = stack_error "red_decl_semi_pred1_semi";
=TEX
=SML
fun €red_expr1_as_expr0› _ = (raise PARSER_ERROR "not implemented"
) | red_expr1_as_expr0 _ = stack_error "red_expr1_as_expr0";
=TEX
=SML
fun €red_mu_lambda_no_pred› _ = (raise PARSER_ERROR "not implemented"
) | red_mu_lambda_no_pred _ = stack_error "red_mu_lambda_no_pred";
=TEX
=SML
fun €red_mu_lambda› _ = (raise PARSER_ERROR "not implemented"
) | red_mu_lambda _ = stack_error "red_mu_lambda";
=TEX
=SML
fun €red_eq_def_as_eq_defs› _ = (raise PARSER_ERROR "not implemented"
) | red_eq_def_as_eq_defs _ = stack_error "red_eq_def_as_eq_defs";
=TEX
=SML
fun €red_eq_defs› _ = (raise PARSER_ERROR "not implemented"
) | red_eq_defs _ = stack_error "red_eq_defs";
=TEX
=SML
fun €red_expr2_as_expr1› _ = (raise PARSER_ERROR "not implemented"
) | red_expr2_as_expr1 _ = stack_error "red_expr2_as_expr1";
=TEX
=SML
fun €red_pre_op› _ = (raise PARSER_ERROR "not implemented"
) | red_pre_op _ = stack_error "red_pre_op";
=TEX
=SML
fun €red_post_op› _ = (raise PARSER_ERROR "not implemented"
) | red_post_op _ = stack_error "red_post_op";
=TEX
=SML
fun €red_in_op› _ = (raise PARSER_ERROR "not implemented"
) | red_in_op _ = stack_error "red_in_op";
=TEX
=SML
fun €red_bo_ce_eo› _ = (raise PARSER_ERROR "not implemented"
) | red_bo_ce_eo _ = stack_error "red_bo_ce_eo";
=TEX
=SML
fun €red_bo_ce_peo› _ = (raise PARSER_ERROR "not implemented"
) | red_bo_ce_peo _ = stack_error "red_bo_ce_peo";
=TEX
=SML
fun €red_pbo_ce_eo› _ = (raise PARSER_ERROR "not implemented"
) | red_pbo_ce_eo _ = stack_error "red_pbo_ce_eo";
=TEX
=SML
fun €red_pbo_ce_peo› _ = (raise PARSER_ERROR "not implemented"
) | red_pbo_ce_peo _ = stack_error "red_pbo_ce_peo";
=TEX
=SML
fun €red_cross› _ = (raise PARSER_ERROR "not implemented"
) | red_cross _ = stack_error "red_cross";
=TEX
=SML
fun €red_exprs› _ = (raise PARSER_ERROR "not implemented"
) | red_exprs _ = stack_error "red_exprs";
=TEX
=SML
fun €red_es_to_ce› _ = (raise PARSER_ERROR "not implemented"
) | red_es_to_ce _ = stack_error "red_es_to_ce";
=TEX
=SML
fun €red_no_exprs› _ = (raise PARSER_ERROR "not implemented"
) | red_no_exprs _ = stack_error "red_no_exprs";
=TEX
=SML
fun €red_some_exprs› _ = (raise PARSER_ERROR "not implemented"
) | red_some_exprs _ = stack_error "red_some_exprs";
=TEX
=SML
fun €red_pred1_as_some_exprs› _ = (raise PARSER_ERROR "not implemented"
) | red_pred1_as_some_exprs _ = stack_error "red_pred1_as_some_exprs";
=TEX
=SML
fun €red_some_exprs› _ = (raise PARSER_ERROR "not implemented"
) | red_some_exprs _ = stack_error "red_some_exprs";
=TEX
=SML
fun €red_expr2_as_expr3› _ = (raise PARSER_ERROR "not implemented"
) | red_expr2_as_expr3 _ = stack_error "red_expr2_as_expr3";
=TEX
=SML
fun €red_pow› _ = (raise PARSER_ERROR "not implemented"
) | red_pow _ = stack_error "red_pow";
=TEX
=SML
fun €red_expr4_as_expr3› _ = (raise PARSER_ERROR "not implemented"
) | red_expr4_as_expr3 _ = stack_error "red_expr4_as_expr3";
=TEX
=SML
fun €red_expr3_expr4› _ = (raise PARSER_ERROR "not implemented"
) | red_expr3_expr4 _ = stack_error "red_expr3_expr4";
=TEX
=SML
fun €red_theta› _ = (raise PARSER_ERROR "not implemented"
) | red_theta _ = stack_error "red_theta";
=TEX
=SML
fun €red_expr3_dot_expr4› _ = (raise PARSER_ERROR "not implemented"
) | red_expr3_dot_expr4 _ = stack_error "red_expr3_dot_expr4";
=TEX
=SML
fun €red_id_dec_as_exp› _ = (raise PARSER_ERROR "not implemented"
) | red_id_dec_as_exp _ = stack_error "red_id_dec_as_exp";
=TEX
=SML
fun €red_quotation› _ = (raise PARSER_ERROR "not implemented"
) | red_quotation _ = stack_error "red_quotation";
=TEX
=SML
fun €red_stub› _ = (raise PARSER_ERROR "not implemented"
) | red_stub _ = stack_error "red_stub";
=TEX
=SML
fun €red_number› _ = (raise PARSER_ERROR "not implemented"
) | red_number _ = stack_error "red_number";
=TEX
=SML
fun €red_string› _ = (raise PARSER_ERROR "not implemented"
) | red_string _ = stack_error "red_string";
=TEX
=SML
fun €red_tuple› _ = (raise PARSER_ERROR "not implemented"
) | red_tuple _ = stack_error "red_tuple";
=TEX
=SML
fun €red_set_display› _ = (raise PARSER_ERROR "not implemented"
) | red_set_display _ = stack_error "red_set_display";
=TEX
=SML
fun €red_sequence_brk› _ = (raise PARSER_ERROR "not implemented"
) | red_sequence_brk _ = stack_error "red_sequence_brk";
=TEX
=SML
fun €red_set_comp_no_spot› _ = (raise PARSER_ERROR "not implemented"
) | red_set_comp_no_spot _ = stack_error "red_set_comp_no_spot";
=TEX
=SML
fun €red_set_comp_no_pred› _ = (raise PARSER_ERROR "not implemented"
) | red_set_comp_no_pred _ = stack_error "red_set_comp_no_pred";
=TEX
=SML
fun €red_set_comp› _ = (raise PARSER_ERROR "not implemented"
) | red_set_comp _ = stack_error "red_set_comp";
=TEX
=SML
fun €red_set_comp_no_bar› _ = (raise PARSER_ERROR "not implemented"
) | red_set_comp_no_bar _ = stack_error "red_set_comp_no_bar";
=TEX
=SML
fun €red_horiz_schema› _ = (raise PARSER_ERROR "not implemented"
) | red_horiz_schema _ = stack_error "red_horiz_schema";
=TEX
=SML
fun €red_horiz_schema_no_pred› _ = (raise PARSER_ERROR "not implemented"
) | red_horiz_schema_no_pred _ = stack_error "red_horiz_schema_no_pred";
=TEX
=SML
fun €red_gen_inst› _ = (raise PARSER_ERROR "not implemented"
) | red_gen_inst _ = stack_error "red_gen_inst";
=TEX
=SML
fun €red_rename_list_as_expr› _ = (raise PARSER_ERROR "not implemented"
) | red_rename_list_as_expr _ = stack_error "red_rename_list_as_expr";
=TEX
=SML
fun €red_brk_pred› _ = (raise PARSER_ERROR "not implemented"
) | red_brk_pred _ = stack_error "red_brk_pred";
=TEX
=SML
fun €red_pred_decor› _ = (raise PARSER_ERROR "not implemented"
) | red_pred_decor _ = stack_error "red_pred_decor";
=TEX
=SML
fun €red_id› _ = (raise PARSER_ERROR "not implemented"
) | red_id _ = stack_error "red_id";
=TEX
=SML
fun €red_id_dec› _ = (raise PARSER_ERROR "not implemented"
) | red_id_dec _ = stack_error "red_id_dec";
=TEX

=TEX
\section{EPILOGUE}
SML
end (* of structure Parser *);
=TEX
\small
\twocolumn[\section{INDEX}]
\printindex

\end{document}
=IGN


ÒxÆ;
Òx yÆ;
Ò(x)Æ;
Ò(x y)Æ;
Ò[x]Æ;
Òx [y]Æ;
Ò[y|z]Æ;
Òx [y|z]Æ;
Òfun 10 3Æ;
Ò[a,b,c]Æ;



∞
